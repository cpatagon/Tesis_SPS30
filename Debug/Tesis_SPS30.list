
Tesis_SPS30.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a85c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000944  0800aa10  0800aa10  0001aa10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b354  0800b354  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800b354  0800b354  0001b354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b35c  0800b35c  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b35c  0800b35c  0001b35c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b360  0800b360  0001b360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800b364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020210  2**0
                  CONTENTS
 10 .bss          00001d90  20000210  20000210  00020210  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001fa0  20001fa0  00020210  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001289e  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030a0  00000000  00000000  00032ade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e20  00000000  00000000  00035b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cc8  00000000  00000000  000369a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025d46  00000000  00000000  00037668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001662a  00000000  00000000  0005d3ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dcb2e  00000000  00000000  000739d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00150506  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d98  00000000  00000000  00150558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000210 	.word	0x20000210
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a9f4 	.word	0x0800a9f4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000214 	.word	0x20000214
 80001ec:	0800a9f4 	.word	0x0800a9f4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <buffer_circular_agregar>:
 * @brief Añade una medición al buffer circular especificado
 *
 * @param buffer Buffer donde almacenar la medición
 * @param medicion Medición a almacenar
 */
static void buffer_circular_agregar(BufferCircular* buffer, const MedicionMP* medicion) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
    uint32_t indice;

    if (buffer->cantidad < buffer->capacidad) {
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	68da      	ldr	r2, [r3, #12]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	429a      	cmp	r2, r3
 800102c:	d212      	bcs.n	8001054 <buffer_circular_agregar+0x3c>
        // El buffer aún no está lleno
        indice = (buffer->inicio + buffer->cantidad) % buffer->capacidad;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	689a      	ldr	r2, [r3, #8]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	4413      	add	r3, r2
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	6852      	ldr	r2, [r2, #4]
 800103c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001040:	fb01 f202 	mul.w	r2, r1, r2
 8001044:	1a9b      	subs	r3, r3, r2
 8001046:	60fb      	str	r3, [r7, #12]
        buffer->cantidad++;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	1c5a      	adds	r2, r3, #1
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	e00e      	b.n	8001072 <buffer_circular_agregar+0x5a>
    } else {
        // El buffer está lleno, sobrescribir el elemento más antiguo
        indice = buffer->inicio;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	60fb      	str	r3, [r7, #12]
        buffer->inicio = (buffer->inicio + 1) % buffer->capacidad;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	3301      	adds	r3, #1
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	6852      	ldr	r2, [r2, #4]
 8001064:	fbb3 f1f2 	udiv	r1, r3, r2
 8001068:	fb01 f202 	mul.w	r2, r1, r2
 800106c:	1a9a      	subs	r2, r3, r2
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	609a      	str	r2, [r3, #8]
    }

    // Copiar la medición al buffer
    memcpy(&buffer->datos[indice], medicion, sizeof(MedicionMP));
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6819      	ldr	r1, [r3, #0]
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	4613      	mov	r3, r2
 800107a:	011b      	lsls	r3, r3, #4
 800107c:	1a9b      	subs	r3, r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	440b      	add	r3, r1
 8001082:	223c      	movs	r2, #60	; 0x3c
 8001084:	6839      	ldr	r1, [r7, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f004 ff8c 	bl	8005fa4 <memcpy>
}
 800108c:	bf00      	nop
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <data_logger_init>:

/* === Public function implementation ========================================================== */

bool data_logger_init(void) {
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
    // Inicializar buffers
    memset(buffer_alta_frec, 0, sizeof(buffer_alta_frec));
 8001098:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800109c:	2100      	movs	r1, #0
 800109e:	4812      	ldr	r0, [pc, #72]	; (80010e8 <data_logger_init+0x54>)
 80010a0:	f004 ff8e 	bl	8005fc0 <memset>
    memset(buffer_horario, 0, sizeof(buffer_horario));
 80010a4:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 80010a8:	2100      	movs	r1, #0
 80010aa:	4810      	ldr	r0, [pc, #64]	; (80010ec <data_logger_init+0x58>)
 80010ac:	f004 ff88 	bl	8005fc0 <memset>
    memset(buffer_diario, 0, sizeof(buffer_diario));
 80010b0:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80010b4:	2100      	movs	r1, #0
 80010b6:	480e      	ldr	r0, [pc, #56]	; (80010f0 <data_logger_init+0x5c>)
 80010b8:	f004 ff82 	bl	8005fc0 <memset>

    buffer_alta_frecuencia.inicio = 0;
 80010bc:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <data_logger_init+0x60>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
    buffer_alta_frecuencia.cantidad = 0;
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <data_logger_init+0x60>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	60da      	str	r2, [r3, #12]

    buffer_hora.inicio = 0;
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <data_logger_init+0x64>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
    buffer_hora.cantidad = 0;
 80010ce:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <data_logger_init+0x64>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	60da      	str	r2, [r3, #12]

    buffer_dia.inicio = 0;
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <data_logger_init+0x68>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
    buffer_dia.cantidad = 0;
 80010da:	4b08      	ldr	r3, [pc, #32]	; (80010fc <data_logger_init+0x68>)
 80010dc:	2200      	movs	r2, #0
 80010de:	60da      	str	r2, [r3, #12]

    return true;
 80010e0:	2301      	movs	r3, #1
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	2000022c 	.word	0x2000022c
 80010ec:	2000103c 	.word	0x2000103c
 80010f0:	200015dc 	.word	0x200015dc
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000010 	.word	0x20000010
 80010fc:	20000020 	.word	0x20000020

08001100 <data_logger_store_measurement>:

bool data_logger_store_measurement(uint8_t sensor_id, ConcentracionesPM valores,
                                   float temperatura, float humedad) {
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b0a1      	sub	sp, #132	; 0x84
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	eeb0 6a40 	vmov.f32	s12, s0
 800110c:	eef0 6a60 	vmov.f32	s13, s1
 8001110:	eeb0 7a41 	vmov.f32	s14, s2
 8001114:	eef0 7a61 	vmov.f32	s15, s3
 8001118:	ed87 2a02 	vstr	s4, [r7, #8]
 800111c:	edc7 2a01 	vstr	s5, [r7, #4]
 8001120:	77fb      	strb	r3, [r7, #31]
 8001122:	ed87 6a03 	vstr	s12, [r7, #12]
 8001126:	edc7 6a04 	vstr	s13, [r7, #16]
 800112a:	ed87 7a05 	vstr	s14, [r7, #20]
 800112e:	edc7 7a06 	vstr	s15, [r7, #24]
    char timestamp[32];
    MedicionMP nueva_medicion;

    // Obtener timestamp actual
    time_rtc_GetFormattedDateTime(timestamp, sizeof(timestamp));
 8001132:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001136:	2120      	movs	r1, #32
 8001138:	4618      	mov	r0, r3
 800113a:	f000 ffc9 	bl	80020d0 <time_rtc_GetFormattedDateTime>

    // Completar estructura de medición
    strcpy(nueva_medicion.timestamp, timestamp);
 800113e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f005 fe8b 	bl	8006e64 <strcpy>
    nueva_medicion.sensor_id = sensor_id;
 800114e:	7ffb      	ldrb	r3, [r7, #31]
 8001150:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    nueva_medicion.valores = valores;
 8001154:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800115e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    nueva_medicion.temperatura = temperatura;
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	65bb      	str	r3, [r7, #88]	; 0x58
    nueva_medicion.humedad = humedad;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	65fb      	str	r3, [r7, #92]	; 0x5c

    // Almacenar en buffer de alta frecuencia
    buffer_circular_agregar(&buffer_alta_frecuencia, &nueva_medicion);
 800116a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116e:	4619      	mov	r1, r3
 8001170:	4803      	ldr	r0, [pc, #12]	; (8001180 <data_logger_store_measurement+0x80>)
 8001172:	f7ff ff51 	bl	8001018 <buffer_circular_agregar>

    // Actualizar buffers de hora y día según corresponda
    // (implementación pendiente)

    return true;
 8001176:	2301      	movs	r3, #1
}
 8001178:	4618      	mov	r0, r3
 800117a:	3784      	adds	r7, #132	; 0x84
 800117c:	46bd      	mov	sp, r7
 800117e:	bd90      	pop	{r4, r7, pc}
 8001180:	20000000 	.word	0x20000000

08001184 <data_logger_get_average_pm25>:

float data_logger_get_average_pm25(uint8_t sensor_id, uint32_t num_mediciones) {
 8001184:	b480      	push	{r7}
 8001186:	b087      	sub	sp, #28
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	71fb      	strb	r3, [r7, #7]
    float suma = 0.0f;
 8001190:	f04f 0300 	mov.w	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
    uint32_t contador = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]

    // Limitar la cantidad de mediciones a usar
    if (num_mediciones > buffer_alta_frecuencia.cantidad) {
 800119a:	4b30      	ldr	r3, [pc, #192]	; (800125c <data_logger_get_average_pm25+0xd8>)
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d902      	bls.n	80011aa <data_logger_get_average_pm25+0x26>
        num_mediciones = buffer_alta_frecuencia.cantidad;
 80011a4:	4b2d      	ldr	r3, [pc, #180]	; (800125c <data_logger_get_average_pm25+0xd8>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	603b      	str	r3, [r7, #0]
    }

    // Si no hay mediciones, retornar 0
    if (num_mediciones == 0) {
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d102      	bne.n	80011b6 <data_logger_get_average_pm25+0x32>
        return 0.0f;
 80011b0:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8001260 <data_logger_get_average_pm25+0xdc>
 80011b4:	e04b      	b.n	800124e <data_logger_get_average_pm25+0xca>
    }

    // Calcular promedio de las últimas 'num_mediciones'
    for (uint32_t i = 0; i < num_mediciones; i++) {
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	e035      	b.n	8001228 <data_logger_get_average_pm25+0xa4>
        uint32_t indice = (buffer_alta_frecuencia.inicio +
 80011bc:	4b27      	ldr	r3, [pc, #156]	; (800125c <data_logger_get_average_pm25+0xd8>)
 80011be:	689a      	ldr	r2, [r3, #8]
                         buffer_alta_frecuencia.cantidad - i - 1) %
 80011c0:	4b26      	ldr	r3, [pc, #152]	; (800125c <data_logger_get_average_pm25+0xd8>)
 80011c2:	68db      	ldr	r3, [r3, #12]
        uint32_t indice = (buffer_alta_frecuencia.inicio +
 80011c4:	441a      	add	r2, r3
                         buffer_alta_frecuencia.cantidad - i - 1) %
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	3b01      	subs	r3, #1
                         buffer_alta_frecuencia.capacidad;
 80011cc:	4a23      	ldr	r2, [pc, #140]	; (800125c <data_logger_get_average_pm25+0xd8>)
 80011ce:	6852      	ldr	r2, [r2, #4]
        uint32_t indice = (buffer_alta_frecuencia.inicio +
 80011d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80011d4:	fb01 f202 	mul.w	r2, r1, r2
 80011d8:	1a9b      	subs	r3, r3, r2
 80011da:	60bb      	str	r3, [r7, #8]

        // Filtrar por sensor_id si es necesario
        if (sensor_id == 0 || buffer_alta_frecuencia.datos[indice].sensor_id == sensor_id) {
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d00c      	beq.n	80011fc <data_logger_get_average_pm25+0x78>
 80011e2:	4b1e      	ldr	r3, [pc, #120]	; (800125c <data_logger_get_average_pm25+0xd8>)
 80011e4:	6819      	ldr	r1, [r3, #0]
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	4613      	mov	r3, r2
 80011ea:	011b      	lsls	r3, r3, #4
 80011ec:	1a9b      	subs	r3, r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	440b      	add	r3, r1
 80011f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011f6:	79fa      	ldrb	r2, [r7, #7]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d112      	bne.n	8001222 <data_logger_get_average_pm25+0x9e>
            suma += buffer_alta_frecuencia.datos[indice].valores.pm2_5;
 80011fc:	4b17      	ldr	r3, [pc, #92]	; (800125c <data_logger_get_average_pm25+0xd8>)
 80011fe:	6819      	ldr	r1, [r3, #0]
 8001200:	68ba      	ldr	r2, [r7, #8]
 8001202:	4613      	mov	r3, r2
 8001204:	011b      	lsls	r3, r3, #4
 8001206:	1a9b      	subs	r3, r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	440b      	add	r3, r1
 800120c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001210:	ed97 7a05 	vldr	s14, [r7, #20]
 8001214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001218:	edc7 7a05 	vstr	s15, [r7, #20]
            contador++;
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	3301      	adds	r3, #1
 8001220:	613b      	str	r3, [r7, #16]
    for (uint32_t i = 0; i < num_mediciones; i++) {
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	3301      	adds	r3, #1
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fa      	ldr	r2, [r7, #12]
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	429a      	cmp	r2, r3
 800122e:	d3c5      	bcc.n	80011bc <data_logger_get_average_pm25+0x38>
        }
    }

    // Retornar promedio o 0 si no hay datos
    return (contador > 0) ? (suma / contador) : 0.0f;
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d009      	beq.n	800124a <data_logger_get_average_pm25+0xc6>
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	ee07 3a90 	vmov	s15, r3
 800123c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001240:	edd7 6a05 	vldr	s13, [r7, #20]
 8001244:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001248:	e001      	b.n	800124e <data_logger_get_average_pm25+0xca>
 800124a:	eddf 7a05 	vldr	s15, [pc, #20]	; 8001260 <data_logger_get_average_pm25+0xdc>
}
 800124e:	eeb0 0a67 	vmov.f32	s0, s15
 8001252:	371c      	adds	r7, #28
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	20000000 	.word	0x20000000
 8001260:	00000000 	.word	0x00000000

08001264 <data_logger_print_summary>:

void data_logger_print_summary(UART_Printing* uart) {
 8001264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001266:	b0cd      	sub	sp, #308	; 0x134
 8001268:	af06      	add	r7, sp, #24
 800126a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800126e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001272:	6018      	str	r0, [r3, #0]
    char buffer[256];

    // Imprimir encabezado
    snprintf(buffer, sizeof(buffer),
 8001274:	4b4a      	ldr	r3, [pc, #296]	; (80013a0 <data_logger_print_summary+0x13c>)
 8001276:	68de      	ldr	r6, [r3, #12]
 8001278:	4b49      	ldr	r3, [pc, #292]	; (80013a0 <data_logger_print_summary+0x13c>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	4a49      	ldr	r2, [pc, #292]	; (80013a4 <data_logger_print_summary+0x140>)
 800127e:	68d2      	ldr	r2, [r2, #12]
 8001280:	4948      	ldr	r1, [pc, #288]	; (80013a4 <data_logger_print_summary+0x140>)
 8001282:	6849      	ldr	r1, [r1, #4]
 8001284:	4848      	ldr	r0, [pc, #288]	; (80013a8 <data_logger_print_summary+0x144>)
 8001286:	68c0      	ldr	r0, [r0, #12]
 8001288:	4c47      	ldr	r4, [pc, #284]	; (80013a8 <data_logger_print_summary+0x144>)
 800128a:	6864      	ldr	r4, [r4, #4]
 800128c:	f107 050c 	add.w	r5, r7, #12
 8001290:	9404      	str	r4, [sp, #16]
 8001292:	9003      	str	r0, [sp, #12]
 8001294:	9102      	str	r1, [sp, #8]
 8001296:	9201      	str	r2, [sp, #4]
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	4633      	mov	r3, r6
 800129c:	4a43      	ldr	r2, [pc, #268]	; (80013ac <data_logger_print_summary+0x148>)
 800129e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012a2:	4628      	mov	r0, r5
 80012a4:	f005 fd8a 	bl	8006dbc <sniprintf>
            "Buffer diario: %lu/%lu muestras\n",
            buffer_alta_frecuencia.cantidad, buffer_alta_frecuencia.capacidad,
            buffer_hora.cantidad, buffer_hora.capacidad,
            buffer_dia.cantidad, buffer_dia.capacidad);

    uart->print(uart, buffer);
 80012a8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80012ac:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f107 010c 	add.w	r1, r7, #12
 80012b8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80012bc:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 80012c0:	6810      	ldr	r0, [r2, #0]
 80012c2:	4798      	blx	r3

    // Imprimir últimas mediciones si hay datos
    if (buffer_alta_frecuencia.cantidad > 0) {
 80012c4:	4b36      	ldr	r3, [pc, #216]	; (80013a0 <data_logger_print_summary+0x13c>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d064      	beq.n	8001396 <data_logger_print_summary+0x132>
        uart->print(uart, "\nÚltimas 3 mediciones:\n");
 80012cc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80012d0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80012dc:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 80012e0:	4933      	ldr	r1, [pc, #204]	; (80013b0 <data_logger_print_summary+0x14c>)
 80012e2:	6810      	ldr	r0, [r2, #0]
 80012e4:	4798      	blx	r3

        for (uint32_t i = 0; i < 3 && i < buffer_alta_frecuencia.cantidad; i++) {
 80012e6:	2300      	movs	r3, #0
 80012e8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80012ec:	e049      	b.n	8001382 <data_logger_print_summary+0x11e>
            uint32_t indice = (buffer_alta_frecuencia.inicio +
 80012ee:	4b2c      	ldr	r3, [pc, #176]	; (80013a0 <data_logger_print_summary+0x13c>)
 80012f0:	689a      	ldr	r2, [r3, #8]
                             buffer_alta_frecuencia.cantidad - i - 1) %
 80012f2:	4b2b      	ldr	r3, [pc, #172]	; (80013a0 <data_logger_print_summary+0x13c>)
 80012f4:	68db      	ldr	r3, [r3, #12]
            uint32_t indice = (buffer_alta_frecuencia.inicio +
 80012f6:	441a      	add	r2, r3
                             buffer_alta_frecuencia.cantidad - i - 1) %
 80012f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	3b01      	subs	r3, #1
                             buffer_alta_frecuencia.capacidad;
 8001300:	4a27      	ldr	r2, [pc, #156]	; (80013a0 <data_logger_print_summary+0x13c>)
 8001302:	6852      	ldr	r2, [r2, #4]
            uint32_t indice = (buffer_alta_frecuencia.inicio +
 8001304:	fbb3 f1f2 	udiv	r1, r3, r2
 8001308:	fb01 f202 	mul.w	r2, r1, r2
 800130c:	1a9b      	subs	r3, r3, r2
 800130e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

            MedicionMP* medicion = &buffer_alta_frecuencia.datos[indice];
 8001312:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <data_logger_print_summary+0x13c>)
 8001314:	6819      	ldr	r1, [r3, #0]
 8001316:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800131a:	4613      	mov	r3, r2
 800131c:	011b      	lsls	r3, r3, #4
 800131e:	1a9b      	subs	r3, r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	440b      	add	r3, r1
 8001324:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

            snprintf(buffer, sizeof(buffer),
                    "[%s] Sensor %d: PM2.5=%.2f ug/m3\n",
                    medicion->timestamp,
 8001328:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
                    medicion->sensor_id,
 800132c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001330:	f893 3020 	ldrb.w	r3, [r3, #32]
            snprintf(buffer, sizeof(buffer),
 8001334:	461d      	mov	r5, r3
                    medicion->valores.pm2_5);
 8001336:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800133a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            snprintf(buffer, sizeof(buffer),
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f913 	bl	8000568 <__aeabi_f2d>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	f107 000c 	add.w	r0, r7, #12
 800134a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800134e:	9500      	str	r5, [sp, #0]
 8001350:	4623      	mov	r3, r4
 8001352:	4a18      	ldr	r2, [pc, #96]	; (80013b4 <data_logger_print_summary+0x150>)
 8001354:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001358:	f005 fd30 	bl	8006dbc <sniprintf>

            uart->print(uart, buffer);
 800135c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001360:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f107 010c 	add.w	r1, r7, #12
 800136c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001370:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8001374:	6810      	ldr	r0, [r2, #0]
 8001376:	4798      	blx	r3
        for (uint32_t i = 0; i < 3 && i < buffer_alta_frecuencia.cantidad; i++) {
 8001378:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800137c:	3301      	adds	r3, #1
 800137e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001386:	2b02      	cmp	r3, #2
 8001388:	d805      	bhi.n	8001396 <data_logger_print_summary+0x132>
 800138a:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <data_logger_print_summary+0x13c>)
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001392:	429a      	cmp	r2, r3
 8001394:	d3ab      	bcc.n	80012ee <data_logger_print_summary+0x8a>
        }
    }
}
 8001396:	bf00      	nop
 8001398:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800139c:	46bd      	mov	sp, r7
 800139e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a0:	20000000 	.word	0x20000000
 80013a4:	20000010 	.word	0x20000010
 80013a8:	20000020 	.word	0x20000020
 80013ac:	0800aa10 	.word	0x0800aa10
 80013b0:	0800aaa4 	.word	0x0800aaa4
 80013b4:	0800aac0 	.word	0x0800aac0

080013b8 <proceso_observador>:
#include "proceso_observador.h"
#include "time_rtc.h"
#include <stdio.h>

/* === Definición de funciones ============================================================= */
bool proceso_observador(SPS30* sensor, UART_Printing* uart, uint8_t sensor_id) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08c      	sub	sp, #48	; 0x30
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	4613      	mov	r3, r2
 80013c4:	71fb      	strb	r3, [r7, #7]
    // Obtener timestamp actual
    char datetime_buffer[32];
    time_rtc_GetFormattedDateTime(datetime_buffer, sizeof(datetime_buffer));
 80013c6:	f107 0310 	add.w	r3, r7, #16
 80013ca:	2120      	movs	r1, #32
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 fe7f 	bl	80020d0 <time_rtc_GetFormattedDateTime>

    return proceso_observador_with_time(sensor, uart, sensor_id, datetime_buffer);
 80013d2:	f107 0310 	add.w	r3, r7, #16
 80013d6:	79fa      	ldrb	r2, [r7, #7]
 80013d8:	68b9      	ldr	r1, [r7, #8]
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f000 f806 	bl	80013ec <proceso_observador_with_time>
 80013e0:	4603      	mov	r3, r0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3730      	adds	r7, #48	; 0x30
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <proceso_observador_with_time>:

bool proceso_observador_with_time(SPS30* sensor, UART_Printing* uart, uint8_t sensor_id, const char* datetime_str) {
 80013ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013f0:	b0ed      	sub	sp, #436	; 0x1b4
 80013f2:	af0a      	add	r7, sp, #40	; 0x28
 80013f4:	f507 74c4 	add.w	r4, r7, #392	; 0x188
 80013f8:	f5a4 74be 	sub.w	r4, r4, #380	; 0x17c
 80013fc:	6020      	str	r0, [r4, #0]
 80013fe:	f507 70c4 	add.w	r0, r7, #392	; 0x188
 8001402:	f5a0 70c0 	sub.w	r0, r0, #384	; 0x180
 8001406:	6001      	str	r1, [r0, #0]
 8001408:	4611      	mov	r1, r2
 800140a:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 800140e:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8001412:	6013      	str	r3, [r2, #0]
 8001414:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001418:	f2a3 1381 	subw	r3, r3, #385	; 0x181
 800141c:	460a      	mov	r2, r1
 800141e:	701a      	strb	r2, [r3, #0]
    int reintentos = NUM_REINT;
 8001420:	2303      	movs	r3, #3
 8001422:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184

    while (reintentos--) {
 8001426:	e0ca      	b.n	80015be <proceso_observador_with_time+0x1d2>
        sensor->start_measurement(sensor);
 8001428:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800142c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	691b      	ldr	r3, [r3, #16]
 8001434:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8001438:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800143c:	6810      	ldr	r0, [r2, #0]
 800143e:	4798      	blx	r3
        HAL_Delay(HAL_DELAY_SIGUIENTE_MEDICION);
 8001440:	f241 3088 	movw	r0, #5000	; 0x1388
 8001444:	f001 fe0e 	bl	8003064 <HAL_Delay>

        ConcentracionesPM pm = sensor->get_concentrations(sensor);
 8001448:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800144c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001454:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8001458:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800145c:	6810      	ldr	r0, [r2, #0]
 800145e:	4798      	blx	r3
 8001460:	eeb0 6a40 	vmov.f32	s12, s0
 8001464:	eef0 6a60 	vmov.f32	s13, s1
 8001468:	eeb0 7a41 	vmov.f32	s14, s2
 800146c:	eef0 7a61 	vmov.f32	s15, s3
 8001470:	ed87 6a45 	vstr	s12, [r7, #276]	; 0x114
 8001474:	edc7 6a46 	vstr	s13, [r7, #280]	; 0x118
 8001478:	ed87 7a47 	vstr	s14, [r7, #284]	; 0x11c
 800147c:	edc7 7a48 	vstr	s15, [r7, #288]	; 0x120
        sensor->stop_measurement(sensor);
 8001480:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001484:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8001490:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001494:	6810      	ldr	r0, [r2, #0]
 8001496:	4798      	blx	r3

        if ((pm.pm1_0 > CONC_MIN_PM && pm.pm1_0 < CONC_MAX_PM) ||
 8001498:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 800149c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a4:	dd08      	ble.n	80014b8 <proceso_observador_with_time+0xcc>
 80014a6:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 80014aa:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 800161c <proceso_observador_with_time+0x230>
 80014ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b6:	d42f      	bmi.n	8001518 <proceso_observador_with_time+0x12c>
            (pm.pm2_5 > CONC_MIN_PM && pm.pm2_5 < CONC_MAX_PM) ||
 80014b8:	edd7 7a46 	vldr	s15, [r7, #280]	; 0x118
        if ((pm.pm1_0 > CONC_MIN_PM && pm.pm1_0 < CONC_MAX_PM) ||
 80014bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c4:	dd08      	ble.n	80014d8 <proceso_observador_with_time+0xec>
            (pm.pm2_5 > CONC_MIN_PM && pm.pm2_5 < CONC_MAX_PM) ||
 80014c6:	edd7 7a46 	vldr	s15, [r7, #280]	; 0x118
 80014ca:	ed9f 7a54 	vldr	s14, [pc, #336]	; 800161c <proceso_observador_with_time+0x230>
 80014ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d6:	d41f      	bmi.n	8001518 <proceso_observador_with_time+0x12c>
            (pm.pm4_0 > CONC_MIN_PM && pm.pm4_0 < CONC_MAX_PM) ||
 80014d8:	edd7 7a47 	vldr	s15, [r7, #284]	; 0x11c
            (pm.pm2_5 > CONC_MIN_PM && pm.pm2_5 < CONC_MAX_PM) ||
 80014dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e4:	dd08      	ble.n	80014f8 <proceso_observador_with_time+0x10c>
            (pm.pm4_0 > CONC_MIN_PM && pm.pm4_0 < CONC_MAX_PM) ||
 80014e6:	edd7 7a47 	vldr	s15, [r7, #284]	; 0x11c
 80014ea:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800161c <proceso_observador_with_time+0x230>
 80014ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f6:	d40f      	bmi.n	8001518 <proceso_observador_with_time+0x12c>
            (pm.pm10  > CONC_MIN_PM && pm.pm10  < CONC_MAX_PM)) {
 80014f8:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
            (pm.pm4_0 > CONC_MIN_PM && pm.pm4_0 < CONC_MAX_PM) ||
 80014fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001504:	dd4e      	ble.n	80015a4 <proceso_observador_with_time+0x1b8>
            (pm.pm10  > CONC_MIN_PM && pm.pm10  < CONC_MAX_PM)) {
 8001506:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 800150a:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800161c <proceso_observador_with_time+0x230>
 800150e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001516:	d545      	bpl.n	80015a4 <proceso_observador_with_time+0x1b8>

            // Formatear con timestamp
            char buffer[BUFFER_SIZE_MSG_PM_FORMAT];
            snprintf(buffer, sizeof(buffer), MSG_PM_FORMAT_WITH_TIME,
 8001518:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800151c:	f2a3 1381 	subw	r3, r3, #385	; 0x181
 8001520:	781e      	ldrb	r6, [r3, #0]
                     datetime_str, sensor_id, pm.pm1_0, pm.pm2_5, pm.pm4_0, pm.pm10);
 8001522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
            snprintf(buffer, sizeof(buffer), MSG_PM_FORMAT_WITH_TIME,
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff f81e 	bl	8000568 <__aeabi_f2d>
 800152c:	4604      	mov	r4, r0
 800152e:	460d      	mov	r5, r1
                     datetime_str, sensor_id, pm.pm1_0, pm.pm2_5, pm.pm4_0, pm.pm10);
 8001530:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
            snprintf(buffer, sizeof(buffer), MSG_PM_FORMAT_WITH_TIME,
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff f817 	bl	8000568 <__aeabi_f2d>
 800153a:	4680      	mov	r8, r0
 800153c:	4689      	mov	r9, r1
                     datetime_str, sensor_id, pm.pm1_0, pm.pm2_5, pm.pm4_0, pm.pm10);
 800153e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
            snprintf(buffer, sizeof(buffer), MSG_PM_FORMAT_WITH_TIME,
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff f810 	bl	8000568 <__aeabi_f2d>
 8001548:	4682      	mov	sl, r0
 800154a:	468b      	mov	fp, r1
                     datetime_str, sensor_id, pm.pm1_0, pm.pm2_5, pm.pm4_0, pm.pm10);
 800154c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
            snprintf(buffer, sizeof(buffer), MSG_PM_FORMAT_WITH_TIME,
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff f809 	bl	8000568 <__aeabi_f2d>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	f507 71c4 	add.w	r1, r7, #392	; 0x188
 800155e:	f5a1 71c4 	sub.w	r1, r1, #392	; 0x188
 8001562:	f107 0014 	add.w	r0, r7, #20
 8001566:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800156a:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800156e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001572:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001576:	9600      	str	r6, [sp, #0]
 8001578:	680b      	ldr	r3, [r1, #0]
 800157a:	4a29      	ldr	r2, [pc, #164]	; (8001620 <proceso_observador_with_time+0x234>)
 800157c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001580:	f005 fc1c 	bl	8006dbc <sniprintf>
            uart->print(uart, buffer);
 8001584:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001588:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f107 0114 	add.w	r1, r7, #20
 8001594:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8001598:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800159c:	6810      	ldr	r0, [r2, #0]
 800159e:	4798      	blx	r3
            return true;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e034      	b.n	800160e <proceso_observador_with_time+0x222>
        }

        uart->print(uart, MSG_ERROR_REINT);
 80015a4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80015a8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 80015b4:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80015b8:	491a      	ldr	r1, [pc, #104]	; (8001624 <proceso_observador_with_time+0x238>)
 80015ba:	6810      	ldr	r0, [r2, #0]
 80015bc:	4798      	blx	r3
    while (reintentos--) {
 80015be:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80015c2:	1e5a      	subs	r2, r3, #1
 80015c4:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f47f af2d 	bne.w	8001428 <proceso_observador_with_time+0x3c>
    }

    // Error con timestamp
    char error_msg[BUFFER_SIZE_MSG_ERROR_FALLO];
    snprintf(error_msg, sizeof(error_msg), MSG_ERROR_FALLO, datetime_str, sensor_id);
 80015ce:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80015d2:	f2a3 1381 	subw	r3, r3, #385	; 0x181
 80015d6:	781a      	ldrb	r2, [r3, #0]
 80015d8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80015dc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80015e0:	f507 7092 	add.w	r0, r7, #292	; 0x124
 80015e4:	9200      	str	r2, [sp, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a0f      	ldr	r2, [pc, #60]	; (8001628 <proceso_observador_with_time+0x23c>)
 80015ea:	2160      	movs	r1, #96	; 0x60
 80015ec:	f005 fbe6 	bl	8006dbc <sniprintf>
    uart->print(uart, error_msg);
 80015f0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80015f4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f507 7192 	add.w	r1, r7, #292	; 0x124
 8001600:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8001604:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001608:	6810      	ldr	r0, [r2, #0]
 800160a:	4798      	blx	r3
    return false;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	f507 77c6 	add.w	r7, r7, #396	; 0x18c
 8001614:	46bd      	mov	sp, r7
 8001616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800161a:	bf00      	nop
 800161c:	447a0000 	.word	0x447a0000
 8001620:	0800aae4 	.word	0x0800aae4
 8001624:	0800ab38 	.word	0x0800ab38
 8001628:	0800ab70 	.word	0x0800ab70

0800162c <DS1307_Init>:
/* === Private function implementation ========================================================= */
// No private functions

/* === Public function implementation ========================================================== */

void DS1307_Init(I2C_HandleTypeDef * hi2c) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
    _ds1307_ui2c = hi2c;
 8001634:	4a04      	ldr	r2, [pc, #16]	; (8001648 <DS1307_Init+0x1c>)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6013      	str	r3, [r2, #0]
    DS1307_SetClockHalt(0);
 800163a:	2000      	movs	r0, #0
 800163c:	f000 f806 	bl	800164c <DS1307_SetClockHalt>
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20001ce4 	.word	0x20001ce4

0800164c <DS1307_SetClockHalt>:

void DS1307_SetClockHalt(uint8_t halt) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
    uint8_t ch = (halt ? 1 << 7 : 0);
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <DS1307_SetClockHalt+0x14>
 800165c:	2380      	movs	r3, #128	; 0x80
 800165e:	e000      	b.n	8001662 <DS1307_SetClockHalt+0x16>
 8001660:	2300      	movs	r3, #0
 8001662:	73fb      	strb	r3, [r7, #15]
    uint8_t currentSeconds = DS1307_GetRegByte(DS1307_REG_SECOND);
 8001664:	2000      	movs	r0, #0
 8001666:	f000 f833 	bl	80016d0 <DS1307_GetRegByte>
 800166a:	4603      	mov	r3, r0
 800166c:	73bb      	strb	r3, [r7, #14]
    DS1307_SetRegByte(DS1307_REG_SECOND, ch | (currentSeconds & 0x7F));
 800166e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001676:	b25a      	sxtb	r2, r3
 8001678:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167c:	4313      	orrs	r3, r2
 800167e:	b25b      	sxtb	r3, r3
 8001680:	b2db      	uxtb	r3, r3
 8001682:	4619      	mov	r1, r3
 8001684:	2000      	movs	r0, #0
 8001686:	f000 f805 	bl	8001694 <DS1307_SetRegByte>
}
 800168a:	bf00      	nop
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <DS1307_SetRegByte>:
 * el protocolo de comunicación I2C.
 *
 * @param regAddr Dirección del registro en el DS1307 donde escribir.
 * @param val Valor a escribir en el registro, en el rango de 0 a 255.
 */
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af02      	add	r7, sp, #8
 800169a:	4603      	mov	r3, r0
 800169c:	460a      	mov	r2, r1
 800169e:	71fb      	strb	r3, [r7, #7]
 80016a0:	4613      	mov	r3, r2
 80016a2:	71bb      	strb	r3, [r7, #6]
    uint8_t bytes[2] = {regAddr, val};
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	733b      	strb	r3, [r7, #12]
 80016a8:	79bb      	ldrb	r3, [r7, #6]
 80016aa:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 80016ac:	4b07      	ldr	r3, [pc, #28]	; (80016cc <DS1307_SetRegByte+0x38>)
 80016ae:	6818      	ldr	r0, [r3, #0]
 80016b0:	f107 020c 	add.w	r2, r7, #12
 80016b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	2302      	movs	r3, #2
 80016bc:	21d0      	movs	r1, #208	; 0xd0
 80016be:	f002 f8cb 	bl	8003858 <HAL_I2C_Master_Transmit>
}
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20001ce4 	.word	0x20001ce4

080016d0 <DS1307_GetRegByte>:
 * cumplir con el protocolo I2C.
 *
 * @param regAddr Dirección del registro del DS1307 a leer.
 * @return El byte almacenado en el registro especificado, en el rango de 0 a 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af02      	add	r7, sp, #8
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 80016da:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <DS1307_GetRegByte+0x40>)
 80016dc:	6818      	ldr	r0, [r3, #0]
 80016de:	1dfa      	adds	r2, r7, #7
 80016e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	2301      	movs	r3, #1
 80016e8:	21d0      	movs	r1, #208	; 0xd0
 80016ea:	f002 f8b5 	bl	8003858 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <DS1307_GetRegByte+0x40>)
 80016f0:	6818      	ldr	r0, [r3, #0]
 80016f2:	f107 020f 	add.w	r2, r7, #15
 80016f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	2301      	movs	r3, #1
 80016fe:	21d0      	movs	r1, #208	; 0xd0
 8001700:	f002 f9a8 	bl	8003a54 <HAL_I2C_Master_Receive>
    return val;
 8001704:	7bfb      	ldrb	r3, [r7, #15]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20001ce4 	.word	0x20001ce4

08001714 <DS1307_GetDate>:
 * Lee y decodifica el día del mes desde el registro correspondiente. Los días
 * varían de 1 a 31 dependiendo del mes actual.
 *
 * @return Día del mes como un número entero entre 1 y 31.
 */
uint8_t DS1307_GetDate(void) {
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
    return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DATE));
 8001718:	2004      	movs	r0, #4
 800171a:	f7ff ffd9 	bl	80016d0 <DS1307_GetRegByte>
 800171e:	4603      	mov	r3, r0
 8001720:	4618      	mov	r0, r3
 8001722:	f000 f86c 	bl	80017fe <DS1307_DecodeBCD>
 8001726:	4603      	mov	r3, r0
}
 8001728:	4618      	mov	r0, r3
 800172a:	bd80      	pop	{r7, pc}

0800172c <DS1307_GetMonth>:
 * Lee y decodifica el mes desde el registro correspondiente. Los meses están
 * numerados de 1 (enero) a 12 (diciembre).
 *
 * @return Mes actual como un número entero entre 1 y 12.
 */
uint8_t DS1307_GetMonth(void) {
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
    return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MONTH));
 8001730:	2005      	movs	r0, #5
 8001732:	f7ff ffcd 	bl	80016d0 <DS1307_GetRegByte>
 8001736:	4603      	mov	r3, r0
 8001738:	4618      	mov	r0, r3
 800173a:	f000 f860 	bl	80017fe <DS1307_DecodeBCD>
 800173e:	4603      	mov	r3, r0
}
 8001740:	4618      	mov	r0, r3
 8001742:	bd80      	pop	{r7, pc}

08001744 <DS1307_GetYear>:
 * Lee y combina los valores de los registros de siglo y año para formar el año completo.
 * El siglo se multiplica por 100 y se suma al año, ambos decodificados de BCD.
 *
 * @return El año actual, en el rango de 2000 a 2099.
 */
uint16_t DS1307_GetYear(void) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
    uint16_t cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 800174a:	2010      	movs	r0, #16
 800174c:	f7ff ffc0 	bl	80016d0 <DS1307_GetRegByte>
 8001750:	4603      	mov	r3, r0
 8001752:	b29b      	uxth	r3, r3
 8001754:	461a      	mov	r2, r3
 8001756:	0092      	lsls	r2, r2, #2
 8001758:	4413      	add	r3, r2
 800175a:	461a      	mov	r2, r3
 800175c:	0091      	lsls	r1, r2, #2
 800175e:	461a      	mov	r2, r3
 8001760:	460b      	mov	r3, r1
 8001762:	4413      	add	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	80fb      	strh	r3, [r7, #6]
    return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 8001768:	2006      	movs	r0, #6
 800176a:	f7ff ffb1 	bl	80016d0 <DS1307_GetRegByte>
 800176e:	4603      	mov	r3, r0
 8001770:	4618      	mov	r0, r3
 8001772:	f000 f844 	bl	80017fe <DS1307_DecodeBCD>
 8001776:	4603      	mov	r3, r0
 8001778:	b29a      	uxth	r2, r3
 800177a:	88fb      	ldrh	r3, [r7, #6]
 800177c:	4413      	add	r3, r2
 800177e:	b29b      	uxth	r3, r3
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <DS1307_GetHour>:
 * Lee y decodifica el valor del registro de la hora, eliminando cualquier influencia
 * del bit de parada del reloj.
 *
 * @return La hora en formato de 24 horas, en el rango de 0 a 23.
 */
uint8_t DS1307_GetHour(void) {
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
    return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
 800178c:	2002      	movs	r0, #2
 800178e:	f7ff ff9f 	bl	80016d0 <DS1307_GetRegByte>
 8001792:	4603      	mov	r3, r0
 8001794:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001798:	b2db      	uxtb	r3, r3
 800179a:	4618      	mov	r0, r3
 800179c:	f000 f82f 	bl	80017fe <DS1307_DecodeBCD>
 80017a0:	4603      	mov	r3, r0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <DS1307_GetMinute>:
 * Lee y decodifica el valor del registro de los minutos, proporcionando una medida precisa
 * del tiempo actual.
 *
 * @return Los minutos, en el rango de 0 a 59.
 */
uint8_t DS1307_GetMinute(void) {
 80017a6:	b580      	push	{r7, lr}
 80017a8:	af00      	add	r7, sp, #0
    return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MINUTE));
 80017aa:	2001      	movs	r0, #1
 80017ac:	f7ff ff90 	bl	80016d0 <DS1307_GetRegByte>
 80017b0:	4603      	mov	r3, r0
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f823 	bl	80017fe <DS1307_DecodeBCD>
 80017b8:	4603      	mov	r3, r0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	bd80      	pop	{r7, pc}

080017be <DS1307_GetSecond>:
 * Lee y decodifica el valor del registro de segundos, excluyendo el bit de parada del reloj
 * para asegurar una medida precisa del tiempo actual.
 *
 * @return Los segundos, en el rango de 0 a 59.
 */
uint8_t DS1307_GetSecond(void) {
 80017be:	b580      	push	{r7, lr}
 80017c0:	af00      	add	r7, sp, #0
    return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f);
 80017c2:	2000      	movs	r0, #0
 80017c4:	f7ff ff84 	bl	80016d0 <DS1307_GetRegByte>
 80017c8:	4603      	mov	r3, r0
 80017ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 f814 	bl	80017fe <DS1307_DecodeBCD>
 80017d6:	4603      	mov	r3, r0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	bd80      	pop	{r7, pc}

080017dc <DS1307_GetTimeZoneHour>:
 * configuraciones manuales del reloj respecto a la hora UTC.
 *
 * @note La compensación UTC no se actualiza automáticamente.
 * @return Compensación de la hora UTC, en el rango de -12 a 12 horas.
 */
int8_t DS1307_GetTimeZoneHour(void) {
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
    return DS1307_GetRegByte(DS1307_REG_UTC_HR);
 80017e0:	2008      	movs	r0, #8
 80017e2:	f7ff ff75 	bl	80016d0 <DS1307_GetRegByte>
 80017e6:	4603      	mov	r3, r0
 80017e8:	b25b      	sxtb	r3, r3
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	bd80      	pop	{r7, pc}

080017ee <DS1307_GetTimeZoneMin>:
 * No se actualiza automáticamente con cambios de zona horaria.
 *
 * @note La compensación de minutos UTC no se actualiza automáticamente.
 * @return Minutos de desplazamiento de la zona horaria UTC, en el rango de 0 a 59.
 */
uint8_t DS1307_GetTimeZoneMin(void) {
 80017ee:	b580      	push	{r7, lr}
 80017f0:	af00      	add	r7, sp, #0
    return DS1307_GetRegByte(DS1307_REG_UTC_MIN);
 80017f2:	2009      	movs	r0, #9
 80017f4:	f7ff ff6c 	bl	80016d0 <DS1307_GetRegByte>
 80017f8:	4603      	mov	r3, r0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	bd80      	pop	{r7, pc}

080017fe <DS1307_DecodeBCD>:
 * The function extracts the tens and units from the BCD value and combines them to form the decimal value.
 *
 * @param bin The BCD value retrieved from a register, range from 0 to 255.
 * @return The decimal value decoded from the BCD value.
 */
uint8_t DS1307_DecodeBCD(uint8_t bin) {
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	4603      	mov	r3, r0
 8001806:	71fb      	strb	r3, [r7, #7]
    // Extract tens by shifting right 4 bits, then multiply by 10 to get the full value
    // Add units directly extracted from the lower nibble
    return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	091b      	lsrs	r3, r3, #4
 800180c:	b2db      	uxtb	r3, r3
 800180e:	461a      	mov	r2, r3
 8001810:	0092      	lsls	r2, r2, #2
 8001812:	4413      	add	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	b2da      	uxtb	r2, r3
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	b2db      	uxtb	r3, r3
 8001820:	4413      	add	r3, r2
 8001822:	b2db      	uxtb	r3, r3
}
 8001824:	4618      	mov	r0, r3
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <SHDLC_LoadMyVector>:
 * @param DataFrameSize El tamaño total del arreglo DataFrame para evitar
 *        desbordamientos de búfer.
 * @return void
 */

void SHDLC_LoadMyVector(Shdlc_FrameMiso * frame, const uint8_t * DataFrame, size_t DataFrameSize) {
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
    if (frame == NULL || DataFrame == NULL || DataFrameSize < 5) {
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d005      	beq.n	800184e <SHDLC_LoadMyVector+0x1e>
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d002      	beq.n	800184e <SHDLC_LoadMyVector+0x1e>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b04      	cmp	r3, #4
 800184c:	d803      	bhi.n	8001856 <SHDLC_LoadMyVector+0x26>
        // Validación básica para asegurarnos de que los parámetros son válidos y DataFrame tiene el
        // tamaño mínimo esperado.
        printf("Datos no válidos para cargar en myVector.\n");
 800184e:	4811      	ldr	r0, [pc, #68]	; (8001894 <SHDLC_LoadMyVector+0x64>)
 8001850:	f005 faa6 	bl	8006da0 <puts>
        return;
 8001854:	e01b      	b.n	800188e <SHDLC_LoadMyVector+0x5e>
    }

    uint8_t dataLength = DataFrame[4]; // Longitud de los datos útiles.
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	791b      	ldrb	r3, [r3, #4]
 800185a:	75fb      	strb	r3, [r7, #23]

    if (dataLength > FRAME_DATA_VECTOR_SIZE_MISO || (4 + dataLength) > DataFrameSize) {
 800185c:	7dfb      	ldrb	r3, [r7, #23]
 800185e:	2b3c      	cmp	r3, #60	; 0x3c
 8001860:	d805      	bhi.n	800186e <SHDLC_LoadMyVector+0x3e>
 8001862:	7dfb      	ldrb	r3, [r7, #23]
 8001864:	3304      	adds	r3, #4
 8001866:	461a      	mov	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4293      	cmp	r3, r2
 800186c:	d203      	bcs.n	8001876 <SHDLC_LoadMyVector+0x46>
        // Asegúrate de que la longitud de los datos no excede el tamaño de myVector ni los límites
        // de DataFrame.
        printf("Longitud de los datos excede el tamaño permitido de myVector o los límites de "
 800186e:	480a      	ldr	r0, [pc, #40]	; (8001898 <SHDLC_LoadMyVector+0x68>)
 8001870:	f005 fa96 	bl	8006da0 <puts>
               "DataFrame.\n");
        return;
 8001874:	e00b      	b.n	800188e <SHDLC_LoadMyVector+0x5e>
    }

    // Copiar los datos útiles desde DataFrame a myVector en la estructura Shdlc_FrameMiso.
    memcpy(frame->myVector, &DataFrame[5], dataLength + 1);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	1cd8      	adds	r0, r3, #3
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	1d59      	adds	r1, r3, #5
 800187e:	7dfb      	ldrb	r3, [r7, #23]
 8001880:	3301      	adds	r3, #1
 8001882:	461a      	mov	r2, r3
 8001884:	f004 fb8e 	bl	8005fa4 <memcpy>

    // Actualizar el campo 'lon' con la longitud de los datos copiados.
    frame->lon = dataLength;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	7dfa      	ldrb	r2, [r7, #23]
 800188c:	709a      	strb	r2, [r3, #2]

    // Asume que podrías querer también inicializar otros campos aquí.
}
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	0800abb4 	.word	0x0800abb4
 8001898:	0800abe0 	.word	0x0800abe0

0800189c <SHDLC_CalculateDataSize>:
 * @param inputSize Tamaño del arreglo de entrada.
 * @return int La longitud de los datos contenidos entre los dos delimitadores,
 *         o -1 si los delimitadores no se encuentran en la secuencia correcta.
 */

int SHDLC_CalculateDataSize(const uint8_t * input, size_t inputSize) {
 800189c:	b480      	push	{r7}
 800189e:	b089      	sub	sp, #36	; 0x24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
    int start = -1;
 80018a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018aa:	61fb      	str	r3, [r7, #28]
    int end = -1;
 80018ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018b0:	61bb      	str	r3, [r7, #24]

    // Buscar el primer delimitador 0xE7.
    for (size_t i = 0; i < inputSize; ++i) {
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	e00c      	b.n	80018d2 <SHDLC_CalculateDataSize+0x36>
        if (input[i] == 0x7E) {
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	4413      	add	r3, r2
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b7e      	cmp	r3, #126	; 0x7e
 80018c2:	d103      	bne.n	80018cc <SHDLC_CalculateDataSize+0x30>
            start = i + 1; // Comenzar después del primer 0xE7
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	3301      	adds	r3, #1
 80018c8:	61fb      	str	r3, [r7, #28]
            break;
 80018ca:	e006      	b.n	80018da <SHDLC_CalculateDataSize+0x3e>
    for (size_t i = 0; i < inputSize; ++i) {
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	3301      	adds	r3, #1
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d3ee      	bcc.n	80018b8 <SHDLC_CalculateDataSize+0x1c>
        }
    }

    // Buscar el segundo delimitador 0xE7.
    for (size_t i = start; i < inputSize; ++i) {
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	e00b      	b.n	80018f8 <SHDLC_CalculateDataSize+0x5c>
        if (input[i] == 0x7E) {
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	4413      	add	r3, r2
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b7e      	cmp	r3, #126	; 0x7e
 80018ea:	d102      	bne.n	80018f2 <SHDLC_CalculateDataSize+0x56>
            end = i;
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	61bb      	str	r3, [r7, #24]
            break;
 80018f0:	e006      	b.n	8001900 <SHDLC_CalculateDataSize+0x64>
    for (size_t i = start; i < inputSize; ++i) {
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	3301      	adds	r3, #1
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d3ef      	bcc.n	80018e0 <SHDLC_CalculateDataSize+0x44>
        }
    }

    // Verificar si se encontraron ambos delimitadores.
    if (start == -1 || end == -1 || start >= end) {
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001906:	d007      	beq.n	8001918 <SHDLC_CalculateDataSize+0x7c>
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800190e:	d003      	beq.n	8001918 <SHDLC_CalculateDataSize+0x7c>
 8001910:	69fa      	ldr	r2, [r7, #28]
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	429a      	cmp	r2, r3
 8001916:	db02      	blt.n	800191e <SHDLC_CalculateDataSize+0x82>
        return -1; // No se encontró la secuencia válida.
 8001918:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800191c:	e004      	b.n	8001928 <SHDLC_CalculateDataSize+0x8c>
    }

    // Calcular la longitud de los datos a copiar y asegurarse de que no
    // exceda el buffer de salida.
    size_t dataLength = end - start;
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	60fb      	str	r3, [r7, #12]
    return dataLength;
 8001926:	68fb      	ldr	r3, [r7, #12]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3724      	adds	r7, #36	; 0x24
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <SHDLC_revertByteStuffing>:
 * @param stuffedSize Tamaño del arreglo de bytes con byte-stuffing.
 * @param originalData Puntero al arreglo de bytes donde se almacenarán los datos revertidos.
 * @return El tamaño del arreglo de bytes revertido.
 */
size_t SHDLC_revertByteStuffing(const uint8_t * stuffedData, size_t stuffedSize,
                                uint8_t * originalData) {
 8001934:	b480      	push	{r7}
 8001936:	b087      	sub	sp, #28
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
    size_t originalIndex = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < stuffedSize; ++i) {
 8001944:	2300      	movs	r3, #0
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	e04e      	b.n	80019e8 <SHDLC_revertByteStuffing+0xb4>
        if (stuffedData[i] == 0x7D) { // Detecta el indicador de byte-stuffing
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	4413      	add	r3, r2
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b7d      	cmp	r3, #125	; 0x7d
 8001954:	d137      	bne.n	80019c6 <SHDLC_revertByteStuffing+0x92>
            i++;                      // Avanza al siguiente byte para determinar el valor real
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	3301      	adds	r3, #1
 800195a:	613b      	str	r3, [r7, #16]
            if (i < stuffedSize) {
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	429a      	cmp	r2, r3
 8001962:	d23b      	bcs.n	80019dc <SHDLC_revertByteStuffing+0xa8>
                switch (stuffedData[i]) {
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	4413      	add	r3, r2
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b5e      	cmp	r3, #94	; 0x5e
 800196e:	d00a      	beq.n	8001986 <SHDLC_revertByteStuffing+0x52>
 8001970:	2b5e      	cmp	r3, #94	; 0x5e
 8001972:	dc35      	bgt.n	80019e0 <SHDLC_revertByteStuffing+0xac>
 8001974:	2b5d      	cmp	r3, #93	; 0x5d
 8001976:	d00e      	beq.n	8001996 <SHDLC_revertByteStuffing+0x62>
 8001978:	2b5d      	cmp	r3, #93	; 0x5d
 800197a:	dc31      	bgt.n	80019e0 <SHDLC_revertByteStuffing+0xac>
 800197c:	2b31      	cmp	r3, #49	; 0x31
 800197e:	d012      	beq.n	80019a6 <SHDLC_revertByteStuffing+0x72>
 8001980:	2b33      	cmp	r3, #51	; 0x33
 8001982:	d018      	beq.n	80019b6 <SHDLC_revertByteStuffing+0x82>
                    break;
                default:
                    // Trata el caso en que el byte siguiente a 0x7D no es uno esperado
                    // Esto podría indicar un error o una situación inesperada.
                    // Se podría manejar de manera especial si es necesario.
                    break;
 8001984:	e02c      	b.n	80019e0 <SHDLC_revertByteStuffing+0xac>
                    originalData[originalIndex++] = 0x7E;
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	617a      	str	r2, [r7, #20]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	4413      	add	r3, r2
 8001990:	227e      	movs	r2, #126	; 0x7e
 8001992:	701a      	strb	r2, [r3, #0]
                    break;
 8001994:	e025      	b.n	80019e2 <SHDLC_revertByteStuffing+0xae>
                    originalData[originalIndex++] = 0x7D;
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	1c5a      	adds	r2, r3, #1
 800199a:	617a      	str	r2, [r7, #20]
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	4413      	add	r3, r2
 80019a0:	227d      	movs	r2, #125	; 0x7d
 80019a2:	701a      	strb	r2, [r3, #0]
                    break;
 80019a4:	e01d      	b.n	80019e2 <SHDLC_revertByteStuffing+0xae>
                    originalData[originalIndex++] = 0x11;
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	1c5a      	adds	r2, r3, #1
 80019aa:	617a      	str	r2, [r7, #20]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	4413      	add	r3, r2
 80019b0:	2211      	movs	r2, #17
 80019b2:	701a      	strb	r2, [r3, #0]
                    break;
 80019b4:	e015      	b.n	80019e2 <SHDLC_revertByteStuffing+0xae>
                    originalData[originalIndex++] = 0x13;
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	1c5a      	adds	r2, r3, #1
 80019ba:	617a      	str	r2, [r7, #20]
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	4413      	add	r3, r2
 80019c0:	2213      	movs	r2, #19
 80019c2:	701a      	strb	r2, [r3, #0]
                    break;
 80019c4:	e00d      	b.n	80019e2 <SHDLC_revertByteStuffing+0xae>
                }
            }
        } else {
            // Si no es un byte-stuffing, simplemente copia el byte
            originalData[originalIndex++] = stuffedData[i];
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	441a      	add	r2, r3
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	1c59      	adds	r1, r3, #1
 80019d0:	6179      	str	r1, [r7, #20]
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	440b      	add	r3, r1
 80019d6:	7812      	ldrb	r2, [r2, #0]
 80019d8:	701a      	strb	r2, [r3, #0]
 80019da:	e002      	b.n	80019e2 <SHDLC_revertByteStuffing+0xae>
            }
 80019dc:	bf00      	nop
 80019de:	e000      	b.n	80019e2 <SHDLC_revertByteStuffing+0xae>
                    break;
 80019e0:	bf00      	nop
    for (size_t i = 0; i < stuffedSize; ++i) {
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	3301      	adds	r3, #1
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d3ac      	bcc.n	800194a <SHDLC_revertByteStuffing+0x16>
        }
    }

    return originalIndex; // Retorna el tamaño del arreglo revertido
 80019f0:	697b      	ldr	r3, [r7, #20]
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	371c      	adds	r7, #28
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <SHDLC_bytesToFloat>:

// Función para convertir 4 bytes en big-endian a un valor float IEEE754
float SHDLC_bytesToFloat(uint8_t * bytes) {
 80019fe:	b480      	push	{r7}
 8001a00:	b087      	sub	sp, #28
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
    float value;
    uint8_t reversedBytes[sizeof(value)];

    // Revertir el orden de los bytes para big-endian
    for (int i = 0; i < sizeof(value); i++) {
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	e00e      	b.n	8001a2a <SHDLC_bytesToFloat+0x2c>
        reversedBytes[i] = bytes[sizeof(value) - i - 1];
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	f1c3 0303 	rsb	r3, r3, #3
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	7819      	ldrb	r1, [r3, #0]
 8001a18:	f107 020c 	add.w	r2, r7, #12
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	4413      	add	r3, r2
 8001a20:	460a      	mov	r2, r1
 8001a22:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < sizeof(value); i++) {
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	3301      	adds	r3, #1
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	2b03      	cmp	r3, #3
 8001a2e:	d9ed      	bls.n	8001a0c <SHDLC_bytesToFloat+0xe>
 8001a30:	68fb      	ldr	r3, [r7, #12]
    }

    // Copiar los bytes revertidos en la variable float
    memcpy(&value, reversedBytes, sizeof(value));
 8001a32:	613b      	str	r3, [r7, #16]

    return value;
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	ee07 3a90 	vmov	s15, r3
}
 8001a3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a3e:	371c      	adds	r7, #28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <SHDLC_llenarConcentraciones>:

// Función para llenar la estructura con los datos de concentración
void SHDLC_llenarConcentraciones(ConcentracionesPM *concentraciones, uint8_t *data) {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
    if (!concentraciones || !data) return;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d029      	beq.n	8001aac <SHDLC_llenarConcentraciones+0x64>
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d026      	beq.n	8001aac <SHDLC_llenarConcentraciones+0x64>

    // Al menos 4 * sizeof(float) = 16 bytes
    concentraciones->pm1_0 = SHDLC_bytesToFloat(&data[0]);
 8001a5e:	6838      	ldr	r0, [r7, #0]
 8001a60:	f7ff ffcd 	bl	80019fe <SHDLC_bytesToFloat>
 8001a64:	eef0 7a40 	vmov.f32	s15, s0
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	edc3 7a00 	vstr	s15, [r3]
    concentraciones->pm2_5 = SHDLC_bytesToFloat(&data[4]);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	3304      	adds	r3, #4
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff ffc3 	bl	80019fe <SHDLC_bytesToFloat>
 8001a78:	eef0 7a40 	vmov.f32	s15, s0
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	edc3 7a01 	vstr	s15, [r3, #4]
    concentraciones->pm4_0 = SHDLC_bytesToFloat(&data[8]);
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	3308      	adds	r3, #8
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff ffb9 	bl	80019fe <SHDLC_bytesToFloat>
 8001a8c:	eef0 7a40 	vmov.f32	s15, s0
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	edc3 7a02 	vstr	s15, [r3, #8]
    concentraciones->pm10  = SHDLC_bytesToFloat(&data[12]);
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	330c      	adds	r3, #12
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff ffaf 	bl	80019fe <SHDLC_bytesToFloat>
 8001aa0:	eef0 7a40 	vmov.f32	s15, s0
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	edc3 7a03 	vstr	s15, [r3, #12]
 8001aaa:	e000      	b.n	8001aae <SHDLC_llenarConcentraciones+0x66>
    if (!concentraciones || !data) return;
 8001aac:	bf00      	nop
}
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <sps30_send_command>:
#define DELAY_STOP_MEASUREMENT      0

#define CLEAR_VAR                   0

// Implementación de las funciones del objeto SPS30
void sps30_send_command(SPS30 *self, const uint8_t *command, uint16_t commandSize) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit(self->huart, command, commandSize, 100);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6818      	ldr	r0, [r3, #0]
 8001ac6:	88fa      	ldrh	r2, [r7, #6]
 8001ac8:	2364      	movs	r3, #100	; 0x64
 8001aca:	68b9      	ldr	r1, [r7, #8]
 8001acc:	f003 fe2a 	bl	8005724 <HAL_UART_Transmit>
}
 8001ad0:	bf00      	nop
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <sps30_receive_async>:

void sps30_receive_async(SPS30 *self, uint8_t *dataBuffer, uint16_t bufferSize) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Receive(self->huart, dataBuffer, bufferSize, 100);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6818      	ldr	r0, [r3, #0]
 8001aea:	88fa      	ldrh	r2, [r7, #6]
 8001aec:	2364      	movs	r3, #100	; 0x64
 8001aee:	68b9      	ldr	r1, [r7, #8]
 8001af0:	f003 feaa 	bl	8005848 <HAL_UART_Receive>
}
 8001af4:	bf00      	nop
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <sps30_send_receive>:

void sps30_send_receive(SPS30 *self, const uint8_t *command, uint16_t commandSize, uint8_t *dataBuffer, uint16_t bufferSize) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	603b      	str	r3, [r7, #0]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit(self->huart, command, commandSize, 100);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6818      	ldr	r0, [r3, #0]
 8001b10:	88fa      	ldrh	r2, [r7, #6]
 8001b12:	2364      	movs	r3, #100	; 0x64
 8001b14:	68b9      	ldr	r1, [r7, #8]
 8001b16:	f003 fe05 	bl	8005724 <HAL_UART_Transmit>
    HAL_UART_Receive(self->huart, dataBuffer, bufferSize, 100);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6818      	ldr	r0, [r3, #0]
 8001b1e:	8b3a      	ldrh	r2, [r7, #24]
 8001b20:	2364      	movs	r3, #100	; 0x64
 8001b22:	6839      	ldr	r1, [r7, #0]
 8001b24:	f003 fe90 	bl	8005848 <HAL_UART_Receive>
}
 8001b28:	bf00      	nop
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <sps30_start_measurement>:


void sps30_start_measurement(SPS30 *self) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b094      	sub	sp, #80	; 0x50
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
    uint8_t startCmd[] = SPS30_FRAME_START_MEASUREMENT; // Comando para iniciar la medición
 8001b38:	4a15      	ldr	r2, [pc, #84]	; (8001b90 <sps30_start_measurement+0x60>)
 8001b3a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b42:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t dataBuf[BUFFER_SIZE] = {0};      // Buffer para almacenar la respuesta del sensor
 8001b46:	2300      	movs	r3, #0
 8001b48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b4e:	2100      	movs	r1, #0
 8001b50:	460a      	mov	r2, r1
 8001b52:	801a      	strh	r2, [r3, #0]
 8001b54:	460a      	mov	r2, r1
 8001b56:	709a      	strb	r2, [r3, #2]
    char respuestaStr[BUFFER_SIZE_RESPONSE]; // Buffer para el mensaje de longitud de respuesta

    // Envío del comando de inicio de medición
    //uart_print(MSG_INICIO_MEDICION);               // Notifica por UART el inicio de la operación
    //uart_vector_print(sizeof(startCmd), startCmd); // Muestra el comando enviado
    self->send_command(self, startCmd, sizeof(startCmd)); // Envía el comando al sensor SPS30
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001b60:	2208      	movs	r2, #8
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	4798      	blx	r3
    HAL_Delay(DELAY_START_MEASUREMENT);            // Espera para el procesamiento del comando
 8001b66:	2002      	movs	r0, #2
 8001b68:	f001 fa7c 	bl	8003064 <HAL_Delay>

    // Recepción y procesamiento de la respuesta
    self->receive_async(self, dataBuf, sizeof(dataBuf));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001b74:	2207      	movs	r2, #7
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	4798      	blx	r3
    //uart_print(MSG_RESPUESTA_INICIO_MEDICION); // Notifica la recepción de la respuesta
    //uart_vector_print(sizeof(dataBuf), dataBuf);   // Muestra la respuesta recibida

    // Cálculo y visualización de la longitud de la respuesta
    int longRespuesta = SHDLC_CalculateDataSize(dataBuf, sizeof(dataBuf)); // Calcula la longitud de los datos útiles
 8001b7a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b7e:	2107      	movs	r1, #7
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fe8b 	bl	800189c <SHDLC_CalculateDataSize>
 8001b86:	64f8      	str	r0, [r7, #76]	; 0x4c
    //snprintf(respuestaStr, sizeof(respuestaStr), MENSAJE_SIZE_RESPUESTA, longRespuesta);  // Formatea el mensaje de longitud
    //uart_print(respuestaStr); // Imprime la longitud de la respuesta
}
 8001b88:	bf00      	nop
 8001b8a:	3750      	adds	r7, #80	; 0x50
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	0800ac3c 	.word	0x0800ac3c

08001b94 <sps30_stop_measurement>:

void sps30_stop_measurement(SPS30 *self) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b094      	sub	sp, #80	; 0x50
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
    uint8_t stopCmd[] = SPS30_FRAME_STOP_MEASUREMENT;
 8001b9c:	4a13      	ldr	r2, [pc, #76]	; (8001bec <sps30_stop_measurement+0x58>)
 8001b9e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ba2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ba6:	6018      	str	r0, [r3, #0]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	8019      	strh	r1, [r3, #0]
    uint8_t dataBuf[BUFFER_SIZE_STOP_MEASUREMENT] = {0};
 8001bac:	2300      	movs	r3, #0
 8001bae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	643b      	str	r3, [r7, #64]	; 0x40
    char respuestaStr[BUFFER_SIZE_RESPONSE];

    //uart_print(MSG_SOLICITAR);
    //uart_vector_print(sizeof(stopCmd), stopCmd);
    self->send_command(self, stopCmd, sizeof(stopCmd));
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001bbc:	2206      	movs	r2, #6
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	4798      	blx	r3
    HAL_Delay(DELAY_STOP_MEASUREMENT);
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	f001 fa4e 	bl	8003064 <HAL_Delay>

    self->receive_async(self, dataBuf, sizeof(dataBuf));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001bd0:	2208      	movs	r2, #8
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	4798      	blx	r3
    //uart_print(MSG_RESPUESTA);
    //uart_vector_print(sizeof(dataBuf), dataBuf);

    int longRespuesta = SHDLC_CalculateDataSize(dataBuf, sizeof(dataBuf));
 8001bd6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001bda:	2108      	movs	r1, #8
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff fe5d 	bl	800189c <SHDLC_CalculateDataSize>
 8001be2:	64f8      	str	r0, [r7, #76]	; 0x4c
    //snprintf(respuestaStr, sizeof(respuestaStr), MENSAJE_SIZE_RESPUESTA, longRespuesta);
    //uart_print(respuestaStr);
}
 8001be4:	bf00      	nop
 8001be6:	3750      	adds	r7, #80	; 0x50
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	0800ac44 	.word	0x0800ac44

08001bf0 <sps30_sleep>:

void sps30_sleep(SPS30 *self) {
 8001bf0:	b590      	push	{r4, r7, lr}
 8001bf2:	b097      	sub	sp, #92	; 0x5c
 8001bf4:	af02      	add	r7, sp, #8
 8001bf6:	6078      	str	r0, [r7, #4]
    uint8_t sleepCmd[] = SPS30_FRAME_SLEEP;
 8001bf8:	4a10      	ldr	r2, [pc, #64]	; (8001c3c <sps30_sleep+0x4c>)
 8001bfa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001bfe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c02:	6018      	str	r0, [r3, #0]
 8001c04:	3304      	adds	r3, #4
 8001c06:	8019      	strh	r1, [r3, #0]
    uint8_t dataBuf[BUFFER_SIZE_SLEEP] = {0};
 8001c08:	2300      	movs	r3, #0
 8001c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	643b      	str	r3, [r7, #64]	; 0x40
    char respuestaStr[BUFFER_SIZE_RESPONSE];

    //uart_print(MSG_SOLICITAR);
    //uart_vector_print(sizeof(sleepCmd), sleepCmd);
    self->send_receive(self, sleepCmd, sizeof(sleepCmd), dataBuf, sizeof(dataBuf));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68dc      	ldr	r4, [r3, #12]
 8001c14:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c18:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001c1c:	2208      	movs	r2, #8
 8001c1e:	9200      	str	r2, [sp, #0]
 8001c20:	2206      	movs	r2, #6
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	47a0      	blx	r4
    //uart_print(MSG_RESPUESTA);
    //uart_vector_print(sizeof(dataBuf), dataBuf);

    int longRespuesta = SHDLC_CalculateDataSize(dataBuf, sizeof(dataBuf));
 8001c26:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c2a:	2108      	movs	r1, #8
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fe35 	bl	800189c <SHDLC_CalculateDataSize>
 8001c32:	64f8      	str	r0, [r7, #76]	; 0x4c
    //snprintf(respuestaStr, sizeof(respuestaStr), MENSAJE_SIZE_RESPUESTA, longRespuesta);
    //uart_print(respuestaStr);
}
 8001c34:	bf00      	nop
 8001c36:	3754      	adds	r7, #84	; 0x54
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd90      	pop	{r4, r7, pc}
 8001c3c:	0800ac4c 	.word	0x0800ac4c

08001c40 <sps30_read_data>:

void sps30_read_data(SPS30 *self) {
 8001c40:	b590      	push	{r4, r7, lr}
 8001c42:	b0e1      	sub	sp, #388	; 0x184
 8001c44:	af02      	add	r7, sp, #8
 8001c46:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001c4a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001c4e:	6018      	str	r0, [r3, #0]
    uint8_t readCmd[] = SPS30_FRAME_READ_MEASUREMENT;
 8001c50:	4a2f      	ldr	r2, [pc, #188]	; (8001d10 <sps30_read_data+0xd0>)
 8001c52:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001c56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c5a:	6018      	str	r0, [r3, #0]
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	8019      	strh	r1, [r3, #0]
    uint8_t dataBuf[BUFFER_SIZE_READ_DATA] = {0};
 8001c60:	2300      	movs	r3, #0
 8001c62:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001c66:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001c6a:	2238      	movs	r2, #56	; 0x38
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f004 f9a6 	bl	8005fc0 <memset>
    uint8_t originalData[BUFFER_SIZE_READ_DATA] = {0};
 8001c74:	2300      	movs	r3, #0
 8001c76:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001c7a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001c7e:	2238      	movs	r2, #56	; 0x38
 8001c80:	2100      	movs	r1, #0
 8001c82:	4618      	mov	r0, r3
 8001c84:	f004 f99c 	bl	8005fc0 <memset>
    ConcentracionesPM concentraciones;
    char respuestaStr[BUFFER_SIZE_RESPONSE];

    //uart_print(MSG_SOLICITAR);
    //uart_vector_print(sizeof(readCmd), readCmd);
    self->send_receive(self, readCmd, sizeof(readCmd), dataBuf, sizeof(dataBuf));
 8001c88:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001c8c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68dc      	ldr	r4, [r3, #12]
 8001c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001c98:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8001c9c:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8001ca0:	f5a2 70ba 	sub.w	r0, r2, #372	; 0x174
 8001ca4:	223c      	movs	r2, #60	; 0x3c
 8001ca6:	9200      	str	r2, [sp, #0]
 8001ca8:	2206      	movs	r2, #6
 8001caa:	6800      	ldr	r0, [r0, #0]
 8001cac:	47a0      	blx	r4
    //uart_print(MSG_RESPUESTA);
    //uart_vector_print(sizeof(dataBuf), dataBuf);

    SHDLC_revertByteStuffing(dataBuf, sizeof(dataBuf), originalData);
 8001cae:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8001cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001cb6:	213c      	movs	r1, #60	; 0x3c
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fe3b 	bl	8001934 <SHDLC_revertByteStuffing>
    //uart_print(MSG_RESPUESTA_CON_BYTESTUFFING);
    //uart_vector_print(sizeof(originalData), originalData);

    int longRespuesta = SHDLC_CalculateDataSize(originalData, sizeof(originalData));
 8001cbe:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001cc2:	213c      	movs	r1, #60	; 0x3c
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff fde9 	bl	800189c <SHDLC_CalculateDataSize>
 8001cca:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
    //snprintf(respuestaStr, sizeof(respuestaStr), MSG_LONGITUD_RESPUESTA, longRespuesta);
    //uart_print(respuestaStr);

    Shdlc_FrameMiso Newframe = {};
 8001cce:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001cd2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	2341      	movs	r3, #65	; 0x41
 8001cda:	461a      	mov	r2, r3
 8001cdc:	2100      	movs	r1, #0
 8001cde:	f004 f96f 	bl	8005fc0 <memset>
    SHDLC_LoadMyVector(&Newframe, originalData, longRespuesta);
 8001ce2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001ce6:	f107 01f4 	add.w	r1, r7, #244	; 0xf4
 8001cea:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fd9e 	bl	8001830 <SHDLC_LoadMyVector>
    //uart_print(MSG_DATOS_RESPUESTA);
    //uart_vector_print(Newframe.lon, Newframe.myVector);

    SHDLC_llenarConcentraciones(&concentraciones, Newframe.myVector);
 8001cf4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001cf8:	1cda      	adds	r2, r3, #3
 8001cfa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001cfe:	4611      	mov	r1, r2
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff fea1 	bl	8001a48 <SHDLC_llenarConcentraciones>
    //uart_print(buffer);
    //sprintf(buffer, FORMATO_CONCENTRACION_PM4_0, concentraciones.pm4_0);
    //uart_print(buffer);
    //sprintf(buffer, FORMATO_CONCENTRACION_PM10, concentraciones.pm10);
    //uart_print(buffer);
}
 8001d06:	bf00      	nop
 8001d08:	f507 77be 	add.w	r7, r7, #380	; 0x17c
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd90      	pop	{r4, r7, pc}
 8001d10:	0800ac54 	.word	0x0800ac54

08001d14 <sps30_get_concentrations>:

ConcentracionesPM sps30_get_concentrations(SPS30 *self) {
 8001d14:	b590      	push	{r4, r7, lr}
 8001d16:	b0c3      	sub	sp, #268	; 0x10c
 8001d18:	af02      	add	r7, sp, #8
 8001d1a:	6178      	str	r0, [r7, #20]
    uint8_t readCmd[] = SPS30_FRAME_READ_MEASUREMENT;
 8001d1c:	4a37      	ldr	r2, [pc, #220]	; (8001dfc <sps30_get_concentrations+0xe8>)
 8001d1e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001d22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d26:	6018      	str	r0, [r3, #0]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	8019      	strh	r1, [r3, #0]
    uint8_t dataBuf[BUFFER_SIZE_READ_DATA] = {0};
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001d32:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001d36:	2238      	movs	r2, #56	; 0x38
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f004 f940 	bl	8005fc0 <memset>
    uint8_t originalData[BUFFER_SIZE_READ_DATA] = {0};
 8001d40:	2300      	movs	r3, #0
 8001d42:	673b      	str	r3, [r7, #112]	; 0x70
 8001d44:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d48:	2238      	movs	r2, #56	; 0x38
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f004 f937 	bl	8005fc0 <memset>
    ConcentracionesPM concentraciones;

    self->send_receive(self, readCmd, sizeof(readCmd), dataBuf, sizeof(dataBuf));
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	68dc      	ldr	r4, [r3, #12]
 8001d56:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d5a:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8001d5e:	223c      	movs	r2, #60	; 0x3c
 8001d60:	9200      	str	r2, [sp, #0]
 8001d62:	2206      	movs	r2, #6
 8001d64:	6978      	ldr	r0, [r7, #20]
 8001d66:	47a0      	blx	r4
    SHDLC_revertByteStuffing(dataBuf, sizeof(dataBuf), originalData);
 8001d68:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8001d6c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d70:	213c      	movs	r1, #60	; 0x3c
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff fdde 	bl	8001934 <SHDLC_revertByteStuffing>

    Shdlc_FrameMiso Newframe = {};
 8001d78:	f107 031c 	add.w	r3, r7, #28
 8001d7c:	2241      	movs	r2, #65	; 0x41
 8001d7e:	2100      	movs	r1, #0
 8001d80:	4618      	mov	r0, r3
 8001d82:	f004 f91d 	bl	8005fc0 <memset>
    SHDLC_LoadMyVector(&Newframe, originalData, SHDLC_CalculateDataSize(originalData, sizeof(originalData)));
 8001d86:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d8a:	213c      	movs	r1, #60	; 0x3c
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff fd85 	bl	800189c <SHDLC_CalculateDataSize>
 8001d92:	4603      	mov	r3, r0
 8001d94:	461a      	mov	r2, r3
 8001d96:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001d9a:	f107 031c 	add.w	r3, r7, #28
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff fd46 	bl	8001830 <SHDLC_LoadMyVector>
    SHDLC_llenarConcentraciones(&concentraciones, Newframe.myVector);
 8001da4:	f107 031c 	add.w	r3, r7, #28
 8001da8:	1cda      	adds	r2, r3, #3
 8001daa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001dae:	4611      	mov	r1, r2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff fe49 	bl	8001a48 <SHDLC_llenarConcentraciones>

    return concentraciones;
 8001db6:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 8001dba:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001dbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001dc4:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8001dc8:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8001dcc:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8001dd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001dd4:	ee06 0a10 	vmov	s12, r0
 8001dd8:	ee06 1a90 	vmov	s13, r1
 8001ddc:	ee07 2a10 	vmov	s14, r2
 8001de0:	ee07 3a90 	vmov	s15, r3
}
 8001de4:	eeb0 0a46 	vmov.f32	s0, s12
 8001de8:	eef0 0a66 	vmov.f32	s1, s13
 8001dec:	eeb0 1a47 	vmov.f32	s2, s14
 8001df0:	eef0 1a67 	vmov.f32	s3, s15
 8001df4:	f507 7782 	add.w	r7, r7, #260	; 0x104
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd90      	pop	{r4, r7, pc}
 8001dfc:	0800ac54 	.word	0x0800ac54

08001e00 <sps30_serial_number>:

void sps30_serial_number(SPS30 *self) {
 8001e00:	b590      	push	{r4, r7, lr}
 8001e02:	b0ad      	sub	sp, #180	; 0xb4
 8001e04:	af02      	add	r7, sp, #8
 8001e06:	6078      	str	r0, [r7, #4]
    uint8_t cmd[] = SPS30_FRAME_SERIAL_NUMBER;
 8001e08:	4a2d      	ldr	r2, [pc, #180]	; (8001ec0 <sps30_serial_number+0xc0>)
 8001e0a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001e0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e12:	6018      	str	r0, [r3, #0]
 8001e14:	3304      	adds	r3, #4
 8001e16:	8019      	strh	r1, [r3, #0]
 8001e18:	3302      	adds	r3, #2
 8001e1a:	0c0a      	lsrs	r2, r1, #16
 8001e1c:	701a      	strb	r2, [r3, #0]
    uint8_t stuffed[BUFFER_SIZE_SERIAL_NUMBER] = {0};
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001e24:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
 8001e34:	615a      	str	r2, [r3, #20]
 8001e36:	831a      	strh	r2, [r3, #24]
    uint8_t original[BUFFER_SIZE_SERIAL_NUMBER] = {0};
 8001e38:	2300      	movs	r3, #0
 8001e3a:	663b      	str	r3, [r7, #96]	; 0x60
 8001e3c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
 8001e4c:	615a      	str	r2, [r3, #20]
 8001e4e:	831a      	strh	r2, [r3, #24]

    self->send_receive(self, cmd, sizeof(cmd), stuffed, sizeof(stuffed));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68dc      	ldr	r4, [r3, #12]
 8001e54:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001e58:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001e5c:	221e      	movs	r2, #30
 8001e5e:	9200      	str	r2, [sp, #0]
 8001e60:	2207      	movs	r2, #7
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	47a0      	blx	r4
    SHDLC_revertByteStuffing(stuffed, sizeof(stuffed), original);
 8001e66:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e6a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001e6e:	211e      	movs	r1, #30
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff fd5f 	bl	8001934 <SHDLC_revertByteStuffing>

    // Extrae los 16 bytes del número de serie a partir del offset 6
    char serial[17] = {0};  // 16 caracteres + nulo
 8001e76:	2300      	movs	r3, #0
 8001e78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e7a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	609a      	str	r2, [r3, #8]
 8001e86:	731a      	strb	r2, [r3, #12]
    memcpy(serial, &original[6], 16);  // Ajustar si cambia el protocolo
 8001e88:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001e8c:	1d99      	adds	r1, r3, #6
 8001e8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e92:	2210      	movs	r2, #16
 8001e94:	4618      	mov	r0, r3
 8001e96:	f004 f885 	bl	8005fa4 <memcpy>

    // Imprimir de forma legible
    char mensaje[64];
    snprintf(mensaje, sizeof(mensaje), "\nSerial Number: %s\n", serial);
 8001e9a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e9e:	f107 000c 	add.w	r0, r7, #12
 8001ea2:	4a08      	ldr	r2, [pc, #32]	; (8001ec4 <sps30_serial_number+0xc4>)
 8001ea4:	2140      	movs	r1, #64	; 0x40
 8001ea6:	f004 ff89 	bl	8006dbc <sniprintf>
    uart.print(&uart, mensaje);
 8001eaa:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <sps30_serial_number+0xc8>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f107 020c 	add.w	r2, r7, #12
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4804      	ldr	r0, [pc, #16]	; (8001ec8 <sps30_serial_number+0xc8>)
 8001eb6:	4798      	blx	r3
}
 8001eb8:	bf00      	nop
 8001eba:	37ac      	adds	r7, #172	; 0xac
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd90      	pop	{r4, r7, pc}
 8001ec0:	0800ac70 	.word	0x0800ac70
 8001ec4:	0800ac5c 	.word	0x0800ac5c
 8001ec8:	20001e08 	.word	0x20001e08

08001ecc <sps30_wake_up>:


void sps30_wake_up(SPS30 *self) {
 8001ecc:	b590      	push	{r4, r7, lr}
 8001ece:	b097      	sub	sp, #92	; 0x5c
 8001ed0:	af02      	add	r7, sp, #8
 8001ed2:	6078      	str	r0, [r7, #4]
    uint8_t Pulse = SPS30_PULSE_WAKE_UP;
 8001ed4:	23ff      	movs	r3, #255	; 0xff
 8001ed6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    uint8_t readCmd[] = SPS30_FRAME_WAKE_UP;
 8001eda:	4a17      	ldr	r2, [pc, #92]	; (8001f38 <sps30_wake_up+0x6c>)
 8001edc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ee0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ee4:	6018      	str	r0, [r3, #0]
 8001ee6:	3304      	adds	r3, #4
 8001ee8:	8019      	strh	r1, [r3, #0]
 8001eea:	3302      	adds	r3, #2
 8001eec:	0c0a      	lsrs	r2, r1, #16
 8001eee:	701a      	strb	r2, [r3, #0]
    uint8_t dataBuf[BUFFER_SIZE_WAKEUP] = {0};
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	643b      	str	r3, [r7, #64]	; 0x40
    char respuestaStr[BUFFER_SIZE_RESPONSE];

    //uart_print(MSG_SOLICITAR);
    //uart_vector_print(sizeof(readCmd), readCmd);
    self->send_command(self, &Pulse, sizeof(Pulse));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f107 014b 	add.w	r1, r7, #75	; 0x4b
 8001f00:	2201      	movs	r2, #1
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	4798      	blx	r3
    HAL_Delay(DELAY_WAKEUP);
 8001f06:	2032      	movs	r0, #50	; 0x32
 8001f08:	f001 f8ac 	bl	8003064 <HAL_Delay>
    self->send_receive(self, readCmd, sizeof(readCmd), dataBuf, sizeof(dataBuf));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68dc      	ldr	r4, [r3, #12]
 8001f10:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f14:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001f18:	2208      	movs	r2, #8
 8001f1a:	9200      	str	r2, [sp, #0]
 8001f1c:	2207      	movs	r2, #7
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	47a0      	blx	r4
    //uart_print(MSG_RESPUESTA);
    //uart_vector_print(sizeof(dataBuf), dataBuf);

    int longRespuesta = SHDLC_CalculateDataSize(dataBuf, sizeof(dataBuf));
 8001f22:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f26:	2108      	movs	r1, #8
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff fcb7 	bl	800189c <SHDLC_CalculateDataSize>
 8001f2e:	64f8      	str	r0, [r7, #76]	; 0x4c
    //snprintf(respuestaStr, sizeof(respuestaStr), MENSAJE_SIZE_RESPUESTA, longRespuesta);
    //uart_print(respuestaStr);
}
 8001f30:	bf00      	nop
 8001f32:	3754      	adds	r7, #84	; 0x54
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd90      	pop	{r4, r7, pc}
 8001f38:	0800ac78 	.word	0x0800ac78

08001f3c <SPS30_init>:

void SPS30_init(SPS30 *self, UART_HandleTypeDef *huart) {
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
    self->huart = huart;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	601a      	str	r2, [r3, #0]
    self->send_command = sps30_send_command;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a11      	ldr	r2, [pc, #68]	; (8001f94 <SPS30_init+0x58>)
 8001f50:	605a      	str	r2, [r3, #4]
    self->receive_async = sps30_receive_async;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a10      	ldr	r2, [pc, #64]	; (8001f98 <SPS30_init+0x5c>)
 8001f56:	609a      	str	r2, [r3, #8]
    self->send_receive = sps30_send_receive;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a10      	ldr	r2, [pc, #64]	; (8001f9c <SPS30_init+0x60>)
 8001f5c:	60da      	str	r2, [r3, #12]
    self->start_measurement = sps30_start_measurement;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a0f      	ldr	r2, [pc, #60]	; (8001fa0 <SPS30_init+0x64>)
 8001f62:	611a      	str	r2, [r3, #16]
    self->stop_measurement = sps30_stop_measurement;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a0f      	ldr	r2, [pc, #60]	; (8001fa4 <SPS30_init+0x68>)
 8001f68:	615a      	str	r2, [r3, #20]
    self->sleep = sps30_sleep;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a0e      	ldr	r2, [pc, #56]	; (8001fa8 <SPS30_init+0x6c>)
 8001f6e:	619a      	str	r2, [r3, #24]
    self->read_data = sps30_read_data;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a0e      	ldr	r2, [pc, #56]	; (8001fac <SPS30_init+0x70>)
 8001f74:	61da      	str	r2, [r3, #28]
    self->serial_number = sps30_serial_number;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a0d      	ldr	r2, [pc, #52]	; (8001fb0 <SPS30_init+0x74>)
 8001f7a:	621a      	str	r2, [r3, #32]
    self->wake_up = sps30_wake_up;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a0d      	ldr	r2, [pc, #52]	; (8001fb4 <SPS30_init+0x78>)
 8001f80:	625a      	str	r2, [r3, #36]	; 0x24
    self->get_concentrations = sps30_get_concentrations;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a0c      	ldr	r2, [pc, #48]	; (8001fb8 <SPS30_init+0x7c>)
 8001f86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	08001ab5 	.word	0x08001ab5
 8001f98:	08001ad9 	.word	0x08001ad9
 8001f9c:	08001afd 	.word	0x08001afd
 8001fa0:	08001b31 	.word	0x08001b31
 8001fa4:	08001b95 	.word	0x08001b95
 8001fa8:	08001bf1 	.word	0x08001bf1
 8001fac:	08001c41 	.word	0x08001c41
 8001fb0:	08001e01 	.word	0x08001e01
 8001fb4:	08001ecd 	.word	0x08001ecd
 8001fb8:	08001d15 	.word	0x08001d15

08001fbc <inicializar_sensores_sps30>:
SensorSPS30 sensores_sps30[NUM_SENSORES_SPS30];
int sensores_disponibles = 0;

/* === Funciones ============================================================================== */

void inicializar_sensores_sps30(void) {
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
    sensores_disponibles = 0;
 8001fc0:	4b38      	ldr	r3, [pc, #224]	; (80020a4 <inicializar_sensores_sps30+0xe8>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]

#if 1  // UART5 está habilitado
    sensores_sps30[sensores_disponibles].id   = 1;
 8001fc6:	4b37      	ldr	r3, [pc, #220]	; (80020a4 <inicializar_sensores_sps30+0xe8>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a37      	ldr	r2, [pc, #220]	; (80020a8 <inicializar_sensores_sps30+0xec>)
 8001fcc:	2134      	movs	r1, #52	; 0x34
 8001fce:	fb01 f303 	mul.w	r3, r1, r3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	332c      	adds	r3, #44	; 0x2c
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	701a      	strb	r2, [r3, #0]
    sensores_sps30[sensores_disponibles].uart = &huart5;
 8001fda:	4b32      	ldr	r3, [pc, #200]	; (80020a4 <inicializar_sensores_sps30+0xe8>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a32      	ldr	r2, [pc, #200]	; (80020a8 <inicializar_sensores_sps30+0xec>)
 8001fe0:	2134      	movs	r1, #52	; 0x34
 8001fe2:	fb01 f303 	mul.w	r3, r1, r3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3330      	adds	r3, #48	; 0x30
 8001fea:	4a30      	ldr	r2, [pc, #192]	; (80020ac <inicializar_sensores_sps30+0xf0>)
 8001fec:	601a      	str	r2, [r3, #0]
    SPS30_init(&sensores_sps30[sensores_disponibles].sensor, &huart5);
 8001fee:	4b2d      	ldr	r3, [pc, #180]	; (80020a4 <inicializar_sensores_sps30+0xe8>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2234      	movs	r2, #52	; 0x34
 8001ff4:	fb02 f303 	mul.w	r3, r2, r3
 8001ff8:	4a2b      	ldr	r2, [pc, #172]	; (80020a8 <inicializar_sensores_sps30+0xec>)
 8001ffa:	4413      	add	r3, r2
 8001ffc:	492b      	ldr	r1, [pc, #172]	; (80020ac <inicializar_sensores_sps30+0xf0>)
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff ff9c 	bl	8001f3c <SPS30_init>
    sensores_disponibles++;
 8002004:	4b27      	ldr	r3, [pc, #156]	; (80020a4 <inicializar_sensores_sps30+0xe8>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	3301      	adds	r3, #1
 800200a:	4a26      	ldr	r2, [pc, #152]	; (80020a4 <inicializar_sensores_sps30+0xe8>)
 800200c:	6013      	str	r3, [r2, #0]
#endif

#if 1  // Habilitar cuando uses UART7
    sensores_sps30[sensores_disponibles].id   = 2;
 800200e:	4b25      	ldr	r3, [pc, #148]	; (80020a4 <inicializar_sensores_sps30+0xe8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a25      	ldr	r2, [pc, #148]	; (80020a8 <inicializar_sensores_sps30+0xec>)
 8002014:	2134      	movs	r1, #52	; 0x34
 8002016:	fb01 f303 	mul.w	r3, r1, r3
 800201a:	4413      	add	r3, r2
 800201c:	332c      	adds	r3, #44	; 0x2c
 800201e:	2202      	movs	r2, #2
 8002020:	701a      	strb	r2, [r3, #0]
    sensores_sps30[sensores_disponibles].uart = &huart7;
 8002022:	4b20      	ldr	r3, [pc, #128]	; (80020a4 <inicializar_sensores_sps30+0xe8>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a20      	ldr	r2, [pc, #128]	; (80020a8 <inicializar_sensores_sps30+0xec>)
 8002028:	2134      	movs	r1, #52	; 0x34
 800202a:	fb01 f303 	mul.w	r3, r1, r3
 800202e:	4413      	add	r3, r2
 8002030:	3330      	adds	r3, #48	; 0x30
 8002032:	4a1f      	ldr	r2, [pc, #124]	; (80020b0 <inicializar_sensores_sps30+0xf4>)
 8002034:	601a      	str	r2, [r3, #0]
    SPS30_init(&sensores_sps30[sensores_disponibles].sensor, &huart7);
 8002036:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <inicializar_sensores_sps30+0xe8>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2234      	movs	r2, #52	; 0x34
 800203c:	fb02 f303 	mul.w	r3, r2, r3
 8002040:	4a19      	ldr	r2, [pc, #100]	; (80020a8 <inicializar_sensores_sps30+0xec>)
 8002042:	4413      	add	r3, r2
 8002044:	491a      	ldr	r1, [pc, #104]	; (80020b0 <inicializar_sensores_sps30+0xf4>)
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff ff78 	bl	8001f3c <SPS30_init>
    sensores_disponibles++;
 800204c:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <inicializar_sensores_sps30+0xe8>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	3301      	adds	r3, #1
 8002052:	4a14      	ldr	r2, [pc, #80]	; (80020a4 <inicializar_sensores_sps30+0xe8>)
 8002054:	6013      	str	r3, [r2, #0]
#endif

#if 1  // Habilitar cuando uses UART8
    sensores_sps30[sensores_disponibles].id   = 3;
 8002056:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <inicializar_sensores_sps30+0xe8>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a13      	ldr	r2, [pc, #76]	; (80020a8 <inicializar_sensores_sps30+0xec>)
 800205c:	2134      	movs	r1, #52	; 0x34
 800205e:	fb01 f303 	mul.w	r3, r1, r3
 8002062:	4413      	add	r3, r2
 8002064:	332c      	adds	r3, #44	; 0x2c
 8002066:	2203      	movs	r2, #3
 8002068:	701a      	strb	r2, [r3, #0]
    sensores_sps30[sensores_disponibles].uart = &huart1;
 800206a:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <inicializar_sensores_sps30+0xe8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a0e      	ldr	r2, [pc, #56]	; (80020a8 <inicializar_sensores_sps30+0xec>)
 8002070:	2134      	movs	r1, #52	; 0x34
 8002072:	fb01 f303 	mul.w	r3, r1, r3
 8002076:	4413      	add	r3, r2
 8002078:	3330      	adds	r3, #48	; 0x30
 800207a:	4a0e      	ldr	r2, [pc, #56]	; (80020b4 <inicializar_sensores_sps30+0xf8>)
 800207c:	601a      	str	r2, [r3, #0]
    SPS30_init(&sensores_sps30[sensores_disponibles].sensor, &huart1);
 800207e:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <inicializar_sensores_sps30+0xe8>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2234      	movs	r2, #52	; 0x34
 8002084:	fb02 f303 	mul.w	r3, r2, r3
 8002088:	4a07      	ldr	r2, [pc, #28]	; (80020a8 <inicializar_sensores_sps30+0xec>)
 800208a:	4413      	add	r3, r2
 800208c:	4909      	ldr	r1, [pc, #36]	; (80020b4 <inicializar_sensores_sps30+0xf8>)
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff ff54 	bl	8001f3c <SPS30_init>
    sensores_disponibles++;
 8002094:	4b03      	ldr	r3, [pc, #12]	; (80020a4 <inicializar_sensores_sps30+0xe8>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	3301      	adds	r3, #1
 800209a:	4a02      	ldr	r2, [pc, #8]	; (80020a4 <inicializar_sensores_sps30+0xe8>)
 800209c:	6013      	str	r3, [r2, #0]
#endif
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20001d84 	.word	0x20001d84
 80020a8:	20001ce8 	.word	0x20001ce8
 80020ac:	20001e38 	.word	0x20001e38
 80020b0:	20001e7c 	.word	0x20001e7c
 80020b4:	20001ec0 	.word	0x20001ec0

080020b8 <time_rtc_Init>:

/* === Private function implementation ========================================================= */

/* === Public function implementation ========================================================== */

void time_rtc_Init(I2C_HandleTypeDef *hi2c) {
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
    DS1307_Init(hi2c);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff fab3 	bl	800162c <DS1307_Init>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <time_rtc_GetFormattedDateTime>:

// Función para obtener la fecha y hora formateada como cadena
void time_rtc_GetFormattedDateTime(char *buffer, size_t buffer_size) {
 80020d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020d2:	b08f      	sub	sp, #60	; 0x3c
 80020d4:	af08      	add	r7, sp, #32
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
    uint8_t date = DS1307_GetDate();
 80020da:	f7ff fb1b 	bl	8001714 <DS1307_GetDate>
 80020de:	4603      	mov	r3, r0
 80020e0:	75fb      	strb	r3, [r7, #23]
    uint8_t month = DS1307_GetMonth();
 80020e2:	f7ff fb23 	bl	800172c <DS1307_GetMonth>
 80020e6:	4603      	mov	r3, r0
 80020e8:	75bb      	strb	r3, [r7, #22]
    uint16_t year = DS1307_GetYear();
 80020ea:	f7ff fb2b 	bl	8001744 <DS1307_GetYear>
 80020ee:	4603      	mov	r3, r0
 80020f0:	82bb      	strh	r3, [r7, #20]
    uint8_t hour = DS1307_GetHour();
 80020f2:	f7ff fb49 	bl	8001788 <DS1307_GetHour>
 80020f6:	4603      	mov	r3, r0
 80020f8:	74fb      	strb	r3, [r7, #19]
    uint8_t minute = DS1307_GetMinute();
 80020fa:	f7ff fb54 	bl	80017a6 <DS1307_GetMinute>
 80020fe:	4603      	mov	r3, r0
 8002100:	74bb      	strb	r3, [r7, #18]
    uint8_t second = DS1307_GetSecond();
 8002102:	f7ff fb5c 	bl	80017be <DS1307_GetSecond>
 8002106:	4603      	mov	r3, r0
 8002108:	747b      	strb	r3, [r7, #17]
    int8_t zone_hr = DS1307_GetTimeZoneHour();
 800210a:	f7ff fb67 	bl	80017dc <DS1307_GetTimeZoneHour>
 800210e:	4603      	mov	r3, r0
 8002110:	743b      	strb	r3, [r7, #16]
    uint8_t zone_min = DS1307_GetTimeZoneMin();
 8002112:	f7ff fb6c 	bl	80017ee <DS1307_GetTimeZoneMin>
 8002116:	4603      	mov	r3, r0
 8002118:	73fb      	strb	r3, [r7, #15]

    snprintf(buffer, buffer_size, "%04d-%02d-%02dT%02d:%02d:%02d%+03d:%02d\n", year, month, date, hour, minute, second, zone_hr, zone_min);
 800211a:	f8b7 c014 	ldrh.w	ip, [r7, #20]
 800211e:	7dbb      	ldrb	r3, [r7, #22]
 8002120:	7dfa      	ldrb	r2, [r7, #23]
 8002122:	7cf9      	ldrb	r1, [r7, #19]
 8002124:	7cb8      	ldrb	r0, [r7, #18]
 8002126:	7c7c      	ldrb	r4, [r7, #17]
 8002128:	f997 5010 	ldrsb.w	r5, [r7, #16]
 800212c:	7bfe      	ldrb	r6, [r7, #15]
 800212e:	9606      	str	r6, [sp, #24]
 8002130:	9505      	str	r5, [sp, #20]
 8002132:	9404      	str	r4, [sp, #16]
 8002134:	9003      	str	r0, [sp, #12]
 8002136:	9102      	str	r1, [sp, #8]
 8002138:	9201      	str	r2, [sp, #4]
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	4663      	mov	r3, ip
 800213e:	4a04      	ldr	r2, [pc, #16]	; (8002150 <time_rtc_GetFormattedDateTime+0x80>)
 8002140:	6839      	ldr	r1, [r7, #0]
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f004 fe3a 	bl	8006dbc <sniprintf>
}
 8002148:	bf00      	nop
 800214a:	371c      	adds	r7, #28
 800214c:	46bd      	mov	sp, r7
 800214e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002150:	0800ac80 	.word	0x0800ac80

08002154 <uart_print>:

#include "uart_printing.h"
#include <string.h> // Para usar memset y strlen
#include <stdio.h>  // Para usar snprintf

void uart_print(UART_Printing *self, const char *message) {
 8002154:	b590      	push	{r4, r7, lr}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(self->huart, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681c      	ldr	r4, [r3, #0]
 8002162:	6838      	ldr	r0, [r7, #0]
 8002164:	f7fe f844 	bl	80001f0 <strlen>
 8002168:	4603      	mov	r3, r0
 800216a:	b29a      	uxth	r2, r3
 800216c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002170:	6839      	ldr	r1, [r7, #0]
 8002172:	4620      	mov	r0, r4
 8002174:	f003 fad6 	bl	8005724 <HAL_UART_Transmit>
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	bd90      	pop	{r4, r7, pc}

08002180 <uart_vector_print>:

void uart_vector_print(UART_Printing *self, uint16_t data_len, const uint8_t *data) {
 8002180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002184:	b08a      	sub	sp, #40	; 0x28
 8002186:	af00      	add	r7, sp, #0
 8002188:	60f8      	str	r0, [r7, #12]
 800218a:	460b      	mov	r3, r1
 800218c:	607a      	str	r2, [r7, #4]
 800218e:	817b      	strh	r3, [r7, #10]
 8002190:	466b      	mov	r3, sp
 8002192:	469a      	mov	sl, r3
    char buffer[data_len * 3 + 1];     // Dinamizar tamaño del buffer basado en data_len.
 8002194:	897a      	ldrh	r2, [r7, #10]
 8002196:	4613      	mov	r3, r2
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	4413      	add	r3, r2
 800219c:	1c5e      	adds	r6, r3, #1
 800219e:	1e73      	subs	r3, r6, #1
 80021a0:	61bb      	str	r3, [r7, #24]
 80021a2:	4632      	mov	r2, r6
 80021a4:	2300      	movs	r3, #0
 80021a6:	4690      	mov	r8, r2
 80021a8:	4699      	mov	r9, r3
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	f04f 0300 	mov.w	r3, #0
 80021b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021be:	4632      	mov	r2, r6
 80021c0:	2300      	movs	r3, #0
 80021c2:	4614      	mov	r4, r2
 80021c4:	461d      	mov	r5, r3
 80021c6:	f04f 0200 	mov.w	r2, #0
 80021ca:	f04f 0300 	mov.w	r3, #0
 80021ce:	00eb      	lsls	r3, r5, #3
 80021d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021d4:	00e2      	lsls	r2, r4, #3
 80021d6:	4633      	mov	r3, r6
 80021d8:	3307      	adds	r3, #7
 80021da:	08db      	lsrs	r3, r3, #3
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	ebad 0d03 	sub.w	sp, sp, r3
 80021e2:	466b      	mov	r3, sp
 80021e4:	3300      	adds	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
    memset(buffer, 0, sizeof(buffer)); // Limpia el buffer.
 80021e8:	4633      	mov	r3, r6
 80021ea:	461a      	mov	r2, r3
 80021ec:	2100      	movs	r1, #0
 80021ee:	6978      	ldr	r0, [r7, #20]
 80021f0:	f003 fee6 	bl	8005fc0 <memset>
    char * ptr = buffer;               // Puntero para la posición actual en el buffer.
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	61fb      	str	r3, [r7, #28]
    int remaining = sizeof(buffer);    // Espacio restante en el buffer.
 80021f8:	623e      	str	r6, [r7, #32]
    for (uint16_t i = 0; i < data_len; ++i) {
 80021fa:	2300      	movs	r3, #0
 80021fc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80021fe:	e017      	b.n	8002230 <uart_vector_print+0xb0>
        int written = snprintf(ptr, remaining, "%02X ", data[i]);
 8002200:	6a39      	ldr	r1, [r7, #32]
 8002202:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	4413      	add	r3, r2
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	4a11      	ldr	r2, [pc, #68]	; (8002250 <uart_vector_print+0xd0>)
 800220c:	69f8      	ldr	r0, [r7, #28]
 800220e:	f004 fdd5 	bl	8006dbc <sniprintf>
 8002212:	6138      	str	r0, [r7, #16]
        ptr += written;       // Avanza el puntero.
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	69fa      	ldr	r2, [r7, #28]
 8002218:	4413      	add	r3, r2
 800221a:	61fb      	str	r3, [r7, #28]
        remaining -= written; // Decrementa el espacio restante.
 800221c:	6a3a      	ldr	r2, [r7, #32]
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	623b      	str	r3, [r7, #32]
        if (remaining <= 0)
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	2b00      	cmp	r3, #0
 8002228:	dd07      	ble.n	800223a <uart_vector_print+0xba>
    for (uint16_t i = 0; i < data_len; ++i) {
 800222a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800222c:	3301      	adds	r3, #1
 800222e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002230:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002232:	897b      	ldrh	r3, [r7, #10]
 8002234:	429a      	cmp	r2, r3
 8002236:	d3e3      	bcc.n	8002200 <uart_vector_print+0x80>
 8002238:	e000      	b.n	800223c <uart_vector_print+0xbc>
            break; // Evita desbordamiento del buffer.
 800223a:	bf00      	nop
    }
    uart_print(self, buffer); // Imprimir todos los bytes formateados.
 800223c:	6979      	ldr	r1, [r7, #20]
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f7ff ff88 	bl	8002154 <uart_print>
 8002244:	46d5      	mov	sp, sl
}
 8002246:	bf00      	nop
 8002248:	3728      	adds	r7, #40	; 0x28
 800224a:	46bd      	mov	sp, r7
 800224c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002250:	0800acb0 	.word	0x0800acb0

08002254 <UART_Printing_init>:

void UART_Printing_init(UART_Printing *self, UART_HandleTypeDef *huart) {
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
    self->huart = huart;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	601a      	str	r2, [r3, #0]
    self->print = uart_print;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a05      	ldr	r2, [pc, #20]	; (800227c <UART_Printing_init+0x28>)
 8002268:	605a      	str	r2, [r3, #4]
    self->vector_print = uart_vector_print;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a04      	ldr	r2, [pc, #16]	; (8002280 <UART_Printing_init+0x2c>)
 800226e:	609a      	str	r2, [r3, #8]
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	08002155 	.word	0x08002155
 8002280:	08002181 	.word	0x08002181

08002284 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	4b1e      	ldr	r3, [pc, #120]	; (8002308 <MX_GPIO_Init+0x84>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	4a1d      	ldr	r2, [pc, #116]	; (8002308 <MX_GPIO_Init+0x84>)
 8002294:	f043 0320 	orr.w	r3, r3, #32
 8002298:	6313      	str	r3, [r2, #48]	; 0x30
 800229a:	4b1b      	ldr	r3, [pc, #108]	; (8002308 <MX_GPIO_Init+0x84>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	f003 0320 	and.w	r3, r3, #32
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	60bb      	str	r3, [r7, #8]
 80022aa:	4b17      	ldr	r3, [pc, #92]	; (8002308 <MX_GPIO_Init+0x84>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	4a16      	ldr	r2, [pc, #88]	; (8002308 <MX_GPIO_Init+0x84>)
 80022b0:	f043 0308 	orr.w	r3, r3, #8
 80022b4:	6313      	str	r3, [r2, #48]	; 0x30
 80022b6:	4b14      	ldr	r3, [pc, #80]	; (8002308 <MX_GPIO_Init+0x84>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	607b      	str	r3, [r7, #4]
 80022c6:	4b10      	ldr	r3, [pc, #64]	; (8002308 <MX_GPIO_Init+0x84>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	4a0f      	ldr	r2, [pc, #60]	; (8002308 <MX_GPIO_Init+0x84>)
 80022cc:	f043 0304 	orr.w	r3, r3, #4
 80022d0:	6313      	str	r3, [r2, #48]	; 0x30
 80022d2:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <MX_GPIO_Init+0x84>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	607b      	str	r3, [r7, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	603b      	str	r3, [r7, #0]
 80022e2:	4b09      	ldr	r3, [pc, #36]	; (8002308 <MX_GPIO_Init+0x84>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	4a08      	ldr	r2, [pc, #32]	; (8002308 <MX_GPIO_Init+0x84>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	6313      	str	r3, [r2, #48]	; 0x30
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <MX_GPIO_Init+0x84>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	683b      	ldr	r3, [r7, #0]

}
 80022fa:	bf00      	nop
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40023800 	.word	0x40023800

0800230c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002310:	4b1b      	ldr	r3, [pc, #108]	; (8002380 <MX_I2C2_Init+0x74>)
 8002312:	4a1c      	ldr	r2, [pc, #112]	; (8002384 <MX_I2C2_Init+0x78>)
 8002314:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002316:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <MX_I2C2_Init+0x74>)
 8002318:	4a1b      	ldr	r2, [pc, #108]	; (8002388 <MX_I2C2_Init+0x7c>)
 800231a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800231c:	4b18      	ldr	r3, [pc, #96]	; (8002380 <MX_I2C2_Init+0x74>)
 800231e:	2200      	movs	r2, #0
 8002320:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002322:	4b17      	ldr	r3, [pc, #92]	; (8002380 <MX_I2C2_Init+0x74>)
 8002324:	2200      	movs	r2, #0
 8002326:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002328:	4b15      	ldr	r3, [pc, #84]	; (8002380 <MX_I2C2_Init+0x74>)
 800232a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800232e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002330:	4b13      	ldr	r3, [pc, #76]	; (8002380 <MX_I2C2_Init+0x74>)
 8002332:	2200      	movs	r2, #0
 8002334:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002336:	4b12      	ldr	r3, [pc, #72]	; (8002380 <MX_I2C2_Init+0x74>)
 8002338:	2200      	movs	r2, #0
 800233a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800233c:	4b10      	ldr	r3, [pc, #64]	; (8002380 <MX_I2C2_Init+0x74>)
 800233e:	2200      	movs	r2, #0
 8002340:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002342:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <MX_I2C2_Init+0x74>)
 8002344:	2200      	movs	r2, #0
 8002346:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002348:	480d      	ldr	r0, [pc, #52]	; (8002380 <MX_I2C2_Init+0x74>)
 800234a:	f001 f941 	bl	80035d0 <HAL_I2C_Init>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002354:	f000 fa04 	bl	8002760 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002358:	2100      	movs	r1, #0
 800235a:	4809      	ldr	r0, [pc, #36]	; (8002380 <MX_I2C2_Init+0x74>)
 800235c:	f002 f8cd 	bl	80044fa <HAL_I2CEx_ConfigAnalogFilter>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8002366:	f000 f9fb 	bl	8002760 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800236a:	2100      	movs	r1, #0
 800236c:	4804      	ldr	r0, [pc, #16]	; (8002380 <MX_I2C2_Init+0x74>)
 800236e:	f002 f900 	bl	8004572 <HAL_I2CEx_ConfigDigitalFilter>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8002378:	f000 f9f2 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800237c:	bf00      	nop
 800237e:	bd80      	pop	{r7, pc}
 8002380:	20001d88 	.word	0x20001d88
 8002384:	40005800 	.word	0x40005800
 8002388:	000186a0 	.word	0x000186a0

0800238c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08a      	sub	sp, #40	; 0x28
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002394:	f107 0314 	add.w	r3, r7, #20
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	60da      	str	r2, [r3, #12]
 80023a2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a19      	ldr	r2, [pc, #100]	; (8002410 <HAL_I2C_MspInit+0x84>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d12b      	bne.n	8002406 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	4b18      	ldr	r3, [pc, #96]	; (8002414 <HAL_I2C_MspInit+0x88>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	4a17      	ldr	r2, [pc, #92]	; (8002414 <HAL_I2C_MspInit+0x88>)
 80023b8:	f043 0320 	orr.w	r3, r3, #32
 80023bc:	6313      	str	r3, [r2, #48]	; 0x30
 80023be:	4b15      	ldr	r3, [pc, #84]	; (8002414 <HAL_I2C_MspInit+0x88>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f003 0320 	and.w	r3, r3, #32
 80023c6:	613b      	str	r3, [r7, #16]
 80023c8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80023ca:	2303      	movs	r3, #3
 80023cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023ce:	2312      	movs	r3, #18
 80023d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d6:	2303      	movs	r3, #3
 80023d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80023da:	2304      	movs	r3, #4
 80023dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023de:	f107 0314 	add.w	r3, r7, #20
 80023e2:	4619      	mov	r1, r3
 80023e4:	480c      	ldr	r0, [pc, #48]	; (8002418 <HAL_I2C_MspInit+0x8c>)
 80023e6:	f000 ff47 	bl	8003278 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	4b09      	ldr	r3, [pc, #36]	; (8002414 <HAL_I2C_MspInit+0x88>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	4a08      	ldr	r2, [pc, #32]	; (8002414 <HAL_I2C_MspInit+0x88>)
 80023f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023f8:	6413      	str	r3, [r2, #64]	; 0x40
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_I2C_MspInit+0x88>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002406:	bf00      	nop
 8002408:	3728      	adds	r7, #40	; 0x28
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40005800 	.word	0x40005800
 8002414:	40023800 	.word	0x40023800
 8002418:	40021400 	.word	0x40021400

0800241c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b0b2      	sub	sp, #200	; 0xc8
 8002420:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002422:	f000 fdad 	bl	8002f80 <HAL_Init>
    // SPS30_Init(&huart5);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002426:	f000 f939 	bl	800269c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800242a:	f7ff ff2b 	bl	8002284 <MX_GPIO_Init>
  MX_RTC_Init();
 800242e:	f000 f99d 	bl	800276c <MX_RTC_Init>
  MX_UART5_Init();
 8002432:	f000 fb49 	bl	8002ac8 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8002436:	f000 fbc5 	bl	8002bc4 <MX_USART3_UART_Init>
  MX_UART7_Init();
 800243a:	f000 fb6f 	bl	8002b1c <MX_UART7_Init>
  MX_USART6_UART_Init();
 800243e:	f000 fbeb 	bl	8002c18 <MX_USART6_UART_Init>
  MX_USART1_UART_Init();
 8002442:	f000 fb95 	bl	8002b70 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8002446:	f7ff ff61 	bl	800230c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* Inicializar sensores SPS30 disponibles*/

  inicializar_sensores_sps30();
 800244a:	f7ff fdb7 	bl	8001fbc <inicializar_sensores_sps30>

  /* Initialize RTC */

  uart.print(&uart, "Inicializando RTC DS1307...\n");
 800244e:	4b80      	ldr	r3, [pc, #512]	; (8002650 <main+0x234>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	4980      	ldr	r1, [pc, #512]	; (8002654 <main+0x238>)
 8002454:	487e      	ldr	r0, [pc, #504]	; (8002650 <main+0x234>)
 8002456:	4798      	blx	r3
  time_rtc_Init(&hi2c2);
 8002458:	487f      	ldr	r0, [pc, #508]	; (8002658 <main+0x23c>)
 800245a:	f7ff fe2d 	bl	80020b8 <time_rtc_Init>


  /*Inicializar el objeto SPS30 con el manejador de UART*/

  SPS30_init(&sps30, &huart5);
 800245e:	497f      	ldr	r1, [pc, #508]	; (800265c <main+0x240>)
 8002460:	487f      	ldr	r0, [pc, #508]	; (8002660 <main+0x244>)
 8002462:	f7ff fd6b 	bl	8001f3c <SPS30_init>
  UART_Printing_init(&uart, &huart3);
 8002466:	497f      	ldr	r1, [pc, #508]	; (8002664 <main+0x248>)
 8002468:	4879      	ldr	r0, [pc, #484]	; (8002650 <main+0x234>)
 800246a:	f7ff fef3 	bl	8002254 <UART_Printing_init>

  /* Initialization welcome message */
  uart.print(&uart, "\n\n-----------------------------------------------------------\n");
 800246e:	4b78      	ldr	r3, [pc, #480]	; (8002650 <main+0x234>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	497d      	ldr	r1, [pc, #500]	; (8002668 <main+0x24c>)
 8002474:	4876      	ldr	r0, [pc, #472]	; (8002650 <main+0x234>)
 8002476:	4798      	blx	r3
  uart.print(&uart, "*** Sistema de Monitoreo de Material Particulado ***\n");
 8002478:	4b75      	ldr	r3, [pc, #468]	; (8002650 <main+0x234>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	497b      	ldr	r1, [pc, #492]	; (800266c <main+0x250>)
 800247e:	4874      	ldr	r0, [pc, #464]	; (8002650 <main+0x234>)
 8002480:	4798      	blx	r3
  uart.print(&uart, "-----------------------------------------------------------\n");
 8002482:	4b73      	ldr	r3, [pc, #460]	; (8002650 <main+0x234>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	497a      	ldr	r1, [pc, #488]	; (8002670 <main+0x254>)
 8002488:	4871      	ldr	r0, [pc, #452]	; (8002650 <main+0x234>)
 800248a:	4798      	blx	r3




  /* Initialize RTC */
  uart.print(&uart, "Inicializando RTC DS1307...\n");
 800248c:	4b70      	ldr	r3, [pc, #448]	; (8002650 <main+0x234>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	4970      	ldr	r1, [pc, #448]	; (8002654 <main+0x238>)
 8002492:	486f      	ldr	r0, [pc, #444]	; (8002650 <main+0x234>)
 8002494:	4798      	blx	r3
  time_rtc_Init(&hi2c2);
 8002496:	4870      	ldr	r0, [pc, #448]	; (8002658 <main+0x23c>)
 8002498:	f7ff fe0e 	bl	80020b8 <time_rtc_Init>

   /*Despierta al sensor SPS30*/
   sps30.wake_up(&sps30);
 800249c:	4b70      	ldr	r3, [pc, #448]	; (8002660 <main+0x244>)
 800249e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a0:	486f      	ldr	r0, [pc, #444]	; (8002660 <main+0x244>)
 80024a2:	4798      	blx	r3
   uart.print(&uart, "WAKE UP :\n");
 80024a4:	4b6a      	ldr	r3, [pc, #424]	; (8002650 <main+0x234>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	4972      	ldr	r1, [pc, #456]	; (8002674 <main+0x258>)
 80024aa:	4869      	ldr	r0, [pc, #420]	; (8002650 <main+0x234>)
 80024ac:	4798      	blx	r3


   /* Initialize data logger */
     uart.print(&uart, "Inicializando sistema de almacenamiento de datos...\n");
 80024ae:	4b68      	ldr	r3, [pc, #416]	; (8002650 <main+0x234>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	4971      	ldr	r1, [pc, #452]	; (8002678 <main+0x25c>)
 80024b4:	4866      	ldr	r0, [pc, #408]	; (8002650 <main+0x234>)
 80024b6:	4798      	blx	r3
     if (!data_logger_init()) {
 80024b8:	f7fe fdec 	bl	8001094 <data_logger_init>
 80024bc:	4603      	mov	r3, r0
 80024be:	f083 0301 	eor.w	r3, r3, #1
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d004      	beq.n	80024d2 <main+0xb6>
         uart.print(&uart, "¡Error al inicializar el sistema de almacenamiento!\n");
 80024c8:	4b61      	ldr	r3, [pc, #388]	; (8002650 <main+0x234>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	496b      	ldr	r1, [pc, #428]	; (800267c <main+0x260>)
 80024ce:	4860      	ldr	r0, [pc, #384]	; (8002650 <main+0x234>)
 80024d0:	4798      	blx	r3
     }

     /* Initialize SPS30 sensors array */
     uart.print(&uart, "Inicializando sensores SPS30...\n");
 80024d2:	4b5f      	ldr	r3, [pc, #380]	; (8002650 <main+0x234>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	496a      	ldr	r1, [pc, #424]	; (8002680 <main+0x264>)
 80024d8:	485d      	ldr	r0, [pc, #372]	; (8002650 <main+0x234>)
 80024da:	4798      	blx	r3
     inicializar_sensores_sps30();
 80024dc:	f7ff fd6e 	bl	8001fbc <inicializar_sensores_sps30>

   /* Buffer de Mensajes */

   char datetime_buffer[32];
   char msg_buffer[128];
   uint32_t ciclo_contador = 0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {

    	  /* Get current date and time */
    	        time_rtc_GetFormattedDateTime(datetime_buffer, sizeof(datetime_buffer));
 80024e6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80024ea:	2120      	movs	r1, #32
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff fdef 	bl	80020d0 <time_rtc_GetFormattedDateTime>

    	        /* Format header message with timestamp and cycle counter */
    	        snprintf(msg_buffer, sizeof(msg_buffer),
 80024f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80024f6:	3301      	adds	r3, #1
 80024f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80024fc:	f107 0014 	add.w	r0, r7, #20
 8002500:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800250a:	4a5e      	ldr	r2, [pc, #376]	; (8002684 <main+0x268>)
 800250c:	2180      	movs	r1, #128	; 0x80
 800250e:	f004 fc55 	bl	8006dbc <sniprintf>
    	                "\n=== Ciclo de medición #%lu: %s ===\n",
    	                ++ciclo_contador, datetime_buffer);
    	        uart.print(&uart, msg_buffer);
 8002512:	4b4f      	ldr	r3, [pc, #316]	; (8002650 <main+0x234>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f107 0214 	add.w	r2, r7, #20
 800251a:	4611      	mov	r1, r2
 800251c:	484c      	ldr	r0, [pc, #304]	; (8002650 <main+0x234>)
 800251e:	4798      	blx	r3

    	        /* Read all available sensors */
    	        for (int i = 0; i < sensores_disponibles; i++) {
 8002520:	2300      	movs	r3, #0
 8002522:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002526:	e05d      	b.n	80025e4 <main+0x1c8>
    	            if (proceso_observador(&sensores_sps30[i].sensor, &uart, sensores_sps30[i].id)) {
 8002528:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800252c:	2234      	movs	r2, #52	; 0x34
 800252e:	fb02 f303 	mul.w	r3, r2, r3
 8002532:	4a55      	ldr	r2, [pc, #340]	; (8002688 <main+0x26c>)
 8002534:	1898      	adds	r0, r3, r2
 8002536:	4a54      	ldr	r2, [pc, #336]	; (8002688 <main+0x26c>)
 8002538:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800253c:	2134      	movs	r1, #52	; 0x34
 800253e:	fb01 f303 	mul.w	r3, r1, r3
 8002542:	4413      	add	r3, r2
 8002544:	332c      	adds	r3, #44	; 0x2c
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	461a      	mov	r2, r3
 800254a:	4941      	ldr	r1, [pc, #260]	; (8002650 <main+0x234>)
 800254c:	f7fe ff34 	bl	80013b8 <proceso_observador>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d041      	beq.n	80025da <main+0x1be>
    	                /* Get the last measurement data and store it */
    	                ConcentracionesPM valores = sensores_sps30[i].sensor.get_concentrations(&sensores_sps30[i].sensor);
 8002556:	4a4c      	ldr	r2, [pc, #304]	; (8002688 <main+0x26c>)
 8002558:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800255c:	2134      	movs	r1, #52	; 0x34
 800255e:	fb01 f303 	mul.w	r3, r1, r3
 8002562:	4413      	add	r3, r2
 8002564:	3328      	adds	r3, #40	; 0x28
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800256c:	2134      	movs	r1, #52	; 0x34
 800256e:	fb01 f202 	mul.w	r2, r1, r2
 8002572:	4945      	ldr	r1, [pc, #276]	; (8002688 <main+0x26c>)
 8002574:	440a      	add	r2, r1
 8002576:	4610      	mov	r0, r2
 8002578:	4798      	blx	r3
 800257a:	eeb0 6a40 	vmov.f32	s12, s0
 800257e:	eef0 6a60 	vmov.f32	s13, s1
 8002582:	eeb0 7a41 	vmov.f32	s14, s2
 8002586:	eef0 7a61 	vmov.f32	s15, s3
 800258a:	ed87 6a01 	vstr	s12, [r7, #4]
 800258e:	edc7 6a02 	vstr	s13, [r7, #8]
 8002592:	ed87 7a03 	vstr	s14, [r7, #12]
 8002596:	edc7 7a04 	vstr	s15, [r7, #16]
    	                data_logger_store_measurement(sensores_sps30[i].id, valores, -999.0f, -999.0f);
 800259a:	4a3b      	ldr	r2, [pc, #236]	; (8002688 <main+0x26c>)
 800259c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80025a0:	2134      	movs	r1, #52	; 0x34
 80025a2:	fb01 f303 	mul.w	r3, r1, r3
 80025a6:	4413      	add	r3, r2
 80025a8:	332c      	adds	r3, #44	; 0x2c
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	ed97 6a01 	vldr	s12, [r7, #4]
 80025b0:	edd7 6a02 	vldr	s13, [r7, #8]
 80025b4:	ed97 7a03 	vldr	s14, [r7, #12]
 80025b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80025bc:	eddf 2a33 	vldr	s5, [pc, #204]	; 800268c <main+0x270>
 80025c0:	ed9f 2a32 	vldr	s4, [pc, #200]	; 800268c <main+0x270>
 80025c4:	eeb0 0a46 	vmov.f32	s0, s12
 80025c8:	eef0 0a66 	vmov.f32	s1, s13
 80025cc:	eeb0 1a47 	vmov.f32	s2, s14
 80025d0:	eef0 1a67 	vmov.f32	s3, s15
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fe fd93 	bl	8001100 <data_logger_store_measurement>
    	        for (int i = 0; i < sensores_disponibles; i++) {
 80025da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80025de:	3301      	adds	r3, #1
 80025e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80025e4:	4b2a      	ldr	r3, [pc, #168]	; (8002690 <main+0x274>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80025ec:	429a      	cmp	r2, r3
 80025ee:	db9b      	blt.n	8002528 <main+0x10c>
    	            }
    	        }

    	        /* Print data summary every 10 cycles */
    	        if (ciclo_contador % 10 == 0) {
 80025f0:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80025f4:	4b27      	ldr	r3, [pc, #156]	; (8002694 <main+0x278>)
 80025f6:	fba3 2301 	umull	r2, r3, r3, r1
 80025fa:	08da      	lsrs	r2, r3, #3
 80025fc:	4613      	mov	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	1aca      	subs	r2, r1, r3
 8002606:	2a00      	cmp	r2, #0
 8002608:	d11d      	bne.n	8002646 <main+0x22a>
    	            data_logger_print_summary(&uart);
 800260a:	4811      	ldr	r0, [pc, #68]	; (8002650 <main+0x234>)
 800260c:	f7fe fe2a 	bl	8001264 <data_logger_print_summary>

    	            /* Print average PM2.5 of all sensors */
    	            float pm25_avg = data_logger_get_average_pm25(0, 10);
 8002610:	210a      	movs	r1, #10
 8002612:	2000      	movs	r0, #0
 8002614:	f7fe fdb6 	bl	8001184 <data_logger_get_average_pm25>
 8002618:	ed87 0a2d 	vstr	s0, [r7, #180]	; 0xb4
    	            snprintf(msg_buffer, sizeof(msg_buffer),
 800261c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8002620:	f7fd ffa2 	bl	8000568 <__aeabi_f2d>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	f107 0014 	add.w	r0, r7, #20
 800262c:	e9cd 2300 	strd	r2, r3, [sp]
 8002630:	4a19      	ldr	r2, [pc, #100]	; (8002698 <main+0x27c>)
 8002632:	2180      	movs	r1, #128	; 0x80
 8002634:	f004 fbc2 	bl	8006dbc <sniprintf>
    	                    "Promedio PM2.5 (últimas 10 mediciones): %.2f ug/m3\n", pm25_avg);
    	            uart.print(&uart, msg_buffer);
 8002638:	4b05      	ldr	r3, [pc, #20]	; (8002650 <main+0x234>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f107 0214 	add.w	r2, r7, #20
 8002640:	4611      	mov	r1, r2
 8002642:	4803      	ldr	r0, [pc, #12]	; (8002650 <main+0x234>)
 8002644:	4798      	blx	r3

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

        HAL_Delay(10000); // Espera 10 segundos antes de la próxima lectura
 8002646:	f242 7010 	movw	r0, #10000	; 0x2710
 800264a:	f000 fd0b 	bl	8003064 <HAL_Delay>
    	        time_rtc_GetFormattedDateTime(datetime_buffer, sizeof(datetime_buffer));
 800264e:	e74a      	b.n	80024e6 <main+0xca>
 8002650:	20001e08 	.word	0x20001e08
 8002654:	0800acb8 	.word	0x0800acb8
 8002658:	20001d88 	.word	0x20001d88
 800265c:	20001e38 	.word	0x20001e38
 8002660:	20001ddc 	.word	0x20001ddc
 8002664:	20001f04 	.word	0x20001f04
 8002668:	0800acd8 	.word	0x0800acd8
 800266c:	0800ad18 	.word	0x0800ad18
 8002670:	0800ad50 	.word	0x0800ad50
 8002674:	0800ad90 	.word	0x0800ad90
 8002678:	0800ad9c 	.word	0x0800ad9c
 800267c:	0800add4 	.word	0x0800add4
 8002680:	0800ae0c 	.word	0x0800ae0c
 8002684:	0800ae30 	.word	0x0800ae30
 8002688:	20001ce8 	.word	0x20001ce8
 800268c:	c479c000 	.word	0xc479c000
 8002690:	20001d84 	.word	0x20001d84
 8002694:	cccccccd 	.word	0xcccccccd
 8002698:	0800ae58 	.word	0x0800ae58

0800269c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b094      	sub	sp, #80	; 0x50
 80026a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026a2:	f107 0320 	add.w	r3, r7, #32
 80026a6:	2230      	movs	r2, #48	; 0x30
 80026a8:	2100      	movs	r1, #0
 80026aa:	4618      	mov	r0, r3
 80026ac:	f003 fc88 	bl	8005fc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026b0:	f107 030c 	add.w	r3, r7, #12
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	609a      	str	r2, [r3, #8]
 80026bc:	60da      	str	r2, [r3, #12]
 80026be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026c0:	2300      	movs	r3, #0
 80026c2:	60bb      	str	r3, [r7, #8]
 80026c4:	4b24      	ldr	r3, [pc, #144]	; (8002758 <SystemClock_Config+0xbc>)
 80026c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c8:	4a23      	ldr	r2, [pc, #140]	; (8002758 <SystemClock_Config+0xbc>)
 80026ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ce:	6413      	str	r3, [r2, #64]	; 0x40
 80026d0:	4b21      	ldr	r3, [pc, #132]	; (8002758 <SystemClock_Config+0xbc>)
 80026d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d8:	60bb      	str	r3, [r7, #8]
 80026da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80026dc:	2300      	movs	r3, #0
 80026de:	607b      	str	r3, [r7, #4]
 80026e0:	4b1e      	ldr	r3, [pc, #120]	; (800275c <SystemClock_Config+0xc0>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80026e8:	4a1c      	ldr	r2, [pc, #112]	; (800275c <SystemClock_Config+0xc0>)
 80026ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ee:	6013      	str	r3, [r2, #0]
 80026f0:	4b1a      	ldr	r3, [pc, #104]	; (800275c <SystemClock_Config+0xc0>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80026f8:	607b      	str	r3, [r7, #4]
 80026fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80026fc:	230a      	movs	r3, #10
 80026fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002700:	2301      	movs	r3, #1
 8002702:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002704:	2310      	movs	r3, #16
 8002706:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002708:	2301      	movs	r3, #1
 800270a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800270c:	2300      	movs	r3, #0
 800270e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002710:	f107 0320 	add.w	r3, r7, #32
 8002714:	4618      	mov	r0, r3
 8002716:	f001 ff6b 	bl	80045f0 <HAL_RCC_OscConfig>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002720:	f000 f81e 	bl	8002760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002724:	230f      	movs	r3, #15
 8002726:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002728:	2300      	movs	r3, #0
 800272a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002730:	2300      	movs	r3, #0
 8002732:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002734:	2300      	movs	r3, #0
 8002736:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002738:	f107 030c 	add.w	r3, r7, #12
 800273c:	2100      	movs	r1, #0
 800273e:	4618      	mov	r0, r3
 8002740:	f002 f9ce 	bl	8004ae0 <HAL_RCC_ClockConfig>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800274a:	f000 f809 	bl	8002760 <Error_Handler>
  }
}
 800274e:	bf00      	nop
 8002750:	3750      	adds	r7, #80	; 0x50
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40023800 	.word	0x40023800
 800275c:	40007000 	.word	0x40007000

08002760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002764:	b672      	cpsid	i
}
 8002766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8002768:	e7fe      	b.n	8002768 <Error_Handler+0x8>
	...

0800276c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002772:	1d3b      	adds	r3, r7, #4
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	60da      	str	r2, [r3, #12]
 800277e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002780:	2300      	movs	r3, #0
 8002782:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002784:	4b24      	ldr	r3, [pc, #144]	; (8002818 <MX_RTC_Init+0xac>)
 8002786:	4a25      	ldr	r2, [pc, #148]	; (800281c <MX_RTC_Init+0xb0>)
 8002788:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800278a:	4b23      	ldr	r3, [pc, #140]	; (8002818 <MX_RTC_Init+0xac>)
 800278c:	2200      	movs	r2, #0
 800278e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002790:	4b21      	ldr	r3, [pc, #132]	; (8002818 <MX_RTC_Init+0xac>)
 8002792:	227f      	movs	r2, #127	; 0x7f
 8002794:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002796:	4b20      	ldr	r3, [pc, #128]	; (8002818 <MX_RTC_Init+0xac>)
 8002798:	22ff      	movs	r2, #255	; 0xff
 800279a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800279c:	4b1e      	ldr	r3, [pc, #120]	; (8002818 <MX_RTC_Init+0xac>)
 800279e:	2200      	movs	r2, #0
 80027a0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80027a2:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <MX_RTC_Init+0xac>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80027a8:	4b1b      	ldr	r3, [pc, #108]	; (8002818 <MX_RTC_Init+0xac>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80027ae:	481a      	ldr	r0, [pc, #104]	; (8002818 <MX_RTC_Init+0xac>)
 80027b0:	f002 fd36 	bl	8005220 <HAL_RTC_Init>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80027ba:	f7ff ffd1 	bl	8002760 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80027be:	2300      	movs	r3, #0
 80027c0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80027c2:	2300      	movs	r3, #0
 80027c4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80027ca:	2300      	movs	r3, #0
 80027cc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80027ce:	2300      	movs	r3, #0
 80027d0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80027d2:	1d3b      	adds	r3, r7, #4
 80027d4:	2201      	movs	r2, #1
 80027d6:	4619      	mov	r1, r3
 80027d8:	480f      	ldr	r0, [pc, #60]	; (8002818 <MX_RTC_Init+0xac>)
 80027da:	f002 fd97 	bl	800530c <HAL_RTC_SetTime>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80027e4:	f7ff ffbc 	bl	8002760 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80027e8:	2301      	movs	r3, #1
 80027ea:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80027ec:	2301      	movs	r3, #1
 80027ee:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80027f0:	2301      	movs	r3, #1
 80027f2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80027f8:	463b      	mov	r3, r7
 80027fa:	2201      	movs	r2, #1
 80027fc:	4619      	mov	r1, r3
 80027fe:	4806      	ldr	r0, [pc, #24]	; (8002818 <MX_RTC_Init+0xac>)
 8002800:	f002 fe1e 	bl	8005440 <HAL_RTC_SetDate>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800280a:	f7ff ffa9 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800280e:	bf00      	nop
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20001e14 	.word	0x20001e14
 800281c:	40002800 	.word	0x40002800

08002820 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08e      	sub	sp, #56	; 0x38
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002828:	f107 0308 	add.w	r3, r7, #8
 800282c:	2230      	movs	r2, #48	; 0x30
 800282e:	2100      	movs	r1, #0
 8002830:	4618      	mov	r0, r3
 8002832:	f003 fbc5 	bl	8005fc0 <memset>
  if(rtcHandle->Instance==RTC)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a0c      	ldr	r2, [pc, #48]	; (800286c <HAL_RTC_MspInit+0x4c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d111      	bne.n	8002864 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002840:	2320      	movs	r3, #32
 8002842:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002844:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002848:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800284a:	f107 0308 	add.w	r3, r7, #8
 800284e:	4618      	mov	r0, r3
 8002850:	f002 fb26 	bl	8004ea0 <HAL_RCCEx_PeriphCLKConfig>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800285a:	f7ff ff81 	bl	8002760 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800285e:	4b04      	ldr	r3, [pc, #16]	; (8002870 <HAL_RTC_MspInit+0x50>)
 8002860:	2201      	movs	r2, #1
 8002862:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002864:	bf00      	nop
 8002866:	3738      	adds	r7, #56	; 0x38
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40002800 	.word	0x40002800
 8002870:	42470e3c 	.word	0x42470e3c

08002874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	607b      	str	r3, [r7, #4]
 800287e:	4b10      	ldr	r3, [pc, #64]	; (80028c0 <HAL_MspInit+0x4c>)
 8002880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002882:	4a0f      	ldr	r2, [pc, #60]	; (80028c0 <HAL_MspInit+0x4c>)
 8002884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002888:	6453      	str	r3, [r2, #68]	; 0x44
 800288a:	4b0d      	ldr	r3, [pc, #52]	; (80028c0 <HAL_MspInit+0x4c>)
 800288c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002892:	607b      	str	r3, [r7, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	603b      	str	r3, [r7, #0]
 800289a:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <HAL_MspInit+0x4c>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	4a08      	ldr	r2, [pc, #32]	; (80028c0 <HAL_MspInit+0x4c>)
 80028a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a4:	6413      	str	r3, [r2, #64]	; 0x40
 80028a6:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <HAL_MspInit+0x4c>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ae:	603b      	str	r3, [r7, #0]
 80028b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40023800 	.word	0x40023800

080028c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 80028c8:	e7fe      	b.n	80028c8 <NMI_Handler+0x4>

080028ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ca:	b480      	push	{r7}
 80028cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028ce:	e7fe      	b.n	80028ce <HardFault_Handler+0x4>

080028d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028d4:	e7fe      	b.n	80028d4 <MemManage_Handler+0x4>

080028d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028d6:	b480      	push	{r7}
 80028d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028da:	e7fe      	b.n	80028da <BusFault_Handler+0x4>

080028dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028e0:	e7fe      	b.n	80028e0 <UsageFault_Handler+0x4>

080028e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028e2:	b480      	push	{r7}
 80028e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028e6:	bf00      	nop
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028f4:	bf00      	nop
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028fe:	b480      	push	{r7}
 8002900:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002902:	bf00      	nop
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002910:	f000 fb88 	bl	8003024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002914:	bf00      	nop
 8002916:	bd80      	pop	{r7, pc}

08002918 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
    return 1;
 800291c:	2301      	movs	r3, #1
}
 800291e:	4618      	mov	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <_kill>:

int _kill(int pid, int sig) {
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
    (void)pid;
    (void)sig;
    errno = EINVAL;
 8002932:	f003 fb0d 	bl	8005f50 <__errno>
 8002936:	4603      	mov	r3, r0
 8002938:	2216      	movs	r2, #22
 800293a:	601a      	str	r2, [r3, #0]
    return -1;
 800293c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002940:	4618      	mov	r0, r3
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <_exit>:

void _exit(int status) {
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
    _kill(status, -1);
 8002950:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f7ff ffe7 	bl	8002928 <_kill>
    while (1) {
 800295a:	e7fe      	b.n	800295a <_exit+0x12>

0800295c <_read>:
    } /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char * ptr, int len) {
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002968:	2300      	movs	r3, #0
 800296a:	617b      	str	r3, [r7, #20]
 800296c:	e00a      	b.n	8002984 <_read+0x28>
        *ptr++ = __io_getchar();
 800296e:	f3af 8000 	nop.w
 8002972:	4601      	mov	r1, r0
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	1c5a      	adds	r2, r3, #1
 8002978:	60ba      	str	r2, [r7, #8]
 800297a:	b2ca      	uxtb	r2, r1
 800297c:	701a      	strb	r2, [r3, #0]
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	3301      	adds	r3, #1
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	429a      	cmp	r2, r3
 800298a:	dbf0      	blt.n	800296e <_read+0x12>
    }

    return len;
 800298c:	687b      	ldr	r3, [r7, #4]
}
 800298e:	4618      	mov	r0, r3
 8002990:	3718      	adds	r7, #24
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <_write>:

__attribute__((weak)) int _write(int file, char * ptr, int len) {
 8002996:	b580      	push	{r7, lr}
 8002998:	b086      	sub	sp, #24
 800299a:	af00      	add	r7, sp, #0
 800299c:	60f8      	str	r0, [r7, #12]
 800299e:	60b9      	str	r1, [r7, #8]
 80029a0:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80029a2:	2300      	movs	r3, #0
 80029a4:	617b      	str	r3, [r7, #20]
 80029a6:	e009      	b.n	80029bc <_write+0x26>
        __io_putchar(*ptr++);
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	1c5a      	adds	r2, r3, #1
 80029ac:	60ba      	str	r2, [r7, #8]
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f3af 8000 	nop.w
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	3301      	adds	r3, #1
 80029ba:	617b      	str	r3, [r7, #20]
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	dbf1      	blt.n	80029a8 <_write+0x12>
    }
    return len;
 80029c4:	687b      	ldr	r3, [r7, #4]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3718      	adds	r7, #24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <_close>:

int _close(int file) {
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
    (void)file;
    return -1;
 80029d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80029da:	4618      	mov	r0, r3
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <_fstat>:

int _fstat(int file, struct stat * st) {
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
 80029ee:	6039      	str	r1, [r7, #0]
    (void)file;
    st->st_mode = S_IFCHR;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029f6:	605a      	str	r2, [r3, #4]
    return 0;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <_isatty>:

int _isatty(int file) {
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
    (void)file;
    return 1;
 8002a0e:	2301      	movs	r3, #1
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
    (void)file;
    (void)ptr;
    (void)dir;
    return 0;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
	...

08002a38 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void * _sbrk(ptrdiff_t incr) {
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a40:	4a14      	ldr	r2, [pc, #80]	; (8002a94 <_sbrk+0x5c>)
 8002a42:	4b15      	ldr	r3, [pc, #84]	; (8002a98 <_sbrk+0x60>)
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	617b      	str	r3, [r7, #20]
    const uint8_t * max_heap = (uint8_t *)stack_limit;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	613b      	str	r3, [r7, #16]
    uint8_t * prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 8002a4c:	4b13      	ldr	r3, [pc, #76]	; (8002a9c <_sbrk+0x64>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d102      	bne.n	8002a5a <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 8002a54:	4b11      	ldr	r3, [pc, #68]	; (8002a9c <_sbrk+0x64>)
 8002a56:	4a12      	ldr	r2, [pc, #72]	; (8002aa0 <_sbrk+0x68>)
 8002a58:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 8002a5a:	4b10      	ldr	r3, [pc, #64]	; (8002a9c <_sbrk+0x64>)
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4413      	add	r3, r2
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d207      	bcs.n	8002a78 <_sbrk+0x40>
        errno = ENOMEM;
 8002a68:	f003 fa72 	bl	8005f50 <__errno>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	220c      	movs	r2, #12
 8002a70:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 8002a72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a76:	e009      	b.n	8002a8c <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 8002a78:	4b08      	ldr	r3, [pc, #32]	; (8002a9c <_sbrk+0x64>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 8002a7e:	4b07      	ldr	r3, [pc, #28]	; (8002a9c <_sbrk+0x64>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4413      	add	r3, r2
 8002a86:	4a05      	ldr	r2, [pc, #20]	; (8002a9c <_sbrk+0x64>)
 8002a88:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	20030000 	.word	0x20030000
 8002a98:	00000400 	.word	0x00000400
 8002a9c:	20001e34 	.word	0x20001e34
 8002aa0:	20001fa0 	.word	0x20001fa0

08002aa4 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8002aa8:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <SystemInit+0x20>)
 8002aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aae:	4a05      	ldr	r2, [pc, #20]	; (8002ac4 <SystemInit+0x20>)
 8002ab0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ab4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 8002ab8:	bf00      	nop
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	e000ed00 	.word	0xe000ed00

08002ac8 <MX_UART5_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002acc:	4b11      	ldr	r3, [pc, #68]	; (8002b14 <MX_UART5_Init+0x4c>)
 8002ace:	4a12      	ldr	r2, [pc, #72]	; (8002b18 <MX_UART5_Init+0x50>)
 8002ad0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002ad2:	4b10      	ldr	r3, [pc, #64]	; (8002b14 <MX_UART5_Init+0x4c>)
 8002ad4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ad8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002ada:	4b0e      	ldr	r3, [pc, #56]	; (8002b14 <MX_UART5_Init+0x4c>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002ae0:	4b0c      	ldr	r3, [pc, #48]	; (8002b14 <MX_UART5_Init+0x4c>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002ae6:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <MX_UART5_Init+0x4c>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002aec:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <MX_UART5_Init+0x4c>)
 8002aee:	220c      	movs	r2, #12
 8002af0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002af2:	4b08      	ldr	r3, [pc, #32]	; (8002b14 <MX_UART5_Init+0x4c>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002af8:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <MX_UART5_Init+0x4c>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002afe:	4805      	ldr	r0, [pc, #20]	; (8002b14 <MX_UART5_Init+0x4c>)
 8002b00:	f002 fdc3 	bl	800568a <HAL_UART_Init>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002b0a:	f7ff fe29 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20001e38 	.word	0x20001e38
 8002b18:	40005000 	.word	0x40005000

08002b1c <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002b20:	4b11      	ldr	r3, [pc, #68]	; (8002b68 <MX_UART7_Init+0x4c>)
 8002b22:	4a12      	ldr	r2, [pc, #72]	; (8002b6c <MX_UART7_Init+0x50>)
 8002b24:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002b26:	4b10      	ldr	r3, [pc, #64]	; (8002b68 <MX_UART7_Init+0x4c>)
 8002b28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b2c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002b2e:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <MX_UART7_Init+0x4c>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002b34:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <MX_UART7_Init+0x4c>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002b3a:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <MX_UART7_Init+0x4c>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002b40:	4b09      	ldr	r3, [pc, #36]	; (8002b68 <MX_UART7_Init+0x4c>)
 8002b42:	220c      	movs	r2, #12
 8002b44:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b46:	4b08      	ldr	r3, [pc, #32]	; (8002b68 <MX_UART7_Init+0x4c>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b4c:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <MX_UART7_Init+0x4c>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002b52:	4805      	ldr	r0, [pc, #20]	; (8002b68 <MX_UART7_Init+0x4c>)
 8002b54:	f002 fd99 	bl	800568a <HAL_UART_Init>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8002b5e:	f7ff fdff 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002b62:	bf00      	nop
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20001e7c 	.word	0x20001e7c
 8002b6c:	40007800 	.word	0x40007800

08002b70 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b74:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <MX_USART1_UART_Init+0x4c>)
 8002b76:	4a12      	ldr	r2, [pc, #72]	; (8002bc0 <MX_USART1_UART_Init+0x50>)
 8002b78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b7a:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <MX_USART1_UART_Init+0x4c>)
 8002b7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b82:	4b0e      	ldr	r3, [pc, #56]	; (8002bbc <MX_USART1_UART_Init+0x4c>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b88:	4b0c      	ldr	r3, [pc, #48]	; (8002bbc <MX_USART1_UART_Init+0x4c>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b8e:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <MX_USART1_UART_Init+0x4c>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b94:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <MX_USART1_UART_Init+0x4c>)
 8002b96:	220c      	movs	r2, #12
 8002b98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b9a:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <MX_USART1_UART_Init+0x4c>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ba0:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <MX_USART1_UART_Init+0x4c>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ba6:	4805      	ldr	r0, [pc, #20]	; (8002bbc <MX_USART1_UART_Init+0x4c>)
 8002ba8:	f002 fd6f 	bl	800568a <HAL_UART_Init>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002bb2:	f7ff fdd5 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20001ec0 	.word	0x20001ec0
 8002bc0:	40011000 	.word	0x40011000

08002bc4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002bc8:	4b11      	ldr	r3, [pc, #68]	; (8002c10 <MX_USART3_UART_Init+0x4c>)
 8002bca:	4a12      	ldr	r2, [pc, #72]	; (8002c14 <MX_USART3_UART_Init+0x50>)
 8002bcc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002bce:	4b10      	ldr	r3, [pc, #64]	; (8002c10 <MX_USART3_UART_Init+0x4c>)
 8002bd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bd4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002bd6:	4b0e      	ldr	r3, [pc, #56]	; (8002c10 <MX_USART3_UART_Init+0x4c>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002bdc:	4b0c      	ldr	r3, [pc, #48]	; (8002c10 <MX_USART3_UART_Init+0x4c>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002be2:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <MX_USART3_UART_Init+0x4c>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002be8:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <MX_USART3_UART_Init+0x4c>)
 8002bea:	220c      	movs	r2, #12
 8002bec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bee:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <MX_USART3_UART_Init+0x4c>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bf4:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <MX_USART3_UART_Init+0x4c>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002bfa:	4805      	ldr	r0, [pc, #20]	; (8002c10 <MX_USART3_UART_Init+0x4c>)
 8002bfc:	f002 fd45 	bl	800568a <HAL_UART_Init>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002c06:	f7ff fdab 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	20001f04 	.word	0x20001f04
 8002c14:	40004800 	.word	0x40004800

08002c18 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002c1c:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <MX_USART6_UART_Init+0x4c>)
 8002c1e:	4a12      	ldr	r2, [pc, #72]	; (8002c68 <MX_USART6_UART_Init+0x50>)
 8002c20:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002c22:	4b10      	ldr	r3, [pc, #64]	; (8002c64 <MX_USART6_UART_Init+0x4c>)
 8002c24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c28:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002c2a:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <MX_USART6_UART_Init+0x4c>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002c30:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <MX_USART6_UART_Init+0x4c>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002c36:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <MX_USART6_UART_Init+0x4c>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002c3c:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <MX_USART6_UART_Init+0x4c>)
 8002c3e:	220c      	movs	r2, #12
 8002c40:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c42:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <MX_USART6_UART_Init+0x4c>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c48:	4b06      	ldr	r3, [pc, #24]	; (8002c64 <MX_USART6_UART_Init+0x4c>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002c4e:	4805      	ldr	r0, [pc, #20]	; (8002c64 <MX_USART6_UART_Init+0x4c>)
 8002c50:	f002 fd1b 	bl	800568a <HAL_UART_Init>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002c5a:	f7ff fd81 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002c5e:	bf00      	nop
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	20001f48 	.word	0x20001f48
 8002c68:	40011400 	.word	0x40011400

08002c6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b092      	sub	sp, #72	; 0x48
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	605a      	str	r2, [r3, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
 8002c80:	60da      	str	r2, [r3, #12]
 8002c82:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a9e      	ldr	r2, [pc, #632]	; (8002f04 <HAL_UART_MspInit+0x298>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d14b      	bne.n	8002d26 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002c8e:	2300      	movs	r3, #0
 8002c90:	633b      	str	r3, [r7, #48]	; 0x30
 8002c92:	4b9d      	ldr	r3, [pc, #628]	; (8002f08 <HAL_UART_MspInit+0x29c>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	4a9c      	ldr	r2, [pc, #624]	; (8002f08 <HAL_UART_MspInit+0x29c>)
 8002c98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c9e:	4b9a      	ldr	r3, [pc, #616]	; (8002f08 <HAL_UART_MspInit+0x29c>)
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ca6:	633b      	str	r3, [r7, #48]	; 0x30
 8002ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002caa:	2300      	movs	r3, #0
 8002cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cae:	4b96      	ldr	r3, [pc, #600]	; (8002f08 <HAL_UART_MspInit+0x29c>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	4a95      	ldr	r2, [pc, #596]	; (8002f08 <HAL_UART_MspInit+0x29c>)
 8002cb4:	f043 0304 	orr.w	r3, r3, #4
 8002cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cba:	4b93      	ldr	r3, [pc, #588]	; (8002f08 <HAL_UART_MspInit+0x29c>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	f003 0304 	and.w	r3, r3, #4
 8002cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cca:	4b8f      	ldr	r3, [pc, #572]	; (8002f08 <HAL_UART_MspInit+0x29c>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	4a8e      	ldr	r2, [pc, #568]	; (8002f08 <HAL_UART_MspInit+0x29c>)
 8002cd0:	f043 0308 	orr.w	r3, r3, #8
 8002cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd6:	4b8c      	ldr	r3, [pc, #560]	; (8002f08 <HAL_UART_MspInit+0x29c>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002ce2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ce6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce8:	2302      	movs	r3, #2
 8002cea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cec:	2300      	movs	r3, #0
 8002cee:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002cf4:	2308      	movs	r3, #8
 8002cf6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cf8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4883      	ldr	r0, [pc, #524]	; (8002f0c <HAL_UART_MspInit+0x2a0>)
 8002d00:	f000 faba 	bl	8003278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d04:	2304      	movs	r3, #4
 8002d06:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d10:	2303      	movs	r3, #3
 8002d12:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002d14:	2308      	movs	r3, #8
 8002d16:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	487c      	ldr	r0, [pc, #496]	; (8002f10 <HAL_UART_MspInit+0x2a4>)
 8002d20:	f000 faaa 	bl	8003278 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002d24:	e0e9      	b.n	8002efa <HAL_UART_MspInit+0x28e>
  else if(uartHandle->Instance==UART7)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a7a      	ldr	r2, [pc, #488]	; (8002f14 <HAL_UART_MspInit+0x2a8>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d13c      	bne.n	8002daa <HAL_UART_MspInit+0x13e>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002d30:	2300      	movs	r3, #0
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
 8002d34:	4b74      	ldr	r3, [pc, #464]	; (8002f08 <HAL_UART_MspInit+0x29c>)
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	4a73      	ldr	r2, [pc, #460]	; (8002f08 <HAL_UART_MspInit+0x29c>)
 8002d3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d3e:	6413      	str	r3, [r2, #64]	; 0x40
 8002d40:	4b71      	ldr	r3, [pc, #452]	; (8002f08 <HAL_UART_MspInit+0x29c>)
 8002d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d44:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d48:	627b      	str	r3, [r7, #36]	; 0x24
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	623b      	str	r3, [r7, #32]
 8002d50:	4b6d      	ldr	r3, [pc, #436]	; (8002f08 <HAL_UART_MspInit+0x29c>)
 8002d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d54:	4a6c      	ldr	r2, [pc, #432]	; (8002f08 <HAL_UART_MspInit+0x29c>)
 8002d56:	f043 0320 	orr.w	r3, r3, #32
 8002d5a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5c:	4b6a      	ldr	r3, [pc, #424]	; (8002f08 <HAL_UART_MspInit+0x29c>)
 8002d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d60:	f003 0320 	and.w	r3, r3, #32
 8002d64:	623b      	str	r3, [r7, #32]
 8002d66:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d68:	2340      	movs	r3, #64	; 0x40
 8002d6a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d70:	2301      	movs	r3, #1
 8002d72:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d74:	2303      	movs	r3, #3
 8002d76:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002d78:	2308      	movs	r3, #8
 8002d7a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d7c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d80:	4619      	mov	r1, r3
 8002d82:	4865      	ldr	r0, [pc, #404]	; (8002f18 <HAL_UART_MspInit+0x2ac>)
 8002d84:	f000 fa78 	bl	8003278 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002d88:	2380      	movs	r3, #128	; 0x80
 8002d8a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d94:	2303      	movs	r3, #3
 8002d96:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002d98:	2308      	movs	r3, #8
 8002d9a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d9c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002da0:	4619      	mov	r1, r3
 8002da2:	485d      	ldr	r0, [pc, #372]	; (8002f18 <HAL_UART_MspInit+0x2ac>)
 8002da4:	f000 fa68 	bl	8003278 <HAL_GPIO_Init>
}
 8002da8:	e0a7      	b.n	8002efa <HAL_UART_MspInit+0x28e>
  else if(uartHandle->Instance==USART1)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a5b      	ldr	r2, [pc, #364]	; (8002f1c <HAL_UART_MspInit+0x2b0>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d13e      	bne.n	8002e32 <HAL_UART_MspInit+0x1c6>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002db4:	2300      	movs	r3, #0
 8002db6:	61fb      	str	r3, [r7, #28]
 8002db8:	4b53      	ldr	r3, [pc, #332]	; (8002f08 <HAL_UART_MspInit+0x29c>)
 8002dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbc:	4a52      	ldr	r2, [pc, #328]	; (8002f08 <HAL_UART_MspInit+0x29c>)
 8002dbe:	f043 0310 	orr.w	r3, r3, #16
 8002dc2:	6453      	str	r3, [r2, #68]	; 0x44
 8002dc4:	4b50      	ldr	r3, [pc, #320]	; (8002f08 <HAL_UART_MspInit+0x29c>)
 8002dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc8:	f003 0310 	and.w	r3, r3, #16
 8002dcc:	61fb      	str	r3, [r7, #28]
 8002dce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	61bb      	str	r3, [r7, #24]
 8002dd4:	4b4c      	ldr	r3, [pc, #304]	; (8002f08 <HAL_UART_MspInit+0x29c>)
 8002dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd8:	4a4b      	ldr	r2, [pc, #300]	; (8002f08 <HAL_UART_MspInit+0x29c>)
 8002dda:	f043 0301 	orr.w	r3, r3, #1
 8002dde:	6313      	str	r3, [r2, #48]	; 0x30
 8002de0:	4b49      	ldr	r3, [pc, #292]	; (8002f08 <HAL_UART_MspInit+0x29c>)
 8002de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	61bb      	str	r3, [r7, #24]
 8002dea:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002dec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002df0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df2:	2302      	movs	r3, #2
 8002df4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df6:	2300      	movs	r3, #0
 8002df8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002dfe:	2307      	movs	r3, #7
 8002e00:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e02:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e06:	4619      	mov	r1, r3
 8002e08:	4845      	ldr	r0, [pc, #276]	; (8002f20 <HAL_UART_MspInit+0x2b4>)
 8002e0a:	f000 fa35 	bl	8003278 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e12:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e14:	2302      	movs	r3, #2
 8002e16:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e20:	2307      	movs	r3, #7
 8002e22:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e24:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e28:	4619      	mov	r1, r3
 8002e2a:	483d      	ldr	r0, [pc, #244]	; (8002f20 <HAL_UART_MspInit+0x2b4>)
 8002e2c:	f000 fa24 	bl	8003278 <HAL_GPIO_Init>
}
 8002e30:	e063      	b.n	8002efa <HAL_UART_MspInit+0x28e>
  else if(uartHandle->Instance==USART3)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a3b      	ldr	r2, [pc, #236]	; (8002f24 <HAL_UART_MspInit+0x2b8>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d12d      	bne.n	8002e98 <HAL_UART_MspInit+0x22c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	4b31      	ldr	r3, [pc, #196]	; (8002f08 <HAL_UART_MspInit+0x29c>)
 8002e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e44:	4a30      	ldr	r2, [pc, #192]	; (8002f08 <HAL_UART_MspInit+0x29c>)
 8002e46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e4a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e4c:	4b2e      	ldr	r3, [pc, #184]	; (8002f08 <HAL_UART_MspInit+0x29c>)
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e54:	617b      	str	r3, [r7, #20]
 8002e56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e58:	2300      	movs	r3, #0
 8002e5a:	613b      	str	r3, [r7, #16]
 8002e5c:	4b2a      	ldr	r3, [pc, #168]	; (8002f08 <HAL_UART_MspInit+0x29c>)
 8002e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e60:	4a29      	ldr	r2, [pc, #164]	; (8002f08 <HAL_UART_MspInit+0x29c>)
 8002e62:	f043 0308 	orr.w	r3, r3, #8
 8002e66:	6313      	str	r3, [r2, #48]	; 0x30
 8002e68:	4b27      	ldr	r3, [pc, #156]	; (8002f08 <HAL_UART_MspInit+0x29c>)
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6c:	f003 0308 	and.w	r3, r3, #8
 8002e70:	613b      	str	r3, [r7, #16]
 8002e72:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e74:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e78:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e82:	2303      	movs	r3, #3
 8002e84:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e86:	2307      	movs	r3, #7
 8002e88:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e8a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e8e:	4619      	mov	r1, r3
 8002e90:	481f      	ldr	r0, [pc, #124]	; (8002f10 <HAL_UART_MspInit+0x2a4>)
 8002e92:	f000 f9f1 	bl	8003278 <HAL_GPIO_Init>
}
 8002e96:	e030      	b.n	8002efa <HAL_UART_MspInit+0x28e>
  else if(uartHandle->Instance==USART6)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a22      	ldr	r2, [pc, #136]	; (8002f28 <HAL_UART_MspInit+0x2bc>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d12b      	bne.n	8002efa <HAL_UART_MspInit+0x28e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	4b18      	ldr	r3, [pc, #96]	; (8002f08 <HAL_UART_MspInit+0x29c>)
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eaa:	4a17      	ldr	r2, [pc, #92]	; (8002f08 <HAL_UART_MspInit+0x29c>)
 8002eac:	f043 0320 	orr.w	r3, r3, #32
 8002eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8002eb2:	4b15      	ldr	r3, [pc, #84]	; (8002f08 <HAL_UART_MspInit+0x29c>)
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb6:	f003 0320 	and.w	r3, r3, #32
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60bb      	str	r3, [r7, #8]
 8002ec2:	4b11      	ldr	r3, [pc, #68]	; (8002f08 <HAL_UART_MspInit+0x29c>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	4a10      	ldr	r2, [pc, #64]	; (8002f08 <HAL_UART_MspInit+0x29c>)
 8002ec8:	f043 0304 	orr.w	r3, r3, #4
 8002ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ece:	4b0e      	ldr	r3, [pc, #56]	; (8002f08 <HAL_UART_MspInit+0x29c>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	f003 0304 	and.w	r3, r3, #4
 8002ed6:	60bb      	str	r3, [r7, #8]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002eda:	23c0      	movs	r3, #192	; 0xc0
 8002edc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ede:	2302      	movs	r3, #2
 8002ee0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002eea:	2308      	movs	r3, #8
 8002eec:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4805      	ldr	r0, [pc, #20]	; (8002f0c <HAL_UART_MspInit+0x2a0>)
 8002ef6:	f000 f9bf 	bl	8003278 <HAL_GPIO_Init>
}
 8002efa:	bf00      	nop
 8002efc:	3748      	adds	r7, #72	; 0x48
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40005000 	.word	0x40005000
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	40020800 	.word	0x40020800
 8002f10:	40020c00 	.word	0x40020c00
 8002f14:	40007800 	.word	0x40007800
 8002f18:	40021400 	.word	0x40021400
 8002f1c:	40011000 	.word	0x40011000
 8002f20:	40020000 	.word	0x40020000
 8002f24:	40004800 	.word	0x40004800
 8002f28:	40011400 	.word	0x40011400

08002f2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack       /* set stack pointer */
 8002f2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f30:	480d      	ldr	r0, [pc, #52]	; (8002f68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f32:	490e      	ldr	r1, [pc, #56]	; (8002f6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f34:	4a0e      	ldr	r2, [pc, #56]	; (8002f70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f38:	e002      	b.n	8002f40 <LoopCopyDataInit>

08002f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f3e:	3304      	adds	r3, #4

08002f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f44:	d3f9      	bcc.n	8002f3a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f46:	4a0b      	ldr	r2, [pc, #44]	; (8002f74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f48:	4c0b      	ldr	r4, [pc, #44]	; (8002f78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f4c:	e001      	b.n	8002f52 <LoopFillZerobss>

08002f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f50:	3204      	adds	r2, #4

08002f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f54:	d3fb      	bcc.n	8002f4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f56:	f7ff fda5 	bl	8002aa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f5a:	f002 ffff 	bl	8005f5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f5e:	f7ff fa5d 	bl	800241c <main>
  bx  lr
 8002f62:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002f64:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002f68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f6c:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8002f70:	0800b364 	.word	0x0800b364
  ldr r2, =_sbss
 8002f74:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8002f78:	20001fa0 	.word	0x20001fa0

08002f7c <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f7c:	e7fe      	b.n	8002f7c <ADC_IRQHandler>
	...

08002f80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f84:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <HAL_Init+0x40>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a0d      	ldr	r2, [pc, #52]	; (8002fc0 <HAL_Init+0x40>)
 8002f8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f90:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <HAL_Init+0x40>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a0a      	ldr	r2, [pc, #40]	; (8002fc0 <HAL_Init+0x40>)
 8002f96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f9c:	4b08      	ldr	r3, [pc, #32]	; (8002fc0 <HAL_Init+0x40>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a07      	ldr	r2, [pc, #28]	; (8002fc0 <HAL_Init+0x40>)
 8002fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fa8:	2003      	movs	r0, #3
 8002faa:	f000 f931 	bl	8003210 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fae:	200f      	movs	r0, #15
 8002fb0:	f000 f808 	bl	8002fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fb4:	f7ff fc5e 	bl	8002874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40023c00 	.word	0x40023c00

08002fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fcc:	4b12      	ldr	r3, [pc, #72]	; (8003018 <HAL_InitTick+0x54>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	4b12      	ldr	r3, [pc, #72]	; (800301c <HAL_InitTick+0x58>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 f93b 	bl	800325e <HAL_SYSTICK_Config>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e00e      	b.n	8003010 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b0f      	cmp	r3, #15
 8002ff6:	d80a      	bhi.n	800300e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003000:	f000 f911 	bl	8003226 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003004:	4a06      	ldr	r2, [pc, #24]	; (8003020 <HAL_InitTick+0x5c>)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800300a:	2300      	movs	r3, #0
 800300c:	e000      	b.n	8003010 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
}
 8003010:	4618      	mov	r0, r3
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	20000030 	.word	0x20000030
 800301c:	20000038 	.word	0x20000038
 8003020:	20000034 	.word	0x20000034

08003024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003028:	4b06      	ldr	r3, [pc, #24]	; (8003044 <HAL_IncTick+0x20>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	461a      	mov	r2, r3
 800302e:	4b06      	ldr	r3, [pc, #24]	; (8003048 <HAL_IncTick+0x24>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4413      	add	r3, r2
 8003034:	4a04      	ldr	r2, [pc, #16]	; (8003048 <HAL_IncTick+0x24>)
 8003036:	6013      	str	r3, [r2, #0]
}
 8003038:	bf00      	nop
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	20000038 	.word	0x20000038
 8003048:	20001f8c 	.word	0x20001f8c

0800304c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  return uwTick;
 8003050:	4b03      	ldr	r3, [pc, #12]	; (8003060 <HAL_GetTick+0x14>)
 8003052:	681b      	ldr	r3, [r3, #0]
}
 8003054:	4618      	mov	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	20001f8c 	.word	0x20001f8c

08003064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800306c:	f7ff ffee 	bl	800304c <HAL_GetTick>
 8003070:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800307c:	d005      	beq.n	800308a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800307e:	4b0a      	ldr	r3, [pc, #40]	; (80030a8 <HAL_Delay+0x44>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	461a      	mov	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	4413      	add	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800308a:	bf00      	nop
 800308c:	f7ff ffde 	bl	800304c <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	429a      	cmp	r2, r3
 800309a:	d8f7      	bhi.n	800308c <HAL_Delay+0x28>
  {
  }
}
 800309c:	bf00      	nop
 800309e:	bf00      	nop
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	20000038 	.word	0x20000038

080030ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030bc:	4b0c      	ldr	r3, [pc, #48]	; (80030f0 <__NVIC_SetPriorityGrouping+0x44>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030c8:	4013      	ands	r3, r2
 80030ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030de:	4a04      	ldr	r2, [pc, #16]	; (80030f0 <__NVIC_SetPriorityGrouping+0x44>)
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	60d3      	str	r3, [r2, #12]
}
 80030e4:	bf00      	nop
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	e000ed00 	.word	0xe000ed00

080030f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030f8:	4b04      	ldr	r3, [pc, #16]	; (800310c <__NVIC_GetPriorityGrouping+0x18>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	0a1b      	lsrs	r3, r3, #8
 80030fe:	f003 0307 	and.w	r3, r3, #7
}
 8003102:	4618      	mov	r0, r3
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	e000ed00 	.word	0xe000ed00

08003110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	6039      	str	r1, [r7, #0]
 800311a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800311c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003120:	2b00      	cmp	r3, #0
 8003122:	db0a      	blt.n	800313a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	b2da      	uxtb	r2, r3
 8003128:	490c      	ldr	r1, [pc, #48]	; (800315c <__NVIC_SetPriority+0x4c>)
 800312a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312e:	0112      	lsls	r2, r2, #4
 8003130:	b2d2      	uxtb	r2, r2
 8003132:	440b      	add	r3, r1
 8003134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003138:	e00a      	b.n	8003150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	b2da      	uxtb	r2, r3
 800313e:	4908      	ldr	r1, [pc, #32]	; (8003160 <__NVIC_SetPriority+0x50>)
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	3b04      	subs	r3, #4
 8003148:	0112      	lsls	r2, r2, #4
 800314a:	b2d2      	uxtb	r2, r2
 800314c:	440b      	add	r3, r1
 800314e:	761a      	strb	r2, [r3, #24]
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	e000e100 	.word	0xe000e100
 8003160:	e000ed00 	.word	0xe000ed00

08003164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003164:	b480      	push	{r7}
 8003166:	b089      	sub	sp, #36	; 0x24
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f1c3 0307 	rsb	r3, r3, #7
 800317e:	2b04      	cmp	r3, #4
 8003180:	bf28      	it	cs
 8003182:	2304      	movcs	r3, #4
 8003184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	3304      	adds	r3, #4
 800318a:	2b06      	cmp	r3, #6
 800318c:	d902      	bls.n	8003194 <NVIC_EncodePriority+0x30>
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	3b03      	subs	r3, #3
 8003192:	e000      	b.n	8003196 <NVIC_EncodePriority+0x32>
 8003194:	2300      	movs	r3, #0
 8003196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003198:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43da      	mvns	r2, r3
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	401a      	ands	r2, r3
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	fa01 f303 	lsl.w	r3, r1, r3
 80031b6:	43d9      	mvns	r1, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031bc:	4313      	orrs	r3, r2
         );
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3724      	adds	r7, #36	; 0x24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
	...

080031cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031dc:	d301      	bcc.n	80031e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031de:	2301      	movs	r3, #1
 80031e0:	e00f      	b.n	8003202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031e2:	4a0a      	ldr	r2, [pc, #40]	; (800320c <SysTick_Config+0x40>)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3b01      	subs	r3, #1
 80031e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ea:	210f      	movs	r1, #15
 80031ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031f0:	f7ff ff8e 	bl	8003110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031f4:	4b05      	ldr	r3, [pc, #20]	; (800320c <SysTick_Config+0x40>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031fa:	4b04      	ldr	r3, [pc, #16]	; (800320c <SysTick_Config+0x40>)
 80031fc:	2207      	movs	r2, #7
 80031fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	e000e010 	.word	0xe000e010

08003210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7ff ff47 	bl	80030ac <__NVIC_SetPriorityGrouping>
}
 800321e:	bf00      	nop
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003226:	b580      	push	{r7, lr}
 8003228:	b086      	sub	sp, #24
 800322a:	af00      	add	r7, sp, #0
 800322c:	4603      	mov	r3, r0
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	607a      	str	r2, [r7, #4]
 8003232:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003238:	f7ff ff5c 	bl	80030f4 <__NVIC_GetPriorityGrouping>
 800323c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	68b9      	ldr	r1, [r7, #8]
 8003242:	6978      	ldr	r0, [r7, #20]
 8003244:	f7ff ff8e 	bl	8003164 <NVIC_EncodePriority>
 8003248:	4602      	mov	r2, r0
 800324a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800324e:	4611      	mov	r1, r2
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff ff5d 	bl	8003110 <__NVIC_SetPriority>
}
 8003256:	bf00      	nop
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7ff ffb0 	bl	80031cc <SysTick_Config>
 800326c:	4603      	mov	r3, r0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
	...

08003278 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003278:	b480      	push	{r7}
 800327a:	b089      	sub	sp, #36	; 0x24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003286:	2300      	movs	r3, #0
 8003288:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800328a:	2300      	movs	r3, #0
 800328c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800328e:	2300      	movs	r3, #0
 8003290:	61fb      	str	r3, [r7, #28]
 8003292:	e177      	b.n	8003584 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003294:	2201      	movs	r2, #1
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	4013      	ands	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	f040 8166 	bne.w	800357e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f003 0303 	and.w	r3, r3, #3
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d005      	beq.n	80032ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d130      	bne.n	800332c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	2203      	movs	r2, #3
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43db      	mvns	r3, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4013      	ands	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003300:	2201      	movs	r2, #1
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	43db      	mvns	r3, r3
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4013      	ands	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	091b      	lsrs	r3, r3, #4
 8003316:	f003 0201 	and.w	r2, r3, #1
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4313      	orrs	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f003 0303 	and.w	r3, r3, #3
 8003334:	2b03      	cmp	r3, #3
 8003336:	d017      	beq.n	8003368 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	2203      	movs	r2, #3
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	43db      	mvns	r3, r3
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	4013      	ands	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	4313      	orrs	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f003 0303 	and.w	r3, r3, #3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d123      	bne.n	80033bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	08da      	lsrs	r2, r3, #3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3208      	adds	r2, #8
 800337c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003380:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	220f      	movs	r2, #15
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	43db      	mvns	r3, r3
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	4013      	ands	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	691a      	ldr	r2, [r3, #16]
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	08da      	lsrs	r2, r3, #3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	3208      	adds	r2, #8
 80033b6:	69b9      	ldr	r1, [r7, #24]
 80033b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	2203      	movs	r2, #3
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	43db      	mvns	r3, r3
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	4013      	ands	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f003 0203 	and.w	r2, r3, #3
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 80c0 	beq.w	800357e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033fe:	2300      	movs	r3, #0
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	4b66      	ldr	r3, [pc, #408]	; (800359c <HAL_GPIO_Init+0x324>)
 8003404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003406:	4a65      	ldr	r2, [pc, #404]	; (800359c <HAL_GPIO_Init+0x324>)
 8003408:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800340c:	6453      	str	r3, [r2, #68]	; 0x44
 800340e:	4b63      	ldr	r3, [pc, #396]	; (800359c <HAL_GPIO_Init+0x324>)
 8003410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800341a:	4a61      	ldr	r2, [pc, #388]	; (80035a0 <HAL_GPIO_Init+0x328>)
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	089b      	lsrs	r3, r3, #2
 8003420:	3302      	adds	r3, #2
 8003422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003426:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	220f      	movs	r2, #15
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	43db      	mvns	r3, r3
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4013      	ands	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a58      	ldr	r2, [pc, #352]	; (80035a4 <HAL_GPIO_Init+0x32c>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d037      	beq.n	80034b6 <HAL_GPIO_Init+0x23e>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a57      	ldr	r2, [pc, #348]	; (80035a8 <HAL_GPIO_Init+0x330>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d031      	beq.n	80034b2 <HAL_GPIO_Init+0x23a>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a56      	ldr	r2, [pc, #344]	; (80035ac <HAL_GPIO_Init+0x334>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d02b      	beq.n	80034ae <HAL_GPIO_Init+0x236>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a55      	ldr	r2, [pc, #340]	; (80035b0 <HAL_GPIO_Init+0x338>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d025      	beq.n	80034aa <HAL_GPIO_Init+0x232>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a54      	ldr	r2, [pc, #336]	; (80035b4 <HAL_GPIO_Init+0x33c>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d01f      	beq.n	80034a6 <HAL_GPIO_Init+0x22e>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a53      	ldr	r2, [pc, #332]	; (80035b8 <HAL_GPIO_Init+0x340>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d019      	beq.n	80034a2 <HAL_GPIO_Init+0x22a>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a52      	ldr	r2, [pc, #328]	; (80035bc <HAL_GPIO_Init+0x344>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d013      	beq.n	800349e <HAL_GPIO_Init+0x226>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a51      	ldr	r2, [pc, #324]	; (80035c0 <HAL_GPIO_Init+0x348>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d00d      	beq.n	800349a <HAL_GPIO_Init+0x222>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a50      	ldr	r2, [pc, #320]	; (80035c4 <HAL_GPIO_Init+0x34c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d007      	beq.n	8003496 <HAL_GPIO_Init+0x21e>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a4f      	ldr	r2, [pc, #316]	; (80035c8 <HAL_GPIO_Init+0x350>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d101      	bne.n	8003492 <HAL_GPIO_Init+0x21a>
 800348e:	2309      	movs	r3, #9
 8003490:	e012      	b.n	80034b8 <HAL_GPIO_Init+0x240>
 8003492:	230a      	movs	r3, #10
 8003494:	e010      	b.n	80034b8 <HAL_GPIO_Init+0x240>
 8003496:	2308      	movs	r3, #8
 8003498:	e00e      	b.n	80034b8 <HAL_GPIO_Init+0x240>
 800349a:	2307      	movs	r3, #7
 800349c:	e00c      	b.n	80034b8 <HAL_GPIO_Init+0x240>
 800349e:	2306      	movs	r3, #6
 80034a0:	e00a      	b.n	80034b8 <HAL_GPIO_Init+0x240>
 80034a2:	2305      	movs	r3, #5
 80034a4:	e008      	b.n	80034b8 <HAL_GPIO_Init+0x240>
 80034a6:	2304      	movs	r3, #4
 80034a8:	e006      	b.n	80034b8 <HAL_GPIO_Init+0x240>
 80034aa:	2303      	movs	r3, #3
 80034ac:	e004      	b.n	80034b8 <HAL_GPIO_Init+0x240>
 80034ae:	2302      	movs	r3, #2
 80034b0:	e002      	b.n	80034b8 <HAL_GPIO_Init+0x240>
 80034b2:	2301      	movs	r3, #1
 80034b4:	e000      	b.n	80034b8 <HAL_GPIO_Init+0x240>
 80034b6:	2300      	movs	r3, #0
 80034b8:	69fa      	ldr	r2, [r7, #28]
 80034ba:	f002 0203 	and.w	r2, r2, #3
 80034be:	0092      	lsls	r2, r2, #2
 80034c0:	4093      	lsls	r3, r2
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034c8:	4935      	ldr	r1, [pc, #212]	; (80035a0 <HAL_GPIO_Init+0x328>)
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	089b      	lsrs	r3, r3, #2
 80034ce:	3302      	adds	r3, #2
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034d6:	4b3d      	ldr	r3, [pc, #244]	; (80035cc <HAL_GPIO_Init+0x354>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	43db      	mvns	r3, r3
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	4013      	ands	r3, r2
 80034e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034fa:	4a34      	ldr	r2, [pc, #208]	; (80035cc <HAL_GPIO_Init+0x354>)
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003500:	4b32      	ldr	r3, [pc, #200]	; (80035cc <HAL_GPIO_Init+0x354>)
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	43db      	mvns	r3, r3
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	4013      	ands	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	4313      	orrs	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003524:	4a29      	ldr	r2, [pc, #164]	; (80035cc <HAL_GPIO_Init+0x354>)
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800352a:	4b28      	ldr	r3, [pc, #160]	; (80035cc <HAL_GPIO_Init+0x354>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	43db      	mvns	r3, r3
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4013      	ands	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	4313      	orrs	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800354e:	4a1f      	ldr	r2, [pc, #124]	; (80035cc <HAL_GPIO_Init+0x354>)
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003554:	4b1d      	ldr	r3, [pc, #116]	; (80035cc <HAL_GPIO_Init+0x354>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	43db      	mvns	r3, r3
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	4013      	ands	r3, r2
 8003562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d003      	beq.n	8003578 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	4313      	orrs	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003578:	4a14      	ldr	r2, [pc, #80]	; (80035cc <HAL_GPIO_Init+0x354>)
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	3301      	adds	r3, #1
 8003582:	61fb      	str	r3, [r7, #28]
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	2b0f      	cmp	r3, #15
 8003588:	f67f ae84 	bls.w	8003294 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800358c:	bf00      	nop
 800358e:	bf00      	nop
 8003590:	3724      	adds	r7, #36	; 0x24
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	40023800 	.word	0x40023800
 80035a0:	40013800 	.word	0x40013800
 80035a4:	40020000 	.word	0x40020000
 80035a8:	40020400 	.word	0x40020400
 80035ac:	40020800 	.word	0x40020800
 80035b0:	40020c00 	.word	0x40020c00
 80035b4:	40021000 	.word	0x40021000
 80035b8:	40021400 	.word	0x40021400
 80035bc:	40021800 	.word	0x40021800
 80035c0:	40021c00 	.word	0x40021c00
 80035c4:	40022000 	.word	0x40022000
 80035c8:	40022400 	.word	0x40022400
 80035cc:	40013c00 	.word	0x40013c00

080035d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e12b      	b.n	800383a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d106      	bne.n	80035fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7fe fec8 	bl	800238c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2224      	movs	r2, #36	; 0x24
 8003600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0201 	bic.w	r2, r2, #1
 8003612:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003622:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003632:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003634:	f001 fc0c 	bl	8004e50 <HAL_RCC_GetPCLK1Freq>
 8003638:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	4a81      	ldr	r2, [pc, #516]	; (8003844 <HAL_I2C_Init+0x274>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d807      	bhi.n	8003654 <HAL_I2C_Init+0x84>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	4a80      	ldr	r2, [pc, #512]	; (8003848 <HAL_I2C_Init+0x278>)
 8003648:	4293      	cmp	r3, r2
 800364a:	bf94      	ite	ls
 800364c:	2301      	movls	r3, #1
 800364e:	2300      	movhi	r3, #0
 8003650:	b2db      	uxtb	r3, r3
 8003652:	e006      	b.n	8003662 <HAL_I2C_Init+0x92>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4a7d      	ldr	r2, [pc, #500]	; (800384c <HAL_I2C_Init+0x27c>)
 8003658:	4293      	cmp	r3, r2
 800365a:	bf94      	ite	ls
 800365c:	2301      	movls	r3, #1
 800365e:	2300      	movhi	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e0e7      	b.n	800383a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	4a78      	ldr	r2, [pc, #480]	; (8003850 <HAL_I2C_Init+0x280>)
 800366e:	fba2 2303 	umull	r2, r3, r2, r3
 8003672:	0c9b      	lsrs	r3, r3, #18
 8003674:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	430a      	orrs	r2, r1
 8003688:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	4a6a      	ldr	r2, [pc, #424]	; (8003844 <HAL_I2C_Init+0x274>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d802      	bhi.n	80036a4 <HAL_I2C_Init+0xd4>
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	3301      	adds	r3, #1
 80036a2:	e009      	b.n	80036b8 <HAL_I2C_Init+0xe8>
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80036aa:	fb02 f303 	mul.w	r3, r2, r3
 80036ae:	4a69      	ldr	r2, [pc, #420]	; (8003854 <HAL_I2C_Init+0x284>)
 80036b0:	fba2 2303 	umull	r2, r3, r2, r3
 80036b4:	099b      	lsrs	r3, r3, #6
 80036b6:	3301      	adds	r3, #1
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6812      	ldr	r2, [r2, #0]
 80036bc:	430b      	orrs	r3, r1
 80036be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80036ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	495c      	ldr	r1, [pc, #368]	; (8003844 <HAL_I2C_Init+0x274>)
 80036d4:	428b      	cmp	r3, r1
 80036d6:	d819      	bhi.n	800370c <HAL_I2C_Init+0x13c>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	1e59      	subs	r1, r3, #1
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80036e6:	1c59      	adds	r1, r3, #1
 80036e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80036ec:	400b      	ands	r3, r1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00a      	beq.n	8003708 <HAL_I2C_Init+0x138>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	1e59      	subs	r1, r3, #1
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003700:	3301      	adds	r3, #1
 8003702:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003706:	e051      	b.n	80037ac <HAL_I2C_Init+0x1dc>
 8003708:	2304      	movs	r3, #4
 800370a:	e04f      	b.n	80037ac <HAL_I2C_Init+0x1dc>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d111      	bne.n	8003738 <HAL_I2C_Init+0x168>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	1e58      	subs	r0, r3, #1
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6859      	ldr	r1, [r3, #4]
 800371c:	460b      	mov	r3, r1
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	440b      	add	r3, r1
 8003722:	fbb0 f3f3 	udiv	r3, r0, r3
 8003726:	3301      	adds	r3, #1
 8003728:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800372c:	2b00      	cmp	r3, #0
 800372e:	bf0c      	ite	eq
 8003730:	2301      	moveq	r3, #1
 8003732:	2300      	movne	r3, #0
 8003734:	b2db      	uxtb	r3, r3
 8003736:	e012      	b.n	800375e <HAL_I2C_Init+0x18e>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	1e58      	subs	r0, r3, #1
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6859      	ldr	r1, [r3, #4]
 8003740:	460b      	mov	r3, r1
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	0099      	lsls	r1, r3, #2
 8003748:	440b      	add	r3, r1
 800374a:	fbb0 f3f3 	udiv	r3, r0, r3
 800374e:	3301      	adds	r3, #1
 8003750:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003754:	2b00      	cmp	r3, #0
 8003756:	bf0c      	ite	eq
 8003758:	2301      	moveq	r3, #1
 800375a:	2300      	movne	r3, #0
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <HAL_I2C_Init+0x196>
 8003762:	2301      	movs	r3, #1
 8003764:	e022      	b.n	80037ac <HAL_I2C_Init+0x1dc>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10e      	bne.n	800378c <HAL_I2C_Init+0x1bc>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	1e58      	subs	r0, r3, #1
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6859      	ldr	r1, [r3, #4]
 8003776:	460b      	mov	r3, r1
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	440b      	add	r3, r1
 800377c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003780:	3301      	adds	r3, #1
 8003782:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800378a:	e00f      	b.n	80037ac <HAL_I2C_Init+0x1dc>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	1e58      	subs	r0, r3, #1
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6859      	ldr	r1, [r3, #4]
 8003794:	460b      	mov	r3, r1
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	0099      	lsls	r1, r3, #2
 800379c:	440b      	add	r3, r1
 800379e:	fbb0 f3f3 	udiv	r3, r0, r3
 80037a2:	3301      	adds	r3, #1
 80037a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037ac:	6879      	ldr	r1, [r7, #4]
 80037ae:	6809      	ldr	r1, [r1, #0]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69da      	ldr	r2, [r3, #28]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80037da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6911      	ldr	r1, [r2, #16]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	68d2      	ldr	r2, [r2, #12]
 80037e6:	4311      	orrs	r1, r2
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	6812      	ldr	r2, [r2, #0]
 80037ec:	430b      	orrs	r3, r1
 80037ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	695a      	ldr	r2, [r3, #20]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	431a      	orrs	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 0201 	orr.w	r2, r2, #1
 800381a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2220      	movs	r2, #32
 8003826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	000186a0 	.word	0x000186a0
 8003848:	001e847f 	.word	0x001e847f
 800384c:	003d08ff 	.word	0x003d08ff
 8003850:	431bde83 	.word	0x431bde83
 8003854:	10624dd3 	.word	0x10624dd3

08003858 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b088      	sub	sp, #32
 800385c:	af02      	add	r7, sp, #8
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	607a      	str	r2, [r7, #4]
 8003862:	461a      	mov	r2, r3
 8003864:	460b      	mov	r3, r1
 8003866:	817b      	strh	r3, [r7, #10]
 8003868:	4613      	mov	r3, r2
 800386a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800386c:	f7ff fbee 	bl	800304c <HAL_GetTick>
 8003870:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b20      	cmp	r3, #32
 800387c:	f040 80e0 	bne.w	8003a40 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	2319      	movs	r3, #25
 8003886:	2201      	movs	r2, #1
 8003888:	4970      	ldr	r1, [pc, #448]	; (8003a4c <HAL_I2C_Master_Transmit+0x1f4>)
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 fc58 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003896:	2302      	movs	r3, #2
 8003898:	e0d3      	b.n	8003a42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d101      	bne.n	80038a8 <HAL_I2C_Master_Transmit+0x50>
 80038a4:	2302      	movs	r3, #2
 80038a6:	e0cc      	b.n	8003a42 <HAL_I2C_Master_Transmit+0x1ea>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d007      	beq.n	80038ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f042 0201 	orr.w	r2, r2, #1
 80038cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2221      	movs	r2, #33	; 0x21
 80038e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2210      	movs	r2, #16
 80038ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	893a      	ldrh	r2, [r7, #8]
 80038fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003904:	b29a      	uxth	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	4a50      	ldr	r2, [pc, #320]	; (8003a50 <HAL_I2C_Master_Transmit+0x1f8>)
 800390e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003910:	8979      	ldrh	r1, [r7, #10]
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	6a3a      	ldr	r2, [r7, #32]
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 fac2 	bl	8003ea0 <I2C_MasterRequestWrite>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e08d      	b.n	8003a42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003926:	2300      	movs	r3, #0
 8003928:	613b      	str	r3, [r7, #16]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	613b      	str	r3, [r7, #16]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	613b      	str	r3, [r7, #16]
 800393a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800393c:	e066      	b.n	8003a0c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	6a39      	ldr	r1, [r7, #32]
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 fcd2 	bl	80042ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00d      	beq.n	800396a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	2b04      	cmp	r3, #4
 8003954:	d107      	bne.n	8003966 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003964:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e06b      	b.n	8003a42 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	781a      	ldrb	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	1c5a      	adds	r2, r3, #1
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003984:	b29b      	uxth	r3, r3
 8003986:	3b01      	subs	r3, #1
 8003988:	b29a      	uxth	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003992:	3b01      	subs	r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d11b      	bne.n	80039e0 <HAL_I2C_Master_Transmit+0x188>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d017      	beq.n	80039e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	781a      	ldrb	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	1c5a      	adds	r2, r3, #1
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d8:	3b01      	subs	r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	6a39      	ldr	r1, [r7, #32]
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 fcc2 	bl	800436e <I2C_WaitOnBTFFlagUntilTimeout>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00d      	beq.n	8003a0c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f4:	2b04      	cmp	r3, #4
 80039f6:	d107      	bne.n	8003a08 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a06:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e01a      	b.n	8003a42 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d194      	bne.n	800393e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	e000      	b.n	8003a42 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003a40:	2302      	movs	r3, #2
  }
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	00100002 	.word	0x00100002
 8003a50:	ffff0000 	.word	0xffff0000

08003a54 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08c      	sub	sp, #48	; 0x30
 8003a58:	af02      	add	r7, sp, #8
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	607a      	str	r2, [r7, #4]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	460b      	mov	r3, r1
 8003a62:	817b      	strh	r3, [r7, #10]
 8003a64:	4613      	mov	r3, r2
 8003a66:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a68:	f7ff faf0 	bl	800304c <HAL_GetTick>
 8003a6c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b20      	cmp	r3, #32
 8003a78:	f040 820b 	bne.w	8003e92 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	2319      	movs	r3, #25
 8003a82:	2201      	movs	r2, #1
 8003a84:	497c      	ldr	r1, [pc, #496]	; (8003c78 <HAL_I2C_Master_Receive+0x224>)
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 fb5a 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003a92:	2302      	movs	r3, #2
 8003a94:	e1fe      	b.n	8003e94 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d101      	bne.n	8003aa4 <HAL_I2C_Master_Receive+0x50>
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	e1f7      	b.n	8003e94 <HAL_I2C_Master_Receive+0x440>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d007      	beq.n	8003aca <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f042 0201 	orr.w	r2, r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ad8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2222      	movs	r2, #34	; 0x22
 8003ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2210      	movs	r2, #16
 8003ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	893a      	ldrh	r2, [r7, #8]
 8003afa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	4a5c      	ldr	r2, [pc, #368]	; (8003c7c <HAL_I2C_Master_Receive+0x228>)
 8003b0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b0c:	8979      	ldrh	r1, [r7, #10]
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 fa46 	bl	8003fa4 <I2C_MasterRequestRead>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e1b8      	b.n	8003e94 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d113      	bne.n	8003b52 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	623b      	str	r3, [r7, #32]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	623b      	str	r3, [r7, #32]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	623b      	str	r3, [r7, #32]
 8003b3e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	e18c      	b.n	8003e6c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d11b      	bne.n	8003b92 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	61fb      	str	r3, [r7, #28]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	61fb      	str	r3, [r7, #28]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	61fb      	str	r3, [r7, #28]
 8003b7e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	e16c      	b.n	8003e6c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d11b      	bne.n	8003bd2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ba8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bba:	2300      	movs	r3, #0
 8003bbc:	61bb      	str	r3, [r7, #24]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	61bb      	str	r3, [r7, #24]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	61bb      	str	r3, [r7, #24]
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	e14c      	b.n	8003e6c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003be0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003be2:	2300      	movs	r3, #0
 8003be4:	617b      	str	r3, [r7, #20]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	617b      	str	r3, [r7, #20]
 8003bf6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003bf8:	e138      	b.n	8003e6c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bfe:	2b03      	cmp	r3, #3
 8003c00:	f200 80f1 	bhi.w	8003de6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d123      	bne.n	8003c54 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 fbed 	bl	80043f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e139      	b.n	8003e94 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	691a      	ldr	r2, [r3, #16]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	1c5a      	adds	r2, r3, #1
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c52:	e10b      	b.n	8003e6c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d14e      	bne.n	8003cfa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c62:	2200      	movs	r2, #0
 8003c64:	4906      	ldr	r1, [pc, #24]	; (8003c80 <HAL_I2C_Master_Receive+0x22c>)
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 fa6a 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d008      	beq.n	8003c84 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e10e      	b.n	8003e94 <HAL_I2C_Master_Receive+0x440>
 8003c76:	bf00      	nop
 8003c78:	00100002 	.word	0x00100002
 8003c7c:	ffff0000 	.word	0xffff0000
 8003c80:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	691a      	ldr	r2, [r3, #16]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca6:	1c5a      	adds	r2, r3, #1
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	691a      	ldr	r2, [r3, #16]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cf8:	e0b8      	b.n	8003e6c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d00:	2200      	movs	r2, #0
 8003d02:	4966      	ldr	r1, [pc, #408]	; (8003e9c <HAL_I2C_Master_Receive+0x448>)
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f000 fa1b 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e0bf      	b.n	8003e94 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	691a      	ldr	r2, [r3, #16]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d40:	3b01      	subs	r3, #1
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	494f      	ldr	r1, [pc, #316]	; (8003e9c <HAL_I2C_Master_Receive+0x448>)
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f000 f9ed 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e091      	b.n	8003e94 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	691a      	ldr	r2, [r3, #16]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	3b01      	subs	r3, #1
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	691a      	ldr	r2, [r3, #16]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	1c5a      	adds	r2, r3, #1
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003de4:	e042      	b.n	8003e6c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f000 fb00 	bl	80043f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e04c      	b.n	8003e94 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	691a      	ldr	r2, [r3, #16]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	f003 0304 	and.w	r3, r3, #4
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d118      	bne.n	8003e6c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	691a      	ldr	r2, [r3, #16]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	1c5a      	adds	r2, r3, #1
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f47f aec2 	bne.w	8003bfa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	e000      	b.n	8003e94 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003e92:	2302      	movs	r3, #2
  }
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3728      	adds	r7, #40	; 0x28
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	00010004 	.word	0x00010004

08003ea0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b088      	sub	sp, #32
 8003ea4:	af02      	add	r7, sp, #8
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	607a      	str	r2, [r7, #4]
 8003eaa:	603b      	str	r3, [r7, #0]
 8003eac:	460b      	mov	r3, r1
 8003eae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2b08      	cmp	r3, #8
 8003eba:	d006      	beq.n	8003eca <I2C_MasterRequestWrite+0x2a>
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d003      	beq.n	8003eca <I2C_MasterRequestWrite+0x2a>
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ec8:	d108      	bne.n	8003edc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	e00b      	b.n	8003ef4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee0:	2b12      	cmp	r3, #18
 8003ee2:	d107      	bne.n	8003ef4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ef2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 f91d 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00d      	beq.n	8003f28 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f1a:	d103      	bne.n	8003f24 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e035      	b.n	8003f94 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f30:	d108      	bne.n	8003f44 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f32:	897b      	ldrh	r3, [r7, #10]
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	461a      	mov	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f40:	611a      	str	r2, [r3, #16]
 8003f42:	e01b      	b.n	8003f7c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f44:	897b      	ldrh	r3, [r7, #10]
 8003f46:	11db      	asrs	r3, r3, #7
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	f003 0306 	and.w	r3, r3, #6
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	f063 030f 	orn	r3, r3, #15
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	490e      	ldr	r1, [pc, #56]	; (8003f9c <I2C_MasterRequestWrite+0xfc>)
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 f943 	bl	80041ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e010      	b.n	8003f94 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f72:	897b      	ldrh	r3, [r7, #10]
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	4907      	ldr	r1, [pc, #28]	; (8003fa0 <I2C_MasterRequestWrite+0x100>)
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 f933 	bl	80041ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e000      	b.n	8003f94 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3718      	adds	r7, #24
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	00010008 	.word	0x00010008
 8003fa0:	00010002 	.word	0x00010002

08003fa4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b088      	sub	sp, #32
 8003fa8:	af02      	add	r7, sp, #8
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	607a      	str	r2, [r7, #4]
 8003fae:	603b      	str	r3, [r7, #0]
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fc8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d006      	beq.n	8003fde <I2C_MasterRequestRead+0x3a>
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d003      	beq.n	8003fde <I2C_MasterRequestRead+0x3a>
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fdc:	d108      	bne.n	8003ff0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	e00b      	b.n	8004008 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff4:	2b11      	cmp	r3, #17
 8003ff6:	d107      	bne.n	8004008 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004006:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 f893 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00d      	beq.n	800403c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800402e:	d103      	bne.n	8004038 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004036:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e079      	b.n	8004130 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004044:	d108      	bne.n	8004058 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004046:	897b      	ldrh	r3, [r7, #10]
 8004048:	b2db      	uxtb	r3, r3
 800404a:	f043 0301 	orr.w	r3, r3, #1
 800404e:	b2da      	uxtb	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	611a      	str	r2, [r3, #16]
 8004056:	e05f      	b.n	8004118 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004058:	897b      	ldrh	r3, [r7, #10]
 800405a:	11db      	asrs	r3, r3, #7
 800405c:	b2db      	uxtb	r3, r3
 800405e:	f003 0306 	and.w	r3, r3, #6
 8004062:	b2db      	uxtb	r3, r3
 8004064:	f063 030f 	orn	r3, r3, #15
 8004068:	b2da      	uxtb	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	4930      	ldr	r1, [pc, #192]	; (8004138 <I2C_MasterRequestRead+0x194>)
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 f8b9 	bl	80041ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e054      	b.n	8004130 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004086:	897b      	ldrh	r3, [r7, #10]
 8004088:	b2da      	uxtb	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	4929      	ldr	r1, [pc, #164]	; (800413c <I2C_MasterRequestRead+0x198>)
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f000 f8a9 	bl	80041ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e044      	b.n	8004130 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040a6:	2300      	movs	r3, #0
 80040a8:	613b      	str	r3, [r7, #16]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	613b      	str	r3, [r7, #16]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	613b      	str	r3, [r7, #16]
 80040ba:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040ca:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	9300      	str	r3, [sp, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 f831 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00d      	beq.n	8004100 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040f2:	d103      	bne.n	80040fc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040fa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e017      	b.n	8004130 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004100:	897b      	ldrh	r3, [r7, #10]
 8004102:	11db      	asrs	r3, r3, #7
 8004104:	b2db      	uxtb	r3, r3
 8004106:	f003 0306 	and.w	r3, r3, #6
 800410a:	b2db      	uxtb	r3, r3
 800410c:	f063 030e 	orn	r3, r3, #14
 8004110:	b2da      	uxtb	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	4907      	ldr	r1, [pc, #28]	; (800413c <I2C_MasterRequestRead+0x198>)
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 f865 	bl	80041ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e000      	b.n	8004130 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	00010008 	.word	0x00010008
 800413c:	00010002 	.word	0x00010002

08004140 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	603b      	str	r3, [r7, #0]
 800414c:	4613      	mov	r3, r2
 800414e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004150:	e025      	b.n	800419e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004158:	d021      	beq.n	800419e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800415a:	f7fe ff77 	bl	800304c <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	429a      	cmp	r2, r3
 8004168:	d302      	bcc.n	8004170 <I2C_WaitOnFlagUntilTimeout+0x30>
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d116      	bne.n	800419e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2220      	movs	r2, #32
 800417a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	f043 0220 	orr.w	r2, r3, #32
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e023      	b.n	80041e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	0c1b      	lsrs	r3, r3, #16
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d10d      	bne.n	80041c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	43da      	mvns	r2, r3
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	4013      	ands	r3, r2
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	bf0c      	ite	eq
 80041ba:	2301      	moveq	r3, #1
 80041bc:	2300      	movne	r3, #0
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	461a      	mov	r2, r3
 80041c2:	e00c      	b.n	80041de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	43da      	mvns	r2, r3
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	4013      	ands	r3, r2
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	bf0c      	ite	eq
 80041d6:	2301      	moveq	r3, #1
 80041d8:	2300      	movne	r3, #0
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	461a      	mov	r2, r3
 80041de:	79fb      	ldrb	r3, [r7, #7]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d0b6      	beq.n	8004152 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b084      	sub	sp, #16
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	60f8      	str	r0, [r7, #12]
 80041f6:	60b9      	str	r1, [r7, #8]
 80041f8:	607a      	str	r2, [r7, #4]
 80041fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041fc:	e051      	b.n	80042a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800420c:	d123      	bne.n	8004256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800421c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004226:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2220      	movs	r2, #32
 8004232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	f043 0204 	orr.w	r2, r3, #4
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e046      	b.n	80042e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800425c:	d021      	beq.n	80042a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800425e:	f7fe fef5 	bl	800304c <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	429a      	cmp	r2, r3
 800426c:	d302      	bcc.n	8004274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d116      	bne.n	80042a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2220      	movs	r2, #32
 800427e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	f043 0220 	orr.w	r2, r3, #32
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e020      	b.n	80042e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	0c1b      	lsrs	r3, r3, #16
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d10c      	bne.n	80042c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	43da      	mvns	r2, r3
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	4013      	ands	r3, r2
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	bf14      	ite	ne
 80042be:	2301      	movne	r3, #1
 80042c0:	2300      	moveq	r3, #0
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	e00b      	b.n	80042de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	43da      	mvns	r2, r3
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	4013      	ands	r3, r2
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	bf14      	ite	ne
 80042d8:	2301      	movne	r3, #1
 80042da:	2300      	moveq	r3, #0
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d18d      	bne.n	80041fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042f8:	e02d      	b.n	8004356 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f000 f8ce 	bl	800449c <I2C_IsAcknowledgeFailed>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e02d      	b.n	8004366 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004310:	d021      	beq.n	8004356 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004312:	f7fe fe9b 	bl	800304c <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	429a      	cmp	r2, r3
 8004320:	d302      	bcc.n	8004328 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d116      	bne.n	8004356 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2220      	movs	r2, #32
 8004332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	f043 0220 	orr.w	r2, r3, #32
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e007      	b.n	8004366 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004360:	2b80      	cmp	r3, #128	; 0x80
 8004362:	d1ca      	bne.n	80042fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b084      	sub	sp, #16
 8004372:	af00      	add	r7, sp, #0
 8004374:	60f8      	str	r0, [r7, #12]
 8004376:	60b9      	str	r1, [r7, #8]
 8004378:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800437a:	e02d      	b.n	80043d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 f88d 	bl	800449c <I2C_IsAcknowledgeFailed>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e02d      	b.n	80043e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004392:	d021      	beq.n	80043d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004394:	f7fe fe5a 	bl	800304c <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d302      	bcc.n	80043aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d116      	bne.n	80043d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c4:	f043 0220 	orr.w	r2, r3, #32
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e007      	b.n	80043e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	f003 0304 	and.w	r3, r3, #4
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	d1ca      	bne.n	800437c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043fc:	e042      	b.n	8004484 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	f003 0310 	and.w	r3, r3, #16
 8004408:	2b10      	cmp	r3, #16
 800440a:	d119      	bne.n	8004440 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f06f 0210 	mvn.w	r2, #16
 8004414:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2220      	movs	r2, #32
 8004420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e029      	b.n	8004494 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004440:	f7fe fe04 	bl	800304c <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	429a      	cmp	r2, r3
 800444e:	d302      	bcc.n	8004456 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d116      	bne.n	8004484 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2220      	movs	r2, #32
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004470:	f043 0220 	orr.w	r2, r3, #32
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e007      	b.n	8004494 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800448e:	2b40      	cmp	r3, #64	; 0x40
 8004490:	d1b5      	bne.n	80043fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044b2:	d11b      	bne.n	80044ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2220      	movs	r2, #32
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d8:	f043 0204 	orr.w	r2, r3, #4
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e000      	b.n	80044ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b083      	sub	sp, #12
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
 8004502:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b20      	cmp	r3, #32
 800450e:	d129      	bne.n	8004564 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2224      	movs	r2, #36	; 0x24
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0201 	bic.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 0210 	bic.w	r2, r2, #16
 8004536:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0201 	orr.w	r2, r2, #1
 8004556:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2220      	movs	r2, #32
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004560:	2300      	movs	r3, #0
 8004562:	e000      	b.n	8004566 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004564:	2302      	movs	r3, #2
  }
}
 8004566:	4618      	mov	r0, r3
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004572:	b480      	push	{r7}
 8004574:	b085      	sub	sp, #20
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
 800457a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800457c:	2300      	movs	r3, #0
 800457e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b20      	cmp	r3, #32
 800458a:	d12a      	bne.n	80045e2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2224      	movs	r2, #36	; 0x24
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 0201 	bic.w	r2, r2, #1
 80045a2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80045ac:	89fb      	ldrh	r3, [r7, #14]
 80045ae:	f023 030f 	bic.w	r3, r3, #15
 80045b2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	89fb      	ldrh	r3, [r7, #14]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	89fa      	ldrh	r2, [r7, #14]
 80045c4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f042 0201 	orr.w	r2, r2, #1
 80045d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2220      	movs	r2, #32
 80045da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80045de:	2300      	movs	r3, #0
 80045e0:	e000      	b.n	80045e4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80045e2:	2302      	movs	r3, #2
  }
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e267      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d075      	beq.n	80046fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800460e:	4b88      	ldr	r3, [pc, #544]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f003 030c 	and.w	r3, r3, #12
 8004616:	2b04      	cmp	r3, #4
 8004618:	d00c      	beq.n	8004634 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800461a:	4b85      	ldr	r3, [pc, #532]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004622:	2b08      	cmp	r3, #8
 8004624:	d112      	bne.n	800464c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004626:	4b82      	ldr	r3, [pc, #520]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800462e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004632:	d10b      	bne.n	800464c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004634:	4b7e      	ldr	r3, [pc, #504]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d05b      	beq.n	80046f8 <HAL_RCC_OscConfig+0x108>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d157      	bne.n	80046f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e242      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004654:	d106      	bne.n	8004664 <HAL_RCC_OscConfig+0x74>
 8004656:	4b76      	ldr	r3, [pc, #472]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a75      	ldr	r2, [pc, #468]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 800465c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004660:	6013      	str	r3, [r2, #0]
 8004662:	e01d      	b.n	80046a0 <HAL_RCC_OscConfig+0xb0>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800466c:	d10c      	bne.n	8004688 <HAL_RCC_OscConfig+0x98>
 800466e:	4b70      	ldr	r3, [pc, #448]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a6f      	ldr	r2, [pc, #444]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	4b6d      	ldr	r3, [pc, #436]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a6c      	ldr	r2, [pc, #432]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004684:	6013      	str	r3, [r2, #0]
 8004686:	e00b      	b.n	80046a0 <HAL_RCC_OscConfig+0xb0>
 8004688:	4b69      	ldr	r3, [pc, #420]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a68      	ldr	r2, [pc, #416]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 800468e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004692:	6013      	str	r3, [r2, #0]
 8004694:	4b66      	ldr	r3, [pc, #408]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a65      	ldr	r2, [pc, #404]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 800469a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800469e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d013      	beq.n	80046d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a8:	f7fe fcd0 	bl	800304c <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046b0:	f7fe fccc 	bl	800304c <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b64      	cmp	r3, #100	; 0x64
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e207      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046c2:	4b5b      	ldr	r3, [pc, #364]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d0f0      	beq.n	80046b0 <HAL_RCC_OscConfig+0xc0>
 80046ce:	e014      	b.n	80046fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d0:	f7fe fcbc 	bl	800304c <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046d8:	f7fe fcb8 	bl	800304c <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b64      	cmp	r3, #100	; 0x64
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e1f3      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ea:	4b51      	ldr	r3, [pc, #324]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1f0      	bne.n	80046d8 <HAL_RCC_OscConfig+0xe8>
 80046f6:	e000      	b.n	80046fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d063      	beq.n	80047ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004706:	4b4a      	ldr	r3, [pc, #296]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 030c 	and.w	r3, r3, #12
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00b      	beq.n	800472a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004712:	4b47      	ldr	r3, [pc, #284]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800471a:	2b08      	cmp	r3, #8
 800471c:	d11c      	bne.n	8004758 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800471e:	4b44      	ldr	r3, [pc, #272]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d116      	bne.n	8004758 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800472a:	4b41      	ldr	r3, [pc, #260]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d005      	beq.n	8004742 <HAL_RCC_OscConfig+0x152>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d001      	beq.n	8004742 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e1c7      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004742:	4b3b      	ldr	r3, [pc, #236]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	4937      	ldr	r1, [pc, #220]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004752:	4313      	orrs	r3, r2
 8004754:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004756:	e03a      	b.n	80047ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d020      	beq.n	80047a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004760:	4b34      	ldr	r3, [pc, #208]	; (8004834 <HAL_RCC_OscConfig+0x244>)
 8004762:	2201      	movs	r2, #1
 8004764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004766:	f7fe fc71 	bl	800304c <HAL_GetTick>
 800476a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800476c:	e008      	b.n	8004780 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800476e:	f7fe fc6d 	bl	800304c <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d901      	bls.n	8004780 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e1a8      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004780:	4b2b      	ldr	r3, [pc, #172]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0f0      	beq.n	800476e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800478c:	4b28      	ldr	r3, [pc, #160]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	4925      	ldr	r1, [pc, #148]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 800479c:	4313      	orrs	r3, r2
 800479e:	600b      	str	r3, [r1, #0]
 80047a0:	e015      	b.n	80047ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047a2:	4b24      	ldr	r3, [pc, #144]	; (8004834 <HAL_RCC_OscConfig+0x244>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a8:	f7fe fc50 	bl	800304c <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047b0:	f7fe fc4c 	bl	800304c <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e187      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047c2:	4b1b      	ldr	r3, [pc, #108]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1f0      	bne.n	80047b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0308 	and.w	r3, r3, #8
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d036      	beq.n	8004848 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d016      	beq.n	8004810 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047e2:	4b15      	ldr	r3, [pc, #84]	; (8004838 <HAL_RCC_OscConfig+0x248>)
 80047e4:	2201      	movs	r2, #1
 80047e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e8:	f7fe fc30 	bl	800304c <HAL_GetTick>
 80047ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ee:	e008      	b.n	8004802 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047f0:	f7fe fc2c 	bl	800304c <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e167      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004802:	4b0b      	ldr	r3, [pc, #44]	; (8004830 <HAL_RCC_OscConfig+0x240>)
 8004804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d0f0      	beq.n	80047f0 <HAL_RCC_OscConfig+0x200>
 800480e:	e01b      	b.n	8004848 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004810:	4b09      	ldr	r3, [pc, #36]	; (8004838 <HAL_RCC_OscConfig+0x248>)
 8004812:	2200      	movs	r2, #0
 8004814:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004816:	f7fe fc19 	bl	800304c <HAL_GetTick>
 800481a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800481c:	e00e      	b.n	800483c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800481e:	f7fe fc15 	bl	800304c <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d907      	bls.n	800483c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e150      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
 8004830:	40023800 	.word	0x40023800
 8004834:	42470000 	.word	0x42470000
 8004838:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800483c:	4b88      	ldr	r3, [pc, #544]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 800483e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1ea      	bne.n	800481e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0304 	and.w	r3, r3, #4
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 8097 	beq.w	8004984 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004856:	2300      	movs	r3, #0
 8004858:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800485a:	4b81      	ldr	r3, [pc, #516]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10f      	bne.n	8004886 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004866:	2300      	movs	r3, #0
 8004868:	60bb      	str	r3, [r7, #8]
 800486a:	4b7d      	ldr	r3, [pc, #500]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	4a7c      	ldr	r2, [pc, #496]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 8004870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004874:	6413      	str	r3, [r2, #64]	; 0x40
 8004876:	4b7a      	ldr	r3, [pc, #488]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800487e:	60bb      	str	r3, [r7, #8]
 8004880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004882:	2301      	movs	r3, #1
 8004884:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004886:	4b77      	ldr	r3, [pc, #476]	; (8004a64 <HAL_RCC_OscConfig+0x474>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488e:	2b00      	cmp	r3, #0
 8004890:	d118      	bne.n	80048c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004892:	4b74      	ldr	r3, [pc, #464]	; (8004a64 <HAL_RCC_OscConfig+0x474>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a73      	ldr	r2, [pc, #460]	; (8004a64 <HAL_RCC_OscConfig+0x474>)
 8004898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800489c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800489e:	f7fe fbd5 	bl	800304c <HAL_GetTick>
 80048a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048a4:	e008      	b.n	80048b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048a6:	f7fe fbd1 	bl	800304c <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e10c      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048b8:	4b6a      	ldr	r3, [pc, #424]	; (8004a64 <HAL_RCC_OscConfig+0x474>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d0f0      	beq.n	80048a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d106      	bne.n	80048da <HAL_RCC_OscConfig+0x2ea>
 80048cc:	4b64      	ldr	r3, [pc, #400]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 80048ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d0:	4a63      	ldr	r2, [pc, #396]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 80048d2:	f043 0301 	orr.w	r3, r3, #1
 80048d6:	6713      	str	r3, [r2, #112]	; 0x70
 80048d8:	e01c      	b.n	8004914 <HAL_RCC_OscConfig+0x324>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	2b05      	cmp	r3, #5
 80048e0:	d10c      	bne.n	80048fc <HAL_RCC_OscConfig+0x30c>
 80048e2:	4b5f      	ldr	r3, [pc, #380]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 80048e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e6:	4a5e      	ldr	r2, [pc, #376]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 80048e8:	f043 0304 	orr.w	r3, r3, #4
 80048ec:	6713      	str	r3, [r2, #112]	; 0x70
 80048ee:	4b5c      	ldr	r3, [pc, #368]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 80048f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f2:	4a5b      	ldr	r2, [pc, #364]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 80048f4:	f043 0301 	orr.w	r3, r3, #1
 80048f8:	6713      	str	r3, [r2, #112]	; 0x70
 80048fa:	e00b      	b.n	8004914 <HAL_RCC_OscConfig+0x324>
 80048fc:	4b58      	ldr	r3, [pc, #352]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 80048fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004900:	4a57      	ldr	r2, [pc, #348]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 8004902:	f023 0301 	bic.w	r3, r3, #1
 8004906:	6713      	str	r3, [r2, #112]	; 0x70
 8004908:	4b55      	ldr	r3, [pc, #340]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 800490a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800490c:	4a54      	ldr	r2, [pc, #336]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 800490e:	f023 0304 	bic.w	r3, r3, #4
 8004912:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d015      	beq.n	8004948 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800491c:	f7fe fb96 	bl	800304c <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004922:	e00a      	b.n	800493a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004924:	f7fe fb92 	bl	800304c <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004932:	4293      	cmp	r3, r2
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e0cb      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800493a:	4b49      	ldr	r3, [pc, #292]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 800493c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d0ee      	beq.n	8004924 <HAL_RCC_OscConfig+0x334>
 8004946:	e014      	b.n	8004972 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004948:	f7fe fb80 	bl	800304c <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800494e:	e00a      	b.n	8004966 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004950:	f7fe fb7c 	bl	800304c <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	f241 3288 	movw	r2, #5000	; 0x1388
 800495e:	4293      	cmp	r3, r2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e0b5      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004966:	4b3e      	ldr	r3, [pc, #248]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 8004968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1ee      	bne.n	8004950 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004972:	7dfb      	ldrb	r3, [r7, #23]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d105      	bne.n	8004984 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004978:	4b39      	ldr	r3, [pc, #228]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 800497a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497c:	4a38      	ldr	r2, [pc, #224]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 800497e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004982:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 80a1 	beq.w	8004ad0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800498e:	4b34      	ldr	r3, [pc, #208]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f003 030c 	and.w	r3, r3, #12
 8004996:	2b08      	cmp	r3, #8
 8004998:	d05c      	beq.n	8004a54 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d141      	bne.n	8004a26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a2:	4b31      	ldr	r3, [pc, #196]	; (8004a68 <HAL_RCC_OscConfig+0x478>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a8:	f7fe fb50 	bl	800304c <HAL_GetTick>
 80049ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049b0:	f7fe fb4c 	bl	800304c <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e087      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049c2:	4b27      	ldr	r3, [pc, #156]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1f0      	bne.n	80049b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	69da      	ldr	r2, [r3, #28]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	431a      	orrs	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	019b      	lsls	r3, r3, #6
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e4:	085b      	lsrs	r3, r3, #1
 80049e6:	3b01      	subs	r3, #1
 80049e8:	041b      	lsls	r3, r3, #16
 80049ea:	431a      	orrs	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f0:	061b      	lsls	r3, r3, #24
 80049f2:	491b      	ldr	r1, [pc, #108]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049f8:	4b1b      	ldr	r3, [pc, #108]	; (8004a68 <HAL_RCC_OscConfig+0x478>)
 80049fa:	2201      	movs	r2, #1
 80049fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049fe:	f7fe fb25 	bl	800304c <HAL_GetTick>
 8004a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a04:	e008      	b.n	8004a18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a06:	f7fe fb21 	bl	800304c <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d901      	bls.n	8004a18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e05c      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a18:	4b11      	ldr	r3, [pc, #68]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d0f0      	beq.n	8004a06 <HAL_RCC_OscConfig+0x416>
 8004a24:	e054      	b.n	8004ad0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a26:	4b10      	ldr	r3, [pc, #64]	; (8004a68 <HAL_RCC_OscConfig+0x478>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a2c:	f7fe fb0e 	bl	800304c <HAL_GetTick>
 8004a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a34:	f7fe fb0a 	bl	800304c <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e045      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a46:	4b06      	ldr	r3, [pc, #24]	; (8004a60 <HAL_RCC_OscConfig+0x470>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1f0      	bne.n	8004a34 <HAL_RCC_OscConfig+0x444>
 8004a52:	e03d      	b.n	8004ad0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d107      	bne.n	8004a6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e038      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
 8004a60:	40023800 	.word	0x40023800
 8004a64:	40007000 	.word	0x40007000
 8004a68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a6c:	4b1b      	ldr	r3, [pc, #108]	; (8004adc <HAL_RCC_OscConfig+0x4ec>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d028      	beq.n	8004acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d121      	bne.n	8004acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d11a      	bne.n	8004acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004aa2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d111      	bne.n	8004acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab2:	085b      	lsrs	r3, r3, #1
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d107      	bne.n	8004acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d001      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e000      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3718      	adds	r7, #24
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	40023800 	.word	0x40023800

08004ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e0cc      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004af4:	4b68      	ldr	r3, [pc, #416]	; (8004c98 <HAL_RCC_ClockConfig+0x1b8>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 030f 	and.w	r3, r3, #15
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d90c      	bls.n	8004b1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b02:	4b65      	ldr	r3, [pc, #404]	; (8004c98 <HAL_RCC_ClockConfig+0x1b8>)
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	b2d2      	uxtb	r2, r2
 8004b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b0a:	4b63      	ldr	r3, [pc, #396]	; (8004c98 <HAL_RCC_ClockConfig+0x1b8>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 030f 	and.w	r3, r3, #15
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d001      	beq.n	8004b1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e0b8      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d020      	beq.n	8004b6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d005      	beq.n	8004b40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b34:	4b59      	ldr	r3, [pc, #356]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	4a58      	ldr	r2, [pc, #352]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0308 	and.w	r3, r3, #8
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d005      	beq.n	8004b58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b4c:	4b53      	ldr	r3, [pc, #332]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	4a52      	ldr	r2, [pc, #328]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b58:	4b50      	ldr	r3, [pc, #320]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	494d      	ldr	r1, [pc, #308]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d044      	beq.n	8004c00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d107      	bne.n	8004b8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b7e:	4b47      	ldr	r3, [pc, #284]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d119      	bne.n	8004bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e07f      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d003      	beq.n	8004b9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b9a:	2b03      	cmp	r3, #3
 8004b9c:	d107      	bne.n	8004bae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b9e:	4b3f      	ldr	r3, [pc, #252]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d109      	bne.n	8004bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e06f      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bae:	4b3b      	ldr	r3, [pc, #236]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e067      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bbe:	4b37      	ldr	r3, [pc, #220]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f023 0203 	bic.w	r2, r3, #3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	4934      	ldr	r1, [pc, #208]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bd0:	f7fe fa3c 	bl	800304c <HAL_GetTick>
 8004bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bd6:	e00a      	b.n	8004bee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bd8:	f7fe fa38 	bl	800304c <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e04f      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bee:	4b2b      	ldr	r3, [pc, #172]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f003 020c 	and.w	r2, r3, #12
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d1eb      	bne.n	8004bd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c00:	4b25      	ldr	r3, [pc, #148]	; (8004c98 <HAL_RCC_ClockConfig+0x1b8>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 030f 	and.w	r3, r3, #15
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d20c      	bcs.n	8004c28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c0e:	4b22      	ldr	r3, [pc, #136]	; (8004c98 <HAL_RCC_ClockConfig+0x1b8>)
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	b2d2      	uxtb	r2, r2
 8004c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c16:	4b20      	ldr	r3, [pc, #128]	; (8004c98 <HAL_RCC_ClockConfig+0x1b8>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 030f 	and.w	r3, r3, #15
 8004c1e:	683a      	ldr	r2, [r7, #0]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d001      	beq.n	8004c28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e032      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0304 	and.w	r3, r3, #4
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d008      	beq.n	8004c46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c34:	4b19      	ldr	r3, [pc, #100]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	4916      	ldr	r1, [pc, #88]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0308 	and.w	r3, r3, #8
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d009      	beq.n	8004c66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c52:	4b12      	ldr	r3, [pc, #72]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	490e      	ldr	r1, [pc, #56]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c66:	f000 f821 	bl	8004cac <HAL_RCC_GetSysClockFreq>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	4b0b      	ldr	r3, [pc, #44]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	091b      	lsrs	r3, r3, #4
 8004c72:	f003 030f 	and.w	r3, r3, #15
 8004c76:	490a      	ldr	r1, [pc, #40]	; (8004ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c78:	5ccb      	ldrb	r3, [r1, r3]
 8004c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c7e:	4a09      	ldr	r2, [pc, #36]	; (8004ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c82:	4b09      	ldr	r3, [pc, #36]	; (8004ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7fe f99c 	bl	8002fc4 <HAL_InitTick>

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	40023c00 	.word	0x40023c00
 8004c9c:	40023800 	.word	0x40023800
 8004ca0:	0800ae90 	.word	0x0800ae90
 8004ca4:	20000030 	.word	0x20000030
 8004ca8:	20000034 	.word	0x20000034

08004cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cb0:	b090      	sub	sp, #64	; 0x40
 8004cb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	637b      	str	r3, [r7, #52]	; 0x34
 8004cb8:	2300      	movs	r3, #0
 8004cba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cc4:	4b59      	ldr	r3, [pc, #356]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f003 030c 	and.w	r3, r3, #12
 8004ccc:	2b08      	cmp	r3, #8
 8004cce:	d00d      	beq.n	8004cec <HAL_RCC_GetSysClockFreq+0x40>
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	f200 80a1 	bhi.w	8004e18 <HAL_RCC_GetSysClockFreq+0x16c>
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d002      	beq.n	8004ce0 <HAL_RCC_GetSysClockFreq+0x34>
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	d003      	beq.n	8004ce6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004cde:	e09b      	b.n	8004e18 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ce0:	4b53      	ldr	r3, [pc, #332]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x184>)
 8004ce2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004ce4:	e09b      	b.n	8004e1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ce6:	4b53      	ldr	r3, [pc, #332]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ce8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004cea:	e098      	b.n	8004e1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cec:	4b4f      	ldr	r3, [pc, #316]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cf4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cf6:	4b4d      	ldr	r3, [pc, #308]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d028      	beq.n	8004d54 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d02:	4b4a      	ldr	r3, [pc, #296]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	099b      	lsrs	r3, r3, #6
 8004d08:	2200      	movs	r2, #0
 8004d0a:	623b      	str	r3, [r7, #32]
 8004d0c:	627a      	str	r2, [r7, #36]	; 0x24
 8004d0e:	6a3b      	ldr	r3, [r7, #32]
 8004d10:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004d14:	2100      	movs	r1, #0
 8004d16:	4b47      	ldr	r3, [pc, #284]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d18:	fb03 f201 	mul.w	r2, r3, r1
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	fb00 f303 	mul.w	r3, r0, r3
 8004d22:	4413      	add	r3, r2
 8004d24:	4a43      	ldr	r2, [pc, #268]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d26:	fba0 1202 	umull	r1, r2, r0, r2
 8004d2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d2c:	460a      	mov	r2, r1
 8004d2e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004d30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d32:	4413      	add	r3, r2
 8004d34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d38:	2200      	movs	r2, #0
 8004d3a:	61bb      	str	r3, [r7, #24]
 8004d3c:	61fa      	str	r2, [r7, #28]
 8004d3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004d46:	f7fb ffaf 	bl	8000ca8 <__aeabi_uldivmod>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	4613      	mov	r3, r2
 8004d50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d52:	e053      	b.n	8004dfc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d54:	4b35      	ldr	r3, [pc, #212]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	099b      	lsrs	r3, r3, #6
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	613b      	str	r3, [r7, #16]
 8004d5e:	617a      	str	r2, [r7, #20]
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004d66:	f04f 0b00 	mov.w	fp, #0
 8004d6a:	4652      	mov	r2, sl
 8004d6c:	465b      	mov	r3, fp
 8004d6e:	f04f 0000 	mov.w	r0, #0
 8004d72:	f04f 0100 	mov.w	r1, #0
 8004d76:	0159      	lsls	r1, r3, #5
 8004d78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d7c:	0150      	lsls	r0, r2, #5
 8004d7e:	4602      	mov	r2, r0
 8004d80:	460b      	mov	r3, r1
 8004d82:	ebb2 080a 	subs.w	r8, r2, sl
 8004d86:	eb63 090b 	sbc.w	r9, r3, fp
 8004d8a:	f04f 0200 	mov.w	r2, #0
 8004d8e:	f04f 0300 	mov.w	r3, #0
 8004d92:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004d96:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004d9a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004d9e:	ebb2 0408 	subs.w	r4, r2, r8
 8004da2:	eb63 0509 	sbc.w	r5, r3, r9
 8004da6:	f04f 0200 	mov.w	r2, #0
 8004daa:	f04f 0300 	mov.w	r3, #0
 8004dae:	00eb      	lsls	r3, r5, #3
 8004db0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004db4:	00e2      	lsls	r2, r4, #3
 8004db6:	4614      	mov	r4, r2
 8004db8:	461d      	mov	r5, r3
 8004dba:	eb14 030a 	adds.w	r3, r4, sl
 8004dbe:	603b      	str	r3, [r7, #0]
 8004dc0:	eb45 030b 	adc.w	r3, r5, fp
 8004dc4:	607b      	str	r3, [r7, #4]
 8004dc6:	f04f 0200 	mov.w	r2, #0
 8004dca:	f04f 0300 	mov.w	r3, #0
 8004dce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004dd2:	4629      	mov	r1, r5
 8004dd4:	028b      	lsls	r3, r1, #10
 8004dd6:	4621      	mov	r1, r4
 8004dd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ddc:	4621      	mov	r1, r4
 8004dde:	028a      	lsls	r2, r1, #10
 8004de0:	4610      	mov	r0, r2
 8004de2:	4619      	mov	r1, r3
 8004de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de6:	2200      	movs	r2, #0
 8004de8:	60bb      	str	r3, [r7, #8]
 8004dea:	60fa      	str	r2, [r7, #12]
 8004dec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004df0:	f7fb ff5a 	bl	8000ca8 <__aeabi_uldivmod>
 8004df4:	4602      	mov	r2, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	4613      	mov	r3, r2
 8004dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004dfc:	4b0b      	ldr	r3, [pc, #44]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	0c1b      	lsrs	r3, r3, #16
 8004e02:	f003 0303 	and.w	r3, r3, #3
 8004e06:	3301      	adds	r3, #1
 8004e08:	005b      	lsls	r3, r3, #1
 8004e0a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004e0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e16:	e002      	b.n	8004e1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e18:	4b05      	ldr	r3, [pc, #20]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x184>)
 8004e1a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3740      	adds	r7, #64	; 0x40
 8004e24:	46bd      	mov	sp, r7
 8004e26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e2a:	bf00      	nop
 8004e2c:	40023800 	.word	0x40023800
 8004e30:	00f42400 	.word	0x00f42400
 8004e34:	017d7840 	.word	0x017d7840

08004e38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e3c:	4b03      	ldr	r3, [pc, #12]	; (8004e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	20000030 	.word	0x20000030

08004e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e54:	f7ff fff0 	bl	8004e38 <HAL_RCC_GetHCLKFreq>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	4b05      	ldr	r3, [pc, #20]	; (8004e70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	0a9b      	lsrs	r3, r3, #10
 8004e60:	f003 0307 	and.w	r3, r3, #7
 8004e64:	4903      	ldr	r1, [pc, #12]	; (8004e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e66:	5ccb      	ldrb	r3, [r1, r3]
 8004e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	40023800 	.word	0x40023800
 8004e74:	0800aea0 	.word	0x0800aea0

08004e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e7c:	f7ff ffdc 	bl	8004e38 <HAL_RCC_GetHCLKFreq>
 8004e80:	4602      	mov	r2, r0
 8004e82:	4b05      	ldr	r3, [pc, #20]	; (8004e98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	0b5b      	lsrs	r3, r3, #13
 8004e88:	f003 0307 	and.w	r3, r3, #7
 8004e8c:	4903      	ldr	r1, [pc, #12]	; (8004e9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e8e:	5ccb      	ldrb	r3, [r1, r3]
 8004e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	40023800 	.word	0x40023800
 8004e9c:	0800aea0 	.word	0x0800aea0

08004ea0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004eac:	2300      	movs	r3, #0
 8004eae:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10b      	bne.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d105      	bne.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d075      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ed4:	4b91      	ldr	r3, [pc, #580]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004eda:	f7fe f8b7 	bl	800304c <HAL_GetTick>
 8004ede:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ee0:	e008      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ee2:	f7fe f8b3 	bl	800304c <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e189      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ef4:	4b8a      	ldr	r3, [pc, #552]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1f0      	bne.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d009      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	019a      	lsls	r2, r3, #6
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	071b      	lsls	r3, r3, #28
 8004f18:	4981      	ldr	r1, [pc, #516]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0302 	and.w	r3, r3, #2
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d01f      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f2c:	4b7c      	ldr	r3, [pc, #496]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f32:	0f1b      	lsrs	r3, r3, #28
 8004f34:	f003 0307 	and.w	r3, r3, #7
 8004f38:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	019a      	lsls	r2, r3, #6
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	061b      	lsls	r3, r3, #24
 8004f46:	431a      	orrs	r2, r3
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	071b      	lsls	r3, r3, #28
 8004f4c:	4974      	ldr	r1, [pc, #464]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f54:	4b72      	ldr	r3, [pc, #456]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f5a:	f023 021f 	bic.w	r2, r3, #31
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	3b01      	subs	r3, #1
 8004f64:	496e      	ldr	r1, [pc, #440]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00d      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	019a      	lsls	r2, r3, #6
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	061b      	lsls	r3, r3, #24
 8004f84:	431a      	orrs	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	071b      	lsls	r3, r3, #28
 8004f8c:	4964      	ldr	r1, [pc, #400]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f94:	4b61      	ldr	r3, [pc, #388]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004f96:	2201      	movs	r2, #1
 8004f98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f9a:	f7fe f857 	bl	800304c <HAL_GetTick>
 8004f9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fa0:	e008      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fa2:	f7fe f853 	bl	800304c <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d901      	bls.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e129      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fb4:	4b5a      	ldr	r3, [pc, #360]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0f0      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0304 	and.w	r3, r3, #4
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d105      	bne.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d079      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004fd8:	4b52      	ldr	r3, [pc, #328]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004fda:	2200      	movs	r2, #0
 8004fdc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fde:	f7fe f835 	bl	800304c <HAL_GetTick>
 8004fe2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004fe4:	e008      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004fe6:	f7fe f831 	bl	800304c <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d901      	bls.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e107      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ff8:	4b49      	ldr	r3, [pc, #292]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005000:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005004:	d0ef      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0304 	and.w	r3, r3, #4
 800500e:	2b00      	cmp	r3, #0
 8005010:	d020      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005012:	4b43      	ldr	r3, [pc, #268]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005018:	0f1b      	lsrs	r3, r3, #28
 800501a:	f003 0307 	and.w	r3, r3, #7
 800501e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	019a      	lsls	r2, r3, #6
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	061b      	lsls	r3, r3, #24
 800502c:	431a      	orrs	r2, r3
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	071b      	lsls	r3, r3, #28
 8005032:	493b      	ldr	r1, [pc, #236]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005034:	4313      	orrs	r3, r2
 8005036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800503a:	4b39      	ldr	r3, [pc, #228]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800503c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005040:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	3b01      	subs	r3, #1
 800504a:	021b      	lsls	r3, r3, #8
 800504c:	4934      	ldr	r1, [pc, #208]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800504e:	4313      	orrs	r3, r2
 8005050:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0308 	and.w	r3, r3, #8
 800505c:	2b00      	cmp	r3, #0
 800505e:	d01e      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005060:	4b2f      	ldr	r3, [pc, #188]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005066:	0e1b      	lsrs	r3, r3, #24
 8005068:	f003 030f 	and.w	r3, r3, #15
 800506c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	019a      	lsls	r2, r3, #6
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	061b      	lsls	r3, r3, #24
 8005078:	431a      	orrs	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	071b      	lsls	r3, r3, #28
 8005080:	4927      	ldr	r1, [pc, #156]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005082:	4313      	orrs	r3, r2
 8005084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005088:	4b25      	ldr	r3, [pc, #148]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800508a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800508e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	4922      	ldr	r1, [pc, #136]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005098:	4313      	orrs	r3, r2
 800509a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800509e:	4b21      	ldr	r3, [pc, #132]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80050a0:	2201      	movs	r2, #1
 80050a2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050a4:	f7fd ffd2 	bl	800304c <HAL_GetTick>
 80050a8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050aa:	e008      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80050ac:	f7fd ffce 	bl	800304c <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d901      	bls.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e0a4      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050be:	4b18      	ldr	r3, [pc, #96]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050ca:	d1ef      	bne.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0320 	and.w	r3, r3, #32
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 808b 	beq.w	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80050da:	2300      	movs	r3, #0
 80050dc:	60fb      	str	r3, [r7, #12]
 80050de:	4b10      	ldr	r3, [pc, #64]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e2:	4a0f      	ldr	r2, [pc, #60]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050e8:	6413      	str	r3, [r2, #64]	; 0x40
 80050ea:	4b0d      	ldr	r3, [pc, #52]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050f2:	60fb      	str	r3, [r7, #12]
 80050f4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80050f6:	4b0c      	ldr	r3, [pc, #48]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a0b      	ldr	r2, [pc, #44]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80050fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005100:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005102:	f7fd ffa3 	bl	800304c <HAL_GetTick>
 8005106:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005108:	e010      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800510a:	f7fd ff9f 	bl	800304c <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d909      	bls.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e075      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800511c:	42470068 	.word	0x42470068
 8005120:	40023800 	.word	0x40023800
 8005124:	42470070 	.word	0x42470070
 8005128:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800512c:	4b38      	ldr	r3, [pc, #224]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005134:	2b00      	cmp	r3, #0
 8005136:	d0e8      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005138:	4b36      	ldr	r3, [pc, #216]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800513a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005140:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d02f      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	429a      	cmp	r2, r3
 8005154:	d028      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005156:	4b2f      	ldr	r3, [pc, #188]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800515a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800515e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005160:	4b2d      	ldr	r3, [pc, #180]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005162:	2201      	movs	r2, #1
 8005164:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005166:	4b2c      	ldr	r3, [pc, #176]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005168:	2200      	movs	r2, #0
 800516a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800516c:	4a29      	ldr	r2, [pc, #164]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005172:	4b28      	ldr	r3, [pc, #160]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b01      	cmp	r3, #1
 800517c:	d114      	bne.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800517e:	f7fd ff65 	bl	800304c <HAL_GetTick>
 8005182:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005184:	e00a      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005186:	f7fd ff61 	bl	800304c <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	f241 3288 	movw	r2, #5000	; 0x1388
 8005194:	4293      	cmp	r3, r2
 8005196:	d901      	bls.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e035      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800519c:	4b1d      	ldr	r3, [pc, #116]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800519e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a0:	f003 0302 	and.w	r3, r3, #2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d0ee      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051b4:	d10d      	bne.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80051b6:	4b17      	ldr	r3, [pc, #92]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80051c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ca:	4912      	ldr	r1, [pc, #72]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	608b      	str	r3, [r1, #8]
 80051d0:	e005      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80051d2:	4b10      	ldr	r3, [pc, #64]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	4a0f      	ldr	r2, [pc, #60]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051d8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80051dc:	6093      	str	r3, [r2, #8]
 80051de:	4b0d      	ldr	r3, [pc, #52]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051ea:	490a      	ldr	r1, [pc, #40]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0310 	and.w	r3, r3, #16
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d004      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005202:	4b06      	ldr	r3, [pc, #24]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005204:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3718      	adds	r7, #24
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	40007000 	.word	0x40007000
 8005214:	40023800 	.word	0x40023800
 8005218:	42470e40 	.word	0x42470e40
 800521c:	424711e0 	.word	0x424711e0

08005220 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e066      	b.n	8005304 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	7f5b      	ldrb	r3, [r3, #29]
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2b00      	cmp	r3, #0
 800523e:	d105      	bne.n	800524c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7fd faea 	bl	8002820 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2202      	movs	r2, #2
 8005250:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	22ca      	movs	r2, #202	; 0xca
 8005258:	625a      	str	r2, [r3, #36]	; 0x24
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2253      	movs	r2, #83	; 0x53
 8005260:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f998 	bl	8005598 <RTC_EnterInitMode>
 8005268:	4603      	mov	r3, r0
 800526a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800526c:	7bfb      	ldrb	r3, [r7, #15]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d12c      	bne.n	80052cc <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	6812      	ldr	r2, [r2, #0]
 800527c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005280:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005284:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6899      	ldr	r1, [r3, #8]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	431a      	orrs	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	431a      	orrs	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	68d2      	ldr	r2, [r2, #12]
 80052ac:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	6919      	ldr	r1, [r3, #16]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	041a      	lsls	r2, r3, #16
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	430a      	orrs	r2, r1
 80052c0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f99f 	bl	8005606 <RTC_ExitInitMode>
 80052c8:	4603      	mov	r3, r0
 80052ca:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d113      	bne.n	80052fa <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80052e0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	699a      	ldr	r2, [r3, #24]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	22ff      	movs	r2, #255	; 0xff
 8005300:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005302:	7bfb      	ldrb	r3, [r7, #15]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3710      	adds	r7, #16
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800530c:	b590      	push	{r4, r7, lr}
 800530e:	b087      	sub	sp, #28
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005318:	2300      	movs	r3, #0
 800531a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	7f1b      	ldrb	r3, [r3, #28]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d101      	bne.n	8005328 <HAL_RTC_SetTime+0x1c>
 8005324:	2302      	movs	r3, #2
 8005326:	e087      	b.n	8005438 <HAL_RTC_SetTime+0x12c>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2201      	movs	r2, #1
 800532c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2202      	movs	r2, #2
 8005332:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d126      	bne.n	8005388 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005344:	2b00      	cmp	r3, #0
 8005346:	d102      	bne.n	800534e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	2200      	movs	r2, #0
 800534c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	4618      	mov	r0, r3
 8005354:	f000 f97c 	bl	8005650 <RTC_ByteToBcd2>
 8005358:	4603      	mov	r3, r0
 800535a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	785b      	ldrb	r3, [r3, #1]
 8005360:	4618      	mov	r0, r3
 8005362:	f000 f975 	bl	8005650 <RTC_ByteToBcd2>
 8005366:	4603      	mov	r3, r0
 8005368:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800536a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	789b      	ldrb	r3, [r3, #2]
 8005370:	4618      	mov	r0, r3
 8005372:	f000 f96d 	bl	8005650 <RTC_ByteToBcd2>
 8005376:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005378:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	78db      	ldrb	r3, [r3, #3]
 8005380:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005382:	4313      	orrs	r3, r2
 8005384:	617b      	str	r3, [r7, #20]
 8005386:	e018      	b.n	80053ba <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005392:	2b00      	cmp	r3, #0
 8005394:	d102      	bne.n	800539c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	2200      	movs	r2, #0
 800539a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	785b      	ldrb	r3, [r3, #1]
 80053a6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80053a8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80053ae:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	78db      	ldrb	r3, [r3, #3]
 80053b4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80053b6:	4313      	orrs	r3, r2
 80053b8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	22ca      	movs	r2, #202	; 0xca
 80053c0:	625a      	str	r2, [r3, #36]	; 0x24
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2253      	movs	r2, #83	; 0x53
 80053c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f000 f8e4 	bl	8005598 <RTC_EnterInitMode>
 80053d0:	4603      	mov	r3, r0
 80053d2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80053d4:	7cfb      	ldrb	r3, [r7, #19]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d120      	bne.n	800541c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80053e4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80053e8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80053f8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	6899      	ldr	r1, [r3, #8]
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	68da      	ldr	r2, [r3, #12]
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	431a      	orrs	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	430a      	orrs	r2, r1
 8005410:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f000 f8f7 	bl	8005606 <RTC_ExitInitMode>
 8005418:	4603      	mov	r3, r0
 800541a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800541c:	7cfb      	ldrb	r3, [r7, #19]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d102      	bne.n	8005428 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2201      	movs	r2, #1
 8005426:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	22ff      	movs	r2, #255	; 0xff
 800542e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	771a      	strb	r2, [r3, #28]

  return status;
 8005436:	7cfb      	ldrb	r3, [r7, #19]
}
 8005438:	4618      	mov	r0, r3
 800543a:	371c      	adds	r7, #28
 800543c:	46bd      	mov	sp, r7
 800543e:	bd90      	pop	{r4, r7, pc}

08005440 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005440:	b590      	push	{r4, r7, lr}
 8005442:	b087      	sub	sp, #28
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800544c:	2300      	movs	r3, #0
 800544e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	7f1b      	ldrb	r3, [r3, #28]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d101      	bne.n	800545c <HAL_RTC_SetDate+0x1c>
 8005458:	2302      	movs	r3, #2
 800545a:	e071      	b.n	8005540 <HAL_RTC_SetDate+0x100>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2201      	movs	r2, #1
 8005460:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2202      	movs	r2, #2
 8005466:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10e      	bne.n	800548c <HAL_RTC_SetDate+0x4c>
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	785b      	ldrb	r3, [r3, #1]
 8005472:	f003 0310 	and.w	r3, r3, #16
 8005476:	2b00      	cmp	r3, #0
 8005478:	d008      	beq.n	800548c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	785b      	ldrb	r3, [r3, #1]
 800547e:	f023 0310 	bic.w	r3, r3, #16
 8005482:	b2db      	uxtb	r3, r3
 8005484:	330a      	adds	r3, #10
 8005486:	b2da      	uxtb	r2, r3
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d11c      	bne.n	80054cc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	78db      	ldrb	r3, [r3, #3]
 8005496:	4618      	mov	r0, r3
 8005498:	f000 f8da 	bl	8005650 <RTC_ByteToBcd2>
 800549c:	4603      	mov	r3, r0
 800549e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	785b      	ldrb	r3, [r3, #1]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f000 f8d3 	bl	8005650 <RTC_ByteToBcd2>
 80054aa:	4603      	mov	r3, r0
 80054ac:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80054ae:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	789b      	ldrb	r3, [r3, #2]
 80054b4:	4618      	mov	r0, r3
 80054b6:	f000 f8cb 	bl	8005650 <RTC_ByteToBcd2>
 80054ba:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80054bc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80054c6:	4313      	orrs	r3, r2
 80054c8:	617b      	str	r3, [r7, #20]
 80054ca:	e00e      	b.n	80054ea <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	78db      	ldrb	r3, [r3, #3]
 80054d0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	785b      	ldrb	r3, [r3, #1]
 80054d6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80054d8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80054de:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80054e6:	4313      	orrs	r3, r2
 80054e8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	22ca      	movs	r2, #202	; 0xca
 80054f0:	625a      	str	r2, [r3, #36]	; 0x24
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2253      	movs	r2, #83	; 0x53
 80054f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f000 f84c 	bl	8005598 <RTC_EnterInitMode>
 8005500:	4603      	mov	r3, r0
 8005502:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005504:	7cfb      	ldrb	r3, [r7, #19]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10c      	bne.n	8005524 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005514:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005518:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f000 f873 	bl	8005606 <RTC_ExitInitMode>
 8005520:	4603      	mov	r3, r0
 8005522:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005524:	7cfb      	ldrb	r3, [r7, #19]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d102      	bne.n	8005530 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2201      	movs	r2, #1
 800552e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	22ff      	movs	r2, #255	; 0xff
 8005536:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	771a      	strb	r2, [r3, #28]

  return status;
 800553e:	7cfb      	ldrb	r3, [r7, #19]
}
 8005540:	4618      	mov	r0, r3
 8005542:	371c      	adds	r7, #28
 8005544:	46bd      	mov	sp, r7
 8005546:	bd90      	pop	{r4, r7, pc}

08005548 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005550:	2300      	movs	r3, #0
 8005552:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68da      	ldr	r2, [r3, #12]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005562:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005564:	f7fd fd72 	bl	800304c <HAL_GetTick>
 8005568:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800556a:	e009      	b.n	8005580 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800556c:	f7fd fd6e 	bl	800304c <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800557a:	d901      	bls.n	8005580 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e007      	b.n	8005590 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	f003 0320 	and.w	r3, r3, #32
 800558a:	2b00      	cmp	r3, #0
 800558c:	d0ee      	beq.n	800556c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3710      	adds	r7, #16
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055a0:	2300      	movs	r3, #0
 80055a2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80055a4:	2300      	movs	r3, #0
 80055a6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d122      	bne.n	80055fc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68da      	ldr	r2, [r3, #12]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80055c4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80055c6:	f7fd fd41 	bl	800304c <HAL_GetTick>
 80055ca:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80055cc:	e00c      	b.n	80055e8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80055ce:	f7fd fd3d 	bl	800304c <HAL_GetTick>
 80055d2:	4602      	mov	r2, r0
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055dc:	d904      	bls.n	80055e8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2204      	movs	r2, #4
 80055e2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d102      	bne.n	80055fc <RTC_EnterInitMode+0x64>
 80055f6:	7bfb      	ldrb	r3, [r7, #15]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d1e8      	bne.n	80055ce <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80055fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b084      	sub	sp, #16
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800560e:	2300      	movs	r3, #0
 8005610:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68da      	ldr	r2, [r3, #12]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005620:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f003 0320 	and.w	r3, r3, #32
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10a      	bne.n	8005646 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f7ff ff89 	bl	8005548 <HAL_RTC_WaitForSynchro>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d004      	beq.n	8005646 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2204      	movs	r2, #4
 8005640:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005646:	7bfb      	ldrb	r3, [r7, #15]
}
 8005648:	4618      	mov	r0, r3
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	4603      	mov	r3, r0
 8005658:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800565a:	2300      	movs	r3, #0
 800565c:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800565e:	e005      	b.n	800566c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005660:	7bfb      	ldrb	r3, [r7, #15]
 8005662:	3301      	adds	r3, #1
 8005664:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005666:	79fb      	ldrb	r3, [r7, #7]
 8005668:	3b0a      	subs	r3, #10
 800566a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800566c:	79fb      	ldrb	r3, [r7, #7]
 800566e:	2b09      	cmp	r3, #9
 8005670:	d8f6      	bhi.n	8005660 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005672:	7bfb      	ldrb	r3, [r7, #15]
 8005674:	011b      	lsls	r3, r3, #4
 8005676:	b2da      	uxtb	r2, r3
 8005678:	79fb      	ldrb	r3, [r7, #7]
 800567a:	4313      	orrs	r3, r2
 800567c:	b2db      	uxtb	r3, r3
}
 800567e:	4618      	mov	r0, r3
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr

0800568a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b082      	sub	sp, #8
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d101      	bne.n	800569c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e03f      	b.n	800571c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d106      	bne.n	80056b6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f7fd fadb 	bl	8002c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2224      	movs	r2, #36	; 0x24
 80056ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68da      	ldr	r2, [r3, #12]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056cc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f9ca 	bl	8005a68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	691a      	ldr	r2, [r3, #16]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056e2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	695a      	ldr	r2, [r3, #20]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056f2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68da      	ldr	r2, [r3, #12]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005702:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2220      	movs	r2, #32
 800570e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2220      	movs	r2, #32
 8005716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3708      	adds	r7, #8
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b08a      	sub	sp, #40	; 0x28
 8005728:	af02      	add	r7, sp, #8
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	603b      	str	r3, [r7, #0]
 8005730:	4613      	mov	r3, r2
 8005732:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005734:	2300      	movs	r3, #0
 8005736:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b20      	cmp	r3, #32
 8005742:	d17c      	bne.n	800583e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d002      	beq.n	8005750 <HAL_UART_Transmit+0x2c>
 800574a:	88fb      	ldrh	r3, [r7, #6]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d101      	bne.n	8005754 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e075      	b.n	8005840 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800575a:	2b01      	cmp	r3, #1
 800575c:	d101      	bne.n	8005762 <HAL_UART_Transmit+0x3e>
 800575e:	2302      	movs	r3, #2
 8005760:	e06e      	b.n	8005840 <HAL_UART_Transmit+0x11c>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2221      	movs	r2, #33	; 0x21
 8005774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005778:	f7fd fc68 	bl	800304c <HAL_GetTick>
 800577c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	88fa      	ldrh	r2, [r7, #6]
 8005782:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	88fa      	ldrh	r2, [r7, #6]
 8005788:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005792:	d108      	bne.n	80057a6 <HAL_UART_Transmit+0x82>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d104      	bne.n	80057a6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800579c:	2300      	movs	r3, #0
 800579e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	61bb      	str	r3, [r7, #24]
 80057a4:	e003      	b.n	80057ae <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057aa:	2300      	movs	r3, #0
 80057ac:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80057b6:	e02a      	b.n	800580e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	2200      	movs	r2, #0
 80057c0:	2180      	movs	r1, #128	; 0x80
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f000 f8e2 	bl	800598c <UART_WaitOnFlagUntilTimeout>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d001      	beq.n	80057d2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e036      	b.n	8005840 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10b      	bne.n	80057f0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	881b      	ldrh	r3, [r3, #0]
 80057dc:	461a      	mov	r2, r3
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057e6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	3302      	adds	r3, #2
 80057ec:	61bb      	str	r3, [r7, #24]
 80057ee:	e007      	b.n	8005800 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	781a      	ldrb	r2, [r3, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	3301      	adds	r3, #1
 80057fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005804:	b29b      	uxth	r3, r3
 8005806:	3b01      	subs	r3, #1
 8005808:	b29a      	uxth	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005812:	b29b      	uxth	r3, r3
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1cf      	bne.n	80057b8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	2200      	movs	r2, #0
 8005820:	2140      	movs	r1, #64	; 0x40
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f000 f8b2 	bl	800598c <UART_WaitOnFlagUntilTimeout>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e006      	b.n	8005840 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2220      	movs	r2, #32
 8005836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800583a:	2300      	movs	r3, #0
 800583c:	e000      	b.n	8005840 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800583e:	2302      	movs	r3, #2
  }
}
 8005840:	4618      	mov	r0, r3
 8005842:	3720      	adds	r7, #32
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b08a      	sub	sp, #40	; 0x28
 800584c:	af02      	add	r7, sp, #8
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	603b      	str	r3, [r7, #0]
 8005854:	4613      	mov	r3, r2
 8005856:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005858:	2300      	movs	r3, #0
 800585a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b20      	cmp	r3, #32
 8005866:	f040 808c 	bne.w	8005982 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d002      	beq.n	8005876 <HAL_UART_Receive+0x2e>
 8005870:	88fb      	ldrh	r3, [r7, #6]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d101      	bne.n	800587a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e084      	b.n	8005984 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005880:	2b01      	cmp	r3, #1
 8005882:	d101      	bne.n	8005888 <HAL_UART_Receive+0x40>
 8005884:	2302      	movs	r3, #2
 8005886:	e07d      	b.n	8005984 <HAL_UART_Receive+0x13c>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2222      	movs	r2, #34	; 0x22
 800589a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058a4:	f7fd fbd2 	bl	800304c <HAL_GetTick>
 80058a8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	88fa      	ldrh	r2, [r7, #6]
 80058ae:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	88fa      	ldrh	r2, [r7, #6]
 80058b4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058be:	d108      	bne.n	80058d2 <HAL_UART_Receive+0x8a>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d104      	bne.n	80058d2 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80058c8:	2300      	movs	r3, #0
 80058ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	61bb      	str	r3, [r7, #24]
 80058d0:	e003      	b.n	80058da <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058d6:	2300      	movs	r3, #0
 80058d8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80058e2:	e043      	b.n	800596c <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	2200      	movs	r2, #0
 80058ec:	2120      	movs	r1, #32
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 f84c 	bl	800598c <UART_WaitOnFlagUntilTimeout>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e042      	b.n	8005984 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10c      	bne.n	800591e <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	b29b      	uxth	r3, r3
 800590c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005910:	b29a      	uxth	r2, r3
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	3302      	adds	r3, #2
 800591a:	61bb      	str	r3, [r7, #24]
 800591c:	e01f      	b.n	800595e <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005926:	d007      	beq.n	8005938 <HAL_UART_Receive+0xf0>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d10a      	bne.n	8005946 <HAL_UART_Receive+0xfe>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d106      	bne.n	8005946 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	b2da      	uxtb	r2, r3
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	701a      	strb	r2, [r3, #0]
 8005944:	e008      	b.n	8005958 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	b2db      	uxtb	r3, r3
 800594e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005952:	b2da      	uxtb	r2, r3
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	3301      	adds	r3, #1
 800595c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005962:	b29b      	uxth	r3, r3
 8005964:	3b01      	subs	r3, #1
 8005966:	b29a      	uxth	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005970:	b29b      	uxth	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1b6      	bne.n	80058e4 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2220      	movs	r2, #32
 800597a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800597e:	2300      	movs	r3, #0
 8005980:	e000      	b.n	8005984 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005982:	2302      	movs	r3, #2
  }
}
 8005984:	4618      	mov	r0, r3
 8005986:	3720      	adds	r7, #32
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b090      	sub	sp, #64	; 0x40
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	603b      	str	r3, [r7, #0]
 8005998:	4613      	mov	r3, r2
 800599a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800599c:	e050      	b.n	8005a40 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800599e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059a4:	d04c      	beq.n	8005a40 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80059a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d007      	beq.n	80059bc <UART_WaitOnFlagUntilTimeout+0x30>
 80059ac:	f7fd fb4e 	bl	800304c <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d241      	bcs.n	8005a40 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	330c      	adds	r3, #12
 80059c2:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c6:	e853 3f00 	ldrex	r3, [r3]
 80059ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	330c      	adds	r3, #12
 80059da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80059dc:	637a      	str	r2, [r7, #52]	; 0x34
 80059de:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059e4:	e841 2300 	strex	r3, r2, [r1]
 80059e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80059ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1e5      	bne.n	80059bc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	3314      	adds	r3, #20
 80059f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	e853 3f00 	ldrex	r3, [r3]
 80059fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	f023 0301 	bic.w	r3, r3, #1
 8005a06:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	3314      	adds	r3, #20
 8005a0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a10:	623a      	str	r2, [r7, #32]
 8005a12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a14:	69f9      	ldr	r1, [r7, #28]
 8005a16:	6a3a      	ldr	r2, [r7, #32]
 8005a18:	e841 2300 	strex	r3, r2, [r1]
 8005a1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1e5      	bne.n	80059f0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2220      	movs	r2, #32
 8005a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e00f      	b.n	8005a60 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	4013      	ands	r3, r2
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	bf0c      	ite	eq
 8005a50:	2301      	moveq	r3, #1
 8005a52:	2300      	movne	r3, #0
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	461a      	mov	r2, r3
 8005a58:	79fb      	ldrb	r3, [r7, #7]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d09f      	beq.n	800599e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3740      	adds	r7, #64	; 0x40
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a6c:	b0c0      	sub	sp, #256	; 0x100
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a84:	68d9      	ldr	r1, [r3, #12]
 8005a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	ea40 0301 	orr.w	r3, r0, r1
 8005a90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a96:	689a      	ldr	r2, [r3, #8]
 8005a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	431a      	orrs	r2, r3
 8005aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005ac0:	f021 010c 	bic.w	r1, r1, #12
 8005ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ace:	430b      	orrs	r3, r1
 8005ad0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae2:	6999      	ldr	r1, [r3, #24]
 8005ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	ea40 0301 	orr.w	r3, r0, r1
 8005aee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	4b8f      	ldr	r3, [pc, #572]	; (8005d34 <UART_SetConfig+0x2cc>)
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d005      	beq.n	8005b08 <UART_SetConfig+0xa0>
 8005afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	4b8d      	ldr	r3, [pc, #564]	; (8005d38 <UART_SetConfig+0x2d0>)
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d104      	bne.n	8005b12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b08:	f7ff f9b6 	bl	8004e78 <HAL_RCC_GetPCLK2Freq>
 8005b0c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005b10:	e003      	b.n	8005b1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b12:	f7ff f99d 	bl	8004e50 <HAL_RCC_GetPCLK1Freq>
 8005b16:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b1e:	69db      	ldr	r3, [r3, #28]
 8005b20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b24:	f040 810c 	bne.w	8005d40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b32:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005b36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005b3a:	4622      	mov	r2, r4
 8005b3c:	462b      	mov	r3, r5
 8005b3e:	1891      	adds	r1, r2, r2
 8005b40:	65b9      	str	r1, [r7, #88]	; 0x58
 8005b42:	415b      	adcs	r3, r3
 8005b44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005b4a:	4621      	mov	r1, r4
 8005b4c:	eb12 0801 	adds.w	r8, r2, r1
 8005b50:	4629      	mov	r1, r5
 8005b52:	eb43 0901 	adc.w	r9, r3, r1
 8005b56:	f04f 0200 	mov.w	r2, #0
 8005b5a:	f04f 0300 	mov.w	r3, #0
 8005b5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b6a:	4690      	mov	r8, r2
 8005b6c:	4699      	mov	r9, r3
 8005b6e:	4623      	mov	r3, r4
 8005b70:	eb18 0303 	adds.w	r3, r8, r3
 8005b74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b78:	462b      	mov	r3, r5
 8005b7a:	eb49 0303 	adc.w	r3, r9, r3
 8005b7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b8e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005b92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005b96:	460b      	mov	r3, r1
 8005b98:	18db      	adds	r3, r3, r3
 8005b9a:	653b      	str	r3, [r7, #80]	; 0x50
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	eb42 0303 	adc.w	r3, r2, r3
 8005ba2:	657b      	str	r3, [r7, #84]	; 0x54
 8005ba4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005ba8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005bac:	f7fb f87c 	bl	8000ca8 <__aeabi_uldivmod>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4b61      	ldr	r3, [pc, #388]	; (8005d3c <UART_SetConfig+0x2d4>)
 8005bb6:	fba3 2302 	umull	r2, r3, r3, r2
 8005bba:	095b      	lsrs	r3, r3, #5
 8005bbc:	011c      	lsls	r4, r3, #4
 8005bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005bc8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005bcc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005bd0:	4642      	mov	r2, r8
 8005bd2:	464b      	mov	r3, r9
 8005bd4:	1891      	adds	r1, r2, r2
 8005bd6:	64b9      	str	r1, [r7, #72]	; 0x48
 8005bd8:	415b      	adcs	r3, r3
 8005bda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bdc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005be0:	4641      	mov	r1, r8
 8005be2:	eb12 0a01 	adds.w	sl, r2, r1
 8005be6:	4649      	mov	r1, r9
 8005be8:	eb43 0b01 	adc.w	fp, r3, r1
 8005bec:	f04f 0200 	mov.w	r2, #0
 8005bf0:	f04f 0300 	mov.w	r3, #0
 8005bf4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005bf8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005bfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c00:	4692      	mov	sl, r2
 8005c02:	469b      	mov	fp, r3
 8005c04:	4643      	mov	r3, r8
 8005c06:	eb1a 0303 	adds.w	r3, sl, r3
 8005c0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c0e:	464b      	mov	r3, r9
 8005c10:	eb4b 0303 	adc.w	r3, fp, r3
 8005c14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005c28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	18db      	adds	r3, r3, r3
 8005c30:	643b      	str	r3, [r7, #64]	; 0x40
 8005c32:	4613      	mov	r3, r2
 8005c34:	eb42 0303 	adc.w	r3, r2, r3
 8005c38:	647b      	str	r3, [r7, #68]	; 0x44
 8005c3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005c42:	f7fb f831 	bl	8000ca8 <__aeabi_uldivmod>
 8005c46:	4602      	mov	r2, r0
 8005c48:	460b      	mov	r3, r1
 8005c4a:	4611      	mov	r1, r2
 8005c4c:	4b3b      	ldr	r3, [pc, #236]	; (8005d3c <UART_SetConfig+0x2d4>)
 8005c4e:	fba3 2301 	umull	r2, r3, r3, r1
 8005c52:	095b      	lsrs	r3, r3, #5
 8005c54:	2264      	movs	r2, #100	; 0x64
 8005c56:	fb02 f303 	mul.w	r3, r2, r3
 8005c5a:	1acb      	subs	r3, r1, r3
 8005c5c:	00db      	lsls	r3, r3, #3
 8005c5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005c62:	4b36      	ldr	r3, [pc, #216]	; (8005d3c <UART_SetConfig+0x2d4>)
 8005c64:	fba3 2302 	umull	r2, r3, r3, r2
 8005c68:	095b      	lsrs	r3, r3, #5
 8005c6a:	005b      	lsls	r3, r3, #1
 8005c6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c70:	441c      	add	r4, r3
 8005c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c76:	2200      	movs	r2, #0
 8005c78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005c80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005c84:	4642      	mov	r2, r8
 8005c86:	464b      	mov	r3, r9
 8005c88:	1891      	adds	r1, r2, r2
 8005c8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c8c:	415b      	adcs	r3, r3
 8005c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c94:	4641      	mov	r1, r8
 8005c96:	1851      	adds	r1, r2, r1
 8005c98:	6339      	str	r1, [r7, #48]	; 0x30
 8005c9a:	4649      	mov	r1, r9
 8005c9c:	414b      	adcs	r3, r1
 8005c9e:	637b      	str	r3, [r7, #52]	; 0x34
 8005ca0:	f04f 0200 	mov.w	r2, #0
 8005ca4:	f04f 0300 	mov.w	r3, #0
 8005ca8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005cac:	4659      	mov	r1, fp
 8005cae:	00cb      	lsls	r3, r1, #3
 8005cb0:	4651      	mov	r1, sl
 8005cb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cb6:	4651      	mov	r1, sl
 8005cb8:	00ca      	lsls	r2, r1, #3
 8005cba:	4610      	mov	r0, r2
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	4642      	mov	r2, r8
 8005cc2:	189b      	adds	r3, r3, r2
 8005cc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005cc8:	464b      	mov	r3, r9
 8005cca:	460a      	mov	r2, r1
 8005ccc:	eb42 0303 	adc.w	r3, r2, r3
 8005cd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005ce0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005ce4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005ce8:	460b      	mov	r3, r1
 8005cea:	18db      	adds	r3, r3, r3
 8005cec:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cee:	4613      	mov	r3, r2
 8005cf0:	eb42 0303 	adc.w	r3, r2, r3
 8005cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cf6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005cfa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005cfe:	f7fa ffd3 	bl	8000ca8 <__aeabi_uldivmod>
 8005d02:	4602      	mov	r2, r0
 8005d04:	460b      	mov	r3, r1
 8005d06:	4b0d      	ldr	r3, [pc, #52]	; (8005d3c <UART_SetConfig+0x2d4>)
 8005d08:	fba3 1302 	umull	r1, r3, r3, r2
 8005d0c:	095b      	lsrs	r3, r3, #5
 8005d0e:	2164      	movs	r1, #100	; 0x64
 8005d10:	fb01 f303 	mul.w	r3, r1, r3
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	00db      	lsls	r3, r3, #3
 8005d18:	3332      	adds	r3, #50	; 0x32
 8005d1a:	4a08      	ldr	r2, [pc, #32]	; (8005d3c <UART_SetConfig+0x2d4>)
 8005d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d20:	095b      	lsrs	r3, r3, #5
 8005d22:	f003 0207 	and.w	r2, r3, #7
 8005d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4422      	add	r2, r4
 8005d2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d30:	e105      	b.n	8005f3e <UART_SetConfig+0x4d6>
 8005d32:	bf00      	nop
 8005d34:	40011000 	.word	0x40011000
 8005d38:	40011400 	.word	0x40011400
 8005d3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d44:	2200      	movs	r2, #0
 8005d46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005d4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005d52:	4642      	mov	r2, r8
 8005d54:	464b      	mov	r3, r9
 8005d56:	1891      	adds	r1, r2, r2
 8005d58:	6239      	str	r1, [r7, #32]
 8005d5a:	415b      	adcs	r3, r3
 8005d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d62:	4641      	mov	r1, r8
 8005d64:	1854      	adds	r4, r2, r1
 8005d66:	4649      	mov	r1, r9
 8005d68:	eb43 0501 	adc.w	r5, r3, r1
 8005d6c:	f04f 0200 	mov.w	r2, #0
 8005d70:	f04f 0300 	mov.w	r3, #0
 8005d74:	00eb      	lsls	r3, r5, #3
 8005d76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d7a:	00e2      	lsls	r2, r4, #3
 8005d7c:	4614      	mov	r4, r2
 8005d7e:	461d      	mov	r5, r3
 8005d80:	4643      	mov	r3, r8
 8005d82:	18e3      	adds	r3, r4, r3
 8005d84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d88:	464b      	mov	r3, r9
 8005d8a:	eb45 0303 	adc.w	r3, r5, r3
 8005d8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005da2:	f04f 0200 	mov.w	r2, #0
 8005da6:	f04f 0300 	mov.w	r3, #0
 8005daa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005dae:	4629      	mov	r1, r5
 8005db0:	008b      	lsls	r3, r1, #2
 8005db2:	4621      	mov	r1, r4
 8005db4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005db8:	4621      	mov	r1, r4
 8005dba:	008a      	lsls	r2, r1, #2
 8005dbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005dc0:	f7fa ff72 	bl	8000ca8 <__aeabi_uldivmod>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	4b60      	ldr	r3, [pc, #384]	; (8005f4c <UART_SetConfig+0x4e4>)
 8005dca:	fba3 2302 	umull	r2, r3, r3, r2
 8005dce:	095b      	lsrs	r3, r3, #5
 8005dd0:	011c      	lsls	r4, r3, #4
 8005dd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ddc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005de0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005de4:	4642      	mov	r2, r8
 8005de6:	464b      	mov	r3, r9
 8005de8:	1891      	adds	r1, r2, r2
 8005dea:	61b9      	str	r1, [r7, #24]
 8005dec:	415b      	adcs	r3, r3
 8005dee:	61fb      	str	r3, [r7, #28]
 8005df0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005df4:	4641      	mov	r1, r8
 8005df6:	1851      	adds	r1, r2, r1
 8005df8:	6139      	str	r1, [r7, #16]
 8005dfa:	4649      	mov	r1, r9
 8005dfc:	414b      	adcs	r3, r1
 8005dfe:	617b      	str	r3, [r7, #20]
 8005e00:	f04f 0200 	mov.w	r2, #0
 8005e04:	f04f 0300 	mov.w	r3, #0
 8005e08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e0c:	4659      	mov	r1, fp
 8005e0e:	00cb      	lsls	r3, r1, #3
 8005e10:	4651      	mov	r1, sl
 8005e12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e16:	4651      	mov	r1, sl
 8005e18:	00ca      	lsls	r2, r1, #3
 8005e1a:	4610      	mov	r0, r2
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	4603      	mov	r3, r0
 8005e20:	4642      	mov	r2, r8
 8005e22:	189b      	adds	r3, r3, r2
 8005e24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e28:	464b      	mov	r3, r9
 8005e2a:	460a      	mov	r2, r1
 8005e2c:	eb42 0303 	adc.w	r3, r2, r3
 8005e30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005e40:	f04f 0200 	mov.w	r2, #0
 8005e44:	f04f 0300 	mov.w	r3, #0
 8005e48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005e4c:	4649      	mov	r1, r9
 8005e4e:	008b      	lsls	r3, r1, #2
 8005e50:	4641      	mov	r1, r8
 8005e52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e56:	4641      	mov	r1, r8
 8005e58:	008a      	lsls	r2, r1, #2
 8005e5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005e5e:	f7fa ff23 	bl	8000ca8 <__aeabi_uldivmod>
 8005e62:	4602      	mov	r2, r0
 8005e64:	460b      	mov	r3, r1
 8005e66:	4b39      	ldr	r3, [pc, #228]	; (8005f4c <UART_SetConfig+0x4e4>)
 8005e68:	fba3 1302 	umull	r1, r3, r3, r2
 8005e6c:	095b      	lsrs	r3, r3, #5
 8005e6e:	2164      	movs	r1, #100	; 0x64
 8005e70:	fb01 f303 	mul.w	r3, r1, r3
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	011b      	lsls	r3, r3, #4
 8005e78:	3332      	adds	r3, #50	; 0x32
 8005e7a:	4a34      	ldr	r2, [pc, #208]	; (8005f4c <UART_SetConfig+0x4e4>)
 8005e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e80:	095b      	lsrs	r3, r3, #5
 8005e82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e86:	441c      	add	r4, r3
 8005e88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	673b      	str	r3, [r7, #112]	; 0x70
 8005e90:	677a      	str	r2, [r7, #116]	; 0x74
 8005e92:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005e96:	4642      	mov	r2, r8
 8005e98:	464b      	mov	r3, r9
 8005e9a:	1891      	adds	r1, r2, r2
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	415b      	adcs	r3, r3
 8005ea0:	60fb      	str	r3, [r7, #12]
 8005ea2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ea6:	4641      	mov	r1, r8
 8005ea8:	1851      	adds	r1, r2, r1
 8005eaa:	6039      	str	r1, [r7, #0]
 8005eac:	4649      	mov	r1, r9
 8005eae:	414b      	adcs	r3, r1
 8005eb0:	607b      	str	r3, [r7, #4]
 8005eb2:	f04f 0200 	mov.w	r2, #0
 8005eb6:	f04f 0300 	mov.w	r3, #0
 8005eba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ebe:	4659      	mov	r1, fp
 8005ec0:	00cb      	lsls	r3, r1, #3
 8005ec2:	4651      	mov	r1, sl
 8005ec4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ec8:	4651      	mov	r1, sl
 8005eca:	00ca      	lsls	r2, r1, #3
 8005ecc:	4610      	mov	r0, r2
 8005ece:	4619      	mov	r1, r3
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	4642      	mov	r2, r8
 8005ed4:	189b      	adds	r3, r3, r2
 8005ed6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ed8:	464b      	mov	r3, r9
 8005eda:	460a      	mov	r2, r1
 8005edc:	eb42 0303 	adc.w	r3, r2, r3
 8005ee0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	663b      	str	r3, [r7, #96]	; 0x60
 8005eec:	667a      	str	r2, [r7, #100]	; 0x64
 8005eee:	f04f 0200 	mov.w	r2, #0
 8005ef2:	f04f 0300 	mov.w	r3, #0
 8005ef6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005efa:	4649      	mov	r1, r9
 8005efc:	008b      	lsls	r3, r1, #2
 8005efe:	4641      	mov	r1, r8
 8005f00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f04:	4641      	mov	r1, r8
 8005f06:	008a      	lsls	r2, r1, #2
 8005f08:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005f0c:	f7fa fecc 	bl	8000ca8 <__aeabi_uldivmod>
 8005f10:	4602      	mov	r2, r0
 8005f12:	460b      	mov	r3, r1
 8005f14:	4b0d      	ldr	r3, [pc, #52]	; (8005f4c <UART_SetConfig+0x4e4>)
 8005f16:	fba3 1302 	umull	r1, r3, r3, r2
 8005f1a:	095b      	lsrs	r3, r3, #5
 8005f1c:	2164      	movs	r1, #100	; 0x64
 8005f1e:	fb01 f303 	mul.w	r3, r1, r3
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	011b      	lsls	r3, r3, #4
 8005f26:	3332      	adds	r3, #50	; 0x32
 8005f28:	4a08      	ldr	r2, [pc, #32]	; (8005f4c <UART_SetConfig+0x4e4>)
 8005f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f2e:	095b      	lsrs	r3, r3, #5
 8005f30:	f003 020f 	and.w	r2, r3, #15
 8005f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4422      	add	r2, r4
 8005f3c:	609a      	str	r2, [r3, #8]
}
 8005f3e:	bf00      	nop
 8005f40:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005f44:	46bd      	mov	sp, r7
 8005f46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f4a:	bf00      	nop
 8005f4c:	51eb851f 	.word	0x51eb851f

08005f50 <__errno>:
 8005f50:	4b01      	ldr	r3, [pc, #4]	; (8005f58 <__errno+0x8>)
 8005f52:	6818      	ldr	r0, [r3, #0]
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	2000003c 	.word	0x2000003c

08005f5c <__libc_init_array>:
 8005f5c:	b570      	push	{r4, r5, r6, lr}
 8005f5e:	4d0d      	ldr	r5, [pc, #52]	; (8005f94 <__libc_init_array+0x38>)
 8005f60:	4c0d      	ldr	r4, [pc, #52]	; (8005f98 <__libc_init_array+0x3c>)
 8005f62:	1b64      	subs	r4, r4, r5
 8005f64:	10a4      	asrs	r4, r4, #2
 8005f66:	2600      	movs	r6, #0
 8005f68:	42a6      	cmp	r6, r4
 8005f6a:	d109      	bne.n	8005f80 <__libc_init_array+0x24>
 8005f6c:	4d0b      	ldr	r5, [pc, #44]	; (8005f9c <__libc_init_array+0x40>)
 8005f6e:	4c0c      	ldr	r4, [pc, #48]	; (8005fa0 <__libc_init_array+0x44>)
 8005f70:	f004 fd40 	bl	800a9f4 <_init>
 8005f74:	1b64      	subs	r4, r4, r5
 8005f76:	10a4      	asrs	r4, r4, #2
 8005f78:	2600      	movs	r6, #0
 8005f7a:	42a6      	cmp	r6, r4
 8005f7c:	d105      	bne.n	8005f8a <__libc_init_array+0x2e>
 8005f7e:	bd70      	pop	{r4, r5, r6, pc}
 8005f80:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f84:	4798      	blx	r3
 8005f86:	3601      	adds	r6, #1
 8005f88:	e7ee      	b.n	8005f68 <__libc_init_array+0xc>
 8005f8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f8e:	4798      	blx	r3
 8005f90:	3601      	adds	r6, #1
 8005f92:	e7f2      	b.n	8005f7a <__libc_init_array+0x1e>
 8005f94:	0800b35c 	.word	0x0800b35c
 8005f98:	0800b35c 	.word	0x0800b35c
 8005f9c:	0800b35c 	.word	0x0800b35c
 8005fa0:	0800b360 	.word	0x0800b360

08005fa4 <memcpy>:
 8005fa4:	440a      	add	r2, r1
 8005fa6:	4291      	cmp	r1, r2
 8005fa8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005fac:	d100      	bne.n	8005fb0 <memcpy+0xc>
 8005fae:	4770      	bx	lr
 8005fb0:	b510      	push	{r4, lr}
 8005fb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fba:	4291      	cmp	r1, r2
 8005fbc:	d1f9      	bne.n	8005fb2 <memcpy+0xe>
 8005fbe:	bd10      	pop	{r4, pc}

08005fc0 <memset>:
 8005fc0:	4402      	add	r2, r0
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d100      	bne.n	8005fca <memset+0xa>
 8005fc8:	4770      	bx	lr
 8005fca:	f803 1b01 	strb.w	r1, [r3], #1
 8005fce:	e7f9      	b.n	8005fc4 <memset+0x4>

08005fd0 <__cvt>:
 8005fd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fd4:	ec55 4b10 	vmov	r4, r5, d0
 8005fd8:	2d00      	cmp	r5, #0
 8005fda:	460e      	mov	r6, r1
 8005fdc:	4619      	mov	r1, r3
 8005fde:	462b      	mov	r3, r5
 8005fe0:	bfbb      	ittet	lt
 8005fe2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005fe6:	461d      	movlt	r5, r3
 8005fe8:	2300      	movge	r3, #0
 8005fea:	232d      	movlt	r3, #45	; 0x2d
 8005fec:	700b      	strb	r3, [r1, #0]
 8005fee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ff0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005ff4:	4691      	mov	r9, r2
 8005ff6:	f023 0820 	bic.w	r8, r3, #32
 8005ffa:	bfbc      	itt	lt
 8005ffc:	4622      	movlt	r2, r4
 8005ffe:	4614      	movlt	r4, r2
 8006000:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006004:	d005      	beq.n	8006012 <__cvt+0x42>
 8006006:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800600a:	d100      	bne.n	800600e <__cvt+0x3e>
 800600c:	3601      	adds	r6, #1
 800600e:	2102      	movs	r1, #2
 8006010:	e000      	b.n	8006014 <__cvt+0x44>
 8006012:	2103      	movs	r1, #3
 8006014:	ab03      	add	r3, sp, #12
 8006016:	9301      	str	r3, [sp, #4]
 8006018:	ab02      	add	r3, sp, #8
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	ec45 4b10 	vmov	d0, r4, r5
 8006020:	4653      	mov	r3, sl
 8006022:	4632      	mov	r2, r6
 8006024:	f001 ff20 	bl	8007e68 <_dtoa_r>
 8006028:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800602c:	4607      	mov	r7, r0
 800602e:	d102      	bne.n	8006036 <__cvt+0x66>
 8006030:	f019 0f01 	tst.w	r9, #1
 8006034:	d022      	beq.n	800607c <__cvt+0xac>
 8006036:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800603a:	eb07 0906 	add.w	r9, r7, r6
 800603e:	d110      	bne.n	8006062 <__cvt+0x92>
 8006040:	783b      	ldrb	r3, [r7, #0]
 8006042:	2b30      	cmp	r3, #48	; 0x30
 8006044:	d10a      	bne.n	800605c <__cvt+0x8c>
 8006046:	2200      	movs	r2, #0
 8006048:	2300      	movs	r3, #0
 800604a:	4620      	mov	r0, r4
 800604c:	4629      	mov	r1, r5
 800604e:	f7fa fd4b 	bl	8000ae8 <__aeabi_dcmpeq>
 8006052:	b918      	cbnz	r0, 800605c <__cvt+0x8c>
 8006054:	f1c6 0601 	rsb	r6, r6, #1
 8006058:	f8ca 6000 	str.w	r6, [sl]
 800605c:	f8da 3000 	ldr.w	r3, [sl]
 8006060:	4499      	add	r9, r3
 8006062:	2200      	movs	r2, #0
 8006064:	2300      	movs	r3, #0
 8006066:	4620      	mov	r0, r4
 8006068:	4629      	mov	r1, r5
 800606a:	f7fa fd3d 	bl	8000ae8 <__aeabi_dcmpeq>
 800606e:	b108      	cbz	r0, 8006074 <__cvt+0xa4>
 8006070:	f8cd 900c 	str.w	r9, [sp, #12]
 8006074:	2230      	movs	r2, #48	; 0x30
 8006076:	9b03      	ldr	r3, [sp, #12]
 8006078:	454b      	cmp	r3, r9
 800607a:	d307      	bcc.n	800608c <__cvt+0xbc>
 800607c:	9b03      	ldr	r3, [sp, #12]
 800607e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006080:	1bdb      	subs	r3, r3, r7
 8006082:	4638      	mov	r0, r7
 8006084:	6013      	str	r3, [r2, #0]
 8006086:	b004      	add	sp, #16
 8006088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800608c:	1c59      	adds	r1, r3, #1
 800608e:	9103      	str	r1, [sp, #12]
 8006090:	701a      	strb	r2, [r3, #0]
 8006092:	e7f0      	b.n	8006076 <__cvt+0xa6>

08006094 <__exponent>:
 8006094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006096:	4603      	mov	r3, r0
 8006098:	2900      	cmp	r1, #0
 800609a:	bfb8      	it	lt
 800609c:	4249      	neglt	r1, r1
 800609e:	f803 2b02 	strb.w	r2, [r3], #2
 80060a2:	bfb4      	ite	lt
 80060a4:	222d      	movlt	r2, #45	; 0x2d
 80060a6:	222b      	movge	r2, #43	; 0x2b
 80060a8:	2909      	cmp	r1, #9
 80060aa:	7042      	strb	r2, [r0, #1]
 80060ac:	dd2a      	ble.n	8006104 <__exponent+0x70>
 80060ae:	f10d 0407 	add.w	r4, sp, #7
 80060b2:	46a4      	mov	ip, r4
 80060b4:	270a      	movs	r7, #10
 80060b6:	46a6      	mov	lr, r4
 80060b8:	460a      	mov	r2, r1
 80060ba:	fb91 f6f7 	sdiv	r6, r1, r7
 80060be:	fb07 1516 	mls	r5, r7, r6, r1
 80060c2:	3530      	adds	r5, #48	; 0x30
 80060c4:	2a63      	cmp	r2, #99	; 0x63
 80060c6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80060ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80060ce:	4631      	mov	r1, r6
 80060d0:	dcf1      	bgt.n	80060b6 <__exponent+0x22>
 80060d2:	3130      	adds	r1, #48	; 0x30
 80060d4:	f1ae 0502 	sub.w	r5, lr, #2
 80060d8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80060dc:	1c44      	adds	r4, r0, #1
 80060de:	4629      	mov	r1, r5
 80060e0:	4561      	cmp	r1, ip
 80060e2:	d30a      	bcc.n	80060fa <__exponent+0x66>
 80060e4:	f10d 0209 	add.w	r2, sp, #9
 80060e8:	eba2 020e 	sub.w	r2, r2, lr
 80060ec:	4565      	cmp	r5, ip
 80060ee:	bf88      	it	hi
 80060f0:	2200      	movhi	r2, #0
 80060f2:	4413      	add	r3, r2
 80060f4:	1a18      	subs	r0, r3, r0
 80060f6:	b003      	add	sp, #12
 80060f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060fe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006102:	e7ed      	b.n	80060e0 <__exponent+0x4c>
 8006104:	2330      	movs	r3, #48	; 0x30
 8006106:	3130      	adds	r1, #48	; 0x30
 8006108:	7083      	strb	r3, [r0, #2]
 800610a:	70c1      	strb	r1, [r0, #3]
 800610c:	1d03      	adds	r3, r0, #4
 800610e:	e7f1      	b.n	80060f4 <__exponent+0x60>

08006110 <_printf_float>:
 8006110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006114:	ed2d 8b02 	vpush	{d8}
 8006118:	b08d      	sub	sp, #52	; 0x34
 800611a:	460c      	mov	r4, r1
 800611c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006120:	4616      	mov	r6, r2
 8006122:	461f      	mov	r7, r3
 8006124:	4605      	mov	r5, r0
 8006126:	f003 f9b3 	bl	8009490 <_localeconv_r>
 800612a:	f8d0 a000 	ldr.w	sl, [r0]
 800612e:	4650      	mov	r0, sl
 8006130:	f7fa f85e 	bl	80001f0 <strlen>
 8006134:	2300      	movs	r3, #0
 8006136:	930a      	str	r3, [sp, #40]	; 0x28
 8006138:	6823      	ldr	r3, [r4, #0]
 800613a:	9305      	str	r3, [sp, #20]
 800613c:	f8d8 3000 	ldr.w	r3, [r8]
 8006140:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006144:	3307      	adds	r3, #7
 8006146:	f023 0307 	bic.w	r3, r3, #7
 800614a:	f103 0208 	add.w	r2, r3, #8
 800614e:	f8c8 2000 	str.w	r2, [r8]
 8006152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006156:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800615a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800615e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006162:	9307      	str	r3, [sp, #28]
 8006164:	f8cd 8018 	str.w	r8, [sp, #24]
 8006168:	ee08 0a10 	vmov	s16, r0
 800616c:	4b9f      	ldr	r3, [pc, #636]	; (80063ec <_printf_float+0x2dc>)
 800616e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006172:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006176:	f7fa fce9 	bl	8000b4c <__aeabi_dcmpun>
 800617a:	bb88      	cbnz	r0, 80061e0 <_printf_float+0xd0>
 800617c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006180:	4b9a      	ldr	r3, [pc, #616]	; (80063ec <_printf_float+0x2dc>)
 8006182:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006186:	f7fa fcc3 	bl	8000b10 <__aeabi_dcmple>
 800618a:	bb48      	cbnz	r0, 80061e0 <_printf_float+0xd0>
 800618c:	2200      	movs	r2, #0
 800618e:	2300      	movs	r3, #0
 8006190:	4640      	mov	r0, r8
 8006192:	4649      	mov	r1, r9
 8006194:	f7fa fcb2 	bl	8000afc <__aeabi_dcmplt>
 8006198:	b110      	cbz	r0, 80061a0 <_printf_float+0x90>
 800619a:	232d      	movs	r3, #45	; 0x2d
 800619c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061a0:	4b93      	ldr	r3, [pc, #588]	; (80063f0 <_printf_float+0x2e0>)
 80061a2:	4894      	ldr	r0, [pc, #592]	; (80063f4 <_printf_float+0x2e4>)
 80061a4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80061a8:	bf94      	ite	ls
 80061aa:	4698      	movls	r8, r3
 80061ac:	4680      	movhi	r8, r0
 80061ae:	2303      	movs	r3, #3
 80061b0:	6123      	str	r3, [r4, #16]
 80061b2:	9b05      	ldr	r3, [sp, #20]
 80061b4:	f023 0204 	bic.w	r2, r3, #4
 80061b8:	6022      	str	r2, [r4, #0]
 80061ba:	f04f 0900 	mov.w	r9, #0
 80061be:	9700      	str	r7, [sp, #0]
 80061c0:	4633      	mov	r3, r6
 80061c2:	aa0b      	add	r2, sp, #44	; 0x2c
 80061c4:	4621      	mov	r1, r4
 80061c6:	4628      	mov	r0, r5
 80061c8:	f000 f9d8 	bl	800657c <_printf_common>
 80061cc:	3001      	adds	r0, #1
 80061ce:	f040 8090 	bne.w	80062f2 <_printf_float+0x1e2>
 80061d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061d6:	b00d      	add	sp, #52	; 0x34
 80061d8:	ecbd 8b02 	vpop	{d8}
 80061dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061e0:	4642      	mov	r2, r8
 80061e2:	464b      	mov	r3, r9
 80061e4:	4640      	mov	r0, r8
 80061e6:	4649      	mov	r1, r9
 80061e8:	f7fa fcb0 	bl	8000b4c <__aeabi_dcmpun>
 80061ec:	b140      	cbz	r0, 8006200 <_printf_float+0xf0>
 80061ee:	464b      	mov	r3, r9
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	bfbc      	itt	lt
 80061f4:	232d      	movlt	r3, #45	; 0x2d
 80061f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80061fa:	487f      	ldr	r0, [pc, #508]	; (80063f8 <_printf_float+0x2e8>)
 80061fc:	4b7f      	ldr	r3, [pc, #508]	; (80063fc <_printf_float+0x2ec>)
 80061fe:	e7d1      	b.n	80061a4 <_printf_float+0x94>
 8006200:	6863      	ldr	r3, [r4, #4]
 8006202:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006206:	9206      	str	r2, [sp, #24]
 8006208:	1c5a      	adds	r2, r3, #1
 800620a:	d13f      	bne.n	800628c <_printf_float+0x17c>
 800620c:	2306      	movs	r3, #6
 800620e:	6063      	str	r3, [r4, #4]
 8006210:	9b05      	ldr	r3, [sp, #20]
 8006212:	6861      	ldr	r1, [r4, #4]
 8006214:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006218:	2300      	movs	r3, #0
 800621a:	9303      	str	r3, [sp, #12]
 800621c:	ab0a      	add	r3, sp, #40	; 0x28
 800621e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006222:	ab09      	add	r3, sp, #36	; 0x24
 8006224:	ec49 8b10 	vmov	d0, r8, r9
 8006228:	9300      	str	r3, [sp, #0]
 800622a:	6022      	str	r2, [r4, #0]
 800622c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006230:	4628      	mov	r0, r5
 8006232:	f7ff fecd 	bl	8005fd0 <__cvt>
 8006236:	9b06      	ldr	r3, [sp, #24]
 8006238:	9909      	ldr	r1, [sp, #36]	; 0x24
 800623a:	2b47      	cmp	r3, #71	; 0x47
 800623c:	4680      	mov	r8, r0
 800623e:	d108      	bne.n	8006252 <_printf_float+0x142>
 8006240:	1cc8      	adds	r0, r1, #3
 8006242:	db02      	blt.n	800624a <_printf_float+0x13a>
 8006244:	6863      	ldr	r3, [r4, #4]
 8006246:	4299      	cmp	r1, r3
 8006248:	dd41      	ble.n	80062ce <_printf_float+0x1be>
 800624a:	f1ab 0b02 	sub.w	fp, fp, #2
 800624e:	fa5f fb8b 	uxtb.w	fp, fp
 8006252:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006256:	d820      	bhi.n	800629a <_printf_float+0x18a>
 8006258:	3901      	subs	r1, #1
 800625a:	465a      	mov	r2, fp
 800625c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006260:	9109      	str	r1, [sp, #36]	; 0x24
 8006262:	f7ff ff17 	bl	8006094 <__exponent>
 8006266:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006268:	1813      	adds	r3, r2, r0
 800626a:	2a01      	cmp	r2, #1
 800626c:	4681      	mov	r9, r0
 800626e:	6123      	str	r3, [r4, #16]
 8006270:	dc02      	bgt.n	8006278 <_printf_float+0x168>
 8006272:	6822      	ldr	r2, [r4, #0]
 8006274:	07d2      	lsls	r2, r2, #31
 8006276:	d501      	bpl.n	800627c <_printf_float+0x16c>
 8006278:	3301      	adds	r3, #1
 800627a:	6123      	str	r3, [r4, #16]
 800627c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006280:	2b00      	cmp	r3, #0
 8006282:	d09c      	beq.n	80061be <_printf_float+0xae>
 8006284:	232d      	movs	r3, #45	; 0x2d
 8006286:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800628a:	e798      	b.n	80061be <_printf_float+0xae>
 800628c:	9a06      	ldr	r2, [sp, #24]
 800628e:	2a47      	cmp	r2, #71	; 0x47
 8006290:	d1be      	bne.n	8006210 <_printf_float+0x100>
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1bc      	bne.n	8006210 <_printf_float+0x100>
 8006296:	2301      	movs	r3, #1
 8006298:	e7b9      	b.n	800620e <_printf_float+0xfe>
 800629a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800629e:	d118      	bne.n	80062d2 <_printf_float+0x1c2>
 80062a0:	2900      	cmp	r1, #0
 80062a2:	6863      	ldr	r3, [r4, #4]
 80062a4:	dd0b      	ble.n	80062be <_printf_float+0x1ae>
 80062a6:	6121      	str	r1, [r4, #16]
 80062a8:	b913      	cbnz	r3, 80062b0 <_printf_float+0x1a0>
 80062aa:	6822      	ldr	r2, [r4, #0]
 80062ac:	07d0      	lsls	r0, r2, #31
 80062ae:	d502      	bpl.n	80062b6 <_printf_float+0x1a6>
 80062b0:	3301      	adds	r3, #1
 80062b2:	440b      	add	r3, r1
 80062b4:	6123      	str	r3, [r4, #16]
 80062b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80062b8:	f04f 0900 	mov.w	r9, #0
 80062bc:	e7de      	b.n	800627c <_printf_float+0x16c>
 80062be:	b913      	cbnz	r3, 80062c6 <_printf_float+0x1b6>
 80062c0:	6822      	ldr	r2, [r4, #0]
 80062c2:	07d2      	lsls	r2, r2, #31
 80062c4:	d501      	bpl.n	80062ca <_printf_float+0x1ba>
 80062c6:	3302      	adds	r3, #2
 80062c8:	e7f4      	b.n	80062b4 <_printf_float+0x1a4>
 80062ca:	2301      	movs	r3, #1
 80062cc:	e7f2      	b.n	80062b4 <_printf_float+0x1a4>
 80062ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80062d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062d4:	4299      	cmp	r1, r3
 80062d6:	db05      	blt.n	80062e4 <_printf_float+0x1d4>
 80062d8:	6823      	ldr	r3, [r4, #0]
 80062da:	6121      	str	r1, [r4, #16]
 80062dc:	07d8      	lsls	r0, r3, #31
 80062de:	d5ea      	bpl.n	80062b6 <_printf_float+0x1a6>
 80062e0:	1c4b      	adds	r3, r1, #1
 80062e2:	e7e7      	b.n	80062b4 <_printf_float+0x1a4>
 80062e4:	2900      	cmp	r1, #0
 80062e6:	bfd4      	ite	le
 80062e8:	f1c1 0202 	rsble	r2, r1, #2
 80062ec:	2201      	movgt	r2, #1
 80062ee:	4413      	add	r3, r2
 80062f0:	e7e0      	b.n	80062b4 <_printf_float+0x1a4>
 80062f2:	6823      	ldr	r3, [r4, #0]
 80062f4:	055a      	lsls	r2, r3, #21
 80062f6:	d407      	bmi.n	8006308 <_printf_float+0x1f8>
 80062f8:	6923      	ldr	r3, [r4, #16]
 80062fa:	4642      	mov	r2, r8
 80062fc:	4631      	mov	r1, r6
 80062fe:	4628      	mov	r0, r5
 8006300:	47b8      	blx	r7
 8006302:	3001      	adds	r0, #1
 8006304:	d12c      	bne.n	8006360 <_printf_float+0x250>
 8006306:	e764      	b.n	80061d2 <_printf_float+0xc2>
 8006308:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800630c:	f240 80e0 	bls.w	80064d0 <_printf_float+0x3c0>
 8006310:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006314:	2200      	movs	r2, #0
 8006316:	2300      	movs	r3, #0
 8006318:	f7fa fbe6 	bl	8000ae8 <__aeabi_dcmpeq>
 800631c:	2800      	cmp	r0, #0
 800631e:	d034      	beq.n	800638a <_printf_float+0x27a>
 8006320:	4a37      	ldr	r2, [pc, #220]	; (8006400 <_printf_float+0x2f0>)
 8006322:	2301      	movs	r3, #1
 8006324:	4631      	mov	r1, r6
 8006326:	4628      	mov	r0, r5
 8006328:	47b8      	blx	r7
 800632a:	3001      	adds	r0, #1
 800632c:	f43f af51 	beq.w	80061d2 <_printf_float+0xc2>
 8006330:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006334:	429a      	cmp	r2, r3
 8006336:	db02      	blt.n	800633e <_printf_float+0x22e>
 8006338:	6823      	ldr	r3, [r4, #0]
 800633a:	07d8      	lsls	r0, r3, #31
 800633c:	d510      	bpl.n	8006360 <_printf_float+0x250>
 800633e:	ee18 3a10 	vmov	r3, s16
 8006342:	4652      	mov	r2, sl
 8006344:	4631      	mov	r1, r6
 8006346:	4628      	mov	r0, r5
 8006348:	47b8      	blx	r7
 800634a:	3001      	adds	r0, #1
 800634c:	f43f af41 	beq.w	80061d2 <_printf_float+0xc2>
 8006350:	f04f 0800 	mov.w	r8, #0
 8006354:	f104 091a 	add.w	r9, r4, #26
 8006358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800635a:	3b01      	subs	r3, #1
 800635c:	4543      	cmp	r3, r8
 800635e:	dc09      	bgt.n	8006374 <_printf_float+0x264>
 8006360:	6823      	ldr	r3, [r4, #0]
 8006362:	079b      	lsls	r3, r3, #30
 8006364:	f100 8105 	bmi.w	8006572 <_printf_float+0x462>
 8006368:	68e0      	ldr	r0, [r4, #12]
 800636a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800636c:	4298      	cmp	r0, r3
 800636e:	bfb8      	it	lt
 8006370:	4618      	movlt	r0, r3
 8006372:	e730      	b.n	80061d6 <_printf_float+0xc6>
 8006374:	2301      	movs	r3, #1
 8006376:	464a      	mov	r2, r9
 8006378:	4631      	mov	r1, r6
 800637a:	4628      	mov	r0, r5
 800637c:	47b8      	blx	r7
 800637e:	3001      	adds	r0, #1
 8006380:	f43f af27 	beq.w	80061d2 <_printf_float+0xc2>
 8006384:	f108 0801 	add.w	r8, r8, #1
 8006388:	e7e6      	b.n	8006358 <_printf_float+0x248>
 800638a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800638c:	2b00      	cmp	r3, #0
 800638e:	dc39      	bgt.n	8006404 <_printf_float+0x2f4>
 8006390:	4a1b      	ldr	r2, [pc, #108]	; (8006400 <_printf_float+0x2f0>)
 8006392:	2301      	movs	r3, #1
 8006394:	4631      	mov	r1, r6
 8006396:	4628      	mov	r0, r5
 8006398:	47b8      	blx	r7
 800639a:	3001      	adds	r0, #1
 800639c:	f43f af19 	beq.w	80061d2 <_printf_float+0xc2>
 80063a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063a4:	4313      	orrs	r3, r2
 80063a6:	d102      	bne.n	80063ae <_printf_float+0x29e>
 80063a8:	6823      	ldr	r3, [r4, #0]
 80063aa:	07d9      	lsls	r1, r3, #31
 80063ac:	d5d8      	bpl.n	8006360 <_printf_float+0x250>
 80063ae:	ee18 3a10 	vmov	r3, s16
 80063b2:	4652      	mov	r2, sl
 80063b4:	4631      	mov	r1, r6
 80063b6:	4628      	mov	r0, r5
 80063b8:	47b8      	blx	r7
 80063ba:	3001      	adds	r0, #1
 80063bc:	f43f af09 	beq.w	80061d2 <_printf_float+0xc2>
 80063c0:	f04f 0900 	mov.w	r9, #0
 80063c4:	f104 0a1a 	add.w	sl, r4, #26
 80063c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063ca:	425b      	negs	r3, r3
 80063cc:	454b      	cmp	r3, r9
 80063ce:	dc01      	bgt.n	80063d4 <_printf_float+0x2c4>
 80063d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063d2:	e792      	b.n	80062fa <_printf_float+0x1ea>
 80063d4:	2301      	movs	r3, #1
 80063d6:	4652      	mov	r2, sl
 80063d8:	4631      	mov	r1, r6
 80063da:	4628      	mov	r0, r5
 80063dc:	47b8      	blx	r7
 80063de:	3001      	adds	r0, #1
 80063e0:	f43f aef7 	beq.w	80061d2 <_printf_float+0xc2>
 80063e4:	f109 0901 	add.w	r9, r9, #1
 80063e8:	e7ee      	b.n	80063c8 <_printf_float+0x2b8>
 80063ea:	bf00      	nop
 80063ec:	7fefffff 	.word	0x7fefffff
 80063f0:	0800aeac 	.word	0x0800aeac
 80063f4:	0800aeb0 	.word	0x0800aeb0
 80063f8:	0800aeb8 	.word	0x0800aeb8
 80063fc:	0800aeb4 	.word	0x0800aeb4
 8006400:	0800aebc 	.word	0x0800aebc
 8006404:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006406:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006408:	429a      	cmp	r2, r3
 800640a:	bfa8      	it	ge
 800640c:	461a      	movge	r2, r3
 800640e:	2a00      	cmp	r2, #0
 8006410:	4691      	mov	r9, r2
 8006412:	dc37      	bgt.n	8006484 <_printf_float+0x374>
 8006414:	f04f 0b00 	mov.w	fp, #0
 8006418:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800641c:	f104 021a 	add.w	r2, r4, #26
 8006420:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006422:	9305      	str	r3, [sp, #20]
 8006424:	eba3 0309 	sub.w	r3, r3, r9
 8006428:	455b      	cmp	r3, fp
 800642a:	dc33      	bgt.n	8006494 <_printf_float+0x384>
 800642c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006430:	429a      	cmp	r2, r3
 8006432:	db3b      	blt.n	80064ac <_printf_float+0x39c>
 8006434:	6823      	ldr	r3, [r4, #0]
 8006436:	07da      	lsls	r2, r3, #31
 8006438:	d438      	bmi.n	80064ac <_printf_float+0x39c>
 800643a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800643c:	9a05      	ldr	r2, [sp, #20]
 800643e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006440:	1a9a      	subs	r2, r3, r2
 8006442:	eba3 0901 	sub.w	r9, r3, r1
 8006446:	4591      	cmp	r9, r2
 8006448:	bfa8      	it	ge
 800644a:	4691      	movge	r9, r2
 800644c:	f1b9 0f00 	cmp.w	r9, #0
 8006450:	dc35      	bgt.n	80064be <_printf_float+0x3ae>
 8006452:	f04f 0800 	mov.w	r8, #0
 8006456:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800645a:	f104 0a1a 	add.w	sl, r4, #26
 800645e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006462:	1a9b      	subs	r3, r3, r2
 8006464:	eba3 0309 	sub.w	r3, r3, r9
 8006468:	4543      	cmp	r3, r8
 800646a:	f77f af79 	ble.w	8006360 <_printf_float+0x250>
 800646e:	2301      	movs	r3, #1
 8006470:	4652      	mov	r2, sl
 8006472:	4631      	mov	r1, r6
 8006474:	4628      	mov	r0, r5
 8006476:	47b8      	blx	r7
 8006478:	3001      	adds	r0, #1
 800647a:	f43f aeaa 	beq.w	80061d2 <_printf_float+0xc2>
 800647e:	f108 0801 	add.w	r8, r8, #1
 8006482:	e7ec      	b.n	800645e <_printf_float+0x34e>
 8006484:	4613      	mov	r3, r2
 8006486:	4631      	mov	r1, r6
 8006488:	4642      	mov	r2, r8
 800648a:	4628      	mov	r0, r5
 800648c:	47b8      	blx	r7
 800648e:	3001      	adds	r0, #1
 8006490:	d1c0      	bne.n	8006414 <_printf_float+0x304>
 8006492:	e69e      	b.n	80061d2 <_printf_float+0xc2>
 8006494:	2301      	movs	r3, #1
 8006496:	4631      	mov	r1, r6
 8006498:	4628      	mov	r0, r5
 800649a:	9205      	str	r2, [sp, #20]
 800649c:	47b8      	blx	r7
 800649e:	3001      	adds	r0, #1
 80064a0:	f43f ae97 	beq.w	80061d2 <_printf_float+0xc2>
 80064a4:	9a05      	ldr	r2, [sp, #20]
 80064a6:	f10b 0b01 	add.w	fp, fp, #1
 80064aa:	e7b9      	b.n	8006420 <_printf_float+0x310>
 80064ac:	ee18 3a10 	vmov	r3, s16
 80064b0:	4652      	mov	r2, sl
 80064b2:	4631      	mov	r1, r6
 80064b4:	4628      	mov	r0, r5
 80064b6:	47b8      	blx	r7
 80064b8:	3001      	adds	r0, #1
 80064ba:	d1be      	bne.n	800643a <_printf_float+0x32a>
 80064bc:	e689      	b.n	80061d2 <_printf_float+0xc2>
 80064be:	9a05      	ldr	r2, [sp, #20]
 80064c0:	464b      	mov	r3, r9
 80064c2:	4442      	add	r2, r8
 80064c4:	4631      	mov	r1, r6
 80064c6:	4628      	mov	r0, r5
 80064c8:	47b8      	blx	r7
 80064ca:	3001      	adds	r0, #1
 80064cc:	d1c1      	bne.n	8006452 <_printf_float+0x342>
 80064ce:	e680      	b.n	80061d2 <_printf_float+0xc2>
 80064d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064d2:	2a01      	cmp	r2, #1
 80064d4:	dc01      	bgt.n	80064da <_printf_float+0x3ca>
 80064d6:	07db      	lsls	r3, r3, #31
 80064d8:	d538      	bpl.n	800654c <_printf_float+0x43c>
 80064da:	2301      	movs	r3, #1
 80064dc:	4642      	mov	r2, r8
 80064de:	4631      	mov	r1, r6
 80064e0:	4628      	mov	r0, r5
 80064e2:	47b8      	blx	r7
 80064e4:	3001      	adds	r0, #1
 80064e6:	f43f ae74 	beq.w	80061d2 <_printf_float+0xc2>
 80064ea:	ee18 3a10 	vmov	r3, s16
 80064ee:	4652      	mov	r2, sl
 80064f0:	4631      	mov	r1, r6
 80064f2:	4628      	mov	r0, r5
 80064f4:	47b8      	blx	r7
 80064f6:	3001      	adds	r0, #1
 80064f8:	f43f ae6b 	beq.w	80061d2 <_printf_float+0xc2>
 80064fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006500:	2200      	movs	r2, #0
 8006502:	2300      	movs	r3, #0
 8006504:	f7fa faf0 	bl	8000ae8 <__aeabi_dcmpeq>
 8006508:	b9d8      	cbnz	r0, 8006542 <_printf_float+0x432>
 800650a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800650c:	f108 0201 	add.w	r2, r8, #1
 8006510:	3b01      	subs	r3, #1
 8006512:	4631      	mov	r1, r6
 8006514:	4628      	mov	r0, r5
 8006516:	47b8      	blx	r7
 8006518:	3001      	adds	r0, #1
 800651a:	d10e      	bne.n	800653a <_printf_float+0x42a>
 800651c:	e659      	b.n	80061d2 <_printf_float+0xc2>
 800651e:	2301      	movs	r3, #1
 8006520:	4652      	mov	r2, sl
 8006522:	4631      	mov	r1, r6
 8006524:	4628      	mov	r0, r5
 8006526:	47b8      	blx	r7
 8006528:	3001      	adds	r0, #1
 800652a:	f43f ae52 	beq.w	80061d2 <_printf_float+0xc2>
 800652e:	f108 0801 	add.w	r8, r8, #1
 8006532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006534:	3b01      	subs	r3, #1
 8006536:	4543      	cmp	r3, r8
 8006538:	dcf1      	bgt.n	800651e <_printf_float+0x40e>
 800653a:	464b      	mov	r3, r9
 800653c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006540:	e6dc      	b.n	80062fc <_printf_float+0x1ec>
 8006542:	f04f 0800 	mov.w	r8, #0
 8006546:	f104 0a1a 	add.w	sl, r4, #26
 800654a:	e7f2      	b.n	8006532 <_printf_float+0x422>
 800654c:	2301      	movs	r3, #1
 800654e:	4642      	mov	r2, r8
 8006550:	e7df      	b.n	8006512 <_printf_float+0x402>
 8006552:	2301      	movs	r3, #1
 8006554:	464a      	mov	r2, r9
 8006556:	4631      	mov	r1, r6
 8006558:	4628      	mov	r0, r5
 800655a:	47b8      	blx	r7
 800655c:	3001      	adds	r0, #1
 800655e:	f43f ae38 	beq.w	80061d2 <_printf_float+0xc2>
 8006562:	f108 0801 	add.w	r8, r8, #1
 8006566:	68e3      	ldr	r3, [r4, #12]
 8006568:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800656a:	1a5b      	subs	r3, r3, r1
 800656c:	4543      	cmp	r3, r8
 800656e:	dcf0      	bgt.n	8006552 <_printf_float+0x442>
 8006570:	e6fa      	b.n	8006368 <_printf_float+0x258>
 8006572:	f04f 0800 	mov.w	r8, #0
 8006576:	f104 0919 	add.w	r9, r4, #25
 800657a:	e7f4      	b.n	8006566 <_printf_float+0x456>

0800657c <_printf_common>:
 800657c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006580:	4616      	mov	r6, r2
 8006582:	4699      	mov	r9, r3
 8006584:	688a      	ldr	r2, [r1, #8]
 8006586:	690b      	ldr	r3, [r1, #16]
 8006588:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800658c:	4293      	cmp	r3, r2
 800658e:	bfb8      	it	lt
 8006590:	4613      	movlt	r3, r2
 8006592:	6033      	str	r3, [r6, #0]
 8006594:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006598:	4607      	mov	r7, r0
 800659a:	460c      	mov	r4, r1
 800659c:	b10a      	cbz	r2, 80065a2 <_printf_common+0x26>
 800659e:	3301      	adds	r3, #1
 80065a0:	6033      	str	r3, [r6, #0]
 80065a2:	6823      	ldr	r3, [r4, #0]
 80065a4:	0699      	lsls	r1, r3, #26
 80065a6:	bf42      	ittt	mi
 80065a8:	6833      	ldrmi	r3, [r6, #0]
 80065aa:	3302      	addmi	r3, #2
 80065ac:	6033      	strmi	r3, [r6, #0]
 80065ae:	6825      	ldr	r5, [r4, #0]
 80065b0:	f015 0506 	ands.w	r5, r5, #6
 80065b4:	d106      	bne.n	80065c4 <_printf_common+0x48>
 80065b6:	f104 0a19 	add.w	sl, r4, #25
 80065ba:	68e3      	ldr	r3, [r4, #12]
 80065bc:	6832      	ldr	r2, [r6, #0]
 80065be:	1a9b      	subs	r3, r3, r2
 80065c0:	42ab      	cmp	r3, r5
 80065c2:	dc26      	bgt.n	8006612 <_printf_common+0x96>
 80065c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80065c8:	1e13      	subs	r3, r2, #0
 80065ca:	6822      	ldr	r2, [r4, #0]
 80065cc:	bf18      	it	ne
 80065ce:	2301      	movne	r3, #1
 80065d0:	0692      	lsls	r2, r2, #26
 80065d2:	d42b      	bmi.n	800662c <_printf_common+0xb0>
 80065d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065d8:	4649      	mov	r1, r9
 80065da:	4638      	mov	r0, r7
 80065dc:	47c0      	blx	r8
 80065de:	3001      	adds	r0, #1
 80065e0:	d01e      	beq.n	8006620 <_printf_common+0xa4>
 80065e2:	6823      	ldr	r3, [r4, #0]
 80065e4:	68e5      	ldr	r5, [r4, #12]
 80065e6:	6832      	ldr	r2, [r6, #0]
 80065e8:	f003 0306 	and.w	r3, r3, #6
 80065ec:	2b04      	cmp	r3, #4
 80065ee:	bf08      	it	eq
 80065f0:	1aad      	subeq	r5, r5, r2
 80065f2:	68a3      	ldr	r3, [r4, #8]
 80065f4:	6922      	ldr	r2, [r4, #16]
 80065f6:	bf0c      	ite	eq
 80065f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065fc:	2500      	movne	r5, #0
 80065fe:	4293      	cmp	r3, r2
 8006600:	bfc4      	itt	gt
 8006602:	1a9b      	subgt	r3, r3, r2
 8006604:	18ed      	addgt	r5, r5, r3
 8006606:	2600      	movs	r6, #0
 8006608:	341a      	adds	r4, #26
 800660a:	42b5      	cmp	r5, r6
 800660c:	d11a      	bne.n	8006644 <_printf_common+0xc8>
 800660e:	2000      	movs	r0, #0
 8006610:	e008      	b.n	8006624 <_printf_common+0xa8>
 8006612:	2301      	movs	r3, #1
 8006614:	4652      	mov	r2, sl
 8006616:	4649      	mov	r1, r9
 8006618:	4638      	mov	r0, r7
 800661a:	47c0      	blx	r8
 800661c:	3001      	adds	r0, #1
 800661e:	d103      	bne.n	8006628 <_printf_common+0xac>
 8006620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006628:	3501      	adds	r5, #1
 800662a:	e7c6      	b.n	80065ba <_printf_common+0x3e>
 800662c:	18e1      	adds	r1, r4, r3
 800662e:	1c5a      	adds	r2, r3, #1
 8006630:	2030      	movs	r0, #48	; 0x30
 8006632:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006636:	4422      	add	r2, r4
 8006638:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800663c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006640:	3302      	adds	r3, #2
 8006642:	e7c7      	b.n	80065d4 <_printf_common+0x58>
 8006644:	2301      	movs	r3, #1
 8006646:	4622      	mov	r2, r4
 8006648:	4649      	mov	r1, r9
 800664a:	4638      	mov	r0, r7
 800664c:	47c0      	blx	r8
 800664e:	3001      	adds	r0, #1
 8006650:	d0e6      	beq.n	8006620 <_printf_common+0xa4>
 8006652:	3601      	adds	r6, #1
 8006654:	e7d9      	b.n	800660a <_printf_common+0x8e>
	...

08006658 <_printf_i>:
 8006658:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800665c:	7e0f      	ldrb	r7, [r1, #24]
 800665e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006660:	2f78      	cmp	r7, #120	; 0x78
 8006662:	4691      	mov	r9, r2
 8006664:	4680      	mov	r8, r0
 8006666:	460c      	mov	r4, r1
 8006668:	469a      	mov	sl, r3
 800666a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800666e:	d807      	bhi.n	8006680 <_printf_i+0x28>
 8006670:	2f62      	cmp	r7, #98	; 0x62
 8006672:	d80a      	bhi.n	800668a <_printf_i+0x32>
 8006674:	2f00      	cmp	r7, #0
 8006676:	f000 80d8 	beq.w	800682a <_printf_i+0x1d2>
 800667a:	2f58      	cmp	r7, #88	; 0x58
 800667c:	f000 80a3 	beq.w	80067c6 <_printf_i+0x16e>
 8006680:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006684:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006688:	e03a      	b.n	8006700 <_printf_i+0xa8>
 800668a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800668e:	2b15      	cmp	r3, #21
 8006690:	d8f6      	bhi.n	8006680 <_printf_i+0x28>
 8006692:	a101      	add	r1, pc, #4	; (adr r1, 8006698 <_printf_i+0x40>)
 8006694:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006698:	080066f1 	.word	0x080066f1
 800669c:	08006705 	.word	0x08006705
 80066a0:	08006681 	.word	0x08006681
 80066a4:	08006681 	.word	0x08006681
 80066a8:	08006681 	.word	0x08006681
 80066ac:	08006681 	.word	0x08006681
 80066b0:	08006705 	.word	0x08006705
 80066b4:	08006681 	.word	0x08006681
 80066b8:	08006681 	.word	0x08006681
 80066bc:	08006681 	.word	0x08006681
 80066c0:	08006681 	.word	0x08006681
 80066c4:	08006811 	.word	0x08006811
 80066c8:	08006735 	.word	0x08006735
 80066cc:	080067f3 	.word	0x080067f3
 80066d0:	08006681 	.word	0x08006681
 80066d4:	08006681 	.word	0x08006681
 80066d8:	08006833 	.word	0x08006833
 80066dc:	08006681 	.word	0x08006681
 80066e0:	08006735 	.word	0x08006735
 80066e4:	08006681 	.word	0x08006681
 80066e8:	08006681 	.word	0x08006681
 80066ec:	080067fb 	.word	0x080067fb
 80066f0:	682b      	ldr	r3, [r5, #0]
 80066f2:	1d1a      	adds	r2, r3, #4
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	602a      	str	r2, [r5, #0]
 80066f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006700:	2301      	movs	r3, #1
 8006702:	e0a3      	b.n	800684c <_printf_i+0x1f4>
 8006704:	6820      	ldr	r0, [r4, #0]
 8006706:	6829      	ldr	r1, [r5, #0]
 8006708:	0606      	lsls	r6, r0, #24
 800670a:	f101 0304 	add.w	r3, r1, #4
 800670e:	d50a      	bpl.n	8006726 <_printf_i+0xce>
 8006710:	680e      	ldr	r6, [r1, #0]
 8006712:	602b      	str	r3, [r5, #0]
 8006714:	2e00      	cmp	r6, #0
 8006716:	da03      	bge.n	8006720 <_printf_i+0xc8>
 8006718:	232d      	movs	r3, #45	; 0x2d
 800671a:	4276      	negs	r6, r6
 800671c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006720:	485e      	ldr	r0, [pc, #376]	; (800689c <_printf_i+0x244>)
 8006722:	230a      	movs	r3, #10
 8006724:	e019      	b.n	800675a <_printf_i+0x102>
 8006726:	680e      	ldr	r6, [r1, #0]
 8006728:	602b      	str	r3, [r5, #0]
 800672a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800672e:	bf18      	it	ne
 8006730:	b236      	sxthne	r6, r6
 8006732:	e7ef      	b.n	8006714 <_printf_i+0xbc>
 8006734:	682b      	ldr	r3, [r5, #0]
 8006736:	6820      	ldr	r0, [r4, #0]
 8006738:	1d19      	adds	r1, r3, #4
 800673a:	6029      	str	r1, [r5, #0]
 800673c:	0601      	lsls	r1, r0, #24
 800673e:	d501      	bpl.n	8006744 <_printf_i+0xec>
 8006740:	681e      	ldr	r6, [r3, #0]
 8006742:	e002      	b.n	800674a <_printf_i+0xf2>
 8006744:	0646      	lsls	r6, r0, #25
 8006746:	d5fb      	bpl.n	8006740 <_printf_i+0xe8>
 8006748:	881e      	ldrh	r6, [r3, #0]
 800674a:	4854      	ldr	r0, [pc, #336]	; (800689c <_printf_i+0x244>)
 800674c:	2f6f      	cmp	r7, #111	; 0x6f
 800674e:	bf0c      	ite	eq
 8006750:	2308      	moveq	r3, #8
 8006752:	230a      	movne	r3, #10
 8006754:	2100      	movs	r1, #0
 8006756:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800675a:	6865      	ldr	r5, [r4, #4]
 800675c:	60a5      	str	r5, [r4, #8]
 800675e:	2d00      	cmp	r5, #0
 8006760:	bfa2      	ittt	ge
 8006762:	6821      	ldrge	r1, [r4, #0]
 8006764:	f021 0104 	bicge.w	r1, r1, #4
 8006768:	6021      	strge	r1, [r4, #0]
 800676a:	b90e      	cbnz	r6, 8006770 <_printf_i+0x118>
 800676c:	2d00      	cmp	r5, #0
 800676e:	d04d      	beq.n	800680c <_printf_i+0x1b4>
 8006770:	4615      	mov	r5, r2
 8006772:	fbb6 f1f3 	udiv	r1, r6, r3
 8006776:	fb03 6711 	mls	r7, r3, r1, r6
 800677a:	5dc7      	ldrb	r7, [r0, r7]
 800677c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006780:	4637      	mov	r7, r6
 8006782:	42bb      	cmp	r3, r7
 8006784:	460e      	mov	r6, r1
 8006786:	d9f4      	bls.n	8006772 <_printf_i+0x11a>
 8006788:	2b08      	cmp	r3, #8
 800678a:	d10b      	bne.n	80067a4 <_printf_i+0x14c>
 800678c:	6823      	ldr	r3, [r4, #0]
 800678e:	07de      	lsls	r6, r3, #31
 8006790:	d508      	bpl.n	80067a4 <_printf_i+0x14c>
 8006792:	6923      	ldr	r3, [r4, #16]
 8006794:	6861      	ldr	r1, [r4, #4]
 8006796:	4299      	cmp	r1, r3
 8006798:	bfde      	ittt	le
 800679a:	2330      	movle	r3, #48	; 0x30
 800679c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80067a0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80067a4:	1b52      	subs	r2, r2, r5
 80067a6:	6122      	str	r2, [r4, #16]
 80067a8:	f8cd a000 	str.w	sl, [sp]
 80067ac:	464b      	mov	r3, r9
 80067ae:	aa03      	add	r2, sp, #12
 80067b0:	4621      	mov	r1, r4
 80067b2:	4640      	mov	r0, r8
 80067b4:	f7ff fee2 	bl	800657c <_printf_common>
 80067b8:	3001      	adds	r0, #1
 80067ba:	d14c      	bne.n	8006856 <_printf_i+0x1fe>
 80067bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067c0:	b004      	add	sp, #16
 80067c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067c6:	4835      	ldr	r0, [pc, #212]	; (800689c <_printf_i+0x244>)
 80067c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80067cc:	6829      	ldr	r1, [r5, #0]
 80067ce:	6823      	ldr	r3, [r4, #0]
 80067d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80067d4:	6029      	str	r1, [r5, #0]
 80067d6:	061d      	lsls	r5, r3, #24
 80067d8:	d514      	bpl.n	8006804 <_printf_i+0x1ac>
 80067da:	07df      	lsls	r7, r3, #31
 80067dc:	bf44      	itt	mi
 80067de:	f043 0320 	orrmi.w	r3, r3, #32
 80067e2:	6023      	strmi	r3, [r4, #0]
 80067e4:	b91e      	cbnz	r6, 80067ee <_printf_i+0x196>
 80067e6:	6823      	ldr	r3, [r4, #0]
 80067e8:	f023 0320 	bic.w	r3, r3, #32
 80067ec:	6023      	str	r3, [r4, #0]
 80067ee:	2310      	movs	r3, #16
 80067f0:	e7b0      	b.n	8006754 <_printf_i+0xfc>
 80067f2:	6823      	ldr	r3, [r4, #0]
 80067f4:	f043 0320 	orr.w	r3, r3, #32
 80067f8:	6023      	str	r3, [r4, #0]
 80067fa:	2378      	movs	r3, #120	; 0x78
 80067fc:	4828      	ldr	r0, [pc, #160]	; (80068a0 <_printf_i+0x248>)
 80067fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006802:	e7e3      	b.n	80067cc <_printf_i+0x174>
 8006804:	0659      	lsls	r1, r3, #25
 8006806:	bf48      	it	mi
 8006808:	b2b6      	uxthmi	r6, r6
 800680a:	e7e6      	b.n	80067da <_printf_i+0x182>
 800680c:	4615      	mov	r5, r2
 800680e:	e7bb      	b.n	8006788 <_printf_i+0x130>
 8006810:	682b      	ldr	r3, [r5, #0]
 8006812:	6826      	ldr	r6, [r4, #0]
 8006814:	6961      	ldr	r1, [r4, #20]
 8006816:	1d18      	adds	r0, r3, #4
 8006818:	6028      	str	r0, [r5, #0]
 800681a:	0635      	lsls	r5, r6, #24
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	d501      	bpl.n	8006824 <_printf_i+0x1cc>
 8006820:	6019      	str	r1, [r3, #0]
 8006822:	e002      	b.n	800682a <_printf_i+0x1d2>
 8006824:	0670      	lsls	r0, r6, #25
 8006826:	d5fb      	bpl.n	8006820 <_printf_i+0x1c8>
 8006828:	8019      	strh	r1, [r3, #0]
 800682a:	2300      	movs	r3, #0
 800682c:	6123      	str	r3, [r4, #16]
 800682e:	4615      	mov	r5, r2
 8006830:	e7ba      	b.n	80067a8 <_printf_i+0x150>
 8006832:	682b      	ldr	r3, [r5, #0]
 8006834:	1d1a      	adds	r2, r3, #4
 8006836:	602a      	str	r2, [r5, #0]
 8006838:	681d      	ldr	r5, [r3, #0]
 800683a:	6862      	ldr	r2, [r4, #4]
 800683c:	2100      	movs	r1, #0
 800683e:	4628      	mov	r0, r5
 8006840:	f7f9 fcde 	bl	8000200 <memchr>
 8006844:	b108      	cbz	r0, 800684a <_printf_i+0x1f2>
 8006846:	1b40      	subs	r0, r0, r5
 8006848:	6060      	str	r0, [r4, #4]
 800684a:	6863      	ldr	r3, [r4, #4]
 800684c:	6123      	str	r3, [r4, #16]
 800684e:	2300      	movs	r3, #0
 8006850:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006854:	e7a8      	b.n	80067a8 <_printf_i+0x150>
 8006856:	6923      	ldr	r3, [r4, #16]
 8006858:	462a      	mov	r2, r5
 800685a:	4649      	mov	r1, r9
 800685c:	4640      	mov	r0, r8
 800685e:	47d0      	blx	sl
 8006860:	3001      	adds	r0, #1
 8006862:	d0ab      	beq.n	80067bc <_printf_i+0x164>
 8006864:	6823      	ldr	r3, [r4, #0]
 8006866:	079b      	lsls	r3, r3, #30
 8006868:	d413      	bmi.n	8006892 <_printf_i+0x23a>
 800686a:	68e0      	ldr	r0, [r4, #12]
 800686c:	9b03      	ldr	r3, [sp, #12]
 800686e:	4298      	cmp	r0, r3
 8006870:	bfb8      	it	lt
 8006872:	4618      	movlt	r0, r3
 8006874:	e7a4      	b.n	80067c0 <_printf_i+0x168>
 8006876:	2301      	movs	r3, #1
 8006878:	4632      	mov	r2, r6
 800687a:	4649      	mov	r1, r9
 800687c:	4640      	mov	r0, r8
 800687e:	47d0      	blx	sl
 8006880:	3001      	adds	r0, #1
 8006882:	d09b      	beq.n	80067bc <_printf_i+0x164>
 8006884:	3501      	adds	r5, #1
 8006886:	68e3      	ldr	r3, [r4, #12]
 8006888:	9903      	ldr	r1, [sp, #12]
 800688a:	1a5b      	subs	r3, r3, r1
 800688c:	42ab      	cmp	r3, r5
 800688e:	dcf2      	bgt.n	8006876 <_printf_i+0x21e>
 8006890:	e7eb      	b.n	800686a <_printf_i+0x212>
 8006892:	2500      	movs	r5, #0
 8006894:	f104 0619 	add.w	r6, r4, #25
 8006898:	e7f5      	b.n	8006886 <_printf_i+0x22e>
 800689a:	bf00      	nop
 800689c:	0800aebe 	.word	0x0800aebe
 80068a0:	0800aecf 	.word	0x0800aecf

080068a4 <_scanf_float>:
 80068a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a8:	b087      	sub	sp, #28
 80068aa:	4617      	mov	r7, r2
 80068ac:	9303      	str	r3, [sp, #12]
 80068ae:	688b      	ldr	r3, [r1, #8]
 80068b0:	1e5a      	subs	r2, r3, #1
 80068b2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80068b6:	bf83      	ittte	hi
 80068b8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80068bc:	195b      	addhi	r3, r3, r5
 80068be:	9302      	strhi	r3, [sp, #8]
 80068c0:	2300      	movls	r3, #0
 80068c2:	bf86      	itte	hi
 80068c4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80068c8:	608b      	strhi	r3, [r1, #8]
 80068ca:	9302      	strls	r3, [sp, #8]
 80068cc:	680b      	ldr	r3, [r1, #0]
 80068ce:	468b      	mov	fp, r1
 80068d0:	2500      	movs	r5, #0
 80068d2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80068d6:	f84b 3b1c 	str.w	r3, [fp], #28
 80068da:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80068de:	4680      	mov	r8, r0
 80068e0:	460c      	mov	r4, r1
 80068e2:	465e      	mov	r6, fp
 80068e4:	46aa      	mov	sl, r5
 80068e6:	46a9      	mov	r9, r5
 80068e8:	9501      	str	r5, [sp, #4]
 80068ea:	68a2      	ldr	r2, [r4, #8]
 80068ec:	b152      	cbz	r2, 8006904 <_scanf_float+0x60>
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	2b4e      	cmp	r3, #78	; 0x4e
 80068f4:	d864      	bhi.n	80069c0 <_scanf_float+0x11c>
 80068f6:	2b40      	cmp	r3, #64	; 0x40
 80068f8:	d83c      	bhi.n	8006974 <_scanf_float+0xd0>
 80068fa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80068fe:	b2c8      	uxtb	r0, r1
 8006900:	280e      	cmp	r0, #14
 8006902:	d93a      	bls.n	800697a <_scanf_float+0xd6>
 8006904:	f1b9 0f00 	cmp.w	r9, #0
 8006908:	d003      	beq.n	8006912 <_scanf_float+0x6e>
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006910:	6023      	str	r3, [r4, #0]
 8006912:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006916:	f1ba 0f01 	cmp.w	sl, #1
 800691a:	f200 8113 	bhi.w	8006b44 <_scanf_float+0x2a0>
 800691e:	455e      	cmp	r6, fp
 8006920:	f200 8105 	bhi.w	8006b2e <_scanf_float+0x28a>
 8006924:	2501      	movs	r5, #1
 8006926:	4628      	mov	r0, r5
 8006928:	b007      	add	sp, #28
 800692a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800692e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006932:	2a0d      	cmp	r2, #13
 8006934:	d8e6      	bhi.n	8006904 <_scanf_float+0x60>
 8006936:	a101      	add	r1, pc, #4	; (adr r1, 800693c <_scanf_float+0x98>)
 8006938:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800693c:	08006a7b 	.word	0x08006a7b
 8006940:	08006905 	.word	0x08006905
 8006944:	08006905 	.word	0x08006905
 8006948:	08006905 	.word	0x08006905
 800694c:	08006adb 	.word	0x08006adb
 8006950:	08006ab3 	.word	0x08006ab3
 8006954:	08006905 	.word	0x08006905
 8006958:	08006905 	.word	0x08006905
 800695c:	08006a89 	.word	0x08006a89
 8006960:	08006905 	.word	0x08006905
 8006964:	08006905 	.word	0x08006905
 8006968:	08006905 	.word	0x08006905
 800696c:	08006905 	.word	0x08006905
 8006970:	08006a41 	.word	0x08006a41
 8006974:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006978:	e7db      	b.n	8006932 <_scanf_float+0x8e>
 800697a:	290e      	cmp	r1, #14
 800697c:	d8c2      	bhi.n	8006904 <_scanf_float+0x60>
 800697e:	a001      	add	r0, pc, #4	; (adr r0, 8006984 <_scanf_float+0xe0>)
 8006980:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006984:	08006a33 	.word	0x08006a33
 8006988:	08006905 	.word	0x08006905
 800698c:	08006a33 	.word	0x08006a33
 8006990:	08006ac7 	.word	0x08006ac7
 8006994:	08006905 	.word	0x08006905
 8006998:	080069e1 	.word	0x080069e1
 800699c:	08006a1d 	.word	0x08006a1d
 80069a0:	08006a1d 	.word	0x08006a1d
 80069a4:	08006a1d 	.word	0x08006a1d
 80069a8:	08006a1d 	.word	0x08006a1d
 80069ac:	08006a1d 	.word	0x08006a1d
 80069b0:	08006a1d 	.word	0x08006a1d
 80069b4:	08006a1d 	.word	0x08006a1d
 80069b8:	08006a1d 	.word	0x08006a1d
 80069bc:	08006a1d 	.word	0x08006a1d
 80069c0:	2b6e      	cmp	r3, #110	; 0x6e
 80069c2:	d809      	bhi.n	80069d8 <_scanf_float+0x134>
 80069c4:	2b60      	cmp	r3, #96	; 0x60
 80069c6:	d8b2      	bhi.n	800692e <_scanf_float+0x8a>
 80069c8:	2b54      	cmp	r3, #84	; 0x54
 80069ca:	d077      	beq.n	8006abc <_scanf_float+0x218>
 80069cc:	2b59      	cmp	r3, #89	; 0x59
 80069ce:	d199      	bne.n	8006904 <_scanf_float+0x60>
 80069d0:	2d07      	cmp	r5, #7
 80069d2:	d197      	bne.n	8006904 <_scanf_float+0x60>
 80069d4:	2508      	movs	r5, #8
 80069d6:	e029      	b.n	8006a2c <_scanf_float+0x188>
 80069d8:	2b74      	cmp	r3, #116	; 0x74
 80069da:	d06f      	beq.n	8006abc <_scanf_float+0x218>
 80069dc:	2b79      	cmp	r3, #121	; 0x79
 80069de:	e7f6      	b.n	80069ce <_scanf_float+0x12a>
 80069e0:	6821      	ldr	r1, [r4, #0]
 80069e2:	05c8      	lsls	r0, r1, #23
 80069e4:	d51a      	bpl.n	8006a1c <_scanf_float+0x178>
 80069e6:	9b02      	ldr	r3, [sp, #8]
 80069e8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80069ec:	6021      	str	r1, [r4, #0]
 80069ee:	f109 0901 	add.w	r9, r9, #1
 80069f2:	b11b      	cbz	r3, 80069fc <_scanf_float+0x158>
 80069f4:	3b01      	subs	r3, #1
 80069f6:	3201      	adds	r2, #1
 80069f8:	9302      	str	r3, [sp, #8]
 80069fa:	60a2      	str	r2, [r4, #8]
 80069fc:	68a3      	ldr	r3, [r4, #8]
 80069fe:	3b01      	subs	r3, #1
 8006a00:	60a3      	str	r3, [r4, #8]
 8006a02:	6923      	ldr	r3, [r4, #16]
 8006a04:	3301      	adds	r3, #1
 8006a06:	6123      	str	r3, [r4, #16]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	607b      	str	r3, [r7, #4]
 8006a10:	f340 8084 	ble.w	8006b1c <_scanf_float+0x278>
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	3301      	adds	r3, #1
 8006a18:	603b      	str	r3, [r7, #0]
 8006a1a:	e766      	b.n	80068ea <_scanf_float+0x46>
 8006a1c:	eb1a 0f05 	cmn.w	sl, r5
 8006a20:	f47f af70 	bne.w	8006904 <_scanf_float+0x60>
 8006a24:	6822      	ldr	r2, [r4, #0]
 8006a26:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006a2a:	6022      	str	r2, [r4, #0]
 8006a2c:	f806 3b01 	strb.w	r3, [r6], #1
 8006a30:	e7e4      	b.n	80069fc <_scanf_float+0x158>
 8006a32:	6822      	ldr	r2, [r4, #0]
 8006a34:	0610      	lsls	r0, r2, #24
 8006a36:	f57f af65 	bpl.w	8006904 <_scanf_float+0x60>
 8006a3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a3e:	e7f4      	b.n	8006a2a <_scanf_float+0x186>
 8006a40:	f1ba 0f00 	cmp.w	sl, #0
 8006a44:	d10e      	bne.n	8006a64 <_scanf_float+0x1c0>
 8006a46:	f1b9 0f00 	cmp.w	r9, #0
 8006a4a:	d10e      	bne.n	8006a6a <_scanf_float+0x1c6>
 8006a4c:	6822      	ldr	r2, [r4, #0]
 8006a4e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006a52:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006a56:	d108      	bne.n	8006a6a <_scanf_float+0x1c6>
 8006a58:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006a5c:	6022      	str	r2, [r4, #0]
 8006a5e:	f04f 0a01 	mov.w	sl, #1
 8006a62:	e7e3      	b.n	8006a2c <_scanf_float+0x188>
 8006a64:	f1ba 0f02 	cmp.w	sl, #2
 8006a68:	d055      	beq.n	8006b16 <_scanf_float+0x272>
 8006a6a:	2d01      	cmp	r5, #1
 8006a6c:	d002      	beq.n	8006a74 <_scanf_float+0x1d0>
 8006a6e:	2d04      	cmp	r5, #4
 8006a70:	f47f af48 	bne.w	8006904 <_scanf_float+0x60>
 8006a74:	3501      	adds	r5, #1
 8006a76:	b2ed      	uxtb	r5, r5
 8006a78:	e7d8      	b.n	8006a2c <_scanf_float+0x188>
 8006a7a:	f1ba 0f01 	cmp.w	sl, #1
 8006a7e:	f47f af41 	bne.w	8006904 <_scanf_float+0x60>
 8006a82:	f04f 0a02 	mov.w	sl, #2
 8006a86:	e7d1      	b.n	8006a2c <_scanf_float+0x188>
 8006a88:	b97d      	cbnz	r5, 8006aaa <_scanf_float+0x206>
 8006a8a:	f1b9 0f00 	cmp.w	r9, #0
 8006a8e:	f47f af3c 	bne.w	800690a <_scanf_float+0x66>
 8006a92:	6822      	ldr	r2, [r4, #0]
 8006a94:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006a98:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006a9c:	f47f af39 	bne.w	8006912 <_scanf_float+0x6e>
 8006aa0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006aa4:	6022      	str	r2, [r4, #0]
 8006aa6:	2501      	movs	r5, #1
 8006aa8:	e7c0      	b.n	8006a2c <_scanf_float+0x188>
 8006aaa:	2d03      	cmp	r5, #3
 8006aac:	d0e2      	beq.n	8006a74 <_scanf_float+0x1d0>
 8006aae:	2d05      	cmp	r5, #5
 8006ab0:	e7de      	b.n	8006a70 <_scanf_float+0x1cc>
 8006ab2:	2d02      	cmp	r5, #2
 8006ab4:	f47f af26 	bne.w	8006904 <_scanf_float+0x60>
 8006ab8:	2503      	movs	r5, #3
 8006aba:	e7b7      	b.n	8006a2c <_scanf_float+0x188>
 8006abc:	2d06      	cmp	r5, #6
 8006abe:	f47f af21 	bne.w	8006904 <_scanf_float+0x60>
 8006ac2:	2507      	movs	r5, #7
 8006ac4:	e7b2      	b.n	8006a2c <_scanf_float+0x188>
 8006ac6:	6822      	ldr	r2, [r4, #0]
 8006ac8:	0591      	lsls	r1, r2, #22
 8006aca:	f57f af1b 	bpl.w	8006904 <_scanf_float+0x60>
 8006ace:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006ad2:	6022      	str	r2, [r4, #0]
 8006ad4:	f8cd 9004 	str.w	r9, [sp, #4]
 8006ad8:	e7a8      	b.n	8006a2c <_scanf_float+0x188>
 8006ada:	6822      	ldr	r2, [r4, #0]
 8006adc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006ae0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006ae4:	d006      	beq.n	8006af4 <_scanf_float+0x250>
 8006ae6:	0550      	lsls	r0, r2, #21
 8006ae8:	f57f af0c 	bpl.w	8006904 <_scanf_float+0x60>
 8006aec:	f1b9 0f00 	cmp.w	r9, #0
 8006af0:	f43f af0f 	beq.w	8006912 <_scanf_float+0x6e>
 8006af4:	0591      	lsls	r1, r2, #22
 8006af6:	bf58      	it	pl
 8006af8:	9901      	ldrpl	r1, [sp, #4]
 8006afa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006afe:	bf58      	it	pl
 8006b00:	eba9 0101 	subpl.w	r1, r9, r1
 8006b04:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006b08:	bf58      	it	pl
 8006b0a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006b0e:	6022      	str	r2, [r4, #0]
 8006b10:	f04f 0900 	mov.w	r9, #0
 8006b14:	e78a      	b.n	8006a2c <_scanf_float+0x188>
 8006b16:	f04f 0a03 	mov.w	sl, #3
 8006b1a:	e787      	b.n	8006a2c <_scanf_float+0x188>
 8006b1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006b20:	4639      	mov	r1, r7
 8006b22:	4640      	mov	r0, r8
 8006b24:	4798      	blx	r3
 8006b26:	2800      	cmp	r0, #0
 8006b28:	f43f aedf 	beq.w	80068ea <_scanf_float+0x46>
 8006b2c:	e6ea      	b.n	8006904 <_scanf_float+0x60>
 8006b2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b36:	463a      	mov	r2, r7
 8006b38:	4640      	mov	r0, r8
 8006b3a:	4798      	blx	r3
 8006b3c:	6923      	ldr	r3, [r4, #16]
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	6123      	str	r3, [r4, #16]
 8006b42:	e6ec      	b.n	800691e <_scanf_float+0x7a>
 8006b44:	1e6b      	subs	r3, r5, #1
 8006b46:	2b06      	cmp	r3, #6
 8006b48:	d825      	bhi.n	8006b96 <_scanf_float+0x2f2>
 8006b4a:	2d02      	cmp	r5, #2
 8006b4c:	d836      	bhi.n	8006bbc <_scanf_float+0x318>
 8006b4e:	455e      	cmp	r6, fp
 8006b50:	f67f aee8 	bls.w	8006924 <_scanf_float+0x80>
 8006b54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b58:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b5c:	463a      	mov	r2, r7
 8006b5e:	4640      	mov	r0, r8
 8006b60:	4798      	blx	r3
 8006b62:	6923      	ldr	r3, [r4, #16]
 8006b64:	3b01      	subs	r3, #1
 8006b66:	6123      	str	r3, [r4, #16]
 8006b68:	e7f1      	b.n	8006b4e <_scanf_float+0x2aa>
 8006b6a:	9802      	ldr	r0, [sp, #8]
 8006b6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b70:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006b74:	9002      	str	r0, [sp, #8]
 8006b76:	463a      	mov	r2, r7
 8006b78:	4640      	mov	r0, r8
 8006b7a:	4798      	blx	r3
 8006b7c:	6923      	ldr	r3, [r4, #16]
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	6123      	str	r3, [r4, #16]
 8006b82:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006b86:	fa5f fa8a 	uxtb.w	sl, sl
 8006b8a:	f1ba 0f02 	cmp.w	sl, #2
 8006b8e:	d1ec      	bne.n	8006b6a <_scanf_float+0x2c6>
 8006b90:	3d03      	subs	r5, #3
 8006b92:	b2ed      	uxtb	r5, r5
 8006b94:	1b76      	subs	r6, r6, r5
 8006b96:	6823      	ldr	r3, [r4, #0]
 8006b98:	05da      	lsls	r2, r3, #23
 8006b9a:	d52f      	bpl.n	8006bfc <_scanf_float+0x358>
 8006b9c:	055b      	lsls	r3, r3, #21
 8006b9e:	d510      	bpl.n	8006bc2 <_scanf_float+0x31e>
 8006ba0:	455e      	cmp	r6, fp
 8006ba2:	f67f aebf 	bls.w	8006924 <_scanf_float+0x80>
 8006ba6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006baa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006bae:	463a      	mov	r2, r7
 8006bb0:	4640      	mov	r0, r8
 8006bb2:	4798      	blx	r3
 8006bb4:	6923      	ldr	r3, [r4, #16]
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	6123      	str	r3, [r4, #16]
 8006bba:	e7f1      	b.n	8006ba0 <_scanf_float+0x2fc>
 8006bbc:	46aa      	mov	sl, r5
 8006bbe:	9602      	str	r6, [sp, #8]
 8006bc0:	e7df      	b.n	8006b82 <_scanf_float+0x2de>
 8006bc2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006bc6:	6923      	ldr	r3, [r4, #16]
 8006bc8:	2965      	cmp	r1, #101	; 0x65
 8006bca:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8006bce:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8006bd2:	6123      	str	r3, [r4, #16]
 8006bd4:	d00c      	beq.n	8006bf0 <_scanf_float+0x34c>
 8006bd6:	2945      	cmp	r1, #69	; 0x45
 8006bd8:	d00a      	beq.n	8006bf0 <_scanf_float+0x34c>
 8006bda:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006bde:	463a      	mov	r2, r7
 8006be0:	4640      	mov	r0, r8
 8006be2:	4798      	blx	r3
 8006be4:	6923      	ldr	r3, [r4, #16]
 8006be6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006bea:	3b01      	subs	r3, #1
 8006bec:	1eb5      	subs	r5, r6, #2
 8006bee:	6123      	str	r3, [r4, #16]
 8006bf0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006bf4:	463a      	mov	r2, r7
 8006bf6:	4640      	mov	r0, r8
 8006bf8:	4798      	blx	r3
 8006bfa:	462e      	mov	r6, r5
 8006bfc:	6825      	ldr	r5, [r4, #0]
 8006bfe:	f015 0510 	ands.w	r5, r5, #16
 8006c02:	d159      	bne.n	8006cb8 <_scanf_float+0x414>
 8006c04:	7035      	strb	r5, [r6, #0]
 8006c06:	6823      	ldr	r3, [r4, #0]
 8006c08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006c0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c10:	d11b      	bne.n	8006c4a <_scanf_float+0x3a6>
 8006c12:	9b01      	ldr	r3, [sp, #4]
 8006c14:	454b      	cmp	r3, r9
 8006c16:	eba3 0209 	sub.w	r2, r3, r9
 8006c1a:	d123      	bne.n	8006c64 <_scanf_float+0x3c0>
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	4659      	mov	r1, fp
 8006c20:	4640      	mov	r0, r8
 8006c22:	f000 ff4b 	bl	8007abc <_strtod_r>
 8006c26:	6822      	ldr	r2, [r4, #0]
 8006c28:	9b03      	ldr	r3, [sp, #12]
 8006c2a:	f012 0f02 	tst.w	r2, #2
 8006c2e:	ec57 6b10 	vmov	r6, r7, d0
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	d021      	beq.n	8006c7a <_scanf_float+0x3d6>
 8006c36:	9903      	ldr	r1, [sp, #12]
 8006c38:	1d1a      	adds	r2, r3, #4
 8006c3a:	600a      	str	r2, [r1, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	e9c3 6700 	strd	r6, r7, [r3]
 8006c42:	68e3      	ldr	r3, [r4, #12]
 8006c44:	3301      	adds	r3, #1
 8006c46:	60e3      	str	r3, [r4, #12]
 8006c48:	e66d      	b.n	8006926 <_scanf_float+0x82>
 8006c4a:	9b04      	ldr	r3, [sp, #16]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d0e5      	beq.n	8006c1c <_scanf_float+0x378>
 8006c50:	9905      	ldr	r1, [sp, #20]
 8006c52:	230a      	movs	r3, #10
 8006c54:	462a      	mov	r2, r5
 8006c56:	3101      	adds	r1, #1
 8006c58:	4640      	mov	r0, r8
 8006c5a:	f000 ffb7 	bl	8007bcc <_strtol_r>
 8006c5e:	9b04      	ldr	r3, [sp, #16]
 8006c60:	9e05      	ldr	r6, [sp, #20]
 8006c62:	1ac2      	subs	r2, r0, r3
 8006c64:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006c68:	429e      	cmp	r6, r3
 8006c6a:	bf28      	it	cs
 8006c6c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006c70:	4912      	ldr	r1, [pc, #72]	; (8006cbc <_scanf_float+0x418>)
 8006c72:	4630      	mov	r0, r6
 8006c74:	f000 f8d6 	bl	8006e24 <siprintf>
 8006c78:	e7d0      	b.n	8006c1c <_scanf_float+0x378>
 8006c7a:	9903      	ldr	r1, [sp, #12]
 8006c7c:	f012 0f04 	tst.w	r2, #4
 8006c80:	f103 0204 	add.w	r2, r3, #4
 8006c84:	600a      	str	r2, [r1, #0]
 8006c86:	d1d9      	bne.n	8006c3c <_scanf_float+0x398>
 8006c88:	f8d3 8000 	ldr.w	r8, [r3]
 8006c8c:	ee10 2a10 	vmov	r2, s0
 8006c90:	ee10 0a10 	vmov	r0, s0
 8006c94:	463b      	mov	r3, r7
 8006c96:	4639      	mov	r1, r7
 8006c98:	f7f9 ff58 	bl	8000b4c <__aeabi_dcmpun>
 8006c9c:	b128      	cbz	r0, 8006caa <_scanf_float+0x406>
 8006c9e:	4808      	ldr	r0, [pc, #32]	; (8006cc0 <_scanf_float+0x41c>)
 8006ca0:	f000 f886 	bl	8006db0 <nanf>
 8006ca4:	ed88 0a00 	vstr	s0, [r8]
 8006ca8:	e7cb      	b.n	8006c42 <_scanf_float+0x39e>
 8006caa:	4630      	mov	r0, r6
 8006cac:	4639      	mov	r1, r7
 8006cae:	f7f9 ffab 	bl	8000c08 <__aeabi_d2f>
 8006cb2:	f8c8 0000 	str.w	r0, [r8]
 8006cb6:	e7c4      	b.n	8006c42 <_scanf_float+0x39e>
 8006cb8:	2500      	movs	r5, #0
 8006cba:	e634      	b.n	8006926 <_scanf_float+0x82>
 8006cbc:	0800aee0 	.word	0x0800aee0
 8006cc0:	0800b350 	.word	0x0800b350

08006cc4 <_puts_r>:
 8006cc4:	b570      	push	{r4, r5, r6, lr}
 8006cc6:	460e      	mov	r6, r1
 8006cc8:	4605      	mov	r5, r0
 8006cca:	b118      	cbz	r0, 8006cd4 <_puts_r+0x10>
 8006ccc:	6983      	ldr	r3, [r0, #24]
 8006cce:	b90b      	cbnz	r3, 8006cd4 <_puts_r+0x10>
 8006cd0:	f001 ffd2 	bl	8008c78 <__sinit>
 8006cd4:	69ab      	ldr	r3, [r5, #24]
 8006cd6:	68ac      	ldr	r4, [r5, #8]
 8006cd8:	b913      	cbnz	r3, 8006ce0 <_puts_r+0x1c>
 8006cda:	4628      	mov	r0, r5
 8006cdc:	f001 ffcc 	bl	8008c78 <__sinit>
 8006ce0:	4b2c      	ldr	r3, [pc, #176]	; (8006d94 <_puts_r+0xd0>)
 8006ce2:	429c      	cmp	r4, r3
 8006ce4:	d120      	bne.n	8006d28 <_puts_r+0x64>
 8006ce6:	686c      	ldr	r4, [r5, #4]
 8006ce8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cea:	07db      	lsls	r3, r3, #31
 8006cec:	d405      	bmi.n	8006cfa <_puts_r+0x36>
 8006cee:	89a3      	ldrh	r3, [r4, #12]
 8006cf0:	0598      	lsls	r0, r3, #22
 8006cf2:	d402      	bmi.n	8006cfa <_puts_r+0x36>
 8006cf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cf6:	f002 fbd0 	bl	800949a <__retarget_lock_acquire_recursive>
 8006cfa:	89a3      	ldrh	r3, [r4, #12]
 8006cfc:	0719      	lsls	r1, r3, #28
 8006cfe:	d51d      	bpl.n	8006d3c <_puts_r+0x78>
 8006d00:	6923      	ldr	r3, [r4, #16]
 8006d02:	b1db      	cbz	r3, 8006d3c <_puts_r+0x78>
 8006d04:	3e01      	subs	r6, #1
 8006d06:	68a3      	ldr	r3, [r4, #8]
 8006d08:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	60a3      	str	r3, [r4, #8]
 8006d10:	bb39      	cbnz	r1, 8006d62 <_puts_r+0x9e>
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	da38      	bge.n	8006d88 <_puts_r+0xc4>
 8006d16:	4622      	mov	r2, r4
 8006d18:	210a      	movs	r1, #10
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	f000 ff58 	bl	8007bd0 <__swbuf_r>
 8006d20:	3001      	adds	r0, #1
 8006d22:	d011      	beq.n	8006d48 <_puts_r+0x84>
 8006d24:	250a      	movs	r5, #10
 8006d26:	e011      	b.n	8006d4c <_puts_r+0x88>
 8006d28:	4b1b      	ldr	r3, [pc, #108]	; (8006d98 <_puts_r+0xd4>)
 8006d2a:	429c      	cmp	r4, r3
 8006d2c:	d101      	bne.n	8006d32 <_puts_r+0x6e>
 8006d2e:	68ac      	ldr	r4, [r5, #8]
 8006d30:	e7da      	b.n	8006ce8 <_puts_r+0x24>
 8006d32:	4b1a      	ldr	r3, [pc, #104]	; (8006d9c <_puts_r+0xd8>)
 8006d34:	429c      	cmp	r4, r3
 8006d36:	bf08      	it	eq
 8006d38:	68ec      	ldreq	r4, [r5, #12]
 8006d3a:	e7d5      	b.n	8006ce8 <_puts_r+0x24>
 8006d3c:	4621      	mov	r1, r4
 8006d3e:	4628      	mov	r0, r5
 8006d40:	f000 ff98 	bl	8007c74 <__swsetup_r>
 8006d44:	2800      	cmp	r0, #0
 8006d46:	d0dd      	beq.n	8006d04 <_puts_r+0x40>
 8006d48:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006d4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d4e:	07da      	lsls	r2, r3, #31
 8006d50:	d405      	bmi.n	8006d5e <_puts_r+0x9a>
 8006d52:	89a3      	ldrh	r3, [r4, #12]
 8006d54:	059b      	lsls	r3, r3, #22
 8006d56:	d402      	bmi.n	8006d5e <_puts_r+0x9a>
 8006d58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d5a:	f002 fb9f 	bl	800949c <__retarget_lock_release_recursive>
 8006d5e:	4628      	mov	r0, r5
 8006d60:	bd70      	pop	{r4, r5, r6, pc}
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	da04      	bge.n	8006d70 <_puts_r+0xac>
 8006d66:	69a2      	ldr	r2, [r4, #24]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	dc06      	bgt.n	8006d7a <_puts_r+0xb6>
 8006d6c:	290a      	cmp	r1, #10
 8006d6e:	d004      	beq.n	8006d7a <_puts_r+0xb6>
 8006d70:	6823      	ldr	r3, [r4, #0]
 8006d72:	1c5a      	adds	r2, r3, #1
 8006d74:	6022      	str	r2, [r4, #0]
 8006d76:	7019      	strb	r1, [r3, #0]
 8006d78:	e7c5      	b.n	8006d06 <_puts_r+0x42>
 8006d7a:	4622      	mov	r2, r4
 8006d7c:	4628      	mov	r0, r5
 8006d7e:	f000 ff27 	bl	8007bd0 <__swbuf_r>
 8006d82:	3001      	adds	r0, #1
 8006d84:	d1bf      	bne.n	8006d06 <_puts_r+0x42>
 8006d86:	e7df      	b.n	8006d48 <_puts_r+0x84>
 8006d88:	6823      	ldr	r3, [r4, #0]
 8006d8a:	250a      	movs	r5, #10
 8006d8c:	1c5a      	adds	r2, r3, #1
 8006d8e:	6022      	str	r2, [r4, #0]
 8006d90:	701d      	strb	r5, [r3, #0]
 8006d92:	e7db      	b.n	8006d4c <_puts_r+0x88>
 8006d94:	0800b0ec 	.word	0x0800b0ec
 8006d98:	0800b10c 	.word	0x0800b10c
 8006d9c:	0800b0cc 	.word	0x0800b0cc

08006da0 <puts>:
 8006da0:	4b02      	ldr	r3, [pc, #8]	; (8006dac <puts+0xc>)
 8006da2:	4601      	mov	r1, r0
 8006da4:	6818      	ldr	r0, [r3, #0]
 8006da6:	f7ff bf8d 	b.w	8006cc4 <_puts_r>
 8006daa:	bf00      	nop
 8006dac:	2000003c 	.word	0x2000003c

08006db0 <nanf>:
 8006db0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006db8 <nanf+0x8>
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	7fc00000 	.word	0x7fc00000

08006dbc <sniprintf>:
 8006dbc:	b40c      	push	{r2, r3}
 8006dbe:	b530      	push	{r4, r5, lr}
 8006dc0:	4b17      	ldr	r3, [pc, #92]	; (8006e20 <sniprintf+0x64>)
 8006dc2:	1e0c      	subs	r4, r1, #0
 8006dc4:	681d      	ldr	r5, [r3, #0]
 8006dc6:	b09d      	sub	sp, #116	; 0x74
 8006dc8:	da08      	bge.n	8006ddc <sniprintf+0x20>
 8006dca:	238b      	movs	r3, #139	; 0x8b
 8006dcc:	602b      	str	r3, [r5, #0]
 8006dce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dd2:	b01d      	add	sp, #116	; 0x74
 8006dd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006dd8:	b002      	add	sp, #8
 8006dda:	4770      	bx	lr
 8006ddc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006de0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006de4:	bf14      	ite	ne
 8006de6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8006dea:	4623      	moveq	r3, r4
 8006dec:	9304      	str	r3, [sp, #16]
 8006dee:	9307      	str	r3, [sp, #28]
 8006df0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006df4:	9002      	str	r0, [sp, #8]
 8006df6:	9006      	str	r0, [sp, #24]
 8006df8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006dfc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006dfe:	ab21      	add	r3, sp, #132	; 0x84
 8006e00:	a902      	add	r1, sp, #8
 8006e02:	4628      	mov	r0, r5
 8006e04:	9301      	str	r3, [sp, #4]
 8006e06:	f003 f9dd 	bl	800a1c4 <_svfiprintf_r>
 8006e0a:	1c43      	adds	r3, r0, #1
 8006e0c:	bfbc      	itt	lt
 8006e0e:	238b      	movlt	r3, #139	; 0x8b
 8006e10:	602b      	strlt	r3, [r5, #0]
 8006e12:	2c00      	cmp	r4, #0
 8006e14:	d0dd      	beq.n	8006dd2 <sniprintf+0x16>
 8006e16:	9b02      	ldr	r3, [sp, #8]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	701a      	strb	r2, [r3, #0]
 8006e1c:	e7d9      	b.n	8006dd2 <sniprintf+0x16>
 8006e1e:	bf00      	nop
 8006e20:	2000003c 	.word	0x2000003c

08006e24 <siprintf>:
 8006e24:	b40e      	push	{r1, r2, r3}
 8006e26:	b500      	push	{lr}
 8006e28:	b09c      	sub	sp, #112	; 0x70
 8006e2a:	ab1d      	add	r3, sp, #116	; 0x74
 8006e2c:	9002      	str	r0, [sp, #8]
 8006e2e:	9006      	str	r0, [sp, #24]
 8006e30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e34:	4809      	ldr	r0, [pc, #36]	; (8006e5c <siprintf+0x38>)
 8006e36:	9107      	str	r1, [sp, #28]
 8006e38:	9104      	str	r1, [sp, #16]
 8006e3a:	4909      	ldr	r1, [pc, #36]	; (8006e60 <siprintf+0x3c>)
 8006e3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e40:	9105      	str	r1, [sp, #20]
 8006e42:	6800      	ldr	r0, [r0, #0]
 8006e44:	9301      	str	r3, [sp, #4]
 8006e46:	a902      	add	r1, sp, #8
 8006e48:	f003 f9bc 	bl	800a1c4 <_svfiprintf_r>
 8006e4c:	9b02      	ldr	r3, [sp, #8]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	701a      	strb	r2, [r3, #0]
 8006e52:	b01c      	add	sp, #112	; 0x70
 8006e54:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e58:	b003      	add	sp, #12
 8006e5a:	4770      	bx	lr
 8006e5c:	2000003c 	.word	0x2000003c
 8006e60:	ffff0208 	.word	0xffff0208

08006e64 <strcpy>:
 8006e64:	4603      	mov	r3, r0
 8006e66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e6a:	f803 2b01 	strb.w	r2, [r3], #1
 8006e6e:	2a00      	cmp	r2, #0
 8006e70:	d1f9      	bne.n	8006e66 <strcpy+0x2>
 8006e72:	4770      	bx	lr

08006e74 <sulp>:
 8006e74:	b570      	push	{r4, r5, r6, lr}
 8006e76:	4604      	mov	r4, r0
 8006e78:	460d      	mov	r5, r1
 8006e7a:	ec45 4b10 	vmov	d0, r4, r5
 8006e7e:	4616      	mov	r6, r2
 8006e80:	f002 fefe 	bl	8009c80 <__ulp>
 8006e84:	ec51 0b10 	vmov	r0, r1, d0
 8006e88:	b17e      	cbz	r6, 8006eaa <sulp+0x36>
 8006e8a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006e8e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	dd09      	ble.n	8006eaa <sulp+0x36>
 8006e96:	051b      	lsls	r3, r3, #20
 8006e98:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006e9c:	2400      	movs	r4, #0
 8006e9e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006ea2:	4622      	mov	r2, r4
 8006ea4:	462b      	mov	r3, r5
 8006ea6:	f7f9 fbb7 	bl	8000618 <__aeabi_dmul>
 8006eaa:	bd70      	pop	{r4, r5, r6, pc}
 8006eac:	0000      	movs	r0, r0
	...

08006eb0 <_strtod_l>:
 8006eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eb4:	ed2d 8b02 	vpush	{d8}
 8006eb8:	b09d      	sub	sp, #116	; 0x74
 8006eba:	461f      	mov	r7, r3
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	9318      	str	r3, [sp, #96]	; 0x60
 8006ec0:	4ba2      	ldr	r3, [pc, #648]	; (800714c <_strtod_l+0x29c>)
 8006ec2:	9213      	str	r2, [sp, #76]	; 0x4c
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	9305      	str	r3, [sp, #20]
 8006ec8:	4604      	mov	r4, r0
 8006eca:	4618      	mov	r0, r3
 8006ecc:	4688      	mov	r8, r1
 8006ece:	f7f9 f98f 	bl	80001f0 <strlen>
 8006ed2:	f04f 0a00 	mov.w	sl, #0
 8006ed6:	4605      	mov	r5, r0
 8006ed8:	f04f 0b00 	mov.w	fp, #0
 8006edc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006ee0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ee2:	781a      	ldrb	r2, [r3, #0]
 8006ee4:	2a2b      	cmp	r2, #43	; 0x2b
 8006ee6:	d04e      	beq.n	8006f86 <_strtod_l+0xd6>
 8006ee8:	d83b      	bhi.n	8006f62 <_strtod_l+0xb2>
 8006eea:	2a0d      	cmp	r2, #13
 8006eec:	d834      	bhi.n	8006f58 <_strtod_l+0xa8>
 8006eee:	2a08      	cmp	r2, #8
 8006ef0:	d834      	bhi.n	8006f5c <_strtod_l+0xac>
 8006ef2:	2a00      	cmp	r2, #0
 8006ef4:	d03e      	beq.n	8006f74 <_strtod_l+0xc4>
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	930a      	str	r3, [sp, #40]	; 0x28
 8006efa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006efc:	7833      	ldrb	r3, [r6, #0]
 8006efe:	2b30      	cmp	r3, #48	; 0x30
 8006f00:	f040 80b0 	bne.w	8007064 <_strtod_l+0x1b4>
 8006f04:	7873      	ldrb	r3, [r6, #1]
 8006f06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006f0a:	2b58      	cmp	r3, #88	; 0x58
 8006f0c:	d168      	bne.n	8006fe0 <_strtod_l+0x130>
 8006f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f10:	9301      	str	r3, [sp, #4]
 8006f12:	ab18      	add	r3, sp, #96	; 0x60
 8006f14:	9702      	str	r7, [sp, #8]
 8006f16:	9300      	str	r3, [sp, #0]
 8006f18:	4a8d      	ldr	r2, [pc, #564]	; (8007150 <_strtod_l+0x2a0>)
 8006f1a:	ab19      	add	r3, sp, #100	; 0x64
 8006f1c:	a917      	add	r1, sp, #92	; 0x5c
 8006f1e:	4620      	mov	r0, r4
 8006f20:	f001 ffae 	bl	8008e80 <__gethex>
 8006f24:	f010 0707 	ands.w	r7, r0, #7
 8006f28:	4605      	mov	r5, r0
 8006f2a:	d005      	beq.n	8006f38 <_strtod_l+0x88>
 8006f2c:	2f06      	cmp	r7, #6
 8006f2e:	d12c      	bne.n	8006f8a <_strtod_l+0xda>
 8006f30:	3601      	adds	r6, #1
 8006f32:	2300      	movs	r3, #0
 8006f34:	9617      	str	r6, [sp, #92]	; 0x5c
 8006f36:	930a      	str	r3, [sp, #40]	; 0x28
 8006f38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f040 8590 	bne.w	8007a60 <_strtod_l+0xbb0>
 8006f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f42:	b1eb      	cbz	r3, 8006f80 <_strtod_l+0xd0>
 8006f44:	4652      	mov	r2, sl
 8006f46:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006f4a:	ec43 2b10 	vmov	d0, r2, r3
 8006f4e:	b01d      	add	sp, #116	; 0x74
 8006f50:	ecbd 8b02 	vpop	{d8}
 8006f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f58:	2a20      	cmp	r2, #32
 8006f5a:	d1cc      	bne.n	8006ef6 <_strtod_l+0x46>
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	9317      	str	r3, [sp, #92]	; 0x5c
 8006f60:	e7be      	b.n	8006ee0 <_strtod_l+0x30>
 8006f62:	2a2d      	cmp	r2, #45	; 0x2d
 8006f64:	d1c7      	bne.n	8006ef6 <_strtod_l+0x46>
 8006f66:	2201      	movs	r2, #1
 8006f68:	920a      	str	r2, [sp, #40]	; 0x28
 8006f6a:	1c5a      	adds	r2, r3, #1
 8006f6c:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f6e:	785b      	ldrb	r3, [r3, #1]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d1c2      	bne.n	8006efa <_strtod_l+0x4a>
 8006f74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f76:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f040 856e 	bne.w	8007a5c <_strtod_l+0xbac>
 8006f80:	4652      	mov	r2, sl
 8006f82:	465b      	mov	r3, fp
 8006f84:	e7e1      	b.n	8006f4a <_strtod_l+0x9a>
 8006f86:	2200      	movs	r2, #0
 8006f88:	e7ee      	b.n	8006f68 <_strtod_l+0xb8>
 8006f8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006f8c:	b13a      	cbz	r2, 8006f9e <_strtod_l+0xee>
 8006f8e:	2135      	movs	r1, #53	; 0x35
 8006f90:	a81a      	add	r0, sp, #104	; 0x68
 8006f92:	f002 ff80 	bl	8009e96 <__copybits>
 8006f96:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006f98:	4620      	mov	r0, r4
 8006f9a:	f002 fb3f 	bl	800961c <_Bfree>
 8006f9e:	3f01      	subs	r7, #1
 8006fa0:	2f04      	cmp	r7, #4
 8006fa2:	d806      	bhi.n	8006fb2 <_strtod_l+0x102>
 8006fa4:	e8df f007 	tbb	[pc, r7]
 8006fa8:	1714030a 	.word	0x1714030a
 8006fac:	0a          	.byte	0x0a
 8006fad:	00          	.byte	0x00
 8006fae:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006fb2:	0728      	lsls	r0, r5, #28
 8006fb4:	d5c0      	bpl.n	8006f38 <_strtod_l+0x88>
 8006fb6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006fba:	e7bd      	b.n	8006f38 <_strtod_l+0x88>
 8006fbc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006fc0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006fc2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006fc6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006fca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006fce:	e7f0      	b.n	8006fb2 <_strtod_l+0x102>
 8006fd0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007154 <_strtod_l+0x2a4>
 8006fd4:	e7ed      	b.n	8006fb2 <_strtod_l+0x102>
 8006fd6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006fda:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006fde:	e7e8      	b.n	8006fb2 <_strtod_l+0x102>
 8006fe0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006fe2:	1c5a      	adds	r2, r3, #1
 8006fe4:	9217      	str	r2, [sp, #92]	; 0x5c
 8006fe6:	785b      	ldrb	r3, [r3, #1]
 8006fe8:	2b30      	cmp	r3, #48	; 0x30
 8006fea:	d0f9      	beq.n	8006fe0 <_strtod_l+0x130>
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d0a3      	beq.n	8006f38 <_strtod_l+0x88>
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	f04f 0900 	mov.w	r9, #0
 8006ff6:	9304      	str	r3, [sp, #16]
 8006ff8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ffa:	9308      	str	r3, [sp, #32]
 8006ffc:	f8cd 901c 	str.w	r9, [sp, #28]
 8007000:	464f      	mov	r7, r9
 8007002:	220a      	movs	r2, #10
 8007004:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007006:	7806      	ldrb	r6, [r0, #0]
 8007008:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800700c:	b2d9      	uxtb	r1, r3
 800700e:	2909      	cmp	r1, #9
 8007010:	d92a      	bls.n	8007068 <_strtod_l+0x1b8>
 8007012:	9905      	ldr	r1, [sp, #20]
 8007014:	462a      	mov	r2, r5
 8007016:	f003 fb8a 	bl	800a72e <strncmp>
 800701a:	b398      	cbz	r0, 8007084 <_strtod_l+0x1d4>
 800701c:	2000      	movs	r0, #0
 800701e:	4632      	mov	r2, r6
 8007020:	463d      	mov	r5, r7
 8007022:	9005      	str	r0, [sp, #20]
 8007024:	4603      	mov	r3, r0
 8007026:	2a65      	cmp	r2, #101	; 0x65
 8007028:	d001      	beq.n	800702e <_strtod_l+0x17e>
 800702a:	2a45      	cmp	r2, #69	; 0x45
 800702c:	d118      	bne.n	8007060 <_strtod_l+0x1b0>
 800702e:	b91d      	cbnz	r5, 8007038 <_strtod_l+0x188>
 8007030:	9a04      	ldr	r2, [sp, #16]
 8007032:	4302      	orrs	r2, r0
 8007034:	d09e      	beq.n	8006f74 <_strtod_l+0xc4>
 8007036:	2500      	movs	r5, #0
 8007038:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800703c:	f108 0201 	add.w	r2, r8, #1
 8007040:	9217      	str	r2, [sp, #92]	; 0x5c
 8007042:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007046:	2a2b      	cmp	r2, #43	; 0x2b
 8007048:	d075      	beq.n	8007136 <_strtod_l+0x286>
 800704a:	2a2d      	cmp	r2, #45	; 0x2d
 800704c:	d07b      	beq.n	8007146 <_strtod_l+0x296>
 800704e:	f04f 0c00 	mov.w	ip, #0
 8007052:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007056:	2909      	cmp	r1, #9
 8007058:	f240 8082 	bls.w	8007160 <_strtod_l+0x2b0>
 800705c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007060:	2600      	movs	r6, #0
 8007062:	e09d      	b.n	80071a0 <_strtod_l+0x2f0>
 8007064:	2300      	movs	r3, #0
 8007066:	e7c4      	b.n	8006ff2 <_strtod_l+0x142>
 8007068:	2f08      	cmp	r7, #8
 800706a:	bfd8      	it	le
 800706c:	9907      	ldrle	r1, [sp, #28]
 800706e:	f100 0001 	add.w	r0, r0, #1
 8007072:	bfda      	itte	le
 8007074:	fb02 3301 	mlale	r3, r2, r1, r3
 8007078:	9307      	strle	r3, [sp, #28]
 800707a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800707e:	3701      	adds	r7, #1
 8007080:	9017      	str	r0, [sp, #92]	; 0x5c
 8007082:	e7bf      	b.n	8007004 <_strtod_l+0x154>
 8007084:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007086:	195a      	adds	r2, r3, r5
 8007088:	9217      	str	r2, [sp, #92]	; 0x5c
 800708a:	5d5a      	ldrb	r2, [r3, r5]
 800708c:	2f00      	cmp	r7, #0
 800708e:	d037      	beq.n	8007100 <_strtod_l+0x250>
 8007090:	9005      	str	r0, [sp, #20]
 8007092:	463d      	mov	r5, r7
 8007094:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007098:	2b09      	cmp	r3, #9
 800709a:	d912      	bls.n	80070c2 <_strtod_l+0x212>
 800709c:	2301      	movs	r3, #1
 800709e:	e7c2      	b.n	8007026 <_strtod_l+0x176>
 80070a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80070a2:	1c5a      	adds	r2, r3, #1
 80070a4:	9217      	str	r2, [sp, #92]	; 0x5c
 80070a6:	785a      	ldrb	r2, [r3, #1]
 80070a8:	3001      	adds	r0, #1
 80070aa:	2a30      	cmp	r2, #48	; 0x30
 80070ac:	d0f8      	beq.n	80070a0 <_strtod_l+0x1f0>
 80070ae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80070b2:	2b08      	cmp	r3, #8
 80070b4:	f200 84d9 	bhi.w	8007a6a <_strtod_l+0xbba>
 80070b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80070ba:	9005      	str	r0, [sp, #20]
 80070bc:	2000      	movs	r0, #0
 80070be:	9308      	str	r3, [sp, #32]
 80070c0:	4605      	mov	r5, r0
 80070c2:	3a30      	subs	r2, #48	; 0x30
 80070c4:	f100 0301 	add.w	r3, r0, #1
 80070c8:	d014      	beq.n	80070f4 <_strtod_l+0x244>
 80070ca:	9905      	ldr	r1, [sp, #20]
 80070cc:	4419      	add	r1, r3
 80070ce:	9105      	str	r1, [sp, #20]
 80070d0:	462b      	mov	r3, r5
 80070d2:	eb00 0e05 	add.w	lr, r0, r5
 80070d6:	210a      	movs	r1, #10
 80070d8:	4573      	cmp	r3, lr
 80070da:	d113      	bne.n	8007104 <_strtod_l+0x254>
 80070dc:	182b      	adds	r3, r5, r0
 80070de:	2b08      	cmp	r3, #8
 80070e0:	f105 0501 	add.w	r5, r5, #1
 80070e4:	4405      	add	r5, r0
 80070e6:	dc1c      	bgt.n	8007122 <_strtod_l+0x272>
 80070e8:	9907      	ldr	r1, [sp, #28]
 80070ea:	230a      	movs	r3, #10
 80070ec:	fb03 2301 	mla	r3, r3, r1, r2
 80070f0:	9307      	str	r3, [sp, #28]
 80070f2:	2300      	movs	r3, #0
 80070f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80070f6:	1c51      	adds	r1, r2, #1
 80070f8:	9117      	str	r1, [sp, #92]	; 0x5c
 80070fa:	7852      	ldrb	r2, [r2, #1]
 80070fc:	4618      	mov	r0, r3
 80070fe:	e7c9      	b.n	8007094 <_strtod_l+0x1e4>
 8007100:	4638      	mov	r0, r7
 8007102:	e7d2      	b.n	80070aa <_strtod_l+0x1fa>
 8007104:	2b08      	cmp	r3, #8
 8007106:	dc04      	bgt.n	8007112 <_strtod_l+0x262>
 8007108:	9e07      	ldr	r6, [sp, #28]
 800710a:	434e      	muls	r6, r1
 800710c:	9607      	str	r6, [sp, #28]
 800710e:	3301      	adds	r3, #1
 8007110:	e7e2      	b.n	80070d8 <_strtod_l+0x228>
 8007112:	f103 0c01 	add.w	ip, r3, #1
 8007116:	f1bc 0f10 	cmp.w	ip, #16
 800711a:	bfd8      	it	le
 800711c:	fb01 f909 	mulle.w	r9, r1, r9
 8007120:	e7f5      	b.n	800710e <_strtod_l+0x25e>
 8007122:	2d10      	cmp	r5, #16
 8007124:	bfdc      	itt	le
 8007126:	230a      	movle	r3, #10
 8007128:	fb03 2909 	mlale	r9, r3, r9, r2
 800712c:	e7e1      	b.n	80070f2 <_strtod_l+0x242>
 800712e:	2300      	movs	r3, #0
 8007130:	9305      	str	r3, [sp, #20]
 8007132:	2301      	movs	r3, #1
 8007134:	e77c      	b.n	8007030 <_strtod_l+0x180>
 8007136:	f04f 0c00 	mov.w	ip, #0
 800713a:	f108 0202 	add.w	r2, r8, #2
 800713e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007140:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007144:	e785      	b.n	8007052 <_strtod_l+0x1a2>
 8007146:	f04f 0c01 	mov.w	ip, #1
 800714a:	e7f6      	b.n	800713a <_strtod_l+0x28a>
 800714c:	0800b194 	.word	0x0800b194
 8007150:	0800aee8 	.word	0x0800aee8
 8007154:	7ff00000 	.word	0x7ff00000
 8007158:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800715a:	1c51      	adds	r1, r2, #1
 800715c:	9117      	str	r1, [sp, #92]	; 0x5c
 800715e:	7852      	ldrb	r2, [r2, #1]
 8007160:	2a30      	cmp	r2, #48	; 0x30
 8007162:	d0f9      	beq.n	8007158 <_strtod_l+0x2a8>
 8007164:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007168:	2908      	cmp	r1, #8
 800716a:	f63f af79 	bhi.w	8007060 <_strtod_l+0x1b0>
 800716e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007172:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007174:	9206      	str	r2, [sp, #24]
 8007176:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007178:	1c51      	adds	r1, r2, #1
 800717a:	9117      	str	r1, [sp, #92]	; 0x5c
 800717c:	7852      	ldrb	r2, [r2, #1]
 800717e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007182:	2e09      	cmp	r6, #9
 8007184:	d937      	bls.n	80071f6 <_strtod_l+0x346>
 8007186:	9e06      	ldr	r6, [sp, #24]
 8007188:	1b89      	subs	r1, r1, r6
 800718a:	2908      	cmp	r1, #8
 800718c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007190:	dc02      	bgt.n	8007198 <_strtod_l+0x2e8>
 8007192:	4576      	cmp	r6, lr
 8007194:	bfa8      	it	ge
 8007196:	4676      	movge	r6, lr
 8007198:	f1bc 0f00 	cmp.w	ip, #0
 800719c:	d000      	beq.n	80071a0 <_strtod_l+0x2f0>
 800719e:	4276      	negs	r6, r6
 80071a0:	2d00      	cmp	r5, #0
 80071a2:	d14d      	bne.n	8007240 <_strtod_l+0x390>
 80071a4:	9904      	ldr	r1, [sp, #16]
 80071a6:	4301      	orrs	r1, r0
 80071a8:	f47f aec6 	bne.w	8006f38 <_strtod_l+0x88>
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f47f aee1 	bne.w	8006f74 <_strtod_l+0xc4>
 80071b2:	2a69      	cmp	r2, #105	; 0x69
 80071b4:	d027      	beq.n	8007206 <_strtod_l+0x356>
 80071b6:	dc24      	bgt.n	8007202 <_strtod_l+0x352>
 80071b8:	2a49      	cmp	r2, #73	; 0x49
 80071ba:	d024      	beq.n	8007206 <_strtod_l+0x356>
 80071bc:	2a4e      	cmp	r2, #78	; 0x4e
 80071be:	f47f aed9 	bne.w	8006f74 <_strtod_l+0xc4>
 80071c2:	499f      	ldr	r1, [pc, #636]	; (8007440 <_strtod_l+0x590>)
 80071c4:	a817      	add	r0, sp, #92	; 0x5c
 80071c6:	f002 f8b3 	bl	8009330 <__match>
 80071ca:	2800      	cmp	r0, #0
 80071cc:	f43f aed2 	beq.w	8006f74 <_strtod_l+0xc4>
 80071d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	2b28      	cmp	r3, #40	; 0x28
 80071d6:	d12d      	bne.n	8007234 <_strtod_l+0x384>
 80071d8:	499a      	ldr	r1, [pc, #616]	; (8007444 <_strtod_l+0x594>)
 80071da:	aa1a      	add	r2, sp, #104	; 0x68
 80071dc:	a817      	add	r0, sp, #92	; 0x5c
 80071de:	f002 f8bb 	bl	8009358 <__hexnan>
 80071e2:	2805      	cmp	r0, #5
 80071e4:	d126      	bne.n	8007234 <_strtod_l+0x384>
 80071e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80071e8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80071ec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80071f0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80071f4:	e6a0      	b.n	8006f38 <_strtod_l+0x88>
 80071f6:	210a      	movs	r1, #10
 80071f8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80071fc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007200:	e7b9      	b.n	8007176 <_strtod_l+0x2c6>
 8007202:	2a6e      	cmp	r2, #110	; 0x6e
 8007204:	e7db      	b.n	80071be <_strtod_l+0x30e>
 8007206:	4990      	ldr	r1, [pc, #576]	; (8007448 <_strtod_l+0x598>)
 8007208:	a817      	add	r0, sp, #92	; 0x5c
 800720a:	f002 f891 	bl	8009330 <__match>
 800720e:	2800      	cmp	r0, #0
 8007210:	f43f aeb0 	beq.w	8006f74 <_strtod_l+0xc4>
 8007214:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007216:	498d      	ldr	r1, [pc, #564]	; (800744c <_strtod_l+0x59c>)
 8007218:	3b01      	subs	r3, #1
 800721a:	a817      	add	r0, sp, #92	; 0x5c
 800721c:	9317      	str	r3, [sp, #92]	; 0x5c
 800721e:	f002 f887 	bl	8009330 <__match>
 8007222:	b910      	cbnz	r0, 800722a <_strtod_l+0x37a>
 8007224:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007226:	3301      	adds	r3, #1
 8007228:	9317      	str	r3, [sp, #92]	; 0x5c
 800722a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800745c <_strtod_l+0x5ac>
 800722e:	f04f 0a00 	mov.w	sl, #0
 8007232:	e681      	b.n	8006f38 <_strtod_l+0x88>
 8007234:	4886      	ldr	r0, [pc, #536]	; (8007450 <_strtod_l+0x5a0>)
 8007236:	f003 fa1f 	bl	800a678 <nan>
 800723a:	ec5b ab10 	vmov	sl, fp, d0
 800723e:	e67b      	b.n	8006f38 <_strtod_l+0x88>
 8007240:	9b05      	ldr	r3, [sp, #20]
 8007242:	9807      	ldr	r0, [sp, #28]
 8007244:	1af3      	subs	r3, r6, r3
 8007246:	2f00      	cmp	r7, #0
 8007248:	bf08      	it	eq
 800724a:	462f      	moveq	r7, r5
 800724c:	2d10      	cmp	r5, #16
 800724e:	9306      	str	r3, [sp, #24]
 8007250:	46a8      	mov	r8, r5
 8007252:	bfa8      	it	ge
 8007254:	f04f 0810 	movge.w	r8, #16
 8007258:	f7f9 f964 	bl	8000524 <__aeabi_ui2d>
 800725c:	2d09      	cmp	r5, #9
 800725e:	4682      	mov	sl, r0
 8007260:	468b      	mov	fp, r1
 8007262:	dd13      	ble.n	800728c <_strtod_l+0x3dc>
 8007264:	4b7b      	ldr	r3, [pc, #492]	; (8007454 <_strtod_l+0x5a4>)
 8007266:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800726a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800726e:	f7f9 f9d3 	bl	8000618 <__aeabi_dmul>
 8007272:	4682      	mov	sl, r0
 8007274:	4648      	mov	r0, r9
 8007276:	468b      	mov	fp, r1
 8007278:	f7f9 f954 	bl	8000524 <__aeabi_ui2d>
 800727c:	4602      	mov	r2, r0
 800727e:	460b      	mov	r3, r1
 8007280:	4650      	mov	r0, sl
 8007282:	4659      	mov	r1, fp
 8007284:	f7f9 f812 	bl	80002ac <__adddf3>
 8007288:	4682      	mov	sl, r0
 800728a:	468b      	mov	fp, r1
 800728c:	2d0f      	cmp	r5, #15
 800728e:	dc38      	bgt.n	8007302 <_strtod_l+0x452>
 8007290:	9b06      	ldr	r3, [sp, #24]
 8007292:	2b00      	cmp	r3, #0
 8007294:	f43f ae50 	beq.w	8006f38 <_strtod_l+0x88>
 8007298:	dd24      	ble.n	80072e4 <_strtod_l+0x434>
 800729a:	2b16      	cmp	r3, #22
 800729c:	dc0b      	bgt.n	80072b6 <_strtod_l+0x406>
 800729e:	496d      	ldr	r1, [pc, #436]	; (8007454 <_strtod_l+0x5a4>)
 80072a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80072a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072a8:	4652      	mov	r2, sl
 80072aa:	465b      	mov	r3, fp
 80072ac:	f7f9 f9b4 	bl	8000618 <__aeabi_dmul>
 80072b0:	4682      	mov	sl, r0
 80072b2:	468b      	mov	fp, r1
 80072b4:	e640      	b.n	8006f38 <_strtod_l+0x88>
 80072b6:	9a06      	ldr	r2, [sp, #24]
 80072b8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80072bc:	4293      	cmp	r3, r2
 80072be:	db20      	blt.n	8007302 <_strtod_l+0x452>
 80072c0:	4c64      	ldr	r4, [pc, #400]	; (8007454 <_strtod_l+0x5a4>)
 80072c2:	f1c5 050f 	rsb	r5, r5, #15
 80072c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80072ca:	4652      	mov	r2, sl
 80072cc:	465b      	mov	r3, fp
 80072ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072d2:	f7f9 f9a1 	bl	8000618 <__aeabi_dmul>
 80072d6:	9b06      	ldr	r3, [sp, #24]
 80072d8:	1b5d      	subs	r5, r3, r5
 80072da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80072de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80072e2:	e7e3      	b.n	80072ac <_strtod_l+0x3fc>
 80072e4:	9b06      	ldr	r3, [sp, #24]
 80072e6:	3316      	adds	r3, #22
 80072e8:	db0b      	blt.n	8007302 <_strtod_l+0x452>
 80072ea:	9b05      	ldr	r3, [sp, #20]
 80072ec:	1b9e      	subs	r6, r3, r6
 80072ee:	4b59      	ldr	r3, [pc, #356]	; (8007454 <_strtod_l+0x5a4>)
 80072f0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80072f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80072f8:	4650      	mov	r0, sl
 80072fa:	4659      	mov	r1, fp
 80072fc:	f7f9 fab6 	bl	800086c <__aeabi_ddiv>
 8007300:	e7d6      	b.n	80072b0 <_strtod_l+0x400>
 8007302:	9b06      	ldr	r3, [sp, #24]
 8007304:	eba5 0808 	sub.w	r8, r5, r8
 8007308:	4498      	add	r8, r3
 800730a:	f1b8 0f00 	cmp.w	r8, #0
 800730e:	dd74      	ble.n	80073fa <_strtod_l+0x54a>
 8007310:	f018 030f 	ands.w	r3, r8, #15
 8007314:	d00a      	beq.n	800732c <_strtod_l+0x47c>
 8007316:	494f      	ldr	r1, [pc, #316]	; (8007454 <_strtod_l+0x5a4>)
 8007318:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800731c:	4652      	mov	r2, sl
 800731e:	465b      	mov	r3, fp
 8007320:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007324:	f7f9 f978 	bl	8000618 <__aeabi_dmul>
 8007328:	4682      	mov	sl, r0
 800732a:	468b      	mov	fp, r1
 800732c:	f038 080f 	bics.w	r8, r8, #15
 8007330:	d04f      	beq.n	80073d2 <_strtod_l+0x522>
 8007332:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007336:	dd22      	ble.n	800737e <_strtod_l+0x4ce>
 8007338:	2500      	movs	r5, #0
 800733a:	462e      	mov	r6, r5
 800733c:	9507      	str	r5, [sp, #28]
 800733e:	9505      	str	r5, [sp, #20]
 8007340:	2322      	movs	r3, #34	; 0x22
 8007342:	f8df b118 	ldr.w	fp, [pc, #280]	; 800745c <_strtod_l+0x5ac>
 8007346:	6023      	str	r3, [r4, #0]
 8007348:	f04f 0a00 	mov.w	sl, #0
 800734c:	9b07      	ldr	r3, [sp, #28]
 800734e:	2b00      	cmp	r3, #0
 8007350:	f43f adf2 	beq.w	8006f38 <_strtod_l+0x88>
 8007354:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007356:	4620      	mov	r0, r4
 8007358:	f002 f960 	bl	800961c <_Bfree>
 800735c:	9905      	ldr	r1, [sp, #20]
 800735e:	4620      	mov	r0, r4
 8007360:	f002 f95c 	bl	800961c <_Bfree>
 8007364:	4631      	mov	r1, r6
 8007366:	4620      	mov	r0, r4
 8007368:	f002 f958 	bl	800961c <_Bfree>
 800736c:	9907      	ldr	r1, [sp, #28]
 800736e:	4620      	mov	r0, r4
 8007370:	f002 f954 	bl	800961c <_Bfree>
 8007374:	4629      	mov	r1, r5
 8007376:	4620      	mov	r0, r4
 8007378:	f002 f950 	bl	800961c <_Bfree>
 800737c:	e5dc      	b.n	8006f38 <_strtod_l+0x88>
 800737e:	4b36      	ldr	r3, [pc, #216]	; (8007458 <_strtod_l+0x5a8>)
 8007380:	9304      	str	r3, [sp, #16]
 8007382:	2300      	movs	r3, #0
 8007384:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007388:	4650      	mov	r0, sl
 800738a:	4659      	mov	r1, fp
 800738c:	4699      	mov	r9, r3
 800738e:	f1b8 0f01 	cmp.w	r8, #1
 8007392:	dc21      	bgt.n	80073d8 <_strtod_l+0x528>
 8007394:	b10b      	cbz	r3, 800739a <_strtod_l+0x4ea>
 8007396:	4682      	mov	sl, r0
 8007398:	468b      	mov	fp, r1
 800739a:	4b2f      	ldr	r3, [pc, #188]	; (8007458 <_strtod_l+0x5a8>)
 800739c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80073a0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80073a4:	4652      	mov	r2, sl
 80073a6:	465b      	mov	r3, fp
 80073a8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80073ac:	f7f9 f934 	bl	8000618 <__aeabi_dmul>
 80073b0:	4b2a      	ldr	r3, [pc, #168]	; (800745c <_strtod_l+0x5ac>)
 80073b2:	460a      	mov	r2, r1
 80073b4:	400b      	ands	r3, r1
 80073b6:	492a      	ldr	r1, [pc, #168]	; (8007460 <_strtod_l+0x5b0>)
 80073b8:	428b      	cmp	r3, r1
 80073ba:	4682      	mov	sl, r0
 80073bc:	d8bc      	bhi.n	8007338 <_strtod_l+0x488>
 80073be:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80073c2:	428b      	cmp	r3, r1
 80073c4:	bf86      	itte	hi
 80073c6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007464 <_strtod_l+0x5b4>
 80073ca:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80073ce:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80073d2:	2300      	movs	r3, #0
 80073d4:	9304      	str	r3, [sp, #16]
 80073d6:	e084      	b.n	80074e2 <_strtod_l+0x632>
 80073d8:	f018 0f01 	tst.w	r8, #1
 80073dc:	d005      	beq.n	80073ea <_strtod_l+0x53a>
 80073de:	9b04      	ldr	r3, [sp, #16]
 80073e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e4:	f7f9 f918 	bl	8000618 <__aeabi_dmul>
 80073e8:	2301      	movs	r3, #1
 80073ea:	9a04      	ldr	r2, [sp, #16]
 80073ec:	3208      	adds	r2, #8
 80073ee:	f109 0901 	add.w	r9, r9, #1
 80073f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80073f6:	9204      	str	r2, [sp, #16]
 80073f8:	e7c9      	b.n	800738e <_strtod_l+0x4de>
 80073fa:	d0ea      	beq.n	80073d2 <_strtod_l+0x522>
 80073fc:	f1c8 0800 	rsb	r8, r8, #0
 8007400:	f018 020f 	ands.w	r2, r8, #15
 8007404:	d00a      	beq.n	800741c <_strtod_l+0x56c>
 8007406:	4b13      	ldr	r3, [pc, #76]	; (8007454 <_strtod_l+0x5a4>)
 8007408:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800740c:	4650      	mov	r0, sl
 800740e:	4659      	mov	r1, fp
 8007410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007414:	f7f9 fa2a 	bl	800086c <__aeabi_ddiv>
 8007418:	4682      	mov	sl, r0
 800741a:	468b      	mov	fp, r1
 800741c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007420:	d0d7      	beq.n	80073d2 <_strtod_l+0x522>
 8007422:	f1b8 0f1f 	cmp.w	r8, #31
 8007426:	dd1f      	ble.n	8007468 <_strtod_l+0x5b8>
 8007428:	2500      	movs	r5, #0
 800742a:	462e      	mov	r6, r5
 800742c:	9507      	str	r5, [sp, #28]
 800742e:	9505      	str	r5, [sp, #20]
 8007430:	2322      	movs	r3, #34	; 0x22
 8007432:	f04f 0a00 	mov.w	sl, #0
 8007436:	f04f 0b00 	mov.w	fp, #0
 800743a:	6023      	str	r3, [r4, #0]
 800743c:	e786      	b.n	800734c <_strtod_l+0x49c>
 800743e:	bf00      	nop
 8007440:	0800aeb9 	.word	0x0800aeb9
 8007444:	0800aefc 	.word	0x0800aefc
 8007448:	0800aeb1 	.word	0x0800aeb1
 800744c:	0800b03c 	.word	0x0800b03c
 8007450:	0800b350 	.word	0x0800b350
 8007454:	0800b230 	.word	0x0800b230
 8007458:	0800b208 	.word	0x0800b208
 800745c:	7ff00000 	.word	0x7ff00000
 8007460:	7ca00000 	.word	0x7ca00000
 8007464:	7fefffff 	.word	0x7fefffff
 8007468:	f018 0310 	ands.w	r3, r8, #16
 800746c:	bf18      	it	ne
 800746e:	236a      	movne	r3, #106	; 0x6a
 8007470:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007820 <_strtod_l+0x970>
 8007474:	9304      	str	r3, [sp, #16]
 8007476:	4650      	mov	r0, sl
 8007478:	4659      	mov	r1, fp
 800747a:	2300      	movs	r3, #0
 800747c:	f018 0f01 	tst.w	r8, #1
 8007480:	d004      	beq.n	800748c <_strtod_l+0x5dc>
 8007482:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007486:	f7f9 f8c7 	bl	8000618 <__aeabi_dmul>
 800748a:	2301      	movs	r3, #1
 800748c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007490:	f109 0908 	add.w	r9, r9, #8
 8007494:	d1f2      	bne.n	800747c <_strtod_l+0x5cc>
 8007496:	b10b      	cbz	r3, 800749c <_strtod_l+0x5ec>
 8007498:	4682      	mov	sl, r0
 800749a:	468b      	mov	fp, r1
 800749c:	9b04      	ldr	r3, [sp, #16]
 800749e:	b1c3      	cbz	r3, 80074d2 <_strtod_l+0x622>
 80074a0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80074a4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	4659      	mov	r1, fp
 80074ac:	dd11      	ble.n	80074d2 <_strtod_l+0x622>
 80074ae:	2b1f      	cmp	r3, #31
 80074b0:	f340 8124 	ble.w	80076fc <_strtod_l+0x84c>
 80074b4:	2b34      	cmp	r3, #52	; 0x34
 80074b6:	bfde      	ittt	le
 80074b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80074bc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80074c0:	fa03 f202 	lslle.w	r2, r3, r2
 80074c4:	f04f 0a00 	mov.w	sl, #0
 80074c8:	bfcc      	ite	gt
 80074ca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80074ce:	ea02 0b01 	andle.w	fp, r2, r1
 80074d2:	2200      	movs	r2, #0
 80074d4:	2300      	movs	r3, #0
 80074d6:	4650      	mov	r0, sl
 80074d8:	4659      	mov	r1, fp
 80074da:	f7f9 fb05 	bl	8000ae8 <__aeabi_dcmpeq>
 80074de:	2800      	cmp	r0, #0
 80074e0:	d1a2      	bne.n	8007428 <_strtod_l+0x578>
 80074e2:	9b07      	ldr	r3, [sp, #28]
 80074e4:	9300      	str	r3, [sp, #0]
 80074e6:	9908      	ldr	r1, [sp, #32]
 80074e8:	462b      	mov	r3, r5
 80074ea:	463a      	mov	r2, r7
 80074ec:	4620      	mov	r0, r4
 80074ee:	f002 f8fd 	bl	80096ec <__s2b>
 80074f2:	9007      	str	r0, [sp, #28]
 80074f4:	2800      	cmp	r0, #0
 80074f6:	f43f af1f 	beq.w	8007338 <_strtod_l+0x488>
 80074fa:	9b05      	ldr	r3, [sp, #20]
 80074fc:	1b9e      	subs	r6, r3, r6
 80074fe:	9b06      	ldr	r3, [sp, #24]
 8007500:	2b00      	cmp	r3, #0
 8007502:	bfb4      	ite	lt
 8007504:	4633      	movlt	r3, r6
 8007506:	2300      	movge	r3, #0
 8007508:	930c      	str	r3, [sp, #48]	; 0x30
 800750a:	9b06      	ldr	r3, [sp, #24]
 800750c:	2500      	movs	r5, #0
 800750e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007512:	9312      	str	r3, [sp, #72]	; 0x48
 8007514:	462e      	mov	r6, r5
 8007516:	9b07      	ldr	r3, [sp, #28]
 8007518:	4620      	mov	r0, r4
 800751a:	6859      	ldr	r1, [r3, #4]
 800751c:	f002 f83e 	bl	800959c <_Balloc>
 8007520:	9005      	str	r0, [sp, #20]
 8007522:	2800      	cmp	r0, #0
 8007524:	f43f af0c 	beq.w	8007340 <_strtod_l+0x490>
 8007528:	9b07      	ldr	r3, [sp, #28]
 800752a:	691a      	ldr	r2, [r3, #16]
 800752c:	3202      	adds	r2, #2
 800752e:	f103 010c 	add.w	r1, r3, #12
 8007532:	0092      	lsls	r2, r2, #2
 8007534:	300c      	adds	r0, #12
 8007536:	f7fe fd35 	bl	8005fa4 <memcpy>
 800753a:	ec4b ab10 	vmov	d0, sl, fp
 800753e:	aa1a      	add	r2, sp, #104	; 0x68
 8007540:	a919      	add	r1, sp, #100	; 0x64
 8007542:	4620      	mov	r0, r4
 8007544:	f002 fc18 	bl	8009d78 <__d2b>
 8007548:	ec4b ab18 	vmov	d8, sl, fp
 800754c:	9018      	str	r0, [sp, #96]	; 0x60
 800754e:	2800      	cmp	r0, #0
 8007550:	f43f aef6 	beq.w	8007340 <_strtod_l+0x490>
 8007554:	2101      	movs	r1, #1
 8007556:	4620      	mov	r0, r4
 8007558:	f002 f962 	bl	8009820 <__i2b>
 800755c:	4606      	mov	r6, r0
 800755e:	2800      	cmp	r0, #0
 8007560:	f43f aeee 	beq.w	8007340 <_strtod_l+0x490>
 8007564:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007566:	9904      	ldr	r1, [sp, #16]
 8007568:	2b00      	cmp	r3, #0
 800756a:	bfab      	itete	ge
 800756c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800756e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007570:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007572:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007576:	bfac      	ite	ge
 8007578:	eb03 0902 	addge.w	r9, r3, r2
 800757c:	1ad7      	sublt	r7, r2, r3
 800757e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007580:	eba3 0801 	sub.w	r8, r3, r1
 8007584:	4490      	add	r8, r2
 8007586:	4ba1      	ldr	r3, [pc, #644]	; (800780c <_strtod_l+0x95c>)
 8007588:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800758c:	4598      	cmp	r8, r3
 800758e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007592:	f280 80c7 	bge.w	8007724 <_strtod_l+0x874>
 8007596:	eba3 0308 	sub.w	r3, r3, r8
 800759a:	2b1f      	cmp	r3, #31
 800759c:	eba2 0203 	sub.w	r2, r2, r3
 80075a0:	f04f 0101 	mov.w	r1, #1
 80075a4:	f300 80b1 	bgt.w	800770a <_strtod_l+0x85a>
 80075a8:	fa01 f303 	lsl.w	r3, r1, r3
 80075ac:	930d      	str	r3, [sp, #52]	; 0x34
 80075ae:	2300      	movs	r3, #0
 80075b0:	9308      	str	r3, [sp, #32]
 80075b2:	eb09 0802 	add.w	r8, r9, r2
 80075b6:	9b04      	ldr	r3, [sp, #16]
 80075b8:	45c1      	cmp	r9, r8
 80075ba:	4417      	add	r7, r2
 80075bc:	441f      	add	r7, r3
 80075be:	464b      	mov	r3, r9
 80075c0:	bfa8      	it	ge
 80075c2:	4643      	movge	r3, r8
 80075c4:	42bb      	cmp	r3, r7
 80075c6:	bfa8      	it	ge
 80075c8:	463b      	movge	r3, r7
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	bfc2      	ittt	gt
 80075ce:	eba8 0803 	subgt.w	r8, r8, r3
 80075d2:	1aff      	subgt	r7, r7, r3
 80075d4:	eba9 0903 	subgt.w	r9, r9, r3
 80075d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075da:	2b00      	cmp	r3, #0
 80075dc:	dd17      	ble.n	800760e <_strtod_l+0x75e>
 80075de:	4631      	mov	r1, r6
 80075e0:	461a      	mov	r2, r3
 80075e2:	4620      	mov	r0, r4
 80075e4:	f002 f9dc 	bl	80099a0 <__pow5mult>
 80075e8:	4606      	mov	r6, r0
 80075ea:	2800      	cmp	r0, #0
 80075ec:	f43f aea8 	beq.w	8007340 <_strtod_l+0x490>
 80075f0:	4601      	mov	r1, r0
 80075f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80075f4:	4620      	mov	r0, r4
 80075f6:	f002 f929 	bl	800984c <__multiply>
 80075fa:	900b      	str	r0, [sp, #44]	; 0x2c
 80075fc:	2800      	cmp	r0, #0
 80075fe:	f43f ae9f 	beq.w	8007340 <_strtod_l+0x490>
 8007602:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007604:	4620      	mov	r0, r4
 8007606:	f002 f809 	bl	800961c <_Bfree>
 800760a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800760c:	9318      	str	r3, [sp, #96]	; 0x60
 800760e:	f1b8 0f00 	cmp.w	r8, #0
 8007612:	f300 808c 	bgt.w	800772e <_strtod_l+0x87e>
 8007616:	9b06      	ldr	r3, [sp, #24]
 8007618:	2b00      	cmp	r3, #0
 800761a:	dd08      	ble.n	800762e <_strtod_l+0x77e>
 800761c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800761e:	9905      	ldr	r1, [sp, #20]
 8007620:	4620      	mov	r0, r4
 8007622:	f002 f9bd 	bl	80099a0 <__pow5mult>
 8007626:	9005      	str	r0, [sp, #20]
 8007628:	2800      	cmp	r0, #0
 800762a:	f43f ae89 	beq.w	8007340 <_strtod_l+0x490>
 800762e:	2f00      	cmp	r7, #0
 8007630:	dd08      	ble.n	8007644 <_strtod_l+0x794>
 8007632:	9905      	ldr	r1, [sp, #20]
 8007634:	463a      	mov	r2, r7
 8007636:	4620      	mov	r0, r4
 8007638:	f002 fa0c 	bl	8009a54 <__lshift>
 800763c:	9005      	str	r0, [sp, #20]
 800763e:	2800      	cmp	r0, #0
 8007640:	f43f ae7e 	beq.w	8007340 <_strtod_l+0x490>
 8007644:	f1b9 0f00 	cmp.w	r9, #0
 8007648:	dd08      	ble.n	800765c <_strtod_l+0x7ac>
 800764a:	4631      	mov	r1, r6
 800764c:	464a      	mov	r2, r9
 800764e:	4620      	mov	r0, r4
 8007650:	f002 fa00 	bl	8009a54 <__lshift>
 8007654:	4606      	mov	r6, r0
 8007656:	2800      	cmp	r0, #0
 8007658:	f43f ae72 	beq.w	8007340 <_strtod_l+0x490>
 800765c:	9a05      	ldr	r2, [sp, #20]
 800765e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007660:	4620      	mov	r0, r4
 8007662:	f002 fa83 	bl	8009b6c <__mdiff>
 8007666:	4605      	mov	r5, r0
 8007668:	2800      	cmp	r0, #0
 800766a:	f43f ae69 	beq.w	8007340 <_strtod_l+0x490>
 800766e:	68c3      	ldr	r3, [r0, #12]
 8007670:	930b      	str	r3, [sp, #44]	; 0x2c
 8007672:	2300      	movs	r3, #0
 8007674:	60c3      	str	r3, [r0, #12]
 8007676:	4631      	mov	r1, r6
 8007678:	f002 fa5c 	bl	8009b34 <__mcmp>
 800767c:	2800      	cmp	r0, #0
 800767e:	da60      	bge.n	8007742 <_strtod_l+0x892>
 8007680:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007682:	ea53 030a 	orrs.w	r3, r3, sl
 8007686:	f040 8082 	bne.w	800778e <_strtod_l+0x8de>
 800768a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800768e:	2b00      	cmp	r3, #0
 8007690:	d17d      	bne.n	800778e <_strtod_l+0x8de>
 8007692:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007696:	0d1b      	lsrs	r3, r3, #20
 8007698:	051b      	lsls	r3, r3, #20
 800769a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800769e:	d976      	bls.n	800778e <_strtod_l+0x8de>
 80076a0:	696b      	ldr	r3, [r5, #20]
 80076a2:	b913      	cbnz	r3, 80076aa <_strtod_l+0x7fa>
 80076a4:	692b      	ldr	r3, [r5, #16]
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	dd71      	ble.n	800778e <_strtod_l+0x8de>
 80076aa:	4629      	mov	r1, r5
 80076ac:	2201      	movs	r2, #1
 80076ae:	4620      	mov	r0, r4
 80076b0:	f002 f9d0 	bl	8009a54 <__lshift>
 80076b4:	4631      	mov	r1, r6
 80076b6:	4605      	mov	r5, r0
 80076b8:	f002 fa3c 	bl	8009b34 <__mcmp>
 80076bc:	2800      	cmp	r0, #0
 80076be:	dd66      	ble.n	800778e <_strtod_l+0x8de>
 80076c0:	9904      	ldr	r1, [sp, #16]
 80076c2:	4a53      	ldr	r2, [pc, #332]	; (8007810 <_strtod_l+0x960>)
 80076c4:	465b      	mov	r3, fp
 80076c6:	2900      	cmp	r1, #0
 80076c8:	f000 8081 	beq.w	80077ce <_strtod_l+0x91e>
 80076cc:	ea02 010b 	and.w	r1, r2, fp
 80076d0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80076d4:	dc7b      	bgt.n	80077ce <_strtod_l+0x91e>
 80076d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80076da:	f77f aea9 	ble.w	8007430 <_strtod_l+0x580>
 80076de:	4b4d      	ldr	r3, [pc, #308]	; (8007814 <_strtod_l+0x964>)
 80076e0:	4650      	mov	r0, sl
 80076e2:	4659      	mov	r1, fp
 80076e4:	2200      	movs	r2, #0
 80076e6:	f7f8 ff97 	bl	8000618 <__aeabi_dmul>
 80076ea:	460b      	mov	r3, r1
 80076ec:	4303      	orrs	r3, r0
 80076ee:	bf08      	it	eq
 80076f0:	2322      	moveq	r3, #34	; 0x22
 80076f2:	4682      	mov	sl, r0
 80076f4:	468b      	mov	fp, r1
 80076f6:	bf08      	it	eq
 80076f8:	6023      	streq	r3, [r4, #0]
 80076fa:	e62b      	b.n	8007354 <_strtod_l+0x4a4>
 80076fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007700:	fa02 f303 	lsl.w	r3, r2, r3
 8007704:	ea03 0a0a 	and.w	sl, r3, sl
 8007708:	e6e3      	b.n	80074d2 <_strtod_l+0x622>
 800770a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800770e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007712:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007716:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800771a:	fa01 f308 	lsl.w	r3, r1, r8
 800771e:	9308      	str	r3, [sp, #32]
 8007720:	910d      	str	r1, [sp, #52]	; 0x34
 8007722:	e746      	b.n	80075b2 <_strtod_l+0x702>
 8007724:	2300      	movs	r3, #0
 8007726:	9308      	str	r3, [sp, #32]
 8007728:	2301      	movs	r3, #1
 800772a:	930d      	str	r3, [sp, #52]	; 0x34
 800772c:	e741      	b.n	80075b2 <_strtod_l+0x702>
 800772e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007730:	4642      	mov	r2, r8
 8007732:	4620      	mov	r0, r4
 8007734:	f002 f98e 	bl	8009a54 <__lshift>
 8007738:	9018      	str	r0, [sp, #96]	; 0x60
 800773a:	2800      	cmp	r0, #0
 800773c:	f47f af6b 	bne.w	8007616 <_strtod_l+0x766>
 8007740:	e5fe      	b.n	8007340 <_strtod_l+0x490>
 8007742:	465f      	mov	r7, fp
 8007744:	d16e      	bne.n	8007824 <_strtod_l+0x974>
 8007746:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007748:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800774c:	b342      	cbz	r2, 80077a0 <_strtod_l+0x8f0>
 800774e:	4a32      	ldr	r2, [pc, #200]	; (8007818 <_strtod_l+0x968>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d128      	bne.n	80077a6 <_strtod_l+0x8f6>
 8007754:	9b04      	ldr	r3, [sp, #16]
 8007756:	4651      	mov	r1, sl
 8007758:	b1eb      	cbz	r3, 8007796 <_strtod_l+0x8e6>
 800775a:	4b2d      	ldr	r3, [pc, #180]	; (8007810 <_strtod_l+0x960>)
 800775c:	403b      	ands	r3, r7
 800775e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007762:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007766:	d819      	bhi.n	800779c <_strtod_l+0x8ec>
 8007768:	0d1b      	lsrs	r3, r3, #20
 800776a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800776e:	fa02 f303 	lsl.w	r3, r2, r3
 8007772:	4299      	cmp	r1, r3
 8007774:	d117      	bne.n	80077a6 <_strtod_l+0x8f6>
 8007776:	4b29      	ldr	r3, [pc, #164]	; (800781c <_strtod_l+0x96c>)
 8007778:	429f      	cmp	r7, r3
 800777a:	d102      	bne.n	8007782 <_strtod_l+0x8d2>
 800777c:	3101      	adds	r1, #1
 800777e:	f43f addf 	beq.w	8007340 <_strtod_l+0x490>
 8007782:	4b23      	ldr	r3, [pc, #140]	; (8007810 <_strtod_l+0x960>)
 8007784:	403b      	ands	r3, r7
 8007786:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800778a:	f04f 0a00 	mov.w	sl, #0
 800778e:	9b04      	ldr	r3, [sp, #16]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1a4      	bne.n	80076de <_strtod_l+0x82e>
 8007794:	e5de      	b.n	8007354 <_strtod_l+0x4a4>
 8007796:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800779a:	e7ea      	b.n	8007772 <_strtod_l+0x8c2>
 800779c:	4613      	mov	r3, r2
 800779e:	e7e8      	b.n	8007772 <_strtod_l+0x8c2>
 80077a0:	ea53 030a 	orrs.w	r3, r3, sl
 80077a4:	d08c      	beq.n	80076c0 <_strtod_l+0x810>
 80077a6:	9b08      	ldr	r3, [sp, #32]
 80077a8:	b1db      	cbz	r3, 80077e2 <_strtod_l+0x932>
 80077aa:	423b      	tst	r3, r7
 80077ac:	d0ef      	beq.n	800778e <_strtod_l+0x8de>
 80077ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077b0:	9a04      	ldr	r2, [sp, #16]
 80077b2:	4650      	mov	r0, sl
 80077b4:	4659      	mov	r1, fp
 80077b6:	b1c3      	cbz	r3, 80077ea <_strtod_l+0x93a>
 80077b8:	f7ff fb5c 	bl	8006e74 <sulp>
 80077bc:	4602      	mov	r2, r0
 80077be:	460b      	mov	r3, r1
 80077c0:	ec51 0b18 	vmov	r0, r1, d8
 80077c4:	f7f8 fd72 	bl	80002ac <__adddf3>
 80077c8:	4682      	mov	sl, r0
 80077ca:	468b      	mov	fp, r1
 80077cc:	e7df      	b.n	800778e <_strtod_l+0x8de>
 80077ce:	4013      	ands	r3, r2
 80077d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80077d4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80077d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80077dc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80077e0:	e7d5      	b.n	800778e <_strtod_l+0x8de>
 80077e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077e4:	ea13 0f0a 	tst.w	r3, sl
 80077e8:	e7e0      	b.n	80077ac <_strtod_l+0x8fc>
 80077ea:	f7ff fb43 	bl	8006e74 <sulp>
 80077ee:	4602      	mov	r2, r0
 80077f0:	460b      	mov	r3, r1
 80077f2:	ec51 0b18 	vmov	r0, r1, d8
 80077f6:	f7f8 fd57 	bl	80002a8 <__aeabi_dsub>
 80077fa:	2200      	movs	r2, #0
 80077fc:	2300      	movs	r3, #0
 80077fe:	4682      	mov	sl, r0
 8007800:	468b      	mov	fp, r1
 8007802:	f7f9 f971 	bl	8000ae8 <__aeabi_dcmpeq>
 8007806:	2800      	cmp	r0, #0
 8007808:	d0c1      	beq.n	800778e <_strtod_l+0x8de>
 800780a:	e611      	b.n	8007430 <_strtod_l+0x580>
 800780c:	fffffc02 	.word	0xfffffc02
 8007810:	7ff00000 	.word	0x7ff00000
 8007814:	39500000 	.word	0x39500000
 8007818:	000fffff 	.word	0x000fffff
 800781c:	7fefffff 	.word	0x7fefffff
 8007820:	0800af10 	.word	0x0800af10
 8007824:	4631      	mov	r1, r6
 8007826:	4628      	mov	r0, r5
 8007828:	f002 fb02 	bl	8009e30 <__ratio>
 800782c:	ec59 8b10 	vmov	r8, r9, d0
 8007830:	ee10 0a10 	vmov	r0, s0
 8007834:	2200      	movs	r2, #0
 8007836:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800783a:	4649      	mov	r1, r9
 800783c:	f7f9 f968 	bl	8000b10 <__aeabi_dcmple>
 8007840:	2800      	cmp	r0, #0
 8007842:	d07a      	beq.n	800793a <_strtod_l+0xa8a>
 8007844:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007846:	2b00      	cmp	r3, #0
 8007848:	d04a      	beq.n	80078e0 <_strtod_l+0xa30>
 800784a:	4b95      	ldr	r3, [pc, #596]	; (8007aa0 <_strtod_l+0xbf0>)
 800784c:	2200      	movs	r2, #0
 800784e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007852:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007aa0 <_strtod_l+0xbf0>
 8007856:	f04f 0800 	mov.w	r8, #0
 800785a:	4b92      	ldr	r3, [pc, #584]	; (8007aa4 <_strtod_l+0xbf4>)
 800785c:	403b      	ands	r3, r7
 800785e:	930d      	str	r3, [sp, #52]	; 0x34
 8007860:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007862:	4b91      	ldr	r3, [pc, #580]	; (8007aa8 <_strtod_l+0xbf8>)
 8007864:	429a      	cmp	r2, r3
 8007866:	f040 80b0 	bne.w	80079ca <_strtod_l+0xb1a>
 800786a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800786e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007872:	ec4b ab10 	vmov	d0, sl, fp
 8007876:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800787a:	f002 fa01 	bl	8009c80 <__ulp>
 800787e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007882:	ec53 2b10 	vmov	r2, r3, d0
 8007886:	f7f8 fec7 	bl	8000618 <__aeabi_dmul>
 800788a:	4652      	mov	r2, sl
 800788c:	465b      	mov	r3, fp
 800788e:	f7f8 fd0d 	bl	80002ac <__adddf3>
 8007892:	460b      	mov	r3, r1
 8007894:	4983      	ldr	r1, [pc, #524]	; (8007aa4 <_strtod_l+0xbf4>)
 8007896:	4a85      	ldr	r2, [pc, #532]	; (8007aac <_strtod_l+0xbfc>)
 8007898:	4019      	ands	r1, r3
 800789a:	4291      	cmp	r1, r2
 800789c:	4682      	mov	sl, r0
 800789e:	d960      	bls.n	8007962 <_strtod_l+0xab2>
 80078a0:	ee18 3a90 	vmov	r3, s17
 80078a4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d104      	bne.n	80078b6 <_strtod_l+0xa06>
 80078ac:	ee18 3a10 	vmov	r3, s16
 80078b0:	3301      	adds	r3, #1
 80078b2:	f43f ad45 	beq.w	8007340 <_strtod_l+0x490>
 80078b6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007ab8 <_strtod_l+0xc08>
 80078ba:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80078be:	9918      	ldr	r1, [sp, #96]	; 0x60
 80078c0:	4620      	mov	r0, r4
 80078c2:	f001 feab 	bl	800961c <_Bfree>
 80078c6:	9905      	ldr	r1, [sp, #20]
 80078c8:	4620      	mov	r0, r4
 80078ca:	f001 fea7 	bl	800961c <_Bfree>
 80078ce:	4631      	mov	r1, r6
 80078d0:	4620      	mov	r0, r4
 80078d2:	f001 fea3 	bl	800961c <_Bfree>
 80078d6:	4629      	mov	r1, r5
 80078d8:	4620      	mov	r0, r4
 80078da:	f001 fe9f 	bl	800961c <_Bfree>
 80078de:	e61a      	b.n	8007516 <_strtod_l+0x666>
 80078e0:	f1ba 0f00 	cmp.w	sl, #0
 80078e4:	d11b      	bne.n	800791e <_strtod_l+0xa6e>
 80078e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078ea:	b9f3      	cbnz	r3, 800792a <_strtod_l+0xa7a>
 80078ec:	4b6c      	ldr	r3, [pc, #432]	; (8007aa0 <_strtod_l+0xbf0>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	4640      	mov	r0, r8
 80078f2:	4649      	mov	r1, r9
 80078f4:	f7f9 f902 	bl	8000afc <__aeabi_dcmplt>
 80078f8:	b9d0      	cbnz	r0, 8007930 <_strtod_l+0xa80>
 80078fa:	4640      	mov	r0, r8
 80078fc:	4649      	mov	r1, r9
 80078fe:	4b6c      	ldr	r3, [pc, #432]	; (8007ab0 <_strtod_l+0xc00>)
 8007900:	2200      	movs	r2, #0
 8007902:	f7f8 fe89 	bl	8000618 <__aeabi_dmul>
 8007906:	4680      	mov	r8, r0
 8007908:	4689      	mov	r9, r1
 800790a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800790e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007912:	9315      	str	r3, [sp, #84]	; 0x54
 8007914:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007918:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800791c:	e79d      	b.n	800785a <_strtod_l+0x9aa>
 800791e:	f1ba 0f01 	cmp.w	sl, #1
 8007922:	d102      	bne.n	800792a <_strtod_l+0xa7a>
 8007924:	2f00      	cmp	r7, #0
 8007926:	f43f ad83 	beq.w	8007430 <_strtod_l+0x580>
 800792a:	4b62      	ldr	r3, [pc, #392]	; (8007ab4 <_strtod_l+0xc04>)
 800792c:	2200      	movs	r2, #0
 800792e:	e78e      	b.n	800784e <_strtod_l+0x99e>
 8007930:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007ab0 <_strtod_l+0xc00>
 8007934:	f04f 0800 	mov.w	r8, #0
 8007938:	e7e7      	b.n	800790a <_strtod_l+0xa5a>
 800793a:	4b5d      	ldr	r3, [pc, #372]	; (8007ab0 <_strtod_l+0xc00>)
 800793c:	4640      	mov	r0, r8
 800793e:	4649      	mov	r1, r9
 8007940:	2200      	movs	r2, #0
 8007942:	f7f8 fe69 	bl	8000618 <__aeabi_dmul>
 8007946:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007948:	4680      	mov	r8, r0
 800794a:	4689      	mov	r9, r1
 800794c:	b933      	cbnz	r3, 800795c <_strtod_l+0xaac>
 800794e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007952:	900e      	str	r0, [sp, #56]	; 0x38
 8007954:	930f      	str	r3, [sp, #60]	; 0x3c
 8007956:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800795a:	e7dd      	b.n	8007918 <_strtod_l+0xa68>
 800795c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007960:	e7f9      	b.n	8007956 <_strtod_l+0xaa6>
 8007962:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007966:	9b04      	ldr	r3, [sp, #16]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d1a8      	bne.n	80078be <_strtod_l+0xa0e>
 800796c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007970:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007972:	0d1b      	lsrs	r3, r3, #20
 8007974:	051b      	lsls	r3, r3, #20
 8007976:	429a      	cmp	r2, r3
 8007978:	d1a1      	bne.n	80078be <_strtod_l+0xa0e>
 800797a:	4640      	mov	r0, r8
 800797c:	4649      	mov	r1, r9
 800797e:	f7f9 f9ab 	bl	8000cd8 <__aeabi_d2lz>
 8007982:	f7f8 fe1b 	bl	80005bc <__aeabi_l2d>
 8007986:	4602      	mov	r2, r0
 8007988:	460b      	mov	r3, r1
 800798a:	4640      	mov	r0, r8
 800798c:	4649      	mov	r1, r9
 800798e:	f7f8 fc8b 	bl	80002a8 <__aeabi_dsub>
 8007992:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007994:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007998:	ea43 030a 	orr.w	r3, r3, sl
 800799c:	4313      	orrs	r3, r2
 800799e:	4680      	mov	r8, r0
 80079a0:	4689      	mov	r9, r1
 80079a2:	d055      	beq.n	8007a50 <_strtod_l+0xba0>
 80079a4:	a336      	add	r3, pc, #216	; (adr r3, 8007a80 <_strtod_l+0xbd0>)
 80079a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079aa:	f7f9 f8a7 	bl	8000afc <__aeabi_dcmplt>
 80079ae:	2800      	cmp	r0, #0
 80079b0:	f47f acd0 	bne.w	8007354 <_strtod_l+0x4a4>
 80079b4:	a334      	add	r3, pc, #208	; (adr r3, 8007a88 <_strtod_l+0xbd8>)
 80079b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ba:	4640      	mov	r0, r8
 80079bc:	4649      	mov	r1, r9
 80079be:	f7f9 f8bb 	bl	8000b38 <__aeabi_dcmpgt>
 80079c2:	2800      	cmp	r0, #0
 80079c4:	f43f af7b 	beq.w	80078be <_strtod_l+0xa0e>
 80079c8:	e4c4      	b.n	8007354 <_strtod_l+0x4a4>
 80079ca:	9b04      	ldr	r3, [sp, #16]
 80079cc:	b333      	cbz	r3, 8007a1c <_strtod_l+0xb6c>
 80079ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079d0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80079d4:	d822      	bhi.n	8007a1c <_strtod_l+0xb6c>
 80079d6:	a32e      	add	r3, pc, #184	; (adr r3, 8007a90 <_strtod_l+0xbe0>)
 80079d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079dc:	4640      	mov	r0, r8
 80079de:	4649      	mov	r1, r9
 80079e0:	f7f9 f896 	bl	8000b10 <__aeabi_dcmple>
 80079e4:	b1a0      	cbz	r0, 8007a10 <_strtod_l+0xb60>
 80079e6:	4649      	mov	r1, r9
 80079e8:	4640      	mov	r0, r8
 80079ea:	f7f9 f8ed 	bl	8000bc8 <__aeabi_d2uiz>
 80079ee:	2801      	cmp	r0, #1
 80079f0:	bf38      	it	cc
 80079f2:	2001      	movcc	r0, #1
 80079f4:	f7f8 fd96 	bl	8000524 <__aeabi_ui2d>
 80079f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079fa:	4680      	mov	r8, r0
 80079fc:	4689      	mov	r9, r1
 80079fe:	bb23      	cbnz	r3, 8007a4a <_strtod_l+0xb9a>
 8007a00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a04:	9010      	str	r0, [sp, #64]	; 0x40
 8007a06:	9311      	str	r3, [sp, #68]	; 0x44
 8007a08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a0c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a14:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007a18:	1a9b      	subs	r3, r3, r2
 8007a1a:	9309      	str	r3, [sp, #36]	; 0x24
 8007a1c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007a20:	eeb0 0a48 	vmov.f32	s0, s16
 8007a24:	eef0 0a68 	vmov.f32	s1, s17
 8007a28:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007a2c:	f002 f928 	bl	8009c80 <__ulp>
 8007a30:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007a34:	ec53 2b10 	vmov	r2, r3, d0
 8007a38:	f7f8 fdee 	bl	8000618 <__aeabi_dmul>
 8007a3c:	ec53 2b18 	vmov	r2, r3, d8
 8007a40:	f7f8 fc34 	bl	80002ac <__adddf3>
 8007a44:	4682      	mov	sl, r0
 8007a46:	468b      	mov	fp, r1
 8007a48:	e78d      	b.n	8007966 <_strtod_l+0xab6>
 8007a4a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007a4e:	e7db      	b.n	8007a08 <_strtod_l+0xb58>
 8007a50:	a311      	add	r3, pc, #68	; (adr r3, 8007a98 <_strtod_l+0xbe8>)
 8007a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a56:	f7f9 f851 	bl	8000afc <__aeabi_dcmplt>
 8007a5a:	e7b2      	b.n	80079c2 <_strtod_l+0xb12>
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	930a      	str	r3, [sp, #40]	; 0x28
 8007a60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007a62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a64:	6013      	str	r3, [r2, #0]
 8007a66:	f7ff ba6b 	b.w	8006f40 <_strtod_l+0x90>
 8007a6a:	2a65      	cmp	r2, #101	; 0x65
 8007a6c:	f43f ab5f 	beq.w	800712e <_strtod_l+0x27e>
 8007a70:	2a45      	cmp	r2, #69	; 0x45
 8007a72:	f43f ab5c 	beq.w	800712e <_strtod_l+0x27e>
 8007a76:	2301      	movs	r3, #1
 8007a78:	f7ff bb94 	b.w	80071a4 <_strtod_l+0x2f4>
 8007a7c:	f3af 8000 	nop.w
 8007a80:	94a03595 	.word	0x94a03595
 8007a84:	3fdfffff 	.word	0x3fdfffff
 8007a88:	35afe535 	.word	0x35afe535
 8007a8c:	3fe00000 	.word	0x3fe00000
 8007a90:	ffc00000 	.word	0xffc00000
 8007a94:	41dfffff 	.word	0x41dfffff
 8007a98:	94a03595 	.word	0x94a03595
 8007a9c:	3fcfffff 	.word	0x3fcfffff
 8007aa0:	3ff00000 	.word	0x3ff00000
 8007aa4:	7ff00000 	.word	0x7ff00000
 8007aa8:	7fe00000 	.word	0x7fe00000
 8007aac:	7c9fffff 	.word	0x7c9fffff
 8007ab0:	3fe00000 	.word	0x3fe00000
 8007ab4:	bff00000 	.word	0xbff00000
 8007ab8:	7fefffff 	.word	0x7fefffff

08007abc <_strtod_r>:
 8007abc:	4b01      	ldr	r3, [pc, #4]	; (8007ac4 <_strtod_r+0x8>)
 8007abe:	f7ff b9f7 	b.w	8006eb0 <_strtod_l>
 8007ac2:	bf00      	nop
 8007ac4:	200000a4 	.word	0x200000a4

08007ac8 <_strtol_l.constprop.0>:
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ace:	d001      	beq.n	8007ad4 <_strtol_l.constprop.0+0xc>
 8007ad0:	2b24      	cmp	r3, #36	; 0x24
 8007ad2:	d906      	bls.n	8007ae2 <_strtol_l.constprop.0+0x1a>
 8007ad4:	f7fe fa3c 	bl	8005f50 <__errno>
 8007ad8:	2316      	movs	r3, #22
 8007ada:	6003      	str	r3, [r0, #0]
 8007adc:	2000      	movs	r0, #0
 8007ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ae2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007bc8 <_strtol_l.constprop.0+0x100>
 8007ae6:	460d      	mov	r5, r1
 8007ae8:	462e      	mov	r6, r5
 8007aea:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007aee:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007af2:	f017 0708 	ands.w	r7, r7, #8
 8007af6:	d1f7      	bne.n	8007ae8 <_strtol_l.constprop.0+0x20>
 8007af8:	2c2d      	cmp	r4, #45	; 0x2d
 8007afa:	d132      	bne.n	8007b62 <_strtol_l.constprop.0+0x9a>
 8007afc:	782c      	ldrb	r4, [r5, #0]
 8007afe:	2701      	movs	r7, #1
 8007b00:	1cb5      	adds	r5, r6, #2
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d05b      	beq.n	8007bbe <_strtol_l.constprop.0+0xf6>
 8007b06:	2b10      	cmp	r3, #16
 8007b08:	d109      	bne.n	8007b1e <_strtol_l.constprop.0+0x56>
 8007b0a:	2c30      	cmp	r4, #48	; 0x30
 8007b0c:	d107      	bne.n	8007b1e <_strtol_l.constprop.0+0x56>
 8007b0e:	782c      	ldrb	r4, [r5, #0]
 8007b10:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007b14:	2c58      	cmp	r4, #88	; 0x58
 8007b16:	d14d      	bne.n	8007bb4 <_strtol_l.constprop.0+0xec>
 8007b18:	786c      	ldrb	r4, [r5, #1]
 8007b1a:	2310      	movs	r3, #16
 8007b1c:	3502      	adds	r5, #2
 8007b1e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007b22:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007b26:	f04f 0c00 	mov.w	ip, #0
 8007b2a:	fbb8 f9f3 	udiv	r9, r8, r3
 8007b2e:	4666      	mov	r6, ip
 8007b30:	fb03 8a19 	mls	sl, r3, r9, r8
 8007b34:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007b38:	f1be 0f09 	cmp.w	lr, #9
 8007b3c:	d816      	bhi.n	8007b6c <_strtol_l.constprop.0+0xa4>
 8007b3e:	4674      	mov	r4, lr
 8007b40:	42a3      	cmp	r3, r4
 8007b42:	dd24      	ble.n	8007b8e <_strtol_l.constprop.0+0xc6>
 8007b44:	f1bc 0f00 	cmp.w	ip, #0
 8007b48:	db1e      	blt.n	8007b88 <_strtol_l.constprop.0+0xc0>
 8007b4a:	45b1      	cmp	r9, r6
 8007b4c:	d31c      	bcc.n	8007b88 <_strtol_l.constprop.0+0xc0>
 8007b4e:	d101      	bne.n	8007b54 <_strtol_l.constprop.0+0x8c>
 8007b50:	45a2      	cmp	sl, r4
 8007b52:	db19      	blt.n	8007b88 <_strtol_l.constprop.0+0xc0>
 8007b54:	fb06 4603 	mla	r6, r6, r3, r4
 8007b58:	f04f 0c01 	mov.w	ip, #1
 8007b5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b60:	e7e8      	b.n	8007b34 <_strtol_l.constprop.0+0x6c>
 8007b62:	2c2b      	cmp	r4, #43	; 0x2b
 8007b64:	bf04      	itt	eq
 8007b66:	782c      	ldrbeq	r4, [r5, #0]
 8007b68:	1cb5      	addeq	r5, r6, #2
 8007b6a:	e7ca      	b.n	8007b02 <_strtol_l.constprop.0+0x3a>
 8007b6c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007b70:	f1be 0f19 	cmp.w	lr, #25
 8007b74:	d801      	bhi.n	8007b7a <_strtol_l.constprop.0+0xb2>
 8007b76:	3c37      	subs	r4, #55	; 0x37
 8007b78:	e7e2      	b.n	8007b40 <_strtol_l.constprop.0+0x78>
 8007b7a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007b7e:	f1be 0f19 	cmp.w	lr, #25
 8007b82:	d804      	bhi.n	8007b8e <_strtol_l.constprop.0+0xc6>
 8007b84:	3c57      	subs	r4, #87	; 0x57
 8007b86:	e7db      	b.n	8007b40 <_strtol_l.constprop.0+0x78>
 8007b88:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007b8c:	e7e6      	b.n	8007b5c <_strtol_l.constprop.0+0x94>
 8007b8e:	f1bc 0f00 	cmp.w	ip, #0
 8007b92:	da05      	bge.n	8007ba0 <_strtol_l.constprop.0+0xd8>
 8007b94:	2322      	movs	r3, #34	; 0x22
 8007b96:	6003      	str	r3, [r0, #0]
 8007b98:	4646      	mov	r6, r8
 8007b9a:	b942      	cbnz	r2, 8007bae <_strtol_l.constprop.0+0xe6>
 8007b9c:	4630      	mov	r0, r6
 8007b9e:	e79e      	b.n	8007ade <_strtol_l.constprop.0+0x16>
 8007ba0:	b107      	cbz	r7, 8007ba4 <_strtol_l.constprop.0+0xdc>
 8007ba2:	4276      	negs	r6, r6
 8007ba4:	2a00      	cmp	r2, #0
 8007ba6:	d0f9      	beq.n	8007b9c <_strtol_l.constprop.0+0xd4>
 8007ba8:	f1bc 0f00 	cmp.w	ip, #0
 8007bac:	d000      	beq.n	8007bb0 <_strtol_l.constprop.0+0xe8>
 8007bae:	1e69      	subs	r1, r5, #1
 8007bb0:	6011      	str	r1, [r2, #0]
 8007bb2:	e7f3      	b.n	8007b9c <_strtol_l.constprop.0+0xd4>
 8007bb4:	2430      	movs	r4, #48	; 0x30
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d1b1      	bne.n	8007b1e <_strtol_l.constprop.0+0x56>
 8007bba:	2308      	movs	r3, #8
 8007bbc:	e7af      	b.n	8007b1e <_strtol_l.constprop.0+0x56>
 8007bbe:	2c30      	cmp	r4, #48	; 0x30
 8007bc0:	d0a5      	beq.n	8007b0e <_strtol_l.constprop.0+0x46>
 8007bc2:	230a      	movs	r3, #10
 8007bc4:	e7ab      	b.n	8007b1e <_strtol_l.constprop.0+0x56>
 8007bc6:	bf00      	nop
 8007bc8:	0800af39 	.word	0x0800af39

08007bcc <_strtol_r>:
 8007bcc:	f7ff bf7c 	b.w	8007ac8 <_strtol_l.constprop.0>

08007bd0 <__swbuf_r>:
 8007bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bd2:	460e      	mov	r6, r1
 8007bd4:	4614      	mov	r4, r2
 8007bd6:	4605      	mov	r5, r0
 8007bd8:	b118      	cbz	r0, 8007be2 <__swbuf_r+0x12>
 8007bda:	6983      	ldr	r3, [r0, #24]
 8007bdc:	b90b      	cbnz	r3, 8007be2 <__swbuf_r+0x12>
 8007bde:	f001 f84b 	bl	8008c78 <__sinit>
 8007be2:	4b21      	ldr	r3, [pc, #132]	; (8007c68 <__swbuf_r+0x98>)
 8007be4:	429c      	cmp	r4, r3
 8007be6:	d12b      	bne.n	8007c40 <__swbuf_r+0x70>
 8007be8:	686c      	ldr	r4, [r5, #4]
 8007bea:	69a3      	ldr	r3, [r4, #24]
 8007bec:	60a3      	str	r3, [r4, #8]
 8007bee:	89a3      	ldrh	r3, [r4, #12]
 8007bf0:	071a      	lsls	r2, r3, #28
 8007bf2:	d52f      	bpl.n	8007c54 <__swbuf_r+0x84>
 8007bf4:	6923      	ldr	r3, [r4, #16]
 8007bf6:	b36b      	cbz	r3, 8007c54 <__swbuf_r+0x84>
 8007bf8:	6923      	ldr	r3, [r4, #16]
 8007bfa:	6820      	ldr	r0, [r4, #0]
 8007bfc:	1ac0      	subs	r0, r0, r3
 8007bfe:	6963      	ldr	r3, [r4, #20]
 8007c00:	b2f6      	uxtb	r6, r6
 8007c02:	4283      	cmp	r3, r0
 8007c04:	4637      	mov	r7, r6
 8007c06:	dc04      	bgt.n	8007c12 <__swbuf_r+0x42>
 8007c08:	4621      	mov	r1, r4
 8007c0a:	4628      	mov	r0, r5
 8007c0c:	f000 ffa0 	bl	8008b50 <_fflush_r>
 8007c10:	bb30      	cbnz	r0, 8007c60 <__swbuf_r+0x90>
 8007c12:	68a3      	ldr	r3, [r4, #8]
 8007c14:	3b01      	subs	r3, #1
 8007c16:	60a3      	str	r3, [r4, #8]
 8007c18:	6823      	ldr	r3, [r4, #0]
 8007c1a:	1c5a      	adds	r2, r3, #1
 8007c1c:	6022      	str	r2, [r4, #0]
 8007c1e:	701e      	strb	r6, [r3, #0]
 8007c20:	6963      	ldr	r3, [r4, #20]
 8007c22:	3001      	adds	r0, #1
 8007c24:	4283      	cmp	r3, r0
 8007c26:	d004      	beq.n	8007c32 <__swbuf_r+0x62>
 8007c28:	89a3      	ldrh	r3, [r4, #12]
 8007c2a:	07db      	lsls	r3, r3, #31
 8007c2c:	d506      	bpl.n	8007c3c <__swbuf_r+0x6c>
 8007c2e:	2e0a      	cmp	r6, #10
 8007c30:	d104      	bne.n	8007c3c <__swbuf_r+0x6c>
 8007c32:	4621      	mov	r1, r4
 8007c34:	4628      	mov	r0, r5
 8007c36:	f000 ff8b 	bl	8008b50 <_fflush_r>
 8007c3a:	b988      	cbnz	r0, 8007c60 <__swbuf_r+0x90>
 8007c3c:	4638      	mov	r0, r7
 8007c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c40:	4b0a      	ldr	r3, [pc, #40]	; (8007c6c <__swbuf_r+0x9c>)
 8007c42:	429c      	cmp	r4, r3
 8007c44:	d101      	bne.n	8007c4a <__swbuf_r+0x7a>
 8007c46:	68ac      	ldr	r4, [r5, #8]
 8007c48:	e7cf      	b.n	8007bea <__swbuf_r+0x1a>
 8007c4a:	4b09      	ldr	r3, [pc, #36]	; (8007c70 <__swbuf_r+0xa0>)
 8007c4c:	429c      	cmp	r4, r3
 8007c4e:	bf08      	it	eq
 8007c50:	68ec      	ldreq	r4, [r5, #12]
 8007c52:	e7ca      	b.n	8007bea <__swbuf_r+0x1a>
 8007c54:	4621      	mov	r1, r4
 8007c56:	4628      	mov	r0, r5
 8007c58:	f000 f80c 	bl	8007c74 <__swsetup_r>
 8007c5c:	2800      	cmp	r0, #0
 8007c5e:	d0cb      	beq.n	8007bf8 <__swbuf_r+0x28>
 8007c60:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007c64:	e7ea      	b.n	8007c3c <__swbuf_r+0x6c>
 8007c66:	bf00      	nop
 8007c68:	0800b0ec 	.word	0x0800b0ec
 8007c6c:	0800b10c 	.word	0x0800b10c
 8007c70:	0800b0cc 	.word	0x0800b0cc

08007c74 <__swsetup_r>:
 8007c74:	4b32      	ldr	r3, [pc, #200]	; (8007d40 <__swsetup_r+0xcc>)
 8007c76:	b570      	push	{r4, r5, r6, lr}
 8007c78:	681d      	ldr	r5, [r3, #0]
 8007c7a:	4606      	mov	r6, r0
 8007c7c:	460c      	mov	r4, r1
 8007c7e:	b125      	cbz	r5, 8007c8a <__swsetup_r+0x16>
 8007c80:	69ab      	ldr	r3, [r5, #24]
 8007c82:	b913      	cbnz	r3, 8007c8a <__swsetup_r+0x16>
 8007c84:	4628      	mov	r0, r5
 8007c86:	f000 fff7 	bl	8008c78 <__sinit>
 8007c8a:	4b2e      	ldr	r3, [pc, #184]	; (8007d44 <__swsetup_r+0xd0>)
 8007c8c:	429c      	cmp	r4, r3
 8007c8e:	d10f      	bne.n	8007cb0 <__swsetup_r+0x3c>
 8007c90:	686c      	ldr	r4, [r5, #4]
 8007c92:	89a3      	ldrh	r3, [r4, #12]
 8007c94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c98:	0719      	lsls	r1, r3, #28
 8007c9a:	d42c      	bmi.n	8007cf6 <__swsetup_r+0x82>
 8007c9c:	06dd      	lsls	r5, r3, #27
 8007c9e:	d411      	bmi.n	8007cc4 <__swsetup_r+0x50>
 8007ca0:	2309      	movs	r3, #9
 8007ca2:	6033      	str	r3, [r6, #0]
 8007ca4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ca8:	81a3      	strh	r3, [r4, #12]
 8007caa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cae:	e03e      	b.n	8007d2e <__swsetup_r+0xba>
 8007cb0:	4b25      	ldr	r3, [pc, #148]	; (8007d48 <__swsetup_r+0xd4>)
 8007cb2:	429c      	cmp	r4, r3
 8007cb4:	d101      	bne.n	8007cba <__swsetup_r+0x46>
 8007cb6:	68ac      	ldr	r4, [r5, #8]
 8007cb8:	e7eb      	b.n	8007c92 <__swsetup_r+0x1e>
 8007cba:	4b24      	ldr	r3, [pc, #144]	; (8007d4c <__swsetup_r+0xd8>)
 8007cbc:	429c      	cmp	r4, r3
 8007cbe:	bf08      	it	eq
 8007cc0:	68ec      	ldreq	r4, [r5, #12]
 8007cc2:	e7e6      	b.n	8007c92 <__swsetup_r+0x1e>
 8007cc4:	0758      	lsls	r0, r3, #29
 8007cc6:	d512      	bpl.n	8007cee <__swsetup_r+0x7a>
 8007cc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cca:	b141      	cbz	r1, 8007cde <__swsetup_r+0x6a>
 8007ccc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cd0:	4299      	cmp	r1, r3
 8007cd2:	d002      	beq.n	8007cda <__swsetup_r+0x66>
 8007cd4:	4630      	mov	r0, r6
 8007cd6:	f002 f939 	bl	8009f4c <_free_r>
 8007cda:	2300      	movs	r3, #0
 8007cdc:	6363      	str	r3, [r4, #52]	; 0x34
 8007cde:	89a3      	ldrh	r3, [r4, #12]
 8007ce0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ce4:	81a3      	strh	r3, [r4, #12]
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	6063      	str	r3, [r4, #4]
 8007cea:	6923      	ldr	r3, [r4, #16]
 8007cec:	6023      	str	r3, [r4, #0]
 8007cee:	89a3      	ldrh	r3, [r4, #12]
 8007cf0:	f043 0308 	orr.w	r3, r3, #8
 8007cf4:	81a3      	strh	r3, [r4, #12]
 8007cf6:	6923      	ldr	r3, [r4, #16]
 8007cf8:	b94b      	cbnz	r3, 8007d0e <__swsetup_r+0x9a>
 8007cfa:	89a3      	ldrh	r3, [r4, #12]
 8007cfc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d04:	d003      	beq.n	8007d0e <__swsetup_r+0x9a>
 8007d06:	4621      	mov	r1, r4
 8007d08:	4630      	mov	r0, r6
 8007d0a:	f001 fbed 	bl	80094e8 <__smakebuf_r>
 8007d0e:	89a0      	ldrh	r0, [r4, #12]
 8007d10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d14:	f010 0301 	ands.w	r3, r0, #1
 8007d18:	d00a      	beq.n	8007d30 <__swsetup_r+0xbc>
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	60a3      	str	r3, [r4, #8]
 8007d1e:	6963      	ldr	r3, [r4, #20]
 8007d20:	425b      	negs	r3, r3
 8007d22:	61a3      	str	r3, [r4, #24]
 8007d24:	6923      	ldr	r3, [r4, #16]
 8007d26:	b943      	cbnz	r3, 8007d3a <__swsetup_r+0xc6>
 8007d28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007d2c:	d1ba      	bne.n	8007ca4 <__swsetup_r+0x30>
 8007d2e:	bd70      	pop	{r4, r5, r6, pc}
 8007d30:	0781      	lsls	r1, r0, #30
 8007d32:	bf58      	it	pl
 8007d34:	6963      	ldrpl	r3, [r4, #20]
 8007d36:	60a3      	str	r3, [r4, #8]
 8007d38:	e7f4      	b.n	8007d24 <__swsetup_r+0xb0>
 8007d3a:	2000      	movs	r0, #0
 8007d3c:	e7f7      	b.n	8007d2e <__swsetup_r+0xba>
 8007d3e:	bf00      	nop
 8007d40:	2000003c 	.word	0x2000003c
 8007d44:	0800b0ec 	.word	0x0800b0ec
 8007d48:	0800b10c 	.word	0x0800b10c
 8007d4c:	0800b0cc 	.word	0x0800b0cc

08007d50 <quorem>:
 8007d50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d54:	6903      	ldr	r3, [r0, #16]
 8007d56:	690c      	ldr	r4, [r1, #16]
 8007d58:	42a3      	cmp	r3, r4
 8007d5a:	4607      	mov	r7, r0
 8007d5c:	f2c0 8081 	blt.w	8007e62 <quorem+0x112>
 8007d60:	3c01      	subs	r4, #1
 8007d62:	f101 0814 	add.w	r8, r1, #20
 8007d66:	f100 0514 	add.w	r5, r0, #20
 8007d6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d6e:	9301      	str	r3, [sp, #4]
 8007d70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d78:	3301      	adds	r3, #1
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007d80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d84:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d88:	d331      	bcc.n	8007dee <quorem+0x9e>
 8007d8a:	f04f 0e00 	mov.w	lr, #0
 8007d8e:	4640      	mov	r0, r8
 8007d90:	46ac      	mov	ip, r5
 8007d92:	46f2      	mov	sl, lr
 8007d94:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d98:	b293      	uxth	r3, r2
 8007d9a:	fb06 e303 	mla	r3, r6, r3, lr
 8007d9e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	ebaa 0303 	sub.w	r3, sl, r3
 8007da8:	f8dc a000 	ldr.w	sl, [ip]
 8007dac:	0c12      	lsrs	r2, r2, #16
 8007dae:	fa13 f38a 	uxtah	r3, r3, sl
 8007db2:	fb06 e202 	mla	r2, r6, r2, lr
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	9b00      	ldr	r3, [sp, #0]
 8007dba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007dbe:	b292      	uxth	r2, r2
 8007dc0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007dc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007dc8:	f8bd 3000 	ldrh.w	r3, [sp]
 8007dcc:	4581      	cmp	r9, r0
 8007dce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007dd2:	f84c 3b04 	str.w	r3, [ip], #4
 8007dd6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007dda:	d2db      	bcs.n	8007d94 <quorem+0x44>
 8007ddc:	f855 300b 	ldr.w	r3, [r5, fp]
 8007de0:	b92b      	cbnz	r3, 8007dee <quorem+0x9e>
 8007de2:	9b01      	ldr	r3, [sp, #4]
 8007de4:	3b04      	subs	r3, #4
 8007de6:	429d      	cmp	r5, r3
 8007de8:	461a      	mov	r2, r3
 8007dea:	d32e      	bcc.n	8007e4a <quorem+0xfa>
 8007dec:	613c      	str	r4, [r7, #16]
 8007dee:	4638      	mov	r0, r7
 8007df0:	f001 fea0 	bl	8009b34 <__mcmp>
 8007df4:	2800      	cmp	r0, #0
 8007df6:	db24      	blt.n	8007e42 <quorem+0xf2>
 8007df8:	3601      	adds	r6, #1
 8007dfa:	4628      	mov	r0, r5
 8007dfc:	f04f 0c00 	mov.w	ip, #0
 8007e00:	f858 2b04 	ldr.w	r2, [r8], #4
 8007e04:	f8d0 e000 	ldr.w	lr, [r0]
 8007e08:	b293      	uxth	r3, r2
 8007e0a:	ebac 0303 	sub.w	r3, ip, r3
 8007e0e:	0c12      	lsrs	r2, r2, #16
 8007e10:	fa13 f38e 	uxtah	r3, r3, lr
 8007e14:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007e18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e22:	45c1      	cmp	r9, r8
 8007e24:	f840 3b04 	str.w	r3, [r0], #4
 8007e28:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007e2c:	d2e8      	bcs.n	8007e00 <quorem+0xb0>
 8007e2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e36:	b922      	cbnz	r2, 8007e42 <quorem+0xf2>
 8007e38:	3b04      	subs	r3, #4
 8007e3a:	429d      	cmp	r5, r3
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	d30a      	bcc.n	8007e56 <quorem+0x106>
 8007e40:	613c      	str	r4, [r7, #16]
 8007e42:	4630      	mov	r0, r6
 8007e44:	b003      	add	sp, #12
 8007e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e4a:	6812      	ldr	r2, [r2, #0]
 8007e4c:	3b04      	subs	r3, #4
 8007e4e:	2a00      	cmp	r2, #0
 8007e50:	d1cc      	bne.n	8007dec <quorem+0x9c>
 8007e52:	3c01      	subs	r4, #1
 8007e54:	e7c7      	b.n	8007de6 <quorem+0x96>
 8007e56:	6812      	ldr	r2, [r2, #0]
 8007e58:	3b04      	subs	r3, #4
 8007e5a:	2a00      	cmp	r2, #0
 8007e5c:	d1f0      	bne.n	8007e40 <quorem+0xf0>
 8007e5e:	3c01      	subs	r4, #1
 8007e60:	e7eb      	b.n	8007e3a <quorem+0xea>
 8007e62:	2000      	movs	r0, #0
 8007e64:	e7ee      	b.n	8007e44 <quorem+0xf4>
	...

08007e68 <_dtoa_r>:
 8007e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e6c:	ed2d 8b04 	vpush	{d8-d9}
 8007e70:	ec57 6b10 	vmov	r6, r7, d0
 8007e74:	b093      	sub	sp, #76	; 0x4c
 8007e76:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007e78:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007e7c:	9106      	str	r1, [sp, #24]
 8007e7e:	ee10 aa10 	vmov	sl, s0
 8007e82:	4604      	mov	r4, r0
 8007e84:	9209      	str	r2, [sp, #36]	; 0x24
 8007e86:	930c      	str	r3, [sp, #48]	; 0x30
 8007e88:	46bb      	mov	fp, r7
 8007e8a:	b975      	cbnz	r5, 8007eaa <_dtoa_r+0x42>
 8007e8c:	2010      	movs	r0, #16
 8007e8e:	f001 fb6b 	bl	8009568 <malloc>
 8007e92:	4602      	mov	r2, r0
 8007e94:	6260      	str	r0, [r4, #36]	; 0x24
 8007e96:	b920      	cbnz	r0, 8007ea2 <_dtoa_r+0x3a>
 8007e98:	4ba7      	ldr	r3, [pc, #668]	; (8008138 <_dtoa_r+0x2d0>)
 8007e9a:	21ea      	movs	r1, #234	; 0xea
 8007e9c:	48a7      	ldr	r0, [pc, #668]	; (800813c <_dtoa_r+0x2d4>)
 8007e9e:	f002 fc79 	bl	800a794 <__assert_func>
 8007ea2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007ea6:	6005      	str	r5, [r0, #0]
 8007ea8:	60c5      	str	r5, [r0, #12]
 8007eaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007eac:	6819      	ldr	r1, [r3, #0]
 8007eae:	b151      	cbz	r1, 8007ec6 <_dtoa_r+0x5e>
 8007eb0:	685a      	ldr	r2, [r3, #4]
 8007eb2:	604a      	str	r2, [r1, #4]
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	4093      	lsls	r3, r2
 8007eb8:	608b      	str	r3, [r1, #8]
 8007eba:	4620      	mov	r0, r4
 8007ebc:	f001 fbae 	bl	800961c <_Bfree>
 8007ec0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	601a      	str	r2, [r3, #0]
 8007ec6:	1e3b      	subs	r3, r7, #0
 8007ec8:	bfaa      	itet	ge
 8007eca:	2300      	movge	r3, #0
 8007ecc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007ed0:	f8c8 3000 	strge.w	r3, [r8]
 8007ed4:	4b9a      	ldr	r3, [pc, #616]	; (8008140 <_dtoa_r+0x2d8>)
 8007ed6:	bfbc      	itt	lt
 8007ed8:	2201      	movlt	r2, #1
 8007eda:	f8c8 2000 	strlt.w	r2, [r8]
 8007ede:	ea33 030b 	bics.w	r3, r3, fp
 8007ee2:	d11b      	bne.n	8007f1c <_dtoa_r+0xb4>
 8007ee4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ee6:	f242 730f 	movw	r3, #9999	; 0x270f
 8007eea:	6013      	str	r3, [r2, #0]
 8007eec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ef0:	4333      	orrs	r3, r6
 8007ef2:	f000 8592 	beq.w	8008a1a <_dtoa_r+0xbb2>
 8007ef6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ef8:	b963      	cbnz	r3, 8007f14 <_dtoa_r+0xac>
 8007efa:	4b92      	ldr	r3, [pc, #584]	; (8008144 <_dtoa_r+0x2dc>)
 8007efc:	e022      	b.n	8007f44 <_dtoa_r+0xdc>
 8007efe:	4b92      	ldr	r3, [pc, #584]	; (8008148 <_dtoa_r+0x2e0>)
 8007f00:	9301      	str	r3, [sp, #4]
 8007f02:	3308      	adds	r3, #8
 8007f04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007f06:	6013      	str	r3, [r2, #0]
 8007f08:	9801      	ldr	r0, [sp, #4]
 8007f0a:	b013      	add	sp, #76	; 0x4c
 8007f0c:	ecbd 8b04 	vpop	{d8-d9}
 8007f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f14:	4b8b      	ldr	r3, [pc, #556]	; (8008144 <_dtoa_r+0x2dc>)
 8007f16:	9301      	str	r3, [sp, #4]
 8007f18:	3303      	adds	r3, #3
 8007f1a:	e7f3      	b.n	8007f04 <_dtoa_r+0x9c>
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	2300      	movs	r3, #0
 8007f20:	4650      	mov	r0, sl
 8007f22:	4659      	mov	r1, fp
 8007f24:	f7f8 fde0 	bl	8000ae8 <__aeabi_dcmpeq>
 8007f28:	ec4b ab19 	vmov	d9, sl, fp
 8007f2c:	4680      	mov	r8, r0
 8007f2e:	b158      	cbz	r0, 8007f48 <_dtoa_r+0xe0>
 8007f30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f32:	2301      	movs	r3, #1
 8007f34:	6013      	str	r3, [r2, #0]
 8007f36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f000 856b 	beq.w	8008a14 <_dtoa_r+0xbac>
 8007f3e:	4883      	ldr	r0, [pc, #524]	; (800814c <_dtoa_r+0x2e4>)
 8007f40:	6018      	str	r0, [r3, #0]
 8007f42:	1e43      	subs	r3, r0, #1
 8007f44:	9301      	str	r3, [sp, #4]
 8007f46:	e7df      	b.n	8007f08 <_dtoa_r+0xa0>
 8007f48:	ec4b ab10 	vmov	d0, sl, fp
 8007f4c:	aa10      	add	r2, sp, #64	; 0x40
 8007f4e:	a911      	add	r1, sp, #68	; 0x44
 8007f50:	4620      	mov	r0, r4
 8007f52:	f001 ff11 	bl	8009d78 <__d2b>
 8007f56:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007f5a:	ee08 0a10 	vmov	s16, r0
 8007f5e:	2d00      	cmp	r5, #0
 8007f60:	f000 8084 	beq.w	800806c <_dtoa_r+0x204>
 8007f64:	ee19 3a90 	vmov	r3, s19
 8007f68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f6c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007f70:	4656      	mov	r6, sl
 8007f72:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007f76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007f7a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007f7e:	4b74      	ldr	r3, [pc, #464]	; (8008150 <_dtoa_r+0x2e8>)
 8007f80:	2200      	movs	r2, #0
 8007f82:	4630      	mov	r0, r6
 8007f84:	4639      	mov	r1, r7
 8007f86:	f7f8 f98f 	bl	80002a8 <__aeabi_dsub>
 8007f8a:	a365      	add	r3, pc, #404	; (adr r3, 8008120 <_dtoa_r+0x2b8>)
 8007f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f90:	f7f8 fb42 	bl	8000618 <__aeabi_dmul>
 8007f94:	a364      	add	r3, pc, #400	; (adr r3, 8008128 <_dtoa_r+0x2c0>)
 8007f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9a:	f7f8 f987 	bl	80002ac <__adddf3>
 8007f9e:	4606      	mov	r6, r0
 8007fa0:	4628      	mov	r0, r5
 8007fa2:	460f      	mov	r7, r1
 8007fa4:	f7f8 face 	bl	8000544 <__aeabi_i2d>
 8007fa8:	a361      	add	r3, pc, #388	; (adr r3, 8008130 <_dtoa_r+0x2c8>)
 8007faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fae:	f7f8 fb33 	bl	8000618 <__aeabi_dmul>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	4630      	mov	r0, r6
 8007fb8:	4639      	mov	r1, r7
 8007fba:	f7f8 f977 	bl	80002ac <__adddf3>
 8007fbe:	4606      	mov	r6, r0
 8007fc0:	460f      	mov	r7, r1
 8007fc2:	f7f8 fdd9 	bl	8000b78 <__aeabi_d2iz>
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	9000      	str	r0, [sp, #0]
 8007fca:	2300      	movs	r3, #0
 8007fcc:	4630      	mov	r0, r6
 8007fce:	4639      	mov	r1, r7
 8007fd0:	f7f8 fd94 	bl	8000afc <__aeabi_dcmplt>
 8007fd4:	b150      	cbz	r0, 8007fec <_dtoa_r+0x184>
 8007fd6:	9800      	ldr	r0, [sp, #0]
 8007fd8:	f7f8 fab4 	bl	8000544 <__aeabi_i2d>
 8007fdc:	4632      	mov	r2, r6
 8007fde:	463b      	mov	r3, r7
 8007fe0:	f7f8 fd82 	bl	8000ae8 <__aeabi_dcmpeq>
 8007fe4:	b910      	cbnz	r0, 8007fec <_dtoa_r+0x184>
 8007fe6:	9b00      	ldr	r3, [sp, #0]
 8007fe8:	3b01      	subs	r3, #1
 8007fea:	9300      	str	r3, [sp, #0]
 8007fec:	9b00      	ldr	r3, [sp, #0]
 8007fee:	2b16      	cmp	r3, #22
 8007ff0:	d85a      	bhi.n	80080a8 <_dtoa_r+0x240>
 8007ff2:	9a00      	ldr	r2, [sp, #0]
 8007ff4:	4b57      	ldr	r3, [pc, #348]	; (8008154 <_dtoa_r+0x2ec>)
 8007ff6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffe:	ec51 0b19 	vmov	r0, r1, d9
 8008002:	f7f8 fd7b 	bl	8000afc <__aeabi_dcmplt>
 8008006:	2800      	cmp	r0, #0
 8008008:	d050      	beq.n	80080ac <_dtoa_r+0x244>
 800800a:	9b00      	ldr	r3, [sp, #0]
 800800c:	3b01      	subs	r3, #1
 800800e:	9300      	str	r3, [sp, #0]
 8008010:	2300      	movs	r3, #0
 8008012:	930b      	str	r3, [sp, #44]	; 0x2c
 8008014:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008016:	1b5d      	subs	r5, r3, r5
 8008018:	1e6b      	subs	r3, r5, #1
 800801a:	9305      	str	r3, [sp, #20]
 800801c:	bf45      	ittet	mi
 800801e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008022:	9304      	strmi	r3, [sp, #16]
 8008024:	2300      	movpl	r3, #0
 8008026:	2300      	movmi	r3, #0
 8008028:	bf4c      	ite	mi
 800802a:	9305      	strmi	r3, [sp, #20]
 800802c:	9304      	strpl	r3, [sp, #16]
 800802e:	9b00      	ldr	r3, [sp, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	db3d      	blt.n	80080b0 <_dtoa_r+0x248>
 8008034:	9b05      	ldr	r3, [sp, #20]
 8008036:	9a00      	ldr	r2, [sp, #0]
 8008038:	920a      	str	r2, [sp, #40]	; 0x28
 800803a:	4413      	add	r3, r2
 800803c:	9305      	str	r3, [sp, #20]
 800803e:	2300      	movs	r3, #0
 8008040:	9307      	str	r3, [sp, #28]
 8008042:	9b06      	ldr	r3, [sp, #24]
 8008044:	2b09      	cmp	r3, #9
 8008046:	f200 8089 	bhi.w	800815c <_dtoa_r+0x2f4>
 800804a:	2b05      	cmp	r3, #5
 800804c:	bfc4      	itt	gt
 800804e:	3b04      	subgt	r3, #4
 8008050:	9306      	strgt	r3, [sp, #24]
 8008052:	9b06      	ldr	r3, [sp, #24]
 8008054:	f1a3 0302 	sub.w	r3, r3, #2
 8008058:	bfcc      	ite	gt
 800805a:	2500      	movgt	r5, #0
 800805c:	2501      	movle	r5, #1
 800805e:	2b03      	cmp	r3, #3
 8008060:	f200 8087 	bhi.w	8008172 <_dtoa_r+0x30a>
 8008064:	e8df f003 	tbb	[pc, r3]
 8008068:	59383a2d 	.word	0x59383a2d
 800806c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008070:	441d      	add	r5, r3
 8008072:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008076:	2b20      	cmp	r3, #32
 8008078:	bfc1      	itttt	gt
 800807a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800807e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008082:	fa0b f303 	lslgt.w	r3, fp, r3
 8008086:	fa26 f000 	lsrgt.w	r0, r6, r0
 800808a:	bfda      	itte	le
 800808c:	f1c3 0320 	rsble	r3, r3, #32
 8008090:	fa06 f003 	lslle.w	r0, r6, r3
 8008094:	4318      	orrgt	r0, r3
 8008096:	f7f8 fa45 	bl	8000524 <__aeabi_ui2d>
 800809a:	2301      	movs	r3, #1
 800809c:	4606      	mov	r6, r0
 800809e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80080a2:	3d01      	subs	r5, #1
 80080a4:	930e      	str	r3, [sp, #56]	; 0x38
 80080a6:	e76a      	b.n	8007f7e <_dtoa_r+0x116>
 80080a8:	2301      	movs	r3, #1
 80080aa:	e7b2      	b.n	8008012 <_dtoa_r+0x1aa>
 80080ac:	900b      	str	r0, [sp, #44]	; 0x2c
 80080ae:	e7b1      	b.n	8008014 <_dtoa_r+0x1ac>
 80080b0:	9b04      	ldr	r3, [sp, #16]
 80080b2:	9a00      	ldr	r2, [sp, #0]
 80080b4:	1a9b      	subs	r3, r3, r2
 80080b6:	9304      	str	r3, [sp, #16]
 80080b8:	4253      	negs	r3, r2
 80080ba:	9307      	str	r3, [sp, #28]
 80080bc:	2300      	movs	r3, #0
 80080be:	930a      	str	r3, [sp, #40]	; 0x28
 80080c0:	e7bf      	b.n	8008042 <_dtoa_r+0x1da>
 80080c2:	2300      	movs	r3, #0
 80080c4:	9308      	str	r3, [sp, #32]
 80080c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	dc55      	bgt.n	8008178 <_dtoa_r+0x310>
 80080cc:	2301      	movs	r3, #1
 80080ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80080d2:	461a      	mov	r2, r3
 80080d4:	9209      	str	r2, [sp, #36]	; 0x24
 80080d6:	e00c      	b.n	80080f2 <_dtoa_r+0x28a>
 80080d8:	2301      	movs	r3, #1
 80080da:	e7f3      	b.n	80080c4 <_dtoa_r+0x25c>
 80080dc:	2300      	movs	r3, #0
 80080de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080e0:	9308      	str	r3, [sp, #32]
 80080e2:	9b00      	ldr	r3, [sp, #0]
 80080e4:	4413      	add	r3, r2
 80080e6:	9302      	str	r3, [sp, #8]
 80080e8:	3301      	adds	r3, #1
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	9303      	str	r3, [sp, #12]
 80080ee:	bfb8      	it	lt
 80080f0:	2301      	movlt	r3, #1
 80080f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80080f4:	2200      	movs	r2, #0
 80080f6:	6042      	str	r2, [r0, #4]
 80080f8:	2204      	movs	r2, #4
 80080fa:	f102 0614 	add.w	r6, r2, #20
 80080fe:	429e      	cmp	r6, r3
 8008100:	6841      	ldr	r1, [r0, #4]
 8008102:	d93d      	bls.n	8008180 <_dtoa_r+0x318>
 8008104:	4620      	mov	r0, r4
 8008106:	f001 fa49 	bl	800959c <_Balloc>
 800810a:	9001      	str	r0, [sp, #4]
 800810c:	2800      	cmp	r0, #0
 800810e:	d13b      	bne.n	8008188 <_dtoa_r+0x320>
 8008110:	4b11      	ldr	r3, [pc, #68]	; (8008158 <_dtoa_r+0x2f0>)
 8008112:	4602      	mov	r2, r0
 8008114:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008118:	e6c0      	b.n	8007e9c <_dtoa_r+0x34>
 800811a:	2301      	movs	r3, #1
 800811c:	e7df      	b.n	80080de <_dtoa_r+0x276>
 800811e:	bf00      	nop
 8008120:	636f4361 	.word	0x636f4361
 8008124:	3fd287a7 	.word	0x3fd287a7
 8008128:	8b60c8b3 	.word	0x8b60c8b3
 800812c:	3fc68a28 	.word	0x3fc68a28
 8008130:	509f79fb 	.word	0x509f79fb
 8008134:	3fd34413 	.word	0x3fd34413
 8008138:	0800b046 	.word	0x0800b046
 800813c:	0800b05d 	.word	0x0800b05d
 8008140:	7ff00000 	.word	0x7ff00000
 8008144:	0800b042 	.word	0x0800b042
 8008148:	0800b039 	.word	0x0800b039
 800814c:	0800aebd 	.word	0x0800aebd
 8008150:	3ff80000 	.word	0x3ff80000
 8008154:	0800b230 	.word	0x0800b230
 8008158:	0800b0b8 	.word	0x0800b0b8
 800815c:	2501      	movs	r5, #1
 800815e:	2300      	movs	r3, #0
 8008160:	9306      	str	r3, [sp, #24]
 8008162:	9508      	str	r5, [sp, #32]
 8008164:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008168:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800816c:	2200      	movs	r2, #0
 800816e:	2312      	movs	r3, #18
 8008170:	e7b0      	b.n	80080d4 <_dtoa_r+0x26c>
 8008172:	2301      	movs	r3, #1
 8008174:	9308      	str	r3, [sp, #32]
 8008176:	e7f5      	b.n	8008164 <_dtoa_r+0x2fc>
 8008178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800817a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800817e:	e7b8      	b.n	80080f2 <_dtoa_r+0x28a>
 8008180:	3101      	adds	r1, #1
 8008182:	6041      	str	r1, [r0, #4]
 8008184:	0052      	lsls	r2, r2, #1
 8008186:	e7b8      	b.n	80080fa <_dtoa_r+0x292>
 8008188:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800818a:	9a01      	ldr	r2, [sp, #4]
 800818c:	601a      	str	r2, [r3, #0]
 800818e:	9b03      	ldr	r3, [sp, #12]
 8008190:	2b0e      	cmp	r3, #14
 8008192:	f200 809d 	bhi.w	80082d0 <_dtoa_r+0x468>
 8008196:	2d00      	cmp	r5, #0
 8008198:	f000 809a 	beq.w	80082d0 <_dtoa_r+0x468>
 800819c:	9b00      	ldr	r3, [sp, #0]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	dd32      	ble.n	8008208 <_dtoa_r+0x3a0>
 80081a2:	4ab7      	ldr	r2, [pc, #732]	; (8008480 <_dtoa_r+0x618>)
 80081a4:	f003 030f 	and.w	r3, r3, #15
 80081a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80081ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80081b0:	9b00      	ldr	r3, [sp, #0]
 80081b2:	05d8      	lsls	r0, r3, #23
 80081b4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80081b8:	d516      	bpl.n	80081e8 <_dtoa_r+0x380>
 80081ba:	4bb2      	ldr	r3, [pc, #712]	; (8008484 <_dtoa_r+0x61c>)
 80081bc:	ec51 0b19 	vmov	r0, r1, d9
 80081c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80081c4:	f7f8 fb52 	bl	800086c <__aeabi_ddiv>
 80081c8:	f007 070f 	and.w	r7, r7, #15
 80081cc:	4682      	mov	sl, r0
 80081ce:	468b      	mov	fp, r1
 80081d0:	2503      	movs	r5, #3
 80081d2:	4eac      	ldr	r6, [pc, #688]	; (8008484 <_dtoa_r+0x61c>)
 80081d4:	b957      	cbnz	r7, 80081ec <_dtoa_r+0x384>
 80081d6:	4642      	mov	r2, r8
 80081d8:	464b      	mov	r3, r9
 80081da:	4650      	mov	r0, sl
 80081dc:	4659      	mov	r1, fp
 80081de:	f7f8 fb45 	bl	800086c <__aeabi_ddiv>
 80081e2:	4682      	mov	sl, r0
 80081e4:	468b      	mov	fp, r1
 80081e6:	e028      	b.n	800823a <_dtoa_r+0x3d2>
 80081e8:	2502      	movs	r5, #2
 80081ea:	e7f2      	b.n	80081d2 <_dtoa_r+0x36a>
 80081ec:	07f9      	lsls	r1, r7, #31
 80081ee:	d508      	bpl.n	8008202 <_dtoa_r+0x39a>
 80081f0:	4640      	mov	r0, r8
 80081f2:	4649      	mov	r1, r9
 80081f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80081f8:	f7f8 fa0e 	bl	8000618 <__aeabi_dmul>
 80081fc:	3501      	adds	r5, #1
 80081fe:	4680      	mov	r8, r0
 8008200:	4689      	mov	r9, r1
 8008202:	107f      	asrs	r7, r7, #1
 8008204:	3608      	adds	r6, #8
 8008206:	e7e5      	b.n	80081d4 <_dtoa_r+0x36c>
 8008208:	f000 809b 	beq.w	8008342 <_dtoa_r+0x4da>
 800820c:	9b00      	ldr	r3, [sp, #0]
 800820e:	4f9d      	ldr	r7, [pc, #628]	; (8008484 <_dtoa_r+0x61c>)
 8008210:	425e      	negs	r6, r3
 8008212:	4b9b      	ldr	r3, [pc, #620]	; (8008480 <_dtoa_r+0x618>)
 8008214:	f006 020f 	and.w	r2, r6, #15
 8008218:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800821c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008220:	ec51 0b19 	vmov	r0, r1, d9
 8008224:	f7f8 f9f8 	bl	8000618 <__aeabi_dmul>
 8008228:	1136      	asrs	r6, r6, #4
 800822a:	4682      	mov	sl, r0
 800822c:	468b      	mov	fp, r1
 800822e:	2300      	movs	r3, #0
 8008230:	2502      	movs	r5, #2
 8008232:	2e00      	cmp	r6, #0
 8008234:	d17a      	bne.n	800832c <_dtoa_r+0x4c4>
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1d3      	bne.n	80081e2 <_dtoa_r+0x37a>
 800823a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800823c:	2b00      	cmp	r3, #0
 800823e:	f000 8082 	beq.w	8008346 <_dtoa_r+0x4de>
 8008242:	4b91      	ldr	r3, [pc, #580]	; (8008488 <_dtoa_r+0x620>)
 8008244:	2200      	movs	r2, #0
 8008246:	4650      	mov	r0, sl
 8008248:	4659      	mov	r1, fp
 800824a:	f7f8 fc57 	bl	8000afc <__aeabi_dcmplt>
 800824e:	2800      	cmp	r0, #0
 8008250:	d079      	beq.n	8008346 <_dtoa_r+0x4de>
 8008252:	9b03      	ldr	r3, [sp, #12]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d076      	beq.n	8008346 <_dtoa_r+0x4de>
 8008258:	9b02      	ldr	r3, [sp, #8]
 800825a:	2b00      	cmp	r3, #0
 800825c:	dd36      	ble.n	80082cc <_dtoa_r+0x464>
 800825e:	9b00      	ldr	r3, [sp, #0]
 8008260:	4650      	mov	r0, sl
 8008262:	4659      	mov	r1, fp
 8008264:	1e5f      	subs	r7, r3, #1
 8008266:	2200      	movs	r2, #0
 8008268:	4b88      	ldr	r3, [pc, #544]	; (800848c <_dtoa_r+0x624>)
 800826a:	f7f8 f9d5 	bl	8000618 <__aeabi_dmul>
 800826e:	9e02      	ldr	r6, [sp, #8]
 8008270:	4682      	mov	sl, r0
 8008272:	468b      	mov	fp, r1
 8008274:	3501      	adds	r5, #1
 8008276:	4628      	mov	r0, r5
 8008278:	f7f8 f964 	bl	8000544 <__aeabi_i2d>
 800827c:	4652      	mov	r2, sl
 800827e:	465b      	mov	r3, fp
 8008280:	f7f8 f9ca 	bl	8000618 <__aeabi_dmul>
 8008284:	4b82      	ldr	r3, [pc, #520]	; (8008490 <_dtoa_r+0x628>)
 8008286:	2200      	movs	r2, #0
 8008288:	f7f8 f810 	bl	80002ac <__adddf3>
 800828c:	46d0      	mov	r8, sl
 800828e:	46d9      	mov	r9, fp
 8008290:	4682      	mov	sl, r0
 8008292:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008296:	2e00      	cmp	r6, #0
 8008298:	d158      	bne.n	800834c <_dtoa_r+0x4e4>
 800829a:	4b7e      	ldr	r3, [pc, #504]	; (8008494 <_dtoa_r+0x62c>)
 800829c:	2200      	movs	r2, #0
 800829e:	4640      	mov	r0, r8
 80082a0:	4649      	mov	r1, r9
 80082a2:	f7f8 f801 	bl	80002a8 <__aeabi_dsub>
 80082a6:	4652      	mov	r2, sl
 80082a8:	465b      	mov	r3, fp
 80082aa:	4680      	mov	r8, r0
 80082ac:	4689      	mov	r9, r1
 80082ae:	f7f8 fc43 	bl	8000b38 <__aeabi_dcmpgt>
 80082b2:	2800      	cmp	r0, #0
 80082b4:	f040 8295 	bne.w	80087e2 <_dtoa_r+0x97a>
 80082b8:	4652      	mov	r2, sl
 80082ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80082be:	4640      	mov	r0, r8
 80082c0:	4649      	mov	r1, r9
 80082c2:	f7f8 fc1b 	bl	8000afc <__aeabi_dcmplt>
 80082c6:	2800      	cmp	r0, #0
 80082c8:	f040 8289 	bne.w	80087de <_dtoa_r+0x976>
 80082cc:	ec5b ab19 	vmov	sl, fp, d9
 80082d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	f2c0 8148 	blt.w	8008568 <_dtoa_r+0x700>
 80082d8:	9a00      	ldr	r2, [sp, #0]
 80082da:	2a0e      	cmp	r2, #14
 80082dc:	f300 8144 	bgt.w	8008568 <_dtoa_r+0x700>
 80082e0:	4b67      	ldr	r3, [pc, #412]	; (8008480 <_dtoa_r+0x618>)
 80082e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80082ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f280 80d5 	bge.w	800849c <_dtoa_r+0x634>
 80082f2:	9b03      	ldr	r3, [sp, #12]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f300 80d1 	bgt.w	800849c <_dtoa_r+0x634>
 80082fa:	f040 826f 	bne.w	80087dc <_dtoa_r+0x974>
 80082fe:	4b65      	ldr	r3, [pc, #404]	; (8008494 <_dtoa_r+0x62c>)
 8008300:	2200      	movs	r2, #0
 8008302:	4640      	mov	r0, r8
 8008304:	4649      	mov	r1, r9
 8008306:	f7f8 f987 	bl	8000618 <__aeabi_dmul>
 800830a:	4652      	mov	r2, sl
 800830c:	465b      	mov	r3, fp
 800830e:	f7f8 fc09 	bl	8000b24 <__aeabi_dcmpge>
 8008312:	9e03      	ldr	r6, [sp, #12]
 8008314:	4637      	mov	r7, r6
 8008316:	2800      	cmp	r0, #0
 8008318:	f040 8245 	bne.w	80087a6 <_dtoa_r+0x93e>
 800831c:	9d01      	ldr	r5, [sp, #4]
 800831e:	2331      	movs	r3, #49	; 0x31
 8008320:	f805 3b01 	strb.w	r3, [r5], #1
 8008324:	9b00      	ldr	r3, [sp, #0]
 8008326:	3301      	adds	r3, #1
 8008328:	9300      	str	r3, [sp, #0]
 800832a:	e240      	b.n	80087ae <_dtoa_r+0x946>
 800832c:	07f2      	lsls	r2, r6, #31
 800832e:	d505      	bpl.n	800833c <_dtoa_r+0x4d4>
 8008330:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008334:	f7f8 f970 	bl	8000618 <__aeabi_dmul>
 8008338:	3501      	adds	r5, #1
 800833a:	2301      	movs	r3, #1
 800833c:	1076      	asrs	r6, r6, #1
 800833e:	3708      	adds	r7, #8
 8008340:	e777      	b.n	8008232 <_dtoa_r+0x3ca>
 8008342:	2502      	movs	r5, #2
 8008344:	e779      	b.n	800823a <_dtoa_r+0x3d2>
 8008346:	9f00      	ldr	r7, [sp, #0]
 8008348:	9e03      	ldr	r6, [sp, #12]
 800834a:	e794      	b.n	8008276 <_dtoa_r+0x40e>
 800834c:	9901      	ldr	r1, [sp, #4]
 800834e:	4b4c      	ldr	r3, [pc, #304]	; (8008480 <_dtoa_r+0x618>)
 8008350:	4431      	add	r1, r6
 8008352:	910d      	str	r1, [sp, #52]	; 0x34
 8008354:	9908      	ldr	r1, [sp, #32]
 8008356:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800835a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800835e:	2900      	cmp	r1, #0
 8008360:	d043      	beq.n	80083ea <_dtoa_r+0x582>
 8008362:	494d      	ldr	r1, [pc, #308]	; (8008498 <_dtoa_r+0x630>)
 8008364:	2000      	movs	r0, #0
 8008366:	f7f8 fa81 	bl	800086c <__aeabi_ddiv>
 800836a:	4652      	mov	r2, sl
 800836c:	465b      	mov	r3, fp
 800836e:	f7f7 ff9b 	bl	80002a8 <__aeabi_dsub>
 8008372:	9d01      	ldr	r5, [sp, #4]
 8008374:	4682      	mov	sl, r0
 8008376:	468b      	mov	fp, r1
 8008378:	4649      	mov	r1, r9
 800837a:	4640      	mov	r0, r8
 800837c:	f7f8 fbfc 	bl	8000b78 <__aeabi_d2iz>
 8008380:	4606      	mov	r6, r0
 8008382:	f7f8 f8df 	bl	8000544 <__aeabi_i2d>
 8008386:	4602      	mov	r2, r0
 8008388:	460b      	mov	r3, r1
 800838a:	4640      	mov	r0, r8
 800838c:	4649      	mov	r1, r9
 800838e:	f7f7 ff8b 	bl	80002a8 <__aeabi_dsub>
 8008392:	3630      	adds	r6, #48	; 0x30
 8008394:	f805 6b01 	strb.w	r6, [r5], #1
 8008398:	4652      	mov	r2, sl
 800839a:	465b      	mov	r3, fp
 800839c:	4680      	mov	r8, r0
 800839e:	4689      	mov	r9, r1
 80083a0:	f7f8 fbac 	bl	8000afc <__aeabi_dcmplt>
 80083a4:	2800      	cmp	r0, #0
 80083a6:	d163      	bne.n	8008470 <_dtoa_r+0x608>
 80083a8:	4642      	mov	r2, r8
 80083aa:	464b      	mov	r3, r9
 80083ac:	4936      	ldr	r1, [pc, #216]	; (8008488 <_dtoa_r+0x620>)
 80083ae:	2000      	movs	r0, #0
 80083b0:	f7f7 ff7a 	bl	80002a8 <__aeabi_dsub>
 80083b4:	4652      	mov	r2, sl
 80083b6:	465b      	mov	r3, fp
 80083b8:	f7f8 fba0 	bl	8000afc <__aeabi_dcmplt>
 80083bc:	2800      	cmp	r0, #0
 80083be:	f040 80b5 	bne.w	800852c <_dtoa_r+0x6c4>
 80083c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083c4:	429d      	cmp	r5, r3
 80083c6:	d081      	beq.n	80082cc <_dtoa_r+0x464>
 80083c8:	4b30      	ldr	r3, [pc, #192]	; (800848c <_dtoa_r+0x624>)
 80083ca:	2200      	movs	r2, #0
 80083cc:	4650      	mov	r0, sl
 80083ce:	4659      	mov	r1, fp
 80083d0:	f7f8 f922 	bl	8000618 <__aeabi_dmul>
 80083d4:	4b2d      	ldr	r3, [pc, #180]	; (800848c <_dtoa_r+0x624>)
 80083d6:	4682      	mov	sl, r0
 80083d8:	468b      	mov	fp, r1
 80083da:	4640      	mov	r0, r8
 80083dc:	4649      	mov	r1, r9
 80083de:	2200      	movs	r2, #0
 80083e0:	f7f8 f91a 	bl	8000618 <__aeabi_dmul>
 80083e4:	4680      	mov	r8, r0
 80083e6:	4689      	mov	r9, r1
 80083e8:	e7c6      	b.n	8008378 <_dtoa_r+0x510>
 80083ea:	4650      	mov	r0, sl
 80083ec:	4659      	mov	r1, fp
 80083ee:	f7f8 f913 	bl	8000618 <__aeabi_dmul>
 80083f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083f4:	9d01      	ldr	r5, [sp, #4]
 80083f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80083f8:	4682      	mov	sl, r0
 80083fa:	468b      	mov	fp, r1
 80083fc:	4649      	mov	r1, r9
 80083fe:	4640      	mov	r0, r8
 8008400:	f7f8 fbba 	bl	8000b78 <__aeabi_d2iz>
 8008404:	4606      	mov	r6, r0
 8008406:	f7f8 f89d 	bl	8000544 <__aeabi_i2d>
 800840a:	3630      	adds	r6, #48	; 0x30
 800840c:	4602      	mov	r2, r0
 800840e:	460b      	mov	r3, r1
 8008410:	4640      	mov	r0, r8
 8008412:	4649      	mov	r1, r9
 8008414:	f7f7 ff48 	bl	80002a8 <__aeabi_dsub>
 8008418:	f805 6b01 	strb.w	r6, [r5], #1
 800841c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800841e:	429d      	cmp	r5, r3
 8008420:	4680      	mov	r8, r0
 8008422:	4689      	mov	r9, r1
 8008424:	f04f 0200 	mov.w	r2, #0
 8008428:	d124      	bne.n	8008474 <_dtoa_r+0x60c>
 800842a:	4b1b      	ldr	r3, [pc, #108]	; (8008498 <_dtoa_r+0x630>)
 800842c:	4650      	mov	r0, sl
 800842e:	4659      	mov	r1, fp
 8008430:	f7f7 ff3c 	bl	80002ac <__adddf3>
 8008434:	4602      	mov	r2, r0
 8008436:	460b      	mov	r3, r1
 8008438:	4640      	mov	r0, r8
 800843a:	4649      	mov	r1, r9
 800843c:	f7f8 fb7c 	bl	8000b38 <__aeabi_dcmpgt>
 8008440:	2800      	cmp	r0, #0
 8008442:	d173      	bne.n	800852c <_dtoa_r+0x6c4>
 8008444:	4652      	mov	r2, sl
 8008446:	465b      	mov	r3, fp
 8008448:	4913      	ldr	r1, [pc, #76]	; (8008498 <_dtoa_r+0x630>)
 800844a:	2000      	movs	r0, #0
 800844c:	f7f7 ff2c 	bl	80002a8 <__aeabi_dsub>
 8008450:	4602      	mov	r2, r0
 8008452:	460b      	mov	r3, r1
 8008454:	4640      	mov	r0, r8
 8008456:	4649      	mov	r1, r9
 8008458:	f7f8 fb50 	bl	8000afc <__aeabi_dcmplt>
 800845c:	2800      	cmp	r0, #0
 800845e:	f43f af35 	beq.w	80082cc <_dtoa_r+0x464>
 8008462:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008464:	1e6b      	subs	r3, r5, #1
 8008466:	930f      	str	r3, [sp, #60]	; 0x3c
 8008468:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800846c:	2b30      	cmp	r3, #48	; 0x30
 800846e:	d0f8      	beq.n	8008462 <_dtoa_r+0x5fa>
 8008470:	9700      	str	r7, [sp, #0]
 8008472:	e049      	b.n	8008508 <_dtoa_r+0x6a0>
 8008474:	4b05      	ldr	r3, [pc, #20]	; (800848c <_dtoa_r+0x624>)
 8008476:	f7f8 f8cf 	bl	8000618 <__aeabi_dmul>
 800847a:	4680      	mov	r8, r0
 800847c:	4689      	mov	r9, r1
 800847e:	e7bd      	b.n	80083fc <_dtoa_r+0x594>
 8008480:	0800b230 	.word	0x0800b230
 8008484:	0800b208 	.word	0x0800b208
 8008488:	3ff00000 	.word	0x3ff00000
 800848c:	40240000 	.word	0x40240000
 8008490:	401c0000 	.word	0x401c0000
 8008494:	40140000 	.word	0x40140000
 8008498:	3fe00000 	.word	0x3fe00000
 800849c:	9d01      	ldr	r5, [sp, #4]
 800849e:	4656      	mov	r6, sl
 80084a0:	465f      	mov	r7, fp
 80084a2:	4642      	mov	r2, r8
 80084a4:	464b      	mov	r3, r9
 80084a6:	4630      	mov	r0, r6
 80084a8:	4639      	mov	r1, r7
 80084aa:	f7f8 f9df 	bl	800086c <__aeabi_ddiv>
 80084ae:	f7f8 fb63 	bl	8000b78 <__aeabi_d2iz>
 80084b2:	4682      	mov	sl, r0
 80084b4:	f7f8 f846 	bl	8000544 <__aeabi_i2d>
 80084b8:	4642      	mov	r2, r8
 80084ba:	464b      	mov	r3, r9
 80084bc:	f7f8 f8ac 	bl	8000618 <__aeabi_dmul>
 80084c0:	4602      	mov	r2, r0
 80084c2:	460b      	mov	r3, r1
 80084c4:	4630      	mov	r0, r6
 80084c6:	4639      	mov	r1, r7
 80084c8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80084cc:	f7f7 feec 	bl	80002a8 <__aeabi_dsub>
 80084d0:	f805 6b01 	strb.w	r6, [r5], #1
 80084d4:	9e01      	ldr	r6, [sp, #4]
 80084d6:	9f03      	ldr	r7, [sp, #12]
 80084d8:	1bae      	subs	r6, r5, r6
 80084da:	42b7      	cmp	r7, r6
 80084dc:	4602      	mov	r2, r0
 80084de:	460b      	mov	r3, r1
 80084e0:	d135      	bne.n	800854e <_dtoa_r+0x6e6>
 80084e2:	f7f7 fee3 	bl	80002ac <__adddf3>
 80084e6:	4642      	mov	r2, r8
 80084e8:	464b      	mov	r3, r9
 80084ea:	4606      	mov	r6, r0
 80084ec:	460f      	mov	r7, r1
 80084ee:	f7f8 fb23 	bl	8000b38 <__aeabi_dcmpgt>
 80084f2:	b9d0      	cbnz	r0, 800852a <_dtoa_r+0x6c2>
 80084f4:	4642      	mov	r2, r8
 80084f6:	464b      	mov	r3, r9
 80084f8:	4630      	mov	r0, r6
 80084fa:	4639      	mov	r1, r7
 80084fc:	f7f8 faf4 	bl	8000ae8 <__aeabi_dcmpeq>
 8008500:	b110      	cbz	r0, 8008508 <_dtoa_r+0x6a0>
 8008502:	f01a 0f01 	tst.w	sl, #1
 8008506:	d110      	bne.n	800852a <_dtoa_r+0x6c2>
 8008508:	4620      	mov	r0, r4
 800850a:	ee18 1a10 	vmov	r1, s16
 800850e:	f001 f885 	bl	800961c <_Bfree>
 8008512:	2300      	movs	r3, #0
 8008514:	9800      	ldr	r0, [sp, #0]
 8008516:	702b      	strb	r3, [r5, #0]
 8008518:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800851a:	3001      	adds	r0, #1
 800851c:	6018      	str	r0, [r3, #0]
 800851e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008520:	2b00      	cmp	r3, #0
 8008522:	f43f acf1 	beq.w	8007f08 <_dtoa_r+0xa0>
 8008526:	601d      	str	r5, [r3, #0]
 8008528:	e4ee      	b.n	8007f08 <_dtoa_r+0xa0>
 800852a:	9f00      	ldr	r7, [sp, #0]
 800852c:	462b      	mov	r3, r5
 800852e:	461d      	mov	r5, r3
 8008530:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008534:	2a39      	cmp	r2, #57	; 0x39
 8008536:	d106      	bne.n	8008546 <_dtoa_r+0x6de>
 8008538:	9a01      	ldr	r2, [sp, #4]
 800853a:	429a      	cmp	r2, r3
 800853c:	d1f7      	bne.n	800852e <_dtoa_r+0x6c6>
 800853e:	9901      	ldr	r1, [sp, #4]
 8008540:	2230      	movs	r2, #48	; 0x30
 8008542:	3701      	adds	r7, #1
 8008544:	700a      	strb	r2, [r1, #0]
 8008546:	781a      	ldrb	r2, [r3, #0]
 8008548:	3201      	adds	r2, #1
 800854a:	701a      	strb	r2, [r3, #0]
 800854c:	e790      	b.n	8008470 <_dtoa_r+0x608>
 800854e:	4ba6      	ldr	r3, [pc, #664]	; (80087e8 <_dtoa_r+0x980>)
 8008550:	2200      	movs	r2, #0
 8008552:	f7f8 f861 	bl	8000618 <__aeabi_dmul>
 8008556:	2200      	movs	r2, #0
 8008558:	2300      	movs	r3, #0
 800855a:	4606      	mov	r6, r0
 800855c:	460f      	mov	r7, r1
 800855e:	f7f8 fac3 	bl	8000ae8 <__aeabi_dcmpeq>
 8008562:	2800      	cmp	r0, #0
 8008564:	d09d      	beq.n	80084a2 <_dtoa_r+0x63a>
 8008566:	e7cf      	b.n	8008508 <_dtoa_r+0x6a0>
 8008568:	9a08      	ldr	r2, [sp, #32]
 800856a:	2a00      	cmp	r2, #0
 800856c:	f000 80d7 	beq.w	800871e <_dtoa_r+0x8b6>
 8008570:	9a06      	ldr	r2, [sp, #24]
 8008572:	2a01      	cmp	r2, #1
 8008574:	f300 80ba 	bgt.w	80086ec <_dtoa_r+0x884>
 8008578:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800857a:	2a00      	cmp	r2, #0
 800857c:	f000 80b2 	beq.w	80086e4 <_dtoa_r+0x87c>
 8008580:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008584:	9e07      	ldr	r6, [sp, #28]
 8008586:	9d04      	ldr	r5, [sp, #16]
 8008588:	9a04      	ldr	r2, [sp, #16]
 800858a:	441a      	add	r2, r3
 800858c:	9204      	str	r2, [sp, #16]
 800858e:	9a05      	ldr	r2, [sp, #20]
 8008590:	2101      	movs	r1, #1
 8008592:	441a      	add	r2, r3
 8008594:	4620      	mov	r0, r4
 8008596:	9205      	str	r2, [sp, #20]
 8008598:	f001 f942 	bl	8009820 <__i2b>
 800859c:	4607      	mov	r7, r0
 800859e:	2d00      	cmp	r5, #0
 80085a0:	dd0c      	ble.n	80085bc <_dtoa_r+0x754>
 80085a2:	9b05      	ldr	r3, [sp, #20]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	dd09      	ble.n	80085bc <_dtoa_r+0x754>
 80085a8:	42ab      	cmp	r3, r5
 80085aa:	9a04      	ldr	r2, [sp, #16]
 80085ac:	bfa8      	it	ge
 80085ae:	462b      	movge	r3, r5
 80085b0:	1ad2      	subs	r2, r2, r3
 80085b2:	9204      	str	r2, [sp, #16]
 80085b4:	9a05      	ldr	r2, [sp, #20]
 80085b6:	1aed      	subs	r5, r5, r3
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	9305      	str	r3, [sp, #20]
 80085bc:	9b07      	ldr	r3, [sp, #28]
 80085be:	b31b      	cbz	r3, 8008608 <_dtoa_r+0x7a0>
 80085c0:	9b08      	ldr	r3, [sp, #32]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	f000 80af 	beq.w	8008726 <_dtoa_r+0x8be>
 80085c8:	2e00      	cmp	r6, #0
 80085ca:	dd13      	ble.n	80085f4 <_dtoa_r+0x78c>
 80085cc:	4639      	mov	r1, r7
 80085ce:	4632      	mov	r2, r6
 80085d0:	4620      	mov	r0, r4
 80085d2:	f001 f9e5 	bl	80099a0 <__pow5mult>
 80085d6:	ee18 2a10 	vmov	r2, s16
 80085da:	4601      	mov	r1, r0
 80085dc:	4607      	mov	r7, r0
 80085de:	4620      	mov	r0, r4
 80085e0:	f001 f934 	bl	800984c <__multiply>
 80085e4:	ee18 1a10 	vmov	r1, s16
 80085e8:	4680      	mov	r8, r0
 80085ea:	4620      	mov	r0, r4
 80085ec:	f001 f816 	bl	800961c <_Bfree>
 80085f0:	ee08 8a10 	vmov	s16, r8
 80085f4:	9b07      	ldr	r3, [sp, #28]
 80085f6:	1b9a      	subs	r2, r3, r6
 80085f8:	d006      	beq.n	8008608 <_dtoa_r+0x7a0>
 80085fa:	ee18 1a10 	vmov	r1, s16
 80085fe:	4620      	mov	r0, r4
 8008600:	f001 f9ce 	bl	80099a0 <__pow5mult>
 8008604:	ee08 0a10 	vmov	s16, r0
 8008608:	2101      	movs	r1, #1
 800860a:	4620      	mov	r0, r4
 800860c:	f001 f908 	bl	8009820 <__i2b>
 8008610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008612:	2b00      	cmp	r3, #0
 8008614:	4606      	mov	r6, r0
 8008616:	f340 8088 	ble.w	800872a <_dtoa_r+0x8c2>
 800861a:	461a      	mov	r2, r3
 800861c:	4601      	mov	r1, r0
 800861e:	4620      	mov	r0, r4
 8008620:	f001 f9be 	bl	80099a0 <__pow5mult>
 8008624:	9b06      	ldr	r3, [sp, #24]
 8008626:	2b01      	cmp	r3, #1
 8008628:	4606      	mov	r6, r0
 800862a:	f340 8081 	ble.w	8008730 <_dtoa_r+0x8c8>
 800862e:	f04f 0800 	mov.w	r8, #0
 8008632:	6933      	ldr	r3, [r6, #16]
 8008634:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008638:	6918      	ldr	r0, [r3, #16]
 800863a:	f001 f8a1 	bl	8009780 <__hi0bits>
 800863e:	f1c0 0020 	rsb	r0, r0, #32
 8008642:	9b05      	ldr	r3, [sp, #20]
 8008644:	4418      	add	r0, r3
 8008646:	f010 001f 	ands.w	r0, r0, #31
 800864a:	f000 8092 	beq.w	8008772 <_dtoa_r+0x90a>
 800864e:	f1c0 0320 	rsb	r3, r0, #32
 8008652:	2b04      	cmp	r3, #4
 8008654:	f340 808a 	ble.w	800876c <_dtoa_r+0x904>
 8008658:	f1c0 001c 	rsb	r0, r0, #28
 800865c:	9b04      	ldr	r3, [sp, #16]
 800865e:	4403      	add	r3, r0
 8008660:	9304      	str	r3, [sp, #16]
 8008662:	9b05      	ldr	r3, [sp, #20]
 8008664:	4403      	add	r3, r0
 8008666:	4405      	add	r5, r0
 8008668:	9305      	str	r3, [sp, #20]
 800866a:	9b04      	ldr	r3, [sp, #16]
 800866c:	2b00      	cmp	r3, #0
 800866e:	dd07      	ble.n	8008680 <_dtoa_r+0x818>
 8008670:	ee18 1a10 	vmov	r1, s16
 8008674:	461a      	mov	r2, r3
 8008676:	4620      	mov	r0, r4
 8008678:	f001 f9ec 	bl	8009a54 <__lshift>
 800867c:	ee08 0a10 	vmov	s16, r0
 8008680:	9b05      	ldr	r3, [sp, #20]
 8008682:	2b00      	cmp	r3, #0
 8008684:	dd05      	ble.n	8008692 <_dtoa_r+0x82a>
 8008686:	4631      	mov	r1, r6
 8008688:	461a      	mov	r2, r3
 800868a:	4620      	mov	r0, r4
 800868c:	f001 f9e2 	bl	8009a54 <__lshift>
 8008690:	4606      	mov	r6, r0
 8008692:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008694:	2b00      	cmp	r3, #0
 8008696:	d06e      	beq.n	8008776 <_dtoa_r+0x90e>
 8008698:	ee18 0a10 	vmov	r0, s16
 800869c:	4631      	mov	r1, r6
 800869e:	f001 fa49 	bl	8009b34 <__mcmp>
 80086a2:	2800      	cmp	r0, #0
 80086a4:	da67      	bge.n	8008776 <_dtoa_r+0x90e>
 80086a6:	9b00      	ldr	r3, [sp, #0]
 80086a8:	3b01      	subs	r3, #1
 80086aa:	ee18 1a10 	vmov	r1, s16
 80086ae:	9300      	str	r3, [sp, #0]
 80086b0:	220a      	movs	r2, #10
 80086b2:	2300      	movs	r3, #0
 80086b4:	4620      	mov	r0, r4
 80086b6:	f000 ffd3 	bl	8009660 <__multadd>
 80086ba:	9b08      	ldr	r3, [sp, #32]
 80086bc:	ee08 0a10 	vmov	s16, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	f000 81b1 	beq.w	8008a28 <_dtoa_r+0xbc0>
 80086c6:	2300      	movs	r3, #0
 80086c8:	4639      	mov	r1, r7
 80086ca:	220a      	movs	r2, #10
 80086cc:	4620      	mov	r0, r4
 80086ce:	f000 ffc7 	bl	8009660 <__multadd>
 80086d2:	9b02      	ldr	r3, [sp, #8]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	4607      	mov	r7, r0
 80086d8:	f300 808e 	bgt.w	80087f8 <_dtoa_r+0x990>
 80086dc:	9b06      	ldr	r3, [sp, #24]
 80086de:	2b02      	cmp	r3, #2
 80086e0:	dc51      	bgt.n	8008786 <_dtoa_r+0x91e>
 80086e2:	e089      	b.n	80087f8 <_dtoa_r+0x990>
 80086e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80086e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80086ea:	e74b      	b.n	8008584 <_dtoa_r+0x71c>
 80086ec:	9b03      	ldr	r3, [sp, #12]
 80086ee:	1e5e      	subs	r6, r3, #1
 80086f0:	9b07      	ldr	r3, [sp, #28]
 80086f2:	42b3      	cmp	r3, r6
 80086f4:	bfbf      	itttt	lt
 80086f6:	9b07      	ldrlt	r3, [sp, #28]
 80086f8:	9607      	strlt	r6, [sp, #28]
 80086fa:	1af2      	sublt	r2, r6, r3
 80086fc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80086fe:	bfb6      	itet	lt
 8008700:	189b      	addlt	r3, r3, r2
 8008702:	1b9e      	subge	r6, r3, r6
 8008704:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008706:	9b03      	ldr	r3, [sp, #12]
 8008708:	bfb8      	it	lt
 800870a:	2600      	movlt	r6, #0
 800870c:	2b00      	cmp	r3, #0
 800870e:	bfb7      	itett	lt
 8008710:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008714:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008718:	1a9d      	sublt	r5, r3, r2
 800871a:	2300      	movlt	r3, #0
 800871c:	e734      	b.n	8008588 <_dtoa_r+0x720>
 800871e:	9e07      	ldr	r6, [sp, #28]
 8008720:	9d04      	ldr	r5, [sp, #16]
 8008722:	9f08      	ldr	r7, [sp, #32]
 8008724:	e73b      	b.n	800859e <_dtoa_r+0x736>
 8008726:	9a07      	ldr	r2, [sp, #28]
 8008728:	e767      	b.n	80085fa <_dtoa_r+0x792>
 800872a:	9b06      	ldr	r3, [sp, #24]
 800872c:	2b01      	cmp	r3, #1
 800872e:	dc18      	bgt.n	8008762 <_dtoa_r+0x8fa>
 8008730:	f1ba 0f00 	cmp.w	sl, #0
 8008734:	d115      	bne.n	8008762 <_dtoa_r+0x8fa>
 8008736:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800873a:	b993      	cbnz	r3, 8008762 <_dtoa_r+0x8fa>
 800873c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008740:	0d1b      	lsrs	r3, r3, #20
 8008742:	051b      	lsls	r3, r3, #20
 8008744:	b183      	cbz	r3, 8008768 <_dtoa_r+0x900>
 8008746:	9b04      	ldr	r3, [sp, #16]
 8008748:	3301      	adds	r3, #1
 800874a:	9304      	str	r3, [sp, #16]
 800874c:	9b05      	ldr	r3, [sp, #20]
 800874e:	3301      	adds	r3, #1
 8008750:	9305      	str	r3, [sp, #20]
 8008752:	f04f 0801 	mov.w	r8, #1
 8008756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008758:	2b00      	cmp	r3, #0
 800875a:	f47f af6a 	bne.w	8008632 <_dtoa_r+0x7ca>
 800875e:	2001      	movs	r0, #1
 8008760:	e76f      	b.n	8008642 <_dtoa_r+0x7da>
 8008762:	f04f 0800 	mov.w	r8, #0
 8008766:	e7f6      	b.n	8008756 <_dtoa_r+0x8ee>
 8008768:	4698      	mov	r8, r3
 800876a:	e7f4      	b.n	8008756 <_dtoa_r+0x8ee>
 800876c:	f43f af7d 	beq.w	800866a <_dtoa_r+0x802>
 8008770:	4618      	mov	r0, r3
 8008772:	301c      	adds	r0, #28
 8008774:	e772      	b.n	800865c <_dtoa_r+0x7f4>
 8008776:	9b03      	ldr	r3, [sp, #12]
 8008778:	2b00      	cmp	r3, #0
 800877a:	dc37      	bgt.n	80087ec <_dtoa_r+0x984>
 800877c:	9b06      	ldr	r3, [sp, #24]
 800877e:	2b02      	cmp	r3, #2
 8008780:	dd34      	ble.n	80087ec <_dtoa_r+0x984>
 8008782:	9b03      	ldr	r3, [sp, #12]
 8008784:	9302      	str	r3, [sp, #8]
 8008786:	9b02      	ldr	r3, [sp, #8]
 8008788:	b96b      	cbnz	r3, 80087a6 <_dtoa_r+0x93e>
 800878a:	4631      	mov	r1, r6
 800878c:	2205      	movs	r2, #5
 800878e:	4620      	mov	r0, r4
 8008790:	f000 ff66 	bl	8009660 <__multadd>
 8008794:	4601      	mov	r1, r0
 8008796:	4606      	mov	r6, r0
 8008798:	ee18 0a10 	vmov	r0, s16
 800879c:	f001 f9ca 	bl	8009b34 <__mcmp>
 80087a0:	2800      	cmp	r0, #0
 80087a2:	f73f adbb 	bgt.w	800831c <_dtoa_r+0x4b4>
 80087a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087a8:	9d01      	ldr	r5, [sp, #4]
 80087aa:	43db      	mvns	r3, r3
 80087ac:	9300      	str	r3, [sp, #0]
 80087ae:	f04f 0800 	mov.w	r8, #0
 80087b2:	4631      	mov	r1, r6
 80087b4:	4620      	mov	r0, r4
 80087b6:	f000 ff31 	bl	800961c <_Bfree>
 80087ba:	2f00      	cmp	r7, #0
 80087bc:	f43f aea4 	beq.w	8008508 <_dtoa_r+0x6a0>
 80087c0:	f1b8 0f00 	cmp.w	r8, #0
 80087c4:	d005      	beq.n	80087d2 <_dtoa_r+0x96a>
 80087c6:	45b8      	cmp	r8, r7
 80087c8:	d003      	beq.n	80087d2 <_dtoa_r+0x96a>
 80087ca:	4641      	mov	r1, r8
 80087cc:	4620      	mov	r0, r4
 80087ce:	f000 ff25 	bl	800961c <_Bfree>
 80087d2:	4639      	mov	r1, r7
 80087d4:	4620      	mov	r0, r4
 80087d6:	f000 ff21 	bl	800961c <_Bfree>
 80087da:	e695      	b.n	8008508 <_dtoa_r+0x6a0>
 80087dc:	2600      	movs	r6, #0
 80087de:	4637      	mov	r7, r6
 80087e0:	e7e1      	b.n	80087a6 <_dtoa_r+0x93e>
 80087e2:	9700      	str	r7, [sp, #0]
 80087e4:	4637      	mov	r7, r6
 80087e6:	e599      	b.n	800831c <_dtoa_r+0x4b4>
 80087e8:	40240000 	.word	0x40240000
 80087ec:	9b08      	ldr	r3, [sp, #32]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f000 80ca 	beq.w	8008988 <_dtoa_r+0xb20>
 80087f4:	9b03      	ldr	r3, [sp, #12]
 80087f6:	9302      	str	r3, [sp, #8]
 80087f8:	2d00      	cmp	r5, #0
 80087fa:	dd05      	ble.n	8008808 <_dtoa_r+0x9a0>
 80087fc:	4639      	mov	r1, r7
 80087fe:	462a      	mov	r2, r5
 8008800:	4620      	mov	r0, r4
 8008802:	f001 f927 	bl	8009a54 <__lshift>
 8008806:	4607      	mov	r7, r0
 8008808:	f1b8 0f00 	cmp.w	r8, #0
 800880c:	d05b      	beq.n	80088c6 <_dtoa_r+0xa5e>
 800880e:	6879      	ldr	r1, [r7, #4]
 8008810:	4620      	mov	r0, r4
 8008812:	f000 fec3 	bl	800959c <_Balloc>
 8008816:	4605      	mov	r5, r0
 8008818:	b928      	cbnz	r0, 8008826 <_dtoa_r+0x9be>
 800881a:	4b87      	ldr	r3, [pc, #540]	; (8008a38 <_dtoa_r+0xbd0>)
 800881c:	4602      	mov	r2, r0
 800881e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008822:	f7ff bb3b 	b.w	8007e9c <_dtoa_r+0x34>
 8008826:	693a      	ldr	r2, [r7, #16]
 8008828:	3202      	adds	r2, #2
 800882a:	0092      	lsls	r2, r2, #2
 800882c:	f107 010c 	add.w	r1, r7, #12
 8008830:	300c      	adds	r0, #12
 8008832:	f7fd fbb7 	bl	8005fa4 <memcpy>
 8008836:	2201      	movs	r2, #1
 8008838:	4629      	mov	r1, r5
 800883a:	4620      	mov	r0, r4
 800883c:	f001 f90a 	bl	8009a54 <__lshift>
 8008840:	9b01      	ldr	r3, [sp, #4]
 8008842:	f103 0901 	add.w	r9, r3, #1
 8008846:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800884a:	4413      	add	r3, r2
 800884c:	9305      	str	r3, [sp, #20]
 800884e:	f00a 0301 	and.w	r3, sl, #1
 8008852:	46b8      	mov	r8, r7
 8008854:	9304      	str	r3, [sp, #16]
 8008856:	4607      	mov	r7, r0
 8008858:	4631      	mov	r1, r6
 800885a:	ee18 0a10 	vmov	r0, s16
 800885e:	f7ff fa77 	bl	8007d50 <quorem>
 8008862:	4641      	mov	r1, r8
 8008864:	9002      	str	r0, [sp, #8]
 8008866:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800886a:	ee18 0a10 	vmov	r0, s16
 800886e:	f001 f961 	bl	8009b34 <__mcmp>
 8008872:	463a      	mov	r2, r7
 8008874:	9003      	str	r0, [sp, #12]
 8008876:	4631      	mov	r1, r6
 8008878:	4620      	mov	r0, r4
 800887a:	f001 f977 	bl	8009b6c <__mdiff>
 800887e:	68c2      	ldr	r2, [r0, #12]
 8008880:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8008884:	4605      	mov	r5, r0
 8008886:	bb02      	cbnz	r2, 80088ca <_dtoa_r+0xa62>
 8008888:	4601      	mov	r1, r0
 800888a:	ee18 0a10 	vmov	r0, s16
 800888e:	f001 f951 	bl	8009b34 <__mcmp>
 8008892:	4602      	mov	r2, r0
 8008894:	4629      	mov	r1, r5
 8008896:	4620      	mov	r0, r4
 8008898:	9207      	str	r2, [sp, #28]
 800889a:	f000 febf 	bl	800961c <_Bfree>
 800889e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80088a2:	ea43 0102 	orr.w	r1, r3, r2
 80088a6:	9b04      	ldr	r3, [sp, #16]
 80088a8:	430b      	orrs	r3, r1
 80088aa:	464d      	mov	r5, r9
 80088ac:	d10f      	bne.n	80088ce <_dtoa_r+0xa66>
 80088ae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80088b2:	d02a      	beq.n	800890a <_dtoa_r+0xaa2>
 80088b4:	9b03      	ldr	r3, [sp, #12]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	dd02      	ble.n	80088c0 <_dtoa_r+0xa58>
 80088ba:	9b02      	ldr	r3, [sp, #8]
 80088bc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80088c0:	f88b a000 	strb.w	sl, [fp]
 80088c4:	e775      	b.n	80087b2 <_dtoa_r+0x94a>
 80088c6:	4638      	mov	r0, r7
 80088c8:	e7ba      	b.n	8008840 <_dtoa_r+0x9d8>
 80088ca:	2201      	movs	r2, #1
 80088cc:	e7e2      	b.n	8008894 <_dtoa_r+0xa2c>
 80088ce:	9b03      	ldr	r3, [sp, #12]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	db04      	blt.n	80088de <_dtoa_r+0xa76>
 80088d4:	9906      	ldr	r1, [sp, #24]
 80088d6:	430b      	orrs	r3, r1
 80088d8:	9904      	ldr	r1, [sp, #16]
 80088da:	430b      	orrs	r3, r1
 80088dc:	d122      	bne.n	8008924 <_dtoa_r+0xabc>
 80088de:	2a00      	cmp	r2, #0
 80088e0:	ddee      	ble.n	80088c0 <_dtoa_r+0xa58>
 80088e2:	ee18 1a10 	vmov	r1, s16
 80088e6:	2201      	movs	r2, #1
 80088e8:	4620      	mov	r0, r4
 80088ea:	f001 f8b3 	bl	8009a54 <__lshift>
 80088ee:	4631      	mov	r1, r6
 80088f0:	ee08 0a10 	vmov	s16, r0
 80088f4:	f001 f91e 	bl	8009b34 <__mcmp>
 80088f8:	2800      	cmp	r0, #0
 80088fa:	dc03      	bgt.n	8008904 <_dtoa_r+0xa9c>
 80088fc:	d1e0      	bne.n	80088c0 <_dtoa_r+0xa58>
 80088fe:	f01a 0f01 	tst.w	sl, #1
 8008902:	d0dd      	beq.n	80088c0 <_dtoa_r+0xa58>
 8008904:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008908:	d1d7      	bne.n	80088ba <_dtoa_r+0xa52>
 800890a:	2339      	movs	r3, #57	; 0x39
 800890c:	f88b 3000 	strb.w	r3, [fp]
 8008910:	462b      	mov	r3, r5
 8008912:	461d      	mov	r5, r3
 8008914:	3b01      	subs	r3, #1
 8008916:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800891a:	2a39      	cmp	r2, #57	; 0x39
 800891c:	d071      	beq.n	8008a02 <_dtoa_r+0xb9a>
 800891e:	3201      	adds	r2, #1
 8008920:	701a      	strb	r2, [r3, #0]
 8008922:	e746      	b.n	80087b2 <_dtoa_r+0x94a>
 8008924:	2a00      	cmp	r2, #0
 8008926:	dd07      	ble.n	8008938 <_dtoa_r+0xad0>
 8008928:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800892c:	d0ed      	beq.n	800890a <_dtoa_r+0xaa2>
 800892e:	f10a 0301 	add.w	r3, sl, #1
 8008932:	f88b 3000 	strb.w	r3, [fp]
 8008936:	e73c      	b.n	80087b2 <_dtoa_r+0x94a>
 8008938:	9b05      	ldr	r3, [sp, #20]
 800893a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800893e:	4599      	cmp	r9, r3
 8008940:	d047      	beq.n	80089d2 <_dtoa_r+0xb6a>
 8008942:	ee18 1a10 	vmov	r1, s16
 8008946:	2300      	movs	r3, #0
 8008948:	220a      	movs	r2, #10
 800894a:	4620      	mov	r0, r4
 800894c:	f000 fe88 	bl	8009660 <__multadd>
 8008950:	45b8      	cmp	r8, r7
 8008952:	ee08 0a10 	vmov	s16, r0
 8008956:	f04f 0300 	mov.w	r3, #0
 800895a:	f04f 020a 	mov.w	r2, #10
 800895e:	4641      	mov	r1, r8
 8008960:	4620      	mov	r0, r4
 8008962:	d106      	bne.n	8008972 <_dtoa_r+0xb0a>
 8008964:	f000 fe7c 	bl	8009660 <__multadd>
 8008968:	4680      	mov	r8, r0
 800896a:	4607      	mov	r7, r0
 800896c:	f109 0901 	add.w	r9, r9, #1
 8008970:	e772      	b.n	8008858 <_dtoa_r+0x9f0>
 8008972:	f000 fe75 	bl	8009660 <__multadd>
 8008976:	4639      	mov	r1, r7
 8008978:	4680      	mov	r8, r0
 800897a:	2300      	movs	r3, #0
 800897c:	220a      	movs	r2, #10
 800897e:	4620      	mov	r0, r4
 8008980:	f000 fe6e 	bl	8009660 <__multadd>
 8008984:	4607      	mov	r7, r0
 8008986:	e7f1      	b.n	800896c <_dtoa_r+0xb04>
 8008988:	9b03      	ldr	r3, [sp, #12]
 800898a:	9302      	str	r3, [sp, #8]
 800898c:	9d01      	ldr	r5, [sp, #4]
 800898e:	ee18 0a10 	vmov	r0, s16
 8008992:	4631      	mov	r1, r6
 8008994:	f7ff f9dc 	bl	8007d50 <quorem>
 8008998:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800899c:	9b01      	ldr	r3, [sp, #4]
 800899e:	f805 ab01 	strb.w	sl, [r5], #1
 80089a2:	1aea      	subs	r2, r5, r3
 80089a4:	9b02      	ldr	r3, [sp, #8]
 80089a6:	4293      	cmp	r3, r2
 80089a8:	dd09      	ble.n	80089be <_dtoa_r+0xb56>
 80089aa:	ee18 1a10 	vmov	r1, s16
 80089ae:	2300      	movs	r3, #0
 80089b0:	220a      	movs	r2, #10
 80089b2:	4620      	mov	r0, r4
 80089b4:	f000 fe54 	bl	8009660 <__multadd>
 80089b8:	ee08 0a10 	vmov	s16, r0
 80089bc:	e7e7      	b.n	800898e <_dtoa_r+0xb26>
 80089be:	9b02      	ldr	r3, [sp, #8]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	bfc8      	it	gt
 80089c4:	461d      	movgt	r5, r3
 80089c6:	9b01      	ldr	r3, [sp, #4]
 80089c8:	bfd8      	it	le
 80089ca:	2501      	movle	r5, #1
 80089cc:	441d      	add	r5, r3
 80089ce:	f04f 0800 	mov.w	r8, #0
 80089d2:	ee18 1a10 	vmov	r1, s16
 80089d6:	2201      	movs	r2, #1
 80089d8:	4620      	mov	r0, r4
 80089da:	f001 f83b 	bl	8009a54 <__lshift>
 80089de:	4631      	mov	r1, r6
 80089e0:	ee08 0a10 	vmov	s16, r0
 80089e4:	f001 f8a6 	bl	8009b34 <__mcmp>
 80089e8:	2800      	cmp	r0, #0
 80089ea:	dc91      	bgt.n	8008910 <_dtoa_r+0xaa8>
 80089ec:	d102      	bne.n	80089f4 <_dtoa_r+0xb8c>
 80089ee:	f01a 0f01 	tst.w	sl, #1
 80089f2:	d18d      	bne.n	8008910 <_dtoa_r+0xaa8>
 80089f4:	462b      	mov	r3, r5
 80089f6:	461d      	mov	r5, r3
 80089f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089fc:	2a30      	cmp	r2, #48	; 0x30
 80089fe:	d0fa      	beq.n	80089f6 <_dtoa_r+0xb8e>
 8008a00:	e6d7      	b.n	80087b2 <_dtoa_r+0x94a>
 8008a02:	9a01      	ldr	r2, [sp, #4]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d184      	bne.n	8008912 <_dtoa_r+0xaaa>
 8008a08:	9b00      	ldr	r3, [sp, #0]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	9300      	str	r3, [sp, #0]
 8008a0e:	2331      	movs	r3, #49	; 0x31
 8008a10:	7013      	strb	r3, [r2, #0]
 8008a12:	e6ce      	b.n	80087b2 <_dtoa_r+0x94a>
 8008a14:	4b09      	ldr	r3, [pc, #36]	; (8008a3c <_dtoa_r+0xbd4>)
 8008a16:	f7ff ba95 	b.w	8007f44 <_dtoa_r+0xdc>
 8008a1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f47f aa6e 	bne.w	8007efe <_dtoa_r+0x96>
 8008a22:	4b07      	ldr	r3, [pc, #28]	; (8008a40 <_dtoa_r+0xbd8>)
 8008a24:	f7ff ba8e 	b.w	8007f44 <_dtoa_r+0xdc>
 8008a28:	9b02      	ldr	r3, [sp, #8]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	dcae      	bgt.n	800898c <_dtoa_r+0xb24>
 8008a2e:	9b06      	ldr	r3, [sp, #24]
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	f73f aea8 	bgt.w	8008786 <_dtoa_r+0x91e>
 8008a36:	e7a9      	b.n	800898c <_dtoa_r+0xb24>
 8008a38:	0800b0b8 	.word	0x0800b0b8
 8008a3c:	0800aebc 	.word	0x0800aebc
 8008a40:	0800b039 	.word	0x0800b039

08008a44 <__sflush_r>:
 8008a44:	898a      	ldrh	r2, [r1, #12]
 8008a46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a4a:	4605      	mov	r5, r0
 8008a4c:	0710      	lsls	r0, r2, #28
 8008a4e:	460c      	mov	r4, r1
 8008a50:	d458      	bmi.n	8008b04 <__sflush_r+0xc0>
 8008a52:	684b      	ldr	r3, [r1, #4]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	dc05      	bgt.n	8008a64 <__sflush_r+0x20>
 8008a58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	dc02      	bgt.n	8008a64 <__sflush_r+0x20>
 8008a5e:	2000      	movs	r0, #0
 8008a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a66:	2e00      	cmp	r6, #0
 8008a68:	d0f9      	beq.n	8008a5e <__sflush_r+0x1a>
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a70:	682f      	ldr	r7, [r5, #0]
 8008a72:	602b      	str	r3, [r5, #0]
 8008a74:	d032      	beq.n	8008adc <__sflush_r+0x98>
 8008a76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a78:	89a3      	ldrh	r3, [r4, #12]
 8008a7a:	075a      	lsls	r2, r3, #29
 8008a7c:	d505      	bpl.n	8008a8a <__sflush_r+0x46>
 8008a7e:	6863      	ldr	r3, [r4, #4]
 8008a80:	1ac0      	subs	r0, r0, r3
 8008a82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a84:	b10b      	cbz	r3, 8008a8a <__sflush_r+0x46>
 8008a86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a88:	1ac0      	subs	r0, r0, r3
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a90:	6a21      	ldr	r1, [r4, #32]
 8008a92:	4628      	mov	r0, r5
 8008a94:	47b0      	blx	r6
 8008a96:	1c43      	adds	r3, r0, #1
 8008a98:	89a3      	ldrh	r3, [r4, #12]
 8008a9a:	d106      	bne.n	8008aaa <__sflush_r+0x66>
 8008a9c:	6829      	ldr	r1, [r5, #0]
 8008a9e:	291d      	cmp	r1, #29
 8008aa0:	d82c      	bhi.n	8008afc <__sflush_r+0xb8>
 8008aa2:	4a2a      	ldr	r2, [pc, #168]	; (8008b4c <__sflush_r+0x108>)
 8008aa4:	40ca      	lsrs	r2, r1
 8008aa6:	07d6      	lsls	r6, r2, #31
 8008aa8:	d528      	bpl.n	8008afc <__sflush_r+0xb8>
 8008aaa:	2200      	movs	r2, #0
 8008aac:	6062      	str	r2, [r4, #4]
 8008aae:	04d9      	lsls	r1, r3, #19
 8008ab0:	6922      	ldr	r2, [r4, #16]
 8008ab2:	6022      	str	r2, [r4, #0]
 8008ab4:	d504      	bpl.n	8008ac0 <__sflush_r+0x7c>
 8008ab6:	1c42      	adds	r2, r0, #1
 8008ab8:	d101      	bne.n	8008abe <__sflush_r+0x7a>
 8008aba:	682b      	ldr	r3, [r5, #0]
 8008abc:	b903      	cbnz	r3, 8008ac0 <__sflush_r+0x7c>
 8008abe:	6560      	str	r0, [r4, #84]	; 0x54
 8008ac0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ac2:	602f      	str	r7, [r5, #0]
 8008ac4:	2900      	cmp	r1, #0
 8008ac6:	d0ca      	beq.n	8008a5e <__sflush_r+0x1a>
 8008ac8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008acc:	4299      	cmp	r1, r3
 8008ace:	d002      	beq.n	8008ad6 <__sflush_r+0x92>
 8008ad0:	4628      	mov	r0, r5
 8008ad2:	f001 fa3b 	bl	8009f4c <_free_r>
 8008ad6:	2000      	movs	r0, #0
 8008ad8:	6360      	str	r0, [r4, #52]	; 0x34
 8008ada:	e7c1      	b.n	8008a60 <__sflush_r+0x1c>
 8008adc:	6a21      	ldr	r1, [r4, #32]
 8008ade:	2301      	movs	r3, #1
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	47b0      	blx	r6
 8008ae4:	1c41      	adds	r1, r0, #1
 8008ae6:	d1c7      	bne.n	8008a78 <__sflush_r+0x34>
 8008ae8:	682b      	ldr	r3, [r5, #0]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d0c4      	beq.n	8008a78 <__sflush_r+0x34>
 8008aee:	2b1d      	cmp	r3, #29
 8008af0:	d001      	beq.n	8008af6 <__sflush_r+0xb2>
 8008af2:	2b16      	cmp	r3, #22
 8008af4:	d101      	bne.n	8008afa <__sflush_r+0xb6>
 8008af6:	602f      	str	r7, [r5, #0]
 8008af8:	e7b1      	b.n	8008a5e <__sflush_r+0x1a>
 8008afa:	89a3      	ldrh	r3, [r4, #12]
 8008afc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b00:	81a3      	strh	r3, [r4, #12]
 8008b02:	e7ad      	b.n	8008a60 <__sflush_r+0x1c>
 8008b04:	690f      	ldr	r7, [r1, #16]
 8008b06:	2f00      	cmp	r7, #0
 8008b08:	d0a9      	beq.n	8008a5e <__sflush_r+0x1a>
 8008b0a:	0793      	lsls	r3, r2, #30
 8008b0c:	680e      	ldr	r6, [r1, #0]
 8008b0e:	bf08      	it	eq
 8008b10:	694b      	ldreq	r3, [r1, #20]
 8008b12:	600f      	str	r7, [r1, #0]
 8008b14:	bf18      	it	ne
 8008b16:	2300      	movne	r3, #0
 8008b18:	eba6 0807 	sub.w	r8, r6, r7
 8008b1c:	608b      	str	r3, [r1, #8]
 8008b1e:	f1b8 0f00 	cmp.w	r8, #0
 8008b22:	dd9c      	ble.n	8008a5e <__sflush_r+0x1a>
 8008b24:	6a21      	ldr	r1, [r4, #32]
 8008b26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b28:	4643      	mov	r3, r8
 8008b2a:	463a      	mov	r2, r7
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	47b0      	blx	r6
 8008b30:	2800      	cmp	r0, #0
 8008b32:	dc06      	bgt.n	8008b42 <__sflush_r+0xfe>
 8008b34:	89a3      	ldrh	r3, [r4, #12]
 8008b36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b3a:	81a3      	strh	r3, [r4, #12]
 8008b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b40:	e78e      	b.n	8008a60 <__sflush_r+0x1c>
 8008b42:	4407      	add	r7, r0
 8008b44:	eba8 0800 	sub.w	r8, r8, r0
 8008b48:	e7e9      	b.n	8008b1e <__sflush_r+0xda>
 8008b4a:	bf00      	nop
 8008b4c:	20400001 	.word	0x20400001

08008b50 <_fflush_r>:
 8008b50:	b538      	push	{r3, r4, r5, lr}
 8008b52:	690b      	ldr	r3, [r1, #16]
 8008b54:	4605      	mov	r5, r0
 8008b56:	460c      	mov	r4, r1
 8008b58:	b913      	cbnz	r3, 8008b60 <_fflush_r+0x10>
 8008b5a:	2500      	movs	r5, #0
 8008b5c:	4628      	mov	r0, r5
 8008b5e:	bd38      	pop	{r3, r4, r5, pc}
 8008b60:	b118      	cbz	r0, 8008b6a <_fflush_r+0x1a>
 8008b62:	6983      	ldr	r3, [r0, #24]
 8008b64:	b90b      	cbnz	r3, 8008b6a <_fflush_r+0x1a>
 8008b66:	f000 f887 	bl	8008c78 <__sinit>
 8008b6a:	4b14      	ldr	r3, [pc, #80]	; (8008bbc <_fflush_r+0x6c>)
 8008b6c:	429c      	cmp	r4, r3
 8008b6e:	d11b      	bne.n	8008ba8 <_fflush_r+0x58>
 8008b70:	686c      	ldr	r4, [r5, #4]
 8008b72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d0ef      	beq.n	8008b5a <_fflush_r+0xa>
 8008b7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b7c:	07d0      	lsls	r0, r2, #31
 8008b7e:	d404      	bmi.n	8008b8a <_fflush_r+0x3a>
 8008b80:	0599      	lsls	r1, r3, #22
 8008b82:	d402      	bmi.n	8008b8a <_fflush_r+0x3a>
 8008b84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b86:	f000 fc88 	bl	800949a <__retarget_lock_acquire_recursive>
 8008b8a:	4628      	mov	r0, r5
 8008b8c:	4621      	mov	r1, r4
 8008b8e:	f7ff ff59 	bl	8008a44 <__sflush_r>
 8008b92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b94:	07da      	lsls	r2, r3, #31
 8008b96:	4605      	mov	r5, r0
 8008b98:	d4e0      	bmi.n	8008b5c <_fflush_r+0xc>
 8008b9a:	89a3      	ldrh	r3, [r4, #12]
 8008b9c:	059b      	lsls	r3, r3, #22
 8008b9e:	d4dd      	bmi.n	8008b5c <_fflush_r+0xc>
 8008ba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ba2:	f000 fc7b 	bl	800949c <__retarget_lock_release_recursive>
 8008ba6:	e7d9      	b.n	8008b5c <_fflush_r+0xc>
 8008ba8:	4b05      	ldr	r3, [pc, #20]	; (8008bc0 <_fflush_r+0x70>)
 8008baa:	429c      	cmp	r4, r3
 8008bac:	d101      	bne.n	8008bb2 <_fflush_r+0x62>
 8008bae:	68ac      	ldr	r4, [r5, #8]
 8008bb0:	e7df      	b.n	8008b72 <_fflush_r+0x22>
 8008bb2:	4b04      	ldr	r3, [pc, #16]	; (8008bc4 <_fflush_r+0x74>)
 8008bb4:	429c      	cmp	r4, r3
 8008bb6:	bf08      	it	eq
 8008bb8:	68ec      	ldreq	r4, [r5, #12]
 8008bba:	e7da      	b.n	8008b72 <_fflush_r+0x22>
 8008bbc:	0800b0ec 	.word	0x0800b0ec
 8008bc0:	0800b10c 	.word	0x0800b10c
 8008bc4:	0800b0cc 	.word	0x0800b0cc

08008bc8 <std>:
 8008bc8:	2300      	movs	r3, #0
 8008bca:	b510      	push	{r4, lr}
 8008bcc:	4604      	mov	r4, r0
 8008bce:	e9c0 3300 	strd	r3, r3, [r0]
 8008bd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008bd6:	6083      	str	r3, [r0, #8]
 8008bd8:	8181      	strh	r1, [r0, #12]
 8008bda:	6643      	str	r3, [r0, #100]	; 0x64
 8008bdc:	81c2      	strh	r2, [r0, #14]
 8008bde:	6183      	str	r3, [r0, #24]
 8008be0:	4619      	mov	r1, r3
 8008be2:	2208      	movs	r2, #8
 8008be4:	305c      	adds	r0, #92	; 0x5c
 8008be6:	f7fd f9eb 	bl	8005fc0 <memset>
 8008bea:	4b05      	ldr	r3, [pc, #20]	; (8008c00 <std+0x38>)
 8008bec:	6263      	str	r3, [r4, #36]	; 0x24
 8008bee:	4b05      	ldr	r3, [pc, #20]	; (8008c04 <std+0x3c>)
 8008bf0:	62a3      	str	r3, [r4, #40]	; 0x28
 8008bf2:	4b05      	ldr	r3, [pc, #20]	; (8008c08 <std+0x40>)
 8008bf4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008bf6:	4b05      	ldr	r3, [pc, #20]	; (8008c0c <std+0x44>)
 8008bf8:	6224      	str	r4, [r4, #32]
 8008bfa:	6323      	str	r3, [r4, #48]	; 0x30
 8008bfc:	bd10      	pop	{r4, pc}
 8008bfe:	bf00      	nop
 8008c00:	0800a6a9 	.word	0x0800a6a9
 8008c04:	0800a6cb 	.word	0x0800a6cb
 8008c08:	0800a703 	.word	0x0800a703
 8008c0c:	0800a727 	.word	0x0800a727

08008c10 <_cleanup_r>:
 8008c10:	4901      	ldr	r1, [pc, #4]	; (8008c18 <_cleanup_r+0x8>)
 8008c12:	f000 b8af 	b.w	8008d74 <_fwalk_reent>
 8008c16:	bf00      	nop
 8008c18:	08008b51 	.word	0x08008b51

08008c1c <__sfmoreglue>:
 8008c1c:	b570      	push	{r4, r5, r6, lr}
 8008c1e:	2268      	movs	r2, #104	; 0x68
 8008c20:	1e4d      	subs	r5, r1, #1
 8008c22:	4355      	muls	r5, r2
 8008c24:	460e      	mov	r6, r1
 8008c26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008c2a:	f001 f9fb 	bl	800a024 <_malloc_r>
 8008c2e:	4604      	mov	r4, r0
 8008c30:	b140      	cbz	r0, 8008c44 <__sfmoreglue+0x28>
 8008c32:	2100      	movs	r1, #0
 8008c34:	e9c0 1600 	strd	r1, r6, [r0]
 8008c38:	300c      	adds	r0, #12
 8008c3a:	60a0      	str	r0, [r4, #8]
 8008c3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008c40:	f7fd f9be 	bl	8005fc0 <memset>
 8008c44:	4620      	mov	r0, r4
 8008c46:	bd70      	pop	{r4, r5, r6, pc}

08008c48 <__sfp_lock_acquire>:
 8008c48:	4801      	ldr	r0, [pc, #4]	; (8008c50 <__sfp_lock_acquire+0x8>)
 8008c4a:	f000 bc26 	b.w	800949a <__retarget_lock_acquire_recursive>
 8008c4e:	bf00      	nop
 8008c50:	20001f91 	.word	0x20001f91

08008c54 <__sfp_lock_release>:
 8008c54:	4801      	ldr	r0, [pc, #4]	; (8008c5c <__sfp_lock_release+0x8>)
 8008c56:	f000 bc21 	b.w	800949c <__retarget_lock_release_recursive>
 8008c5a:	bf00      	nop
 8008c5c:	20001f91 	.word	0x20001f91

08008c60 <__sinit_lock_acquire>:
 8008c60:	4801      	ldr	r0, [pc, #4]	; (8008c68 <__sinit_lock_acquire+0x8>)
 8008c62:	f000 bc1a 	b.w	800949a <__retarget_lock_acquire_recursive>
 8008c66:	bf00      	nop
 8008c68:	20001f92 	.word	0x20001f92

08008c6c <__sinit_lock_release>:
 8008c6c:	4801      	ldr	r0, [pc, #4]	; (8008c74 <__sinit_lock_release+0x8>)
 8008c6e:	f000 bc15 	b.w	800949c <__retarget_lock_release_recursive>
 8008c72:	bf00      	nop
 8008c74:	20001f92 	.word	0x20001f92

08008c78 <__sinit>:
 8008c78:	b510      	push	{r4, lr}
 8008c7a:	4604      	mov	r4, r0
 8008c7c:	f7ff fff0 	bl	8008c60 <__sinit_lock_acquire>
 8008c80:	69a3      	ldr	r3, [r4, #24]
 8008c82:	b11b      	cbz	r3, 8008c8c <__sinit+0x14>
 8008c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c88:	f7ff bff0 	b.w	8008c6c <__sinit_lock_release>
 8008c8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008c90:	6523      	str	r3, [r4, #80]	; 0x50
 8008c92:	4b13      	ldr	r3, [pc, #76]	; (8008ce0 <__sinit+0x68>)
 8008c94:	4a13      	ldr	r2, [pc, #76]	; (8008ce4 <__sinit+0x6c>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	62a2      	str	r2, [r4, #40]	; 0x28
 8008c9a:	42a3      	cmp	r3, r4
 8008c9c:	bf04      	itt	eq
 8008c9e:	2301      	moveq	r3, #1
 8008ca0:	61a3      	streq	r3, [r4, #24]
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	f000 f820 	bl	8008ce8 <__sfp>
 8008ca8:	6060      	str	r0, [r4, #4]
 8008caa:	4620      	mov	r0, r4
 8008cac:	f000 f81c 	bl	8008ce8 <__sfp>
 8008cb0:	60a0      	str	r0, [r4, #8]
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	f000 f818 	bl	8008ce8 <__sfp>
 8008cb8:	2200      	movs	r2, #0
 8008cba:	60e0      	str	r0, [r4, #12]
 8008cbc:	2104      	movs	r1, #4
 8008cbe:	6860      	ldr	r0, [r4, #4]
 8008cc0:	f7ff ff82 	bl	8008bc8 <std>
 8008cc4:	68a0      	ldr	r0, [r4, #8]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	2109      	movs	r1, #9
 8008cca:	f7ff ff7d 	bl	8008bc8 <std>
 8008cce:	68e0      	ldr	r0, [r4, #12]
 8008cd0:	2202      	movs	r2, #2
 8008cd2:	2112      	movs	r1, #18
 8008cd4:	f7ff ff78 	bl	8008bc8 <std>
 8008cd8:	2301      	movs	r3, #1
 8008cda:	61a3      	str	r3, [r4, #24]
 8008cdc:	e7d2      	b.n	8008c84 <__sinit+0xc>
 8008cde:	bf00      	nop
 8008ce0:	0800aea8 	.word	0x0800aea8
 8008ce4:	08008c11 	.word	0x08008c11

08008ce8 <__sfp>:
 8008ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cea:	4607      	mov	r7, r0
 8008cec:	f7ff ffac 	bl	8008c48 <__sfp_lock_acquire>
 8008cf0:	4b1e      	ldr	r3, [pc, #120]	; (8008d6c <__sfp+0x84>)
 8008cf2:	681e      	ldr	r6, [r3, #0]
 8008cf4:	69b3      	ldr	r3, [r6, #24]
 8008cf6:	b913      	cbnz	r3, 8008cfe <__sfp+0x16>
 8008cf8:	4630      	mov	r0, r6
 8008cfa:	f7ff ffbd 	bl	8008c78 <__sinit>
 8008cfe:	3648      	adds	r6, #72	; 0x48
 8008d00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008d04:	3b01      	subs	r3, #1
 8008d06:	d503      	bpl.n	8008d10 <__sfp+0x28>
 8008d08:	6833      	ldr	r3, [r6, #0]
 8008d0a:	b30b      	cbz	r3, 8008d50 <__sfp+0x68>
 8008d0c:	6836      	ldr	r6, [r6, #0]
 8008d0e:	e7f7      	b.n	8008d00 <__sfp+0x18>
 8008d10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008d14:	b9d5      	cbnz	r5, 8008d4c <__sfp+0x64>
 8008d16:	4b16      	ldr	r3, [pc, #88]	; (8008d70 <__sfp+0x88>)
 8008d18:	60e3      	str	r3, [r4, #12]
 8008d1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008d1e:	6665      	str	r5, [r4, #100]	; 0x64
 8008d20:	f000 fbba 	bl	8009498 <__retarget_lock_init_recursive>
 8008d24:	f7ff ff96 	bl	8008c54 <__sfp_lock_release>
 8008d28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008d2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008d30:	6025      	str	r5, [r4, #0]
 8008d32:	61a5      	str	r5, [r4, #24]
 8008d34:	2208      	movs	r2, #8
 8008d36:	4629      	mov	r1, r5
 8008d38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008d3c:	f7fd f940 	bl	8005fc0 <memset>
 8008d40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008d44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008d48:	4620      	mov	r0, r4
 8008d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d4c:	3468      	adds	r4, #104	; 0x68
 8008d4e:	e7d9      	b.n	8008d04 <__sfp+0x1c>
 8008d50:	2104      	movs	r1, #4
 8008d52:	4638      	mov	r0, r7
 8008d54:	f7ff ff62 	bl	8008c1c <__sfmoreglue>
 8008d58:	4604      	mov	r4, r0
 8008d5a:	6030      	str	r0, [r6, #0]
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	d1d5      	bne.n	8008d0c <__sfp+0x24>
 8008d60:	f7ff ff78 	bl	8008c54 <__sfp_lock_release>
 8008d64:	230c      	movs	r3, #12
 8008d66:	603b      	str	r3, [r7, #0]
 8008d68:	e7ee      	b.n	8008d48 <__sfp+0x60>
 8008d6a:	bf00      	nop
 8008d6c:	0800aea8 	.word	0x0800aea8
 8008d70:	ffff0001 	.word	0xffff0001

08008d74 <_fwalk_reent>:
 8008d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d78:	4606      	mov	r6, r0
 8008d7a:	4688      	mov	r8, r1
 8008d7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008d80:	2700      	movs	r7, #0
 8008d82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d86:	f1b9 0901 	subs.w	r9, r9, #1
 8008d8a:	d505      	bpl.n	8008d98 <_fwalk_reent+0x24>
 8008d8c:	6824      	ldr	r4, [r4, #0]
 8008d8e:	2c00      	cmp	r4, #0
 8008d90:	d1f7      	bne.n	8008d82 <_fwalk_reent+0xe>
 8008d92:	4638      	mov	r0, r7
 8008d94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d98:	89ab      	ldrh	r3, [r5, #12]
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d907      	bls.n	8008dae <_fwalk_reent+0x3a>
 8008d9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008da2:	3301      	adds	r3, #1
 8008da4:	d003      	beq.n	8008dae <_fwalk_reent+0x3a>
 8008da6:	4629      	mov	r1, r5
 8008da8:	4630      	mov	r0, r6
 8008daa:	47c0      	blx	r8
 8008dac:	4307      	orrs	r7, r0
 8008dae:	3568      	adds	r5, #104	; 0x68
 8008db0:	e7e9      	b.n	8008d86 <_fwalk_reent+0x12>

08008db2 <rshift>:
 8008db2:	6903      	ldr	r3, [r0, #16]
 8008db4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008db8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008dbc:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008dc0:	f100 0414 	add.w	r4, r0, #20
 8008dc4:	dd45      	ble.n	8008e52 <rshift+0xa0>
 8008dc6:	f011 011f 	ands.w	r1, r1, #31
 8008dca:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008dce:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008dd2:	d10c      	bne.n	8008dee <rshift+0x3c>
 8008dd4:	f100 0710 	add.w	r7, r0, #16
 8008dd8:	4629      	mov	r1, r5
 8008dda:	42b1      	cmp	r1, r6
 8008ddc:	d334      	bcc.n	8008e48 <rshift+0x96>
 8008dde:	1a9b      	subs	r3, r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	1eea      	subs	r2, r5, #3
 8008de4:	4296      	cmp	r6, r2
 8008de6:	bf38      	it	cc
 8008de8:	2300      	movcc	r3, #0
 8008dea:	4423      	add	r3, r4
 8008dec:	e015      	b.n	8008e1a <rshift+0x68>
 8008dee:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008df2:	f1c1 0820 	rsb	r8, r1, #32
 8008df6:	40cf      	lsrs	r7, r1
 8008df8:	f105 0e04 	add.w	lr, r5, #4
 8008dfc:	46a1      	mov	r9, r4
 8008dfe:	4576      	cmp	r6, lr
 8008e00:	46f4      	mov	ip, lr
 8008e02:	d815      	bhi.n	8008e30 <rshift+0x7e>
 8008e04:	1a9a      	subs	r2, r3, r2
 8008e06:	0092      	lsls	r2, r2, #2
 8008e08:	3a04      	subs	r2, #4
 8008e0a:	3501      	adds	r5, #1
 8008e0c:	42ae      	cmp	r6, r5
 8008e0e:	bf38      	it	cc
 8008e10:	2200      	movcc	r2, #0
 8008e12:	18a3      	adds	r3, r4, r2
 8008e14:	50a7      	str	r7, [r4, r2]
 8008e16:	b107      	cbz	r7, 8008e1a <rshift+0x68>
 8008e18:	3304      	adds	r3, #4
 8008e1a:	1b1a      	subs	r2, r3, r4
 8008e1c:	42a3      	cmp	r3, r4
 8008e1e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008e22:	bf08      	it	eq
 8008e24:	2300      	moveq	r3, #0
 8008e26:	6102      	str	r2, [r0, #16]
 8008e28:	bf08      	it	eq
 8008e2a:	6143      	streq	r3, [r0, #20]
 8008e2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e30:	f8dc c000 	ldr.w	ip, [ip]
 8008e34:	fa0c fc08 	lsl.w	ip, ip, r8
 8008e38:	ea4c 0707 	orr.w	r7, ip, r7
 8008e3c:	f849 7b04 	str.w	r7, [r9], #4
 8008e40:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008e44:	40cf      	lsrs	r7, r1
 8008e46:	e7da      	b.n	8008dfe <rshift+0x4c>
 8008e48:	f851 cb04 	ldr.w	ip, [r1], #4
 8008e4c:	f847 cf04 	str.w	ip, [r7, #4]!
 8008e50:	e7c3      	b.n	8008dda <rshift+0x28>
 8008e52:	4623      	mov	r3, r4
 8008e54:	e7e1      	b.n	8008e1a <rshift+0x68>

08008e56 <__hexdig_fun>:
 8008e56:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008e5a:	2b09      	cmp	r3, #9
 8008e5c:	d802      	bhi.n	8008e64 <__hexdig_fun+0xe>
 8008e5e:	3820      	subs	r0, #32
 8008e60:	b2c0      	uxtb	r0, r0
 8008e62:	4770      	bx	lr
 8008e64:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008e68:	2b05      	cmp	r3, #5
 8008e6a:	d801      	bhi.n	8008e70 <__hexdig_fun+0x1a>
 8008e6c:	3847      	subs	r0, #71	; 0x47
 8008e6e:	e7f7      	b.n	8008e60 <__hexdig_fun+0xa>
 8008e70:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008e74:	2b05      	cmp	r3, #5
 8008e76:	d801      	bhi.n	8008e7c <__hexdig_fun+0x26>
 8008e78:	3827      	subs	r0, #39	; 0x27
 8008e7a:	e7f1      	b.n	8008e60 <__hexdig_fun+0xa>
 8008e7c:	2000      	movs	r0, #0
 8008e7e:	4770      	bx	lr

08008e80 <__gethex>:
 8008e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e84:	ed2d 8b02 	vpush	{d8}
 8008e88:	b089      	sub	sp, #36	; 0x24
 8008e8a:	ee08 0a10 	vmov	s16, r0
 8008e8e:	9304      	str	r3, [sp, #16]
 8008e90:	4bb4      	ldr	r3, [pc, #720]	; (8009164 <__gethex+0x2e4>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	9301      	str	r3, [sp, #4]
 8008e96:	4618      	mov	r0, r3
 8008e98:	468b      	mov	fp, r1
 8008e9a:	4690      	mov	r8, r2
 8008e9c:	f7f7 f9a8 	bl	80001f0 <strlen>
 8008ea0:	9b01      	ldr	r3, [sp, #4]
 8008ea2:	f8db 2000 	ldr.w	r2, [fp]
 8008ea6:	4403      	add	r3, r0
 8008ea8:	4682      	mov	sl, r0
 8008eaa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008eae:	9305      	str	r3, [sp, #20]
 8008eb0:	1c93      	adds	r3, r2, #2
 8008eb2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008eb6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008eba:	32fe      	adds	r2, #254	; 0xfe
 8008ebc:	18d1      	adds	r1, r2, r3
 8008ebe:	461f      	mov	r7, r3
 8008ec0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008ec4:	9100      	str	r1, [sp, #0]
 8008ec6:	2830      	cmp	r0, #48	; 0x30
 8008ec8:	d0f8      	beq.n	8008ebc <__gethex+0x3c>
 8008eca:	f7ff ffc4 	bl	8008e56 <__hexdig_fun>
 8008ece:	4604      	mov	r4, r0
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	d13a      	bne.n	8008f4a <__gethex+0xca>
 8008ed4:	9901      	ldr	r1, [sp, #4]
 8008ed6:	4652      	mov	r2, sl
 8008ed8:	4638      	mov	r0, r7
 8008eda:	f001 fc28 	bl	800a72e <strncmp>
 8008ede:	4605      	mov	r5, r0
 8008ee0:	2800      	cmp	r0, #0
 8008ee2:	d168      	bne.n	8008fb6 <__gethex+0x136>
 8008ee4:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008ee8:	eb07 060a 	add.w	r6, r7, sl
 8008eec:	f7ff ffb3 	bl	8008e56 <__hexdig_fun>
 8008ef0:	2800      	cmp	r0, #0
 8008ef2:	d062      	beq.n	8008fba <__gethex+0x13a>
 8008ef4:	4633      	mov	r3, r6
 8008ef6:	7818      	ldrb	r0, [r3, #0]
 8008ef8:	2830      	cmp	r0, #48	; 0x30
 8008efa:	461f      	mov	r7, r3
 8008efc:	f103 0301 	add.w	r3, r3, #1
 8008f00:	d0f9      	beq.n	8008ef6 <__gethex+0x76>
 8008f02:	f7ff ffa8 	bl	8008e56 <__hexdig_fun>
 8008f06:	2301      	movs	r3, #1
 8008f08:	fab0 f480 	clz	r4, r0
 8008f0c:	0964      	lsrs	r4, r4, #5
 8008f0e:	4635      	mov	r5, r6
 8008f10:	9300      	str	r3, [sp, #0]
 8008f12:	463a      	mov	r2, r7
 8008f14:	4616      	mov	r6, r2
 8008f16:	3201      	adds	r2, #1
 8008f18:	7830      	ldrb	r0, [r6, #0]
 8008f1a:	f7ff ff9c 	bl	8008e56 <__hexdig_fun>
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	d1f8      	bne.n	8008f14 <__gethex+0x94>
 8008f22:	9901      	ldr	r1, [sp, #4]
 8008f24:	4652      	mov	r2, sl
 8008f26:	4630      	mov	r0, r6
 8008f28:	f001 fc01 	bl	800a72e <strncmp>
 8008f2c:	b980      	cbnz	r0, 8008f50 <__gethex+0xd0>
 8008f2e:	b94d      	cbnz	r5, 8008f44 <__gethex+0xc4>
 8008f30:	eb06 050a 	add.w	r5, r6, sl
 8008f34:	462a      	mov	r2, r5
 8008f36:	4616      	mov	r6, r2
 8008f38:	3201      	adds	r2, #1
 8008f3a:	7830      	ldrb	r0, [r6, #0]
 8008f3c:	f7ff ff8b 	bl	8008e56 <__hexdig_fun>
 8008f40:	2800      	cmp	r0, #0
 8008f42:	d1f8      	bne.n	8008f36 <__gethex+0xb6>
 8008f44:	1bad      	subs	r5, r5, r6
 8008f46:	00ad      	lsls	r5, r5, #2
 8008f48:	e004      	b.n	8008f54 <__gethex+0xd4>
 8008f4a:	2400      	movs	r4, #0
 8008f4c:	4625      	mov	r5, r4
 8008f4e:	e7e0      	b.n	8008f12 <__gethex+0x92>
 8008f50:	2d00      	cmp	r5, #0
 8008f52:	d1f7      	bne.n	8008f44 <__gethex+0xc4>
 8008f54:	7833      	ldrb	r3, [r6, #0]
 8008f56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008f5a:	2b50      	cmp	r3, #80	; 0x50
 8008f5c:	d13b      	bne.n	8008fd6 <__gethex+0x156>
 8008f5e:	7873      	ldrb	r3, [r6, #1]
 8008f60:	2b2b      	cmp	r3, #43	; 0x2b
 8008f62:	d02c      	beq.n	8008fbe <__gethex+0x13e>
 8008f64:	2b2d      	cmp	r3, #45	; 0x2d
 8008f66:	d02e      	beq.n	8008fc6 <__gethex+0x146>
 8008f68:	1c71      	adds	r1, r6, #1
 8008f6a:	f04f 0900 	mov.w	r9, #0
 8008f6e:	7808      	ldrb	r0, [r1, #0]
 8008f70:	f7ff ff71 	bl	8008e56 <__hexdig_fun>
 8008f74:	1e43      	subs	r3, r0, #1
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	2b18      	cmp	r3, #24
 8008f7a:	d82c      	bhi.n	8008fd6 <__gethex+0x156>
 8008f7c:	f1a0 0210 	sub.w	r2, r0, #16
 8008f80:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008f84:	f7ff ff67 	bl	8008e56 <__hexdig_fun>
 8008f88:	1e43      	subs	r3, r0, #1
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	2b18      	cmp	r3, #24
 8008f8e:	d91d      	bls.n	8008fcc <__gethex+0x14c>
 8008f90:	f1b9 0f00 	cmp.w	r9, #0
 8008f94:	d000      	beq.n	8008f98 <__gethex+0x118>
 8008f96:	4252      	negs	r2, r2
 8008f98:	4415      	add	r5, r2
 8008f9a:	f8cb 1000 	str.w	r1, [fp]
 8008f9e:	b1e4      	cbz	r4, 8008fda <__gethex+0x15a>
 8008fa0:	9b00      	ldr	r3, [sp, #0]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	bf14      	ite	ne
 8008fa6:	2700      	movne	r7, #0
 8008fa8:	2706      	moveq	r7, #6
 8008faa:	4638      	mov	r0, r7
 8008fac:	b009      	add	sp, #36	; 0x24
 8008fae:	ecbd 8b02 	vpop	{d8}
 8008fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fb6:	463e      	mov	r6, r7
 8008fb8:	4625      	mov	r5, r4
 8008fba:	2401      	movs	r4, #1
 8008fbc:	e7ca      	b.n	8008f54 <__gethex+0xd4>
 8008fbe:	f04f 0900 	mov.w	r9, #0
 8008fc2:	1cb1      	adds	r1, r6, #2
 8008fc4:	e7d3      	b.n	8008f6e <__gethex+0xee>
 8008fc6:	f04f 0901 	mov.w	r9, #1
 8008fca:	e7fa      	b.n	8008fc2 <__gethex+0x142>
 8008fcc:	230a      	movs	r3, #10
 8008fce:	fb03 0202 	mla	r2, r3, r2, r0
 8008fd2:	3a10      	subs	r2, #16
 8008fd4:	e7d4      	b.n	8008f80 <__gethex+0x100>
 8008fd6:	4631      	mov	r1, r6
 8008fd8:	e7df      	b.n	8008f9a <__gethex+0x11a>
 8008fda:	1bf3      	subs	r3, r6, r7
 8008fdc:	3b01      	subs	r3, #1
 8008fde:	4621      	mov	r1, r4
 8008fe0:	2b07      	cmp	r3, #7
 8008fe2:	dc0b      	bgt.n	8008ffc <__gethex+0x17c>
 8008fe4:	ee18 0a10 	vmov	r0, s16
 8008fe8:	f000 fad8 	bl	800959c <_Balloc>
 8008fec:	4604      	mov	r4, r0
 8008fee:	b940      	cbnz	r0, 8009002 <__gethex+0x182>
 8008ff0:	4b5d      	ldr	r3, [pc, #372]	; (8009168 <__gethex+0x2e8>)
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	21de      	movs	r1, #222	; 0xde
 8008ff6:	485d      	ldr	r0, [pc, #372]	; (800916c <__gethex+0x2ec>)
 8008ff8:	f001 fbcc 	bl	800a794 <__assert_func>
 8008ffc:	3101      	adds	r1, #1
 8008ffe:	105b      	asrs	r3, r3, #1
 8009000:	e7ee      	b.n	8008fe0 <__gethex+0x160>
 8009002:	f100 0914 	add.w	r9, r0, #20
 8009006:	f04f 0b00 	mov.w	fp, #0
 800900a:	f1ca 0301 	rsb	r3, sl, #1
 800900e:	f8cd 9008 	str.w	r9, [sp, #8]
 8009012:	f8cd b000 	str.w	fp, [sp]
 8009016:	9306      	str	r3, [sp, #24]
 8009018:	42b7      	cmp	r7, r6
 800901a:	d340      	bcc.n	800909e <__gethex+0x21e>
 800901c:	9802      	ldr	r0, [sp, #8]
 800901e:	9b00      	ldr	r3, [sp, #0]
 8009020:	f840 3b04 	str.w	r3, [r0], #4
 8009024:	eba0 0009 	sub.w	r0, r0, r9
 8009028:	1080      	asrs	r0, r0, #2
 800902a:	0146      	lsls	r6, r0, #5
 800902c:	6120      	str	r0, [r4, #16]
 800902e:	4618      	mov	r0, r3
 8009030:	f000 fba6 	bl	8009780 <__hi0bits>
 8009034:	1a30      	subs	r0, r6, r0
 8009036:	f8d8 6000 	ldr.w	r6, [r8]
 800903a:	42b0      	cmp	r0, r6
 800903c:	dd63      	ble.n	8009106 <__gethex+0x286>
 800903e:	1b87      	subs	r7, r0, r6
 8009040:	4639      	mov	r1, r7
 8009042:	4620      	mov	r0, r4
 8009044:	f000 ff4a 	bl	8009edc <__any_on>
 8009048:	4682      	mov	sl, r0
 800904a:	b1a8      	cbz	r0, 8009078 <__gethex+0x1f8>
 800904c:	1e7b      	subs	r3, r7, #1
 800904e:	1159      	asrs	r1, r3, #5
 8009050:	f003 021f 	and.w	r2, r3, #31
 8009054:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009058:	f04f 0a01 	mov.w	sl, #1
 800905c:	fa0a f202 	lsl.w	r2, sl, r2
 8009060:	420a      	tst	r2, r1
 8009062:	d009      	beq.n	8009078 <__gethex+0x1f8>
 8009064:	4553      	cmp	r3, sl
 8009066:	dd05      	ble.n	8009074 <__gethex+0x1f4>
 8009068:	1eb9      	subs	r1, r7, #2
 800906a:	4620      	mov	r0, r4
 800906c:	f000 ff36 	bl	8009edc <__any_on>
 8009070:	2800      	cmp	r0, #0
 8009072:	d145      	bne.n	8009100 <__gethex+0x280>
 8009074:	f04f 0a02 	mov.w	sl, #2
 8009078:	4639      	mov	r1, r7
 800907a:	4620      	mov	r0, r4
 800907c:	f7ff fe99 	bl	8008db2 <rshift>
 8009080:	443d      	add	r5, r7
 8009082:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009086:	42ab      	cmp	r3, r5
 8009088:	da4c      	bge.n	8009124 <__gethex+0x2a4>
 800908a:	ee18 0a10 	vmov	r0, s16
 800908e:	4621      	mov	r1, r4
 8009090:	f000 fac4 	bl	800961c <_Bfree>
 8009094:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009096:	2300      	movs	r3, #0
 8009098:	6013      	str	r3, [r2, #0]
 800909a:	27a3      	movs	r7, #163	; 0xa3
 800909c:	e785      	b.n	8008faa <__gethex+0x12a>
 800909e:	1e73      	subs	r3, r6, #1
 80090a0:	9a05      	ldr	r2, [sp, #20]
 80090a2:	9303      	str	r3, [sp, #12]
 80090a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d019      	beq.n	80090e0 <__gethex+0x260>
 80090ac:	f1bb 0f20 	cmp.w	fp, #32
 80090b0:	d107      	bne.n	80090c2 <__gethex+0x242>
 80090b2:	9b02      	ldr	r3, [sp, #8]
 80090b4:	9a00      	ldr	r2, [sp, #0]
 80090b6:	f843 2b04 	str.w	r2, [r3], #4
 80090ba:	9302      	str	r3, [sp, #8]
 80090bc:	2300      	movs	r3, #0
 80090be:	9300      	str	r3, [sp, #0]
 80090c0:	469b      	mov	fp, r3
 80090c2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80090c6:	f7ff fec6 	bl	8008e56 <__hexdig_fun>
 80090ca:	9b00      	ldr	r3, [sp, #0]
 80090cc:	f000 000f 	and.w	r0, r0, #15
 80090d0:	fa00 f00b 	lsl.w	r0, r0, fp
 80090d4:	4303      	orrs	r3, r0
 80090d6:	9300      	str	r3, [sp, #0]
 80090d8:	f10b 0b04 	add.w	fp, fp, #4
 80090dc:	9b03      	ldr	r3, [sp, #12]
 80090de:	e00d      	b.n	80090fc <__gethex+0x27c>
 80090e0:	9b03      	ldr	r3, [sp, #12]
 80090e2:	9a06      	ldr	r2, [sp, #24]
 80090e4:	4413      	add	r3, r2
 80090e6:	42bb      	cmp	r3, r7
 80090e8:	d3e0      	bcc.n	80090ac <__gethex+0x22c>
 80090ea:	4618      	mov	r0, r3
 80090ec:	9901      	ldr	r1, [sp, #4]
 80090ee:	9307      	str	r3, [sp, #28]
 80090f0:	4652      	mov	r2, sl
 80090f2:	f001 fb1c 	bl	800a72e <strncmp>
 80090f6:	9b07      	ldr	r3, [sp, #28]
 80090f8:	2800      	cmp	r0, #0
 80090fa:	d1d7      	bne.n	80090ac <__gethex+0x22c>
 80090fc:	461e      	mov	r6, r3
 80090fe:	e78b      	b.n	8009018 <__gethex+0x198>
 8009100:	f04f 0a03 	mov.w	sl, #3
 8009104:	e7b8      	b.n	8009078 <__gethex+0x1f8>
 8009106:	da0a      	bge.n	800911e <__gethex+0x29e>
 8009108:	1a37      	subs	r7, r6, r0
 800910a:	4621      	mov	r1, r4
 800910c:	ee18 0a10 	vmov	r0, s16
 8009110:	463a      	mov	r2, r7
 8009112:	f000 fc9f 	bl	8009a54 <__lshift>
 8009116:	1bed      	subs	r5, r5, r7
 8009118:	4604      	mov	r4, r0
 800911a:	f100 0914 	add.w	r9, r0, #20
 800911e:	f04f 0a00 	mov.w	sl, #0
 8009122:	e7ae      	b.n	8009082 <__gethex+0x202>
 8009124:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009128:	42a8      	cmp	r0, r5
 800912a:	dd72      	ble.n	8009212 <__gethex+0x392>
 800912c:	1b45      	subs	r5, r0, r5
 800912e:	42ae      	cmp	r6, r5
 8009130:	dc36      	bgt.n	80091a0 <__gethex+0x320>
 8009132:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009136:	2b02      	cmp	r3, #2
 8009138:	d02a      	beq.n	8009190 <__gethex+0x310>
 800913a:	2b03      	cmp	r3, #3
 800913c:	d02c      	beq.n	8009198 <__gethex+0x318>
 800913e:	2b01      	cmp	r3, #1
 8009140:	d11c      	bne.n	800917c <__gethex+0x2fc>
 8009142:	42ae      	cmp	r6, r5
 8009144:	d11a      	bne.n	800917c <__gethex+0x2fc>
 8009146:	2e01      	cmp	r6, #1
 8009148:	d112      	bne.n	8009170 <__gethex+0x2f0>
 800914a:	9a04      	ldr	r2, [sp, #16]
 800914c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009150:	6013      	str	r3, [r2, #0]
 8009152:	2301      	movs	r3, #1
 8009154:	6123      	str	r3, [r4, #16]
 8009156:	f8c9 3000 	str.w	r3, [r9]
 800915a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800915c:	2762      	movs	r7, #98	; 0x62
 800915e:	601c      	str	r4, [r3, #0]
 8009160:	e723      	b.n	8008faa <__gethex+0x12a>
 8009162:	bf00      	nop
 8009164:	0800b194 	.word	0x0800b194
 8009168:	0800b0b8 	.word	0x0800b0b8
 800916c:	0800b12c 	.word	0x0800b12c
 8009170:	1e71      	subs	r1, r6, #1
 8009172:	4620      	mov	r0, r4
 8009174:	f000 feb2 	bl	8009edc <__any_on>
 8009178:	2800      	cmp	r0, #0
 800917a:	d1e6      	bne.n	800914a <__gethex+0x2ca>
 800917c:	ee18 0a10 	vmov	r0, s16
 8009180:	4621      	mov	r1, r4
 8009182:	f000 fa4b 	bl	800961c <_Bfree>
 8009186:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009188:	2300      	movs	r3, #0
 800918a:	6013      	str	r3, [r2, #0]
 800918c:	2750      	movs	r7, #80	; 0x50
 800918e:	e70c      	b.n	8008faa <__gethex+0x12a>
 8009190:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009192:	2b00      	cmp	r3, #0
 8009194:	d1f2      	bne.n	800917c <__gethex+0x2fc>
 8009196:	e7d8      	b.n	800914a <__gethex+0x2ca>
 8009198:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1d5      	bne.n	800914a <__gethex+0x2ca>
 800919e:	e7ed      	b.n	800917c <__gethex+0x2fc>
 80091a0:	1e6f      	subs	r7, r5, #1
 80091a2:	f1ba 0f00 	cmp.w	sl, #0
 80091a6:	d131      	bne.n	800920c <__gethex+0x38c>
 80091a8:	b127      	cbz	r7, 80091b4 <__gethex+0x334>
 80091aa:	4639      	mov	r1, r7
 80091ac:	4620      	mov	r0, r4
 80091ae:	f000 fe95 	bl	8009edc <__any_on>
 80091b2:	4682      	mov	sl, r0
 80091b4:	117b      	asrs	r3, r7, #5
 80091b6:	2101      	movs	r1, #1
 80091b8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80091bc:	f007 071f 	and.w	r7, r7, #31
 80091c0:	fa01 f707 	lsl.w	r7, r1, r7
 80091c4:	421f      	tst	r7, r3
 80091c6:	4629      	mov	r1, r5
 80091c8:	4620      	mov	r0, r4
 80091ca:	bf18      	it	ne
 80091cc:	f04a 0a02 	orrne.w	sl, sl, #2
 80091d0:	1b76      	subs	r6, r6, r5
 80091d2:	f7ff fdee 	bl	8008db2 <rshift>
 80091d6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80091da:	2702      	movs	r7, #2
 80091dc:	f1ba 0f00 	cmp.w	sl, #0
 80091e0:	d048      	beq.n	8009274 <__gethex+0x3f4>
 80091e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	d015      	beq.n	8009216 <__gethex+0x396>
 80091ea:	2b03      	cmp	r3, #3
 80091ec:	d017      	beq.n	800921e <__gethex+0x39e>
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d109      	bne.n	8009206 <__gethex+0x386>
 80091f2:	f01a 0f02 	tst.w	sl, #2
 80091f6:	d006      	beq.n	8009206 <__gethex+0x386>
 80091f8:	f8d9 0000 	ldr.w	r0, [r9]
 80091fc:	ea4a 0a00 	orr.w	sl, sl, r0
 8009200:	f01a 0f01 	tst.w	sl, #1
 8009204:	d10e      	bne.n	8009224 <__gethex+0x3a4>
 8009206:	f047 0710 	orr.w	r7, r7, #16
 800920a:	e033      	b.n	8009274 <__gethex+0x3f4>
 800920c:	f04f 0a01 	mov.w	sl, #1
 8009210:	e7d0      	b.n	80091b4 <__gethex+0x334>
 8009212:	2701      	movs	r7, #1
 8009214:	e7e2      	b.n	80091dc <__gethex+0x35c>
 8009216:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009218:	f1c3 0301 	rsb	r3, r3, #1
 800921c:	9315      	str	r3, [sp, #84]	; 0x54
 800921e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009220:	2b00      	cmp	r3, #0
 8009222:	d0f0      	beq.n	8009206 <__gethex+0x386>
 8009224:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009228:	f104 0314 	add.w	r3, r4, #20
 800922c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009230:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009234:	f04f 0c00 	mov.w	ip, #0
 8009238:	4618      	mov	r0, r3
 800923a:	f853 2b04 	ldr.w	r2, [r3], #4
 800923e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8009242:	d01c      	beq.n	800927e <__gethex+0x3fe>
 8009244:	3201      	adds	r2, #1
 8009246:	6002      	str	r2, [r0, #0]
 8009248:	2f02      	cmp	r7, #2
 800924a:	f104 0314 	add.w	r3, r4, #20
 800924e:	d13f      	bne.n	80092d0 <__gethex+0x450>
 8009250:	f8d8 2000 	ldr.w	r2, [r8]
 8009254:	3a01      	subs	r2, #1
 8009256:	42b2      	cmp	r2, r6
 8009258:	d10a      	bne.n	8009270 <__gethex+0x3f0>
 800925a:	1171      	asrs	r1, r6, #5
 800925c:	2201      	movs	r2, #1
 800925e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009262:	f006 061f 	and.w	r6, r6, #31
 8009266:	fa02 f606 	lsl.w	r6, r2, r6
 800926a:	421e      	tst	r6, r3
 800926c:	bf18      	it	ne
 800926e:	4617      	movne	r7, r2
 8009270:	f047 0720 	orr.w	r7, r7, #32
 8009274:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009276:	601c      	str	r4, [r3, #0]
 8009278:	9b04      	ldr	r3, [sp, #16]
 800927a:	601d      	str	r5, [r3, #0]
 800927c:	e695      	b.n	8008faa <__gethex+0x12a>
 800927e:	4299      	cmp	r1, r3
 8009280:	f843 cc04 	str.w	ip, [r3, #-4]
 8009284:	d8d8      	bhi.n	8009238 <__gethex+0x3b8>
 8009286:	68a3      	ldr	r3, [r4, #8]
 8009288:	459b      	cmp	fp, r3
 800928a:	db19      	blt.n	80092c0 <__gethex+0x440>
 800928c:	6861      	ldr	r1, [r4, #4]
 800928e:	ee18 0a10 	vmov	r0, s16
 8009292:	3101      	adds	r1, #1
 8009294:	f000 f982 	bl	800959c <_Balloc>
 8009298:	4681      	mov	r9, r0
 800929a:	b918      	cbnz	r0, 80092a4 <__gethex+0x424>
 800929c:	4b1a      	ldr	r3, [pc, #104]	; (8009308 <__gethex+0x488>)
 800929e:	4602      	mov	r2, r0
 80092a0:	2184      	movs	r1, #132	; 0x84
 80092a2:	e6a8      	b.n	8008ff6 <__gethex+0x176>
 80092a4:	6922      	ldr	r2, [r4, #16]
 80092a6:	3202      	adds	r2, #2
 80092a8:	f104 010c 	add.w	r1, r4, #12
 80092ac:	0092      	lsls	r2, r2, #2
 80092ae:	300c      	adds	r0, #12
 80092b0:	f7fc fe78 	bl	8005fa4 <memcpy>
 80092b4:	4621      	mov	r1, r4
 80092b6:	ee18 0a10 	vmov	r0, s16
 80092ba:	f000 f9af 	bl	800961c <_Bfree>
 80092be:	464c      	mov	r4, r9
 80092c0:	6923      	ldr	r3, [r4, #16]
 80092c2:	1c5a      	adds	r2, r3, #1
 80092c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80092c8:	6122      	str	r2, [r4, #16]
 80092ca:	2201      	movs	r2, #1
 80092cc:	615a      	str	r2, [r3, #20]
 80092ce:	e7bb      	b.n	8009248 <__gethex+0x3c8>
 80092d0:	6922      	ldr	r2, [r4, #16]
 80092d2:	455a      	cmp	r2, fp
 80092d4:	dd0b      	ble.n	80092ee <__gethex+0x46e>
 80092d6:	2101      	movs	r1, #1
 80092d8:	4620      	mov	r0, r4
 80092da:	f7ff fd6a 	bl	8008db2 <rshift>
 80092de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80092e2:	3501      	adds	r5, #1
 80092e4:	42ab      	cmp	r3, r5
 80092e6:	f6ff aed0 	blt.w	800908a <__gethex+0x20a>
 80092ea:	2701      	movs	r7, #1
 80092ec:	e7c0      	b.n	8009270 <__gethex+0x3f0>
 80092ee:	f016 061f 	ands.w	r6, r6, #31
 80092f2:	d0fa      	beq.n	80092ea <__gethex+0x46a>
 80092f4:	4453      	add	r3, sl
 80092f6:	f1c6 0620 	rsb	r6, r6, #32
 80092fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80092fe:	f000 fa3f 	bl	8009780 <__hi0bits>
 8009302:	42b0      	cmp	r0, r6
 8009304:	dbe7      	blt.n	80092d6 <__gethex+0x456>
 8009306:	e7f0      	b.n	80092ea <__gethex+0x46a>
 8009308:	0800b0b8 	.word	0x0800b0b8

0800930c <L_shift>:
 800930c:	f1c2 0208 	rsb	r2, r2, #8
 8009310:	0092      	lsls	r2, r2, #2
 8009312:	b570      	push	{r4, r5, r6, lr}
 8009314:	f1c2 0620 	rsb	r6, r2, #32
 8009318:	6843      	ldr	r3, [r0, #4]
 800931a:	6804      	ldr	r4, [r0, #0]
 800931c:	fa03 f506 	lsl.w	r5, r3, r6
 8009320:	432c      	orrs	r4, r5
 8009322:	40d3      	lsrs	r3, r2
 8009324:	6004      	str	r4, [r0, #0]
 8009326:	f840 3f04 	str.w	r3, [r0, #4]!
 800932a:	4288      	cmp	r0, r1
 800932c:	d3f4      	bcc.n	8009318 <L_shift+0xc>
 800932e:	bd70      	pop	{r4, r5, r6, pc}

08009330 <__match>:
 8009330:	b530      	push	{r4, r5, lr}
 8009332:	6803      	ldr	r3, [r0, #0]
 8009334:	3301      	adds	r3, #1
 8009336:	f811 4b01 	ldrb.w	r4, [r1], #1
 800933a:	b914      	cbnz	r4, 8009342 <__match+0x12>
 800933c:	6003      	str	r3, [r0, #0]
 800933e:	2001      	movs	r0, #1
 8009340:	bd30      	pop	{r4, r5, pc}
 8009342:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009346:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800934a:	2d19      	cmp	r5, #25
 800934c:	bf98      	it	ls
 800934e:	3220      	addls	r2, #32
 8009350:	42a2      	cmp	r2, r4
 8009352:	d0f0      	beq.n	8009336 <__match+0x6>
 8009354:	2000      	movs	r0, #0
 8009356:	e7f3      	b.n	8009340 <__match+0x10>

08009358 <__hexnan>:
 8009358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800935c:	680b      	ldr	r3, [r1, #0]
 800935e:	115e      	asrs	r6, r3, #5
 8009360:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009364:	f013 031f 	ands.w	r3, r3, #31
 8009368:	b087      	sub	sp, #28
 800936a:	bf18      	it	ne
 800936c:	3604      	addne	r6, #4
 800936e:	2500      	movs	r5, #0
 8009370:	1f37      	subs	r7, r6, #4
 8009372:	4690      	mov	r8, r2
 8009374:	6802      	ldr	r2, [r0, #0]
 8009376:	9301      	str	r3, [sp, #4]
 8009378:	4682      	mov	sl, r0
 800937a:	f846 5c04 	str.w	r5, [r6, #-4]
 800937e:	46b9      	mov	r9, r7
 8009380:	463c      	mov	r4, r7
 8009382:	9502      	str	r5, [sp, #8]
 8009384:	46ab      	mov	fp, r5
 8009386:	7851      	ldrb	r1, [r2, #1]
 8009388:	1c53      	adds	r3, r2, #1
 800938a:	9303      	str	r3, [sp, #12]
 800938c:	b341      	cbz	r1, 80093e0 <__hexnan+0x88>
 800938e:	4608      	mov	r0, r1
 8009390:	9205      	str	r2, [sp, #20]
 8009392:	9104      	str	r1, [sp, #16]
 8009394:	f7ff fd5f 	bl	8008e56 <__hexdig_fun>
 8009398:	2800      	cmp	r0, #0
 800939a:	d14f      	bne.n	800943c <__hexnan+0xe4>
 800939c:	9904      	ldr	r1, [sp, #16]
 800939e:	9a05      	ldr	r2, [sp, #20]
 80093a0:	2920      	cmp	r1, #32
 80093a2:	d818      	bhi.n	80093d6 <__hexnan+0x7e>
 80093a4:	9b02      	ldr	r3, [sp, #8]
 80093a6:	459b      	cmp	fp, r3
 80093a8:	dd13      	ble.n	80093d2 <__hexnan+0x7a>
 80093aa:	454c      	cmp	r4, r9
 80093ac:	d206      	bcs.n	80093bc <__hexnan+0x64>
 80093ae:	2d07      	cmp	r5, #7
 80093b0:	dc04      	bgt.n	80093bc <__hexnan+0x64>
 80093b2:	462a      	mov	r2, r5
 80093b4:	4649      	mov	r1, r9
 80093b6:	4620      	mov	r0, r4
 80093b8:	f7ff ffa8 	bl	800930c <L_shift>
 80093bc:	4544      	cmp	r4, r8
 80093be:	d950      	bls.n	8009462 <__hexnan+0x10a>
 80093c0:	2300      	movs	r3, #0
 80093c2:	f1a4 0904 	sub.w	r9, r4, #4
 80093c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80093ca:	f8cd b008 	str.w	fp, [sp, #8]
 80093ce:	464c      	mov	r4, r9
 80093d0:	461d      	mov	r5, r3
 80093d2:	9a03      	ldr	r2, [sp, #12]
 80093d4:	e7d7      	b.n	8009386 <__hexnan+0x2e>
 80093d6:	2929      	cmp	r1, #41	; 0x29
 80093d8:	d156      	bne.n	8009488 <__hexnan+0x130>
 80093da:	3202      	adds	r2, #2
 80093dc:	f8ca 2000 	str.w	r2, [sl]
 80093e0:	f1bb 0f00 	cmp.w	fp, #0
 80093e4:	d050      	beq.n	8009488 <__hexnan+0x130>
 80093e6:	454c      	cmp	r4, r9
 80093e8:	d206      	bcs.n	80093f8 <__hexnan+0xa0>
 80093ea:	2d07      	cmp	r5, #7
 80093ec:	dc04      	bgt.n	80093f8 <__hexnan+0xa0>
 80093ee:	462a      	mov	r2, r5
 80093f0:	4649      	mov	r1, r9
 80093f2:	4620      	mov	r0, r4
 80093f4:	f7ff ff8a 	bl	800930c <L_shift>
 80093f8:	4544      	cmp	r4, r8
 80093fa:	d934      	bls.n	8009466 <__hexnan+0x10e>
 80093fc:	f1a8 0204 	sub.w	r2, r8, #4
 8009400:	4623      	mov	r3, r4
 8009402:	f853 1b04 	ldr.w	r1, [r3], #4
 8009406:	f842 1f04 	str.w	r1, [r2, #4]!
 800940a:	429f      	cmp	r7, r3
 800940c:	d2f9      	bcs.n	8009402 <__hexnan+0xaa>
 800940e:	1b3b      	subs	r3, r7, r4
 8009410:	f023 0303 	bic.w	r3, r3, #3
 8009414:	3304      	adds	r3, #4
 8009416:	3401      	adds	r4, #1
 8009418:	3e03      	subs	r6, #3
 800941a:	42b4      	cmp	r4, r6
 800941c:	bf88      	it	hi
 800941e:	2304      	movhi	r3, #4
 8009420:	4443      	add	r3, r8
 8009422:	2200      	movs	r2, #0
 8009424:	f843 2b04 	str.w	r2, [r3], #4
 8009428:	429f      	cmp	r7, r3
 800942a:	d2fb      	bcs.n	8009424 <__hexnan+0xcc>
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	b91b      	cbnz	r3, 8009438 <__hexnan+0xe0>
 8009430:	4547      	cmp	r7, r8
 8009432:	d127      	bne.n	8009484 <__hexnan+0x12c>
 8009434:	2301      	movs	r3, #1
 8009436:	603b      	str	r3, [r7, #0]
 8009438:	2005      	movs	r0, #5
 800943a:	e026      	b.n	800948a <__hexnan+0x132>
 800943c:	3501      	adds	r5, #1
 800943e:	2d08      	cmp	r5, #8
 8009440:	f10b 0b01 	add.w	fp, fp, #1
 8009444:	dd06      	ble.n	8009454 <__hexnan+0xfc>
 8009446:	4544      	cmp	r4, r8
 8009448:	d9c3      	bls.n	80093d2 <__hexnan+0x7a>
 800944a:	2300      	movs	r3, #0
 800944c:	f844 3c04 	str.w	r3, [r4, #-4]
 8009450:	2501      	movs	r5, #1
 8009452:	3c04      	subs	r4, #4
 8009454:	6822      	ldr	r2, [r4, #0]
 8009456:	f000 000f 	and.w	r0, r0, #15
 800945a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800945e:	6022      	str	r2, [r4, #0]
 8009460:	e7b7      	b.n	80093d2 <__hexnan+0x7a>
 8009462:	2508      	movs	r5, #8
 8009464:	e7b5      	b.n	80093d2 <__hexnan+0x7a>
 8009466:	9b01      	ldr	r3, [sp, #4]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d0df      	beq.n	800942c <__hexnan+0xd4>
 800946c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009470:	f1c3 0320 	rsb	r3, r3, #32
 8009474:	fa22 f303 	lsr.w	r3, r2, r3
 8009478:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800947c:	401a      	ands	r2, r3
 800947e:	f846 2c04 	str.w	r2, [r6, #-4]
 8009482:	e7d3      	b.n	800942c <__hexnan+0xd4>
 8009484:	3f04      	subs	r7, #4
 8009486:	e7d1      	b.n	800942c <__hexnan+0xd4>
 8009488:	2004      	movs	r0, #4
 800948a:	b007      	add	sp, #28
 800948c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009490 <_localeconv_r>:
 8009490:	4800      	ldr	r0, [pc, #0]	; (8009494 <_localeconv_r+0x4>)
 8009492:	4770      	bx	lr
 8009494:	20000194 	.word	0x20000194

08009498 <__retarget_lock_init_recursive>:
 8009498:	4770      	bx	lr

0800949a <__retarget_lock_acquire_recursive>:
 800949a:	4770      	bx	lr

0800949c <__retarget_lock_release_recursive>:
 800949c:	4770      	bx	lr

0800949e <__swhatbuf_r>:
 800949e:	b570      	push	{r4, r5, r6, lr}
 80094a0:	460e      	mov	r6, r1
 80094a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094a6:	2900      	cmp	r1, #0
 80094a8:	b096      	sub	sp, #88	; 0x58
 80094aa:	4614      	mov	r4, r2
 80094ac:	461d      	mov	r5, r3
 80094ae:	da08      	bge.n	80094c2 <__swhatbuf_r+0x24>
 80094b0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80094b4:	2200      	movs	r2, #0
 80094b6:	602a      	str	r2, [r5, #0]
 80094b8:	061a      	lsls	r2, r3, #24
 80094ba:	d410      	bmi.n	80094de <__swhatbuf_r+0x40>
 80094bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094c0:	e00e      	b.n	80094e0 <__swhatbuf_r+0x42>
 80094c2:	466a      	mov	r2, sp
 80094c4:	f001 f9a6 	bl	800a814 <_fstat_r>
 80094c8:	2800      	cmp	r0, #0
 80094ca:	dbf1      	blt.n	80094b0 <__swhatbuf_r+0x12>
 80094cc:	9a01      	ldr	r2, [sp, #4]
 80094ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80094d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80094d6:	425a      	negs	r2, r3
 80094d8:	415a      	adcs	r2, r3
 80094da:	602a      	str	r2, [r5, #0]
 80094dc:	e7ee      	b.n	80094bc <__swhatbuf_r+0x1e>
 80094de:	2340      	movs	r3, #64	; 0x40
 80094e0:	2000      	movs	r0, #0
 80094e2:	6023      	str	r3, [r4, #0]
 80094e4:	b016      	add	sp, #88	; 0x58
 80094e6:	bd70      	pop	{r4, r5, r6, pc}

080094e8 <__smakebuf_r>:
 80094e8:	898b      	ldrh	r3, [r1, #12]
 80094ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80094ec:	079d      	lsls	r5, r3, #30
 80094ee:	4606      	mov	r6, r0
 80094f0:	460c      	mov	r4, r1
 80094f2:	d507      	bpl.n	8009504 <__smakebuf_r+0x1c>
 80094f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80094f8:	6023      	str	r3, [r4, #0]
 80094fa:	6123      	str	r3, [r4, #16]
 80094fc:	2301      	movs	r3, #1
 80094fe:	6163      	str	r3, [r4, #20]
 8009500:	b002      	add	sp, #8
 8009502:	bd70      	pop	{r4, r5, r6, pc}
 8009504:	ab01      	add	r3, sp, #4
 8009506:	466a      	mov	r2, sp
 8009508:	f7ff ffc9 	bl	800949e <__swhatbuf_r>
 800950c:	9900      	ldr	r1, [sp, #0]
 800950e:	4605      	mov	r5, r0
 8009510:	4630      	mov	r0, r6
 8009512:	f000 fd87 	bl	800a024 <_malloc_r>
 8009516:	b948      	cbnz	r0, 800952c <__smakebuf_r+0x44>
 8009518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800951c:	059a      	lsls	r2, r3, #22
 800951e:	d4ef      	bmi.n	8009500 <__smakebuf_r+0x18>
 8009520:	f023 0303 	bic.w	r3, r3, #3
 8009524:	f043 0302 	orr.w	r3, r3, #2
 8009528:	81a3      	strh	r3, [r4, #12]
 800952a:	e7e3      	b.n	80094f4 <__smakebuf_r+0xc>
 800952c:	4b0d      	ldr	r3, [pc, #52]	; (8009564 <__smakebuf_r+0x7c>)
 800952e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009530:	89a3      	ldrh	r3, [r4, #12]
 8009532:	6020      	str	r0, [r4, #0]
 8009534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009538:	81a3      	strh	r3, [r4, #12]
 800953a:	9b00      	ldr	r3, [sp, #0]
 800953c:	6163      	str	r3, [r4, #20]
 800953e:	9b01      	ldr	r3, [sp, #4]
 8009540:	6120      	str	r0, [r4, #16]
 8009542:	b15b      	cbz	r3, 800955c <__smakebuf_r+0x74>
 8009544:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009548:	4630      	mov	r0, r6
 800954a:	f001 f975 	bl	800a838 <_isatty_r>
 800954e:	b128      	cbz	r0, 800955c <__smakebuf_r+0x74>
 8009550:	89a3      	ldrh	r3, [r4, #12]
 8009552:	f023 0303 	bic.w	r3, r3, #3
 8009556:	f043 0301 	orr.w	r3, r3, #1
 800955a:	81a3      	strh	r3, [r4, #12]
 800955c:	89a0      	ldrh	r0, [r4, #12]
 800955e:	4305      	orrs	r5, r0
 8009560:	81a5      	strh	r5, [r4, #12]
 8009562:	e7cd      	b.n	8009500 <__smakebuf_r+0x18>
 8009564:	08008c11 	.word	0x08008c11

08009568 <malloc>:
 8009568:	4b02      	ldr	r3, [pc, #8]	; (8009574 <malloc+0xc>)
 800956a:	4601      	mov	r1, r0
 800956c:	6818      	ldr	r0, [r3, #0]
 800956e:	f000 bd59 	b.w	800a024 <_malloc_r>
 8009572:	bf00      	nop
 8009574:	2000003c 	.word	0x2000003c

08009578 <__ascii_mbtowc>:
 8009578:	b082      	sub	sp, #8
 800957a:	b901      	cbnz	r1, 800957e <__ascii_mbtowc+0x6>
 800957c:	a901      	add	r1, sp, #4
 800957e:	b142      	cbz	r2, 8009592 <__ascii_mbtowc+0x1a>
 8009580:	b14b      	cbz	r3, 8009596 <__ascii_mbtowc+0x1e>
 8009582:	7813      	ldrb	r3, [r2, #0]
 8009584:	600b      	str	r3, [r1, #0]
 8009586:	7812      	ldrb	r2, [r2, #0]
 8009588:	1e10      	subs	r0, r2, #0
 800958a:	bf18      	it	ne
 800958c:	2001      	movne	r0, #1
 800958e:	b002      	add	sp, #8
 8009590:	4770      	bx	lr
 8009592:	4610      	mov	r0, r2
 8009594:	e7fb      	b.n	800958e <__ascii_mbtowc+0x16>
 8009596:	f06f 0001 	mvn.w	r0, #1
 800959a:	e7f8      	b.n	800958e <__ascii_mbtowc+0x16>

0800959c <_Balloc>:
 800959c:	b570      	push	{r4, r5, r6, lr}
 800959e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80095a0:	4604      	mov	r4, r0
 80095a2:	460d      	mov	r5, r1
 80095a4:	b976      	cbnz	r6, 80095c4 <_Balloc+0x28>
 80095a6:	2010      	movs	r0, #16
 80095a8:	f7ff ffde 	bl	8009568 <malloc>
 80095ac:	4602      	mov	r2, r0
 80095ae:	6260      	str	r0, [r4, #36]	; 0x24
 80095b0:	b920      	cbnz	r0, 80095bc <_Balloc+0x20>
 80095b2:	4b18      	ldr	r3, [pc, #96]	; (8009614 <_Balloc+0x78>)
 80095b4:	4818      	ldr	r0, [pc, #96]	; (8009618 <_Balloc+0x7c>)
 80095b6:	2166      	movs	r1, #102	; 0x66
 80095b8:	f001 f8ec 	bl	800a794 <__assert_func>
 80095bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095c0:	6006      	str	r6, [r0, #0]
 80095c2:	60c6      	str	r6, [r0, #12]
 80095c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80095c6:	68f3      	ldr	r3, [r6, #12]
 80095c8:	b183      	cbz	r3, 80095ec <_Balloc+0x50>
 80095ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095cc:	68db      	ldr	r3, [r3, #12]
 80095ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80095d2:	b9b8      	cbnz	r0, 8009604 <_Balloc+0x68>
 80095d4:	2101      	movs	r1, #1
 80095d6:	fa01 f605 	lsl.w	r6, r1, r5
 80095da:	1d72      	adds	r2, r6, #5
 80095dc:	0092      	lsls	r2, r2, #2
 80095de:	4620      	mov	r0, r4
 80095e0:	f000 fc9d 	bl	8009f1e <_calloc_r>
 80095e4:	b160      	cbz	r0, 8009600 <_Balloc+0x64>
 80095e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80095ea:	e00e      	b.n	800960a <_Balloc+0x6e>
 80095ec:	2221      	movs	r2, #33	; 0x21
 80095ee:	2104      	movs	r1, #4
 80095f0:	4620      	mov	r0, r4
 80095f2:	f000 fc94 	bl	8009f1e <_calloc_r>
 80095f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095f8:	60f0      	str	r0, [r6, #12]
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d1e4      	bne.n	80095ca <_Balloc+0x2e>
 8009600:	2000      	movs	r0, #0
 8009602:	bd70      	pop	{r4, r5, r6, pc}
 8009604:	6802      	ldr	r2, [r0, #0]
 8009606:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800960a:	2300      	movs	r3, #0
 800960c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009610:	e7f7      	b.n	8009602 <_Balloc+0x66>
 8009612:	bf00      	nop
 8009614:	0800b046 	.word	0x0800b046
 8009618:	0800b1a8 	.word	0x0800b1a8

0800961c <_Bfree>:
 800961c:	b570      	push	{r4, r5, r6, lr}
 800961e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009620:	4605      	mov	r5, r0
 8009622:	460c      	mov	r4, r1
 8009624:	b976      	cbnz	r6, 8009644 <_Bfree+0x28>
 8009626:	2010      	movs	r0, #16
 8009628:	f7ff ff9e 	bl	8009568 <malloc>
 800962c:	4602      	mov	r2, r0
 800962e:	6268      	str	r0, [r5, #36]	; 0x24
 8009630:	b920      	cbnz	r0, 800963c <_Bfree+0x20>
 8009632:	4b09      	ldr	r3, [pc, #36]	; (8009658 <_Bfree+0x3c>)
 8009634:	4809      	ldr	r0, [pc, #36]	; (800965c <_Bfree+0x40>)
 8009636:	218a      	movs	r1, #138	; 0x8a
 8009638:	f001 f8ac 	bl	800a794 <__assert_func>
 800963c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009640:	6006      	str	r6, [r0, #0]
 8009642:	60c6      	str	r6, [r0, #12]
 8009644:	b13c      	cbz	r4, 8009656 <_Bfree+0x3a>
 8009646:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009648:	6862      	ldr	r2, [r4, #4]
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009650:	6021      	str	r1, [r4, #0]
 8009652:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009656:	bd70      	pop	{r4, r5, r6, pc}
 8009658:	0800b046 	.word	0x0800b046
 800965c:	0800b1a8 	.word	0x0800b1a8

08009660 <__multadd>:
 8009660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009664:	690d      	ldr	r5, [r1, #16]
 8009666:	4607      	mov	r7, r0
 8009668:	460c      	mov	r4, r1
 800966a:	461e      	mov	r6, r3
 800966c:	f101 0c14 	add.w	ip, r1, #20
 8009670:	2000      	movs	r0, #0
 8009672:	f8dc 3000 	ldr.w	r3, [ip]
 8009676:	b299      	uxth	r1, r3
 8009678:	fb02 6101 	mla	r1, r2, r1, r6
 800967c:	0c1e      	lsrs	r6, r3, #16
 800967e:	0c0b      	lsrs	r3, r1, #16
 8009680:	fb02 3306 	mla	r3, r2, r6, r3
 8009684:	b289      	uxth	r1, r1
 8009686:	3001      	adds	r0, #1
 8009688:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800968c:	4285      	cmp	r5, r0
 800968e:	f84c 1b04 	str.w	r1, [ip], #4
 8009692:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009696:	dcec      	bgt.n	8009672 <__multadd+0x12>
 8009698:	b30e      	cbz	r6, 80096de <__multadd+0x7e>
 800969a:	68a3      	ldr	r3, [r4, #8]
 800969c:	42ab      	cmp	r3, r5
 800969e:	dc19      	bgt.n	80096d4 <__multadd+0x74>
 80096a0:	6861      	ldr	r1, [r4, #4]
 80096a2:	4638      	mov	r0, r7
 80096a4:	3101      	adds	r1, #1
 80096a6:	f7ff ff79 	bl	800959c <_Balloc>
 80096aa:	4680      	mov	r8, r0
 80096ac:	b928      	cbnz	r0, 80096ba <__multadd+0x5a>
 80096ae:	4602      	mov	r2, r0
 80096b0:	4b0c      	ldr	r3, [pc, #48]	; (80096e4 <__multadd+0x84>)
 80096b2:	480d      	ldr	r0, [pc, #52]	; (80096e8 <__multadd+0x88>)
 80096b4:	21b5      	movs	r1, #181	; 0xb5
 80096b6:	f001 f86d 	bl	800a794 <__assert_func>
 80096ba:	6922      	ldr	r2, [r4, #16]
 80096bc:	3202      	adds	r2, #2
 80096be:	f104 010c 	add.w	r1, r4, #12
 80096c2:	0092      	lsls	r2, r2, #2
 80096c4:	300c      	adds	r0, #12
 80096c6:	f7fc fc6d 	bl	8005fa4 <memcpy>
 80096ca:	4621      	mov	r1, r4
 80096cc:	4638      	mov	r0, r7
 80096ce:	f7ff ffa5 	bl	800961c <_Bfree>
 80096d2:	4644      	mov	r4, r8
 80096d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80096d8:	3501      	adds	r5, #1
 80096da:	615e      	str	r6, [r3, #20]
 80096dc:	6125      	str	r5, [r4, #16]
 80096de:	4620      	mov	r0, r4
 80096e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096e4:	0800b0b8 	.word	0x0800b0b8
 80096e8:	0800b1a8 	.word	0x0800b1a8

080096ec <__s2b>:
 80096ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096f0:	460c      	mov	r4, r1
 80096f2:	4615      	mov	r5, r2
 80096f4:	461f      	mov	r7, r3
 80096f6:	2209      	movs	r2, #9
 80096f8:	3308      	adds	r3, #8
 80096fa:	4606      	mov	r6, r0
 80096fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8009700:	2100      	movs	r1, #0
 8009702:	2201      	movs	r2, #1
 8009704:	429a      	cmp	r2, r3
 8009706:	db09      	blt.n	800971c <__s2b+0x30>
 8009708:	4630      	mov	r0, r6
 800970a:	f7ff ff47 	bl	800959c <_Balloc>
 800970e:	b940      	cbnz	r0, 8009722 <__s2b+0x36>
 8009710:	4602      	mov	r2, r0
 8009712:	4b19      	ldr	r3, [pc, #100]	; (8009778 <__s2b+0x8c>)
 8009714:	4819      	ldr	r0, [pc, #100]	; (800977c <__s2b+0x90>)
 8009716:	21ce      	movs	r1, #206	; 0xce
 8009718:	f001 f83c 	bl	800a794 <__assert_func>
 800971c:	0052      	lsls	r2, r2, #1
 800971e:	3101      	adds	r1, #1
 8009720:	e7f0      	b.n	8009704 <__s2b+0x18>
 8009722:	9b08      	ldr	r3, [sp, #32]
 8009724:	6143      	str	r3, [r0, #20]
 8009726:	2d09      	cmp	r5, #9
 8009728:	f04f 0301 	mov.w	r3, #1
 800972c:	6103      	str	r3, [r0, #16]
 800972e:	dd16      	ble.n	800975e <__s2b+0x72>
 8009730:	f104 0909 	add.w	r9, r4, #9
 8009734:	46c8      	mov	r8, r9
 8009736:	442c      	add	r4, r5
 8009738:	f818 3b01 	ldrb.w	r3, [r8], #1
 800973c:	4601      	mov	r1, r0
 800973e:	3b30      	subs	r3, #48	; 0x30
 8009740:	220a      	movs	r2, #10
 8009742:	4630      	mov	r0, r6
 8009744:	f7ff ff8c 	bl	8009660 <__multadd>
 8009748:	45a0      	cmp	r8, r4
 800974a:	d1f5      	bne.n	8009738 <__s2b+0x4c>
 800974c:	f1a5 0408 	sub.w	r4, r5, #8
 8009750:	444c      	add	r4, r9
 8009752:	1b2d      	subs	r5, r5, r4
 8009754:	1963      	adds	r3, r4, r5
 8009756:	42bb      	cmp	r3, r7
 8009758:	db04      	blt.n	8009764 <__s2b+0x78>
 800975a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800975e:	340a      	adds	r4, #10
 8009760:	2509      	movs	r5, #9
 8009762:	e7f6      	b.n	8009752 <__s2b+0x66>
 8009764:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009768:	4601      	mov	r1, r0
 800976a:	3b30      	subs	r3, #48	; 0x30
 800976c:	220a      	movs	r2, #10
 800976e:	4630      	mov	r0, r6
 8009770:	f7ff ff76 	bl	8009660 <__multadd>
 8009774:	e7ee      	b.n	8009754 <__s2b+0x68>
 8009776:	bf00      	nop
 8009778:	0800b0b8 	.word	0x0800b0b8
 800977c:	0800b1a8 	.word	0x0800b1a8

08009780 <__hi0bits>:
 8009780:	0c03      	lsrs	r3, r0, #16
 8009782:	041b      	lsls	r3, r3, #16
 8009784:	b9d3      	cbnz	r3, 80097bc <__hi0bits+0x3c>
 8009786:	0400      	lsls	r0, r0, #16
 8009788:	2310      	movs	r3, #16
 800978a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800978e:	bf04      	itt	eq
 8009790:	0200      	lsleq	r0, r0, #8
 8009792:	3308      	addeq	r3, #8
 8009794:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009798:	bf04      	itt	eq
 800979a:	0100      	lsleq	r0, r0, #4
 800979c:	3304      	addeq	r3, #4
 800979e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80097a2:	bf04      	itt	eq
 80097a4:	0080      	lsleq	r0, r0, #2
 80097a6:	3302      	addeq	r3, #2
 80097a8:	2800      	cmp	r0, #0
 80097aa:	db05      	blt.n	80097b8 <__hi0bits+0x38>
 80097ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80097b0:	f103 0301 	add.w	r3, r3, #1
 80097b4:	bf08      	it	eq
 80097b6:	2320      	moveq	r3, #32
 80097b8:	4618      	mov	r0, r3
 80097ba:	4770      	bx	lr
 80097bc:	2300      	movs	r3, #0
 80097be:	e7e4      	b.n	800978a <__hi0bits+0xa>

080097c0 <__lo0bits>:
 80097c0:	6803      	ldr	r3, [r0, #0]
 80097c2:	f013 0207 	ands.w	r2, r3, #7
 80097c6:	4601      	mov	r1, r0
 80097c8:	d00b      	beq.n	80097e2 <__lo0bits+0x22>
 80097ca:	07da      	lsls	r2, r3, #31
 80097cc:	d423      	bmi.n	8009816 <__lo0bits+0x56>
 80097ce:	0798      	lsls	r0, r3, #30
 80097d0:	bf49      	itett	mi
 80097d2:	085b      	lsrmi	r3, r3, #1
 80097d4:	089b      	lsrpl	r3, r3, #2
 80097d6:	2001      	movmi	r0, #1
 80097d8:	600b      	strmi	r3, [r1, #0]
 80097da:	bf5c      	itt	pl
 80097dc:	600b      	strpl	r3, [r1, #0]
 80097de:	2002      	movpl	r0, #2
 80097e0:	4770      	bx	lr
 80097e2:	b298      	uxth	r0, r3
 80097e4:	b9a8      	cbnz	r0, 8009812 <__lo0bits+0x52>
 80097e6:	0c1b      	lsrs	r3, r3, #16
 80097e8:	2010      	movs	r0, #16
 80097ea:	b2da      	uxtb	r2, r3
 80097ec:	b90a      	cbnz	r2, 80097f2 <__lo0bits+0x32>
 80097ee:	3008      	adds	r0, #8
 80097f0:	0a1b      	lsrs	r3, r3, #8
 80097f2:	071a      	lsls	r2, r3, #28
 80097f4:	bf04      	itt	eq
 80097f6:	091b      	lsreq	r3, r3, #4
 80097f8:	3004      	addeq	r0, #4
 80097fa:	079a      	lsls	r2, r3, #30
 80097fc:	bf04      	itt	eq
 80097fe:	089b      	lsreq	r3, r3, #2
 8009800:	3002      	addeq	r0, #2
 8009802:	07da      	lsls	r2, r3, #31
 8009804:	d403      	bmi.n	800980e <__lo0bits+0x4e>
 8009806:	085b      	lsrs	r3, r3, #1
 8009808:	f100 0001 	add.w	r0, r0, #1
 800980c:	d005      	beq.n	800981a <__lo0bits+0x5a>
 800980e:	600b      	str	r3, [r1, #0]
 8009810:	4770      	bx	lr
 8009812:	4610      	mov	r0, r2
 8009814:	e7e9      	b.n	80097ea <__lo0bits+0x2a>
 8009816:	2000      	movs	r0, #0
 8009818:	4770      	bx	lr
 800981a:	2020      	movs	r0, #32
 800981c:	4770      	bx	lr
	...

08009820 <__i2b>:
 8009820:	b510      	push	{r4, lr}
 8009822:	460c      	mov	r4, r1
 8009824:	2101      	movs	r1, #1
 8009826:	f7ff feb9 	bl	800959c <_Balloc>
 800982a:	4602      	mov	r2, r0
 800982c:	b928      	cbnz	r0, 800983a <__i2b+0x1a>
 800982e:	4b05      	ldr	r3, [pc, #20]	; (8009844 <__i2b+0x24>)
 8009830:	4805      	ldr	r0, [pc, #20]	; (8009848 <__i2b+0x28>)
 8009832:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009836:	f000 ffad 	bl	800a794 <__assert_func>
 800983a:	2301      	movs	r3, #1
 800983c:	6144      	str	r4, [r0, #20]
 800983e:	6103      	str	r3, [r0, #16]
 8009840:	bd10      	pop	{r4, pc}
 8009842:	bf00      	nop
 8009844:	0800b0b8 	.word	0x0800b0b8
 8009848:	0800b1a8 	.word	0x0800b1a8

0800984c <__multiply>:
 800984c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009850:	4691      	mov	r9, r2
 8009852:	690a      	ldr	r2, [r1, #16]
 8009854:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009858:	429a      	cmp	r2, r3
 800985a:	bfb8      	it	lt
 800985c:	460b      	movlt	r3, r1
 800985e:	460c      	mov	r4, r1
 8009860:	bfbc      	itt	lt
 8009862:	464c      	movlt	r4, r9
 8009864:	4699      	movlt	r9, r3
 8009866:	6927      	ldr	r7, [r4, #16]
 8009868:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800986c:	68a3      	ldr	r3, [r4, #8]
 800986e:	6861      	ldr	r1, [r4, #4]
 8009870:	eb07 060a 	add.w	r6, r7, sl
 8009874:	42b3      	cmp	r3, r6
 8009876:	b085      	sub	sp, #20
 8009878:	bfb8      	it	lt
 800987a:	3101      	addlt	r1, #1
 800987c:	f7ff fe8e 	bl	800959c <_Balloc>
 8009880:	b930      	cbnz	r0, 8009890 <__multiply+0x44>
 8009882:	4602      	mov	r2, r0
 8009884:	4b44      	ldr	r3, [pc, #272]	; (8009998 <__multiply+0x14c>)
 8009886:	4845      	ldr	r0, [pc, #276]	; (800999c <__multiply+0x150>)
 8009888:	f240 115d 	movw	r1, #349	; 0x15d
 800988c:	f000 ff82 	bl	800a794 <__assert_func>
 8009890:	f100 0514 	add.w	r5, r0, #20
 8009894:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009898:	462b      	mov	r3, r5
 800989a:	2200      	movs	r2, #0
 800989c:	4543      	cmp	r3, r8
 800989e:	d321      	bcc.n	80098e4 <__multiply+0x98>
 80098a0:	f104 0314 	add.w	r3, r4, #20
 80098a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80098a8:	f109 0314 	add.w	r3, r9, #20
 80098ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80098b0:	9202      	str	r2, [sp, #8]
 80098b2:	1b3a      	subs	r2, r7, r4
 80098b4:	3a15      	subs	r2, #21
 80098b6:	f022 0203 	bic.w	r2, r2, #3
 80098ba:	3204      	adds	r2, #4
 80098bc:	f104 0115 	add.w	r1, r4, #21
 80098c0:	428f      	cmp	r7, r1
 80098c2:	bf38      	it	cc
 80098c4:	2204      	movcc	r2, #4
 80098c6:	9201      	str	r2, [sp, #4]
 80098c8:	9a02      	ldr	r2, [sp, #8]
 80098ca:	9303      	str	r3, [sp, #12]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d80c      	bhi.n	80098ea <__multiply+0x9e>
 80098d0:	2e00      	cmp	r6, #0
 80098d2:	dd03      	ble.n	80098dc <__multiply+0x90>
 80098d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d05a      	beq.n	8009992 <__multiply+0x146>
 80098dc:	6106      	str	r6, [r0, #16]
 80098de:	b005      	add	sp, #20
 80098e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098e4:	f843 2b04 	str.w	r2, [r3], #4
 80098e8:	e7d8      	b.n	800989c <__multiply+0x50>
 80098ea:	f8b3 a000 	ldrh.w	sl, [r3]
 80098ee:	f1ba 0f00 	cmp.w	sl, #0
 80098f2:	d024      	beq.n	800993e <__multiply+0xf2>
 80098f4:	f104 0e14 	add.w	lr, r4, #20
 80098f8:	46a9      	mov	r9, r5
 80098fa:	f04f 0c00 	mov.w	ip, #0
 80098fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009902:	f8d9 1000 	ldr.w	r1, [r9]
 8009906:	fa1f fb82 	uxth.w	fp, r2
 800990a:	b289      	uxth	r1, r1
 800990c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009910:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009914:	f8d9 2000 	ldr.w	r2, [r9]
 8009918:	4461      	add	r1, ip
 800991a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800991e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009922:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009926:	b289      	uxth	r1, r1
 8009928:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800992c:	4577      	cmp	r7, lr
 800992e:	f849 1b04 	str.w	r1, [r9], #4
 8009932:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009936:	d8e2      	bhi.n	80098fe <__multiply+0xb2>
 8009938:	9a01      	ldr	r2, [sp, #4]
 800993a:	f845 c002 	str.w	ip, [r5, r2]
 800993e:	9a03      	ldr	r2, [sp, #12]
 8009940:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009944:	3304      	adds	r3, #4
 8009946:	f1b9 0f00 	cmp.w	r9, #0
 800994a:	d020      	beq.n	800998e <__multiply+0x142>
 800994c:	6829      	ldr	r1, [r5, #0]
 800994e:	f104 0c14 	add.w	ip, r4, #20
 8009952:	46ae      	mov	lr, r5
 8009954:	f04f 0a00 	mov.w	sl, #0
 8009958:	f8bc b000 	ldrh.w	fp, [ip]
 800995c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009960:	fb09 220b 	mla	r2, r9, fp, r2
 8009964:	4492      	add	sl, r2
 8009966:	b289      	uxth	r1, r1
 8009968:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800996c:	f84e 1b04 	str.w	r1, [lr], #4
 8009970:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009974:	f8be 1000 	ldrh.w	r1, [lr]
 8009978:	0c12      	lsrs	r2, r2, #16
 800997a:	fb09 1102 	mla	r1, r9, r2, r1
 800997e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009982:	4567      	cmp	r7, ip
 8009984:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009988:	d8e6      	bhi.n	8009958 <__multiply+0x10c>
 800998a:	9a01      	ldr	r2, [sp, #4]
 800998c:	50a9      	str	r1, [r5, r2]
 800998e:	3504      	adds	r5, #4
 8009990:	e79a      	b.n	80098c8 <__multiply+0x7c>
 8009992:	3e01      	subs	r6, #1
 8009994:	e79c      	b.n	80098d0 <__multiply+0x84>
 8009996:	bf00      	nop
 8009998:	0800b0b8 	.word	0x0800b0b8
 800999c:	0800b1a8 	.word	0x0800b1a8

080099a0 <__pow5mult>:
 80099a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099a4:	4615      	mov	r5, r2
 80099a6:	f012 0203 	ands.w	r2, r2, #3
 80099aa:	4606      	mov	r6, r0
 80099ac:	460f      	mov	r7, r1
 80099ae:	d007      	beq.n	80099c0 <__pow5mult+0x20>
 80099b0:	4c25      	ldr	r4, [pc, #148]	; (8009a48 <__pow5mult+0xa8>)
 80099b2:	3a01      	subs	r2, #1
 80099b4:	2300      	movs	r3, #0
 80099b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80099ba:	f7ff fe51 	bl	8009660 <__multadd>
 80099be:	4607      	mov	r7, r0
 80099c0:	10ad      	asrs	r5, r5, #2
 80099c2:	d03d      	beq.n	8009a40 <__pow5mult+0xa0>
 80099c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80099c6:	b97c      	cbnz	r4, 80099e8 <__pow5mult+0x48>
 80099c8:	2010      	movs	r0, #16
 80099ca:	f7ff fdcd 	bl	8009568 <malloc>
 80099ce:	4602      	mov	r2, r0
 80099d0:	6270      	str	r0, [r6, #36]	; 0x24
 80099d2:	b928      	cbnz	r0, 80099e0 <__pow5mult+0x40>
 80099d4:	4b1d      	ldr	r3, [pc, #116]	; (8009a4c <__pow5mult+0xac>)
 80099d6:	481e      	ldr	r0, [pc, #120]	; (8009a50 <__pow5mult+0xb0>)
 80099d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80099dc:	f000 feda 	bl	800a794 <__assert_func>
 80099e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80099e4:	6004      	str	r4, [r0, #0]
 80099e6:	60c4      	str	r4, [r0, #12]
 80099e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80099ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80099f0:	b94c      	cbnz	r4, 8009a06 <__pow5mult+0x66>
 80099f2:	f240 2171 	movw	r1, #625	; 0x271
 80099f6:	4630      	mov	r0, r6
 80099f8:	f7ff ff12 	bl	8009820 <__i2b>
 80099fc:	2300      	movs	r3, #0
 80099fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a02:	4604      	mov	r4, r0
 8009a04:	6003      	str	r3, [r0, #0]
 8009a06:	f04f 0900 	mov.w	r9, #0
 8009a0a:	07eb      	lsls	r3, r5, #31
 8009a0c:	d50a      	bpl.n	8009a24 <__pow5mult+0x84>
 8009a0e:	4639      	mov	r1, r7
 8009a10:	4622      	mov	r2, r4
 8009a12:	4630      	mov	r0, r6
 8009a14:	f7ff ff1a 	bl	800984c <__multiply>
 8009a18:	4639      	mov	r1, r7
 8009a1a:	4680      	mov	r8, r0
 8009a1c:	4630      	mov	r0, r6
 8009a1e:	f7ff fdfd 	bl	800961c <_Bfree>
 8009a22:	4647      	mov	r7, r8
 8009a24:	106d      	asrs	r5, r5, #1
 8009a26:	d00b      	beq.n	8009a40 <__pow5mult+0xa0>
 8009a28:	6820      	ldr	r0, [r4, #0]
 8009a2a:	b938      	cbnz	r0, 8009a3c <__pow5mult+0x9c>
 8009a2c:	4622      	mov	r2, r4
 8009a2e:	4621      	mov	r1, r4
 8009a30:	4630      	mov	r0, r6
 8009a32:	f7ff ff0b 	bl	800984c <__multiply>
 8009a36:	6020      	str	r0, [r4, #0]
 8009a38:	f8c0 9000 	str.w	r9, [r0]
 8009a3c:	4604      	mov	r4, r0
 8009a3e:	e7e4      	b.n	8009a0a <__pow5mult+0x6a>
 8009a40:	4638      	mov	r0, r7
 8009a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a46:	bf00      	nop
 8009a48:	0800b2f8 	.word	0x0800b2f8
 8009a4c:	0800b046 	.word	0x0800b046
 8009a50:	0800b1a8 	.word	0x0800b1a8

08009a54 <__lshift>:
 8009a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a58:	460c      	mov	r4, r1
 8009a5a:	6849      	ldr	r1, [r1, #4]
 8009a5c:	6923      	ldr	r3, [r4, #16]
 8009a5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a62:	68a3      	ldr	r3, [r4, #8]
 8009a64:	4607      	mov	r7, r0
 8009a66:	4691      	mov	r9, r2
 8009a68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a6c:	f108 0601 	add.w	r6, r8, #1
 8009a70:	42b3      	cmp	r3, r6
 8009a72:	db0b      	blt.n	8009a8c <__lshift+0x38>
 8009a74:	4638      	mov	r0, r7
 8009a76:	f7ff fd91 	bl	800959c <_Balloc>
 8009a7a:	4605      	mov	r5, r0
 8009a7c:	b948      	cbnz	r0, 8009a92 <__lshift+0x3e>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	4b2a      	ldr	r3, [pc, #168]	; (8009b2c <__lshift+0xd8>)
 8009a82:	482b      	ldr	r0, [pc, #172]	; (8009b30 <__lshift+0xdc>)
 8009a84:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009a88:	f000 fe84 	bl	800a794 <__assert_func>
 8009a8c:	3101      	adds	r1, #1
 8009a8e:	005b      	lsls	r3, r3, #1
 8009a90:	e7ee      	b.n	8009a70 <__lshift+0x1c>
 8009a92:	2300      	movs	r3, #0
 8009a94:	f100 0114 	add.w	r1, r0, #20
 8009a98:	f100 0210 	add.w	r2, r0, #16
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	4553      	cmp	r3, sl
 8009aa0:	db37      	blt.n	8009b12 <__lshift+0xbe>
 8009aa2:	6920      	ldr	r0, [r4, #16]
 8009aa4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009aa8:	f104 0314 	add.w	r3, r4, #20
 8009aac:	f019 091f 	ands.w	r9, r9, #31
 8009ab0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ab4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009ab8:	d02f      	beq.n	8009b1a <__lshift+0xc6>
 8009aba:	f1c9 0e20 	rsb	lr, r9, #32
 8009abe:	468a      	mov	sl, r1
 8009ac0:	f04f 0c00 	mov.w	ip, #0
 8009ac4:	681a      	ldr	r2, [r3, #0]
 8009ac6:	fa02 f209 	lsl.w	r2, r2, r9
 8009aca:	ea42 020c 	orr.w	r2, r2, ip
 8009ace:	f84a 2b04 	str.w	r2, [sl], #4
 8009ad2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ad6:	4298      	cmp	r0, r3
 8009ad8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009adc:	d8f2      	bhi.n	8009ac4 <__lshift+0x70>
 8009ade:	1b03      	subs	r3, r0, r4
 8009ae0:	3b15      	subs	r3, #21
 8009ae2:	f023 0303 	bic.w	r3, r3, #3
 8009ae6:	3304      	adds	r3, #4
 8009ae8:	f104 0215 	add.w	r2, r4, #21
 8009aec:	4290      	cmp	r0, r2
 8009aee:	bf38      	it	cc
 8009af0:	2304      	movcc	r3, #4
 8009af2:	f841 c003 	str.w	ip, [r1, r3]
 8009af6:	f1bc 0f00 	cmp.w	ip, #0
 8009afa:	d001      	beq.n	8009b00 <__lshift+0xac>
 8009afc:	f108 0602 	add.w	r6, r8, #2
 8009b00:	3e01      	subs	r6, #1
 8009b02:	4638      	mov	r0, r7
 8009b04:	612e      	str	r6, [r5, #16]
 8009b06:	4621      	mov	r1, r4
 8009b08:	f7ff fd88 	bl	800961c <_Bfree>
 8009b0c:	4628      	mov	r0, r5
 8009b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b12:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b16:	3301      	adds	r3, #1
 8009b18:	e7c1      	b.n	8009a9e <__lshift+0x4a>
 8009b1a:	3904      	subs	r1, #4
 8009b1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b20:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b24:	4298      	cmp	r0, r3
 8009b26:	d8f9      	bhi.n	8009b1c <__lshift+0xc8>
 8009b28:	e7ea      	b.n	8009b00 <__lshift+0xac>
 8009b2a:	bf00      	nop
 8009b2c:	0800b0b8 	.word	0x0800b0b8
 8009b30:	0800b1a8 	.word	0x0800b1a8

08009b34 <__mcmp>:
 8009b34:	b530      	push	{r4, r5, lr}
 8009b36:	6902      	ldr	r2, [r0, #16]
 8009b38:	690c      	ldr	r4, [r1, #16]
 8009b3a:	1b12      	subs	r2, r2, r4
 8009b3c:	d10e      	bne.n	8009b5c <__mcmp+0x28>
 8009b3e:	f100 0314 	add.w	r3, r0, #20
 8009b42:	3114      	adds	r1, #20
 8009b44:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009b48:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009b4c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009b50:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009b54:	42a5      	cmp	r5, r4
 8009b56:	d003      	beq.n	8009b60 <__mcmp+0x2c>
 8009b58:	d305      	bcc.n	8009b66 <__mcmp+0x32>
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	4610      	mov	r0, r2
 8009b5e:	bd30      	pop	{r4, r5, pc}
 8009b60:	4283      	cmp	r3, r0
 8009b62:	d3f3      	bcc.n	8009b4c <__mcmp+0x18>
 8009b64:	e7fa      	b.n	8009b5c <__mcmp+0x28>
 8009b66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b6a:	e7f7      	b.n	8009b5c <__mcmp+0x28>

08009b6c <__mdiff>:
 8009b6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b70:	460c      	mov	r4, r1
 8009b72:	4606      	mov	r6, r0
 8009b74:	4611      	mov	r1, r2
 8009b76:	4620      	mov	r0, r4
 8009b78:	4690      	mov	r8, r2
 8009b7a:	f7ff ffdb 	bl	8009b34 <__mcmp>
 8009b7e:	1e05      	subs	r5, r0, #0
 8009b80:	d110      	bne.n	8009ba4 <__mdiff+0x38>
 8009b82:	4629      	mov	r1, r5
 8009b84:	4630      	mov	r0, r6
 8009b86:	f7ff fd09 	bl	800959c <_Balloc>
 8009b8a:	b930      	cbnz	r0, 8009b9a <__mdiff+0x2e>
 8009b8c:	4b3a      	ldr	r3, [pc, #232]	; (8009c78 <__mdiff+0x10c>)
 8009b8e:	4602      	mov	r2, r0
 8009b90:	f240 2132 	movw	r1, #562	; 0x232
 8009b94:	4839      	ldr	r0, [pc, #228]	; (8009c7c <__mdiff+0x110>)
 8009b96:	f000 fdfd 	bl	800a794 <__assert_func>
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009ba0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ba4:	bfa4      	itt	ge
 8009ba6:	4643      	movge	r3, r8
 8009ba8:	46a0      	movge	r8, r4
 8009baa:	4630      	mov	r0, r6
 8009bac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009bb0:	bfa6      	itte	ge
 8009bb2:	461c      	movge	r4, r3
 8009bb4:	2500      	movge	r5, #0
 8009bb6:	2501      	movlt	r5, #1
 8009bb8:	f7ff fcf0 	bl	800959c <_Balloc>
 8009bbc:	b920      	cbnz	r0, 8009bc8 <__mdiff+0x5c>
 8009bbe:	4b2e      	ldr	r3, [pc, #184]	; (8009c78 <__mdiff+0x10c>)
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009bc6:	e7e5      	b.n	8009b94 <__mdiff+0x28>
 8009bc8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009bcc:	6926      	ldr	r6, [r4, #16]
 8009bce:	60c5      	str	r5, [r0, #12]
 8009bd0:	f104 0914 	add.w	r9, r4, #20
 8009bd4:	f108 0514 	add.w	r5, r8, #20
 8009bd8:	f100 0e14 	add.w	lr, r0, #20
 8009bdc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009be0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009be4:	f108 0210 	add.w	r2, r8, #16
 8009be8:	46f2      	mov	sl, lr
 8009bea:	2100      	movs	r1, #0
 8009bec:	f859 3b04 	ldr.w	r3, [r9], #4
 8009bf0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009bf4:	fa1f f883 	uxth.w	r8, r3
 8009bf8:	fa11 f18b 	uxtah	r1, r1, fp
 8009bfc:	0c1b      	lsrs	r3, r3, #16
 8009bfe:	eba1 0808 	sub.w	r8, r1, r8
 8009c02:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009c06:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009c0a:	fa1f f888 	uxth.w	r8, r8
 8009c0e:	1419      	asrs	r1, r3, #16
 8009c10:	454e      	cmp	r6, r9
 8009c12:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009c16:	f84a 3b04 	str.w	r3, [sl], #4
 8009c1a:	d8e7      	bhi.n	8009bec <__mdiff+0x80>
 8009c1c:	1b33      	subs	r3, r6, r4
 8009c1e:	3b15      	subs	r3, #21
 8009c20:	f023 0303 	bic.w	r3, r3, #3
 8009c24:	3304      	adds	r3, #4
 8009c26:	3415      	adds	r4, #21
 8009c28:	42a6      	cmp	r6, r4
 8009c2a:	bf38      	it	cc
 8009c2c:	2304      	movcc	r3, #4
 8009c2e:	441d      	add	r5, r3
 8009c30:	4473      	add	r3, lr
 8009c32:	469e      	mov	lr, r3
 8009c34:	462e      	mov	r6, r5
 8009c36:	4566      	cmp	r6, ip
 8009c38:	d30e      	bcc.n	8009c58 <__mdiff+0xec>
 8009c3a:	f10c 0203 	add.w	r2, ip, #3
 8009c3e:	1b52      	subs	r2, r2, r5
 8009c40:	f022 0203 	bic.w	r2, r2, #3
 8009c44:	3d03      	subs	r5, #3
 8009c46:	45ac      	cmp	ip, r5
 8009c48:	bf38      	it	cc
 8009c4a:	2200      	movcc	r2, #0
 8009c4c:	441a      	add	r2, r3
 8009c4e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009c52:	b17b      	cbz	r3, 8009c74 <__mdiff+0x108>
 8009c54:	6107      	str	r7, [r0, #16]
 8009c56:	e7a3      	b.n	8009ba0 <__mdiff+0x34>
 8009c58:	f856 8b04 	ldr.w	r8, [r6], #4
 8009c5c:	fa11 f288 	uxtah	r2, r1, r8
 8009c60:	1414      	asrs	r4, r2, #16
 8009c62:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009c66:	b292      	uxth	r2, r2
 8009c68:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009c6c:	f84e 2b04 	str.w	r2, [lr], #4
 8009c70:	1421      	asrs	r1, r4, #16
 8009c72:	e7e0      	b.n	8009c36 <__mdiff+0xca>
 8009c74:	3f01      	subs	r7, #1
 8009c76:	e7ea      	b.n	8009c4e <__mdiff+0xe2>
 8009c78:	0800b0b8 	.word	0x0800b0b8
 8009c7c:	0800b1a8 	.word	0x0800b1a8

08009c80 <__ulp>:
 8009c80:	b082      	sub	sp, #8
 8009c82:	ed8d 0b00 	vstr	d0, [sp]
 8009c86:	9b01      	ldr	r3, [sp, #4]
 8009c88:	4912      	ldr	r1, [pc, #72]	; (8009cd4 <__ulp+0x54>)
 8009c8a:	4019      	ands	r1, r3
 8009c8c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009c90:	2900      	cmp	r1, #0
 8009c92:	dd05      	ble.n	8009ca0 <__ulp+0x20>
 8009c94:	2200      	movs	r2, #0
 8009c96:	460b      	mov	r3, r1
 8009c98:	ec43 2b10 	vmov	d0, r2, r3
 8009c9c:	b002      	add	sp, #8
 8009c9e:	4770      	bx	lr
 8009ca0:	4249      	negs	r1, r1
 8009ca2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009ca6:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009caa:	f04f 0200 	mov.w	r2, #0
 8009cae:	f04f 0300 	mov.w	r3, #0
 8009cb2:	da04      	bge.n	8009cbe <__ulp+0x3e>
 8009cb4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009cb8:	fa41 f300 	asr.w	r3, r1, r0
 8009cbc:	e7ec      	b.n	8009c98 <__ulp+0x18>
 8009cbe:	f1a0 0114 	sub.w	r1, r0, #20
 8009cc2:	291e      	cmp	r1, #30
 8009cc4:	bfda      	itte	le
 8009cc6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009cca:	fa20 f101 	lsrle.w	r1, r0, r1
 8009cce:	2101      	movgt	r1, #1
 8009cd0:	460a      	mov	r2, r1
 8009cd2:	e7e1      	b.n	8009c98 <__ulp+0x18>
 8009cd4:	7ff00000 	.word	0x7ff00000

08009cd8 <__b2d>:
 8009cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cda:	6905      	ldr	r5, [r0, #16]
 8009cdc:	f100 0714 	add.w	r7, r0, #20
 8009ce0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009ce4:	1f2e      	subs	r6, r5, #4
 8009ce6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009cea:	4620      	mov	r0, r4
 8009cec:	f7ff fd48 	bl	8009780 <__hi0bits>
 8009cf0:	f1c0 0320 	rsb	r3, r0, #32
 8009cf4:	280a      	cmp	r0, #10
 8009cf6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009d74 <__b2d+0x9c>
 8009cfa:	600b      	str	r3, [r1, #0]
 8009cfc:	dc14      	bgt.n	8009d28 <__b2d+0x50>
 8009cfe:	f1c0 0e0b 	rsb	lr, r0, #11
 8009d02:	fa24 f10e 	lsr.w	r1, r4, lr
 8009d06:	42b7      	cmp	r7, r6
 8009d08:	ea41 030c 	orr.w	r3, r1, ip
 8009d0c:	bf34      	ite	cc
 8009d0e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009d12:	2100      	movcs	r1, #0
 8009d14:	3015      	adds	r0, #21
 8009d16:	fa04 f000 	lsl.w	r0, r4, r0
 8009d1a:	fa21 f10e 	lsr.w	r1, r1, lr
 8009d1e:	ea40 0201 	orr.w	r2, r0, r1
 8009d22:	ec43 2b10 	vmov	d0, r2, r3
 8009d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d28:	42b7      	cmp	r7, r6
 8009d2a:	bf3a      	itte	cc
 8009d2c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009d30:	f1a5 0608 	subcc.w	r6, r5, #8
 8009d34:	2100      	movcs	r1, #0
 8009d36:	380b      	subs	r0, #11
 8009d38:	d017      	beq.n	8009d6a <__b2d+0x92>
 8009d3a:	f1c0 0c20 	rsb	ip, r0, #32
 8009d3e:	fa04 f500 	lsl.w	r5, r4, r0
 8009d42:	42be      	cmp	r6, r7
 8009d44:	fa21 f40c 	lsr.w	r4, r1, ip
 8009d48:	ea45 0504 	orr.w	r5, r5, r4
 8009d4c:	bf8c      	ite	hi
 8009d4e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009d52:	2400      	movls	r4, #0
 8009d54:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009d58:	fa01 f000 	lsl.w	r0, r1, r0
 8009d5c:	fa24 f40c 	lsr.w	r4, r4, ip
 8009d60:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009d64:	ea40 0204 	orr.w	r2, r0, r4
 8009d68:	e7db      	b.n	8009d22 <__b2d+0x4a>
 8009d6a:	ea44 030c 	orr.w	r3, r4, ip
 8009d6e:	460a      	mov	r2, r1
 8009d70:	e7d7      	b.n	8009d22 <__b2d+0x4a>
 8009d72:	bf00      	nop
 8009d74:	3ff00000 	.word	0x3ff00000

08009d78 <__d2b>:
 8009d78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d7c:	4689      	mov	r9, r1
 8009d7e:	2101      	movs	r1, #1
 8009d80:	ec57 6b10 	vmov	r6, r7, d0
 8009d84:	4690      	mov	r8, r2
 8009d86:	f7ff fc09 	bl	800959c <_Balloc>
 8009d8a:	4604      	mov	r4, r0
 8009d8c:	b930      	cbnz	r0, 8009d9c <__d2b+0x24>
 8009d8e:	4602      	mov	r2, r0
 8009d90:	4b25      	ldr	r3, [pc, #148]	; (8009e28 <__d2b+0xb0>)
 8009d92:	4826      	ldr	r0, [pc, #152]	; (8009e2c <__d2b+0xb4>)
 8009d94:	f240 310a 	movw	r1, #778	; 0x30a
 8009d98:	f000 fcfc 	bl	800a794 <__assert_func>
 8009d9c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009da0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009da4:	bb35      	cbnz	r5, 8009df4 <__d2b+0x7c>
 8009da6:	2e00      	cmp	r6, #0
 8009da8:	9301      	str	r3, [sp, #4]
 8009daa:	d028      	beq.n	8009dfe <__d2b+0x86>
 8009dac:	4668      	mov	r0, sp
 8009dae:	9600      	str	r6, [sp, #0]
 8009db0:	f7ff fd06 	bl	80097c0 <__lo0bits>
 8009db4:	9900      	ldr	r1, [sp, #0]
 8009db6:	b300      	cbz	r0, 8009dfa <__d2b+0x82>
 8009db8:	9a01      	ldr	r2, [sp, #4]
 8009dba:	f1c0 0320 	rsb	r3, r0, #32
 8009dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8009dc2:	430b      	orrs	r3, r1
 8009dc4:	40c2      	lsrs	r2, r0
 8009dc6:	6163      	str	r3, [r4, #20]
 8009dc8:	9201      	str	r2, [sp, #4]
 8009dca:	9b01      	ldr	r3, [sp, #4]
 8009dcc:	61a3      	str	r3, [r4, #24]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	bf14      	ite	ne
 8009dd2:	2202      	movne	r2, #2
 8009dd4:	2201      	moveq	r2, #1
 8009dd6:	6122      	str	r2, [r4, #16]
 8009dd8:	b1d5      	cbz	r5, 8009e10 <__d2b+0x98>
 8009dda:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009dde:	4405      	add	r5, r0
 8009de0:	f8c9 5000 	str.w	r5, [r9]
 8009de4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009de8:	f8c8 0000 	str.w	r0, [r8]
 8009dec:	4620      	mov	r0, r4
 8009dee:	b003      	add	sp, #12
 8009df0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009df4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009df8:	e7d5      	b.n	8009da6 <__d2b+0x2e>
 8009dfa:	6161      	str	r1, [r4, #20]
 8009dfc:	e7e5      	b.n	8009dca <__d2b+0x52>
 8009dfe:	a801      	add	r0, sp, #4
 8009e00:	f7ff fcde 	bl	80097c0 <__lo0bits>
 8009e04:	9b01      	ldr	r3, [sp, #4]
 8009e06:	6163      	str	r3, [r4, #20]
 8009e08:	2201      	movs	r2, #1
 8009e0a:	6122      	str	r2, [r4, #16]
 8009e0c:	3020      	adds	r0, #32
 8009e0e:	e7e3      	b.n	8009dd8 <__d2b+0x60>
 8009e10:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009e14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009e18:	f8c9 0000 	str.w	r0, [r9]
 8009e1c:	6918      	ldr	r0, [r3, #16]
 8009e1e:	f7ff fcaf 	bl	8009780 <__hi0bits>
 8009e22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009e26:	e7df      	b.n	8009de8 <__d2b+0x70>
 8009e28:	0800b0b8 	.word	0x0800b0b8
 8009e2c:	0800b1a8 	.word	0x0800b1a8

08009e30 <__ratio>:
 8009e30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e34:	4688      	mov	r8, r1
 8009e36:	4669      	mov	r1, sp
 8009e38:	4681      	mov	r9, r0
 8009e3a:	f7ff ff4d 	bl	8009cd8 <__b2d>
 8009e3e:	a901      	add	r1, sp, #4
 8009e40:	4640      	mov	r0, r8
 8009e42:	ec55 4b10 	vmov	r4, r5, d0
 8009e46:	f7ff ff47 	bl	8009cd8 <__b2d>
 8009e4a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e4e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009e52:	eba3 0c02 	sub.w	ip, r3, r2
 8009e56:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009e5a:	1a9b      	subs	r3, r3, r2
 8009e5c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009e60:	ec51 0b10 	vmov	r0, r1, d0
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	bfd6      	itet	le
 8009e68:	460a      	movle	r2, r1
 8009e6a:	462a      	movgt	r2, r5
 8009e6c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009e70:	468b      	mov	fp, r1
 8009e72:	462f      	mov	r7, r5
 8009e74:	bfd4      	ite	le
 8009e76:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009e7a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009e7e:	4620      	mov	r0, r4
 8009e80:	ee10 2a10 	vmov	r2, s0
 8009e84:	465b      	mov	r3, fp
 8009e86:	4639      	mov	r1, r7
 8009e88:	f7f6 fcf0 	bl	800086c <__aeabi_ddiv>
 8009e8c:	ec41 0b10 	vmov	d0, r0, r1
 8009e90:	b003      	add	sp, #12
 8009e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009e96 <__copybits>:
 8009e96:	3901      	subs	r1, #1
 8009e98:	b570      	push	{r4, r5, r6, lr}
 8009e9a:	1149      	asrs	r1, r1, #5
 8009e9c:	6914      	ldr	r4, [r2, #16]
 8009e9e:	3101      	adds	r1, #1
 8009ea0:	f102 0314 	add.w	r3, r2, #20
 8009ea4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009ea8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009eac:	1f05      	subs	r5, r0, #4
 8009eae:	42a3      	cmp	r3, r4
 8009eb0:	d30c      	bcc.n	8009ecc <__copybits+0x36>
 8009eb2:	1aa3      	subs	r3, r4, r2
 8009eb4:	3b11      	subs	r3, #17
 8009eb6:	f023 0303 	bic.w	r3, r3, #3
 8009eba:	3211      	adds	r2, #17
 8009ebc:	42a2      	cmp	r2, r4
 8009ebe:	bf88      	it	hi
 8009ec0:	2300      	movhi	r3, #0
 8009ec2:	4418      	add	r0, r3
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	4288      	cmp	r0, r1
 8009ec8:	d305      	bcc.n	8009ed6 <__copybits+0x40>
 8009eca:	bd70      	pop	{r4, r5, r6, pc}
 8009ecc:	f853 6b04 	ldr.w	r6, [r3], #4
 8009ed0:	f845 6f04 	str.w	r6, [r5, #4]!
 8009ed4:	e7eb      	b.n	8009eae <__copybits+0x18>
 8009ed6:	f840 3b04 	str.w	r3, [r0], #4
 8009eda:	e7f4      	b.n	8009ec6 <__copybits+0x30>

08009edc <__any_on>:
 8009edc:	f100 0214 	add.w	r2, r0, #20
 8009ee0:	6900      	ldr	r0, [r0, #16]
 8009ee2:	114b      	asrs	r3, r1, #5
 8009ee4:	4298      	cmp	r0, r3
 8009ee6:	b510      	push	{r4, lr}
 8009ee8:	db11      	blt.n	8009f0e <__any_on+0x32>
 8009eea:	dd0a      	ble.n	8009f02 <__any_on+0x26>
 8009eec:	f011 011f 	ands.w	r1, r1, #31
 8009ef0:	d007      	beq.n	8009f02 <__any_on+0x26>
 8009ef2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009ef6:	fa24 f001 	lsr.w	r0, r4, r1
 8009efa:	fa00 f101 	lsl.w	r1, r0, r1
 8009efe:	428c      	cmp	r4, r1
 8009f00:	d10b      	bne.n	8009f1a <__any_on+0x3e>
 8009f02:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d803      	bhi.n	8009f12 <__any_on+0x36>
 8009f0a:	2000      	movs	r0, #0
 8009f0c:	bd10      	pop	{r4, pc}
 8009f0e:	4603      	mov	r3, r0
 8009f10:	e7f7      	b.n	8009f02 <__any_on+0x26>
 8009f12:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009f16:	2900      	cmp	r1, #0
 8009f18:	d0f5      	beq.n	8009f06 <__any_on+0x2a>
 8009f1a:	2001      	movs	r0, #1
 8009f1c:	e7f6      	b.n	8009f0c <__any_on+0x30>

08009f1e <_calloc_r>:
 8009f1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f20:	fba1 2402 	umull	r2, r4, r1, r2
 8009f24:	b94c      	cbnz	r4, 8009f3a <_calloc_r+0x1c>
 8009f26:	4611      	mov	r1, r2
 8009f28:	9201      	str	r2, [sp, #4]
 8009f2a:	f000 f87b 	bl	800a024 <_malloc_r>
 8009f2e:	9a01      	ldr	r2, [sp, #4]
 8009f30:	4605      	mov	r5, r0
 8009f32:	b930      	cbnz	r0, 8009f42 <_calloc_r+0x24>
 8009f34:	4628      	mov	r0, r5
 8009f36:	b003      	add	sp, #12
 8009f38:	bd30      	pop	{r4, r5, pc}
 8009f3a:	220c      	movs	r2, #12
 8009f3c:	6002      	str	r2, [r0, #0]
 8009f3e:	2500      	movs	r5, #0
 8009f40:	e7f8      	b.n	8009f34 <_calloc_r+0x16>
 8009f42:	4621      	mov	r1, r4
 8009f44:	f7fc f83c 	bl	8005fc0 <memset>
 8009f48:	e7f4      	b.n	8009f34 <_calloc_r+0x16>
	...

08009f4c <_free_r>:
 8009f4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f4e:	2900      	cmp	r1, #0
 8009f50:	d044      	beq.n	8009fdc <_free_r+0x90>
 8009f52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f56:	9001      	str	r0, [sp, #4]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	f1a1 0404 	sub.w	r4, r1, #4
 8009f5e:	bfb8      	it	lt
 8009f60:	18e4      	addlt	r4, r4, r3
 8009f62:	f000 fca5 	bl	800a8b0 <__malloc_lock>
 8009f66:	4a1e      	ldr	r2, [pc, #120]	; (8009fe0 <_free_r+0x94>)
 8009f68:	9801      	ldr	r0, [sp, #4]
 8009f6a:	6813      	ldr	r3, [r2, #0]
 8009f6c:	b933      	cbnz	r3, 8009f7c <_free_r+0x30>
 8009f6e:	6063      	str	r3, [r4, #4]
 8009f70:	6014      	str	r4, [r2, #0]
 8009f72:	b003      	add	sp, #12
 8009f74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f78:	f000 bca0 	b.w	800a8bc <__malloc_unlock>
 8009f7c:	42a3      	cmp	r3, r4
 8009f7e:	d908      	bls.n	8009f92 <_free_r+0x46>
 8009f80:	6825      	ldr	r5, [r4, #0]
 8009f82:	1961      	adds	r1, r4, r5
 8009f84:	428b      	cmp	r3, r1
 8009f86:	bf01      	itttt	eq
 8009f88:	6819      	ldreq	r1, [r3, #0]
 8009f8a:	685b      	ldreq	r3, [r3, #4]
 8009f8c:	1949      	addeq	r1, r1, r5
 8009f8e:	6021      	streq	r1, [r4, #0]
 8009f90:	e7ed      	b.n	8009f6e <_free_r+0x22>
 8009f92:	461a      	mov	r2, r3
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	b10b      	cbz	r3, 8009f9c <_free_r+0x50>
 8009f98:	42a3      	cmp	r3, r4
 8009f9a:	d9fa      	bls.n	8009f92 <_free_r+0x46>
 8009f9c:	6811      	ldr	r1, [r2, #0]
 8009f9e:	1855      	adds	r5, r2, r1
 8009fa0:	42a5      	cmp	r5, r4
 8009fa2:	d10b      	bne.n	8009fbc <_free_r+0x70>
 8009fa4:	6824      	ldr	r4, [r4, #0]
 8009fa6:	4421      	add	r1, r4
 8009fa8:	1854      	adds	r4, r2, r1
 8009faa:	42a3      	cmp	r3, r4
 8009fac:	6011      	str	r1, [r2, #0]
 8009fae:	d1e0      	bne.n	8009f72 <_free_r+0x26>
 8009fb0:	681c      	ldr	r4, [r3, #0]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	6053      	str	r3, [r2, #4]
 8009fb6:	4421      	add	r1, r4
 8009fb8:	6011      	str	r1, [r2, #0]
 8009fba:	e7da      	b.n	8009f72 <_free_r+0x26>
 8009fbc:	d902      	bls.n	8009fc4 <_free_r+0x78>
 8009fbe:	230c      	movs	r3, #12
 8009fc0:	6003      	str	r3, [r0, #0]
 8009fc2:	e7d6      	b.n	8009f72 <_free_r+0x26>
 8009fc4:	6825      	ldr	r5, [r4, #0]
 8009fc6:	1961      	adds	r1, r4, r5
 8009fc8:	428b      	cmp	r3, r1
 8009fca:	bf04      	itt	eq
 8009fcc:	6819      	ldreq	r1, [r3, #0]
 8009fce:	685b      	ldreq	r3, [r3, #4]
 8009fd0:	6063      	str	r3, [r4, #4]
 8009fd2:	bf04      	itt	eq
 8009fd4:	1949      	addeq	r1, r1, r5
 8009fd6:	6021      	streq	r1, [r4, #0]
 8009fd8:	6054      	str	r4, [r2, #4]
 8009fda:	e7ca      	b.n	8009f72 <_free_r+0x26>
 8009fdc:	b003      	add	sp, #12
 8009fde:	bd30      	pop	{r4, r5, pc}
 8009fe0:	20001f94 	.word	0x20001f94

08009fe4 <sbrk_aligned>:
 8009fe4:	b570      	push	{r4, r5, r6, lr}
 8009fe6:	4e0e      	ldr	r6, [pc, #56]	; (800a020 <sbrk_aligned+0x3c>)
 8009fe8:	460c      	mov	r4, r1
 8009fea:	6831      	ldr	r1, [r6, #0]
 8009fec:	4605      	mov	r5, r0
 8009fee:	b911      	cbnz	r1, 8009ff6 <sbrk_aligned+0x12>
 8009ff0:	f000 fb4a 	bl	800a688 <_sbrk_r>
 8009ff4:	6030      	str	r0, [r6, #0]
 8009ff6:	4621      	mov	r1, r4
 8009ff8:	4628      	mov	r0, r5
 8009ffa:	f000 fb45 	bl	800a688 <_sbrk_r>
 8009ffe:	1c43      	adds	r3, r0, #1
 800a000:	d00a      	beq.n	800a018 <sbrk_aligned+0x34>
 800a002:	1cc4      	adds	r4, r0, #3
 800a004:	f024 0403 	bic.w	r4, r4, #3
 800a008:	42a0      	cmp	r0, r4
 800a00a:	d007      	beq.n	800a01c <sbrk_aligned+0x38>
 800a00c:	1a21      	subs	r1, r4, r0
 800a00e:	4628      	mov	r0, r5
 800a010:	f000 fb3a 	bl	800a688 <_sbrk_r>
 800a014:	3001      	adds	r0, #1
 800a016:	d101      	bne.n	800a01c <sbrk_aligned+0x38>
 800a018:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a01c:	4620      	mov	r0, r4
 800a01e:	bd70      	pop	{r4, r5, r6, pc}
 800a020:	20001f98 	.word	0x20001f98

0800a024 <_malloc_r>:
 800a024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a028:	1ccd      	adds	r5, r1, #3
 800a02a:	f025 0503 	bic.w	r5, r5, #3
 800a02e:	3508      	adds	r5, #8
 800a030:	2d0c      	cmp	r5, #12
 800a032:	bf38      	it	cc
 800a034:	250c      	movcc	r5, #12
 800a036:	2d00      	cmp	r5, #0
 800a038:	4607      	mov	r7, r0
 800a03a:	db01      	blt.n	800a040 <_malloc_r+0x1c>
 800a03c:	42a9      	cmp	r1, r5
 800a03e:	d905      	bls.n	800a04c <_malloc_r+0x28>
 800a040:	230c      	movs	r3, #12
 800a042:	603b      	str	r3, [r7, #0]
 800a044:	2600      	movs	r6, #0
 800a046:	4630      	mov	r0, r6
 800a048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a04c:	4e2e      	ldr	r6, [pc, #184]	; (800a108 <_malloc_r+0xe4>)
 800a04e:	f000 fc2f 	bl	800a8b0 <__malloc_lock>
 800a052:	6833      	ldr	r3, [r6, #0]
 800a054:	461c      	mov	r4, r3
 800a056:	bb34      	cbnz	r4, 800a0a6 <_malloc_r+0x82>
 800a058:	4629      	mov	r1, r5
 800a05a:	4638      	mov	r0, r7
 800a05c:	f7ff ffc2 	bl	8009fe4 <sbrk_aligned>
 800a060:	1c43      	adds	r3, r0, #1
 800a062:	4604      	mov	r4, r0
 800a064:	d14d      	bne.n	800a102 <_malloc_r+0xde>
 800a066:	6834      	ldr	r4, [r6, #0]
 800a068:	4626      	mov	r6, r4
 800a06a:	2e00      	cmp	r6, #0
 800a06c:	d140      	bne.n	800a0f0 <_malloc_r+0xcc>
 800a06e:	6823      	ldr	r3, [r4, #0]
 800a070:	4631      	mov	r1, r6
 800a072:	4638      	mov	r0, r7
 800a074:	eb04 0803 	add.w	r8, r4, r3
 800a078:	f000 fb06 	bl	800a688 <_sbrk_r>
 800a07c:	4580      	cmp	r8, r0
 800a07e:	d13a      	bne.n	800a0f6 <_malloc_r+0xd2>
 800a080:	6821      	ldr	r1, [r4, #0]
 800a082:	3503      	adds	r5, #3
 800a084:	1a6d      	subs	r5, r5, r1
 800a086:	f025 0503 	bic.w	r5, r5, #3
 800a08a:	3508      	adds	r5, #8
 800a08c:	2d0c      	cmp	r5, #12
 800a08e:	bf38      	it	cc
 800a090:	250c      	movcc	r5, #12
 800a092:	4629      	mov	r1, r5
 800a094:	4638      	mov	r0, r7
 800a096:	f7ff ffa5 	bl	8009fe4 <sbrk_aligned>
 800a09a:	3001      	adds	r0, #1
 800a09c:	d02b      	beq.n	800a0f6 <_malloc_r+0xd2>
 800a09e:	6823      	ldr	r3, [r4, #0]
 800a0a0:	442b      	add	r3, r5
 800a0a2:	6023      	str	r3, [r4, #0]
 800a0a4:	e00e      	b.n	800a0c4 <_malloc_r+0xa0>
 800a0a6:	6822      	ldr	r2, [r4, #0]
 800a0a8:	1b52      	subs	r2, r2, r5
 800a0aa:	d41e      	bmi.n	800a0ea <_malloc_r+0xc6>
 800a0ac:	2a0b      	cmp	r2, #11
 800a0ae:	d916      	bls.n	800a0de <_malloc_r+0xba>
 800a0b0:	1961      	adds	r1, r4, r5
 800a0b2:	42a3      	cmp	r3, r4
 800a0b4:	6025      	str	r5, [r4, #0]
 800a0b6:	bf18      	it	ne
 800a0b8:	6059      	strne	r1, [r3, #4]
 800a0ba:	6863      	ldr	r3, [r4, #4]
 800a0bc:	bf08      	it	eq
 800a0be:	6031      	streq	r1, [r6, #0]
 800a0c0:	5162      	str	r2, [r4, r5]
 800a0c2:	604b      	str	r3, [r1, #4]
 800a0c4:	4638      	mov	r0, r7
 800a0c6:	f104 060b 	add.w	r6, r4, #11
 800a0ca:	f000 fbf7 	bl	800a8bc <__malloc_unlock>
 800a0ce:	f026 0607 	bic.w	r6, r6, #7
 800a0d2:	1d23      	adds	r3, r4, #4
 800a0d4:	1af2      	subs	r2, r6, r3
 800a0d6:	d0b6      	beq.n	800a046 <_malloc_r+0x22>
 800a0d8:	1b9b      	subs	r3, r3, r6
 800a0da:	50a3      	str	r3, [r4, r2]
 800a0dc:	e7b3      	b.n	800a046 <_malloc_r+0x22>
 800a0de:	6862      	ldr	r2, [r4, #4]
 800a0e0:	42a3      	cmp	r3, r4
 800a0e2:	bf0c      	ite	eq
 800a0e4:	6032      	streq	r2, [r6, #0]
 800a0e6:	605a      	strne	r2, [r3, #4]
 800a0e8:	e7ec      	b.n	800a0c4 <_malloc_r+0xa0>
 800a0ea:	4623      	mov	r3, r4
 800a0ec:	6864      	ldr	r4, [r4, #4]
 800a0ee:	e7b2      	b.n	800a056 <_malloc_r+0x32>
 800a0f0:	4634      	mov	r4, r6
 800a0f2:	6876      	ldr	r6, [r6, #4]
 800a0f4:	e7b9      	b.n	800a06a <_malloc_r+0x46>
 800a0f6:	230c      	movs	r3, #12
 800a0f8:	603b      	str	r3, [r7, #0]
 800a0fa:	4638      	mov	r0, r7
 800a0fc:	f000 fbde 	bl	800a8bc <__malloc_unlock>
 800a100:	e7a1      	b.n	800a046 <_malloc_r+0x22>
 800a102:	6025      	str	r5, [r4, #0]
 800a104:	e7de      	b.n	800a0c4 <_malloc_r+0xa0>
 800a106:	bf00      	nop
 800a108:	20001f94 	.word	0x20001f94

0800a10c <__ssputs_r>:
 800a10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a110:	688e      	ldr	r6, [r1, #8]
 800a112:	429e      	cmp	r6, r3
 800a114:	4682      	mov	sl, r0
 800a116:	460c      	mov	r4, r1
 800a118:	4690      	mov	r8, r2
 800a11a:	461f      	mov	r7, r3
 800a11c:	d838      	bhi.n	800a190 <__ssputs_r+0x84>
 800a11e:	898a      	ldrh	r2, [r1, #12]
 800a120:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a124:	d032      	beq.n	800a18c <__ssputs_r+0x80>
 800a126:	6825      	ldr	r5, [r4, #0]
 800a128:	6909      	ldr	r1, [r1, #16]
 800a12a:	eba5 0901 	sub.w	r9, r5, r1
 800a12e:	6965      	ldr	r5, [r4, #20]
 800a130:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a134:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a138:	3301      	adds	r3, #1
 800a13a:	444b      	add	r3, r9
 800a13c:	106d      	asrs	r5, r5, #1
 800a13e:	429d      	cmp	r5, r3
 800a140:	bf38      	it	cc
 800a142:	461d      	movcc	r5, r3
 800a144:	0553      	lsls	r3, r2, #21
 800a146:	d531      	bpl.n	800a1ac <__ssputs_r+0xa0>
 800a148:	4629      	mov	r1, r5
 800a14a:	f7ff ff6b 	bl	800a024 <_malloc_r>
 800a14e:	4606      	mov	r6, r0
 800a150:	b950      	cbnz	r0, 800a168 <__ssputs_r+0x5c>
 800a152:	230c      	movs	r3, #12
 800a154:	f8ca 3000 	str.w	r3, [sl]
 800a158:	89a3      	ldrh	r3, [r4, #12]
 800a15a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a15e:	81a3      	strh	r3, [r4, #12]
 800a160:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a168:	6921      	ldr	r1, [r4, #16]
 800a16a:	464a      	mov	r2, r9
 800a16c:	f7fb ff1a 	bl	8005fa4 <memcpy>
 800a170:	89a3      	ldrh	r3, [r4, #12]
 800a172:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a17a:	81a3      	strh	r3, [r4, #12]
 800a17c:	6126      	str	r6, [r4, #16]
 800a17e:	6165      	str	r5, [r4, #20]
 800a180:	444e      	add	r6, r9
 800a182:	eba5 0509 	sub.w	r5, r5, r9
 800a186:	6026      	str	r6, [r4, #0]
 800a188:	60a5      	str	r5, [r4, #8]
 800a18a:	463e      	mov	r6, r7
 800a18c:	42be      	cmp	r6, r7
 800a18e:	d900      	bls.n	800a192 <__ssputs_r+0x86>
 800a190:	463e      	mov	r6, r7
 800a192:	6820      	ldr	r0, [r4, #0]
 800a194:	4632      	mov	r2, r6
 800a196:	4641      	mov	r1, r8
 800a198:	f000 fb70 	bl	800a87c <memmove>
 800a19c:	68a3      	ldr	r3, [r4, #8]
 800a19e:	1b9b      	subs	r3, r3, r6
 800a1a0:	60a3      	str	r3, [r4, #8]
 800a1a2:	6823      	ldr	r3, [r4, #0]
 800a1a4:	4433      	add	r3, r6
 800a1a6:	6023      	str	r3, [r4, #0]
 800a1a8:	2000      	movs	r0, #0
 800a1aa:	e7db      	b.n	800a164 <__ssputs_r+0x58>
 800a1ac:	462a      	mov	r2, r5
 800a1ae:	f000 fb8b 	bl	800a8c8 <_realloc_r>
 800a1b2:	4606      	mov	r6, r0
 800a1b4:	2800      	cmp	r0, #0
 800a1b6:	d1e1      	bne.n	800a17c <__ssputs_r+0x70>
 800a1b8:	6921      	ldr	r1, [r4, #16]
 800a1ba:	4650      	mov	r0, sl
 800a1bc:	f7ff fec6 	bl	8009f4c <_free_r>
 800a1c0:	e7c7      	b.n	800a152 <__ssputs_r+0x46>
	...

0800a1c4 <_svfiprintf_r>:
 800a1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1c8:	4698      	mov	r8, r3
 800a1ca:	898b      	ldrh	r3, [r1, #12]
 800a1cc:	061b      	lsls	r3, r3, #24
 800a1ce:	b09d      	sub	sp, #116	; 0x74
 800a1d0:	4607      	mov	r7, r0
 800a1d2:	460d      	mov	r5, r1
 800a1d4:	4614      	mov	r4, r2
 800a1d6:	d50e      	bpl.n	800a1f6 <_svfiprintf_r+0x32>
 800a1d8:	690b      	ldr	r3, [r1, #16]
 800a1da:	b963      	cbnz	r3, 800a1f6 <_svfiprintf_r+0x32>
 800a1dc:	2140      	movs	r1, #64	; 0x40
 800a1de:	f7ff ff21 	bl	800a024 <_malloc_r>
 800a1e2:	6028      	str	r0, [r5, #0]
 800a1e4:	6128      	str	r0, [r5, #16]
 800a1e6:	b920      	cbnz	r0, 800a1f2 <_svfiprintf_r+0x2e>
 800a1e8:	230c      	movs	r3, #12
 800a1ea:	603b      	str	r3, [r7, #0]
 800a1ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1f0:	e0d1      	b.n	800a396 <_svfiprintf_r+0x1d2>
 800a1f2:	2340      	movs	r3, #64	; 0x40
 800a1f4:	616b      	str	r3, [r5, #20]
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	9309      	str	r3, [sp, #36]	; 0x24
 800a1fa:	2320      	movs	r3, #32
 800a1fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a200:	f8cd 800c 	str.w	r8, [sp, #12]
 800a204:	2330      	movs	r3, #48	; 0x30
 800a206:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a3b0 <_svfiprintf_r+0x1ec>
 800a20a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a20e:	f04f 0901 	mov.w	r9, #1
 800a212:	4623      	mov	r3, r4
 800a214:	469a      	mov	sl, r3
 800a216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a21a:	b10a      	cbz	r2, 800a220 <_svfiprintf_r+0x5c>
 800a21c:	2a25      	cmp	r2, #37	; 0x25
 800a21e:	d1f9      	bne.n	800a214 <_svfiprintf_r+0x50>
 800a220:	ebba 0b04 	subs.w	fp, sl, r4
 800a224:	d00b      	beq.n	800a23e <_svfiprintf_r+0x7a>
 800a226:	465b      	mov	r3, fp
 800a228:	4622      	mov	r2, r4
 800a22a:	4629      	mov	r1, r5
 800a22c:	4638      	mov	r0, r7
 800a22e:	f7ff ff6d 	bl	800a10c <__ssputs_r>
 800a232:	3001      	adds	r0, #1
 800a234:	f000 80aa 	beq.w	800a38c <_svfiprintf_r+0x1c8>
 800a238:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a23a:	445a      	add	r2, fp
 800a23c:	9209      	str	r2, [sp, #36]	; 0x24
 800a23e:	f89a 3000 	ldrb.w	r3, [sl]
 800a242:	2b00      	cmp	r3, #0
 800a244:	f000 80a2 	beq.w	800a38c <_svfiprintf_r+0x1c8>
 800a248:	2300      	movs	r3, #0
 800a24a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a24e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a252:	f10a 0a01 	add.w	sl, sl, #1
 800a256:	9304      	str	r3, [sp, #16]
 800a258:	9307      	str	r3, [sp, #28]
 800a25a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a25e:	931a      	str	r3, [sp, #104]	; 0x68
 800a260:	4654      	mov	r4, sl
 800a262:	2205      	movs	r2, #5
 800a264:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a268:	4851      	ldr	r0, [pc, #324]	; (800a3b0 <_svfiprintf_r+0x1ec>)
 800a26a:	f7f5 ffc9 	bl	8000200 <memchr>
 800a26e:	9a04      	ldr	r2, [sp, #16]
 800a270:	b9d8      	cbnz	r0, 800a2aa <_svfiprintf_r+0xe6>
 800a272:	06d0      	lsls	r0, r2, #27
 800a274:	bf44      	itt	mi
 800a276:	2320      	movmi	r3, #32
 800a278:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a27c:	0711      	lsls	r1, r2, #28
 800a27e:	bf44      	itt	mi
 800a280:	232b      	movmi	r3, #43	; 0x2b
 800a282:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a286:	f89a 3000 	ldrb.w	r3, [sl]
 800a28a:	2b2a      	cmp	r3, #42	; 0x2a
 800a28c:	d015      	beq.n	800a2ba <_svfiprintf_r+0xf6>
 800a28e:	9a07      	ldr	r2, [sp, #28]
 800a290:	4654      	mov	r4, sl
 800a292:	2000      	movs	r0, #0
 800a294:	f04f 0c0a 	mov.w	ip, #10
 800a298:	4621      	mov	r1, r4
 800a29a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a29e:	3b30      	subs	r3, #48	; 0x30
 800a2a0:	2b09      	cmp	r3, #9
 800a2a2:	d94e      	bls.n	800a342 <_svfiprintf_r+0x17e>
 800a2a4:	b1b0      	cbz	r0, 800a2d4 <_svfiprintf_r+0x110>
 800a2a6:	9207      	str	r2, [sp, #28]
 800a2a8:	e014      	b.n	800a2d4 <_svfiprintf_r+0x110>
 800a2aa:	eba0 0308 	sub.w	r3, r0, r8
 800a2ae:	fa09 f303 	lsl.w	r3, r9, r3
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	9304      	str	r3, [sp, #16]
 800a2b6:	46a2      	mov	sl, r4
 800a2b8:	e7d2      	b.n	800a260 <_svfiprintf_r+0x9c>
 800a2ba:	9b03      	ldr	r3, [sp, #12]
 800a2bc:	1d19      	adds	r1, r3, #4
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	9103      	str	r1, [sp, #12]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	bfbb      	ittet	lt
 800a2c6:	425b      	neglt	r3, r3
 800a2c8:	f042 0202 	orrlt.w	r2, r2, #2
 800a2cc:	9307      	strge	r3, [sp, #28]
 800a2ce:	9307      	strlt	r3, [sp, #28]
 800a2d0:	bfb8      	it	lt
 800a2d2:	9204      	strlt	r2, [sp, #16]
 800a2d4:	7823      	ldrb	r3, [r4, #0]
 800a2d6:	2b2e      	cmp	r3, #46	; 0x2e
 800a2d8:	d10c      	bne.n	800a2f4 <_svfiprintf_r+0x130>
 800a2da:	7863      	ldrb	r3, [r4, #1]
 800a2dc:	2b2a      	cmp	r3, #42	; 0x2a
 800a2de:	d135      	bne.n	800a34c <_svfiprintf_r+0x188>
 800a2e0:	9b03      	ldr	r3, [sp, #12]
 800a2e2:	1d1a      	adds	r2, r3, #4
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	9203      	str	r2, [sp, #12]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	bfb8      	it	lt
 800a2ec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a2f0:	3402      	adds	r4, #2
 800a2f2:	9305      	str	r3, [sp, #20]
 800a2f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a3c0 <_svfiprintf_r+0x1fc>
 800a2f8:	7821      	ldrb	r1, [r4, #0]
 800a2fa:	2203      	movs	r2, #3
 800a2fc:	4650      	mov	r0, sl
 800a2fe:	f7f5 ff7f 	bl	8000200 <memchr>
 800a302:	b140      	cbz	r0, 800a316 <_svfiprintf_r+0x152>
 800a304:	2340      	movs	r3, #64	; 0x40
 800a306:	eba0 000a 	sub.w	r0, r0, sl
 800a30a:	fa03 f000 	lsl.w	r0, r3, r0
 800a30e:	9b04      	ldr	r3, [sp, #16]
 800a310:	4303      	orrs	r3, r0
 800a312:	3401      	adds	r4, #1
 800a314:	9304      	str	r3, [sp, #16]
 800a316:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a31a:	4826      	ldr	r0, [pc, #152]	; (800a3b4 <_svfiprintf_r+0x1f0>)
 800a31c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a320:	2206      	movs	r2, #6
 800a322:	f7f5 ff6d 	bl	8000200 <memchr>
 800a326:	2800      	cmp	r0, #0
 800a328:	d038      	beq.n	800a39c <_svfiprintf_r+0x1d8>
 800a32a:	4b23      	ldr	r3, [pc, #140]	; (800a3b8 <_svfiprintf_r+0x1f4>)
 800a32c:	bb1b      	cbnz	r3, 800a376 <_svfiprintf_r+0x1b2>
 800a32e:	9b03      	ldr	r3, [sp, #12]
 800a330:	3307      	adds	r3, #7
 800a332:	f023 0307 	bic.w	r3, r3, #7
 800a336:	3308      	adds	r3, #8
 800a338:	9303      	str	r3, [sp, #12]
 800a33a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a33c:	4433      	add	r3, r6
 800a33e:	9309      	str	r3, [sp, #36]	; 0x24
 800a340:	e767      	b.n	800a212 <_svfiprintf_r+0x4e>
 800a342:	fb0c 3202 	mla	r2, ip, r2, r3
 800a346:	460c      	mov	r4, r1
 800a348:	2001      	movs	r0, #1
 800a34a:	e7a5      	b.n	800a298 <_svfiprintf_r+0xd4>
 800a34c:	2300      	movs	r3, #0
 800a34e:	3401      	adds	r4, #1
 800a350:	9305      	str	r3, [sp, #20]
 800a352:	4619      	mov	r1, r3
 800a354:	f04f 0c0a 	mov.w	ip, #10
 800a358:	4620      	mov	r0, r4
 800a35a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a35e:	3a30      	subs	r2, #48	; 0x30
 800a360:	2a09      	cmp	r2, #9
 800a362:	d903      	bls.n	800a36c <_svfiprintf_r+0x1a8>
 800a364:	2b00      	cmp	r3, #0
 800a366:	d0c5      	beq.n	800a2f4 <_svfiprintf_r+0x130>
 800a368:	9105      	str	r1, [sp, #20]
 800a36a:	e7c3      	b.n	800a2f4 <_svfiprintf_r+0x130>
 800a36c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a370:	4604      	mov	r4, r0
 800a372:	2301      	movs	r3, #1
 800a374:	e7f0      	b.n	800a358 <_svfiprintf_r+0x194>
 800a376:	ab03      	add	r3, sp, #12
 800a378:	9300      	str	r3, [sp, #0]
 800a37a:	462a      	mov	r2, r5
 800a37c:	4b0f      	ldr	r3, [pc, #60]	; (800a3bc <_svfiprintf_r+0x1f8>)
 800a37e:	a904      	add	r1, sp, #16
 800a380:	4638      	mov	r0, r7
 800a382:	f7fb fec5 	bl	8006110 <_printf_float>
 800a386:	1c42      	adds	r2, r0, #1
 800a388:	4606      	mov	r6, r0
 800a38a:	d1d6      	bne.n	800a33a <_svfiprintf_r+0x176>
 800a38c:	89ab      	ldrh	r3, [r5, #12]
 800a38e:	065b      	lsls	r3, r3, #25
 800a390:	f53f af2c 	bmi.w	800a1ec <_svfiprintf_r+0x28>
 800a394:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a396:	b01d      	add	sp, #116	; 0x74
 800a398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a39c:	ab03      	add	r3, sp, #12
 800a39e:	9300      	str	r3, [sp, #0]
 800a3a0:	462a      	mov	r2, r5
 800a3a2:	4b06      	ldr	r3, [pc, #24]	; (800a3bc <_svfiprintf_r+0x1f8>)
 800a3a4:	a904      	add	r1, sp, #16
 800a3a6:	4638      	mov	r0, r7
 800a3a8:	f7fc f956 	bl	8006658 <_printf_i>
 800a3ac:	e7eb      	b.n	800a386 <_svfiprintf_r+0x1c2>
 800a3ae:	bf00      	nop
 800a3b0:	0800b304 	.word	0x0800b304
 800a3b4:	0800b30e 	.word	0x0800b30e
 800a3b8:	08006111 	.word	0x08006111
 800a3bc:	0800a10d 	.word	0x0800a10d
 800a3c0:	0800b30a 	.word	0x0800b30a

0800a3c4 <__sfputc_r>:
 800a3c4:	6893      	ldr	r3, [r2, #8]
 800a3c6:	3b01      	subs	r3, #1
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	b410      	push	{r4}
 800a3cc:	6093      	str	r3, [r2, #8]
 800a3ce:	da08      	bge.n	800a3e2 <__sfputc_r+0x1e>
 800a3d0:	6994      	ldr	r4, [r2, #24]
 800a3d2:	42a3      	cmp	r3, r4
 800a3d4:	db01      	blt.n	800a3da <__sfputc_r+0x16>
 800a3d6:	290a      	cmp	r1, #10
 800a3d8:	d103      	bne.n	800a3e2 <__sfputc_r+0x1e>
 800a3da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3de:	f7fd bbf7 	b.w	8007bd0 <__swbuf_r>
 800a3e2:	6813      	ldr	r3, [r2, #0]
 800a3e4:	1c58      	adds	r0, r3, #1
 800a3e6:	6010      	str	r0, [r2, #0]
 800a3e8:	7019      	strb	r1, [r3, #0]
 800a3ea:	4608      	mov	r0, r1
 800a3ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3f0:	4770      	bx	lr

0800a3f2 <__sfputs_r>:
 800a3f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3f4:	4606      	mov	r6, r0
 800a3f6:	460f      	mov	r7, r1
 800a3f8:	4614      	mov	r4, r2
 800a3fa:	18d5      	adds	r5, r2, r3
 800a3fc:	42ac      	cmp	r4, r5
 800a3fe:	d101      	bne.n	800a404 <__sfputs_r+0x12>
 800a400:	2000      	movs	r0, #0
 800a402:	e007      	b.n	800a414 <__sfputs_r+0x22>
 800a404:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a408:	463a      	mov	r2, r7
 800a40a:	4630      	mov	r0, r6
 800a40c:	f7ff ffda 	bl	800a3c4 <__sfputc_r>
 800a410:	1c43      	adds	r3, r0, #1
 800a412:	d1f3      	bne.n	800a3fc <__sfputs_r+0xa>
 800a414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a418 <_vfiprintf_r>:
 800a418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a41c:	460d      	mov	r5, r1
 800a41e:	b09d      	sub	sp, #116	; 0x74
 800a420:	4614      	mov	r4, r2
 800a422:	4698      	mov	r8, r3
 800a424:	4606      	mov	r6, r0
 800a426:	b118      	cbz	r0, 800a430 <_vfiprintf_r+0x18>
 800a428:	6983      	ldr	r3, [r0, #24]
 800a42a:	b90b      	cbnz	r3, 800a430 <_vfiprintf_r+0x18>
 800a42c:	f7fe fc24 	bl	8008c78 <__sinit>
 800a430:	4b89      	ldr	r3, [pc, #548]	; (800a658 <_vfiprintf_r+0x240>)
 800a432:	429d      	cmp	r5, r3
 800a434:	d11b      	bne.n	800a46e <_vfiprintf_r+0x56>
 800a436:	6875      	ldr	r5, [r6, #4]
 800a438:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a43a:	07d9      	lsls	r1, r3, #31
 800a43c:	d405      	bmi.n	800a44a <_vfiprintf_r+0x32>
 800a43e:	89ab      	ldrh	r3, [r5, #12]
 800a440:	059a      	lsls	r2, r3, #22
 800a442:	d402      	bmi.n	800a44a <_vfiprintf_r+0x32>
 800a444:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a446:	f7ff f828 	bl	800949a <__retarget_lock_acquire_recursive>
 800a44a:	89ab      	ldrh	r3, [r5, #12]
 800a44c:	071b      	lsls	r3, r3, #28
 800a44e:	d501      	bpl.n	800a454 <_vfiprintf_r+0x3c>
 800a450:	692b      	ldr	r3, [r5, #16]
 800a452:	b9eb      	cbnz	r3, 800a490 <_vfiprintf_r+0x78>
 800a454:	4629      	mov	r1, r5
 800a456:	4630      	mov	r0, r6
 800a458:	f7fd fc0c 	bl	8007c74 <__swsetup_r>
 800a45c:	b1c0      	cbz	r0, 800a490 <_vfiprintf_r+0x78>
 800a45e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a460:	07dc      	lsls	r4, r3, #31
 800a462:	d50e      	bpl.n	800a482 <_vfiprintf_r+0x6a>
 800a464:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a468:	b01d      	add	sp, #116	; 0x74
 800a46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a46e:	4b7b      	ldr	r3, [pc, #492]	; (800a65c <_vfiprintf_r+0x244>)
 800a470:	429d      	cmp	r5, r3
 800a472:	d101      	bne.n	800a478 <_vfiprintf_r+0x60>
 800a474:	68b5      	ldr	r5, [r6, #8]
 800a476:	e7df      	b.n	800a438 <_vfiprintf_r+0x20>
 800a478:	4b79      	ldr	r3, [pc, #484]	; (800a660 <_vfiprintf_r+0x248>)
 800a47a:	429d      	cmp	r5, r3
 800a47c:	bf08      	it	eq
 800a47e:	68f5      	ldreq	r5, [r6, #12]
 800a480:	e7da      	b.n	800a438 <_vfiprintf_r+0x20>
 800a482:	89ab      	ldrh	r3, [r5, #12]
 800a484:	0598      	lsls	r0, r3, #22
 800a486:	d4ed      	bmi.n	800a464 <_vfiprintf_r+0x4c>
 800a488:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a48a:	f7ff f807 	bl	800949c <__retarget_lock_release_recursive>
 800a48e:	e7e9      	b.n	800a464 <_vfiprintf_r+0x4c>
 800a490:	2300      	movs	r3, #0
 800a492:	9309      	str	r3, [sp, #36]	; 0x24
 800a494:	2320      	movs	r3, #32
 800a496:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a49a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a49e:	2330      	movs	r3, #48	; 0x30
 800a4a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a664 <_vfiprintf_r+0x24c>
 800a4a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4a8:	f04f 0901 	mov.w	r9, #1
 800a4ac:	4623      	mov	r3, r4
 800a4ae:	469a      	mov	sl, r3
 800a4b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4b4:	b10a      	cbz	r2, 800a4ba <_vfiprintf_r+0xa2>
 800a4b6:	2a25      	cmp	r2, #37	; 0x25
 800a4b8:	d1f9      	bne.n	800a4ae <_vfiprintf_r+0x96>
 800a4ba:	ebba 0b04 	subs.w	fp, sl, r4
 800a4be:	d00b      	beq.n	800a4d8 <_vfiprintf_r+0xc0>
 800a4c0:	465b      	mov	r3, fp
 800a4c2:	4622      	mov	r2, r4
 800a4c4:	4629      	mov	r1, r5
 800a4c6:	4630      	mov	r0, r6
 800a4c8:	f7ff ff93 	bl	800a3f2 <__sfputs_r>
 800a4cc:	3001      	adds	r0, #1
 800a4ce:	f000 80aa 	beq.w	800a626 <_vfiprintf_r+0x20e>
 800a4d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4d4:	445a      	add	r2, fp
 800a4d6:	9209      	str	r2, [sp, #36]	; 0x24
 800a4d8:	f89a 3000 	ldrb.w	r3, [sl]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	f000 80a2 	beq.w	800a626 <_vfiprintf_r+0x20e>
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4ec:	f10a 0a01 	add.w	sl, sl, #1
 800a4f0:	9304      	str	r3, [sp, #16]
 800a4f2:	9307      	str	r3, [sp, #28]
 800a4f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4f8:	931a      	str	r3, [sp, #104]	; 0x68
 800a4fa:	4654      	mov	r4, sl
 800a4fc:	2205      	movs	r2, #5
 800a4fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a502:	4858      	ldr	r0, [pc, #352]	; (800a664 <_vfiprintf_r+0x24c>)
 800a504:	f7f5 fe7c 	bl	8000200 <memchr>
 800a508:	9a04      	ldr	r2, [sp, #16]
 800a50a:	b9d8      	cbnz	r0, 800a544 <_vfiprintf_r+0x12c>
 800a50c:	06d1      	lsls	r1, r2, #27
 800a50e:	bf44      	itt	mi
 800a510:	2320      	movmi	r3, #32
 800a512:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a516:	0713      	lsls	r3, r2, #28
 800a518:	bf44      	itt	mi
 800a51a:	232b      	movmi	r3, #43	; 0x2b
 800a51c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a520:	f89a 3000 	ldrb.w	r3, [sl]
 800a524:	2b2a      	cmp	r3, #42	; 0x2a
 800a526:	d015      	beq.n	800a554 <_vfiprintf_r+0x13c>
 800a528:	9a07      	ldr	r2, [sp, #28]
 800a52a:	4654      	mov	r4, sl
 800a52c:	2000      	movs	r0, #0
 800a52e:	f04f 0c0a 	mov.w	ip, #10
 800a532:	4621      	mov	r1, r4
 800a534:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a538:	3b30      	subs	r3, #48	; 0x30
 800a53a:	2b09      	cmp	r3, #9
 800a53c:	d94e      	bls.n	800a5dc <_vfiprintf_r+0x1c4>
 800a53e:	b1b0      	cbz	r0, 800a56e <_vfiprintf_r+0x156>
 800a540:	9207      	str	r2, [sp, #28]
 800a542:	e014      	b.n	800a56e <_vfiprintf_r+0x156>
 800a544:	eba0 0308 	sub.w	r3, r0, r8
 800a548:	fa09 f303 	lsl.w	r3, r9, r3
 800a54c:	4313      	orrs	r3, r2
 800a54e:	9304      	str	r3, [sp, #16]
 800a550:	46a2      	mov	sl, r4
 800a552:	e7d2      	b.n	800a4fa <_vfiprintf_r+0xe2>
 800a554:	9b03      	ldr	r3, [sp, #12]
 800a556:	1d19      	adds	r1, r3, #4
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	9103      	str	r1, [sp, #12]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	bfbb      	ittet	lt
 800a560:	425b      	neglt	r3, r3
 800a562:	f042 0202 	orrlt.w	r2, r2, #2
 800a566:	9307      	strge	r3, [sp, #28]
 800a568:	9307      	strlt	r3, [sp, #28]
 800a56a:	bfb8      	it	lt
 800a56c:	9204      	strlt	r2, [sp, #16]
 800a56e:	7823      	ldrb	r3, [r4, #0]
 800a570:	2b2e      	cmp	r3, #46	; 0x2e
 800a572:	d10c      	bne.n	800a58e <_vfiprintf_r+0x176>
 800a574:	7863      	ldrb	r3, [r4, #1]
 800a576:	2b2a      	cmp	r3, #42	; 0x2a
 800a578:	d135      	bne.n	800a5e6 <_vfiprintf_r+0x1ce>
 800a57a:	9b03      	ldr	r3, [sp, #12]
 800a57c:	1d1a      	adds	r2, r3, #4
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	9203      	str	r2, [sp, #12]
 800a582:	2b00      	cmp	r3, #0
 800a584:	bfb8      	it	lt
 800a586:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a58a:	3402      	adds	r4, #2
 800a58c:	9305      	str	r3, [sp, #20]
 800a58e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a674 <_vfiprintf_r+0x25c>
 800a592:	7821      	ldrb	r1, [r4, #0]
 800a594:	2203      	movs	r2, #3
 800a596:	4650      	mov	r0, sl
 800a598:	f7f5 fe32 	bl	8000200 <memchr>
 800a59c:	b140      	cbz	r0, 800a5b0 <_vfiprintf_r+0x198>
 800a59e:	2340      	movs	r3, #64	; 0x40
 800a5a0:	eba0 000a 	sub.w	r0, r0, sl
 800a5a4:	fa03 f000 	lsl.w	r0, r3, r0
 800a5a8:	9b04      	ldr	r3, [sp, #16]
 800a5aa:	4303      	orrs	r3, r0
 800a5ac:	3401      	adds	r4, #1
 800a5ae:	9304      	str	r3, [sp, #16]
 800a5b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5b4:	482c      	ldr	r0, [pc, #176]	; (800a668 <_vfiprintf_r+0x250>)
 800a5b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5ba:	2206      	movs	r2, #6
 800a5bc:	f7f5 fe20 	bl	8000200 <memchr>
 800a5c0:	2800      	cmp	r0, #0
 800a5c2:	d03f      	beq.n	800a644 <_vfiprintf_r+0x22c>
 800a5c4:	4b29      	ldr	r3, [pc, #164]	; (800a66c <_vfiprintf_r+0x254>)
 800a5c6:	bb1b      	cbnz	r3, 800a610 <_vfiprintf_r+0x1f8>
 800a5c8:	9b03      	ldr	r3, [sp, #12]
 800a5ca:	3307      	adds	r3, #7
 800a5cc:	f023 0307 	bic.w	r3, r3, #7
 800a5d0:	3308      	adds	r3, #8
 800a5d2:	9303      	str	r3, [sp, #12]
 800a5d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5d6:	443b      	add	r3, r7
 800a5d8:	9309      	str	r3, [sp, #36]	; 0x24
 800a5da:	e767      	b.n	800a4ac <_vfiprintf_r+0x94>
 800a5dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5e0:	460c      	mov	r4, r1
 800a5e2:	2001      	movs	r0, #1
 800a5e4:	e7a5      	b.n	800a532 <_vfiprintf_r+0x11a>
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	3401      	adds	r4, #1
 800a5ea:	9305      	str	r3, [sp, #20]
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	f04f 0c0a 	mov.w	ip, #10
 800a5f2:	4620      	mov	r0, r4
 800a5f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5f8:	3a30      	subs	r2, #48	; 0x30
 800a5fa:	2a09      	cmp	r2, #9
 800a5fc:	d903      	bls.n	800a606 <_vfiprintf_r+0x1ee>
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d0c5      	beq.n	800a58e <_vfiprintf_r+0x176>
 800a602:	9105      	str	r1, [sp, #20]
 800a604:	e7c3      	b.n	800a58e <_vfiprintf_r+0x176>
 800a606:	fb0c 2101 	mla	r1, ip, r1, r2
 800a60a:	4604      	mov	r4, r0
 800a60c:	2301      	movs	r3, #1
 800a60e:	e7f0      	b.n	800a5f2 <_vfiprintf_r+0x1da>
 800a610:	ab03      	add	r3, sp, #12
 800a612:	9300      	str	r3, [sp, #0]
 800a614:	462a      	mov	r2, r5
 800a616:	4b16      	ldr	r3, [pc, #88]	; (800a670 <_vfiprintf_r+0x258>)
 800a618:	a904      	add	r1, sp, #16
 800a61a:	4630      	mov	r0, r6
 800a61c:	f7fb fd78 	bl	8006110 <_printf_float>
 800a620:	4607      	mov	r7, r0
 800a622:	1c78      	adds	r0, r7, #1
 800a624:	d1d6      	bne.n	800a5d4 <_vfiprintf_r+0x1bc>
 800a626:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a628:	07d9      	lsls	r1, r3, #31
 800a62a:	d405      	bmi.n	800a638 <_vfiprintf_r+0x220>
 800a62c:	89ab      	ldrh	r3, [r5, #12]
 800a62e:	059a      	lsls	r2, r3, #22
 800a630:	d402      	bmi.n	800a638 <_vfiprintf_r+0x220>
 800a632:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a634:	f7fe ff32 	bl	800949c <__retarget_lock_release_recursive>
 800a638:	89ab      	ldrh	r3, [r5, #12]
 800a63a:	065b      	lsls	r3, r3, #25
 800a63c:	f53f af12 	bmi.w	800a464 <_vfiprintf_r+0x4c>
 800a640:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a642:	e711      	b.n	800a468 <_vfiprintf_r+0x50>
 800a644:	ab03      	add	r3, sp, #12
 800a646:	9300      	str	r3, [sp, #0]
 800a648:	462a      	mov	r2, r5
 800a64a:	4b09      	ldr	r3, [pc, #36]	; (800a670 <_vfiprintf_r+0x258>)
 800a64c:	a904      	add	r1, sp, #16
 800a64e:	4630      	mov	r0, r6
 800a650:	f7fc f802 	bl	8006658 <_printf_i>
 800a654:	e7e4      	b.n	800a620 <_vfiprintf_r+0x208>
 800a656:	bf00      	nop
 800a658:	0800b0ec 	.word	0x0800b0ec
 800a65c:	0800b10c 	.word	0x0800b10c
 800a660:	0800b0cc 	.word	0x0800b0cc
 800a664:	0800b304 	.word	0x0800b304
 800a668:	0800b30e 	.word	0x0800b30e
 800a66c:	08006111 	.word	0x08006111
 800a670:	0800a3f3 	.word	0x0800a3f3
 800a674:	0800b30a 	.word	0x0800b30a

0800a678 <nan>:
 800a678:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a680 <nan+0x8>
 800a67c:	4770      	bx	lr
 800a67e:	bf00      	nop
 800a680:	00000000 	.word	0x00000000
 800a684:	7ff80000 	.word	0x7ff80000

0800a688 <_sbrk_r>:
 800a688:	b538      	push	{r3, r4, r5, lr}
 800a68a:	4d06      	ldr	r5, [pc, #24]	; (800a6a4 <_sbrk_r+0x1c>)
 800a68c:	2300      	movs	r3, #0
 800a68e:	4604      	mov	r4, r0
 800a690:	4608      	mov	r0, r1
 800a692:	602b      	str	r3, [r5, #0]
 800a694:	f7f8 f9d0 	bl	8002a38 <_sbrk>
 800a698:	1c43      	adds	r3, r0, #1
 800a69a:	d102      	bne.n	800a6a2 <_sbrk_r+0x1a>
 800a69c:	682b      	ldr	r3, [r5, #0]
 800a69e:	b103      	cbz	r3, 800a6a2 <_sbrk_r+0x1a>
 800a6a0:	6023      	str	r3, [r4, #0]
 800a6a2:	bd38      	pop	{r3, r4, r5, pc}
 800a6a4:	20001f9c 	.word	0x20001f9c

0800a6a8 <__sread>:
 800a6a8:	b510      	push	{r4, lr}
 800a6aa:	460c      	mov	r4, r1
 800a6ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6b0:	f000 f93a 	bl	800a928 <_read_r>
 800a6b4:	2800      	cmp	r0, #0
 800a6b6:	bfab      	itete	ge
 800a6b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a6ba:	89a3      	ldrhlt	r3, [r4, #12]
 800a6bc:	181b      	addge	r3, r3, r0
 800a6be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a6c2:	bfac      	ite	ge
 800a6c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a6c6:	81a3      	strhlt	r3, [r4, #12]
 800a6c8:	bd10      	pop	{r4, pc}

0800a6ca <__swrite>:
 800a6ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6ce:	461f      	mov	r7, r3
 800a6d0:	898b      	ldrh	r3, [r1, #12]
 800a6d2:	05db      	lsls	r3, r3, #23
 800a6d4:	4605      	mov	r5, r0
 800a6d6:	460c      	mov	r4, r1
 800a6d8:	4616      	mov	r6, r2
 800a6da:	d505      	bpl.n	800a6e8 <__swrite+0x1e>
 800a6dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6e0:	2302      	movs	r3, #2
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f000 f8b8 	bl	800a858 <_lseek_r>
 800a6e8:	89a3      	ldrh	r3, [r4, #12]
 800a6ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a6f2:	81a3      	strh	r3, [r4, #12]
 800a6f4:	4632      	mov	r2, r6
 800a6f6:	463b      	mov	r3, r7
 800a6f8:	4628      	mov	r0, r5
 800a6fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6fe:	f000 b837 	b.w	800a770 <_write_r>

0800a702 <__sseek>:
 800a702:	b510      	push	{r4, lr}
 800a704:	460c      	mov	r4, r1
 800a706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a70a:	f000 f8a5 	bl	800a858 <_lseek_r>
 800a70e:	1c43      	adds	r3, r0, #1
 800a710:	89a3      	ldrh	r3, [r4, #12]
 800a712:	bf15      	itete	ne
 800a714:	6560      	strne	r0, [r4, #84]	; 0x54
 800a716:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a71a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a71e:	81a3      	strheq	r3, [r4, #12]
 800a720:	bf18      	it	ne
 800a722:	81a3      	strhne	r3, [r4, #12]
 800a724:	bd10      	pop	{r4, pc}

0800a726 <__sclose>:
 800a726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a72a:	f000 b851 	b.w	800a7d0 <_close_r>

0800a72e <strncmp>:
 800a72e:	b510      	push	{r4, lr}
 800a730:	b17a      	cbz	r2, 800a752 <strncmp+0x24>
 800a732:	4603      	mov	r3, r0
 800a734:	3901      	subs	r1, #1
 800a736:	1884      	adds	r4, r0, r2
 800a738:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a73c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a740:	4290      	cmp	r0, r2
 800a742:	d101      	bne.n	800a748 <strncmp+0x1a>
 800a744:	42a3      	cmp	r3, r4
 800a746:	d101      	bne.n	800a74c <strncmp+0x1e>
 800a748:	1a80      	subs	r0, r0, r2
 800a74a:	bd10      	pop	{r4, pc}
 800a74c:	2800      	cmp	r0, #0
 800a74e:	d1f3      	bne.n	800a738 <strncmp+0xa>
 800a750:	e7fa      	b.n	800a748 <strncmp+0x1a>
 800a752:	4610      	mov	r0, r2
 800a754:	e7f9      	b.n	800a74a <strncmp+0x1c>

0800a756 <__ascii_wctomb>:
 800a756:	b149      	cbz	r1, 800a76c <__ascii_wctomb+0x16>
 800a758:	2aff      	cmp	r2, #255	; 0xff
 800a75a:	bf85      	ittet	hi
 800a75c:	238a      	movhi	r3, #138	; 0x8a
 800a75e:	6003      	strhi	r3, [r0, #0]
 800a760:	700a      	strbls	r2, [r1, #0]
 800a762:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a766:	bf98      	it	ls
 800a768:	2001      	movls	r0, #1
 800a76a:	4770      	bx	lr
 800a76c:	4608      	mov	r0, r1
 800a76e:	4770      	bx	lr

0800a770 <_write_r>:
 800a770:	b538      	push	{r3, r4, r5, lr}
 800a772:	4d07      	ldr	r5, [pc, #28]	; (800a790 <_write_r+0x20>)
 800a774:	4604      	mov	r4, r0
 800a776:	4608      	mov	r0, r1
 800a778:	4611      	mov	r1, r2
 800a77a:	2200      	movs	r2, #0
 800a77c:	602a      	str	r2, [r5, #0]
 800a77e:	461a      	mov	r2, r3
 800a780:	f7f8 f909 	bl	8002996 <_write>
 800a784:	1c43      	adds	r3, r0, #1
 800a786:	d102      	bne.n	800a78e <_write_r+0x1e>
 800a788:	682b      	ldr	r3, [r5, #0]
 800a78a:	b103      	cbz	r3, 800a78e <_write_r+0x1e>
 800a78c:	6023      	str	r3, [r4, #0]
 800a78e:	bd38      	pop	{r3, r4, r5, pc}
 800a790:	20001f9c 	.word	0x20001f9c

0800a794 <__assert_func>:
 800a794:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a796:	4614      	mov	r4, r2
 800a798:	461a      	mov	r2, r3
 800a79a:	4b09      	ldr	r3, [pc, #36]	; (800a7c0 <__assert_func+0x2c>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4605      	mov	r5, r0
 800a7a0:	68d8      	ldr	r0, [r3, #12]
 800a7a2:	b14c      	cbz	r4, 800a7b8 <__assert_func+0x24>
 800a7a4:	4b07      	ldr	r3, [pc, #28]	; (800a7c4 <__assert_func+0x30>)
 800a7a6:	9100      	str	r1, [sp, #0]
 800a7a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a7ac:	4906      	ldr	r1, [pc, #24]	; (800a7c8 <__assert_func+0x34>)
 800a7ae:	462b      	mov	r3, r5
 800a7b0:	f000 f81e 	bl	800a7f0 <fiprintf>
 800a7b4:	f000 f8ca 	bl	800a94c <abort>
 800a7b8:	4b04      	ldr	r3, [pc, #16]	; (800a7cc <__assert_func+0x38>)
 800a7ba:	461c      	mov	r4, r3
 800a7bc:	e7f3      	b.n	800a7a6 <__assert_func+0x12>
 800a7be:	bf00      	nop
 800a7c0:	2000003c 	.word	0x2000003c
 800a7c4:	0800b315 	.word	0x0800b315
 800a7c8:	0800b322 	.word	0x0800b322
 800a7cc:	0800b350 	.word	0x0800b350

0800a7d0 <_close_r>:
 800a7d0:	b538      	push	{r3, r4, r5, lr}
 800a7d2:	4d06      	ldr	r5, [pc, #24]	; (800a7ec <_close_r+0x1c>)
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	4604      	mov	r4, r0
 800a7d8:	4608      	mov	r0, r1
 800a7da:	602b      	str	r3, [r5, #0]
 800a7dc:	f7f8 f8f7 	bl	80029ce <_close>
 800a7e0:	1c43      	adds	r3, r0, #1
 800a7e2:	d102      	bne.n	800a7ea <_close_r+0x1a>
 800a7e4:	682b      	ldr	r3, [r5, #0]
 800a7e6:	b103      	cbz	r3, 800a7ea <_close_r+0x1a>
 800a7e8:	6023      	str	r3, [r4, #0]
 800a7ea:	bd38      	pop	{r3, r4, r5, pc}
 800a7ec:	20001f9c 	.word	0x20001f9c

0800a7f0 <fiprintf>:
 800a7f0:	b40e      	push	{r1, r2, r3}
 800a7f2:	b503      	push	{r0, r1, lr}
 800a7f4:	4601      	mov	r1, r0
 800a7f6:	ab03      	add	r3, sp, #12
 800a7f8:	4805      	ldr	r0, [pc, #20]	; (800a810 <fiprintf+0x20>)
 800a7fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7fe:	6800      	ldr	r0, [r0, #0]
 800a800:	9301      	str	r3, [sp, #4]
 800a802:	f7ff fe09 	bl	800a418 <_vfiprintf_r>
 800a806:	b002      	add	sp, #8
 800a808:	f85d eb04 	ldr.w	lr, [sp], #4
 800a80c:	b003      	add	sp, #12
 800a80e:	4770      	bx	lr
 800a810:	2000003c 	.word	0x2000003c

0800a814 <_fstat_r>:
 800a814:	b538      	push	{r3, r4, r5, lr}
 800a816:	4d07      	ldr	r5, [pc, #28]	; (800a834 <_fstat_r+0x20>)
 800a818:	2300      	movs	r3, #0
 800a81a:	4604      	mov	r4, r0
 800a81c:	4608      	mov	r0, r1
 800a81e:	4611      	mov	r1, r2
 800a820:	602b      	str	r3, [r5, #0]
 800a822:	f7f8 f8e0 	bl	80029e6 <_fstat>
 800a826:	1c43      	adds	r3, r0, #1
 800a828:	d102      	bne.n	800a830 <_fstat_r+0x1c>
 800a82a:	682b      	ldr	r3, [r5, #0]
 800a82c:	b103      	cbz	r3, 800a830 <_fstat_r+0x1c>
 800a82e:	6023      	str	r3, [r4, #0]
 800a830:	bd38      	pop	{r3, r4, r5, pc}
 800a832:	bf00      	nop
 800a834:	20001f9c 	.word	0x20001f9c

0800a838 <_isatty_r>:
 800a838:	b538      	push	{r3, r4, r5, lr}
 800a83a:	4d06      	ldr	r5, [pc, #24]	; (800a854 <_isatty_r+0x1c>)
 800a83c:	2300      	movs	r3, #0
 800a83e:	4604      	mov	r4, r0
 800a840:	4608      	mov	r0, r1
 800a842:	602b      	str	r3, [r5, #0]
 800a844:	f7f8 f8df 	bl	8002a06 <_isatty>
 800a848:	1c43      	adds	r3, r0, #1
 800a84a:	d102      	bne.n	800a852 <_isatty_r+0x1a>
 800a84c:	682b      	ldr	r3, [r5, #0]
 800a84e:	b103      	cbz	r3, 800a852 <_isatty_r+0x1a>
 800a850:	6023      	str	r3, [r4, #0]
 800a852:	bd38      	pop	{r3, r4, r5, pc}
 800a854:	20001f9c 	.word	0x20001f9c

0800a858 <_lseek_r>:
 800a858:	b538      	push	{r3, r4, r5, lr}
 800a85a:	4d07      	ldr	r5, [pc, #28]	; (800a878 <_lseek_r+0x20>)
 800a85c:	4604      	mov	r4, r0
 800a85e:	4608      	mov	r0, r1
 800a860:	4611      	mov	r1, r2
 800a862:	2200      	movs	r2, #0
 800a864:	602a      	str	r2, [r5, #0]
 800a866:	461a      	mov	r2, r3
 800a868:	f7f8 f8d8 	bl	8002a1c <_lseek>
 800a86c:	1c43      	adds	r3, r0, #1
 800a86e:	d102      	bne.n	800a876 <_lseek_r+0x1e>
 800a870:	682b      	ldr	r3, [r5, #0]
 800a872:	b103      	cbz	r3, 800a876 <_lseek_r+0x1e>
 800a874:	6023      	str	r3, [r4, #0]
 800a876:	bd38      	pop	{r3, r4, r5, pc}
 800a878:	20001f9c 	.word	0x20001f9c

0800a87c <memmove>:
 800a87c:	4288      	cmp	r0, r1
 800a87e:	b510      	push	{r4, lr}
 800a880:	eb01 0402 	add.w	r4, r1, r2
 800a884:	d902      	bls.n	800a88c <memmove+0x10>
 800a886:	4284      	cmp	r4, r0
 800a888:	4623      	mov	r3, r4
 800a88a:	d807      	bhi.n	800a89c <memmove+0x20>
 800a88c:	1e43      	subs	r3, r0, #1
 800a88e:	42a1      	cmp	r1, r4
 800a890:	d008      	beq.n	800a8a4 <memmove+0x28>
 800a892:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a896:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a89a:	e7f8      	b.n	800a88e <memmove+0x12>
 800a89c:	4402      	add	r2, r0
 800a89e:	4601      	mov	r1, r0
 800a8a0:	428a      	cmp	r2, r1
 800a8a2:	d100      	bne.n	800a8a6 <memmove+0x2a>
 800a8a4:	bd10      	pop	{r4, pc}
 800a8a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a8aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a8ae:	e7f7      	b.n	800a8a0 <memmove+0x24>

0800a8b0 <__malloc_lock>:
 800a8b0:	4801      	ldr	r0, [pc, #4]	; (800a8b8 <__malloc_lock+0x8>)
 800a8b2:	f7fe bdf2 	b.w	800949a <__retarget_lock_acquire_recursive>
 800a8b6:	bf00      	nop
 800a8b8:	20001f90 	.word	0x20001f90

0800a8bc <__malloc_unlock>:
 800a8bc:	4801      	ldr	r0, [pc, #4]	; (800a8c4 <__malloc_unlock+0x8>)
 800a8be:	f7fe bded 	b.w	800949c <__retarget_lock_release_recursive>
 800a8c2:	bf00      	nop
 800a8c4:	20001f90 	.word	0x20001f90

0800a8c8 <_realloc_r>:
 800a8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8cc:	4680      	mov	r8, r0
 800a8ce:	4614      	mov	r4, r2
 800a8d0:	460e      	mov	r6, r1
 800a8d2:	b921      	cbnz	r1, 800a8de <_realloc_r+0x16>
 800a8d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8d8:	4611      	mov	r1, r2
 800a8da:	f7ff bba3 	b.w	800a024 <_malloc_r>
 800a8de:	b92a      	cbnz	r2, 800a8ec <_realloc_r+0x24>
 800a8e0:	f7ff fb34 	bl	8009f4c <_free_r>
 800a8e4:	4625      	mov	r5, r4
 800a8e6:	4628      	mov	r0, r5
 800a8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8ec:	f000 f835 	bl	800a95a <_malloc_usable_size_r>
 800a8f0:	4284      	cmp	r4, r0
 800a8f2:	4607      	mov	r7, r0
 800a8f4:	d802      	bhi.n	800a8fc <_realloc_r+0x34>
 800a8f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a8fa:	d812      	bhi.n	800a922 <_realloc_r+0x5a>
 800a8fc:	4621      	mov	r1, r4
 800a8fe:	4640      	mov	r0, r8
 800a900:	f7ff fb90 	bl	800a024 <_malloc_r>
 800a904:	4605      	mov	r5, r0
 800a906:	2800      	cmp	r0, #0
 800a908:	d0ed      	beq.n	800a8e6 <_realloc_r+0x1e>
 800a90a:	42bc      	cmp	r4, r7
 800a90c:	4622      	mov	r2, r4
 800a90e:	4631      	mov	r1, r6
 800a910:	bf28      	it	cs
 800a912:	463a      	movcs	r2, r7
 800a914:	f7fb fb46 	bl	8005fa4 <memcpy>
 800a918:	4631      	mov	r1, r6
 800a91a:	4640      	mov	r0, r8
 800a91c:	f7ff fb16 	bl	8009f4c <_free_r>
 800a920:	e7e1      	b.n	800a8e6 <_realloc_r+0x1e>
 800a922:	4635      	mov	r5, r6
 800a924:	e7df      	b.n	800a8e6 <_realloc_r+0x1e>
	...

0800a928 <_read_r>:
 800a928:	b538      	push	{r3, r4, r5, lr}
 800a92a:	4d07      	ldr	r5, [pc, #28]	; (800a948 <_read_r+0x20>)
 800a92c:	4604      	mov	r4, r0
 800a92e:	4608      	mov	r0, r1
 800a930:	4611      	mov	r1, r2
 800a932:	2200      	movs	r2, #0
 800a934:	602a      	str	r2, [r5, #0]
 800a936:	461a      	mov	r2, r3
 800a938:	f7f8 f810 	bl	800295c <_read>
 800a93c:	1c43      	adds	r3, r0, #1
 800a93e:	d102      	bne.n	800a946 <_read_r+0x1e>
 800a940:	682b      	ldr	r3, [r5, #0]
 800a942:	b103      	cbz	r3, 800a946 <_read_r+0x1e>
 800a944:	6023      	str	r3, [r4, #0]
 800a946:	bd38      	pop	{r3, r4, r5, pc}
 800a948:	20001f9c 	.word	0x20001f9c

0800a94c <abort>:
 800a94c:	b508      	push	{r3, lr}
 800a94e:	2006      	movs	r0, #6
 800a950:	f000 f834 	bl	800a9bc <raise>
 800a954:	2001      	movs	r0, #1
 800a956:	f7f7 fff7 	bl	8002948 <_exit>

0800a95a <_malloc_usable_size_r>:
 800a95a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a95e:	1f18      	subs	r0, r3, #4
 800a960:	2b00      	cmp	r3, #0
 800a962:	bfbc      	itt	lt
 800a964:	580b      	ldrlt	r3, [r1, r0]
 800a966:	18c0      	addlt	r0, r0, r3
 800a968:	4770      	bx	lr

0800a96a <_raise_r>:
 800a96a:	291f      	cmp	r1, #31
 800a96c:	b538      	push	{r3, r4, r5, lr}
 800a96e:	4604      	mov	r4, r0
 800a970:	460d      	mov	r5, r1
 800a972:	d904      	bls.n	800a97e <_raise_r+0x14>
 800a974:	2316      	movs	r3, #22
 800a976:	6003      	str	r3, [r0, #0]
 800a978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a97c:	bd38      	pop	{r3, r4, r5, pc}
 800a97e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a980:	b112      	cbz	r2, 800a988 <_raise_r+0x1e>
 800a982:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a986:	b94b      	cbnz	r3, 800a99c <_raise_r+0x32>
 800a988:	4620      	mov	r0, r4
 800a98a:	f000 f831 	bl	800a9f0 <_getpid_r>
 800a98e:	462a      	mov	r2, r5
 800a990:	4601      	mov	r1, r0
 800a992:	4620      	mov	r0, r4
 800a994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a998:	f000 b818 	b.w	800a9cc <_kill_r>
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d00a      	beq.n	800a9b6 <_raise_r+0x4c>
 800a9a0:	1c59      	adds	r1, r3, #1
 800a9a2:	d103      	bne.n	800a9ac <_raise_r+0x42>
 800a9a4:	2316      	movs	r3, #22
 800a9a6:	6003      	str	r3, [r0, #0]
 800a9a8:	2001      	movs	r0, #1
 800a9aa:	e7e7      	b.n	800a97c <_raise_r+0x12>
 800a9ac:	2400      	movs	r4, #0
 800a9ae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a9b2:	4628      	mov	r0, r5
 800a9b4:	4798      	blx	r3
 800a9b6:	2000      	movs	r0, #0
 800a9b8:	e7e0      	b.n	800a97c <_raise_r+0x12>
	...

0800a9bc <raise>:
 800a9bc:	4b02      	ldr	r3, [pc, #8]	; (800a9c8 <raise+0xc>)
 800a9be:	4601      	mov	r1, r0
 800a9c0:	6818      	ldr	r0, [r3, #0]
 800a9c2:	f7ff bfd2 	b.w	800a96a <_raise_r>
 800a9c6:	bf00      	nop
 800a9c8:	2000003c 	.word	0x2000003c

0800a9cc <_kill_r>:
 800a9cc:	b538      	push	{r3, r4, r5, lr}
 800a9ce:	4d07      	ldr	r5, [pc, #28]	; (800a9ec <_kill_r+0x20>)
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	4608      	mov	r0, r1
 800a9d6:	4611      	mov	r1, r2
 800a9d8:	602b      	str	r3, [r5, #0]
 800a9da:	f7f7 ffa5 	bl	8002928 <_kill>
 800a9de:	1c43      	adds	r3, r0, #1
 800a9e0:	d102      	bne.n	800a9e8 <_kill_r+0x1c>
 800a9e2:	682b      	ldr	r3, [r5, #0]
 800a9e4:	b103      	cbz	r3, 800a9e8 <_kill_r+0x1c>
 800a9e6:	6023      	str	r3, [r4, #0]
 800a9e8:	bd38      	pop	{r3, r4, r5, pc}
 800a9ea:	bf00      	nop
 800a9ec:	20001f9c 	.word	0x20001f9c

0800a9f0 <_getpid_r>:
 800a9f0:	f7f7 bf92 	b.w	8002918 <_getpid>

0800a9f4 <_init>:
 800a9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9f6:	bf00      	nop
 800a9f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9fa:	bc08      	pop	{r3}
 800a9fc:	469e      	mov	lr, r3
 800a9fe:	4770      	bx	lr

0800aa00 <_fini>:
 800aa00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa02:	bf00      	nop
 800aa04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa06:	bc08      	pop	{r3}
 800aa08:	469e      	mov	lr, r3
 800aa0a:	4770      	bx	lr
