
Tesis_SPS30.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011594  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002344  08011748  08011748  00021748  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013a8c  08013a8c  0003034c  2**0
                  CONTENTS
  4 .ARM          00000008  08013a8c  08013a8c  00023a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013a94  08013a94  0003034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013a94  08013a94  00023a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013a98  08013a98  00023a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  08013a9c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003034c  2**0
                  CONTENTS
 10 .bss          00002498  2000034c  2000034c  0003034c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200027e4  200027e4  0003034c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003034c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f39a  00000000  00000000  0003037c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052dd  00000000  00000000  0004f716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001670  00000000  00000000  000549f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013f8  00000000  00000000  00056068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bb12  00000000  00000000  00057460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000279b3  00000000  00000000  00082f72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2f31  00000000  00000000  000aa925  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018d856  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006ef0  00000000  00000000  0018d8a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000034c 	.word	0x2000034c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801172c 	.word	0x0801172c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000350 	.word	0x20000350
 80001ec:	0801172c 	.word	0x0801172c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <DHT22_Init>:
 * @param[in] GPIOx Puerto GPIO al que está conectado el DHT22.
 * @param[in] GPIO_Pin Pin GPIO al que está conectado el DHT22.
 *
 * @retval None
 */
void DHT22_Init(DHT22_HandleTypeDef * dht, GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	4613      	mov	r3, r2
 8001024:	80fb      	strh	r3, [r7, #6]
    DHT22_InitHardware(dht, GPIOx, GPIO_Pin);
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	461a      	mov	r2, r3
 800102a:	68b9      	ldr	r1, [r7, #8]
 800102c:	68f8      	ldr	r0, [r7, #12]
 800102e:	f000 f8f9 	bl	8001224 <DHT22_InitHardware>
    DWT_Init();
 8001032:	f000 fa97 	bl	8001564 <DWT_Init>
}
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <DHT22_Read>:
 * puerto y pin GPIO.
 * @param[out] data Puntero a la estructura DHT22_Data donde se almacenarán los datos leídos.
 *
 * @retval int Estado de la operación: DHT22_OK si es exitoso, código de error si falla.
 */
int DHT22_Read(DHT22_HandleTypeDef * dht, DHT22_Data * data) {
 8001040:	b590      	push	{r4, r7, lr}
 8001042:	b087      	sub	sp, #28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
    uint8_t bits[NUM_BITS] = {INIT_BITS}; // Array para almacenar los bits leídos
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	2300      	movs	r3, #0
 8001050:	743b      	strb	r3, [r7, #16]
    uint8_t checksum = INIT_CHECKSUM;     // Inicializar el checksum
 8001052:	2300      	movs	r3, #0
 8001054:	74bb      	strb	r3, [r7, #18]

    // Enviar señal de inicio
    DHT22_StartSignal(dht);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f000 f9fe 	bl	8001458 <DHT22_StartSignal>

    // Esperar respuesta del sensor: DHT22 debe poner el pin en bajo por 80 µs y luego en alto por
    // 80 µs
    uint32_t timeout = INIT_TIMEOUT;
 800105c:	2364      	movs	r3, #100	; 0x64
 800105e:	617b      	str	r3, [r7, #20]
    while (HAL_GPIO_ReadPin(dht->GPIOx, dht->GPIO_Pin) == GPIO_PIN_SET) {
 8001060:	e007      	b.n	8001072 <DHT22_Read+0x32>
        if (--timeout == FIN_TIMEOUT) {
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3b01      	subs	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <DHT22_Read+0x32>
            return DHT22_ERROR_PIN_HIGH; // Error si el pin permanece en alto
 800106e:	4b40      	ldr	r3, [pc, #256]	; (8001170 <DHT22_Read+0x130>)
 8001070:	e075      	b.n	800115e <DHT22_Read+0x11e>
    while (HAL_GPIO_ReadPin(dht->GPIOx, dht->GPIO_Pin) == GPIO_PIN_SET) {
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	889b      	ldrh	r3, [r3, #4]
 800107a:	4619      	mov	r1, r3
 800107c:	4610      	mov	r0, r2
 800107e:	f005 f839 	bl	80060f4 <HAL_GPIO_ReadPin>
 8001082:	4603      	mov	r3, r0
 8001084:	2b01      	cmp	r3, #1
 8001086:	d0ec      	beq.n	8001062 <DHT22_Read+0x22>
        }
    }
    DWT_Delay(DELAY_T_REL); // Esperar 80 µs
 8001088:	2050      	movs	r0, #80	; 0x50
 800108a:	f000 fa85 	bl	8001598 <DWT_Delay>

    timeout = INIT_TIMEOUT;
 800108e:	2364      	movs	r3, #100	; 0x64
 8001090:	617b      	str	r3, [r7, #20]
    while (HAL_GPIO_ReadPin(dht->GPIOx, dht->GPIO_Pin) == GPIO_PIN_RESET) {
 8001092:	e007      	b.n	80010a4 <DHT22_Read+0x64>
        if (--timeout == FIN_TIMEOUT) {
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	3b01      	subs	r3, #1
 8001098:	617b      	str	r3, [r7, #20]
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d101      	bne.n	80010a4 <DHT22_Read+0x64>
            return DHT22_ERROR_PIN_LOW; // Error si el pin permanece en bajo
 80010a0:	4b34      	ldr	r3, [pc, #208]	; (8001174 <DHT22_Read+0x134>)
 80010a2:	e05c      	b.n	800115e <DHT22_Read+0x11e>
    while (HAL_GPIO_ReadPin(dht->GPIOx, dht->GPIO_Pin) == GPIO_PIN_RESET) {
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	889b      	ldrh	r3, [r3, #4]
 80010ac:	4619      	mov	r1, r3
 80010ae:	4610      	mov	r0, r2
 80010b0:	f005 f820 	bl	80060f4 <HAL_GPIO_ReadPin>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d0ec      	beq.n	8001094 <DHT22_Read+0x54>
        }
    }
    DWT_Delay(DELAY_T_REH); // Esperar 80 µs
 80010ba:	2050      	movs	r0, #80	; 0x50
 80010bc:	f000 fa6c 	bl	8001598 <DWT_Delay>

    // Leer los 40 bits de datos (5 bytes)
    for (uint8_t i = 0; i < DHT22_DATA_BYTES; i++) {
 80010c0:	2300      	movs	r3, #0
 80010c2:	74fb      	strb	r3, [r7, #19]
 80010c4:	e00d      	b.n	80010e2 <DHT22_Read+0xa2>
        bits[i] = DHT22_ReadByte(dht);
 80010c6:	7cfc      	ldrb	r4, [r7, #19]
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 f9ea 	bl	80014a2 <DHT22_ReadByte>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	f104 0318 	add.w	r3, r4, #24
 80010d6:	443b      	add	r3, r7
 80010d8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < DHT22_DATA_BYTES; i++) {
 80010dc:	7cfb      	ldrb	r3, [r7, #19]
 80010de:	3301      	adds	r3, #1
 80010e0:	74fb      	strb	r3, [r7, #19]
 80010e2:	7cfb      	ldrb	r3, [r7, #19]
 80010e4:	2b04      	cmp	r3, #4
 80010e6:	d9ee      	bls.n	80010c6 <DHT22_Read+0x86>
    }

    // Calcular el checksum
    checksum = bits[0] + bits[1] + bits[2] + bits[3];
 80010e8:	7b3a      	ldrb	r2, [r7, #12]
 80010ea:	7b7b      	ldrb	r3, [r7, #13]
 80010ec:	4413      	add	r3, r2
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	7bbb      	ldrb	r3, [r7, #14]
 80010f2:	4413      	add	r3, r2
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	4413      	add	r3, r2
 80010fa:	74bb      	strb	r3, [r7, #18]
    if (checksum != bits[4]) {
 80010fc:	7c3b      	ldrb	r3, [r7, #16]
 80010fe:	7cba      	ldrb	r2, [r7, #18]
 8001100:	429a      	cmp	r2, r3
 8001102:	d001      	beq.n	8001108 <DHT22_Read+0xc8>
        return DHT22_ERROR_CHECKSUM; // Error si el checksum no coincide
 8001104:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <DHT22_Read+0x138>)
 8001106:	e02a      	b.n	800115e <DHT22_Read+0x11e>
    }

    // Convertir los datos
    data->humedad =
        ((bits[0] << DHT22_HUMIDITY_SHIFT) | bits[1]) * DHT22_CONVERSION_FACTOR; // Calcular humedad
 8001108:	7b3b      	ldrb	r3, [r7, #12]
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	7b7a      	ldrb	r2, [r7, #13]
 800110e:	4313      	orrs	r3, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fa17 	bl	8000544 <__aeabi_i2d>
 8001116:	a314      	add	r3, pc, #80	; (adr r3, 8001168 <DHT22_Read+0x128>)
 8001118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111c:	f7ff fa7c 	bl	8000618 <__aeabi_dmul>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	4610      	mov	r0, r2
 8001126:	4619      	mov	r1, r3
 8001128:	f7ff fd6e 	bl	8000c08 <__aeabi_d2f>
 800112c:	4602      	mov	r2, r0
    data->humedad =
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	605a      	str	r2, [r3, #4]
    data->temperatura = ((bits[2] << DHT22_TEMPERATURE_SHIFT) | bits[3]) *
 8001132:	7bbb      	ldrb	r3, [r7, #14]
 8001134:	021b      	lsls	r3, r3, #8
 8001136:	7bfa      	ldrb	r2, [r7, #15]
 8001138:	4313      	orrs	r3, r2
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fa02 	bl	8000544 <__aeabi_i2d>
 8001140:	a309      	add	r3, pc, #36	; (adr r3, 8001168 <DHT22_Read+0x128>)
 8001142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001146:	f7ff fa67 	bl	8000618 <__aeabi_dmul>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4610      	mov	r0, r2
 8001150:	4619      	mov	r1, r3
 8001152:	f7ff fd59 	bl	8000c08 <__aeabi_d2f>
 8001156:	4602      	mov	r2, r0
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	601a      	str	r2, [r3, #0]
                        DHT22_CONVERSION_FACTOR; // Calcular temperatura
    return DHT22_OK;                             // Operación exitosa
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	371c      	adds	r7, #28
 8001162:	46bd      	mov	sp, r7
 8001164:	bd90      	pop	{r4, r7, pc}
 8001166:	bf00      	nop
 8001168:	9999999a 	.word	0x9999999a
 800116c:	3fb99999 	.word	0x3fb99999
 8001170:	0001863d 	.word	0x0001863d
 8001174:	0001863e 	.word	0x0001863e
 8001178:	0001863f 	.word	0x0001863f

0800117c <DHT22_ReadSimple>:
 * @param[out] hum  Puntero a variable de salida con la humedad relativa en %.
 *
 * @retval true si la lectura fue exitosa y los datos son válidos.
 * @retval false si hubo error de lectura o si los datos están fuera de rango.
 */
bool DHT22_ReadSimple(DHT22_HandleTypeDef * dht, float * temp, float * hum) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
    DHT22_Data data;

    if (DHT22_Read(dht, &data) != DHT22_OK) {
 8001188:	f107 0310 	add.w	r3, r7, #16
 800118c:	4619      	mov	r1, r3
 800118e:	68f8      	ldr	r0, [r7, #12]
 8001190:	f7ff ff56 	bl	8001040 <DHT22_Read>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d007      	beq.n	80011aa <DHT22_ReadSimple+0x2e>
        *temp = -99.9f;
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	4a1d      	ldr	r2, [pc, #116]	; (8001214 <DHT22_ReadSimple+0x98>)
 800119e:	601a      	str	r2, [r3, #0]
        *hum = -99.9f;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a1c      	ldr	r2, [pc, #112]	; (8001214 <DHT22_ReadSimple+0x98>)
 80011a4:	601a      	str	r2, [r3, #0]
        return false;
 80011a6:	2300      	movs	r3, #0
 80011a8:	e030      	b.n	800120c <DHT22_ReadSimple+0x90>
    }

    // Validar rangos físicos esperados
    if (data.temperatura < -40.0f || data.temperatura > 80.0f || data.humedad < 0.0f ||
 80011aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80011ae:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001218 <DHT22_ReadSimple+0x9c>
 80011b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ba:	d418      	bmi.n	80011ee <DHT22_ReadSimple+0x72>
 80011bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80011c0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800121c <DHT22_ReadSimple+0xa0>
 80011c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011cc:	dc0f      	bgt.n	80011ee <DHT22_ReadSimple+0x72>
 80011ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80011d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011da:	d408      	bmi.n	80011ee <DHT22_ReadSimple+0x72>
        data.humedad > 100.0f) {
 80011dc:	edd7 7a05 	vldr	s15, [r7, #20]
    if (data.temperatura < -40.0f || data.temperatura > 80.0f || data.humedad < 0.0f ||
 80011e0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001220 <DHT22_ReadSimple+0xa4>
 80011e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ec:	dd07      	ble.n	80011fe <DHT22_ReadSimple+0x82>
        *temp = -99.9f;
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	4a08      	ldr	r2, [pc, #32]	; (8001214 <DHT22_ReadSimple+0x98>)
 80011f2:	601a      	str	r2, [r3, #0]
        *hum = -99.9f;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a07      	ldr	r2, [pc, #28]	; (8001214 <DHT22_ReadSimple+0x98>)
 80011f8:	601a      	str	r2, [r3, #0]
        return false;
 80011fa:	2300      	movs	r3, #0
 80011fc:	e006      	b.n	800120c <DHT22_ReadSimple+0x90>
    }

    *temp = data.temperatura;
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	601a      	str	r2, [r3, #0]
    *hum = data.humedad;
 8001204:	697a      	ldr	r2, [r7, #20]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	601a      	str	r2, [r3, #0]
    return true;
 800120a:	2301      	movs	r3, #1
}
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	c2c7cccd 	.word	0xc2c7cccd
 8001218:	c2200000 	.word	0xc2200000
 800121c:	42a00000 	.word	0x42a00000
 8001220:	42c80000 	.word	0x42c80000

08001224 <DHT22_InitHardware>:
 * @param[in] GPIOx Puerto GPIO al que está conectado el DHT22.
 * @param[in] GPIO_Pin Pin GPIO al que está conectado el DHT22.
 *
 * @retval None
 */
void DHT22_InitHardware(DHT22_HandleTypeDef * dht, GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b08e      	sub	sp, #56	; 0x38
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	4613      	mov	r3, r2
 8001230:	80fb      	strh	r3, [r7, #6]
    dht->GPIOx = GPIOx;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	68ba      	ldr	r2, [r7, #8]
 8001236:	601a      	str	r2, [r3, #0]
    dht->GPIO_Pin = GPIO_Pin;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	88fa      	ldrh	r2, [r7, #6]
 800123c:	809a      	strh	r2, [r3, #4]

    // Habilitar el reloj para el puerto GPIO específico
    if (GPIOx == GPIOA)
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	4a5b      	ldr	r2, [pc, #364]	; (80013b0 <DHT22_InitHardware+0x18c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d10e      	bne.n	8001264 <DHT22_InitHardware+0x40>
        __HAL_RCC_GPIOA_CLK_ENABLE(); // Habilitar reloj para puerto GPIOA
 8001246:	2300      	movs	r3, #0
 8001248:	637b      	str	r3, [r7, #52]	; 0x34
 800124a:	4b5a      	ldr	r3, [pc, #360]	; (80013b4 <DHT22_InitHardware+0x190>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a59      	ldr	r2, [pc, #356]	; (80013b4 <DHT22_InitHardware+0x190>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b57      	ldr	r3, [pc, #348]	; (80013b4 <DHT22_InitHardware+0x190>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	637b      	str	r3, [r7, #52]	; 0x34
 8001260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001262:	e096      	b.n	8001392 <DHT22_InitHardware+0x16e>
    else if (GPIOx == GPIOB)
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	4a54      	ldr	r2, [pc, #336]	; (80013b8 <DHT22_InitHardware+0x194>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d10e      	bne.n	800128a <DHT22_InitHardware+0x66>
        __HAL_RCC_GPIOB_CLK_ENABLE(); // Habilitar reloj para puerto GPIOB
 800126c:	2300      	movs	r3, #0
 800126e:	633b      	str	r3, [r7, #48]	; 0x30
 8001270:	4b50      	ldr	r3, [pc, #320]	; (80013b4 <DHT22_InitHardware+0x190>)
 8001272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001274:	4a4f      	ldr	r2, [pc, #316]	; (80013b4 <DHT22_InitHardware+0x190>)
 8001276:	f043 0302 	orr.w	r3, r3, #2
 800127a:	6313      	str	r3, [r2, #48]	; 0x30
 800127c:	4b4d      	ldr	r3, [pc, #308]	; (80013b4 <DHT22_InitHardware+0x190>)
 800127e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	633b      	str	r3, [r7, #48]	; 0x30
 8001286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001288:	e083      	b.n	8001392 <DHT22_InitHardware+0x16e>
    else if (GPIOx == GPIOC)
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	4a4b      	ldr	r2, [pc, #300]	; (80013bc <DHT22_InitHardware+0x198>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d10e      	bne.n	80012b0 <DHT22_InitHardware+0x8c>
        __HAL_RCC_GPIOC_CLK_ENABLE(); // Habilitar reloj para puerto GPIOC
 8001292:	2300      	movs	r3, #0
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001296:	4b47      	ldr	r3, [pc, #284]	; (80013b4 <DHT22_InitHardware+0x190>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a46      	ldr	r2, [pc, #280]	; (80013b4 <DHT22_InitHardware+0x190>)
 800129c:	f043 0304 	orr.w	r3, r3, #4
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b44      	ldr	r3, [pc, #272]	; (80013b4 <DHT22_InitHardware+0x190>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0304 	and.w	r3, r3, #4
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ae:	e070      	b.n	8001392 <DHT22_InitHardware+0x16e>
    else if (GPIOx == GPIOD)
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	4a43      	ldr	r2, [pc, #268]	; (80013c0 <DHT22_InitHardware+0x19c>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d10e      	bne.n	80012d6 <DHT22_InitHardware+0xb2>
        __HAL_RCC_GPIOD_CLK_ENABLE(); // Habilitar reloj para puerto GPIOD
 80012b8:	2300      	movs	r3, #0
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80012bc:	4b3d      	ldr	r3, [pc, #244]	; (80013b4 <DHT22_InitHardware+0x190>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c0:	4a3c      	ldr	r2, [pc, #240]	; (80013b4 <DHT22_InitHardware+0x190>)
 80012c2:	f043 0308 	orr.w	r3, r3, #8
 80012c6:	6313      	str	r3, [r2, #48]	; 0x30
 80012c8:	4b3a      	ldr	r3, [pc, #232]	; (80013b4 <DHT22_InitHardware+0x190>)
 80012ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012cc:	f003 0308 	and.w	r3, r3, #8
 80012d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80012d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d4:	e05d      	b.n	8001392 <DHT22_InitHardware+0x16e>
    else if (GPIOx == GPIOE)
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	4a3a      	ldr	r2, [pc, #232]	; (80013c4 <DHT22_InitHardware+0x1a0>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d10e      	bne.n	80012fc <DHT22_InitHardware+0xd8>
        __HAL_RCC_GPIOE_CLK_ENABLE(); // Habilitar reloj para puerto GPIOE
 80012de:	2300      	movs	r3, #0
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
 80012e2:	4b34      	ldr	r3, [pc, #208]	; (80013b4 <DHT22_InitHardware+0x190>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a33      	ldr	r2, [pc, #204]	; (80013b4 <DHT22_InitHardware+0x190>)
 80012e8:	f043 0310 	orr.w	r3, r3, #16
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b31      	ldr	r3, [pc, #196]	; (80013b4 <DHT22_InitHardware+0x190>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0310 	and.w	r3, r3, #16
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	e04a      	b.n	8001392 <DHT22_InitHardware+0x16e>
    else if (GPIOx == GPIOF)
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	4a32      	ldr	r2, [pc, #200]	; (80013c8 <DHT22_InitHardware+0x1a4>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d10e      	bne.n	8001322 <DHT22_InitHardware+0xfe>
        __HAL_RCC_GPIOF_CLK_ENABLE(); // Habilitar reloj para puerto GPIOF
 8001304:	2300      	movs	r3, #0
 8001306:	623b      	str	r3, [r7, #32]
 8001308:	4b2a      	ldr	r3, [pc, #168]	; (80013b4 <DHT22_InitHardware+0x190>)
 800130a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130c:	4a29      	ldr	r2, [pc, #164]	; (80013b4 <DHT22_InitHardware+0x190>)
 800130e:	f043 0320 	orr.w	r3, r3, #32
 8001312:	6313      	str	r3, [r2, #48]	; 0x30
 8001314:	4b27      	ldr	r3, [pc, #156]	; (80013b4 <DHT22_InitHardware+0x190>)
 8001316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001318:	f003 0320 	and.w	r3, r3, #32
 800131c:	623b      	str	r3, [r7, #32]
 800131e:	6a3b      	ldr	r3, [r7, #32]
 8001320:	e037      	b.n	8001392 <DHT22_InitHardware+0x16e>
    else if (GPIOx == GPIOG)
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	4a29      	ldr	r2, [pc, #164]	; (80013cc <DHT22_InitHardware+0x1a8>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d10e      	bne.n	8001348 <DHT22_InitHardware+0x124>
        __HAL_RCC_GPIOG_CLK_ENABLE(); // Habilitar reloj para puerto GPIOG
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
 800132e:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <DHT22_InitHardware+0x190>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a20      	ldr	r2, [pc, #128]	; (80013b4 <DHT22_InitHardware+0x190>)
 8001334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b1e      	ldr	r3, [pc, #120]	; (80013b4 <DHT22_InitHardware+0x190>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001342:	61fb      	str	r3, [r7, #28]
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	e024      	b.n	8001392 <DHT22_InitHardware+0x16e>
    else if (GPIOx == GPIOH)
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	4a21      	ldr	r2, [pc, #132]	; (80013d0 <DHT22_InitHardware+0x1ac>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d10e      	bne.n	800136e <DHT22_InitHardware+0x14a>
        __HAL_RCC_GPIOH_CLK_ENABLE(); // Habilitar reloj para puerto GPIOH
 8001350:	2300      	movs	r3, #0
 8001352:	61bb      	str	r3, [r7, #24]
 8001354:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <DHT22_InitHardware+0x190>)
 8001356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001358:	4a16      	ldr	r2, [pc, #88]	; (80013b4 <DHT22_InitHardware+0x190>)
 800135a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800135e:	6313      	str	r3, [r2, #48]	; 0x30
 8001360:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <DHT22_InitHardware+0x190>)
 8001362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001368:	61bb      	str	r3, [r7, #24]
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	e011      	b.n	8001392 <DHT22_InitHardware+0x16e>
    else if (GPIOx == GPIOI)
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	4a18      	ldr	r2, [pc, #96]	; (80013d4 <DHT22_InitHardware+0x1b0>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d10d      	bne.n	8001392 <DHT22_InitHardware+0x16e>
        __HAL_RCC_GPIOI_CLK_ENABLE(); // Habilitar reloj para puerto GPIOI
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <DHT22_InitHardware+0x190>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a0d      	ldr	r2, [pc, #52]	; (80013b4 <DHT22_InitHardware+0x190>)
 8001380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <DHT22_InitHardware+0x190>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	697b      	ldr	r3, [r7, #20]

    // Configurar el pin como salida
    DHT22_SetPinOutput(dht);
 8001392:	68f8      	ldr	r0, [r7, #12]
 8001394:	f000 f820 	bl	80013d8 <DHT22_SetPinOutput>
    HAL_GPIO_WritePin(dht->GPIOx, dht->GPIO_Pin, GPIO_PIN_SET); // Poner el pin en alto
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6818      	ldr	r0, [r3, #0]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	889b      	ldrh	r3, [r3, #4]
 80013a0:	2201      	movs	r2, #1
 80013a2:	4619      	mov	r1, r3
 80013a4:	f004 febe 	bl	8006124 <HAL_GPIO_WritePin>
}
 80013a8:	bf00      	nop
 80013aa:	3738      	adds	r7, #56	; 0x38
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40020000 	.word	0x40020000
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40020400 	.word	0x40020400
 80013bc:	40020800 	.word	0x40020800
 80013c0:	40020c00 	.word	0x40020c00
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40021400 	.word	0x40021400
 80013cc:	40021800 	.word	0x40021800
 80013d0:	40021c00 	.word	0x40021c00
 80013d4:	40022000 	.word	0x40022000

080013d8 <DHT22_SetPinOutput>:
 * @param[in] dht Puntero a la estructura DHT22_HandleTypeDef que contiene la configuración del
 * puerto y pin GPIO.
 *
 * @retval None
 */
void DHT22_SetPinOutput(DHT22_HandleTypeDef * dht) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = dht->GPIO_Pin;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	889b      	ldrh	r3, [r3, #4]
 80013f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f6:	2301      	movs	r3, #1
 80013f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(dht->GPIOx, &GPIO_InitStruct); // Inicializar el GPIO como salida
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f107 020c 	add.w	r2, r7, #12
 800140a:	4611      	mov	r1, r2
 800140c:	4618      	mov	r0, r3
 800140e:	f004 fbb9 	bl	8005b84 <HAL_GPIO_Init>
}
 8001412:	bf00      	nop
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <DHT22_SetPinInput>:
 * @param[in] dht Puntero a la estructura DHT22_HandleTypeDef que contiene la configuración del
 * puerto y pin GPIO.
 *
 * @retval None
 */
void DHT22_SetPinInput(DHT22_HandleTypeDef * dht) {
 800141a:	b580      	push	{r7, lr}
 800141c:	b088      	sub	sp, #32
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001422:	f107 030c 	add.w	r3, r7, #12
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
 8001430:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = dht->GPIO_Pin;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	889b      	ldrh	r3, [r3, #4]
 8001436:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001438:	2300      	movs	r3, #0
 800143a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(dht->GPIOx, &GPIO_InitStruct);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f107 020c 	add.w	r2, r7, #12
 8001448:	4611      	mov	r1, r2
 800144a:	4618      	mov	r0, r3
 800144c:	f004 fb9a 	bl	8005b84 <HAL_GPIO_Init>
}
 8001450:	bf00      	nop
 8001452:	3720      	adds	r7, #32
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <DHT22_StartSignal>:
 * @param[in] dht Puntero a la estructura DHT22_HandleTypeDef que contiene la configuración del
 * puerto y pin GPIO.
 *
 * @retval None
 */
void DHT22_StartSignal(DHT22_HandleTypeDef * dht) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
    DHT22_SetPinOutput(dht);                                      // Configurar el pin como salida
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff ffb9 	bl	80013d8 <DHT22_SetPinOutput>
    HAL_GPIO_WritePin(dht->GPIOx, dht->GPIO_Pin, GPIO_PIN_RESET); // Enviar señal de inicio (bajo)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6818      	ldr	r0, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	889b      	ldrh	r3, [r3, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	4619      	mov	r1, r3
 8001472:	f004 fe57 	bl	8006124 <HAL_GPIO_WritePin>
    DWT_Delay(1000);                                              // Esperar 1000 µs
 8001476:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800147a:	f000 f88d 	bl	8001598 <DWT_Delay>
    HAL_GPIO_WritePin(dht->GPIOx, dht->GPIO_Pin, GPIO_PIN_SET); // Terminar señal de inicio (alto)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6818      	ldr	r0, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	889b      	ldrh	r3, [r3, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	4619      	mov	r1, r3
 800148a:	f004 fe4b 	bl	8006124 <HAL_GPIO_WritePin>
    DWT_Delay(20);                                              // Esperar 20 µs
 800148e:	2014      	movs	r0, #20
 8001490:	f000 f882 	bl	8001598 <DWT_Delay>
    DHT22_SetPinInput(dht);                                     // Configurar el pin como entrada
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff ffc0 	bl	800141a <DHT22_SetPinInput>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <DHT22_ReadByte>:
 * @param[in] dht Puntero a la estructura DHT22_HandleTypeDef que contiene la configuración del
 * puerto y pin GPIO.
 *
 * @retval uint8_t El byte leído del sensor.
 */
uint8_t DHT22_ReadByte(DHT22_HandleTypeDef * dht) {
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b084      	sub	sp, #16
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
    uint8_t result = 0;                             // Inicializa el resultado en 0
 80014aa:	2300      	movs	r3, #0
 80014ac:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < DHT22_BYTE_BITS; i++) { // Itera 8 veces para leer cada bit
 80014ae:	2300      	movs	r3, #0
 80014b0:	73bb      	strb	r3, [r7, #14]
 80014b2:	e00d      	b.n	80014d0 <DHT22_ReadByte+0x2e>
        result <<=
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	73fb      	strb	r3, [r7, #15]
            1; // Desplaza el resultado a la izquierda para hacer espacio para el siguiente bit
        result |= DHT22_ReadBit(dht); // Lee un bit y lo añade al resultado
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 f810 	bl	80014e0 <DHT22_ReadBit>
 80014c0:	4603      	mov	r3, r0
 80014c2:	461a      	mov	r2, r3
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < DHT22_BYTE_BITS; i++) { // Itera 8 veces para leer cada bit
 80014ca:	7bbb      	ldrb	r3, [r7, #14]
 80014cc:	3301      	adds	r3, #1
 80014ce:	73bb      	strb	r3, [r7, #14]
 80014d0:	7bbb      	ldrb	r3, [r7, #14]
 80014d2:	2b07      	cmp	r3, #7
 80014d4:	d9ee      	bls.n	80014b4 <DHT22_ReadByte+0x12>
    }
    return result; // Devuelve el byte completo leído del sensor
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <DHT22_ReadBit>:
 * @param[in] dht Puntero a la estructura DHT22_HandleTypeDef que contiene la configuración del
 * puerto y pin GPIO.
 *
 * @retval uint8_t El bit leído del sensor (0 o 1).
 */
uint8_t DHT22_ReadBit(DHT22_HandleTypeDef * dht) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
    uint32_t timeout = DHT22_TIMEOUT;
 80014e8:	2364      	movs	r3, #100	; 0x64
 80014ea:	60fb      	str	r3, [r7, #12]

    // Esperar a que el pin cambie a alto
    while (HAL_GPIO_ReadPin(dht->GPIOx, dht->GPIO_Pin) == GPIO_PIN_RESET) {
 80014ec:	e007      	b.n	80014fe <DHT22_ReadBit+0x1e>
        if (--timeout == 0) {
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	3b01      	subs	r3, #1
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <DHT22_ReadBit+0x1e>
            return 0; // Timeout, devolver 0
 80014fa:	2300      	movs	r3, #0
 80014fc:	e02e      	b.n	800155c <DHT22_ReadBit+0x7c>
    while (HAL_GPIO_ReadPin(dht->GPIOx, dht->GPIO_Pin) == GPIO_PIN_RESET) {
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	889b      	ldrh	r3, [r3, #4]
 8001506:	4619      	mov	r1, r3
 8001508:	4610      	mov	r0, r2
 800150a:	f004 fdf3 	bl	80060f4 <HAL_GPIO_ReadPin>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0ec      	beq.n	80014ee <DHT22_ReadBit+0xe>
        }
    }

    // Introducir un pequeño retraso para asegurar una lectura precisa del bit
    DWT_Delay(DHT22_BIT_DELAY); // Esperar 30 µs
 8001514:	201e      	movs	r0, #30
 8001516:	f000 f83f 	bl	8001598 <DWT_Delay>

    // Leer el bit (0 o 1) según el estado del pin
    uint8_t result = HAL_GPIO_ReadPin(dht->GPIOx, dht->GPIO_Pin);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	889b      	ldrh	r3, [r3, #4]
 8001522:	4619      	mov	r1, r3
 8001524:	4610      	mov	r0, r2
 8001526:	f004 fde5 	bl	80060f4 <HAL_GPIO_ReadPin>
 800152a:	4603      	mov	r3, r0
 800152c:	72fb      	strb	r3, [r7, #11]

    timeout = DHT22_TIMEOUT;
 800152e:	2364      	movs	r3, #100	; 0x64
 8001530:	60fb      	str	r3, [r7, #12]

    // Esperar a que el pin vuelva a su estado bajo
    while (HAL_GPIO_ReadPin(dht->GPIOx, dht->GPIO_Pin) == GPIO_PIN_SET) {
 8001532:	e005      	b.n	8001540 <DHT22_ReadBit+0x60>
        if (--timeout == 0) {
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	3b01      	subs	r3, #1
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d00b      	beq.n	8001558 <DHT22_ReadBit+0x78>
    while (HAL_GPIO_ReadPin(dht->GPIOx, dht->GPIO_Pin) == GPIO_PIN_SET) {
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	889b      	ldrh	r3, [r3, #4]
 8001548:	4619      	mov	r1, r3
 800154a:	4610      	mov	r0, r2
 800154c:	f004 fdd2 	bl	80060f4 <HAL_GPIO_ReadPin>
 8001550:	4603      	mov	r3, r0
 8001552:	2b01      	cmp	r3, #1
 8001554:	d0ee      	beq.n	8001534 <DHT22_ReadBit+0x54>
 8001556:	e000      	b.n	800155a <DHT22_ReadBit+0x7a>
            break; // Timeout, salir del bucle
 8001558:	bf00      	nop
        }
    }

    // Devolver el bit leído
    return result;
 800155a:	7afb      	ldrb	r3, [r7, #11]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <DWT_Init>:

/* === Private function implementation ========================================================= */

/* === Public function implementation ========================================================== */

void DWT_Init(void) {
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Habilitar el DWT
 8001568:	4b09      	ldr	r3, [pc, #36]	; (8001590 <DWT_Init+0x2c>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	4a08      	ldr	r2, [pc, #32]	; (8001590 <DWT_Init+0x2c>)
 800156e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001572:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = REINIT_COUNT;                     // Reiniciar el contador de ciclos
 8001574:	4b07      	ldr	r3, [pc, #28]	; (8001594 <DWT_Init+0x30>)
 8001576:	2200      	movs	r2, #0
 8001578:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // Habilitar el contador de ciclos
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <DWT_Init+0x30>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a05      	ldr	r2, [pc, #20]	; (8001594 <DWT_Init+0x30>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6013      	str	r3, [r2, #0]
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000edf0 	.word	0xe000edf0
 8001594:	e0001000 	.word	0xe0001000

08001598 <DWT_Delay>:

void DWT_Delay(uint32_t us) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
    uint32_t clk_cycle_start = DWT->CYCCNT;
 80015a0:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <DWT_Delay+0x40>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	60fb      	str	r3, [r7, #12]
    uint32_t clk_cycle_delay = us * (HAL_RCC_GetHCLKFreq() / CLK_DIV_FREQ_RCC);
 80015a6:	f006 fcc9 	bl	8007f3c <HAL_RCC_GetHCLKFreq>
 80015aa:	4603      	mov	r3, r0
 80015ac:	4a0b      	ldr	r2, [pc, #44]	; (80015dc <DWT_Delay+0x44>)
 80015ae:	fba2 2303 	umull	r2, r3, r2, r3
 80015b2:	0c9a      	lsrs	r2, r3, #18
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	fb02 f303 	mul.w	r3, r2, r3
 80015ba:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - clk_cycle_start) < clk_cycle_delay)
 80015bc:	bf00      	nop
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <DWT_Delay+0x40>)
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d8f8      	bhi.n	80015be <DWT_Delay+0x26>
        ;
}
 80015cc:	bf00      	nop
 80015ce:	bf00      	nop
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	e0001000 	.word	0xe0001000
 80015dc:	431bde83 	.word	0x431bde83

080015e0 <maskIsDataTrue>:
 * predefinidos establecidos por MP_MIN_VALUE y MP_MAX_VALUE.
 *
 * @param data Valor de MP a verificar.
 * @return Verdadero si el valor está dentro del rango; falso en caso contrario.
 */
bool maskIsDataTrue(float data) {
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	ed87 0a01 	vstr	s0, [r7, #4]
    return (data > MP_MIN_VALUE) && (data <= MP_MAX_VALUE);
 80015ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80015ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80015f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fa:	dd0a      	ble.n	8001612 <maskIsDataTrue+0x32>
 80015fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001600:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001628 <maskIsDataTrue+0x48>
 8001604:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800160c:	d801      	bhi.n	8001612 <maskIsDataTrue+0x32>
 800160e:	2301      	movs	r3, #1
 8001610:	e000      	b.n	8001614 <maskIsDataTrue+0x34>
 8001612:	2300      	movs	r3, #0
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	b2db      	uxtb	r3, r3
}
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	43fa0000 	.word	0x43fa0000

0800162c <isArrayEmpty>:
 *
 * @param data Array de flotantes a verificar.
 * @param n_data Número de elementos en el array.
 * @return Verdadero si el array está vacío o no inicializado; falso si contiene elementos.
 */
bool isArrayEmpty(float data[], int n_data) {
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
    return (n_data == CERODATA || data == NULL);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d002      	beq.n	8001642 <isArrayEmpty+0x16>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <isArrayEmpty+0x1a>
 8001642:	2301      	movs	r3, #1
 8001644:	e000      	b.n	8001648 <isArrayEmpty+0x1c>
 8001646:	2300      	movs	r3, #0
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	b2db      	uxtb	r3, r3
}
 800164e:	4618      	mov	r0, r3
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	0000      	movs	r0, r0
 800165c:	0000      	movs	r0, r0
	...

08001660 <sqrt_binary_search>:
 *
 * @param x Número del cual calcular la raíz cuadrada.
 * @return La raíz cuadrada de x, calculada dentro de una tolerancia definida por
 * TOLERANCE_SQRT_MET.
 */
double sqrt_binary_search(double x) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b08c      	sub	sp, #48	; 0x30
 8001664:	af00      	add	r7, sp, #0
 8001666:	ed87 0b00 	vstr	d0, [r7]
    if (x <= 0)
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	f04f 0300 	mov.w	r3, #0
 8001672:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001676:	f7ff fa4b 	bl	8000b10 <__aeabi_dcmple>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d004      	beq.n	800168a <sqrt_binary_search+0x2a>
        return 0;
 8001680:	f04f 0200 	mov.w	r2, #0
 8001684:	f04f 0300 	mov.w	r3, #0
 8001688:	e060      	b.n	800174c <sqrt_binary_search+0xec>

    double low = MIN_VALUE_SQRT_TOLERANCE, high = x, mid, guess;
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	f04f 0300 	mov.w	r3, #0
 8001692:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001696:	e9d7 2300 	ldrd	r2, r3, [r7]
 800169a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double tolerance = TOLERANCE_SQRT_MET;
 800169e:	a330      	add	r3, pc, #192	; (adr r3, 8001760 <sqrt_binary_search+0x100>)
 80016a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a4:	e9c7 2306 	strd	r2, r3, [r7, #24]

    while (high - low > tolerance) {
 80016a8:	e02f      	b.n	800170a <sqrt_binary_search+0xaa>
        mid = (low + high) / DIV2;
 80016aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80016b2:	f7fe fdfb 	bl	80002ac <__adddf3>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4610      	mov	r0, r2
 80016bc:	4619      	mov	r1, r3
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016c6:	f7ff f8d1 	bl	800086c <__aeabi_ddiv>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	e9c7 2304 	strd	r2, r3, [r7, #16]
        guess = mid * mid;
 80016d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80016d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016da:	f7fe ff9d 	bl	8000618 <__aeabi_dmul>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	e9c7 2302 	strd	r2, r3, [r7, #8]

        if (guess > x)
 80016e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016ee:	f7ff fa23 	bl	8000b38 <__aeabi_dcmpgt>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d004      	beq.n	8001702 <sqrt_binary_search+0xa2>
            high = mid;
 80016f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80016fc:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001700:	e003      	b.n	800170a <sqrt_binary_search+0xaa>
        else
            low = mid;
 8001702:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001706:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    while (high - low > tolerance) {
 800170a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800170e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001712:	f7fe fdc9 	bl	80002a8 <__aeabi_dsub>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800171e:	f7ff f9ed 	bl	8000afc <__aeabi_dcmplt>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1c0      	bne.n	80016aa <sqrt_binary_search+0x4a>
    }

    return (low + high) / DIV2;
 8001728:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800172c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001730:	f7fe fdbc 	bl	80002ac <__adddf3>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4610      	mov	r0, r2
 800173a:	4619      	mov	r1, r3
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001744:	f7ff f892 	bl	800086c <__aeabi_ddiv>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
}
 800174c:	ec43 2b17 	vmov	d7, r2, r3
 8001750:	eeb0 0a47 	vmov.f32	s0, s14
 8001754:	eef0 0a67 	vmov.f32	s1, s15
 8001758:	3730      	adds	r7, #48	; 0x30
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	9abcaf48 	.word	0x9abcaf48
 8001764:	3e7ad7f2 	.word	0x3e7ad7f2

08001768 <calculateAverage>:
 * @param n_data Número de elementos en el array.
 * @return El promedio de los valores válidos o MSN_VOID_ARRAY_VALUE si el array está vacío
 *         o todos los elementos son inválidos.
 */

float calculateAverage(float data[], int n_data) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
    if (isArrayEmpty(data, n_data))
 8001772:	6839      	ldr	r1, [r7, #0]
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff ff59 	bl	800162c <isArrayEmpty>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d002      	beq.n	8001786 <calculateAverage+0x1e>
        return MSN_VOID_ARRAY_VALUE; // Manejo de array vacío
 8001780:	eddf 7a23 	vldr	s15, [pc, #140]	; 8001810 <calculateAverage+0xa8>
 8001784:	e03e      	b.n	8001804 <calculateAverage+0x9c>
    float sum = INI_SUM;
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
    int rest = INI_REST; // numero de valor descontado del n total cuando
 800178c:	2300      	movs	r3, #0
 800178e:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < n_data; i++) {
 8001790:	2300      	movs	r3, #0
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	e01f      	b.n	80017d6 <calculateAverage+0x6e>
        if (maskIsDataTrue(data[i])) { // salta valores negativos o iguales a 0
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	edd3 7a00 	vldr	s15, [r3]
 80017a2:	eeb0 0a67 	vmov.f32	s0, s15
 80017a6:	f7ff ff1b 	bl	80015e0 <maskIsDataTrue>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d00c      	beq.n	80017ca <calculateAverage+0x62>
            sum += data[i];
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	4413      	add	r3, r2
 80017b8:	edd3 7a00 	vldr	s15, [r3]
 80017bc:	ed97 7a05 	vldr	s14, [r7, #20]
 80017c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c4:	edc7 7a05 	vstr	s15, [r7, #20]
 80017c8:	e002      	b.n	80017d0 <calculateAverage+0x68>
        } else {
            rest++; // valores no validados
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	3301      	adds	r3, #1
 80017ce:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < n_data; i++) {
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	3301      	adds	r3, #1
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	429a      	cmp	r2, r3
 80017dc:	dbdb      	blt.n	8001796 <calculateAverage+0x2e>
        }
    }
    n_data = n_data - rest; // recalcula el valor de n en función de valores no validados
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	603b      	str	r3, [r7, #0]

    if (n_data > NOT_DIV_NUM) { // verifica no estar dividiendo por un número negativo o 0
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	dd09      	ble.n	8001800 <calculateAverage+0x98>
        return sum / (n_data);  // retorna promedio
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	ee07 3a90 	vmov	s15, r3
 80017f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017f6:	edd7 6a05 	vldr	s13, [r7, #20]
 80017fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017fe:	e001      	b.n	8001804 <calculateAverage+0x9c>
    } else {
        return MSN_VOID_ARRAY_VALUE; // retorna un mensaje de error por array nulo
 8001800:	eddf 7a03 	vldr	s15, [pc, #12]	; 8001810 <calculateAverage+0xa8>
    }
}
 8001804:	eeb0 0a67 	vmov.f32	s0, s15
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	c479c000 	.word	0xc479c000

08001814 <findMaxValue>:
 * @param n_data Número de elementos en el array.
 * @return El valor máximo encontrado o MSN_VOID_ARRAY_VALUE si el array está vacío o todos
 *         los elementos son inválidos.
 */

float findMaxValue(float data[], int n_data) {
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
    if (isArrayEmpty(data, n_data))
 800181e:	6839      	ldr	r1, [r7, #0]
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff ff03 	bl	800162c <isArrayEmpty>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <findMaxValue+0x1c>
        return MSN_VOID_ARRAY_VALUE; // Manejo de array vacío
 800182c:	4b1b      	ldr	r3, [pc, #108]	; (800189c <findMaxValue+0x88>)
 800182e:	e02d      	b.n	800188c <findMaxValue+0x78>
    float value = data[START_LOCATION];
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	60fb      	str	r3, [r7, #12]
    // int location = START_LOCATION;
    for (int i = 1; i < n_data; i++) {
 8001836:	2301      	movs	r3, #1
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	e022      	b.n	8001882 <findMaxValue+0x6e>
        if (maskIsDataTrue(data[i])) { // salta valores negativos o iguales a 0
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	4413      	add	r3, r2
 8001844:	edd3 7a00 	vldr	s15, [r3]
 8001848:	eeb0 0a67 	vmov.f32	s0, s15
 800184c:	f7ff fec8 	bl	80015e0 <maskIsDataTrue>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d012      	beq.n	800187c <findMaxValue+0x68>
            if (value < data[i]) {
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	edd3 7a00 	vldr	s15, [r3]
 8001862:	ed97 7a03 	vldr	s14, [r7, #12]
 8001866:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800186a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186e:	d505      	bpl.n	800187c <findMaxValue+0x68>
                value = data[i];
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	4413      	add	r3, r2
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	60fb      	str	r3, [r7, #12]
    for (int i = 1; i < n_data; i++) {
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	3301      	adds	r3, #1
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	429a      	cmp	r2, r3
 8001888:	dbd8      	blt.n	800183c <findMaxValue+0x28>
                //          location = i;
            }
        }
    }
    return value;
 800188a:	68fb      	ldr	r3, [r7, #12]
};
 800188c:	ee07 3a90 	vmov	s15, r3
 8001890:	eeb0 0a67 	vmov.f32	s0, s15
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	c479c000 	.word	0xc479c000

080018a0 <findMinValue>:
 * @param n_data Número de elementos en el array.
 * @return El valor mínimo encontrado o MSN_VOID_ARRAY_VALUE si el array está vacío o todos
 *         los elementos son inválidos.
 */

float findMinValue(float data[], int n_data) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
    if (isArrayEmpty(data, n_data))
 80018aa:	6839      	ldr	r1, [r7, #0]
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff febd 	bl	800162c <isArrayEmpty>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <findMinValue+0x1c>
        return MSN_VOID_ARRAY_VALUE; // Manejo de array vacío
 80018b8:	4b1b      	ldr	r3, [pc, #108]	; (8001928 <findMinValue+0x88>)
 80018ba:	e02d      	b.n	8001918 <findMinValue+0x78>
    float value = data[START_LOCATION];
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	60fb      	str	r3, [r7, #12]
    // int location = START_LOCATION;
    for (int i = 1; i < n_data; i++) {
 80018c2:	2301      	movs	r3, #1
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	e022      	b.n	800190e <findMinValue+0x6e>
        if (maskIsDataTrue(data[i])) { // salta valores negativos o iguales a 0
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	4413      	add	r3, r2
 80018d0:	edd3 7a00 	vldr	s15, [r3]
 80018d4:	eeb0 0a67 	vmov.f32	s0, s15
 80018d8:	f7ff fe82 	bl	80015e0 <maskIsDataTrue>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d012      	beq.n	8001908 <findMinValue+0x68>
            if (value > data[i]) {
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	4413      	add	r3, r2
 80018ea:	edd3 7a00 	vldr	s15, [r3]
 80018ee:	ed97 7a03 	vldr	s14, [r7, #12]
 80018f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fa:	dd05      	ble.n	8001908 <findMinValue+0x68>
                value = data[i];
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	4413      	add	r3, r2
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	60fb      	str	r3, [r7, #12]
    for (int i = 1; i < n_data; i++) {
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	3301      	adds	r3, #1
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	dbd8      	blt.n	80018c8 <findMinValue+0x28>
                //   location = i;
            }
        }
    }
    return value;
 8001916:	68fb      	ldr	r3, [r7, #12]
};
 8001918:	ee07 3a90 	vmov	s15, r3
 800191c:	eeb0 0a67 	vmov.f32	s0, s15
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	c479c000 	.word	0xc479c000

0800192c <calculateStandardDeviation>:
 * @param n Número de elementos en el array.
 * @return La desviación estándar de los valores válidos o 0 si hay menos de dos elementos válidos
 *         o el array está vacío.
 */

float calculateStandardDeviation(float data[], int n) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
    if (isArrayEmpty(data, n))
 8001936:	6839      	ldr	r1, [r7, #0]
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff fe77 	bl	800162c <isArrayEmpty>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <calculateStandardDeviation+0x1c>
        return MSN_VOID_ARRAY_VALUE; // Manejo de array vacío
 8001944:	4b37      	ldr	r3, [pc, #220]	; (8001a24 <calculateStandardDeviation+0xf8>)
 8001946:	e065      	b.n	8001a14 <calculateStandardDeviation+0xe8>

    if (n <= DS_NOTDEFINI)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	2b01      	cmp	r3, #1
 800194c:	dc01      	bgt.n	8001952 <calculateStandardDeviation+0x26>
        return MSN_DS_NOTDEFINI; // La desviación estándar no está definida para n <= 1
 800194e:	4b36      	ldr	r3, [pc, #216]	; (8001a28 <calculateStandardDeviation+0xfc>)
 8001950:	e060      	b.n	8001a14 <calculateStandardDeviation+0xe8>

    int validCount = INI_VALID_COUNT; // Contador para el número de valores validados
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
    float mean = calculateAverage(data, n);
 8001956:	6839      	ldr	r1, [r7, #0]
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff ff05 	bl	8001768 <calculateAverage>
 800195e:	ed87 0a02 	vstr	s0, [r7, #8]
    float sumOfSquares = INI_SUM_OF_SQUARE;
 8001962:	f04f 0300 	mov.w	r3, #0
 8001966:	613b      	str	r3, [r7, #16]

    for (int i = 0; i < n; i++) {
 8001968:	2300      	movs	r3, #0
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	e02e      	b.n	80019cc <calculateStandardDeviation+0xa0>
        if (maskIsDataTrue(data[i])) {
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	4413      	add	r3, r2
 8001976:	edd3 7a00 	vldr	s15, [r3]
 800197a:	eeb0 0a67 	vmov.f32	s0, s15
 800197e:	f7ff fe2f 	bl	80015e0 <maskIsDataTrue>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d01e      	beq.n	80019c6 <calculateStandardDeviation+0x9a>
            sumOfSquares += (data[i] - mean) * (data[i] - mean);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	4413      	add	r3, r2
 8001990:	ed93 7a00 	vldr	s14, [r3]
 8001994:	edd7 7a02 	vldr	s15, [r7, #8]
 8001998:	ee37 7a67 	vsub.f32	s14, s14, s15
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	4413      	add	r3, r2
 80019a4:	edd3 6a00 	vldr	s13, [r3]
 80019a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80019ac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80019b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b4:	ed97 7a04 	vldr	s14, [r7, #16]
 80019b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019bc:	edc7 7a04 	vstr	s15, [r7, #16]
            validCount++; // Incrementa solo para datos validados
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	3301      	adds	r3, #1
 80019c4:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < n; i++) {
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	3301      	adds	r3, #1
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	dbcc      	blt.n	800196e <calculateStandardDeviation+0x42>
        }
    }

    // Calcula la desviación estándar solo si hay suficientes datos validados
    if (validCount > MIN_VALID_COUNT) {
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	dd1b      	ble.n	8001a12 <calculateStandardDeviation+0xe6>
        return sqrt_binary_search(sumOfSquares / (validCount - 1));
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	3b01      	subs	r3, #1
 80019de:	ee07 3a90 	vmov	s15, r3
 80019e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019e6:	ed97 7a04 	vldr	s14, [r7, #16]
 80019ea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80019ee:	ee16 0a90 	vmov	r0, s13
 80019f2:	f7fe fdb9 	bl	8000568 <__aeabi_f2d>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	ec43 2b10 	vmov	d0, r2, r3
 80019fe:	f7ff fe2f 	bl	8001660 <sqrt_binary_search>
 8001a02:	ec53 2b10 	vmov	r2, r3, d0
 8001a06:	4610      	mov	r0, r2
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f7ff f8fd 	bl	8000c08 <__aeabi_d2f>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	e000      	b.n	8001a14 <calculateStandardDeviation+0xe8>
    } else {
        return MSN_NOT_DATA; // Retorna -777 si no hay suficientes datos para calcular la desviación
 8001a12:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <calculateStandardDeviation+0x100>)
                             // estándar
    }
}
 8001a14:	ee07 3a90 	vmov	s15, r3
 8001a18:	eeb0 0a67 	vmov.f32	s0, s15
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	c479c000 	.word	0xc479c000
 8001a28:	c4268000 	.word	0xc4268000
 8001a2c:	c4424000 	.word	0xc4424000

08001a30 <log_avg10_data>:
void log_avg1h_data(const PMDataAveraged *avg);
void log_avg24h_data(const PMDataAveraged *avg);



void log_avg10_data(const PMDataAveraged *avg) {
 8001a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a34:	b0aa      	sub	sp, #168	; 0xa8
 8001a36:	af08      	add	r7, sp, #32
 8001a38:	6078      	str	r0, [r7, #4]
    char buffer[128];
    snprintf(buffer, sizeof(buffer), "%.2f,%.2f,%.2f,%.2f\n",
             avg->mean, avg->max, avg->min, avg->std);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
    snprintf(buffer, sizeof(buffer), "%.2f,%.2f,%.2f,%.2f\n",
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fd92 	bl	8000568 <__aeabi_f2d>
 8001a44:	4604      	mov	r4, r0
 8001a46:	460d      	mov	r5, r1
             avg->mean, avg->max, avg->min, avg->std);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
    snprintf(buffer, sizeof(buffer), "%.2f,%.2f,%.2f,%.2f\n",
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7fe fd8b 	bl	8000568 <__aeabi_f2d>
 8001a52:	4680      	mov	r8, r0
 8001a54:	4689      	mov	r9, r1
             avg->mean, avg->max, avg->min, avg->std);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
    snprintf(buffer, sizeof(buffer), "%.2f,%.2f,%.2f,%.2f\n",
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe fd84 	bl	8000568 <__aeabi_f2d>
 8001a60:	4682      	mov	sl, r0
 8001a62:	468b      	mov	fp, r1
             avg->mean, avg->max, avg->min, avg->std);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
    snprintf(buffer, sizeof(buffer), "%.2f,%.2f,%.2f,%.2f\n",
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7fe fd7d 	bl	8000568 <__aeabi_f2d>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	f107 0008 	add.w	r0, r7, #8
 8001a76:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001a7a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001a7e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001a82:	e9cd 4500 	strd	r4, r5, [sp]
 8001a86:	4a1b      	ldr	r2, [pc, #108]	; (8001af4 <log_avg10_data+0xc4>)
 8001a88:	2180      	movs	r1, #128	; 0x80
 8001a8a:	f00c f8c9 	bl	800dc20 <sniprintf>

    microSD_appendLineAbsolute("/AVG10/avg10.csv", buffer);
 8001a8e:	f107 0308 	add.w	r3, r7, #8
 8001a92:	4619      	mov	r1, r3
 8001a94:	4818      	ldr	r0, [pc, #96]	; (8001af8 <log_avg10_data+0xc8>)
 8001a96:	f001 faa7 	bl	8002fe8 <microSD_appendLineAbsolute>

    uart_print("[PROMEDIO 10min] PM2.5 -> media: %.2f, max: %.2f, min: %.2f, std: %.2f\r\n",
               avg->mean, avg->max, avg->min, avg->std);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
    uart_print("[PROMEDIO 10min] PM2.5 -> media: %.2f, max: %.2f, min: %.2f, std: %.2f\r\n",
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fd62 	bl	8000568 <__aeabi_f2d>
 8001aa4:	4682      	mov	sl, r0
 8001aa6:	468b      	mov	fp, r1
               avg->mean, avg->max, avg->min, avg->std);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
    uart_print("[PROMEDIO 10min] PM2.5 -> media: %.2f, max: %.2f, min: %.2f, std: %.2f\r\n",
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7fe fd5b 	bl	8000568 <__aeabi_f2d>
 8001ab2:	4604      	mov	r4, r0
 8001ab4:	460d      	mov	r5, r1
               avg->mean, avg->max, avg->min, avg->std);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
    uart_print("[PROMEDIO 10min] PM2.5 -> media: %.2f, max: %.2f, min: %.2f, std: %.2f\r\n",
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe fd54 	bl	8000568 <__aeabi_f2d>
 8001ac0:	4680      	mov	r8, r0
 8001ac2:	4689      	mov	r9, r1
               avg->mean, avg->max, avg->min, avg->std);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
    uart_print("[PROMEDIO 10min] PM2.5 -> media: %.2f, max: %.2f, min: %.2f, std: %.2f\r\n",
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7fe fd4d 	bl	8000568 <__aeabi_f2d>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001ad6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001ada:	e9cd 4500 	strd	r4, r5, [sp]
 8001ade:	4652      	mov	r2, sl
 8001ae0:	465b      	mov	r3, fp
 8001ae2:	4806      	ldr	r0, [pc, #24]	; (8001afc <log_avg10_data+0xcc>)
 8001ae4:	f002 feda 	bl	800489c <uart_print>
}
 8001ae8:	bf00      	nop
 8001aea:	3788      	adds	r7, #136	; 0x88
 8001aec:	46bd      	mov	sp, r7
 8001aee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001af2:	bf00      	nop
 8001af4:	08011748 	.word	0x08011748
 8001af8:	08011760 	.word	0x08011760
 8001afc:	08011774 	.word	0x08011774

08001b00 <log_avg1h_data>:

void log_avg1h_data(const PMDataAveraged *avg) {
 8001b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b04:	b0aa      	sub	sp, #168	; 0xa8
 8001b06:	af08      	add	r7, sp, #32
 8001b08:	6078      	str	r0, [r7, #4]
    char buffer[128];
    snprintf(buffer, sizeof(buffer), "%.2f,%.2f,%.2f,%.2f\n",
             avg->mean, avg->max, avg->min, avg->std);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
    snprintf(buffer, sizeof(buffer), "%.2f,%.2f,%.2f,%.2f\n",
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7fe fd2a 	bl	8000568 <__aeabi_f2d>
 8001b14:	4604      	mov	r4, r0
 8001b16:	460d      	mov	r5, r1
             avg->mean, avg->max, avg->min, avg->std);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
    snprintf(buffer, sizeof(buffer), "%.2f,%.2f,%.2f,%.2f\n",
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7fe fd23 	bl	8000568 <__aeabi_f2d>
 8001b22:	4680      	mov	r8, r0
 8001b24:	4689      	mov	r9, r1
             avg->mean, avg->max, avg->min, avg->std);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
    snprintf(buffer, sizeof(buffer), "%.2f,%.2f,%.2f,%.2f\n",
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fd1c 	bl	8000568 <__aeabi_f2d>
 8001b30:	4682      	mov	sl, r0
 8001b32:	468b      	mov	fp, r1
             avg->mean, avg->max, avg->min, avg->std);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68db      	ldr	r3, [r3, #12]
    snprintf(buffer, sizeof(buffer), "%.2f,%.2f,%.2f,%.2f\n",
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7fe fd15 	bl	8000568 <__aeabi_f2d>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	f107 0008 	add.w	r0, r7, #8
 8001b46:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001b4a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001b4e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001b52:	e9cd 4500 	strd	r4, r5, [sp]
 8001b56:	4a1b      	ldr	r2, [pc, #108]	; (8001bc4 <log_avg1h_data+0xc4>)
 8001b58:	2180      	movs	r1, #128	; 0x80
 8001b5a:	f00c f861 	bl	800dc20 <sniprintf>

    microSD_appendLineAbsolute("/AVG60/avg60.csv", buffer);
 8001b5e:	f107 0308 	add.w	r3, r7, #8
 8001b62:	4619      	mov	r1, r3
 8001b64:	4818      	ldr	r0, [pc, #96]	; (8001bc8 <log_avg1h_data+0xc8>)
 8001b66:	f001 fa3f 	bl	8002fe8 <microSD_appendLineAbsolute>

    uart_print("[PROMEDIO 1h] PM2.5 -> media: %.2f, max: %.2f, min: %.2f, std: %.2f\r\n",
               avg->mean, avg->max, avg->min, avg->std);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
    uart_print("[PROMEDIO 1h] PM2.5 -> media: %.2f, max: %.2f, min: %.2f, std: %.2f\r\n",
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7fe fcfa 	bl	8000568 <__aeabi_f2d>
 8001b74:	4682      	mov	sl, r0
 8001b76:	468b      	mov	fp, r1
               avg->mean, avg->max, avg->min, avg->std);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
    uart_print("[PROMEDIO 1h] PM2.5 -> media: %.2f, max: %.2f, min: %.2f, std: %.2f\r\n",
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe fcf3 	bl	8000568 <__aeabi_f2d>
 8001b82:	4604      	mov	r4, r0
 8001b84:	460d      	mov	r5, r1
               avg->mean, avg->max, avg->min, avg->std);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
    uart_print("[PROMEDIO 1h] PM2.5 -> media: %.2f, max: %.2f, min: %.2f, std: %.2f\r\n",
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fcec 	bl	8000568 <__aeabi_f2d>
 8001b90:	4680      	mov	r8, r0
 8001b92:	4689      	mov	r9, r1
               avg->mean, avg->max, avg->min, avg->std);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
    uart_print("[PROMEDIO 1h] PM2.5 -> media: %.2f, max: %.2f, min: %.2f, std: %.2f\r\n",
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7fe fce5 	bl	8000568 <__aeabi_f2d>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001ba6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001baa:	e9cd 4500 	strd	r4, r5, [sp]
 8001bae:	4652      	mov	r2, sl
 8001bb0:	465b      	mov	r3, fp
 8001bb2:	4806      	ldr	r0, [pc, #24]	; (8001bcc <log_avg1h_data+0xcc>)
 8001bb4:	f002 fe72 	bl	800489c <uart_print>
}
 8001bb8:	bf00      	nop
 8001bba:	3788      	adds	r7, #136	; 0x88
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bc2:	bf00      	nop
 8001bc4:	08011748 	.word	0x08011748
 8001bc8:	080117c0 	.word	0x080117c0
 8001bcc:	080117d4 	.word	0x080117d4

08001bd0 <log_avg24h_data>:

void log_avg24h_data(const PMDataAveraged *avg) {
 8001bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bd4:	b0aa      	sub	sp, #168	; 0xa8
 8001bd6:	af08      	add	r7, sp, #32
 8001bd8:	6078      	str	r0, [r7, #4]
    char buffer[128];
    snprintf(buffer, sizeof(buffer), "%.2f,%.2f,%.2f,%.2f\n",
             avg->mean, avg->max, avg->min, avg->std);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
    snprintf(buffer, sizeof(buffer), "%.2f,%.2f,%.2f,%.2f\n",
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7fe fcc2 	bl	8000568 <__aeabi_f2d>
 8001be4:	4604      	mov	r4, r0
 8001be6:	460d      	mov	r5, r1
             avg->mean, avg->max, avg->min, avg->std);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
    snprintf(buffer, sizeof(buffer), "%.2f,%.2f,%.2f,%.2f\n",
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe fcbb 	bl	8000568 <__aeabi_f2d>
 8001bf2:	4680      	mov	r8, r0
 8001bf4:	4689      	mov	r9, r1
             avg->mean, avg->max, avg->min, avg->std);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
    snprintf(buffer, sizeof(buffer), "%.2f,%.2f,%.2f,%.2f\n",
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe fcb4 	bl	8000568 <__aeabi_f2d>
 8001c00:	4682      	mov	sl, r0
 8001c02:	468b      	mov	fp, r1
             avg->mean, avg->max, avg->min, avg->std);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
    snprintf(buffer, sizeof(buffer), "%.2f,%.2f,%.2f,%.2f\n",
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7fe fcad 	bl	8000568 <__aeabi_f2d>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	f107 0008 	add.w	r0, r7, #8
 8001c16:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001c1a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001c1e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001c22:	e9cd 4500 	strd	r4, r5, [sp]
 8001c26:	4a1b      	ldr	r2, [pc, #108]	; (8001c94 <log_avg24h_data+0xc4>)
 8001c28:	2180      	movs	r1, #128	; 0x80
 8001c2a:	f00b fff9 	bl	800dc20 <sniprintf>

    microSD_appendLineAbsolute("/AVG24/avg24.csv", buffer);
 8001c2e:	f107 0308 	add.w	r3, r7, #8
 8001c32:	4619      	mov	r1, r3
 8001c34:	4818      	ldr	r0, [pc, #96]	; (8001c98 <log_avg24h_data+0xc8>)
 8001c36:	f001 f9d7 	bl	8002fe8 <microSD_appendLineAbsolute>

    uart_print("[PROMEDIO 24h] PM2.5 -> media: %.2f, max: %.2f, min: %.2f, std: %.2f\r\n",
               avg->mean, avg->max, avg->min, avg->std);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
    uart_print("[PROMEDIO 24h] PM2.5 -> media: %.2f, max: %.2f, min: %.2f, std: %.2f\r\n",
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fc92 	bl	8000568 <__aeabi_f2d>
 8001c44:	4682      	mov	sl, r0
 8001c46:	468b      	mov	fp, r1
               avg->mean, avg->max, avg->min, avg->std);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
    uart_print("[PROMEDIO 24h] PM2.5 -> media: %.2f, max: %.2f, min: %.2f, std: %.2f\r\n",
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7fe fc8b 	bl	8000568 <__aeabi_f2d>
 8001c52:	4604      	mov	r4, r0
 8001c54:	460d      	mov	r5, r1
               avg->mean, avg->max, avg->min, avg->std);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
    uart_print("[PROMEDIO 24h] PM2.5 -> media: %.2f, max: %.2f, min: %.2f, std: %.2f\r\n",
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7fe fc84 	bl	8000568 <__aeabi_f2d>
 8001c60:	4680      	mov	r8, r0
 8001c62:	4689      	mov	r9, r1
               avg->mean, avg->max, avg->min, avg->std);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68db      	ldr	r3, [r3, #12]
    uart_print("[PROMEDIO 24h] PM2.5 -> media: %.2f, max: %.2f, min: %.2f, std: %.2f\r\n",
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fc7d 	bl	8000568 <__aeabi_f2d>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001c76:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001c7a:	e9cd 4500 	strd	r4, r5, [sp]
 8001c7e:	4652      	mov	r2, sl
 8001c80:	465b      	mov	r3, fp
 8001c82:	4806      	ldr	r0, [pc, #24]	; (8001c9c <log_avg24h_data+0xcc>)
 8001c84:	f002 fe0a 	bl	800489c <uart_print>
}
 8001c88:	bf00      	nop
 8001c8a:	3788      	adds	r7, #136	; 0x88
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c92:	bf00      	nop
 8001c94:	08011748 	.word	0x08011748
 8001c98:	0801181c 	.word	0x0801181c
 8001c9c:	08011830 	.word	0x08011830

08001ca0 <proceso_analisis_periodico>:

void proceso_analisis_periodico(float pm25_actual) {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b090      	sub	sp, #64	; 0x40
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	ed87 0a01 	vstr	s0, [r7, #4]
    static int index_1h = 0;

    static float buffer_24h[30];
    static int index_24h = 0;

    buffer_10min[index_10min++ % 60] = pm25_actual;
 8001caa:	4b6f      	ldr	r3, [pc, #444]	; (8001e68 <proceso_analisis_periodico+0x1c8>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	1c53      	adds	r3, r2, #1
 8001cb0:	496d      	ldr	r1, [pc, #436]	; (8001e68 <proceso_analisis_periodico+0x1c8>)
 8001cb2:	600b      	str	r3, [r1, #0]
 8001cb4:	4b6d      	ldr	r3, [pc, #436]	; (8001e6c <proceso_analisis_periodico+0x1cc>)
 8001cb6:	fb83 1302 	smull	r1, r3, r3, r2
 8001cba:	4413      	add	r3, r2
 8001cbc:	1159      	asrs	r1, r3, #5
 8001cbe:	17d3      	asrs	r3, r2, #31
 8001cc0:	1ac9      	subs	r1, r1, r3
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	011b      	lsls	r3, r3, #4
 8001cc6:	1a5b      	subs	r3, r3, r1
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	1ad1      	subs	r1, r2, r3
 8001ccc:	4a68      	ldr	r2, [pc, #416]	; (8001e70 <proceso_analisis_periodico+0x1d0>)
 8001cce:	008b      	lsls	r3, r1, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	601a      	str	r2, [r3, #0]

    ds3231_time_t now;
    if (!ds3231_get_datetime(&now)) {
 8001cd6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f001 ff50 	bl	8003b80 <ds3231_get_datetime>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	f083 0301 	eor.w	r3, r3, #1
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <proceso_analisis_periodico+0x54>
        uart_print("Error obteniendo hora del RTC\r\n");
 8001cec:	4861      	ldr	r0, [pc, #388]	; (8001e74 <proceso_analisis_periodico+0x1d4>)
 8001cee:	f002 fdd5 	bl	800489c <uart_print>
 8001cf2:	e0b5      	b.n	8001e60 <proceso_analisis_periodico+0x1c0>
        return;
    }

    if (now.min % 10 == 0 && now.sec < 10) {
 8001cf4:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8001cf8:	4b5f      	ldr	r3, [pc, #380]	; (8001e78 <proceso_analisis_periodico+0x1d8>)
 8001cfa:	fba3 1302 	umull	r1, r3, r3, r2
 8001cfe:	08d9      	lsrs	r1, r3, #3
 8001d00:	460b      	mov	r3, r1
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f040 80a7 	bne.w	8001e60 <proceso_analisis_periodico+0x1c0>
 8001d12:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001d16:	2b09      	cmp	r3, #9
 8001d18:	f200 80a2 	bhi.w	8001e60 <proceso_analisis_periodico+0x1c0>
        PMDataAveraged avg10;
        avg10.mean = calculateAverage(buffer_10min, 60);
 8001d1c:	213c      	movs	r1, #60	; 0x3c
 8001d1e:	4854      	ldr	r0, [pc, #336]	; (8001e70 <proceso_analisis_periodico+0x1d0>)
 8001d20:	f7ff fd22 	bl	8001768 <calculateAverage>
 8001d24:	eef0 7a40 	vmov.f32	s15, s0
 8001d28:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        avg10.max = findMaxValue(buffer_10min, 60);
 8001d2c:	213c      	movs	r1, #60	; 0x3c
 8001d2e:	4850      	ldr	r0, [pc, #320]	; (8001e70 <proceso_analisis_periodico+0x1d0>)
 8001d30:	f7ff fd70 	bl	8001814 <findMaxValue>
 8001d34:	eef0 7a40 	vmov.f32	s15, s0
 8001d38:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        avg10.min = findMinValue(buffer_10min, 60);
 8001d3c:	213c      	movs	r1, #60	; 0x3c
 8001d3e:	484c      	ldr	r0, [pc, #304]	; (8001e70 <proceso_analisis_periodico+0x1d0>)
 8001d40:	f7ff fdae 	bl	80018a0 <findMinValue>
 8001d44:	eef0 7a40 	vmov.f32	s15, s0
 8001d48:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        avg10.std = calculateStandardDeviation(buffer_10min, 60);
 8001d4c:	213c      	movs	r1, #60	; 0x3c
 8001d4e:	4848      	ldr	r0, [pc, #288]	; (8001e70 <proceso_analisis_periodico+0x1d0>)
 8001d50:	f7ff fdec 	bl	800192c <calculateStandardDeviation>
 8001d54:	eef0 7a40 	vmov.f32	s15, s0
 8001d58:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        log_avg10_data(&avg10);
 8001d5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fe65 	bl	8001a30 <log_avg10_data>

        buffer_1h[index_1h++ % 24] = avg10.mean;
 8001d66:	4b45      	ldr	r3, [pc, #276]	; (8001e7c <proceso_analisis_periodico+0x1dc>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	1c53      	adds	r3, r2, #1
 8001d6c:	4943      	ldr	r1, [pc, #268]	; (8001e7c <proceso_analisis_periodico+0x1dc>)
 8001d6e:	600b      	str	r3, [r1, #0]
 8001d70:	4b43      	ldr	r3, [pc, #268]	; (8001e80 <proceso_analisis_periodico+0x1e0>)
 8001d72:	fb83 1302 	smull	r1, r3, r3, r2
 8001d76:	1099      	asrs	r1, r3, #2
 8001d78:	17d3      	asrs	r3, r2, #31
 8001d7a:	1ac9      	subs	r1, r1, r3
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	440b      	add	r3, r1
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	1ad1      	subs	r1, r2, r3
 8001d86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d88:	483e      	ldr	r0, [pc, #248]	; (8001e84 <proceso_analisis_periodico+0x1e4>)
 8001d8a:	008b      	lsls	r3, r1, #2
 8001d8c:	4403      	add	r3, r0
 8001d8e:	601a      	str	r2, [r3, #0]

        if (now.min == 0) {
 8001d90:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d163      	bne.n	8001e60 <proceso_analisis_periodico+0x1c0>
            PMDataAveraged avg1h;
            avg1h.mean = calculateAverage(buffer_1h, 24);
 8001d98:	2118      	movs	r1, #24
 8001d9a:	483a      	ldr	r0, [pc, #232]	; (8001e84 <proceso_analisis_periodico+0x1e4>)
 8001d9c:	f7ff fce4 	bl	8001768 <calculateAverage>
 8001da0:	eef0 7a40 	vmov.f32	s15, s0
 8001da4:	edc7 7a06 	vstr	s15, [r7, #24]
            avg1h.max = findMaxValue(buffer_1h, 24);
 8001da8:	2118      	movs	r1, #24
 8001daa:	4836      	ldr	r0, [pc, #216]	; (8001e84 <proceso_analisis_periodico+0x1e4>)
 8001dac:	f7ff fd32 	bl	8001814 <findMaxValue>
 8001db0:	eef0 7a40 	vmov.f32	s15, s0
 8001db4:	edc7 7a07 	vstr	s15, [r7, #28]
            avg1h.min = findMinValue(buffer_1h, 24);
 8001db8:	2118      	movs	r1, #24
 8001dba:	4832      	ldr	r0, [pc, #200]	; (8001e84 <proceso_analisis_periodico+0x1e4>)
 8001dbc:	f7ff fd70 	bl	80018a0 <findMinValue>
 8001dc0:	eef0 7a40 	vmov.f32	s15, s0
 8001dc4:	edc7 7a08 	vstr	s15, [r7, #32]
            avg1h.std = calculateStandardDeviation(buffer_1h, 24);
 8001dc8:	2118      	movs	r1, #24
 8001dca:	482e      	ldr	r0, [pc, #184]	; (8001e84 <proceso_analisis_periodico+0x1e4>)
 8001dcc:	f7ff fdae 	bl	800192c <calculateStandardDeviation>
 8001dd0:	eef0 7a40 	vmov.f32	s15, s0
 8001dd4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            log_avg1h_data(&avg1h);
 8001dd8:	f107 0318 	add.w	r3, r7, #24
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff fe8f 	bl	8001b00 <log_avg1h_data>

            buffer_24h[index_24h++ % 30] = avg1h.mean;
 8001de2:	4b29      	ldr	r3, [pc, #164]	; (8001e88 <proceso_analisis_periodico+0x1e8>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	1c53      	adds	r3, r2, #1
 8001de8:	4927      	ldr	r1, [pc, #156]	; (8001e88 <proceso_analisis_periodico+0x1e8>)
 8001dea:	600b      	str	r3, [r1, #0]
 8001dec:	4b1f      	ldr	r3, [pc, #124]	; (8001e6c <proceso_analisis_periodico+0x1cc>)
 8001dee:	fb83 1302 	smull	r1, r3, r3, r2
 8001df2:	4413      	add	r3, r2
 8001df4:	1119      	asrs	r1, r3, #4
 8001df6:	17d3      	asrs	r3, r2, #31
 8001df8:	1ac9      	subs	r1, r1, r3
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	011b      	lsls	r3, r3, #4
 8001dfe:	1a5b      	subs	r3, r3, r1
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	1ad1      	subs	r1, r2, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4821      	ldr	r0, [pc, #132]	; (8001e8c <proceso_analisis_periodico+0x1ec>)
 8001e08:	008b      	lsls	r3, r1, #2
 8001e0a:	4403      	add	r3, r0
 8001e0c:	601a      	str	r2, [r3, #0]

            if (now.hour == 0) {
 8001e0e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d124      	bne.n	8001e60 <proceso_analisis_periodico+0x1c0>
                PMDataAveraged avg24;
                avg24.mean = calculateAverage(buffer_24h, 30);
 8001e16:	211e      	movs	r1, #30
 8001e18:	481c      	ldr	r0, [pc, #112]	; (8001e8c <proceso_analisis_periodico+0x1ec>)
 8001e1a:	f7ff fca5 	bl	8001768 <calculateAverage>
 8001e1e:	eef0 7a40 	vmov.f32	s15, s0
 8001e22:	edc7 7a02 	vstr	s15, [r7, #8]
                avg24.max = findMaxValue(buffer_24h, 30);
 8001e26:	211e      	movs	r1, #30
 8001e28:	4818      	ldr	r0, [pc, #96]	; (8001e8c <proceso_analisis_periodico+0x1ec>)
 8001e2a:	f7ff fcf3 	bl	8001814 <findMaxValue>
 8001e2e:	eef0 7a40 	vmov.f32	s15, s0
 8001e32:	edc7 7a03 	vstr	s15, [r7, #12]
                avg24.min = findMinValue(buffer_24h, 30);
 8001e36:	211e      	movs	r1, #30
 8001e38:	4814      	ldr	r0, [pc, #80]	; (8001e8c <proceso_analisis_periodico+0x1ec>)
 8001e3a:	f7ff fd31 	bl	80018a0 <findMinValue>
 8001e3e:	eef0 7a40 	vmov.f32	s15, s0
 8001e42:	edc7 7a04 	vstr	s15, [r7, #16]
                avg24.std = calculateStandardDeviation(buffer_24h, 30);
 8001e46:	211e      	movs	r1, #30
 8001e48:	4810      	ldr	r0, [pc, #64]	; (8001e8c <proceso_analisis_periodico+0x1ec>)
 8001e4a:	f7ff fd6f 	bl	800192c <calculateStandardDeviation>
 8001e4e:	eef0 7a40 	vmov.f32	s15, s0
 8001e52:	edc7 7a05 	vstr	s15, [r7, #20]
                log_avg24h_data(&avg24);
 8001e56:	f107 0308 	add.w	r3, r7, #8
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff feb8 	bl	8001bd0 <log_avg24h_data>
            }
        }
    }
}
 8001e60:	3740      	adds	r7, #64	; 0x40
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20002058 	.word	0x20002058
 8001e6c:	88888889 	.word	0x88888889
 8001e70:	2000205c 	.word	0x2000205c
 8001e74:	08011878 	.word	0x08011878
 8001e78:	cccccccd 	.word	0xcccccccd
 8001e7c:	2000214c 	.word	0x2000214c
 8001e80:	2aaaaaab 	.word	0x2aaaaaab
 8001e84:	20002150 	.word	0x20002150
 8001e88:	200021b0 	.word	0x200021b0
 8001e8c:	200021b4 	.word	0x200021b4

08001e90 <data_logger_init>:



bool data_logger_init(void) {
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
    // Inicializar buffers
    FRESULT res = f_mount(&fs, "", 1);
 8001e96:	2201      	movs	r2, #1
 8001e98:	490e      	ldr	r1, [pc, #56]	; (8001ed4 <data_logger_init+0x44>)
 8001e9a:	480f      	ldr	r0, [pc, #60]	; (8001ed8 <data_logger_init+0x48>)
 8001e9c:	f009 ff96 	bl	800bdcc <f_mount>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	71fb      	strb	r3, [r7, #7]
    if (res != FR_OK) {
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d008      	beq.n	8001ebc <data_logger_init+0x2c>
        print_fatfs_error(res); // ⬅️ nueva línea aquí
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f001 f923 	bl	80030f8 <print_fatfs_error>
        sd_mounted = false;
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <data_logger_init+0x4c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	701a      	strb	r2, [r3, #0]
        return false;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	e006      	b.n	8001eca <data_logger_init+0x3a>
    }

    uart_print("[OK] microSD montada correctamente\r\n");
 8001ebc:	4808      	ldr	r0, [pc, #32]	; (8001ee0 <data_logger_init+0x50>)
 8001ebe:	f002 fced 	bl	800489c <uart_print>
    sd_mounted = true;
 8001ec2:	4b06      	ldr	r3, [pc, #24]	; (8001edc <data_logger_init+0x4c>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	701a      	strb	r2, [r3, #0]
    return true;
 8001ec8:	2301      	movs	r3, #1
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	08011898 	.word	0x08011898
 8001ed8:	20001e20 	.word	0x20001e20
 8001edc:	20002054 	.word	0x20002054
 8001ee0:	0801189c 	.word	0x0801189c

08001ee4 <data_logger_get_average_pm25>:

    return true;
}
// función encargada de calcular los promedio de material particulado

float data_logger_get_average_pm25(uint8_t sensor_id, uint32_t num_mediciones) {
 8001ee4:	b480      	push	{r7}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	6039      	str	r1, [r7, #0]
 8001eee:	71fb      	strb	r3, [r7, #7]
    float suma = 0.0f;
 8001ef0:	f04f 0300 	mov.w	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]
    uint32_t contador = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	613b      	str	r3, [r7, #16]

    // Limitar la cantidad de mediciones a usar
    if (num_mediciones > buffer_alta_frecuencia.cantidad) {
 8001efa:	4b30      	ldr	r3, [pc, #192]	; (8001fbc <data_logger_get_average_pm25+0xd8>)
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d902      	bls.n	8001f0a <data_logger_get_average_pm25+0x26>
        num_mediciones = buffer_alta_frecuencia.cantidad;
 8001f04:	4b2d      	ldr	r3, [pc, #180]	; (8001fbc <data_logger_get_average_pm25+0xd8>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	603b      	str	r3, [r7, #0]
    }

    // Si no hay mediciones, retornar 0
    if (num_mediciones == 0) {
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d102      	bne.n	8001f16 <data_logger_get_average_pm25+0x32>
        return 0.0f;
 8001f10:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8001fc0 <data_logger_get_average_pm25+0xdc>
 8001f14:	e04b      	b.n	8001fae <data_logger_get_average_pm25+0xca>
    }

    // Calcular promedio de las últimas 'num_mediciones'
    for (uint32_t i = 0; i < num_mediciones; i++) {
 8001f16:	2300      	movs	r3, #0
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	e035      	b.n	8001f88 <data_logger_get_average_pm25+0xa4>
        uint32_t indice =
            (buffer_alta_frecuencia.inicio + buffer_alta_frecuencia.cantidad - i - 1) %
 8001f1c:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <data_logger_get_average_pm25+0xd8>)
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	4b26      	ldr	r3, [pc, #152]	; (8001fbc <data_logger_get_average_pm25+0xd8>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	441a      	add	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	3b01      	subs	r3, #1
            buffer_alta_frecuencia.capacidad;
 8001f2c:	4a23      	ldr	r2, [pc, #140]	; (8001fbc <data_logger_get_average_pm25+0xd8>)
 8001f2e:	6852      	ldr	r2, [r2, #4]
        uint32_t indice =
 8001f30:	fbb3 f1f2 	udiv	r1, r3, r2
 8001f34:	fb01 f202 	mul.w	r2, r1, r2
 8001f38:	1a9b      	subs	r3, r3, r2
 8001f3a:	60bb      	str	r3, [r7, #8]

        // Filtrar por sensor_id si es necesario
        if (sensor_id == 0 || buffer_alta_frecuencia.datos[indice].sensor_id == sensor_id) {
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00c      	beq.n	8001f5c <data_logger_get_average_pm25+0x78>
 8001f42:	4b1e      	ldr	r3, [pc, #120]	; (8001fbc <data_logger_get_average_pm25+0xd8>)
 8001f44:	6819      	ldr	r1, [r3, #0]
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	011b      	lsls	r3, r3, #4
 8001f4c:	1a9b      	subs	r3, r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f56:	79fa      	ldrb	r2, [r7, #7]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d112      	bne.n	8001f82 <data_logger_get_average_pm25+0x9e>
            suma += buffer_alta_frecuencia.datos[indice].valores.pm2_5;
 8001f5c:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <data_logger_get_average_pm25+0xd8>)
 8001f5e:	6819      	ldr	r1, [r3, #0]
 8001f60:	68ba      	ldr	r2, [r7, #8]
 8001f62:	4613      	mov	r3, r2
 8001f64:	011b      	lsls	r3, r3, #4
 8001f66:	1a9b      	subs	r3, r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001f70:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f78:	edc7 7a05 	vstr	s15, [r7, #20]
            contador++;
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	613b      	str	r3, [r7, #16]
    for (uint32_t i = 0; i < num_mediciones; i++) {
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	3301      	adds	r3, #1
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d3c5      	bcc.n	8001f1c <data_logger_get_average_pm25+0x38>
        }
    }

    // Retornar promedio o 0 si no hay datos
    return (contador > 0) ? (suma / contador) : 0.0f;
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d009      	beq.n	8001faa <data_logger_get_average_pm25+0xc6>
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	ee07 3a90 	vmov	s15, r3
 8001f9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fa0:	edd7 6a05 	vldr	s13, [r7, #20]
 8001fa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fa8:	e001      	b.n	8001fae <data_logger_get_average_pm25+0xca>
 8001faa:	eddf 7a05 	vldr	s15, [pc, #20]	; 8001fc0 <data_logger_get_average_pm25+0xdc>
}
 8001fae:	eeb0 0a67 	vmov.f32	s0, s15
 8001fb2:	371c      	adds	r7, #28
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	20000000 	.word	0x20000000
 8001fc0:	00000000 	.word	0x00000000

08001fc4 <data_logger_print_summary>:

void data_logger_print_summary() {
 8001fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fc6:	b0cb      	sub	sp, #300	; 0x12c
 8001fc8:	af06      	add	r7, sp, #24
    char buffer[256];

    // Imprimir encabezado
    snprintf(buffer, sizeof(buffer),
 8001fca:	4b3c      	ldr	r3, [pc, #240]	; (80020bc <data_logger_print_summary+0xf8>)
 8001fcc:	68de      	ldr	r6, [r3, #12]
 8001fce:	4b3b      	ldr	r3, [pc, #236]	; (80020bc <data_logger_print_summary+0xf8>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	4a3b      	ldr	r2, [pc, #236]	; (80020c0 <data_logger_print_summary+0xfc>)
 8001fd4:	68d2      	ldr	r2, [r2, #12]
 8001fd6:	493a      	ldr	r1, [pc, #232]	; (80020c0 <data_logger_print_summary+0xfc>)
 8001fd8:	6849      	ldr	r1, [r1, #4]
 8001fda:	483a      	ldr	r0, [pc, #232]	; (80020c4 <data_logger_print_summary+0x100>)
 8001fdc:	68c0      	ldr	r0, [r0, #12]
 8001fde:	4c39      	ldr	r4, [pc, #228]	; (80020c4 <data_logger_print_summary+0x100>)
 8001fe0:	6864      	ldr	r4, [r4, #4]
 8001fe2:	1d3d      	adds	r5, r7, #4
 8001fe4:	9404      	str	r4, [sp, #16]
 8001fe6:	9003      	str	r0, [sp, #12]
 8001fe8:	9102      	str	r1, [sp, #8]
 8001fea:	9201      	str	r2, [sp, #4]
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	4633      	mov	r3, r6
 8001ff0:	4a35      	ldr	r2, [pc, #212]	; (80020c8 <data_logger_print_summary+0x104>)
 8001ff2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ff6:	4628      	mov	r0, r5
 8001ff8:	f00b fe12 	bl	800dc20 <sniprintf>
             "Buffer diario: %lu/%lu muestras\n",
             buffer_alta_frecuencia.cantidad, buffer_alta_frecuencia.capacidad,
             buffer_hora.cantidad, buffer_hora.capacidad, buffer_dia.cantidad,
             buffer_dia.capacidad);

    uart_print("%s", buffer);
 8001ffc:	1d3b      	adds	r3, r7, #4
 8001ffe:	4619      	mov	r1, r3
 8002000:	4832      	ldr	r0, [pc, #200]	; (80020cc <data_logger_print_summary+0x108>)
 8002002:	f002 fc4b 	bl	800489c <uart_print>

    // Imprimir últimas mediciones si hay datos
    if (buffer_alta_frecuencia.cantidad > 0) {
 8002006:	4b2d      	ldr	r3, [pc, #180]	; (80020bc <data_logger_print_summary+0xf8>)
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d050      	beq.n	80020b0 <data_logger_print_summary+0xec>
        uart_print("\nÚltimas 3 mediciones:\n");
 800200e:	4830      	ldr	r0, [pc, #192]	; (80020d0 <data_logger_print_summary+0x10c>)
 8002010:	f002 fc44 	bl	800489c <uart_print>

        for (uint32_t i = 0; i < 3 && i < buffer_alta_frecuencia.cantidad; i++) {
 8002014:	2300      	movs	r3, #0
 8002016:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800201a:	e03f      	b.n	800209c <data_logger_print_summary+0xd8>
            uint32_t indice =
                (buffer_alta_frecuencia.inicio + buffer_alta_frecuencia.cantidad - i - 1) %
 800201c:	4b27      	ldr	r3, [pc, #156]	; (80020bc <data_logger_print_summary+0xf8>)
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	4b26      	ldr	r3, [pc, #152]	; (80020bc <data_logger_print_summary+0xf8>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	441a      	add	r2, r3
 8002026:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	3b01      	subs	r3, #1
                buffer_alta_frecuencia.capacidad;
 800202e:	4a23      	ldr	r2, [pc, #140]	; (80020bc <data_logger_print_summary+0xf8>)
 8002030:	6852      	ldr	r2, [r2, #4]
            uint32_t indice =
 8002032:	fbb3 f1f2 	udiv	r1, r3, r2
 8002036:	fb01 f202 	mul.w	r2, r1, r2
 800203a:	1a9b      	subs	r3, r3, r2
 800203c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

            MedicionMP * medicion = &buffer_alta_frecuencia.datos[indice];
 8002040:	4b1e      	ldr	r3, [pc, #120]	; (80020bc <data_logger_print_summary+0xf8>)
 8002042:	6819      	ldr	r1, [r3, #0]
 8002044:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002048:	4613      	mov	r3, r2
 800204a:	011b      	lsls	r3, r3, #4
 800204c:	1a9b      	subs	r3, r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

            snprintf(buffer, sizeof(buffer), "[%s] Sensor %d: PM2.5=%.2f ug/m3\n",
                     medicion->timestamp, medicion->sensor_id, medicion->valores.pm2_5);
 8002056:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 800205a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800205e:	f893 3020 	ldrb.w	r3, [r3, #32]
            snprintf(buffer, sizeof(buffer), "[%s] Sensor %d: PM2.5=%.2f ug/m3\n",
 8002062:	461d      	mov	r5, r3
                     medicion->timestamp, medicion->sensor_id, medicion->valores.pm2_5);
 8002064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            snprintf(buffer, sizeof(buffer), "[%s] Sensor %d: PM2.5=%.2f ug/m3\n",
 800206a:	4618      	mov	r0, r3
 800206c:	f7fe fa7c 	bl	8000568 <__aeabi_f2d>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	1d38      	adds	r0, r7, #4
 8002076:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800207a:	9500      	str	r5, [sp, #0]
 800207c:	4623      	mov	r3, r4
 800207e:	4a15      	ldr	r2, [pc, #84]	; (80020d4 <data_logger_print_summary+0x110>)
 8002080:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002084:	f00b fdcc 	bl	800dc20 <sniprintf>

            uart_print("%s", buffer);
 8002088:	1d3b      	adds	r3, r7, #4
 800208a:	4619      	mov	r1, r3
 800208c:	480f      	ldr	r0, [pc, #60]	; (80020cc <data_logger_print_summary+0x108>)
 800208e:	f002 fc05 	bl	800489c <uart_print>
        for (uint32_t i = 0; i < 3 && i < buffer_alta_frecuencia.cantidad; i++) {
 8002092:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002096:	3301      	adds	r3, #1
 8002098:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800209c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d805      	bhi.n	80020b0 <data_logger_print_summary+0xec>
 80020a4:	4b05      	ldr	r3, [pc, #20]	; (80020bc <data_logger_print_summary+0xf8>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d3b5      	bcc.n	800201c <data_logger_print_summary+0x58>
        }
    }
}
 80020b0:	bf00      	nop
 80020b2:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000000 	.word	0x20000000
 80020c0:	20000010 	.word	0x20000010
 80020c4:	20000020 	.word	0x20000020
 80020c8:	080118c4 	.word	0x080118c4
 80020cc:	08011958 	.word	0x08011958
 80020d0:	0801195c 	.word	0x0801195c
 80020d4:	08011978 	.word	0x08011978

080020d8 <format_csv_line>:
 * @param data Puntero a estructura con los datos
 * @param csv_line Cadena de salida donde se almacenará la línea CSV
 * @param max_len Tamaño máximo del búfer de salida
 * @return true si el formateo fue exitoso, false si hubo error de espacio
 */
bool format_csv_line(const ParticulateData * data, char * csv_line, size_t max_len) {
 80020d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020dc:	b0a9      	sub	sp, #164	; 0xa4
 80020de:	af12      	add	r7, sp, #72	; 0x48
 80020e0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80020e2:	62b9      	str	r1, [r7, #40]	; 0x28
 80020e4:	627a      	str	r2, [r7, #36]	; 0x24
    char timestamp[32];
    build_iso8601_timestamp(timestamp, sizeof(timestamp), data);
 80020e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020ec:	2120      	movs	r1, #32
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 f9d0 	bl	8002494 <build_iso8601_timestamp>

    int written =
        snprintf(csv_line, max_len, "%s,%d,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n", timestamp,
                 data->sensor_id, data->pm1_0, data->pm2_5, data->pm4_0, data->pm10, data->temp_amb,
 80020f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f6:	781b      	ldrb	r3, [r3, #0]
        snprintf(csv_line, max_len, "%s,%d,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n", timestamp,
 80020f8:	461e      	mov	r6, r3
                 data->sensor_id, data->pm1_0, data->pm2_5, data->pm4_0, data->pm10, data->temp_amb,
 80020fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020fc:	685b      	ldr	r3, [r3, #4]
        snprintf(csv_line, max_len, "%s,%d,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n", timestamp,
 80020fe:	4618      	mov	r0, r3
 8002100:	f7fe fa32 	bl	8000568 <__aeabi_f2d>
 8002104:	4682      	mov	sl, r0
 8002106:	468b      	mov	fp, r1
                 data->sensor_id, data->pm1_0, data->pm2_5, data->pm4_0, data->pm10, data->temp_amb,
 8002108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800210a:	689b      	ldr	r3, [r3, #8]
        snprintf(csv_line, max_len, "%s,%d,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n", timestamp,
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe fa2b 	bl	8000568 <__aeabi_f2d>
 8002112:	e9c7 0106 	strd	r0, r1, [r7, #24]
                 data->sensor_id, data->pm1_0, data->pm2_5, data->pm4_0, data->pm10, data->temp_amb,
 8002116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002118:	68db      	ldr	r3, [r3, #12]
        snprintf(csv_line, max_len, "%s,%d,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n", timestamp,
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe fa24 	bl	8000568 <__aeabi_f2d>
 8002120:	e9c7 0104 	strd	r0, r1, [r7, #16]
                 data->sensor_id, data->pm1_0, data->pm2_5, data->pm4_0, data->pm10, data->temp_amb,
 8002124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002126:	691b      	ldr	r3, [r3, #16]
        snprintf(csv_line, max_len, "%s,%d,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n", timestamp,
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe fa1d 	bl	8000568 <__aeabi_f2d>
 800212e:	e9c7 0102 	strd	r0, r1, [r7, #8]
                 data->sensor_id, data->pm1_0, data->pm2_5, data->pm4_0, data->pm10, data->temp_amb,
 8002132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002134:	695b      	ldr	r3, [r3, #20]
        snprintf(csv_line, max_len, "%s,%d,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n", timestamp,
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe fa16 	bl	8000568 <__aeabi_f2d>
 800213c:	e9c7 0100 	strd	r0, r1, [r7]
                 data->hum_amb, data->temp_cam, data->hum_cam);
 8002140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002142:	699b      	ldr	r3, [r3, #24]
        snprintf(csv_line, max_len, "%s,%d,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n", timestamp,
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe fa0f 	bl	8000568 <__aeabi_f2d>
 800214a:	4680      	mov	r8, r0
 800214c:	4689      	mov	r9, r1
                 data->hum_amb, data->temp_cam, data->hum_cam);
 800214e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002150:	69db      	ldr	r3, [r3, #28]
        snprintf(csv_line, max_len, "%s,%d,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n", timestamp,
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe fa08 	bl	8000568 <__aeabi_f2d>
 8002158:	4604      	mov	r4, r0
 800215a:	460d      	mov	r5, r1
                 data->hum_amb, data->temp_cam, data->hum_cam);
 800215c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800215e:	6a1b      	ldr	r3, [r3, #32]
        snprintf(csv_line, max_len, "%s,%d,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n", timestamp,
 8002160:	4618      	mov	r0, r3
 8002162:	f7fe fa01 	bl	8000568 <__aeabi_f2d>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800216e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8002172:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 8002176:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800217a:	ed97 7b00 	vldr	d7, [r7]
 800217e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8002182:	ed97 7b02 	vldr	d7, [r7, #8]
 8002186:	ed8d 7b08 	vstr	d7, [sp, #32]
 800218a:	ed97 7b04 	vldr	d7, [r7, #16]
 800218e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002192:	ed97 7b06 	vldr	d7, [r7, #24]
 8002196:	ed8d 7b04 	vstr	d7, [sp, #16]
 800219a:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800219e:	9600      	str	r6, [sp, #0]
 80021a0:	460b      	mov	r3, r1
 80021a2:	4a0c      	ldr	r2, [pc, #48]	; (80021d4 <format_csv_line+0xfc>)
 80021a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021a8:	f00b fd3a 	bl	800dc20 <sniprintf>
 80021ac:	6578      	str	r0, [r7, #84]	; 0x54

    return (written > 0 && (size_t)written < max_len);
 80021ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	dd05      	ble.n	80021c0 <format_csv_line+0xe8>
 80021b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d901      	bls.n	80021c0 <format_csv_line+0xe8>
 80021bc:	2301      	movs	r3, #1
 80021be:	e000      	b.n	80021c2 <format_csv_line+0xea>
 80021c0:	2300      	movs	r3, #0
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	b2db      	uxtb	r3, r3
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	375c      	adds	r7, #92	; 0x5c
 80021cc:	46bd      	mov	sp, r7
 80021ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021d2:	bf00      	nop
 80021d4:	08011a60 	.word	0x08011a60

080021d8 <data_logger_store_raw>:

    uart_print("Línea escrita correctamente en CSV\r\n");
    return true;
}

bool data_logger_store_raw(const ParticulateData * data) {
 80021d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021da:	f5ad 7d67 	sub.w	sp, sp, #924	; 0x39c
 80021de:	af06      	add	r7, sp, #24
 80021e0:	f507 7360 	add.w	r3, r7, #896	; 0x380
 80021e4:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80021e8:	6018      	str	r0, [r3, #0]
    if (!sd_mounted) {
 80021ea:	4b9e      	ldr	r3, [pc, #632]	; (8002464 <data_logger_store_raw+0x28c>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	f083 0301 	eor.w	r3, r3, #1
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d009      	beq.n	800220c <data_logger_store_raw+0x34>
        if (!data_logger_init())
 80021f8:	f7ff fe4a 	bl	8001e90 <data_logger_init>
 80021fc:	4603      	mov	r3, r0
 80021fe:	f083 0301 	eor.w	r3, r3, #1
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <data_logger_store_raw+0x34>
            return false;
 8002208:	2300      	movs	r3, #0
 800220a:	e126      	b.n	800245a <data_logger_store_raw+0x282>
    char filepath[128];
    char csv_line[CSV_LINE_BUFFER_SIZE];
    char dirpath[64];

    // Crear carpetas: /YYYY/MM/DD
    snprintf(dirpath, sizeof(dirpath), "/%04d", data->year);
 800220c:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8002210:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002218:	f507 700f 	add.w	r0, r7, #572	; 0x23c
 800221c:	4a92      	ldr	r2, [pc, #584]	; (8002468 <data_logger_store_raw+0x290>)
 800221e:	2140      	movs	r1, #64	; 0x40
 8002220:	f00b fcfe 	bl	800dc20 <sniprintf>
    f_mkdir(dirpath);
 8002224:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8002228:	4618      	mov	r0, r3
 800222a:	f00a fb5b 	bl	800c8e4 <f_mkdir>

    snprintf(dirpath, sizeof(dirpath), "/%04d/%02d", data->year, data->month);
 800222e:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8002232:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800223a:	461a      	mov	r2, r3
 800223c:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8002240:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800224a:	f507 700f 	add.w	r0, r7, #572	; 0x23c
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	4613      	mov	r3, r2
 8002252:	4a86      	ldr	r2, [pc, #536]	; (800246c <data_logger_store_raw+0x294>)
 8002254:	2140      	movs	r1, #64	; 0x40
 8002256:	f00b fce3 	bl	800dc20 <sniprintf>
    f_mkdir(dirpath);
 800225a:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 800225e:	4618      	mov	r0, r3
 8002260:	f00a fb40 	bl	800c8e4 <f_mkdir>

    snprintf(dirpath, sizeof(dirpath), "/%04d/%02d/%02d", data->year, data->month, data->day);
 8002264:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8002268:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002270:	4619      	mov	r1, r3
 8002272:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8002276:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002280:	461a      	mov	r2, r3
 8002282:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8002286:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002290:	f507 700f 	add.w	r0, r7, #572	; 0x23c
 8002294:	9301      	str	r3, [sp, #4]
 8002296:	9200      	str	r2, [sp, #0]
 8002298:	460b      	mov	r3, r1
 800229a:	4a75      	ldr	r2, [pc, #468]	; (8002470 <data_logger_store_raw+0x298>)
 800229c:	2140      	movs	r1, #64	; 0x40
 800229e:	f00b fcbf 	bl	800dc20 <sniprintf>
    f_mkdir(dirpath);
 80022a2:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80022a6:	4618      	mov	r0, r3
 80022a8:	f00a fb1c 	bl	800c8e4 <f_mkdir>

    // Crear nombre del archivo
    snprintf(filepath, sizeof(filepath), "/%04d/%02d/%02d/RAW_%02d_%04d%02d%02d.CSV", data->year,
 80022ac:	f507 7360 	add.w	r3, r7, #896	; 0x380
 80022b0:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80022b8:	469c      	mov	ip, r3
             data->month, data->day, data->sensor_id, data->year, data->month, data->day);
 80022ba:	f507 7360 	add.w	r3, r7, #896	; 0x380
 80022be:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    snprintf(filepath, sizeof(filepath), "/%04d/%02d/%02d/RAW_%02d_%04d%02d%02d.CSV", data->year,
 80022c8:	461a      	mov	r2, r3
             data->month, data->day, data->sensor_id, data->year, data->month, data->day);
 80022ca:	f507 7360 	add.w	r3, r7, #896	; 0x380
 80022ce:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    snprintf(filepath, sizeof(filepath), "/%04d/%02d/%02d/RAW_%02d_%04d%02d%02d.CSV", data->year,
 80022d8:	4619      	mov	r1, r3
             data->month, data->day, data->sensor_id, data->year, data->month, data->day);
 80022da:	f507 7360 	add.w	r3, r7, #896	; 0x380
 80022de:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	781b      	ldrb	r3, [r3, #0]
    snprintf(filepath, sizeof(filepath), "/%04d/%02d/%02d/RAW_%02d_%04d%02d%02d.CSV", data->year,
 80022e6:	461c      	mov	r4, r3
             data->month, data->day, data->sensor_id, data->year, data->month, data->day);
 80022e8:	f507 7360 	add.w	r3, r7, #896	; 0x380
 80022ec:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    snprintf(filepath, sizeof(filepath), "/%04d/%02d/%02d/RAW_%02d_%04d%02d%02d.CSV", data->year,
 80022f4:	461d      	mov	r5, r3
             data->month, data->day, data->sensor_id, data->year, data->month, data->day);
 80022f6:	f507 7360 	add.w	r3, r7, #896	; 0x380
 80022fa:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    snprintf(filepath, sizeof(filepath), "/%04d/%02d/%02d/RAW_%02d_%04d%02d%02d.CSV", data->year,
 8002304:	461e      	mov	r6, r3
             data->month, data->day, data->sensor_id, data->year, data->month, data->day);
 8002306:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800230a:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    snprintf(filepath, sizeof(filepath), "/%04d/%02d/%02d/RAW_%02d_%04d%02d%02d.CSV", data->year,
 8002314:	f507 703f 	add.w	r0, r7, #764	; 0x2fc
 8002318:	9305      	str	r3, [sp, #20]
 800231a:	9604      	str	r6, [sp, #16]
 800231c:	9503      	str	r5, [sp, #12]
 800231e:	9402      	str	r4, [sp, #8]
 8002320:	9101      	str	r1, [sp, #4]
 8002322:	9200      	str	r2, [sp, #0]
 8002324:	4663      	mov	r3, ip
 8002326:	4a53      	ldr	r2, [pc, #332]	; (8002474 <data_logger_store_raw+0x29c>)
 8002328:	2180      	movs	r1, #128	; 0x80
 800232a:	f00b fc79 	bl	800dc20 <sniprintf>

    // Abrir archivo
    FIL file;
    FRESULT res = f_open(&file, filepath, FA_OPEN_ALWAYS | FA_WRITE);
 800232e:	f507 713f 	add.w	r1, r7, #764	; 0x2fc
 8002332:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8002336:	2212      	movs	r2, #18
 8002338:	4618      	mov	r0, r3
 800233a:	f009 fd8d 	bl	800be58 <f_open>
 800233e:	4603      	mov	r3, r0
 8002340:	f887 337f 	strb.w	r3, [r7, #895]	; 0x37f
    if (res != FR_OK) {
 8002344:	f897 337f 	ldrb.w	r3, [r7, #895]	; 0x37f
 8002348:	2b00      	cmp	r3, #0
 800234a:	d009      	beq.n	8002360 <data_logger_store_raw+0x188>
        uart_print("No se pudo abrir archivo para escribir\r\n");
 800234c:	484a      	ldr	r0, [pc, #296]	; (8002478 <data_logger_store_raw+0x2a0>)
 800234e:	f002 faa5 	bl	800489c <uart_print>
        print_fatfs_error(res);
 8002352:	f897 337f 	ldrb.w	r3, [r7, #895]	; 0x37f
 8002356:	4618      	mov	r0, r3
 8002358:	f000 fece 	bl	80030f8 <print_fatfs_error>
        return false;
 800235c:	2300      	movs	r3, #0
 800235e:	e07c      	b.n	800245a <data_logger_store_raw+0x282>
    }

    // Verificar si el archivo está vacío para agregar encabezado
    if (f_size(&file) == 0) {
 8002360:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8002364:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d13e      	bne.n	80023ec <data_logger_store_raw+0x214>
                 "#  - Temp_amb y Temp_cam en °C\n"
                 "#  - Hum_amb y Hum_cam en %%RH\n"
                 "# Formato:\n"
                 "#  timestamp, sensor_id, pm1.0, pm2.5, pm4.0, pm10, temp_amb, hum_amb, temp_cam, "
                 "hum_cam\n",
                 data->sensor_id, sensor_metadata[data->sensor_id - 1].serial_number,
 800236e:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8002372:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	781b      	ldrb	r3, [r3, #0]
        snprintf(header, sizeof(header),
 800237a:	461c      	mov	r4, r3
                 data->sensor_id, sensor_metadata[data->sensor_id - 1].serial_number,
 800237c:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8002380:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	1e5a      	subs	r2, r3, #1
 800238a:	4613      	mov	r3, r2
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	4413      	add	r3, r2
 8002390:	015b      	lsls	r3, r3, #5
 8002392:	4413      	add	r3, r2
 8002394:	4a39      	ldr	r2, [pc, #228]	; (800247c <data_logger_store_raw+0x2a4>)
 8002396:	1899      	adds	r1, r3, r2
                 sensor_metadata[data->sensor_id - 1].location_name, LOCATION_COORDS);
 8002398:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800239c:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	1e5a      	subs	r2, r3, #1
 80023a6:	4613      	mov	r3, r2
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	4413      	add	r3, r2
 80023ac:	015b      	lsls	r3, r3, #5
 80023ae:	4413      	add	r3, r2
 80023b0:	3320      	adds	r3, #32
 80023b2:	4a32      	ldr	r2, [pc, #200]	; (800247c <data_logger_store_raw+0x2a4>)
 80023b4:	4413      	add	r3, r2
 80023b6:	3301      	adds	r3, #1
        snprintf(header, sizeof(header),
 80023b8:	f107 0008 	add.w	r0, r7, #8
 80023bc:	4a30      	ldr	r2, [pc, #192]	; (8002480 <data_logger_store_raw+0x2a8>)
 80023be:	9202      	str	r2, [sp, #8]
 80023c0:	9301      	str	r3, [sp, #4]
 80023c2:	9100      	str	r1, [sp, #0]
 80023c4:	4623      	mov	r3, r4
 80023c6:	4a2f      	ldr	r2, [pc, #188]	; (8002484 <data_logger_store_raw+0x2ac>)
 80023c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023cc:	f00b fc28 	bl	800dc20 <sniprintf>

        UINT bw_header;
        f_write(&file, header, strlen(header), &bw_header);
 80023d0:	f107 0308 	add.w	r3, r7, #8
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7fd ff0b 	bl	80001f0 <strlen>
 80023da:	4602      	mov	r2, r0
 80023dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023e0:	f107 0108 	add.w	r1, r7, #8
 80023e4:	f507 7003 	add.w	r0, r7, #524	; 0x20c
 80023e8:	f009 fedb 	bl	800c1a2 <f_write>
    }

    // Cerrar archivo después de escribir cabecera
    f_close(&file);
 80023ec:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80023f0:	4618      	mov	r0, r3
 80023f2:	f00a f8a2 	bl	800c53a <f_close>

    // Crear línea CSV
    if (!format_csv_line(data, csv_line, sizeof(csv_line))) {
 80023f6:	f507 711f 	add.w	r1, r7, #636	; 0x27c
 80023fa:	f507 7360 	add.w	r3, r7, #896	; 0x380
 80023fe:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8002402:	2280      	movs	r2, #128	; 0x80
 8002404:	6818      	ldr	r0, [r3, #0]
 8002406:	f7ff fe67 	bl	80020d8 <format_csv_line>
 800240a:	4603      	mov	r3, r0
 800240c:	f083 0301 	eor.w	r3, r3, #1
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d004      	beq.n	8002420 <data_logger_store_raw+0x248>
        uart_print("Error al generar línea CSV\r\n");
 8002416:	481c      	ldr	r0, [pc, #112]	; (8002488 <data_logger_store_raw+0x2b0>)
 8002418:	f002 fa40 	bl	800489c <uart_print>
        return false;
 800241c:	2300      	movs	r3, #0
 800241e:	e01c      	b.n	800245a <data_logger_store_raw+0x282>
    }

    // Escribir la línea CSV usando utilidad
    bool ok = microSD_appendLineAbsolute(filepath, csv_line);
 8002420:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 8002424:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8002428:	4611      	mov	r1, r2
 800242a:	4618      	mov	r0, r3
 800242c:	f000 fddc 	bl	8002fe8 <microSD_appendLineAbsolute>
 8002430:	4603      	mov	r3, r0
 8002432:	f887 337e 	strb.w	r3, [r7, #894]	; 0x37e

    if (ok) {
 8002436:	f897 337e 	ldrb.w	r3, [r7, #894]	; 0x37e
 800243a:	2b00      	cmp	r3, #0
 800243c:	d008      	beq.n	8002450 <data_logger_store_raw+0x278>
        uart_print("RAW escrito: ");
 800243e:	4813      	ldr	r0, [pc, #76]	; (800248c <data_logger_store_raw+0x2b4>)
 8002440:	f002 fa2c 	bl	800489c <uart_print>
        uart_print(csv_line);
 8002444:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8002448:	4618      	mov	r0, r3
 800244a:	f002 fa27 	bl	800489c <uart_print>
 800244e:	e002      	b.n	8002456 <data_logger_store_raw+0x27e>
    } else {
        uart_print("Fallo al escribir en RAW\r\n");
 8002450:	480f      	ldr	r0, [pc, #60]	; (8002490 <data_logger_store_raw+0x2b8>)
 8002452:	f002 fa23 	bl	800489c <uart_print>
    }

    return ok;
 8002456:	f897 337e 	ldrb.w	r3, [r7, #894]	; 0x37e
}
 800245a:	4618      	mov	r0, r3
 800245c:	f507 7761 	add.w	r7, r7, #900	; 0x384
 8002460:	46bd      	mov	sp, r7
 8002462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002464:	20002054 	.word	0x20002054
 8002468:	08011b08 	.word	0x08011b08
 800246c:	08011b10 	.word	0x08011b10
 8002470:	08011b1c 	.word	0x08011b1c
 8002474:	08011cac 	.word	0x08011cac
 8002478:	08011cd8 	.word	0x08011cd8
 800247c:	20000034 	.word	0x20000034
 8002480:	08011e1c 	.word	0x08011e1c
 8002484:	08011d04 	.word	0x08011d04
 8002488:	08011bbc 	.word	0x08011bbc
 800248c:	08011e30 	.word	0x08011e30
 8002490:	08011e40 	.word	0x08011e40

08002494 <build_iso8601_timestamp>:

void build_iso8601_timestamp(char * buffer, size_t len, const ParticulateData * data) {
 8002494:	b5b0      	push	{r4, r5, r7, lr}
 8002496:	b08a      	sub	sp, #40	; 0x28
 8002498:	af06      	add	r7, sp, #24
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
    snprintf(buffer, len, "%04u-%02u-%02uT%02u:%02u:%02uZ", data->year, data->month, data->day,
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80024a4:	461d      	mov	r5, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80024ac:	461a      	mov	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80024b4:	4619      	mov	r1, r3
             data->hour, data->min, data->sec);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    snprintf(buffer, len, "%04u-%02u-%02uT%02u:%02u:%02uZ", data->year, data->month, data->day,
 80024bc:	4618      	mov	r0, r3
             data->hour, data->min, data->sec);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    snprintf(buffer, len, "%04u-%02u-%02uT%02u:%02u:%02uZ", data->year, data->month, data->day,
 80024c4:	461c      	mov	r4, r3
             data->hour, data->min, data->sec);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    snprintf(buffer, len, "%04u-%02u-%02uT%02u:%02u:%02uZ", data->year, data->month, data->day,
 80024cc:	9304      	str	r3, [sp, #16]
 80024ce:	9403      	str	r4, [sp, #12]
 80024d0:	9002      	str	r0, [sp, #8]
 80024d2:	9101      	str	r1, [sp, #4]
 80024d4:	9200      	str	r2, [sp, #0]
 80024d6:	462b      	mov	r3, r5
 80024d8:	4a04      	ldr	r2, [pc, #16]	; (80024ec <build_iso8601_timestamp+0x58>)
 80024da:	68b9      	ldr	r1, [r7, #8]
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f00b fb9f 	bl	800dc20 <sniprintf>
}
 80024e2:	bf00      	nop
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bdb0      	pop	{r4, r5, r7, pc}
 80024ea:	bf00      	nop
 80024ec:	08011e5c 	.word	0x08011e5c

080024f0 <SD_disk_initialize>:
/* Exported functions --------------------------------------------------------*/
/*--------------------------------------------------------------------------
 user_diskio.c functions
 ---------------------------------------------------------------------------*/
/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) {
 80024f0:	b590      	push	{r4, r7, lr}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	71fb      	strb	r3, [r7, #7]
    uint8_t n, type, ocr[4];

    /* single drive, drv should be 0 */
    if (drv)
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <SD_disk_initialize+0x14>
        return STA_NOINIT;
 8002500:	2301      	movs	r3, #1
 8002502:	e0d5      	b.n	80026b0 <SD_disk_initialize+0x1c0>

    /* no disk */
    if (Stat & STA_NODISK)
 8002504:	4b6c      	ldr	r3, [pc, #432]	; (80026b8 <SD_disk_initialize+0x1c8>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <SD_disk_initialize+0x2a>
        return Stat;
 8002512:	4b69      	ldr	r3, [pc, #420]	; (80026b8 <SD_disk_initialize+0x1c8>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	b2db      	uxtb	r3, r3
 8002518:	e0ca      	b.n	80026b0 <SD_disk_initialize+0x1c0>

    /* power on */
    SD_PowerOn();
 800251a:	f000 fb81 	bl	8002c20 <SD_PowerOn>

    /* slave select */
    SELECT();
 800251e:	f000 fb07 	bl	8002b30 <SELECT>

    /* check disk type */
    type = 0;
 8002522:	2300      	movs	r3, #0
 8002524:	73bb      	strb	r3, [r7, #14]

    /* send GO_IDLE_STATE command */
    if (SD_SendCmd(CMD0, 0) == 1) {
 8002526:	2100      	movs	r1, #0
 8002528:	2040      	movs	r0, #64	; 0x40
 800252a:	f000 fc69 	bl	8002e00 <SD_SendCmd>
 800252e:	4603      	mov	r3, r0
 8002530:	2b01      	cmp	r3, #1
 8002532:	f040 80a5 	bne.w	8002680 <SD_disk_initialize+0x190>
        /* timeout 1 sec */
        Timer1 = 100;
 8002536:	4b61      	ldr	r3, [pc, #388]	; (80026bc <SD_disk_initialize+0x1cc>)
 8002538:	2264      	movs	r2, #100	; 0x64
 800253a:	701a      	strb	r2, [r3, #0]

        /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
        if (SD_SendCmd(CMD8, 0x1AA) == 1) {
 800253c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002540:	2048      	movs	r0, #72	; 0x48
 8002542:	f000 fc5d 	bl	8002e00 <SD_SendCmd>
 8002546:	4603      	mov	r3, r0
 8002548:	2b01      	cmp	r3, #1
 800254a:	d158      	bne.n	80025fe <SD_disk_initialize+0x10e>
            /* operation condition register */
            for (n = 0; n < 4; n++)
 800254c:	2300      	movs	r3, #0
 800254e:	73fb      	strb	r3, [r7, #15]
 8002550:	e00c      	b.n	800256c <SD_disk_initialize+0x7c>
                ocr[n] = SPI_RxByte();
 8002552:	7bfc      	ldrb	r4, [r7, #15]
 8002554:	f000 fb1c 	bl	8002b90 <SPI_RxByte>
 8002558:	4603      	mov	r3, r0
 800255a:	461a      	mov	r2, r3
 800255c:	f104 0310 	add.w	r3, r4, #16
 8002560:	443b      	add	r3, r7
 8002562:	f803 2c08 	strb.w	r2, [r3, #-8]
            for (n = 0; n < 4; n++)
 8002566:	7bfb      	ldrb	r3, [r7, #15]
 8002568:	3301      	adds	r3, #1
 800256a:	73fb      	strb	r3, [r7, #15]
 800256c:	7bfb      	ldrb	r3, [r7, #15]
 800256e:	2b03      	cmp	r3, #3
 8002570:	d9ef      	bls.n	8002552 <SD_disk_initialize+0x62>

            if (ocr[2] == 0x01 && ocr[3] == 0xAA) {
 8002572:	7abb      	ldrb	r3, [r7, #10]
 8002574:	2b01      	cmp	r3, #1
 8002576:	f040 8083 	bne.w	8002680 <SD_disk_initialize+0x190>
 800257a:	7afb      	ldrb	r3, [r7, #11]
 800257c:	2baa      	cmp	r3, #170	; 0xaa
 800257e:	d17f      	bne.n	8002680 <SD_disk_initialize+0x190>
                /* voltage range 2.7-3.6V */
                do {
                    if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8002580:	2100      	movs	r1, #0
 8002582:	2077      	movs	r0, #119	; 0x77
 8002584:	f000 fc3c 	bl	8002e00 <SD_SendCmd>
 8002588:	4603      	mov	r3, r0
 800258a:	2b01      	cmp	r3, #1
 800258c:	d807      	bhi.n	800259e <SD_disk_initialize+0xae>
 800258e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002592:	2069      	movs	r0, #105	; 0x69
 8002594:	f000 fc34 	bl	8002e00 <SD_SendCmd>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d005      	beq.n	80025aa <SD_disk_initialize+0xba>
                        break; /* ACMD41 with HCS bit */
                } while (Timer1);
 800259e:	4b47      	ldr	r3, [pc, #284]	; (80026bc <SD_disk_initialize+0x1cc>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1eb      	bne.n	8002580 <SD_disk_initialize+0x90>
 80025a8:	e000      	b.n	80025ac <SD_disk_initialize+0xbc>
                        break; /* ACMD41 with HCS bit */
 80025aa:	bf00      	nop

                if (Timer1 && SD_SendCmd(CMD58, 0) == 0) {
 80025ac:	4b43      	ldr	r3, [pc, #268]	; (80026bc <SD_disk_initialize+0x1cc>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d064      	beq.n	8002680 <SD_disk_initialize+0x190>
 80025b6:	2100      	movs	r1, #0
 80025b8:	207a      	movs	r0, #122	; 0x7a
 80025ba:	f000 fc21 	bl	8002e00 <SD_SendCmd>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d15d      	bne.n	8002680 <SD_disk_initialize+0x190>
                    /* Check CCS bit */
                    for (n = 0; n < 4; n++)
 80025c4:	2300      	movs	r3, #0
 80025c6:	73fb      	strb	r3, [r7, #15]
 80025c8:	e00c      	b.n	80025e4 <SD_disk_initialize+0xf4>
                        ocr[n] = SPI_RxByte();
 80025ca:	7bfc      	ldrb	r4, [r7, #15]
 80025cc:	f000 fae0 	bl	8002b90 <SPI_RxByte>
 80025d0:	4603      	mov	r3, r0
 80025d2:	461a      	mov	r2, r3
 80025d4:	f104 0310 	add.w	r3, r4, #16
 80025d8:	443b      	add	r3, r7
 80025da:	f803 2c08 	strb.w	r2, [r3, #-8]
                    for (n = 0; n < 4; n++)
 80025de:	7bfb      	ldrb	r3, [r7, #15]
 80025e0:	3301      	adds	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
 80025e4:	7bfb      	ldrb	r3, [r7, #15]
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d9ef      	bls.n	80025ca <SD_disk_initialize+0xda>
                    type = (ocr[0] & 0x40) ? 6 : 2;
 80025ea:	7a3b      	ldrb	r3, [r7, #8]
 80025ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <SD_disk_initialize+0x108>
 80025f4:	2306      	movs	r3, #6
 80025f6:	e000      	b.n	80025fa <SD_disk_initialize+0x10a>
 80025f8:	2302      	movs	r3, #2
 80025fa:	73bb      	strb	r3, [r7, #14]
 80025fc:	e040      	b.n	8002680 <SD_disk_initialize+0x190>
                }
            }
        } else {
            /* SDC Ver1 or MMC */
            type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80025fe:	2100      	movs	r1, #0
 8002600:	2077      	movs	r0, #119	; 0x77
 8002602:	f000 fbfd 	bl	8002e00 <SD_SendCmd>
 8002606:	4603      	mov	r3, r0
 8002608:	2b01      	cmp	r3, #1
 800260a:	d808      	bhi.n	800261e <SD_disk_initialize+0x12e>
 800260c:	2100      	movs	r1, #0
 800260e:	2069      	movs	r0, #105	; 0x69
 8002610:	f000 fbf6 	bl	8002e00 <SD_SendCmd>
 8002614:	4603      	mov	r3, r0
 8002616:	2b01      	cmp	r3, #1
 8002618:	d801      	bhi.n	800261e <SD_disk_initialize+0x12e>
 800261a:	2302      	movs	r3, #2
 800261c:	e000      	b.n	8002620 <SD_disk_initialize+0x130>
 800261e:	2301      	movs	r3, #1
 8002620:	73bb      	strb	r3, [r7, #14]

            do {
                if (type == 2) {
 8002622:	7bbb      	ldrb	r3, [r7, #14]
 8002624:	2b02      	cmp	r3, #2
 8002626:	d10e      	bne.n	8002646 <SD_disk_initialize+0x156>
                    if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8002628:	2100      	movs	r1, #0
 800262a:	2077      	movs	r0, #119	; 0x77
 800262c:	f000 fbe8 	bl	8002e00 <SD_SendCmd>
 8002630:	4603      	mov	r3, r0
 8002632:	2b01      	cmp	r3, #1
 8002634:	d80e      	bhi.n	8002654 <SD_disk_initialize+0x164>
 8002636:	2100      	movs	r1, #0
 8002638:	2069      	movs	r0, #105	; 0x69
 800263a:	f000 fbe1 	bl	8002e00 <SD_SendCmd>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d107      	bne.n	8002654 <SD_disk_initialize+0x164>
                        break; /* ACMD41 */
 8002644:	e00d      	b.n	8002662 <SD_disk_initialize+0x172>
                } else {
                    if (SD_SendCmd(CMD1, 0) == 0)
 8002646:	2100      	movs	r1, #0
 8002648:	2041      	movs	r0, #65	; 0x41
 800264a:	f000 fbd9 	bl	8002e00 <SD_SendCmd>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <SD_disk_initialize+0x170>
                        break; /* CMD1 */
                }
            } while (Timer1);
 8002654:	4b19      	ldr	r3, [pc, #100]	; (80026bc <SD_disk_initialize+0x1cc>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1e1      	bne.n	8002622 <SD_disk_initialize+0x132>
 800265e:	e000      	b.n	8002662 <SD_disk_initialize+0x172>
                        break; /* CMD1 */
 8002660:	bf00      	nop
            /* SET_BLOCKLEN */
            if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8002662:	4b16      	ldr	r3, [pc, #88]	; (80026bc <SD_disk_initialize+0x1cc>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	d007      	beq.n	800267c <SD_disk_initialize+0x18c>
 800266c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002670:	2050      	movs	r0, #80	; 0x50
 8002672:	f000 fbc5 	bl	8002e00 <SD_SendCmd>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <SD_disk_initialize+0x190>
                type = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	73bb      	strb	r3, [r7, #14]
        }
    }

    CardType = type;
 8002680:	4a0f      	ldr	r2, [pc, #60]	; (80026c0 <SD_disk_initialize+0x1d0>)
 8002682:	7bbb      	ldrb	r3, [r7, #14]
 8002684:	7013      	strb	r3, [r2, #0]

    /* Idle */
    DESELECT();
 8002686:	f000 fa5f 	bl	8002b48 <DESELECT>
    SPI_RxByte();
 800268a:	f000 fa81 	bl	8002b90 <SPI_RxByte>

    /* Clear STA_NOINIT */
    if (type)
 800268e:	7bbb      	ldrb	r3, [r7, #14]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d008      	beq.n	80026a6 <SD_disk_initialize+0x1b6>
        Stat &= ~STA_NOINIT;
 8002694:	4b08      	ldr	r3, [pc, #32]	; (80026b8 <SD_disk_initialize+0x1c8>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	f023 0301 	bic.w	r3, r3, #1
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <SD_disk_initialize+0x1c8>)
 80026a2:	701a      	strb	r2, [r3, #0]
 80026a4:	e001      	b.n	80026aa <SD_disk_initialize+0x1ba>
    else
        SD_PowerOff(); /* Initialization failed */
 80026a6:	f000 fb07 	bl	8002cb8 <SD_PowerOff>

    return Stat;
 80026aa:	4b03      	ldr	r3, [pc, #12]	; (80026b8 <SD_disk_initialize+0x1c8>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	b2db      	uxtb	r3, r3
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd90      	pop	{r4, r7, pc}
 80026b8:	20000030 	.word	0x20000030
 80026bc:	20002436 	.word	0x20002436
 80026c0:	2000222c 	.word	0x2000222c

080026c4 <SD_disk_status>:
//-------------------------------------------------------------

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) {
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
    if (drv)
 80026ce:	79fb      	ldrb	r3, [r7, #7]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <SD_disk_status+0x14>
        return STA_NOINIT;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e002      	b.n	80026de <SD_disk_status+0x1a>

    return Stat;
 80026d8:	4b04      	ldr	r3, [pc, #16]	; (80026ec <SD_disk_status+0x28>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	b2db      	uxtb	r3, r3
}
 80026de:	4618      	mov	r0, r3
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	20000030 	.word	0x20000030

080026f0 <SD_disk_read>:
//-------------------------------------------------------------

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE * buff, DWORD sector, UINT count) {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	607a      	str	r2, [r7, #4]
 80026fa:	603b      	str	r3, [r7, #0]
 80026fc:	4603      	mov	r3, r0
 80026fe:	73fb      	strb	r3, [r7, #15]
    /* pdrv should be 0 */
    if (pdrv || !count)
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d102      	bne.n	800270c <SD_disk_read+0x1c>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <SD_disk_read+0x20>
        return RES_PARERR;
 800270c:	2304      	movs	r3, #4
 800270e:	e051      	b.n	80027b4 <SD_disk_read+0xc4>
    /* no disk */
    if (Stat & STA_NOINIT)
 8002710:	4b2a      	ldr	r3, [pc, #168]	; (80027bc <SD_disk_read+0xcc>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	b2db      	uxtb	r3, r3
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <SD_disk_read+0x32>
        return RES_NOTRDY;
 800271e:	2303      	movs	r3, #3
 8002720:	e048      	b.n	80027b4 <SD_disk_read+0xc4>
    /* convert to byte address */
    if (!(CardType & 4))
 8002722:	4b27      	ldr	r3, [pc, #156]	; (80027c0 <SD_disk_read+0xd0>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	f003 0304 	and.w	r3, r3, #4
 800272a:	2b00      	cmp	r3, #0
 800272c:	d102      	bne.n	8002734 <SD_disk_read+0x44>
        sector *= 512;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	025b      	lsls	r3, r3, #9
 8002732:	607b      	str	r3, [r7, #4]

    SELECT();
 8002734:	f000 f9fc 	bl	8002b30 <SELECT>

    if (count == 1) {
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d111      	bne.n	8002762 <SD_disk_read+0x72>
        /* READ_SINGLE_BLOCK */
        if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	2051      	movs	r0, #81	; 0x51
 8002742:	f000 fb5d 	bl	8002e00 <SD_SendCmd>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d129      	bne.n	80027a0 <SD_disk_read+0xb0>
 800274c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002750:	68b8      	ldr	r0, [r7, #8]
 8002752:	f000 fac9 	bl	8002ce8 <SD_RxDataBlock>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d021      	beq.n	80027a0 <SD_disk_read+0xb0>
            count = 0;
 800275c:	2300      	movs	r3, #0
 800275e:	603b      	str	r3, [r7, #0]
 8002760:	e01e      	b.n	80027a0 <SD_disk_read+0xb0>
    } else {
        /* READ_MULTIPLE_BLOCK */
        if (SD_SendCmd(CMD18, sector) == 0) {
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	2052      	movs	r0, #82	; 0x52
 8002766:	f000 fb4b 	bl	8002e00 <SD_SendCmd>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d117      	bne.n	80027a0 <SD_disk_read+0xb0>
            do {
                if (!SD_RxDataBlock(buff, 512))
 8002770:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002774:	68b8      	ldr	r0, [r7, #8]
 8002776:	f000 fab7 	bl	8002ce8 <SD_RxDataBlock>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00a      	beq.n	8002796 <SD_disk_read+0xa6>
                    break;

                buff += 512;
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002786:	60bb      	str	r3, [r7, #8]
            } while (--count);
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	3b01      	subs	r3, #1
 800278c:	603b      	str	r3, [r7, #0]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1ed      	bne.n	8002770 <SD_disk_read+0x80>
 8002794:	e000      	b.n	8002798 <SD_disk_read+0xa8>
                    break;
 8002796:	bf00      	nop

            /* STOP_TRANSMISSION */
            SD_SendCmd(CMD12, 0);
 8002798:	2100      	movs	r1, #0
 800279a:	204c      	movs	r0, #76	; 0x4c
 800279c:	f000 fb30 	bl	8002e00 <SD_SendCmd>
        }
    }
    /* Idle */
    DESELECT();
 80027a0:	f000 f9d2 	bl	8002b48 <DESELECT>
    SPI_RxByte();
 80027a4:	f000 f9f4 	bl	8002b90 <SPI_RxByte>

    return count ? RES_ERROR : RES_OK;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	bf14      	ite	ne
 80027ae:	2301      	movne	r3, #1
 80027b0:	2300      	moveq	r3, #0
 80027b2:	b2db      	uxtb	r3, r3
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	20000030 	.word	0x20000030
 80027c0:	2000222c 	.word	0x2000222c

080027c4 <SD_disk_write>:
//-------------------------------------------------------------

/* write sector */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE * buff, DWORD sector, UINT count) {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60b9      	str	r1, [r7, #8]
 80027cc:	607a      	str	r2, [r7, #4]
 80027ce:	603b      	str	r3, [r7, #0]
 80027d0:	4603      	mov	r3, r0
 80027d2:	73fb      	strb	r3, [r7, #15]
    /* pdrv should be 0 */
    if (pdrv || !count)
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d102      	bne.n	80027e0 <SD_disk_write+0x1c>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <SD_disk_write+0x20>
        return RES_PARERR;
 80027e0:	2304      	movs	r3, #4
 80027e2:	e06b      	b.n	80028bc <SD_disk_write+0xf8>
    /* no disk */
    if (Stat & STA_NOINIT)
 80027e4:	4b37      	ldr	r3, [pc, #220]	; (80028c4 <SD_disk_write+0x100>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <SD_disk_write+0x32>
        return RES_NOTRDY;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e062      	b.n	80028bc <SD_disk_write+0xf8>
    /* write protection */
    if (Stat & STA_PROTECT)
 80027f6:	4b33      	ldr	r3, [pc, #204]	; (80028c4 <SD_disk_write+0x100>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <SD_disk_write+0x44>
        return RES_WRPRT;
 8002804:	2302      	movs	r3, #2
 8002806:	e059      	b.n	80028bc <SD_disk_write+0xf8>
    /* convert to byte address */
    if (!(CardType & 4))
 8002808:	4b2f      	ldr	r3, [pc, #188]	; (80028c8 <SD_disk_write+0x104>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	d102      	bne.n	800281a <SD_disk_write+0x56>
        sector *= 512;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	025b      	lsls	r3, r3, #9
 8002818:	607b      	str	r3, [r7, #4]

    SELECT();
 800281a:	f000 f989 	bl	8002b30 <SELECT>

    if (count == 1) {
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d110      	bne.n	8002846 <SD_disk_write+0x82>
        /* WRITE_BLOCK */
        if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002824:	6879      	ldr	r1, [r7, #4]
 8002826:	2058      	movs	r0, #88	; 0x58
 8002828:	f000 faea 	bl	8002e00 <SD_SendCmd>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d13a      	bne.n	80028a8 <SD_disk_write+0xe4>
 8002832:	21fe      	movs	r1, #254	; 0xfe
 8002834:	68b8      	ldr	r0, [r7, #8]
 8002836:	f000 fa8d 	bl	8002d54 <SD_TxDataBlock>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d033      	beq.n	80028a8 <SD_disk_write+0xe4>
            count = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	603b      	str	r3, [r7, #0]
 8002844:	e030      	b.n	80028a8 <SD_disk_write+0xe4>
    } else {
        /* WRITE_MULTIPLE_BLOCK */
        if (CardType & 2) {
 8002846:	4b20      	ldr	r3, [pc, #128]	; (80028c8 <SD_disk_write+0x104>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d007      	beq.n	8002862 <SD_disk_write+0x9e>
            SD_SendCmd(CMD55, 0);
 8002852:	2100      	movs	r1, #0
 8002854:	2077      	movs	r0, #119	; 0x77
 8002856:	f000 fad3 	bl	8002e00 <SD_SendCmd>
            SD_SendCmd(CMD23, count); /* ACMD23 */
 800285a:	6839      	ldr	r1, [r7, #0]
 800285c:	2057      	movs	r0, #87	; 0x57
 800285e:	f000 facf 	bl	8002e00 <SD_SendCmd>
        }

        if (SD_SendCmd(CMD25, sector) == 0) {
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	2059      	movs	r0, #89	; 0x59
 8002866:	f000 facb 	bl	8002e00 <SD_SendCmd>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d11b      	bne.n	80028a8 <SD_disk_write+0xe4>
            do {
                if (!SD_TxDataBlock(buff, 0xFC))
 8002870:	21fc      	movs	r1, #252	; 0xfc
 8002872:	68b8      	ldr	r0, [r7, #8]
 8002874:	f000 fa6e 	bl	8002d54 <SD_TxDataBlock>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00a      	beq.n	8002894 <SD_disk_write+0xd0>
                    break;

                buff += 512;
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002884:	60bb      	str	r3, [r7, #8]
            } while (--count);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	3b01      	subs	r3, #1
 800288a:	603b      	str	r3, [r7, #0]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1ee      	bne.n	8002870 <SD_disk_write+0xac>
 8002892:	e000      	b.n	8002896 <SD_disk_write+0xd2>
                    break;
 8002894:	bf00      	nop
            /* STOP_TRAN token */
            if (!SD_TxDataBlock(0, 0xFD))
 8002896:	21fd      	movs	r1, #253	; 0xfd
 8002898:	2000      	movs	r0, #0
 800289a:	f000 fa5b 	bl	8002d54 <SD_TxDataBlock>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <SD_disk_write+0xe4>
                count = 1;
 80028a4:	2301      	movs	r3, #1
 80028a6:	603b      	str	r3, [r7, #0]
        }
    }
    /* Idle */
    DESELECT();
 80028a8:	f000 f94e 	bl	8002b48 <DESELECT>
    SPI_RxByte();
 80028ac:	f000 f970 	bl	8002b90 <SPI_RxByte>

    return count ? RES_ERROR : RES_OK;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	bf14      	ite	ne
 80028b6:	2301      	movne	r3, #1
 80028b8:	2300      	moveq	r3, #0
 80028ba:	b2db      	uxtb	r3, r3
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	20000030 	.word	0x20000030
 80028c8:	2000222c 	.word	0x2000222c

080028cc <SD_disk_ioctl>:
//-------------------------------------------------------------
#endif /* _READONLY */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void * buff) {
 80028cc:	b590      	push	{r4, r7, lr}
 80028ce:	b08b      	sub	sp, #44	; 0x2c
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	603a      	str	r2, [r7, #0]
 80028d6:	71fb      	strb	r3, [r7, #7]
 80028d8:	460b      	mov	r3, r1
 80028da:	71bb      	strb	r3, [r7, #6]
    DRESULT res;
    BYTE n, csd[16], *ptr = buff;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	623b      	str	r3, [r7, #32]
    WORD csize;
    /* pdrv should be 0 */
    if (drv)
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <SD_disk_ioctl+0x1e>
        return RES_PARERR;
 80028e6:	2304      	movs	r3, #4
 80028e8:	e11b      	b.n	8002b22 <SD_disk_ioctl+0x256>

    res = RES_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (ctrl == CTRL_POWER) {
 80028f0:	79bb      	ldrb	r3, [r7, #6]
 80028f2:	2b05      	cmp	r3, #5
 80028f4:	d129      	bne.n	800294a <SD_disk_ioctl+0x7e>
        switch (*ptr) {
 80028f6:	6a3b      	ldr	r3, [r7, #32]
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d017      	beq.n	800292e <SD_disk_ioctl+0x62>
 80028fe:	2b02      	cmp	r3, #2
 8002900:	dc1f      	bgt.n	8002942 <SD_disk_ioctl+0x76>
 8002902:	2b00      	cmp	r3, #0
 8002904:	d002      	beq.n	800290c <SD_disk_ioctl+0x40>
 8002906:	2b01      	cmp	r3, #1
 8002908:	d00b      	beq.n	8002922 <SD_disk_ioctl+0x56>
 800290a:	e01a      	b.n	8002942 <SD_disk_ioctl+0x76>
        case 0:
            if (SD_CheckPower())
 800290c:	f000 f9e0 	bl	8002cd0 <SD_CheckPower>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <SD_disk_ioctl+0x4e>
                SD_PowerOff(); /* Power Off */
 8002916:	f000 f9cf 	bl	8002cb8 <SD_PowerOff>
            res = RES_OK;
 800291a:	2300      	movs	r3, #0
 800291c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8002920:	e0fd      	b.n	8002b1e <SD_disk_ioctl+0x252>
        case 1:
            SD_PowerOn(); /* Power On */
 8002922:	f000 f97d 	bl	8002c20 <SD_PowerOn>
            res = RES_OK;
 8002926:	2300      	movs	r3, #0
 8002928:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800292c:	e0f7      	b.n	8002b1e <SD_disk_ioctl+0x252>
        case 2:
            *(ptr + 1) = (BYTE)SD_CheckPower();
 800292e:	6a3b      	ldr	r3, [r7, #32]
 8002930:	1c5c      	adds	r4, r3, #1
 8002932:	f000 f9cd 	bl	8002cd0 <SD_CheckPower>
 8002936:	4603      	mov	r3, r0
 8002938:	7023      	strb	r3, [r4, #0]
            res = RES_OK; /* Power Check */
 800293a:	2300      	movs	r3, #0
 800293c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8002940:	e0ed      	b.n	8002b1e <SD_disk_ioctl+0x252>
        default:
            res = RES_PARERR;
 8002942:	2304      	movs	r3, #4
 8002944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002948:	e0e9      	b.n	8002b1e <SD_disk_ioctl+0x252>
        }
    } else {
        /* no disk */
        if (Stat & STA_NOINIT)
 800294a:	4b78      	ldr	r3, [pc, #480]	; (8002b2c <SD_disk_ioctl+0x260>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	b2db      	uxtb	r3, r3
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <SD_disk_ioctl+0x90>
            return RES_NOTRDY;
 8002958:	2303      	movs	r3, #3
 800295a:	e0e2      	b.n	8002b22 <SD_disk_ioctl+0x256>

        SELECT();
 800295c:	f000 f8e8 	bl	8002b30 <SELECT>

        switch (ctrl) {
 8002960:	79bb      	ldrb	r3, [r7, #6]
 8002962:	2b0d      	cmp	r3, #13
 8002964:	f200 80cc 	bhi.w	8002b00 <SD_disk_ioctl+0x234>
 8002968:	a201      	add	r2, pc, #4	; (adr r2, 8002970 <SD_disk_ioctl+0xa4>)
 800296a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800296e:	bf00      	nop
 8002970:	08002a6b 	.word	0x08002a6b
 8002974:	080029a9 	.word	0x080029a9
 8002978:	08002a5b 	.word	0x08002a5b
 800297c:	08002b01 	.word	0x08002b01
 8002980:	08002b01 	.word	0x08002b01
 8002984:	08002b01 	.word	0x08002b01
 8002988:	08002b01 	.word	0x08002b01
 800298c:	08002b01 	.word	0x08002b01
 8002990:	08002b01 	.word	0x08002b01
 8002994:	08002b01 	.word	0x08002b01
 8002998:	08002b01 	.word	0x08002b01
 800299c:	08002a7d 	.word	0x08002a7d
 80029a0:	08002aa1 	.word	0x08002aa1
 80029a4:	08002ac5 	.word	0x08002ac5
        case GET_SECTOR_COUNT:
            /* SEND_CSD */
            if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) {
 80029a8:	2100      	movs	r1, #0
 80029aa:	2049      	movs	r0, #73	; 0x49
 80029ac:	f000 fa28 	bl	8002e00 <SD_SendCmd>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f040 80a8 	bne.w	8002b08 <SD_disk_ioctl+0x23c>
 80029b8:	f107 030c 	add.w	r3, r7, #12
 80029bc:	2110      	movs	r1, #16
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 f992 	bl	8002ce8 <SD_RxDataBlock>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f000 809e 	beq.w	8002b08 <SD_disk_ioctl+0x23c>
                if ((csd[0] >> 6) == 1) {
 80029cc:	7b3b      	ldrb	r3, [r7, #12]
 80029ce:	099b      	lsrs	r3, r3, #6
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d10e      	bne.n	80029f4 <SD_disk_ioctl+0x128>
                    /* SDC ver 2.00 */
                    csize = csd[9] + ((WORD)csd[8] << 8) + 1;
 80029d6:	7d7b      	ldrb	r3, [r7, #21]
 80029d8:	b29a      	uxth	r2, r3
 80029da:	7d3b      	ldrb	r3, [r7, #20]
 80029dc:	b29b      	uxth	r3, r3
 80029de:	021b      	lsls	r3, r3, #8
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	4413      	add	r3, r2
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	3301      	adds	r3, #1
 80029e8:	83fb      	strh	r3, [r7, #30]
                    *(DWORD *)buff = (DWORD)csize << 10;
 80029ea:	8bfb      	ldrh	r3, [r7, #30]
 80029ec:	029a      	lsls	r2, r3, #10
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	e02e      	b.n	8002a52 <SD_disk_ioctl+0x186>
                } else {
                    /* MMC or SDC ver 1.XX */
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80029f4:	7c7b      	ldrb	r3, [r7, #17]
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	b2da      	uxtb	r2, r3
 80029fc:	7dbb      	ldrb	r3, [r7, #22]
 80029fe:	09db      	lsrs	r3, r3, #7
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	4413      	add	r3, r2
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	7d7b      	ldrb	r3, [r7, #21]
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	f003 0306 	and.w	r3, r3, #6
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	4413      	add	r3, r2
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	3302      	adds	r3, #2
 8002a18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8002a1c:	7d3b      	ldrb	r3, [r7, #20]
 8002a1e:	099b      	lsrs	r3, r3, #6
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	7cfb      	ldrb	r3, [r7, #19]
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	7cbb      	ldrb	r3, [r7, #18]
 8002a32:	029b      	lsls	r3, r3, #10
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	3301      	adds	r3, #1
 8002a42:	83fb      	strh	r3, [r7, #30]
                    *(DWORD *)buff = (DWORD)csize << (n - 9);
 8002a44:	8bfa      	ldrh	r2, [r7, #30]
 8002a46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002a4a:	3b09      	subs	r3, #9
 8002a4c:	409a      	lsls	r2, r3
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	601a      	str	r2, [r3, #0]
                }

                res = RES_OK;
 8002a52:	2300      	movs	r3, #0
 8002a54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8002a58:	e056      	b.n	8002b08 <SD_disk_ioctl+0x23c>

        case GET_SECTOR_SIZE:
            *(WORD *)buff = 512;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a60:	801a      	strh	r2, [r3, #0]
            res = RES_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8002a68:	e055      	b.n	8002b16 <SD_disk_ioctl+0x24a>

        case CTRL_SYNC:
            if (SD_ReadyWait() == 0xFF)
 8002a6a:	f000 f8bd 	bl	8002be8 <SD_ReadyWait>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2bff      	cmp	r3, #255	; 0xff
 8002a72:	d14b      	bne.n	8002b0c <SD_disk_ioctl+0x240>
                res = RES_OK;
 8002a74:	2300      	movs	r3, #0
 8002a76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8002a7a:	e047      	b.n	8002b0c <SD_disk_ioctl+0x240>

        case MMC_GET_CSD:
            /* SEND_CSD */
            if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	2049      	movs	r0, #73	; 0x49
 8002a80:	f000 f9be 	bl	8002e00 <SD_SendCmd>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d142      	bne.n	8002b10 <SD_disk_ioctl+0x244>
 8002a8a:	2110      	movs	r1, #16
 8002a8c:	6a38      	ldr	r0, [r7, #32]
 8002a8e:	f000 f92b 	bl	8002ce8 <SD_RxDataBlock>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d03b      	beq.n	8002b10 <SD_disk_ioctl+0x244>
                res = RES_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8002a9e:	e037      	b.n	8002b10 <SD_disk_ioctl+0x244>

        case MMC_GET_CID:
            /* SEND_CID */
            if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	204a      	movs	r0, #74	; 0x4a
 8002aa4:	f000 f9ac 	bl	8002e00 <SD_SendCmd>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d132      	bne.n	8002b14 <SD_disk_ioctl+0x248>
 8002aae:	2110      	movs	r1, #16
 8002ab0:	6a38      	ldr	r0, [r7, #32]
 8002ab2:	f000 f919 	bl	8002ce8 <SD_RxDataBlock>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d02b      	beq.n	8002b14 <SD_disk_ioctl+0x248>
                res = RES_OK;
 8002abc:	2300      	movs	r3, #0
 8002abe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8002ac2:	e027      	b.n	8002b14 <SD_disk_ioctl+0x248>

        case MMC_GET_OCR:
            /* READ_OCR */
            if (SD_SendCmd(CMD58, 0) == 0) {
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	207a      	movs	r0, #122	; 0x7a
 8002ac8:	f000 f99a 	bl	8002e00 <SD_SendCmd>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d116      	bne.n	8002b00 <SD_disk_ioctl+0x234>
                for (n = 0; n < 4; n++)
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002ad8:	e00b      	b.n	8002af2 <SD_disk_ioctl+0x226>
                    *ptr++ = SPI_RxByte();
 8002ada:	6a3c      	ldr	r4, [r7, #32]
 8002adc:	1c63      	adds	r3, r4, #1
 8002ade:	623b      	str	r3, [r7, #32]
 8002ae0:	f000 f856 	bl	8002b90 <SPI_RxByte>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	7023      	strb	r3, [r4, #0]
                for (n = 0; n < 4; n++)
 8002ae8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002aec:	3301      	adds	r3, #1
 8002aee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002af2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002af6:	2b03      	cmp	r3, #3
 8002af8:	d9ef      	bls.n	8002ada <SD_disk_ioctl+0x20e>

                res = RES_OK;
 8002afa:	2300      	movs	r3, #0
 8002afc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }

        default:
            res = RES_PARERR;
 8002b00:	2304      	movs	r3, #4
 8002b02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002b06:	e006      	b.n	8002b16 <SD_disk_ioctl+0x24a>
            break;
 8002b08:	bf00      	nop
 8002b0a:	e004      	b.n	8002b16 <SD_disk_ioctl+0x24a>
            break;
 8002b0c:	bf00      	nop
 8002b0e:	e002      	b.n	8002b16 <SD_disk_ioctl+0x24a>
            break;
 8002b10:	bf00      	nop
 8002b12:	e000      	b.n	8002b16 <SD_disk_ioctl+0x24a>
            break;
 8002b14:	bf00      	nop
        }

        DESELECT();
 8002b16:	f000 f817 	bl	8002b48 <DESELECT>
        SPI_RxByte();
 8002b1a:	f000 f839 	bl	8002b90 <SPI_RxByte>
    }

    return res;
 8002b1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	372c      	adds	r7, #44	; 0x2c
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd90      	pop	{r4, r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20000030 	.word	0x20000030

08002b30 <SELECT>:
/* Private functions --------------------------------------------------------*/
/*--------------------------------------------------------------------------
 SPI functions
 ---------------------------------------------------------------------------*/
/* slave select */
static void SELECT(void) {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002b34:	2200      	movs	r2, #0
 8002b36:	2101      	movs	r1, #1
 8002b38:	4802      	ldr	r0, [pc, #8]	; (8002b44 <SELECT+0x14>)
 8002b3a:	f003 faf3 	bl	8006124 <HAL_GPIO_WritePin>
}
 8002b3e:	bf00      	nop
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40020400 	.word	0x40020400

08002b48 <DESELECT>:
//-------------------------------------------------------------

/* slave deselect */
static void DESELECT(void) {
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	2101      	movs	r1, #1
 8002b50:	4802      	ldr	r0, [pc, #8]	; (8002b5c <DESELECT+0x14>)
 8002b52:	f003 fae7 	bl	8006124 <HAL_GPIO_WritePin>
}
 8002b56:	bf00      	nop
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40020400 	.word	0x40020400

08002b60 <SPI_TxByte>:
//-------------------------------------------------------------

/* SPI transmit a byte */
static void SPI_TxByte(BYTE data) {
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	71fb      	strb	r3, [r7, #7]
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY)
 8002b6a:	bf00      	nop
 8002b6c:	4807      	ldr	r0, [pc, #28]	; (8002b8c <SPI_TxByte+0x2c>)
 8002b6e:	f006 f99d 	bl	8008eac <HAL_SPI_GetState>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d1f9      	bne.n	8002b6c <SPI_TxByte+0xc>
        ;
    HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8002b78:	1df9      	adds	r1, r7, #7
 8002b7a:	2364      	movs	r3, #100	; 0x64
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	4803      	ldr	r0, [pc, #12]	; (8002b8c <SPI_TxByte+0x2c>)
 8002b80:	f005 feb6 	bl	80088f0 <HAL_SPI_Transmit>
}
 8002b84:	bf00      	nop
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	200023dc 	.word	0x200023dc

08002b90 <SPI_RxByte>:
//-------------------------------------------------------------

/* SPI receive a byte */
static uint8_t SPI_RxByte(void) {
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af02      	add	r7, sp, #8
    uint8_t dummy, data;
    dummy = 0xFF;
 8002b96:	23ff      	movs	r3, #255	; 0xff
 8002b98:	71fb      	strb	r3, [r7, #7]
    data = 0;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	71bb      	strb	r3, [r7, #6]

    while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY))
 8002b9e:	bf00      	nop
 8002ba0:	4809      	ldr	r0, [pc, #36]	; (8002bc8 <SPI_RxByte+0x38>)
 8002ba2:	f006 f983 	bl	8008eac <HAL_SPI_GetState>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d1f9      	bne.n	8002ba0 <SPI_RxByte+0x10>
        ;
    HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8002bac:	1dba      	adds	r2, r7, #6
 8002bae:	1df9      	adds	r1, r7, #7
 8002bb0:	2364      	movs	r3, #100	; 0x64
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	4804      	ldr	r0, [pc, #16]	; (8002bc8 <SPI_RxByte+0x38>)
 8002bb8:	f005 ffd6 	bl	8008b68 <HAL_SPI_TransmitReceive>

    return data;
 8002bbc:	79bb      	ldrb	r3, [r7, #6]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	200023dc 	.word	0x200023dc

08002bcc <SPI_RxBytePtr>:
//-------------------------------------------------------------

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t * buff) {
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
    *buff = SPI_RxByte();
 8002bd4:	f7ff ffdc 	bl	8002b90 <SPI_RxByte>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	461a      	mov	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	701a      	strb	r2, [r3, #0]
}
 8002be0:	bf00      	nop
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <SD_ReadyWait>:

/*--------------------------------------------------------------------------
 SD functions
 ---------------------------------------------------------------------------*/
/* wait SD ready */
static uint8_t SD_ReadyWait(void) {
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
    uint8_t res;

    /* 500ms 카운터 준비 */
    Timer2 = 50;
 8002bee:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <SD_ReadyWait+0x34>)
 8002bf0:	2232      	movs	r2, #50	; 0x32
 8002bf2:	701a      	strb	r2, [r3, #0]
    SPI_RxByte();
 8002bf4:	f7ff ffcc 	bl	8002b90 <SPI_RxByte>

    do {
        /* 0xFF 값이 수신될 때 까지 SPI 통신 */
        res = SPI_RxByte();
 8002bf8:	f7ff ffca 	bl	8002b90 <SPI_RxByte>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	71fb      	strb	r3, [r7, #7]
    } while ((res != 0xFF) && Timer2);
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	2bff      	cmp	r3, #255	; 0xff
 8002c04:	d004      	beq.n	8002c10 <SD_ReadyWait+0x28>
 8002c06:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <SD_ReadyWait+0x34>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1f3      	bne.n	8002bf8 <SD_ReadyWait+0x10>

    return res;
 8002c10:	79fb      	ldrb	r3, [r7, #7]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	20002438 	.word	0x20002438

08002c20 <SD_PowerOn>:
//-------------------------------------------------------------

/* power on */
static void SD_PowerOn(void) {
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
    uint8_t cmd_arg[6];
    uint32_t Count = 0x1FFF;
 8002c26:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8002c2a:	617b      	str	r3, [r7, #20]

    /* transmit bytes to wake up */
    DESELECT();
 8002c2c:	f7ff ff8c 	bl	8002b48 <DESELECT>

    for (int i = 0; i < 10; i++)
 8002c30:	2300      	movs	r3, #0
 8002c32:	613b      	str	r3, [r7, #16]
 8002c34:	e005      	b.n	8002c42 <SD_PowerOn+0x22>
        SPI_TxByte(0xFF);
 8002c36:	20ff      	movs	r0, #255	; 0xff
 8002c38:	f7ff ff92 	bl	8002b60 <SPI_TxByte>
    for (int i = 0; i < 10; i++)
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	613b      	str	r3, [r7, #16]
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	2b09      	cmp	r3, #9
 8002c46:	ddf6      	ble.n	8002c36 <SD_PowerOn+0x16>

    /* slave select */
    SELECT();
 8002c48:	f7ff ff72 	bl	8002b30 <SELECT>

    /* make idle state */
    cmd_arg[0] = (CMD0 | 0x40);
 8002c4c:	2340      	movs	r3, #64	; 0x40
 8002c4e:	713b      	strb	r3, [r7, #4]
    cmd_arg[1] = 0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	717b      	strb	r3, [r7, #5]
    cmd_arg[2] = 0;
 8002c54:	2300      	movs	r3, #0
 8002c56:	71bb      	strb	r3, [r7, #6]
    cmd_arg[3] = 0;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	71fb      	strb	r3, [r7, #7]
    cmd_arg[4] = 0;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	723b      	strb	r3, [r7, #8]
    cmd_arg[5] = 0x95;
 8002c60:	2395      	movs	r3, #149	; 0x95
 8002c62:	727b      	strb	r3, [r7, #9]

    /* 명령 전송 */
    for (int i = 0; i < 6; i++)
 8002c64:	2300      	movs	r3, #0
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	e009      	b.n	8002c7e <SD_PowerOn+0x5e>
        SPI_TxByte(cmd_arg[i]);
 8002c6a:	1d3a      	adds	r2, r7, #4
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4413      	add	r3, r2
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff ff74 	bl	8002b60 <SPI_TxByte>
    for (int i = 0; i < 6; i++)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2b05      	cmp	r3, #5
 8002c82:	ddf2      	ble.n	8002c6a <SD_PowerOn+0x4a>

    /* wait response */
    while ((SPI_RxByte() != 0x01) && Count)
 8002c84:	e002      	b.n	8002c8c <SD_PowerOn+0x6c>
        Count--;
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	617b      	str	r3, [r7, #20]
    while ((SPI_RxByte() != 0x01) && Count)
 8002c8c:	f7ff ff80 	bl	8002b90 <SPI_RxByte>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d002      	beq.n	8002c9c <SD_PowerOn+0x7c>
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1f4      	bne.n	8002c86 <SD_PowerOn+0x66>

    DESELECT();
 8002c9c:	f7ff ff54 	bl	8002b48 <DESELECT>
    SPI_TxByte(0XFF);
 8002ca0:	20ff      	movs	r0, #255	; 0xff
 8002ca2:	f7ff ff5d 	bl	8002b60 <SPI_TxByte>

    PowerFlag = 1;
 8002ca6:	4b03      	ldr	r3, [pc, #12]	; (8002cb4 <SD_PowerOn+0x94>)
 8002ca8:	2201      	movs	r2, #1
 8002caa:	701a      	strb	r2, [r3, #0]
}
 8002cac:	bf00      	nop
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	2000222d 	.word	0x2000222d

08002cb8 <SD_PowerOff>:
//-------------------------------------------------------------

/* power off */
static void SD_PowerOff(void) {
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
    PowerFlag = 0;
 8002cbc:	4b03      	ldr	r3, [pc, #12]	; (8002ccc <SD_PowerOff+0x14>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	701a      	strb	r2, [r3, #0]
}
 8002cc2:	bf00      	nop
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	2000222d 	.word	0x2000222d

08002cd0 <SD_CheckPower>:
//-------------------------------------------------------------

/* check power flag */
static uint8_t SD_CheckPower(void) {
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
    return PowerFlag; /*  0=off, 1=on */
 8002cd4:	4b03      	ldr	r3, [pc, #12]	; (8002ce4 <SD_CheckPower+0x14>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	2000222d 	.word	0x2000222d

08002ce8 <SD_RxDataBlock>:
//-------------------------------------------------------------

/* receive data block */
static bool SD_RxDataBlock(BYTE * buff, UINT btr) {
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
    uint8_t token;

    Timer1 = 10; /* timeout 100ms */
 8002cf2:	4b17      	ldr	r3, [pc, #92]	; (8002d50 <SD_RxDataBlock+0x68>)
 8002cf4:	220a      	movs	r2, #10
 8002cf6:	701a      	strb	r2, [r3, #0]

    /* loop until receive a response or timeout */
    do {
        token = SPI_RxByte();
 8002cf8:	f7ff ff4a 	bl	8002b90 <SPI_RxByte>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	73fb      	strb	r3, [r7, #15]
    } while ((token == 0xFF) && Timer1);
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	2bff      	cmp	r3, #255	; 0xff
 8002d04:	d104      	bne.n	8002d10 <SD_RxDataBlock+0x28>
 8002d06:	4b12      	ldr	r3, [pc, #72]	; (8002d50 <SD_RxDataBlock+0x68>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1f3      	bne.n	8002cf8 <SD_RxDataBlock+0x10>

    /* invalid response */
    if (token != 0xFE)
 8002d10:	7bfb      	ldrb	r3, [r7, #15]
 8002d12:	2bfe      	cmp	r3, #254	; 0xfe
 8002d14:	d001      	beq.n	8002d1a <SD_RxDataBlock+0x32>
        return FALSE;
 8002d16:	2300      	movs	r3, #0
 8002d18:	e016      	b.n	8002d48 <SD_RxDataBlock+0x60>

    /* receive data */
    do {
        SPI_RxBytePtr(buff++);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	1c5a      	adds	r2, r3, #1
 8002d1e:	607a      	str	r2, [r7, #4]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff ff53 	bl	8002bcc <SPI_RxBytePtr>
        SPI_RxBytePtr(buff++);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	1c5a      	adds	r2, r3, #1
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff ff4d 	bl	8002bcc <SPI_RxBytePtr>
    } while (btr -= 2);
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	3b02      	subs	r3, #2
 8002d36:	603b      	str	r3, [r7, #0]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1ed      	bne.n	8002d1a <SD_RxDataBlock+0x32>

    SPI_RxByte(); /* CRC 무시 */
 8002d3e:	f7ff ff27 	bl	8002b90 <SPI_RxByte>
    SPI_RxByte();
 8002d42:	f7ff ff25 	bl	8002b90 <SPI_RxByte>

    return TRUE;
 8002d46:	2301      	movs	r3, #1
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	20002436 	.word	0x20002436

08002d54 <SD_TxDataBlock>:
//-------------------------------------------------------------

/* transmit data block */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE * buff, BYTE token) {
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	70fb      	strb	r3, [r7, #3]
    uint8_t resp = 0, wc;
 8002d60:	2300      	movs	r3, #0
 8002d62:	73fb      	strb	r3, [r7, #15]
    uint8_t i = 0;
 8002d64:	2300      	movs	r3, #0
 8002d66:	737b      	strb	r3, [r7, #13]

    /* wait SD ready */
    if (SD_ReadyWait() != 0xFF)
 8002d68:	f7ff ff3e 	bl	8002be8 <SD_ReadyWait>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2bff      	cmp	r3, #255	; 0xff
 8002d70:	d001      	beq.n	8002d76 <SD_TxDataBlock+0x22>
        return FALSE;
 8002d72:	2300      	movs	r3, #0
 8002d74:	e040      	b.n	8002df8 <SD_TxDataBlock+0xa4>

    /* transmit token */
    SPI_TxByte(token);
 8002d76:	78fb      	ldrb	r3, [r7, #3]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff fef1 	bl	8002b60 <SPI_TxByte>

    /* if it's not STOP token, transmit data */
    if (token != 0xFD) {
 8002d7e:	78fb      	ldrb	r3, [r7, #3]
 8002d80:	2bfd      	cmp	r3, #253	; 0xfd
 8002d82:	d031      	beq.n	8002de8 <SD_TxDataBlock+0x94>
        wc = 0;
 8002d84:	2300      	movs	r3, #0
 8002d86:	73bb      	strb	r3, [r7, #14]

        /* 512 바이트 데이터 전송 */
        do {
            SPI_TxByte(*buff++);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	1c5a      	adds	r2, r3, #1
 8002d8c:	607a      	str	r2, [r7, #4]
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff fee5 	bl	8002b60 <SPI_TxByte>
            SPI_TxByte(*buff++);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	1c5a      	adds	r2, r3, #1
 8002d9a:	607a      	str	r2, [r7, #4]
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff fede 	bl	8002b60 <SPI_TxByte>
        } while (--wc);
 8002da4:	7bbb      	ldrb	r3, [r7, #14]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	73bb      	strb	r3, [r7, #14]
 8002daa:	7bbb      	ldrb	r3, [r7, #14]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1eb      	bne.n	8002d88 <SD_TxDataBlock+0x34>

        SPI_RxByte(); /* CRC 무시 */
 8002db0:	f7ff feee 	bl	8002b90 <SPI_RxByte>
        SPI_RxByte();
 8002db4:	f7ff feec 	bl	8002b90 <SPI_RxByte>

        /* 데이트 응답 수신 */
        while (i <= 64) {
 8002db8:	e00b      	b.n	8002dd2 <SD_TxDataBlock+0x7e>
            resp = SPI_RxByte();
 8002dba:	f7ff fee9 	bl	8002b90 <SPI_RxByte>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	73fb      	strb	r3, [r7, #15]

            /* transmit 0x05 accepted */
            if ((resp & 0x1F) == 0x05)
 8002dc2:	7bfb      	ldrb	r3, [r7, #15]
 8002dc4:	f003 031f 	and.w	r3, r3, #31
 8002dc8:	2b05      	cmp	r3, #5
 8002dca:	d006      	beq.n	8002dda <SD_TxDataBlock+0x86>
                break;

            i++;
 8002dcc:	7b7b      	ldrb	r3, [r7, #13]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	737b      	strb	r3, [r7, #13]
        while (i <= 64) {
 8002dd2:	7b7b      	ldrb	r3, [r7, #13]
 8002dd4:	2b40      	cmp	r3, #64	; 0x40
 8002dd6:	d9f0      	bls.n	8002dba <SD_TxDataBlock+0x66>
 8002dd8:	e000      	b.n	8002ddc <SD_TxDataBlock+0x88>
                break;
 8002dda:	bf00      	nop
        }

        /* recv buffer clear */
        while (SPI_RxByte() == 0)
 8002ddc:	bf00      	nop
 8002dde:	f7ff fed7 	bl	8002b90 <SPI_RxByte>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0fa      	beq.n	8002dde <SD_TxDataBlock+0x8a>
            ;
    }

    if ((resp & 0x1F) == 0x05)
 8002de8:	7bfb      	ldrb	r3, [r7, #15]
 8002dea:	f003 031f 	and.w	r3, r3, #31
 8002dee:	2b05      	cmp	r3, #5
 8002df0:	d101      	bne.n	8002df6 <SD_TxDataBlock+0xa2>
        return TRUE;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e000      	b.n	8002df8 <SD_TxDataBlock+0xa4>
    else
        return FALSE;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <SD_SendCmd>:
#endif /* _READONLY */
//-------------------------------------------------------------

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) {
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	6039      	str	r1, [r7, #0]
 8002e0a:	71fb      	strb	r3, [r7, #7]
    uint8_t crc, res;

    /* wait SD ready */
    if (SD_ReadyWait() != 0xFF)
 8002e0c:	f7ff feec 	bl	8002be8 <SD_ReadyWait>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2bff      	cmp	r3, #255	; 0xff
 8002e14:	d001      	beq.n	8002e1a <SD_SendCmd+0x1a>
        return 0xFF;
 8002e16:	23ff      	movs	r3, #255	; 0xff
 8002e18:	e040      	b.n	8002e9c <SD_SendCmd+0x9c>

    /* transmit command */
    SPI_TxByte(cmd);               /* Command */
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff fe9f 	bl	8002b60 <SPI_TxByte>
    SPI_TxByte((BYTE)(arg >> 24)); /* Argument[31..24] */
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	0e1b      	lsrs	r3, r3, #24
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff fe99 	bl	8002b60 <SPI_TxByte>
    SPI_TxByte((BYTE)(arg >> 16)); /* Argument[23..16] */
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	0c1b      	lsrs	r3, r3, #16
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff fe93 	bl	8002b60 <SPI_TxByte>
    SPI_TxByte((BYTE)(arg >> 8));  /* Argument[15..8] */
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	0a1b      	lsrs	r3, r3, #8
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff fe8d 	bl	8002b60 <SPI_TxByte>
    SPI_TxByte((BYTE)arg);         /* Argument[7..0] */
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff fe88 	bl	8002b60 <SPI_TxByte>

    /* prepare CRC */
    crc = 0;
 8002e50:	2300      	movs	r3, #0
 8002e52:	73fb      	strb	r3, [r7, #15]
    if (cmd == CMD0)
 8002e54:	79fb      	ldrb	r3, [r7, #7]
 8002e56:	2b40      	cmp	r3, #64	; 0x40
 8002e58:	d101      	bne.n	8002e5e <SD_SendCmd+0x5e>
        crc = 0x95; /* CRC for CMD0(0) */
 8002e5a:	2395      	movs	r3, #149	; 0x95
 8002e5c:	73fb      	strb	r3, [r7, #15]

    if (cmd == CMD8)
 8002e5e:	79fb      	ldrb	r3, [r7, #7]
 8002e60:	2b48      	cmp	r3, #72	; 0x48
 8002e62:	d101      	bne.n	8002e68 <SD_SendCmd+0x68>
        crc = 0x87; /* CRC for CMD8(0x1AA) */
 8002e64:	2387      	movs	r3, #135	; 0x87
 8002e66:	73fb      	strb	r3, [r7, #15]

    /* transmit CRC */
    SPI_TxByte(crc);
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff fe78 	bl	8002b60 <SPI_TxByte>

    /* Skip a stuff byte when STOP_TRANSMISSION */
    if (cmd == CMD12)
 8002e70:	79fb      	ldrb	r3, [r7, #7]
 8002e72:	2b4c      	cmp	r3, #76	; 0x4c
 8002e74:	d101      	bne.n	8002e7a <SD_SendCmd+0x7a>
        SPI_RxByte();
 8002e76:	f7ff fe8b 	bl	8002b90 <SPI_RxByte>

    /* receive response */
    uint8_t n = 10;
 8002e7a:	230a      	movs	r3, #10
 8002e7c:	73bb      	strb	r3, [r7, #14]
    do {
        res = SPI_RxByte();
 8002e7e:	f7ff fe87 	bl	8002b90 <SPI_RxByte>
 8002e82:	4603      	mov	r3, r0
 8002e84:	737b      	strb	r3, [r7, #13]
    } while ((res & 0x80) && --n);
 8002e86:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	da05      	bge.n	8002e9a <SD_SendCmd+0x9a>
 8002e8e:	7bbb      	ldrb	r3, [r7, #14]
 8002e90:	3b01      	subs	r3, #1
 8002e92:	73bb      	strb	r3, [r7, #14]
 8002e94:	7bbb      	ldrb	r3, [r7, #14]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f1      	bne.n	8002e7e <SD_SendCmd+0x7e>

    return res;
 8002e9a:	7b7b      	ldrb	r3, [r7, #13]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <microSD_create>:
    f_puts(NEW_LINE, &log_file);
    f_close(&log_file);
}

MicroSD * microSD_create(UART_HandleTypeDef * huart, const char * filename,
                         const char * directory) {
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b098      	sub	sp, #96	; 0x60
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
    MicroSD * sd = (MicroSD *)malloc(sizeof(MicroSD));
 8002eb0:	f240 4074 	movw	r0, #1140	; 0x474
 8002eb4:	f009 fea8 	bl	800cc08 <malloc>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (sd == NULL) {
 8002ebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d104      	bne.n	8002ecc <microSD_create+0x28>
        uart_print("❌ Error: no se pudo asignar memoria para MicroSD.\n");
 8002ec2:	4838      	ldr	r0, [pc, #224]	; (8002fa4 <microSD_create+0x100>)
 8002ec4:	f001 fcea 	bl	800489c <uart_print>
        return NULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	e067      	b.n	8002f9c <microSD_create+0xf8>
    }

    sd->huart = huart;
 8002ecc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	601a      	str	r2, [r3, #0]
    SAFE_STRCPY(sd->filename, filename, sizeof(sd->filename));
 8002ed2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	227f      	movs	r2, #127	; 0x7f
 8002ed8:	68b9      	ldr	r1, [r7, #8]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f00a ff5c 	bl	800dd98 <strncpy>
 8002ee0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
    SAFE_STRCPY(sd->directory, directory, sizeof(sd->directory));
 8002ee8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eea:	3384      	adds	r3, #132	; 0x84
 8002eec:	227f      	movs	r2, #127	; 0x7f
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f00a ff51 	bl	800dd98 <strncpy>
 8002ef6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103

    // Verificar si el directorio es válido
    const char * mount_path = (directory == NULL || strlen(directory) == 0) ? "" : sd->directory;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d006      	beq.n	8002f12 <microSD_create+0x6e>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <microSD_create+0x6e>
 8002f0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f0e:	3384      	adds	r3, #132	; 0x84
 8002f10:	e000      	b.n	8002f14 <microSD_create+0x70>
 8002f12:	4b25      	ldr	r3, [pc, #148]	; (8002fa8 <microSD_create+0x104>)
 8002f14:	65bb      	str	r3, [r7, #88]	; 0x58

    sd->fresult = f_mount(&sd->fs, mount_path, 1);
 8002f16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f18:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002f20:	4618      	mov	r0, r3
 8002f22:	f008 ff53 	bl	800bdcc <f_mount>
 8002f26:	4603      	mov	r3, r0
 8002f28:	461a      	mov	r2, r3
 8002f2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f2c:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
    if (sd->fresult == FR_OK) {
 8002f30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f32:	f893 3368 	ldrb.w	r3, [r3, #872]	; 0x368
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d11d      	bne.n	8002f76 <microSD_create+0xd2>
        uart_print("✅ SD montada correctamente.\n");
 8002f3a:	481c      	ldr	r0, [pc, #112]	; (8002fac <microSD_create+0x108>)
 8002f3c:	f001 fcae 	bl	800489c <uart_print>

        // ⚡ Acelera SPI después del montaje exitoso
        HAL_SPI_DeInit(&hspi1);
 8002f40:	481b      	ldr	r0, [pc, #108]	; (8002fb0 <microSD_create+0x10c>)
 8002f42:	f005 fcad 	bl	80088a0 <HAL_SPI_DeInit>
        hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002f46:	4b1a      	ldr	r3, [pc, #104]	; (8002fb0 <microSD_create+0x10c>)
 8002f48:	2210      	movs	r2, #16
 8002f4a:	61da      	str	r2, [r3, #28]
        HAL_SPI_Init(&hspi1);
 8002f4c:	4818      	ldr	r0, [pc, #96]	; (8002fb0 <microSD_create+0x10c>)
 8002f4e:	f005 fc1e 	bl	800878e <HAL_SPI_Init>
        uart_print("⚡ SPI acelerado a prescaler 8.\n");
 8002f52:	4818      	ldr	r0, [pc, #96]	; (8002fb4 <microSD_create+0x110>)
 8002f54:	f001 fca2 	bl	800489c <uart_print>
        free(sd);
        return NULL;
    }

    // Señal de éxito por UART
    SEND_UART(sd, MOUNT_SUCCESS);
 8002f58:	231f      	movs	r3, #31
 8002f5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002f5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f60:	6818      	ldr	r0, [r3, #0]
 8002f62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002f6c:	4912      	ldr	r1, [pc, #72]	; (8002fb8 <microSD_create+0x114>)
 8002f6e:	f006 f8c2 	bl	80090f6 <HAL_UART_Transmit>

    return sd;
 8002f72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f74:	e012      	b.n	8002f9c <microSD_create+0xf8>
        sprintf(msg, "❌ Error al montar la SD (f_mount): %d\n", sd->fresult);
 8002f76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f78:	f893 3368 	ldrb.w	r3, [r3, #872]	; 0x368
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	f107 0314 	add.w	r3, r7, #20
 8002f82:	490e      	ldr	r1, [pc, #56]	; (8002fbc <microSD_create+0x118>)
 8002f84:	4618      	mov	r0, r3
 8002f86:	f00a fe7f 	bl	800dc88 <siprintf>
        uart_print(msg);
 8002f8a:	f107 0314 	add.w	r3, r7, #20
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f001 fc84 	bl	800489c <uart_print>
        free(sd);
 8002f94:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002f96:	f009 fe3f 	bl	800cc18 <free>
        return NULL;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3760      	adds	r7, #96	; 0x60
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	08011fdc 	.word	0x08011fdc
 8002fa8:	08012014 	.word	0x08012014
 8002fac:	08012018 	.word	0x08012018
 8002fb0:	200023dc 	.word	0x200023dc
 8002fb4:	08012038 	.word	0x08012038
 8002fb8:	08012088 	.word	0x08012088
 8002fbc:	0801205c 	.word	0x0801205c

08002fc0 <microSD_setDirectory>:
        }
        free(sd);
    }
}

void microSD_setDirectory(MicroSD * sd, const char * directory) {
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
    SAFE_STRCPY(sd->directory, directory, sizeof(sd->directory));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	3384      	adds	r3, #132	; 0x84
 8002fce:	227f      	movs	r2, #127	; 0x7f
 8002fd0:	6839      	ldr	r1, [r7, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f00a fee0 	bl	800dd98 <strncpy>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
}
 8002fe0:	bf00      	nop
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <microSD_appendLineAbsolute>:
 * @param filepath Ruta absoluta del archivo (ej. "/2025/05/24/RAW_20250524.CSV")
 * @param line Línea de texto a escribir (debe terminar en '\n' si se requiere)
 * @return true si se escribió correctamente, false si hubo error
 */

bool microSD_appendLineAbsolute(const char * filepath, const char * line) {
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b092      	sub	sp, #72	; 0x48
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
    FIL file;
    FRESULT res;
    UINT bw;

    res = f_open(&file, filepath, FA_OPEN_ALWAYS | FA_WRITE);
 8002ff2:	f107 0310 	add.w	r3, r7, #16
 8002ff6:	2212      	movs	r2, #18
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f008 ff2c 	bl	800be58 <f_open>
 8003000:	4603      	mov	r3, r0
 8003002:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (res != FR_OK) {
 8003006:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800300a:	2b00      	cmp	r3, #0
 800300c:	d006      	beq.n	800301c <microSD_appendLineAbsolute+0x34>
        print_fatfs_error(res);
 800300e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003012:	4618      	mov	r0, r3
 8003014:	f000 f870 	bl	80030f8 <print_fatfs_error>
        return false;
 8003018:	2300      	movs	r3, #0
 800301a:	e065      	b.n	80030e8 <microSD_appendLineAbsolute+0x100>
    }

    // Verificar si el archivo está vacío para escribir encabezado
    if (f_size(&file) == 0) {
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d124      	bne.n	800306c <microSD_appendLineAbsolute+0x84>
        const char * header = "timestamp,sensor_id,pm1.0,pm2.5,pm4.0,pm10,temp,hum\n";
 8003022:	4b33      	ldr	r3, [pc, #204]	; (80030f0 <microSD_appendLineAbsolute+0x108>)
 8003024:	643b      	str	r3, [r7, #64]	; 0x40
        res = f_write(&file, header, strlen(header), &bw);
 8003026:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003028:	f7fd f8e2 	bl	80001f0 <strlen>
 800302c:	4602      	mov	r2, r0
 800302e:	f107 030c 	add.w	r3, r7, #12
 8003032:	f107 0010 	add.w	r0, r7, #16
 8003036:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003038:	f009 f8b3 	bl	800c1a2 <f_write>
 800303c:	4603      	mov	r3, r0
 800303e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (res != FR_OK || bw != strlen(header)) {
 8003042:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003046:	2b00      	cmp	r3, #0
 8003048:	d106      	bne.n	8003058 <microSD_appendLineAbsolute+0x70>
 800304a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800304c:	f7fd f8d0 	bl	80001f0 <strlen>
 8003050:	4602      	mov	r2, r0
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	429a      	cmp	r2, r3
 8003056:	d009      	beq.n	800306c <microSD_appendLineAbsolute+0x84>
            f_close(&file);
 8003058:	f107 0310 	add.w	r3, r7, #16
 800305c:	4618      	mov	r0, r3
 800305e:	f009 fa6c 	bl	800c53a <f_close>
            uart_print("Error al escribir encabezado CSV\r\n");
 8003062:	4824      	ldr	r0, [pc, #144]	; (80030f4 <microSD_appendLineAbsolute+0x10c>)
 8003064:	f001 fc1a 	bl	800489c <uart_print>
            return false;
 8003068:	2300      	movs	r3, #0
 800306a:	e03d      	b.n	80030e8 <microSD_appendLineAbsolute+0x100>
        }
    }

    // Ir al final del archivo para agregar línea
    res = f_lseek(&file, f_size(&file));
 800306c:	69fa      	ldr	r2, [r7, #28]
 800306e:	f107 0310 	add.w	r3, r7, #16
 8003072:	4611      	mov	r1, r2
 8003074:	4618      	mov	r0, r3
 8003076:	f009 fa8a 	bl	800c58e <f_lseek>
 800307a:	4603      	mov	r3, r0
 800307c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (res != FR_OK) {
 8003080:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00b      	beq.n	80030a0 <microSD_appendLineAbsolute+0xb8>
        f_close(&file);
 8003088:	f107 0310 	add.w	r3, r7, #16
 800308c:	4618      	mov	r0, r3
 800308e:	f009 fa54 	bl	800c53a <f_close>
        print_fatfs_error(res);
 8003092:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003096:	4618      	mov	r0, r3
 8003098:	f000 f82e 	bl	80030f8 <print_fatfs_error>
        return false;
 800309c:	2300      	movs	r3, #0
 800309e:	e023      	b.n	80030e8 <microSD_appendLineAbsolute+0x100>
    }

    res = f_write(&file, line, strlen(line), &bw);
 80030a0:	6838      	ldr	r0, [r7, #0]
 80030a2:	f7fd f8a5 	bl	80001f0 <strlen>
 80030a6:	4602      	mov	r2, r0
 80030a8:	f107 030c 	add.w	r3, r7, #12
 80030ac:	f107 0010 	add.w	r0, r7, #16
 80030b0:	6839      	ldr	r1, [r7, #0]
 80030b2:	f009 f876 	bl	800c1a2 <f_write>
 80030b6:	4603      	mov	r3, r0
 80030b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    f_close(&file);
 80030bc:	f107 0310 	add.w	r3, r7, #16
 80030c0:	4618      	mov	r0, r3
 80030c2:	f009 fa3a 	bl	800c53a <f_close>

    return (res == FR_OK && bw == strlen(line));
 80030c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d108      	bne.n	80030e0 <microSD_appendLineAbsolute+0xf8>
 80030ce:	6838      	ldr	r0, [r7, #0]
 80030d0:	f7fd f88e 	bl	80001f0 <strlen>
 80030d4:	4602      	mov	r2, r0
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d101      	bne.n	80030e0 <microSD_appendLineAbsolute+0xf8>
 80030dc:	2301      	movs	r3, #1
 80030de:	e000      	b.n	80030e2 <microSD_appendLineAbsolute+0xfa>
 80030e0:	2300      	movs	r3, #0
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	b2db      	uxtb	r3, r3
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3748      	adds	r7, #72	; 0x48
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	080122c0 	.word	0x080122c0
 80030f4:	080122f8 	.word	0x080122f8

080030f8 <print_fatfs_error>:

void print_fatfs_error(FRESULT res) {
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b092      	sub	sp, #72	; 0x48
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	71fb      	strb	r3, [r7, #7]
    char msg[64];
    snprintf(msg, sizeof(msg), "f_mount() error code: %d\r\n", res);
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	f107 0008 	add.w	r0, r7, #8
 8003108:	4a3c      	ldr	r2, [pc, #240]	; (80031fc <print_fatfs_error+0x104>)
 800310a:	2140      	movs	r1, #64	; 0x40
 800310c:	f00a fd88 	bl	800dc20 <sniprintf>
    uart_print(msg);
 8003110:	f107 0308 	add.w	r3, r7, #8
 8003114:	4618      	mov	r0, r3
 8003116:	f001 fbc1 	bl	800489c <uart_print>

    switch (res) {
 800311a:	79fb      	ldrb	r3, [r7, #7]
 800311c:	2b10      	cmp	r3, #16
 800311e:	d865      	bhi.n	80031ec <print_fatfs_error+0xf4>
 8003120:	a201      	add	r2, pc, #4	; (adr r2, 8003128 <print_fatfs_error+0x30>)
 8003122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003126:	bf00      	nop
 8003128:	0800316d 	.word	0x0800316d
 800312c:	08003175 	.word	0x08003175
 8003130:	0800317d 	.word	0x0800317d
 8003134:	08003185 	.word	0x08003185
 8003138:	0800318d 	.word	0x0800318d
 800313c:	08003195 	.word	0x08003195
 8003140:	0800319d 	.word	0x0800319d
 8003144:	080031a5 	.word	0x080031a5
 8003148:	080031ad 	.word	0x080031ad
 800314c:	080031b5 	.word	0x080031b5
 8003150:	080031bd 	.word	0x080031bd
 8003154:	080031c5 	.word	0x080031c5
 8003158:	080031cd 	.word	0x080031cd
 800315c:	080031d5 	.word	0x080031d5
 8003160:	080031ed 	.word	0x080031ed
 8003164:	080031dd 	.word	0x080031dd
 8003168:	080031e5 	.word	0x080031e5
    case FR_OK:
        uart_print("FR_OK: Operacion exitosa\r\n");
 800316c:	4824      	ldr	r0, [pc, #144]	; (8003200 <print_fatfs_error+0x108>)
 800316e:	f001 fb95 	bl	800489c <uart_print>
        break;
 8003172:	e03f      	b.n	80031f4 <print_fatfs_error+0xfc>
    case FR_DISK_ERR:
        uart_print("FR_DISK_ERR: Error fisico en el disco\r\n");
 8003174:	4823      	ldr	r0, [pc, #140]	; (8003204 <print_fatfs_error+0x10c>)
 8003176:	f001 fb91 	bl	800489c <uart_print>
        break;
 800317a:	e03b      	b.n	80031f4 <print_fatfs_error+0xfc>
    case FR_INT_ERR:
        uart_print("FR_INT_ERR: Error interno de FatFs\r\n");
 800317c:	4822      	ldr	r0, [pc, #136]	; (8003208 <print_fatfs_error+0x110>)
 800317e:	f001 fb8d 	bl	800489c <uart_print>
        break;
 8003182:	e037      	b.n	80031f4 <print_fatfs_error+0xfc>
    case FR_NOT_READY:
        uart_print("FR_NOT_READY: Disco no esta listo\r\n");
 8003184:	4821      	ldr	r0, [pc, #132]	; (800320c <print_fatfs_error+0x114>)
 8003186:	f001 fb89 	bl	800489c <uart_print>
        break;
 800318a:	e033      	b.n	80031f4 <print_fatfs_error+0xfc>
    case FR_NO_FILE:
        uart_print("FR_NO_FILE: Archivo no encontrado\r\n");
 800318c:	4820      	ldr	r0, [pc, #128]	; (8003210 <print_fatfs_error+0x118>)
 800318e:	f001 fb85 	bl	800489c <uart_print>
        break;
 8003192:	e02f      	b.n	80031f4 <print_fatfs_error+0xfc>
    case FR_NO_PATH:
        uart_print("FR_NO_PATH: Ruta no encontrada\r\n");
 8003194:	481f      	ldr	r0, [pc, #124]	; (8003214 <print_fatfs_error+0x11c>)
 8003196:	f001 fb81 	bl	800489c <uart_print>
        break;
 800319a:	e02b      	b.n	80031f4 <print_fatfs_error+0xfc>
    case FR_INVALID_NAME:
        uart_print("FR_INVALID_NAME: Nombre inválido\r\n");
 800319c:	481e      	ldr	r0, [pc, #120]	; (8003218 <print_fatfs_error+0x120>)
 800319e:	f001 fb7d 	bl	800489c <uart_print>
        break;
 80031a2:	e027      	b.n	80031f4 <print_fatfs_error+0xfc>
    case FR_DENIED:
        uart_print("FR_DENIED: Acceso denegado\r\n");
 80031a4:	481d      	ldr	r0, [pc, #116]	; (800321c <print_fatfs_error+0x124>)
 80031a6:	f001 fb79 	bl	800489c <uart_print>
        break;
 80031aa:	e023      	b.n	80031f4 <print_fatfs_error+0xfc>
    case FR_EXIST:
        uart_print("FR_EXIST: Archivo ya existe\r\n");
 80031ac:	481c      	ldr	r0, [pc, #112]	; (8003220 <print_fatfs_error+0x128>)
 80031ae:	f001 fb75 	bl	800489c <uart_print>
        break;
 80031b2:	e01f      	b.n	80031f4 <print_fatfs_error+0xfc>
    case FR_INVALID_OBJECT:
        uart_print("FR_INVALID_OBJECT: Objeto invalido\r\n");
 80031b4:	481b      	ldr	r0, [pc, #108]	; (8003224 <print_fatfs_error+0x12c>)
 80031b6:	f001 fb71 	bl	800489c <uart_print>
        break;
 80031ba:	e01b      	b.n	80031f4 <print_fatfs_error+0xfc>
    case FR_WRITE_PROTECTED:
        uart_print("FR_WRITE_PROTECTED: Tarjeta protegida contra escritura\r\n");
 80031bc:	481a      	ldr	r0, [pc, #104]	; (8003228 <print_fatfs_error+0x130>)
 80031be:	f001 fb6d 	bl	800489c <uart_print>
        break;
 80031c2:	e017      	b.n	80031f4 <print_fatfs_error+0xfc>
    case FR_INVALID_DRIVE:
        uart_print("FR_INVALID_DRIVE: Unidad invalida\r\n");
 80031c4:	4819      	ldr	r0, [pc, #100]	; (800322c <print_fatfs_error+0x134>)
 80031c6:	f001 fb69 	bl	800489c <uart_print>
        break;
 80031ca:	e013      	b.n	80031f4 <print_fatfs_error+0xfc>
    case FR_NOT_ENABLED:
        uart_print("FR_NOT_ENABLED: FatFs no esta habilitado\r\n");
 80031cc:	4818      	ldr	r0, [pc, #96]	; (8003230 <print_fatfs_error+0x138>)
 80031ce:	f001 fb65 	bl	800489c <uart_print>
        break;
 80031d2:	e00f      	b.n	80031f4 <print_fatfs_error+0xfc>
    case FR_NO_FILESYSTEM:
        uart_print("FR_NO_FILESYSTEM: No hay sistema de archivos FAT valido\r\n");
 80031d4:	4817      	ldr	r0, [pc, #92]	; (8003234 <print_fatfs_error+0x13c>)
 80031d6:	f001 fb61 	bl	800489c <uart_print>
        break;
 80031da:	e00b      	b.n	80031f4 <print_fatfs_error+0xfc>
    case FR_TIMEOUT:
        uart_print("FR_TIMEOUT: Timeout de acceso\r\n");
 80031dc:	4816      	ldr	r0, [pc, #88]	; (8003238 <print_fatfs_error+0x140>)
 80031de:	f001 fb5d 	bl	800489c <uart_print>
        break;
 80031e2:	e007      	b.n	80031f4 <print_fatfs_error+0xfc>
    case FR_LOCKED:
        uart_print("FR_LOCKED: El archivo esta bloqueado\r\n");
 80031e4:	4815      	ldr	r0, [pc, #84]	; (800323c <print_fatfs_error+0x144>)
 80031e6:	f001 fb59 	bl	800489c <uart_print>
        break;
 80031ea:	e003      	b.n	80031f4 <print_fatfs_error+0xfc>
    default:
        uart_print("Codigo de error desconocido\r\n");
 80031ec:	4814      	ldr	r0, [pc, #80]	; (8003240 <print_fatfs_error+0x148>)
 80031ee:	f001 fb55 	bl	800489c <uart_print>
        break;
 80031f2:	bf00      	nop
    }
}
 80031f4:	bf00      	nop
 80031f6:	3748      	adds	r7, #72	; 0x48
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	0801231c 	.word	0x0801231c
 8003200:	08012338 	.word	0x08012338
 8003204:	08012354 	.word	0x08012354
 8003208:	0801237c 	.word	0x0801237c
 800320c:	080123a4 	.word	0x080123a4
 8003210:	080123c8 	.word	0x080123c8
 8003214:	080123ec 	.word	0x080123ec
 8003218:	08012410 	.word	0x08012410
 800321c:	08012434 	.word	0x08012434
 8003220:	08012454 	.word	0x08012454
 8003224:	08012474 	.word	0x08012474
 8003228:	0801249c 	.word	0x0801249c
 800322c:	080124d8 	.word	0x080124d8
 8003230:	080124fc 	.word	0x080124fc
 8003234:	08012528 	.word	0x08012528
 8003238:	08012564 	.word	0x08012564
 800323c:	08012584 	.word	0x08012584
 8003240:	080125ac 	.word	0x080125ac

08003244 <mp_sensors_info_init>:

/* === Private function implementation ========================================================= */

/* === Public function implementation ========================================================== */

void mp_sensors_info_init(void) {
 8003244:	b580      	push	{r7, lr}
 8003246:	b08a      	sub	sp, #40	; 0x28
 8003248:	af00      	add	r7, sp, #0
    for (int i = 0; i < sensores_disponibles; ++i) {
 800324a:	2300      	movs	r3, #0
 800324c:	627b      	str	r3, [r7, #36]	; 0x24
 800324e:	e082      	b.n	8003356 <mp_sensors_info_init+0x112>
        SPS30 * sensor = &sensores_sps30[i].sensor;
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	2258      	movs	r2, #88	; 0x58
 8003254:	fb02 f303 	mul.w	r3, r2, r3
 8003258:	4a44      	ldr	r2, [pc, #272]	; (800336c <mp_sensors_info_init+0x128>)
 800325a:	4413      	add	r3, r2
 800325c:	623b      	str	r3, [r7, #32]
        char serial[SENSOR_SERIAL_MAX_LEN] = {0};
 800325e:	2300      	movs	r3, #0
 8003260:	603b      	str	r3, [r7, #0]
 8003262:	1d3b      	adds	r3, r7, #4
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	605a      	str	r2, [r3, #4]
 800326a:	609a      	str	r2, [r3, #8]
 800326c:	60da      	str	r2, [r3, #12]
 800326e:	611a      	str	r2, [r3, #16]
 8003270:	615a      	str	r2, [r3, #20]
 8003272:	619a      	str	r2, [r3, #24]

        // Obtener serial dinámicamente
        if (sensor->serial_number(sensor, serial)) {
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003278:	463a      	mov	r2, r7
 800327a:	4611      	mov	r1, r2
 800327c:	6a38      	ldr	r0, [r7, #32]
 800327e:	4798      	blx	r3
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d026      	beq.n	80032d4 <mp_sensors_info_init+0x90>
            // Guardar serial en metadatos
            strncpy(sensor_metadata[i].serial_number, serial, SENSOR_SERIAL_MAX_LEN - 1);
 8003286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003288:	4613      	mov	r3, r2
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	4413      	add	r3, r2
 800328e:	015b      	lsls	r3, r3, #5
 8003290:	4413      	add	r3, r2
 8003292:	4a37      	ldr	r2, [pc, #220]	; (8003370 <mp_sensors_info_init+0x12c>)
 8003294:	4413      	add	r3, r2
 8003296:	4639      	mov	r1, r7
 8003298:	221f      	movs	r2, #31
 800329a:	4618      	mov	r0, r3
 800329c:	f00a fd7c 	bl	800dd98 <strncpy>
            sensor_metadata[i].serial_number[SENSOR_SERIAL_MAX_LEN - 1] = '\0';
 80032a0:	4933      	ldr	r1, [pc, #204]	; (8003370 <mp_sensors_info_init+0x12c>)
 80032a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a4:	4613      	mov	r3, r2
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	4413      	add	r3, r2
 80032aa:	015b      	lsls	r3, r3, #5
 80032ac:	4413      	add	r3, r2
 80032ae:	440b      	add	r3, r1
 80032b0:	331f      	adds	r3, #31
 80032b2:	2200      	movs	r2, #0
 80032b4:	701a      	strb	r2, [r3, #0]

            // Mensaje UART de registro
            uart_print("Sensor ID: %d -> Serial: %s\n", sensores_sps30[i].id, serial);
 80032b6:	4a2d      	ldr	r2, [pc, #180]	; (800336c <mp_sensors_info_init+0x128>)
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	2158      	movs	r1, #88	; 0x58
 80032bc:	fb01 f303 	mul.w	r3, r1, r3
 80032c0:	4413      	add	r3, r2
 80032c2:	3350      	adds	r3, #80	; 0x50
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	4619      	mov	r1, r3
 80032c8:	463b      	mov	r3, r7
 80032ca:	461a      	mov	r2, r3
 80032cc:	4829      	ldr	r0, [pc, #164]	; (8003374 <mp_sensors_info_init+0x130>)
 80032ce:	f001 fae5 	bl	800489c <uart_print>
 80032d2:	e023      	b.n	800331c <mp_sensors_info_init+0xd8>
        } else {
            strncpy(sensor_metadata[i].serial_number, "UNKNOWN", SENSOR_SERIAL_MAX_LEN - 1);
 80032d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d6:	4613      	mov	r3, r2
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	4413      	add	r3, r2
 80032dc:	015b      	lsls	r3, r3, #5
 80032de:	4413      	add	r3, r2
 80032e0:	4a23      	ldr	r2, [pc, #140]	; (8003370 <mp_sensors_info_init+0x12c>)
 80032e2:	4413      	add	r3, r2
 80032e4:	221f      	movs	r2, #31
 80032e6:	4924      	ldr	r1, [pc, #144]	; (8003378 <mp_sensors_info_init+0x134>)
 80032e8:	4618      	mov	r0, r3
 80032ea:	f00a fd55 	bl	800dd98 <strncpy>
            sensor_metadata[i].serial_number[SENSOR_SERIAL_MAX_LEN - 1] = '\0';
 80032ee:	4920      	ldr	r1, [pc, #128]	; (8003370 <mp_sensors_info_init+0x12c>)
 80032f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f2:	4613      	mov	r3, r2
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	4413      	add	r3, r2
 80032f8:	015b      	lsls	r3, r3, #5
 80032fa:	4413      	add	r3, r2
 80032fc:	440b      	add	r3, r1
 80032fe:	331f      	adds	r3, #31
 8003300:	2200      	movs	r2, #0
 8003302:	701a      	strb	r2, [r3, #0]
            uart_print("[WARN] Sensor ID: %d -> No se pudo obtener el número de serie\n",
                       sensores_sps30[i].id);
 8003304:	4a19      	ldr	r2, [pc, #100]	; (800336c <mp_sensors_info_init+0x128>)
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	2158      	movs	r1, #88	; 0x58
 800330a:	fb01 f303 	mul.w	r3, r1, r3
 800330e:	4413      	add	r3, r2
 8003310:	3350      	adds	r3, #80	; 0x50
 8003312:	781b      	ldrb	r3, [r3, #0]
            uart_print("[WARN] Sensor ID: %d -> No se pudo obtener el número de serie\n",
 8003314:	4619      	mov	r1, r3
 8003316:	4819      	ldr	r0, [pc, #100]	; (800337c <mp_sensors_info_init+0x138>)
 8003318:	f001 fac0 	bl	800489c <uart_print>
        }

        // Nombre de ubicación fijo (puede adaptarse por sensor si es necesario)
        strncpy(sensor_metadata[i].location_name, LOCATION_NAME,
 800331c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800331e:	4613      	mov	r3, r2
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	4413      	add	r3, r2
 8003324:	015b      	lsls	r3, r3, #5
 8003326:	4413      	add	r3, r2
 8003328:	3320      	adds	r3, #32
 800332a:	4a11      	ldr	r2, [pc, #68]	; (8003370 <mp_sensors_info_init+0x12c>)
 800332c:	4413      	add	r3, r2
 800332e:	3301      	adds	r3, #1
 8003330:	223f      	movs	r2, #63	; 0x3f
 8003332:	4913      	ldr	r1, [pc, #76]	; (8003380 <mp_sensors_info_init+0x13c>)
 8003334:	4618      	mov	r0, r3
 8003336:	f00a fd2f 	bl	800dd98 <strncpy>
                sizeof(sensor_metadata[i].location_name) - 1);
        sensor_metadata[i].location_name[sizeof(sensor_metadata[i].location_name) - 1] = '\0';
 800333a:	490d      	ldr	r1, [pc, #52]	; (8003370 <mp_sensors_info_init+0x12c>)
 800333c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800333e:	4613      	mov	r3, r2
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	4413      	add	r3, r2
 8003344:	015b      	lsls	r3, r3, #5
 8003346:	4413      	add	r3, r2
 8003348:	440b      	add	r3, r1
 800334a:	3360      	adds	r3, #96	; 0x60
 800334c:	2200      	movs	r2, #0
 800334e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < sensores_disponibles; ++i) {
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	3301      	adds	r3, #1
 8003354:	627b      	str	r3, [r7, #36]	; 0x24
 8003356:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <mp_sensors_info_init+0x140>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800335c:	429a      	cmp	r2, r3
 800335e:	f6ff af77 	blt.w	8003250 <mp_sensors_info_init+0xc>
    }
}
 8003362:	bf00      	nop
 8003364:	bf00      	nop
 8003366:	3728      	adds	r7, #40	; 0x28
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	20002254 	.word	0x20002254
 8003370:	20000034 	.word	0x20000034
 8003374:	080125cc 	.word	0x080125cc
 8003378:	080125ec 	.word	0x080125ec
 800337c:	080125f4 	.word	0x080125f4
 8003380:	08012634 	.word	0x08012634
 8003384:	2000235c 	.word	0x2000235c

08003388 <proceso_observador_3PM_2TH>:
                                 "Error leyendo hora del RTC\r\n");
}

bool proceso_observador_3PM_2TH(SPS30 *sensor, uint8_t sensor_id,
                                const char *datetime_str, float temp_amb,
                                float hum_amb, float temp_cam, float hum_cam) {
 8003388:	b580      	push	{r7, lr}
 800338a:	b088      	sub	sp, #32
 800338c:	af00      	add	r7, sp, #0
 800338e:	61f8      	str	r0, [r7, #28]
 8003390:	460b      	mov	r3, r1
 8003392:	617a      	str	r2, [r7, #20]
 8003394:	ed87 0a04 	vstr	s0, [r7, #16]
 8003398:	edc7 0a03 	vstr	s1, [r7, #12]
 800339c:	ed87 1a02 	vstr	s2, [r7, #8]
 80033a0:	edc7 1a01 	vstr	s3, [r7, #4]
 80033a4:	76fb      	strb	r3, [r7, #27]
  return proceso_observador_base(sensor, sensor_id, datetime_str, temp_amb,
 80033a6:	7ef9      	ldrb	r1, [r7, #27]
 80033a8:	4b08      	ldr	r3, [pc, #32]	; (80033cc <proceso_observador_3PM_2TH+0x44>)
 80033aa:	edd7 1a01 	vldr	s3, [r7, #4]
 80033ae:	ed97 1a02 	vldr	s2, [r7, #8]
 80033b2:	edd7 0a03 	vldr	s1, [r7, #12]
 80033b6:	ed97 0a04 	vldr	s0, [r7, #16]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	69f8      	ldr	r0, [r7, #28]
 80033be:	f000 f807 	bl	80033d0 <proceso_observador_base>
 80033c2:	4603      	mov	r3, r0
                                 hum_amb, temp_cam, hum_cam,
                                 "⚠️ Error leyendo hora del RTC\r\n");
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3720      	adds	r7, #32
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	08012670 	.word	0x08012670

080033d0 <proceso_observador_base>:

static bool proceso_observador_base(SPS30 *sensor, uint8_t sensor_id,
                                    const char *datetime_str, float temp_amb,
                                    float hum_amb, float temp_cam,
                                    float hum_cam, const char *rtc_error_msg) {
 80033d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033d4:	b0fd      	sub	sp, #500	; 0x1f4
 80033d6:	af0a      	add	r7, sp, #40	; 0x28
 80033d8:	f507 74e4 	add.w	r4, r7, #456	; 0x1c8
 80033dc:	f5a4 74d6 	sub.w	r4, r4, #428	; 0x1ac
 80033e0:	6020      	str	r0, [r4, #0]
 80033e2:	4608      	mov	r0, r1
 80033e4:	f507 71e4 	add.w	r1, r7, #456	; 0x1c8
 80033e8:	f5a1 71da 	sub.w	r1, r1, #436	; 0x1b4
 80033ec:	600a      	str	r2, [r1, #0]
 80033ee:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 80033f2:	f5a2 72dc 	sub.w	r2, r2, #440	; 0x1b8
 80033f6:	ed82 0a00 	vstr	s0, [r2]
 80033fa:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 80033fe:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 8003402:	edc2 0a00 	vstr	s1, [r2]
 8003406:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 800340a:	f5a2 72e0 	sub.w	r2, r2, #448	; 0x1c0
 800340e:	ed82 1a00 	vstr	s2, [r2]
 8003412:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8003416:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 800341a:	edc2 1a00 	vstr	s3, [r2]
 800341e:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8003422:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003426:	6013      	str	r3, [r2, #0]
 8003428:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800342c:	f2a3 13ad 	subw	r3, r3, #429	; 0x1ad
 8003430:	4602      	mov	r2, r0
 8003432:	701a      	strb	r2, [r3, #0]
  int reintentos = NUM_REINT;
 8003434:	2303      	movs	r3, #3
 8003436:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4

  while (reintentos--) {
 800343a:	e15e      	b.n	80036fa <proceso_observador_base+0x32a>
    sensor->start_measurement(sensor);
 800343c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003440:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003448:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 800344c:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 8003450:	6810      	ldr	r0, [r2, #0]
 8003452:	4798      	blx	r3
    HAL_Delay(HAL_DELAY_SIGUIENTE_MEDICION);
 8003454:	f241 3088 	movw	r0, #5000	; 0x1388
 8003458:	f002 fa8a 	bl	8005970 <HAL_Delay>

    ConcentracionesPM pm = sensor->get_concentrations(sensor);
 800345c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003460:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003468:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 800346c:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 8003470:	6810      	ldr	r0, [r2, #0]
 8003472:	4798      	blx	r3
 8003474:	eeb0 6a40 	vmov.f32	s12, s0
 8003478:	eef0 6a60 	vmov.f32	s13, s1
 800347c:	eeb0 7a41 	vmov.f32	s14, s2
 8003480:	eef0 7a61 	vmov.f32	s15, s3
 8003484:	ed87 6a55 	vstr	s12, [r7, #340]	; 0x154
 8003488:	edc7 6a56 	vstr	s13, [r7, #344]	; 0x158
 800348c:	ed87 7a57 	vstr	s14, [r7, #348]	; 0x15c
 8003490:	edc7 7a58 	vstr	s15, [r7, #352]	; 0x160
    sensor->stop_measurement(sensor);
 8003494:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003498:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a0:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 80034a4:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 80034a8:	6810      	ldr	r0, [r2, #0]
 80034aa:	4798      	blx	r3

    if ((pm.pm1_0 > CONC_MIN_PM && pm.pm1_0 < CONC_MAX_PM) ||
 80034ac:	edd7 7a55 	vldr	s15, [r7, #340]	; 0x154
 80034b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b8:	dd08      	ble.n	80034cc <proceso_observador_base+0xfc>
 80034ba:	edd7 7a55 	vldr	s15, [r7, #340]	; 0x154
 80034be:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8003748 <proceso_observador_base+0x378>
 80034c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ca:	d431      	bmi.n	8003530 <proceso_observador_base+0x160>
        (pm.pm2_5 > CONC_MIN_PM && pm.pm2_5 < CONC_MAX_PM) ||
 80034cc:	edd7 7a56 	vldr	s15, [r7, #344]	; 0x158
    if ((pm.pm1_0 > CONC_MIN_PM && pm.pm1_0 < CONC_MAX_PM) ||
 80034d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d8:	dd08      	ble.n	80034ec <proceso_observador_base+0x11c>
        (pm.pm2_5 > CONC_MIN_PM && pm.pm2_5 < CONC_MAX_PM) ||
 80034da:	edd7 7a56 	vldr	s15, [r7, #344]	; 0x158
 80034de:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8003748 <proceso_observador_base+0x378>
 80034e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ea:	d421      	bmi.n	8003530 <proceso_observador_base+0x160>
        (pm.pm4_0 > CONC_MIN_PM && pm.pm4_0 < CONC_MAX_PM) ||
 80034ec:	edd7 7a57 	vldr	s15, [r7, #348]	; 0x15c
        (pm.pm2_5 > CONC_MIN_PM && pm.pm2_5 < CONC_MAX_PM) ||
 80034f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f8:	dd08      	ble.n	800350c <proceso_observador_base+0x13c>
        (pm.pm4_0 > CONC_MIN_PM && pm.pm4_0 < CONC_MAX_PM) ||
 80034fa:	edd7 7a57 	vldr	s15, [r7, #348]	; 0x15c
 80034fe:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8003748 <proceso_observador_base+0x378>
 8003502:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800350a:	d411      	bmi.n	8003530 <proceso_observador_base+0x160>
        (pm.pm10 > CONC_MIN_PM && pm.pm10 < CONC_MAX_PM)) {
 800350c:	edd7 7a58 	vldr	s15, [r7, #352]	; 0x160
        (pm.pm4_0 > CONC_MIN_PM && pm.pm4_0 < CONC_MAX_PM) ||
 8003510:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003518:	f340 80eb 	ble.w	80036f2 <proceso_observador_base+0x322>
        (pm.pm10 > CONC_MIN_PM && pm.pm10 < CONC_MAX_PM)) {
 800351c:	edd7 7a58 	vldr	s15, [r7, #352]	; 0x160
 8003520:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8003748 <proceso_observador_base+0x378>
 8003524:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800352c:	f140 80e1 	bpl.w	80036f2 <proceso_observador_base+0x322>

      ds3231_time_t dt;
      if (!ds3231_get_datetime(&dt)) {
 8003530:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8003534:	4618      	mov	r0, r3
 8003536:	f000 fb23 	bl	8003b80 <ds3231_get_datetime>
 800353a:	4603      	mov	r3, r0
 800353c:	f083 0301 	eor.w	r3, r3, #1
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d009      	beq.n	800355a <proceso_observador_base+0x18a>
        uart_print("%s", rtc_error_msg);
 8003546:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800354a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800354e:	6819      	ldr	r1, [r3, #0]
 8003550:	487e      	ldr	r0, [pc, #504]	; (800374c <proceso_observador_base+0x37c>)
 8003552:	f001 f9a3 	bl	800489c <uart_print>
        return false;
 8003556:	2300      	movs	r3, #0
 8003558:	e0ef      	b.n	800373a <proceso_observador_base+0x36a>
      }

      char buffer[BUFFER_SIZE_MSG_PM_FORMAT];
      snprintf(buffer, sizeof(buffer), MSG_PM_FORMAT_WITH_TIME, datetime_str,
 800355a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800355e:	f2a3 13ad 	subw	r3, r3, #429	; 0x1ad
 8003562:	781e      	ldrb	r6, [r3, #0]
               sensor_id, pm.pm1_0, pm.pm2_5, pm.pm4_0, pm.pm10);
 8003564:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
      snprintf(buffer, sizeof(buffer), MSG_PM_FORMAT_WITH_TIME, datetime_str,
 8003568:	4618      	mov	r0, r3
 800356a:	f7fc fffd 	bl	8000568 <__aeabi_f2d>
 800356e:	4604      	mov	r4, r0
 8003570:	460d      	mov	r5, r1
               sensor_id, pm.pm1_0, pm.pm2_5, pm.pm4_0, pm.pm10);
 8003572:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
      snprintf(buffer, sizeof(buffer), MSG_PM_FORMAT_WITH_TIME, datetime_str,
 8003576:	4618      	mov	r0, r3
 8003578:	f7fc fff6 	bl	8000568 <__aeabi_f2d>
 800357c:	4680      	mov	r8, r0
 800357e:	4689      	mov	r9, r1
               sensor_id, pm.pm1_0, pm.pm2_5, pm.pm4_0, pm.pm10);
 8003580:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
      snprintf(buffer, sizeof(buffer), MSG_PM_FORMAT_WITH_TIME, datetime_str,
 8003584:	4618      	mov	r0, r3
 8003586:	f7fc ffef 	bl	8000568 <__aeabi_f2d>
 800358a:	4682      	mov	sl, r0
 800358c:	468b      	mov	fp, r1
               sensor_id, pm.pm1_0, pm.pm2_5, pm.pm4_0, pm.pm10);
 800358e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
      snprintf(buffer, sizeof(buffer), MSG_PM_FORMAT_WITH_TIME, datetime_str,
 8003592:	4618      	mov	r0, r3
 8003594:	f7fc ffe8 	bl	8000568 <__aeabi_f2d>
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	f507 71e4 	add.w	r1, r7, #456	; 0x1c8
 80035a0:	f5a1 71da 	sub.w	r1, r1, #436	; 0x1b4
 80035a4:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80035a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80035ac:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80035b0:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80035b4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80035b8:	9600      	str	r6, [sp, #0]
 80035ba:	680b      	ldr	r3, [r1, #0]
 80035bc:	4a64      	ldr	r2, [pc, #400]	; (8003750 <proceso_observador_base+0x380>)
 80035be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035c2:	f00a fb2d 	bl	800dc20 <sniprintf>
      uart_print("%s", buffer);
 80035c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80035ca:	4619      	mov	r1, r3
 80035cc:	485f      	ldr	r0, [pc, #380]	; (800374c <proceso_observador_base+0x37c>)
 80035ce:	f001 f965 	bl	800489c <uart_print>

      ParticulateData data = {
 80035d2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80035d6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80035da:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 80035de:	f2a2 12ad 	subw	r2, r2, #429	; 0x1ad
 80035e2:	7812      	ldrb	r2, [r2, #0]
 80035e4:	701a      	strb	r2, [r3, #0]
          .sensor_id = sensor_id,
          .pm1_0 = pm.pm1_0,
 80035e6:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
      ParticulateData data = {
 80035ea:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80035ee:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80035f2:	605a      	str	r2, [r3, #4]
          .pm2_5 = pm.pm2_5,
 80035f4:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
      ParticulateData data = {
 80035f8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80035fc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003600:	609a      	str	r2, [r3, #8]
          .pm4_0 = pm.pm4_0,
 8003602:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
      ParticulateData data = {
 8003606:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800360a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800360e:	60da      	str	r2, [r3, #12]
          .pm10 = pm.pm10,
 8003610:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
      ParticulateData data = {
 8003614:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003618:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800361c:	611a      	str	r2, [r3, #16]
 800361e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003622:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003626:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 800362a:	f5a2 72dc 	sub.w	r2, r2, #440	; 0x1b8
 800362e:	6812      	ldr	r2, [r2, #0]
 8003630:	615a      	str	r2, [r3, #20]
 8003632:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003636:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800363a:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 800363e:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 8003642:	6812      	ldr	r2, [r2, #0]
 8003644:	619a      	str	r2, [r3, #24]
 8003646:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800364a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800364e:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8003652:	f5a2 72e0 	sub.w	r2, r2, #448	; 0x1c0
 8003656:	6812      	ldr	r2, [r2, #0]
 8003658:	61da      	str	r2, [r3, #28]
 800365a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800365e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003662:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8003666:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 800366a:	6812      	ldr	r2, [r2, #0]
 800366c:	621a      	str	r2, [r3, #32]
          .temp_amb = temp_amb,
          .hum_amb = hum_amb,
          .temp_cam = temp_cam,
          .hum_cam = hum_cam,
          .year = dt.year,
 800366e:	f8b7 2152 	ldrh.w	r2, [r7, #338]	; 0x152
      ParticulateData data = {
 8003672:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003676:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800367a:	849a      	strh	r2, [r3, #36]	; 0x24
          .month = dt.month,
 800367c:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
      ParticulateData data = {
 8003680:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003684:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003688:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
          .day = dt.day,
 800368c:	f897 214f 	ldrb.w	r2, [r7, #335]	; 0x14f
      ParticulateData data = {
 8003690:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003694:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003698:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
          .hour = dt.hour,
 800369c:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
      ParticulateData data = {
 80036a0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80036a4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80036a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
          .min = dt.min,
 80036ac:	f897 214d 	ldrb.w	r2, [r7, #333]	; 0x14d
      ParticulateData data = {
 80036b0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80036b4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80036b8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
          .sec = dt.sec,
 80036bc:	f897 214e 	ldrb.w	r2, [r7, #334]	; 0x14e
      ParticulateData data = {
 80036c0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80036c4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80036c8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
      };

      data_logger_store_raw(&data);
 80036cc:	f107 0320 	add.w	r3, r7, #32
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7fe fd81 	bl	80021d8 <data_logger_store_raw>
      registrar_lectura_pm25(sensor_id, pm.pm2_5);
 80036d6:	edd7 7a56 	vldr	s15, [r7, #344]	; 0x158
 80036da:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80036de:	f2a3 13ad 	subw	r3, r3, #429	; 0x1ad
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	eeb0 0a67 	vmov.f32	s0, s15
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 f837 	bl	800375c <registrar_lectura_pm25>
      return true;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e023      	b.n	800373a <proceso_observador_base+0x36a>
    }

    uart_print("%s", MSG_ERROR_REINT);
 80036f2:	4918      	ldr	r1, [pc, #96]	; (8003754 <proceso_observador_base+0x384>)
 80036f4:	4815      	ldr	r0, [pc, #84]	; (800374c <proceso_observador_base+0x37c>)
 80036f6:	f001 f8d1 	bl	800489c <uart_print>
  while (reintentos--) {
 80036fa:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80036fe:	1e5a      	subs	r2, r3, #1
 8003700:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8003704:	2b00      	cmp	r3, #0
 8003706:	f47f ae99 	bne.w	800343c <proceso_observador_base+0x6c>
  }

  char error_msg[BUFFER_SIZE_MSG_ERROR_FALLO];
  snprintf(error_msg, sizeof(error_msg), MSG_ERROR_FALLO, datetime_str,
 800370a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800370e:	f2a3 13ad 	subw	r3, r3, #429	; 0x1ad
 8003712:	781a      	ldrb	r2, [r3, #0]
 8003714:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003718:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800371c:	f507 70b2 	add.w	r0, r7, #356	; 0x164
 8003720:	9200      	str	r2, [sp, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a0c      	ldr	r2, [pc, #48]	; (8003758 <proceso_observador_base+0x388>)
 8003726:	2160      	movs	r1, #96	; 0x60
 8003728:	f00a fa7a 	bl	800dc20 <sniprintf>
           sensor_id);
  uart_print("%s", error_msg);
 800372c:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8003730:	4619      	mov	r1, r3
 8003732:	4806      	ldr	r0, [pc, #24]	; (800374c <proceso_observador_base+0x37c>)
 8003734:	f001 f8b2 	bl	800489c <uart_print>
  return false;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	f507 77e6 	add.w	r7, r7, #460	; 0x1cc
 8003740:	46bd      	mov	sp, r7
 8003742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003746:	bf00      	nop
 8003748:	447a0000 	.word	0x447a0000
 800374c:	08012694 	.word	0x08012694
 8003750:	08012698 	.word	0x08012698
 8003754:	080126ec 	.word	0x080126ec
 8003758:	08012724 	.word	0x08012724

0800375c <registrar_lectura_pm25>:

void registrar_lectura_pm25(uint8_t sensor_id, float pm25)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	4603      	mov	r3, r0
 8003764:	ed87 0a00 	vstr	s0, [r7]
 8003768:	71fb      	strb	r3, [r7, #7]
    if (sensor_id >= 1 && sensor_id <= 3) {
 800376a:	79fb      	ldrb	r3, [r7, #7]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d02c      	beq.n	80037ca <registrar_lectura_pm25+0x6e>
 8003770:	79fb      	ldrb	r3, [r7, #7]
 8003772:	2b03      	cmp	r3, #3
 8003774:	d829      	bhi.n	80037ca <registrar_lectura_pm25+0x6e>
        pm25_sensores[sensor_id - 1] = pm25;
 8003776:	79fb      	ldrb	r3, [r7, #7]
 8003778:	3b01      	subs	r3, #1
 800377a:	4a16      	ldr	r2, [pc, #88]	; (80037d4 <registrar_lectura_pm25+0x78>)
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	601a      	str	r2, [r3, #0]
        sensores_recibidos++;
 8003784:	4b14      	ldr	r3, [pc, #80]	; (80037d8 <registrar_lectura_pm25+0x7c>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	3301      	adds	r3, #1
 800378a:	4a13      	ldr	r2, [pc, #76]	; (80037d8 <registrar_lectura_pm25+0x7c>)
 800378c:	6013      	str	r3, [r2, #0]

        if (sensores_recibidos == 3) {
 800378e:	4b12      	ldr	r3, [pc, #72]	; (80037d8 <registrar_lectura_pm25+0x7c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2b03      	cmp	r3, #3
 8003794:	d119      	bne.n	80037ca <registrar_lectura_pm25+0x6e>
            // Ciclo completo
            float promedio_ciclo = (pm25_sensores[0] + pm25_sensores[1] + pm25_sensores[2]) / 3.0f;
 8003796:	4b0f      	ldr	r3, [pc, #60]	; (80037d4 <registrar_lectura_pm25+0x78>)
 8003798:	ed93 7a00 	vldr	s14, [r3]
 800379c:	4b0d      	ldr	r3, [pc, #52]	; (80037d4 <registrar_lectura_pm25+0x78>)
 800379e:	edd3 7a01 	vldr	s15, [r3, #4]
 80037a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037a6:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <registrar_lectura_pm25+0x78>)
 80037a8:	edd3 7a02 	vldr	s15, [r3, #8]
 80037ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037b0:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80037b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037b8:	edc7 7a03 	vstr	s15, [r7, #12]

            proceso_analisis_periodico(promedio_ciclo);  // ✅ alimenta buffers
 80037bc:	ed97 0a03 	vldr	s0, [r7, #12]
 80037c0:	f7fe fa6e 	bl	8001ca0 <proceso_analisis_periodico>

            sensores_recibidos = 0;  // reiniciar para próximo ciclo
 80037c4:	4b04      	ldr	r3, [pc, #16]	; (80037d8 <registrar_lectura_pm25+0x7c>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	601a      	str	r2, [r3, #0]
        }
    }
}
 80037ca:	bf00      	nop
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	20002230 	.word	0x20002230
 80037d8:	2000223c 	.word	0x2000223c

080037dc <DS3231_Init>:
#include <string.h>
#include <stdlib.h>

static I2C_HandleTypeDef * _ds3231_i2c = NULL;

void DS3231_Init(I2C_HandleTypeDef * hi2c) {
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
    _ds3231_i2c = hi2c;
 80037e4:	4a04      	ldr	r2, [pc, #16]	; (80037f8 <DS3231_Init+0x1c>)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6013      	str	r3, [r2, #0]
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	20002240 	.word	0x20002240

080037fc <DS3231_GetRegByte>:

bool DS3231_IsConnected(void) {
    return HAL_I2C_IsDeviceReady(_ds3231_i2c, DS3231_I2C_ADDR << 1, 3, DS3231_TIMEOUT) == HAL_OK;
}

uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af02      	add	r7, sp, #8
 8003802:	4603      	mov	r3, r0
 8003804:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    HAL_I2C_Master_Transmit(_ds3231_i2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 8003806:	4b0c      	ldr	r3, [pc, #48]	; (8003838 <DS3231_GetRegByte+0x3c>)
 8003808:	6818      	ldr	r0, [r3, #0]
 800380a:	1dfa      	adds	r2, r7, #7
 800380c:	2364      	movs	r3, #100	; 0x64
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	2301      	movs	r3, #1
 8003812:	21d0      	movs	r1, #208	; 0xd0
 8003814:	f002 fde4 	bl	80063e0 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(_ds3231_i2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 8003818:	4b07      	ldr	r3, [pc, #28]	; (8003838 <DS3231_GetRegByte+0x3c>)
 800381a:	6818      	ldr	r0, [r3, #0]
 800381c:	f107 020f 	add.w	r2, r7, #15
 8003820:	2364      	movs	r3, #100	; 0x64
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	2301      	movs	r3, #1
 8003826:	21d0      	movs	r1, #208	; 0xd0
 8003828:	f002 fed8 	bl	80065dc <HAL_I2C_Master_Receive>
    return val;
 800382c:	7bfb      	ldrb	r3, [r7, #15]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	20002240 	.word	0x20002240

0800383c <DS3231_DecodeBCD>:
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
    uint8_t data[2] = {regAddr, val};
    HAL_I2C_Master_Transmit(_ds3231_i2c, DS3231_I2C_ADDR << 1, data, 2, DS3231_TIMEOUT);
}

uint8_t DS3231_DecodeBCD(uint8_t bcd) {
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	71fb      	strb	r3, [r7, #7]
    return ((bcd >> 4) * 10) + (bcd & 0x0F);
 8003846:	79fb      	ldrb	r3, [r7, #7]
 8003848:	091b      	lsrs	r3, r3, #4
 800384a:	b2db      	uxtb	r3, r3
 800384c:	461a      	mov	r2, r3
 800384e:	0092      	lsls	r2, r2, #2
 8003850:	4413      	add	r3, r2
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	b2da      	uxtb	r2, r3
 8003856:	79fb      	ldrb	r3, [r7, #7]
 8003858:	f003 030f 	and.w	r3, r3, #15
 800385c:	b2db      	uxtb	r3, r3
 800385e:	4413      	add	r3, r2
 8003860:	b2db      	uxtb	r3, r3
}
 8003862:	4618      	mov	r0, r3
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
	...

08003870 <DS3231_EncodeBCD>:

uint8_t DS3231_EncodeBCD(uint8_t dec) {
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	71fb      	strb	r3, [r7, #7]
    return ((dec / 10) << 4) | (dec % 10);
 800387a:	79fb      	ldrb	r3, [r7, #7]
 800387c:	4a0d      	ldr	r2, [pc, #52]	; (80038b4 <DS3231_EncodeBCD+0x44>)
 800387e:	fba2 2303 	umull	r2, r3, r2, r3
 8003882:	08db      	lsrs	r3, r3, #3
 8003884:	b2db      	uxtb	r3, r3
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	b258      	sxtb	r0, r3
 800388a:	79fa      	ldrb	r2, [r7, #7]
 800388c:	4b09      	ldr	r3, [pc, #36]	; (80038b4 <DS3231_EncodeBCD+0x44>)
 800388e:	fba3 1302 	umull	r1, r3, r3, r2
 8003892:	08d9      	lsrs	r1, r3, #3
 8003894:	460b      	mov	r3, r1
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	440b      	add	r3, r1
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	b25b      	sxtb	r3, r3
 80038a2:	4303      	orrs	r3, r0
 80038a4:	b25b      	sxtb	r3, r3
 80038a6:	b2db      	uxtb	r3, r3
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	cccccccd 	.word	0xcccccccd

080038b8 <DS3231_GetDateTime>:

bool DS3231_GetDateTime(DS3231_DateTime * dt) {
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
    uint8_t raw;

    raw = DS3231_GetRegByte(DS3231_REG_SECOND);
 80038c0:	2000      	movs	r0, #0
 80038c2:	f7ff ff9b 	bl	80037fc <DS3231_GetRegByte>
 80038c6:	4603      	mov	r3, r0
 80038c8:	73fb      	strb	r3, [r7, #15]
    if (raw == 0xFF)
 80038ca:	7bfb      	ldrb	r3, [r7, #15]
 80038cc:	2bff      	cmp	r3, #255	; 0xff
 80038ce:	d101      	bne.n	80038d4 <DS3231_GetDateTime+0x1c>
        return false;
 80038d0:	2300      	movs	r3, #0
 80038d2:	e06b      	b.n	80039ac <DS3231_GetDateTime+0xf4>
    dt->seconds = DS3231_DecodeBCD(raw);
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff ffb0 	bl	800383c <DS3231_DecodeBCD>
 80038dc:	4603      	mov	r3, r0
 80038de:	461a      	mov	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	701a      	strb	r2, [r3, #0]

    raw = DS3231_GetRegByte(DS3231_REG_MINUTE);
 80038e4:	2001      	movs	r0, #1
 80038e6:	f7ff ff89 	bl	80037fc <DS3231_GetRegByte>
 80038ea:	4603      	mov	r3, r0
 80038ec:	73fb      	strb	r3, [r7, #15]
    if (raw == 0xFF)
 80038ee:	7bfb      	ldrb	r3, [r7, #15]
 80038f0:	2bff      	cmp	r3, #255	; 0xff
 80038f2:	d101      	bne.n	80038f8 <DS3231_GetDateTime+0x40>
        return false;
 80038f4:	2300      	movs	r3, #0
 80038f6:	e059      	b.n	80039ac <DS3231_GetDateTime+0xf4>
    dt->minutes = DS3231_DecodeBCD(raw);
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7ff ff9e 	bl	800383c <DS3231_DecodeBCD>
 8003900:	4603      	mov	r3, r0
 8003902:	461a      	mov	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	705a      	strb	r2, [r3, #1]

    raw = DS3231_GetRegByte(DS3231_REG_HOUR);
 8003908:	2002      	movs	r0, #2
 800390a:	f7ff ff77 	bl	80037fc <DS3231_GetRegByte>
 800390e:	4603      	mov	r3, r0
 8003910:	73fb      	strb	r3, [r7, #15]
    if (raw == 0xFF)
 8003912:	7bfb      	ldrb	r3, [r7, #15]
 8003914:	2bff      	cmp	r3, #255	; 0xff
 8003916:	d101      	bne.n	800391c <DS3231_GetDateTime+0x64>
        return false;
 8003918:	2300      	movs	r3, #0
 800391a:	e047      	b.n	80039ac <DS3231_GetDateTime+0xf4>
    dt->hours = DS3231_DecodeBCD(raw & 0x3F); // Formato 24h, sin bit AM/PM
 800391c:	7bfb      	ldrb	r3, [r7, #15]
 800391e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003922:	b2db      	uxtb	r3, r3
 8003924:	4618      	mov	r0, r3
 8003926:	f7ff ff89 	bl	800383c <DS3231_DecodeBCD>
 800392a:	4603      	mov	r3, r0
 800392c:	461a      	mov	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	709a      	strb	r2, [r3, #2]

    raw = DS3231_GetRegByte(DS3231_REG_DATE);
 8003932:	2004      	movs	r0, #4
 8003934:	f7ff ff62 	bl	80037fc <DS3231_GetRegByte>
 8003938:	4603      	mov	r3, r0
 800393a:	73fb      	strb	r3, [r7, #15]
    if (raw == 0xFF)
 800393c:	7bfb      	ldrb	r3, [r7, #15]
 800393e:	2bff      	cmp	r3, #255	; 0xff
 8003940:	d101      	bne.n	8003946 <DS3231_GetDateTime+0x8e>
        return false;
 8003942:	2300      	movs	r3, #0
 8003944:	e032      	b.n	80039ac <DS3231_GetDateTime+0xf4>
    dt->day = DS3231_DecodeBCD(raw);
 8003946:	7bfb      	ldrb	r3, [r7, #15]
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff ff77 	bl	800383c <DS3231_DecodeBCD>
 800394e:	4603      	mov	r3, r0
 8003950:	461a      	mov	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	70da      	strb	r2, [r3, #3]

    raw = DS3231_GetRegByte(DS3231_REG_MONTH);
 8003956:	2005      	movs	r0, #5
 8003958:	f7ff ff50 	bl	80037fc <DS3231_GetRegByte>
 800395c:	4603      	mov	r3, r0
 800395e:	73fb      	strb	r3, [r7, #15]
    if (raw == 0xFF)
 8003960:	7bfb      	ldrb	r3, [r7, #15]
 8003962:	2bff      	cmp	r3, #255	; 0xff
 8003964:	d101      	bne.n	800396a <DS3231_GetDateTime+0xb2>
        return false;
 8003966:	2300      	movs	r3, #0
 8003968:	e020      	b.n	80039ac <DS3231_GetDateTime+0xf4>
    dt->month = DS3231_DecodeBCD(raw & 0x1F); // Bit 7 = siglo (ignorado)
 800396a:	7bfb      	ldrb	r3, [r7, #15]
 800396c:	f003 031f 	and.w	r3, r3, #31
 8003970:	b2db      	uxtb	r3, r3
 8003972:	4618      	mov	r0, r3
 8003974:	f7ff ff62 	bl	800383c <DS3231_DecodeBCD>
 8003978:	4603      	mov	r3, r0
 800397a:	461a      	mov	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	711a      	strb	r2, [r3, #4]

    raw = DS3231_GetRegByte(DS3231_REG_YEAR);
 8003980:	2006      	movs	r0, #6
 8003982:	f7ff ff3b 	bl	80037fc <DS3231_GetRegByte>
 8003986:	4603      	mov	r3, r0
 8003988:	73fb      	strb	r3, [r7, #15]
    if (raw == 0xFF)
 800398a:	7bfb      	ldrb	r3, [r7, #15]
 800398c:	2bff      	cmp	r3, #255	; 0xff
 800398e:	d101      	bne.n	8003994 <DS3231_GetDateTime+0xdc>
        return false;
 8003990:	2300      	movs	r3, #0
 8003992:	e00b      	b.n	80039ac <DS3231_GetDateTime+0xf4>
    dt->year = 2000 + DS3231_DecodeBCD(raw); // Año 20xx
 8003994:	7bfb      	ldrb	r3, [r7, #15]
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff ff50 	bl	800383c <DS3231_DecodeBCD>
 800399c:	4603      	mov	r3, r0
 800399e:	b29b      	uxth	r3, r3
 80039a0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	80da      	strh	r2, [r3, #6]

    return true;
 80039aa:	2301      	movs	r3, #1
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <DS3231_SetDateTime>:

bool DS3231_SetDateTime(const DS3231_DateTime * dt) {
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b088      	sub	sp, #32
 80039b8:	af04      	add	r7, sp, #16
 80039ba:	6078      	str	r0, [r7, #4]
    uint8_t buffer[7];

    buffer[0] = DS3231_EncodeBCD(dt->seconds);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7ff ff55 	bl	8003870 <DS3231_EncodeBCD>
 80039c6:	4603      	mov	r3, r0
 80039c8:	723b      	strb	r3, [r7, #8]
    buffer[1] = DS3231_EncodeBCD(dt->minutes);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	785b      	ldrb	r3, [r3, #1]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7ff ff4e 	bl	8003870 <DS3231_EncodeBCD>
 80039d4:	4603      	mov	r3, r0
 80039d6:	727b      	strb	r3, [r7, #9]
    buffer[2] = DS3231_EncodeBCD(dt->hours);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	789b      	ldrb	r3, [r3, #2]
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff ff47 	bl	8003870 <DS3231_EncodeBCD>
 80039e2:	4603      	mov	r3, r0
 80039e4:	72bb      	strb	r3, [r7, #10]
    buffer[3] = 1; // Día de la semana fijo
 80039e6:	2301      	movs	r3, #1
 80039e8:	72fb      	strb	r3, [r7, #11]
    buffer[4] = DS3231_EncodeBCD(dt->day);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	78db      	ldrb	r3, [r3, #3]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7ff ff3e 	bl	8003870 <DS3231_EncodeBCD>
 80039f4:	4603      	mov	r3, r0
 80039f6:	733b      	strb	r3, [r7, #12]
    buffer[5] = DS3231_EncodeBCD(dt->month);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	791b      	ldrb	r3, [r3, #4]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff ff37 	bl	8003870 <DS3231_EncodeBCD>
 8003a02:	4603      	mov	r3, r0
 8003a04:	737b      	strb	r3, [r7, #13]
    buffer[6] = DS3231_EncodeBCD(dt->year % 100);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	88db      	ldrh	r3, [r3, #6]
 8003a0a:	4a16      	ldr	r2, [pc, #88]	; (8003a64 <DS3231_SetDateTime+0xb0>)
 8003a0c:	fba2 1203 	umull	r1, r2, r2, r3
 8003a10:	0952      	lsrs	r2, r2, #5
 8003a12:	2164      	movs	r1, #100	; 0x64
 8003a14:	fb01 f202 	mul.w	r2, r1, r2
 8003a18:	1a9b      	subs	r3, r3, r2
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff ff26 	bl	8003870 <DS3231_EncodeBCD>
 8003a24:	4603      	mov	r3, r0
 8003a26:	73bb      	strb	r3, [r7, #14]

    HAL_StatusTypeDef status =
        HAL_I2C_Mem_Write(_ds3231_i2c, DS3231_I2C_ADDR << 1, DS3231_REG_SECOND,
 8003a28:	4b0f      	ldr	r3, [pc, #60]	; (8003a68 <DS3231_SetDateTime+0xb4>)
 8003a2a:	6818      	ldr	r0, [r3, #0]
 8003a2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a30:	9302      	str	r3, [sp, #8]
 8003a32:	2307      	movs	r3, #7
 8003a34:	9301      	str	r3, [sp, #4]
 8003a36:	f107 0308 	add.w	r3, r7, #8
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	2200      	movs	r2, #0
 8003a40:	21d0      	movs	r1, #208	; 0xd0
 8003a42:	f002 fff1 	bl	8006a28 <HAL_I2C_Mem_Write>
 8003a46:	4603      	mov	r3, r0
 8003a48:	73fb      	strb	r3, [r7, #15]
                          I2C_MEMADD_SIZE_8BIT, buffer, sizeof(buffer), HAL_MAX_DELAY);

    if (status != HAL_OK) {
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d004      	beq.n	8003a5a <DS3231_SetDateTime+0xa6>
        uart_print(RTC_MSG_SET_FAIL);
 8003a50:	4806      	ldr	r0, [pc, #24]	; (8003a6c <DS3231_SetDateTime+0xb8>)
 8003a52:	f000 ff23 	bl	800489c <uart_print>
        return false;
 8003a56:	2300      	movs	r3, #0
 8003a58:	e000      	b.n	8003a5c <DS3231_SetDateTime+0xa8>
    }
    return true;
 8003a5a:	2301      	movs	r3, #1
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	51eb851f 	.word	0x51eb851f
 8003a68:	20002240 	.word	0x20002240
 8003a6c:	08012798 	.word	0x08012798

08003a70 <rtc_get_time>:
    int8_t msb = DS3231_GetRegByte(DS3231_REG_TEMP_MSB);
    uint8_t lsb = DS3231_GetRegByte(DS3231_REG_TEMP_LSB);
    return msb + ((lsb >> 6) * 0.25f);
}

void rtc_get_time(char * buffer, size_t len) {
 8003a70:	b5b0      	push	{r4, r5, r7, lr}
 8003a72:	b08a      	sub	sp, #40	; 0x28
 8003a74:	af06      	add	r7, sp, #24
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
    DS3231_DateTime dt;
    DS3231_GetDateTime(&dt);
 8003a7a:	f107 0308 	add.w	r3, r7, #8
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff ff1a 	bl	80038b8 <DS3231_GetDateTime>
    snprintf(buffer, len, RTC_GET_FORMAT_DATETIME, dt.year, dt.month, dt.day, dt.hours, dt.minutes,
 8003a84:	89fb      	ldrh	r3, [r7, #14]
 8003a86:	461d      	mov	r5, r3
 8003a88:	7b3b      	ldrb	r3, [r7, #12]
 8003a8a:	7afa      	ldrb	r2, [r7, #11]
 8003a8c:	7ab9      	ldrb	r1, [r7, #10]
 8003a8e:	7a78      	ldrb	r0, [r7, #9]
             dt.seconds);
 8003a90:	7a3c      	ldrb	r4, [r7, #8]
    snprintf(buffer, len, RTC_GET_FORMAT_DATETIME, dt.year, dt.month, dt.day, dt.hours, dt.minutes,
 8003a92:	9404      	str	r4, [sp, #16]
 8003a94:	9003      	str	r0, [sp, #12]
 8003a96:	9102      	str	r1, [sp, #8]
 8003a98:	9201      	str	r2, [sp, #4]
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	462b      	mov	r3, r5
 8003a9e:	4a04      	ldr	r2, [pc, #16]	; (8003ab0 <rtc_get_time+0x40>)
 8003aa0:	6839      	ldr	r1, [r7, #0]
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f00a f8bc 	bl	800dc20 <sniprintf>
}
 8003aa8:	bf00      	nop
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bdb0      	pop	{r4, r5, r7, pc}
 8003ab0:	080127bc 	.word	0x080127bc

08003ab4 <RTC_DS3231_Set>:
    }

    return dt;
}

bool RTC_DS3231_Set(RTC_DateTypeDef * date, RTC_TimeTypeDef * time) {
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
    DS3231_DateTime dt;

    dt.year = 2000 + date->Year;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	78db      	ldrb	r3, [r3, #3]
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	827b      	strh	r3, [r7, #18]
    dt.month = date->Month;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	785b      	ldrb	r3, [r3, #1]
 8003ad0:	743b      	strb	r3, [r7, #16]
    dt.day = date->Date;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	789b      	ldrb	r3, [r3, #2]
 8003ad6:	73fb      	strb	r3, [r7, #15]
    dt.hours = time->Hours;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	73bb      	strb	r3, [r7, #14]
    dt.minutes = time->Minutes;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	785b      	ldrb	r3, [r3, #1]
 8003ae2:	737b      	strb	r3, [r7, #13]
    dt.seconds = time->Seconds;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	789b      	ldrb	r3, [r3, #2]
 8003ae8:	733b      	strb	r3, [r7, #12]

    bool resultado = DS3231_SetDateTime(&dt);
 8003aea:	f107 030c 	add.w	r3, r7, #12
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff ff60 	bl	80039b4 <DS3231_SetDateTime>
 8003af4:	4603      	mov	r3, r0
 8003af6:	75fb      	strb	r3, [r7, #23]

    if (!resultado) {
 8003af8:	7dfb      	ldrb	r3, [r7, #23]
 8003afa:	f083 0301 	eor.w	r3, r3, #1
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <RTC_DS3231_Set+0x56>
        uart_print(RTC_DS3231_WRITE_ERROR_MSG);
 8003b04:	4803      	ldr	r0, [pc, #12]	; (8003b14 <RTC_DS3231_Set+0x60>)
 8003b06:	f000 fec9 	bl	800489c <uart_print>
    }

    return resultado;
 8003b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3718      	adds	r7, #24
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	08012968 	.word	0x08012968

08003b18 <RTC_DS3231_Get>:

bool RTC_DS3231_Get(RTC_DateTypeDef * date, RTC_TimeTypeDef * time) {
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
    DS3231_DateTime dt;

    if (!DS3231_GetDateTime(&dt)) {
 8003b22:	f107 0308 	add.w	r3, r7, #8
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7ff fec6 	bl	80038b8 <DS3231_GetDateTime>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	f083 0301 	eor.w	r3, r3, #1
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d004      	beq.n	8003b42 <RTC_DS3231_Get+0x2a>
        uart_print(RTC_DS3231_READ_ERROR_MSG);
 8003b38:	4810      	ldr	r0, [pc, #64]	; (8003b7c <RTC_DS3231_Get+0x64>)
 8003b3a:	f000 feaf 	bl	800489c <uart_print>
        return false;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	e018      	b.n	8003b74 <RTC_DS3231_Get+0x5c>
    }

    // Convertir a estructuras HAL
    date->Year = (uint8_t)(dt.year - 2000);
 8003b42:	89fb      	ldrh	r3, [r7, #14]
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	3330      	adds	r3, #48	; 0x30
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	70da      	strb	r2, [r3, #3]
    date->Month = dt.month;
 8003b4e:	7b3a      	ldrb	r2, [r7, #12]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	705a      	strb	r2, [r3, #1]
    date->Date = dt.day;
 8003b54:	7afa      	ldrb	r2, [r7, #11]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	709a      	strb	r2, [r3, #2]
    date->WeekDay = 1; // opcionalmente se puede calcular
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	701a      	strb	r2, [r3, #0]

    time->Hours = dt.hours;
 8003b60:	7aba      	ldrb	r2, [r7, #10]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	701a      	strb	r2, [r3, #0]
    time->Minutes = dt.minutes;
 8003b66:	7a7a      	ldrb	r2, [r7, #9]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	705a      	strb	r2, [r3, #1]
    time->Seconds = dt.seconds;
 8003b6c:	7a3a      	ldrb	r2, [r7, #8]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	709a      	strb	r2, [r3, #2]

    return true;
 8003b72:	2301      	movs	r3, #1
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	08012988 	.word	0x08012988

08003b80 <ds3231_get_datetime>:
        *year = 2000 + date.Year;

    return true;
}

bool ds3231_get_datetime(ds3231_time_t * dt) {
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b088      	sub	sp, #32
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
    RTC_DateTypeDef date;
    RTC_TimeTypeDef time;

    if (!RTC_DS3231_Get(&date, &time)) {
 8003b88:	f107 0208 	add.w	r2, r7, #8
 8003b8c:	f107 031c 	add.w	r3, r7, #28
 8003b90:	4611      	mov	r1, r2
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7ff ffc0 	bl	8003b18 <RTC_DS3231_Get>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	f083 0301 	eor.w	r3, r3, #1
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <ds3231_get_datetime+0x28>
        return false;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	e016      	b.n	8003bd6 <ds3231_get_datetime+0x56>
    }

    dt->hour = time.Hours;
 8003ba8:	7a3a      	ldrb	r2, [r7, #8]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	701a      	strb	r2, [r3, #0]
    dt->min = time.Minutes;
 8003bae:	7a7a      	ldrb	r2, [r7, #9]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	705a      	strb	r2, [r3, #1]
    dt->sec = time.Seconds;
 8003bb4:	7aba      	ldrb	r2, [r7, #10]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	709a      	strb	r2, [r3, #2]
    dt->day = date.Date;
 8003bba:	7fba      	ldrb	r2, [r7, #30]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	70da      	strb	r2, [r3, #3]
    dt->month = date.Month;
 8003bc0:	7f7a      	ldrb	r2, [r7, #29]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	711a      	strb	r2, [r3, #4]
    dt->year = 2000 + date.Year;
 8003bc6:	7ffb      	ldrb	r3, [r7, #31]
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	80da      	strh	r2, [r3, #6]

    return true;
 8003bd4:	2301      	movs	r3, #1
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3720      	adds	r7, #32
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
	...

08003be0 <sensors_init_all>:

/* === Public function implementation ========================================================== */

/* === Función de inicialización ============================================================ */

void sensors_init_all(void) {
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
    // Inicializar sensores SPS30
    inicializar_sensores_sps30(); // <-- esta función sigue en sps30_multi.c
 8003be4:	f000 fc3a 	bl	800445c <inicializar_sensores_sps30>

    // Inicialización de sensores DHT22 (definir los pines según tu hardware)
    DHT22_Init(&dhtA, GPIOB, GPIO_PIN_11); // Sensor A
 8003be8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bec:	4905      	ldr	r1, [pc, #20]	; (8003c04 <sensors_init_all+0x24>)
 8003bee:	4806      	ldr	r0, [pc, #24]	; (8003c08 <sensors_init_all+0x28>)
 8003bf0:	f7fd fa12 	bl	8001018 <DHT22_Init>
    DHT22_Init(&dhtB, GPIOB, GPIO_PIN_12); // Sensor B
 8003bf4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003bf8:	4902      	ldr	r1, [pc, #8]	; (8003c04 <sensors_init_all+0x24>)
 8003bfa:	4804      	ldr	r0, [pc, #16]	; (8003c0c <sensors_init_all+0x2c>)
 8003bfc:	f7fd fa0c 	bl	8001018 <DHT22_Init>
}
 8003c00:	bf00      	nop
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40020400 	.word	0x40020400
 8003c08:	20002244 	.word	0x20002244
 8003c0c:	2000224c 	.word	0x2000224c

08003c10 <SHDLC_LoadMyVector>:
 * @param DataFrameSize El tamaño total del arreglo DataFrame para evitar
 *        desbordamientos de búfer.
 * @return void
 */

void SHDLC_LoadMyVector(Shdlc_FrameMiso * frame, const uint8_t * DataFrame, size_t DataFrameSize) {
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
    if (frame == NULL || DataFrame == NULL || DataFrameSize < 5) {
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d005      	beq.n	8003c2e <SHDLC_LoadMyVector+0x1e>
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d002      	beq.n	8003c2e <SHDLC_LoadMyVector+0x1e>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d803      	bhi.n	8003c36 <SHDLC_LoadMyVector+0x26>
        // Validación básica para asegurarnos de que los parámetros son válidos y DataFrame tiene el
        // tamaño mínimo esperado.
        printf("Datos no válidos para cargar en myVector.\n");
 8003c2e:	4811      	ldr	r0, [pc, #68]	; (8003c74 <SHDLC_LoadMyVector+0x64>)
 8003c30:	f009 ffd8 	bl	800dbe4 <puts>
        return;
 8003c34:	e01b      	b.n	8003c6e <SHDLC_LoadMyVector+0x5e>
    }

    uint8_t dataLength = DataFrame[4]; // Longitud de los datos útiles.
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	791b      	ldrb	r3, [r3, #4]
 8003c3a:	75fb      	strb	r3, [r7, #23]

    if (dataLength > FRAME_DATA_VECTOR_SIZE_MISO || (4 + dataLength) > DataFrameSize) {
 8003c3c:	7dfb      	ldrb	r3, [r7, #23]
 8003c3e:	2b3c      	cmp	r3, #60	; 0x3c
 8003c40:	d805      	bhi.n	8003c4e <SHDLC_LoadMyVector+0x3e>
 8003c42:	7dfb      	ldrb	r3, [r7, #23]
 8003c44:	3304      	adds	r3, #4
 8003c46:	461a      	mov	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d203      	bcs.n	8003c56 <SHDLC_LoadMyVector+0x46>
        // Asegúrate de que la longitud de los datos no excede el tamaño de myVector ni los límites
        // de DataFrame.
        printf("Longitud de los datos excede el tamaño permitido de myVector o los límites de "
 8003c4e:	480a      	ldr	r0, [pc, #40]	; (8003c78 <SHDLC_LoadMyVector+0x68>)
 8003c50:	f009 ffc8 	bl	800dbe4 <puts>
               "DataFrame.\n");
        return;
 8003c54:	e00b      	b.n	8003c6e <SHDLC_LoadMyVector+0x5e>
    }

    // Copiar los datos útiles desde DataFrame a myVector en la estructura Shdlc_FrameMiso.
    memcpy(frame->myVector, &DataFrame[5], dataLength + 1);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	1cd8      	adds	r0, r3, #3
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	1d59      	adds	r1, r3, #5
 8003c5e:	7dfb      	ldrb	r3, [r7, #23]
 8003c60:	3301      	adds	r3, #1
 8003c62:	461a      	mov	r2, r3
 8003c64:	f008 ffe0 	bl	800cc28 <memcpy>

    // Actualizar el campo 'lon' con la longitud de los datos copiados.
    frame->lon = dataLength;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	7dfa      	ldrb	r2, [r7, #23]
 8003c6c:	709a      	strb	r2, [r3, #2]

    // Asume que podrías querer también inicializar otros campos aquí.
}
 8003c6e:	3718      	adds	r7, #24
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	080129a8 	.word	0x080129a8
 8003c78:	080129d4 	.word	0x080129d4

08003c7c <SHDLC_CalculateDataSize>:
 * @param inputSize Tamaño del arreglo de entrada.
 * @return int La longitud de los datos contenidos entre los dos delimitadores,
 *         o -1 si los delimitadores no se encuentran en la secuencia correcta.
 */

int SHDLC_CalculateDataSize(const uint8_t * input, size_t inputSize) {
 8003c7c:	b480      	push	{r7}
 8003c7e:	b089      	sub	sp, #36	; 0x24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
    int start = -1;
 8003c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c8a:	61fb      	str	r3, [r7, #28]
    int end = -1;
 8003c8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c90:	61bb      	str	r3, [r7, #24]

    // Buscar el primer delimitador 0xE7.
    for (size_t i = 0; i < inputSize; ++i) {
 8003c92:	2300      	movs	r3, #0
 8003c94:	617b      	str	r3, [r7, #20]
 8003c96:	e00c      	b.n	8003cb2 <SHDLC_CalculateDataSize+0x36>
        if (input[i] == 0x7E) {
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	2b7e      	cmp	r3, #126	; 0x7e
 8003ca2:	d103      	bne.n	8003cac <SHDLC_CalculateDataSize+0x30>
            start = i + 1; // Comenzar después del primer 0xE7
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	61fb      	str	r3, [r7, #28]
            break;
 8003caa:	e006      	b.n	8003cba <SHDLC_CalculateDataSize+0x3e>
    for (size_t i = 0; i < inputSize; ++i) {
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	617b      	str	r3, [r7, #20]
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d3ee      	bcc.n	8003c98 <SHDLC_CalculateDataSize+0x1c>
        }
    }

    // Buscar el segundo delimitador 0xE7.
    for (size_t i = start; i < inputSize; ++i) {
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	613b      	str	r3, [r7, #16]
 8003cbe:	e00b      	b.n	8003cd8 <SHDLC_CalculateDataSize+0x5c>
        if (input[i] == 0x7E) {
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	2b7e      	cmp	r3, #126	; 0x7e
 8003cca:	d102      	bne.n	8003cd2 <SHDLC_CalculateDataSize+0x56>
            end = i;
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	61bb      	str	r3, [r7, #24]
            break;
 8003cd0:	e006      	b.n	8003ce0 <SHDLC_CalculateDataSize+0x64>
    for (size_t i = start; i < inputSize; ++i) {
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	613b      	str	r3, [r7, #16]
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d3ef      	bcc.n	8003cc0 <SHDLC_CalculateDataSize+0x44>
        }
    }

    // Verificar si se encontraron ambos delimitadores.
    if (start == -1 || end == -1 || start >= end) {
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ce6:	d007      	beq.n	8003cf8 <SHDLC_CalculateDataSize+0x7c>
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cee:	d003      	beq.n	8003cf8 <SHDLC_CalculateDataSize+0x7c>
 8003cf0:	69fa      	ldr	r2, [r7, #28]
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	db02      	blt.n	8003cfe <SHDLC_CalculateDataSize+0x82>
        return -1; // No se encontró la secuencia válida.
 8003cf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cfc:	e004      	b.n	8003d08 <SHDLC_CalculateDataSize+0x8c>
    }

    // Calcular la longitud de los datos a copiar y asegurarse de que no
    // exceda el buffer de salida.
    size_t dataLength = end - start;
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	60fb      	str	r3, [r7, #12]
    return dataLength;
 8003d06:	68fb      	ldr	r3, [r7, #12]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3724      	adds	r7, #36	; 0x24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <SHDLC_revertByteStuffing>:
 * @param stuffedSize Tamaño del arreglo de bytes con byte-stuffing.
 * @param originalData Puntero al arreglo de bytes donde se almacenarán los datos revertidos.
 * @return El tamaño del arreglo de bytes revertido.
 */
size_t SHDLC_revertByteStuffing(const uint8_t * stuffedData, size_t stuffedSize,
                                uint8_t * originalData) {
 8003d14:	b480      	push	{r7}
 8003d16:	b087      	sub	sp, #28
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
    size_t originalIndex = 0;
 8003d20:	2300      	movs	r3, #0
 8003d22:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < stuffedSize; ++i) {
 8003d24:	2300      	movs	r3, #0
 8003d26:	613b      	str	r3, [r7, #16]
 8003d28:	e04e      	b.n	8003dc8 <SHDLC_revertByteStuffing+0xb4>
        if (stuffedData[i] == 0x7D) { // Detecta el indicador de byte-stuffing
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	4413      	add	r3, r2
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	2b7d      	cmp	r3, #125	; 0x7d
 8003d34:	d137      	bne.n	8003da6 <SHDLC_revertByteStuffing+0x92>
            i++;                      // Avanza al siguiente byte para determinar el valor real
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	613b      	str	r3, [r7, #16]
            if (i < stuffedSize) {
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d23b      	bcs.n	8003dbc <SHDLC_revertByteStuffing+0xa8>
                switch (stuffedData[i]) {
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	4413      	add	r3, r2
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	2b5e      	cmp	r3, #94	; 0x5e
 8003d4e:	d00a      	beq.n	8003d66 <SHDLC_revertByteStuffing+0x52>
 8003d50:	2b5e      	cmp	r3, #94	; 0x5e
 8003d52:	dc35      	bgt.n	8003dc0 <SHDLC_revertByteStuffing+0xac>
 8003d54:	2b5d      	cmp	r3, #93	; 0x5d
 8003d56:	d00e      	beq.n	8003d76 <SHDLC_revertByteStuffing+0x62>
 8003d58:	2b5d      	cmp	r3, #93	; 0x5d
 8003d5a:	dc31      	bgt.n	8003dc0 <SHDLC_revertByteStuffing+0xac>
 8003d5c:	2b31      	cmp	r3, #49	; 0x31
 8003d5e:	d012      	beq.n	8003d86 <SHDLC_revertByteStuffing+0x72>
 8003d60:	2b33      	cmp	r3, #51	; 0x33
 8003d62:	d018      	beq.n	8003d96 <SHDLC_revertByteStuffing+0x82>
                    break;
                default:
                    // Trata el caso en que el byte siguiente a 0x7D no es uno esperado
                    // Esto podría indicar un error o una situación inesperada.
                    // Se podría manejar de manera especial si es necesario.
                    break;
 8003d64:	e02c      	b.n	8003dc0 <SHDLC_revertByteStuffing+0xac>
                    originalData[originalIndex++] = 0x7E;
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	1c5a      	adds	r2, r3, #1
 8003d6a:	617a      	str	r2, [r7, #20]
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	4413      	add	r3, r2
 8003d70:	227e      	movs	r2, #126	; 0x7e
 8003d72:	701a      	strb	r2, [r3, #0]
                    break;
 8003d74:	e025      	b.n	8003dc2 <SHDLC_revertByteStuffing+0xae>
                    originalData[originalIndex++] = 0x7D;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	1c5a      	adds	r2, r3, #1
 8003d7a:	617a      	str	r2, [r7, #20]
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	4413      	add	r3, r2
 8003d80:	227d      	movs	r2, #125	; 0x7d
 8003d82:	701a      	strb	r2, [r3, #0]
                    break;
 8003d84:	e01d      	b.n	8003dc2 <SHDLC_revertByteStuffing+0xae>
                    originalData[originalIndex++] = 0x11;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	617a      	str	r2, [r7, #20]
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	4413      	add	r3, r2
 8003d90:	2211      	movs	r2, #17
 8003d92:	701a      	strb	r2, [r3, #0]
                    break;
 8003d94:	e015      	b.n	8003dc2 <SHDLC_revertByteStuffing+0xae>
                    originalData[originalIndex++] = 0x13;
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	617a      	str	r2, [r7, #20]
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	4413      	add	r3, r2
 8003da0:	2213      	movs	r2, #19
 8003da2:	701a      	strb	r2, [r3, #0]
                    break;
 8003da4:	e00d      	b.n	8003dc2 <SHDLC_revertByteStuffing+0xae>
                }
            }
        } else {
            // Si no es un byte-stuffing, simplemente copia el byte
            originalData[originalIndex++] = stuffedData[i];
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	441a      	add	r2, r3
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	1c59      	adds	r1, r3, #1
 8003db0:	6179      	str	r1, [r7, #20]
 8003db2:	6879      	ldr	r1, [r7, #4]
 8003db4:	440b      	add	r3, r1
 8003db6:	7812      	ldrb	r2, [r2, #0]
 8003db8:	701a      	strb	r2, [r3, #0]
 8003dba:	e002      	b.n	8003dc2 <SHDLC_revertByteStuffing+0xae>
            }
 8003dbc:	bf00      	nop
 8003dbe:	e000      	b.n	8003dc2 <SHDLC_revertByteStuffing+0xae>
                    break;
 8003dc0:	bf00      	nop
    for (size_t i = 0; i < stuffedSize; ++i) {
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	613b      	str	r3, [r7, #16]
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d3ac      	bcc.n	8003d2a <SHDLC_revertByteStuffing+0x16>
        }
    }

    return originalIndex; // Retorna el tamaño del arreglo revertido
 8003dd0:	697b      	ldr	r3, [r7, #20]
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	371c      	adds	r7, #28
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <SHDLC_bytesToFloat>:

// Función para convertir 4 bytes en big-endian a un valor float IEEE754
float SHDLC_bytesToFloat(uint8_t * bytes) {
 8003dde:	b480      	push	{r7}
 8003de0:	b087      	sub	sp, #28
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
    float value;
    uint8_t reversedBytes[sizeof(value)];

    // Revertir el orden de los bytes para big-endian
    for (int i = 0; i < sizeof(value); i++) {
 8003de6:	2300      	movs	r3, #0
 8003de8:	617b      	str	r3, [r7, #20]
 8003dea:	e00e      	b.n	8003e0a <SHDLC_bytesToFloat+0x2c>
        reversedBytes[i] = bytes[sizeof(value) - i - 1];
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f1c3 0303 	rsb	r3, r3, #3
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	4413      	add	r3, r2
 8003df6:	7819      	ldrb	r1, [r3, #0]
 8003df8:	f107 020c 	add.w	r2, r7, #12
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	4413      	add	r3, r2
 8003e00:	460a      	mov	r2, r1
 8003e02:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < sizeof(value); i++) {
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	3301      	adds	r3, #1
 8003e08:	617b      	str	r3, [r7, #20]
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2b03      	cmp	r3, #3
 8003e0e:	d9ed      	bls.n	8003dec <SHDLC_bytesToFloat+0xe>
 8003e10:	68fb      	ldr	r3, [r7, #12]
    }

    // Copiar los bytes revertidos en la variable float
    memcpy(&value, reversedBytes, sizeof(value));
 8003e12:	613b      	str	r3, [r7, #16]

    return value;
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	ee07 3a90 	vmov	s15, r3
}
 8003e1a:	eeb0 0a67 	vmov.f32	s0, s15
 8003e1e:	371c      	adds	r7, #28
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <SHDLC_llenarConcentraciones>:

// Función para llenar la estructura con los datos de concentración
void SHDLC_llenarConcentraciones(ConcentracionesPM * concentraciones, uint8_t * data) {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
    if (!concentraciones || !data)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d029      	beq.n	8003e8c <SHDLC_llenarConcentraciones+0x64>
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d026      	beq.n	8003e8c <SHDLC_llenarConcentraciones+0x64>
        return;

    // Al menos 4 * sizeof(float) = 16 bytes
    concentraciones->pm1_0 = SHDLC_bytesToFloat(&data[0]);
 8003e3e:	6838      	ldr	r0, [r7, #0]
 8003e40:	f7ff ffcd 	bl	8003dde <SHDLC_bytesToFloat>
 8003e44:	eef0 7a40 	vmov.f32	s15, s0
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	edc3 7a00 	vstr	s15, [r3]
    concentraciones->pm2_5 = SHDLC_bytesToFloat(&data[4]);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	3304      	adds	r3, #4
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7ff ffc3 	bl	8003dde <SHDLC_bytesToFloat>
 8003e58:	eef0 7a40 	vmov.f32	s15, s0
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	edc3 7a01 	vstr	s15, [r3, #4]
    concentraciones->pm4_0 = SHDLC_bytesToFloat(&data[8]);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	3308      	adds	r3, #8
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7ff ffb9 	bl	8003dde <SHDLC_bytesToFloat>
 8003e6c:	eef0 7a40 	vmov.f32	s15, s0
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	edc3 7a02 	vstr	s15, [r3, #8]
    concentraciones->pm10 = SHDLC_bytesToFloat(&data[12]);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	330c      	adds	r3, #12
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff ffaf 	bl	8003dde <SHDLC_bytesToFloat>
 8003e80:	eef0 7a40 	vmov.f32	s15, s0
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	edc3 7a03 	vstr	s15, [r3, #12]
 8003e8a:	e000      	b.n	8003e8e <SHDLC_llenarConcentraciones+0x66>
        return;
 8003e8c:	bf00      	nop
}
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <sistema_verificar_componentes>:

/* === Private function implementation ========================================================= */

/* === Public function implementation ========================================================== */

bool sistema_verificar_componentes(void) {
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b08c      	sub	sp, #48	; 0x30
 8003e98:	af00      	add	r7, sp, #0
    bool estado_ok = true;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (!data_logger_init()) {
 8003ea0:	f7fd fff6 	bl	8001e90 <data_logger_init>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	f083 0301 	eor.w	r3, r3, #1
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d006      	beq.n	8003ebe <sistema_verificar_componentes+0x2a>
        uart_print("[ERROR] microSD no pudo montarse\n");
 8003eb0:	4844      	ldr	r0, [pc, #272]	; (8003fc4 <sistema_verificar_componentes+0x130>)
 8003eb2:	f000 fcf3 	bl	800489c <uart_print>
        estado_ok = false;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003ebc:	e002      	b.n	8003ec4 <sistema_verificar_componentes+0x30>
    } else {
        uart_print("[OK] microSD montada correctamente\n");
 8003ebe:	4842      	ldr	r0, [pc, #264]	; (8003fc8 <sistema_verificar_componentes+0x134>)
 8003ec0:	f000 fcec 	bl	800489c <uart_print>
    }

    if (!rtc_auto_init()) {
 8003ec4:	f000 fb5a 	bl	800457c <rtc_auto_init>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	f083 0301 	eor.w	r3, r3, #1
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d006      	beq.n	8003ee2 <sistema_verificar_componentes+0x4e>
        uart_print("[ERROR] RTC no inicializado correctamente\n");
 8003ed4:	483d      	ldr	r0, [pc, #244]	; (8003fcc <sistema_verificar_componentes+0x138>)
 8003ed6:	f000 fce1 	bl	800489c <uart_print>
        estado_ok = false;
 8003eda:	2300      	movs	r3, #0
 8003edc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003ee0:	e002      	b.n	8003ee8 <sistema_verificar_componentes+0x54>
    } else {
        uart_print("[OK] RTC detectado y configurado\n");
 8003ee2:	483b      	ldr	r0, [pc, #236]	; (8003fd0 <sistema_verificar_componentes+0x13c>)
 8003ee4:	f000 fcda 	bl	800489c <uart_print>
    }

    // Intentar inicializar sensores SPS30
    for (int i = 0; i < sensores_disponibles; ++i) {
 8003ee8:	2300      	movs	r3, #0
 8003eea:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eec:	e034      	b.n	8003f58 <sistema_verificar_componentes+0xc4>
        SPS30 * sensor = &sensores_sps30[i].sensor;
 8003eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef0:	2258      	movs	r2, #88	; 0x58
 8003ef2:	fb02 f303 	mul.w	r3, r2, r3
 8003ef6:	4a37      	ldr	r2, [pc, #220]	; (8003fd4 <sistema_verificar_componentes+0x140>)
 8003ef8:	4413      	add	r3, r2
 8003efa:	627b      	str	r3, [r7, #36]	; 0x24
        char serial_tmp[SERIAL_BUFFER_LEN];

        if (sensor->serial_number && sensor->serial_number(sensor, serial_tmp)) {
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d017      	beq.n	8003f34 <sistema_verificar_componentes+0xa0>
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f08:	463a      	mov	r2, r7
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f0e:	4798      	blx	r3
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00e      	beq.n	8003f34 <sistema_verificar_componentes+0xa0>
            uart_print("[OK] Sensor SPS30 ID %d serial: %s\n", sensores_sps30[i].id, serial_tmp);
 8003f16:	4a2f      	ldr	r2, [pc, #188]	; (8003fd4 <sistema_verificar_componentes+0x140>)
 8003f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1a:	2158      	movs	r1, #88	; 0x58
 8003f1c:	fb01 f303 	mul.w	r3, r1, r3
 8003f20:	4413      	add	r3, r2
 8003f22:	3350      	adds	r3, #80	; 0x50
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	4619      	mov	r1, r3
 8003f28:	463b      	mov	r3, r7
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	482a      	ldr	r0, [pc, #168]	; (8003fd8 <sistema_verificar_componentes+0x144>)
 8003f2e:	f000 fcb5 	bl	800489c <uart_print>
 8003f32:	e00e      	b.n	8003f52 <sistema_verificar_componentes+0xbe>
        } else {
            uart_print("[ERROR] No se pudo leer el numero de serie del sensor SPS30 ID %d\n",
                       sensores_sps30[i].id);
 8003f34:	4a27      	ldr	r2, [pc, #156]	; (8003fd4 <sistema_verificar_componentes+0x140>)
 8003f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f38:	2158      	movs	r1, #88	; 0x58
 8003f3a:	fb01 f303 	mul.w	r3, r1, r3
 8003f3e:	4413      	add	r3, r2
 8003f40:	3350      	adds	r3, #80	; 0x50
 8003f42:	781b      	ldrb	r3, [r3, #0]
            uart_print("[ERROR] No se pudo leer el numero de serie del sensor SPS30 ID %d\n",
 8003f44:	4619      	mov	r1, r3
 8003f46:	4825      	ldr	r0, [pc, #148]	; (8003fdc <sistema_verificar_componentes+0x148>)
 8003f48:	f000 fca8 	bl	800489c <uart_print>
            estado_ok = false; // No bloquea, pero se registra el fallo
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int i = 0; i < sensores_disponibles; ++i) {
 8003f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f54:	3301      	adds	r3, #1
 8003f56:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f58:	4b21      	ldr	r3, [pc, #132]	; (8003fe0 <sistema_verificar_componentes+0x14c>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	dbc5      	blt.n	8003eee <sistema_verificar_componentes+0x5a>
        }
    }

    // Verificar sensores DHT22
    if (!DHT22_ReadSimple(&dhtA, NULL, NULL)) {
 8003f62:	2200      	movs	r2, #0
 8003f64:	2100      	movs	r1, #0
 8003f66:	481f      	ldr	r0, [pc, #124]	; (8003fe4 <sistema_verificar_componentes+0x150>)
 8003f68:	f7fd f908 	bl	800117c <DHT22_ReadSimple>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	f083 0301 	eor.w	r3, r3, #1
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d006      	beq.n	8003f86 <sistema_verificar_componentes+0xf2>
        uart_print("[ERROR] Sensor DHT22 ambiente no responde\n");
 8003f78:	481b      	ldr	r0, [pc, #108]	; (8003fe8 <sistema_verificar_componentes+0x154>)
 8003f7a:	f000 fc8f 	bl	800489c <uart_print>
        estado_ok = false;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003f84:	e002      	b.n	8003f8c <sistema_verificar_componentes+0xf8>
    } else {
        uart_print("[OK] Sensor DHT22 ambiente funcionando\n");
 8003f86:	4819      	ldr	r0, [pc, #100]	; (8003fec <sistema_verificar_componentes+0x158>)
 8003f88:	f000 fc88 	bl	800489c <uart_print>
    }

    if (!DHT22_ReadSimple(&dhtB, NULL, NULL)) {
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	2100      	movs	r1, #0
 8003f90:	4817      	ldr	r0, [pc, #92]	; (8003ff0 <sistema_verificar_componentes+0x15c>)
 8003f92:	f7fd f8f3 	bl	800117c <DHT22_ReadSimple>
 8003f96:	4603      	mov	r3, r0
 8003f98:	f083 0301 	eor.w	r3, r3, #1
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d006      	beq.n	8003fb0 <sistema_verificar_componentes+0x11c>
        uart_print("[ERROR] Sensor DHT22 camara no responde\n");
 8003fa2:	4814      	ldr	r0, [pc, #80]	; (8003ff4 <sistema_verificar_componentes+0x160>)
 8003fa4:	f000 fc7a 	bl	800489c <uart_print>
        estado_ok = false;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003fae:	e002      	b.n	8003fb6 <sistema_verificar_componentes+0x122>
    } else {
        uart_print("[OK] Sensor DHT22 camara funcionando\n");
 8003fb0:	4811      	ldr	r0, [pc, #68]	; (8003ff8 <sistema_verificar_componentes+0x164>)
 8003fb2:	f000 fc73 	bl	800489c <uart_print>
    }

    return estado_ok; // Se puede ignorar si quieres que el sistema continúe de todos modos
 8003fb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3730      	adds	r7, #48	; 0x30
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	08012a30 	.word	0x08012a30
 8003fc8:	08012a54 	.word	0x08012a54
 8003fcc:	08012a78 	.word	0x08012a78
 8003fd0:	08012aa4 	.word	0x08012aa4
 8003fd4:	20002254 	.word	0x20002254
 8003fd8:	08012ac8 	.word	0x08012ac8
 8003fdc:	08012aec 	.word	0x08012aec
 8003fe0:	2000235c 	.word	0x2000235c
 8003fe4:	20002244 	.word	0x20002244
 8003fe8:	08012b30 	.word	0x08012b30
 8003fec:	08012b5c 	.word	0x08012b5c
 8003ff0:	2000224c 	.word	0x2000224c
 8003ff4:	08012b84 	.word	0x08012b84
 8003ff8:	08012bb0 	.word	0x08012bb0

08003ffc <sps30_send_command>:
#define DELAY_STOP_MEASUREMENT         0

#define CLEAR_VAR                      0

// Implementación de las funciones del objeto SPS30
void sps30_send_command(SPS30 * self, const uint8_t * command, uint16_t commandSize) {
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	4613      	mov	r3, r2
 8004008:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit(self->huart, command, commandSize, 100);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6818      	ldr	r0, [r3, #0]
 800400e:	88fa      	ldrh	r2, [r7, #6]
 8004010:	2364      	movs	r3, #100	; 0x64
 8004012:	68b9      	ldr	r1, [r7, #8]
 8004014:	f005 f86f 	bl	80090f6 <HAL_UART_Transmit>
}
 8004018:	bf00      	nop
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <sps30_receive_async>:

void sps30_receive_async(SPS30 * self, uint8_t * dataBuffer, uint16_t bufferSize) {
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	4613      	mov	r3, r2
 800402c:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Receive(self->huart, dataBuffer, bufferSize, 100);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6818      	ldr	r0, [r3, #0]
 8004032:	88fa      	ldrh	r2, [r7, #6]
 8004034:	2364      	movs	r3, #100	; 0x64
 8004036:	68b9      	ldr	r1, [r7, #8]
 8004038:	f005 f8ef 	bl	800921a <HAL_UART_Receive>
}
 800403c:	bf00      	nop
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <sps30_send_receive>:

bool sps30_send_receive(SPS30 * self, const uint8_t * command, uint16_t commandSize,
                        uint8_t * dataBuffer, uint16_t bufferSize) {
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	603b      	str	r3, [r7, #0]
 8004050:	4613      	mov	r3, r2
 8004052:	80fb      	strh	r3, [r7, #6]
    if (HAL_UART_Transmit(self->huart, command, commandSize, 100) != HAL_OK) {
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6818      	ldr	r0, [r3, #0]
 8004058:	88fa      	ldrh	r2, [r7, #6]
 800405a:	2364      	movs	r3, #100	; 0x64
 800405c:	68b9      	ldr	r1, [r7, #8]
 800405e:	f005 f84a 	bl	80090f6 <HAL_UART_Transmit>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <sps30_send_receive+0x28>
        return false;
 8004068:	2300      	movs	r3, #0
 800406a:	e00c      	b.n	8004086 <sps30_send_receive+0x42>
    }

    if (HAL_UART_Receive(self->huart, dataBuffer, bufferSize, 100) != HAL_OK) {
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6818      	ldr	r0, [r3, #0]
 8004070:	8b3a      	ldrh	r2, [r7, #24]
 8004072:	2364      	movs	r3, #100	; 0x64
 8004074:	6839      	ldr	r1, [r7, #0]
 8004076:	f005 f8d0 	bl	800921a <HAL_UART_Receive>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <sps30_send_receive+0x40>
        return false;
 8004080:	2300      	movs	r3, #0
 8004082:	e000      	b.n	8004086 <sps30_send_receive+0x42>
    }

    return true;
 8004084:	2301      	movs	r3, #1
}
 8004086:	4618      	mov	r0, r3
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
	...

08004090 <sps30_start_measurement>:

void sps30_start_measurement(SPS30 * self) {
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
    uint8_t startCmd[] = SPS30_FRAME_START_MEASUREMENT; // Comando para iniciar la medición
 8004098:	4a12      	ldr	r2, [pc, #72]	; (80040e4 <sps30_start_measurement+0x54>)
 800409a:	f107 0310 	add.w	r3, r7, #16
 800409e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80040a2:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t dataBuf[BUFFER_SIZE] = {0}; // Buffer para almacenar la respuesta del sensor
 80040a6:	2300      	movs	r3, #0
 80040a8:	60bb      	str	r3, [r7, #8]
 80040aa:	f107 030c 	add.w	r3, r7, #12
 80040ae:	2100      	movs	r1, #0
 80040b0:	460a      	mov	r2, r1
 80040b2:	801a      	strh	r2, [r3, #0]
 80040b4:	460a      	mov	r2, r1
 80040b6:	709a      	strb	r2, [r3, #2]
    // char respuestaStr[BUFFER_SIZE_RESPONSE]; // Buffer para el mensaje de longitud de respuesta

    // Envío del comando de inicio de medición
    // uart_print(MSG_INICIO_MEDICION);               // Notifica por UART el inicio de la operación
    // uart_vector_print(sizeof(startCmd), startCmd); // Muestra el comando enviado
    self->send_command(self, startCmd, sizeof(startCmd)); // Envía el comando al sensor SPS30
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040bc:	f107 0110 	add.w	r1, r7, #16
 80040c0:	2208      	movs	r2, #8
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	4798      	blx	r3
    HAL_Delay(DELAY_START_MEASUREMENT); // Espera para el procesamiento del comando
 80040c6:	2002      	movs	r0, #2
 80040c8:	f001 fc52 	bl	8005970 <HAL_Delay>

    // Recepción y procesamiento de la respuesta
    self->receive_async(self, dataBuf, sizeof(dataBuf));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d0:	f107 0108 	add.w	r1, r7, #8
 80040d4:	2207      	movs	r2, #7
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	4798      	blx	r3
    //   int longRespuesta = SHDLC_CalculateDataSize(
    //     dataBuf, sizeof(dataBuf)); // Calcula la longitud de los datos útiles
    // snprintf(respuestaStr, sizeof(respuestaStr), MENSAJE_SIZE_RESPUESTA, longRespuesta);  //
    // Formatea el mensaje de longitud uart_print(respuestaStr); // Imprime la longitud de la
    // respuesta
}
 80040da:	bf00      	nop
 80040dc:	3718      	adds	r7, #24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	08012c8c 	.word	0x08012c8c

080040e8 <sps30_stop_measurement>:

void sps30_stop_measurement(SPS30 * self) {
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
    uint8_t stopCmd[] = SPS30_FRAME_STOP_MEASUREMENT;
 80040f0:	4a10      	ldr	r2, [pc, #64]	; (8004134 <sps30_stop_measurement+0x4c>)
 80040f2:	f107 0310 	add.w	r3, r7, #16
 80040f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80040fa:	6018      	str	r0, [r3, #0]
 80040fc:	3304      	adds	r3, #4
 80040fe:	8019      	strh	r1, [r3, #0]
    uint8_t dataBuf[BUFFER_SIZE_STOP_MEASUREMENT] = {0};
 8004100:	2300      	movs	r3, #0
 8004102:	60bb      	str	r3, [r7, #8]
 8004104:	2300      	movs	r3, #0
 8004106:	60fb      	str	r3, [r7, #12]
    // char respuestaStr[BUFFER_SIZE_RESPONSE];

    // uart_print(MSG_SOLICITAR);
    // uart_vector_print(sizeof(stopCmd), stopCmd);
    self->send_command(self, stopCmd, sizeof(stopCmd));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410c:	f107 0110 	add.w	r1, r7, #16
 8004110:	2206      	movs	r2, #6
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	4798      	blx	r3
    HAL_Delay(DELAY_STOP_MEASUREMENT);
 8004116:	2000      	movs	r0, #0
 8004118:	f001 fc2a 	bl	8005970 <HAL_Delay>

    self->receive_async(self, dataBuf, sizeof(dataBuf));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004120:	f107 0108 	add.w	r1, r7, #8
 8004124:	2208      	movs	r2, #8
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	4798      	blx	r3
    // uart_vector_print(sizeof(dataBuf), dataBuf);

    //  int longRespuesta = SHDLC_CalculateDataSize(dataBuf, sizeof(dataBuf));
    // snprintf(respuestaStr, sizeof(respuestaStr), MENSAJE_SIZE_RESPUESTA, longRespuesta);
    // uart_print(respuestaStr);
}
 800412a:	bf00      	nop
 800412c:	3718      	adds	r7, #24
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	08012c94 	.word	0x08012c94

08004138 <sps30_sleep>:

void sps30_sleep(SPS30 * self) {
 8004138:	b590      	push	{r4, r7, lr}
 800413a:	b089      	sub	sp, #36	; 0x24
 800413c:	af02      	add	r7, sp, #8
 800413e:	6078      	str	r0, [r7, #4]
    uint8_t sleepCmd[] = SPS30_FRAME_SLEEP;
 8004140:	4a0d      	ldr	r2, [pc, #52]	; (8004178 <sps30_sleep+0x40>)
 8004142:	f107 0310 	add.w	r3, r7, #16
 8004146:	e892 0003 	ldmia.w	r2, {r0, r1}
 800414a:	6018      	str	r0, [r3, #0]
 800414c:	3304      	adds	r3, #4
 800414e:	8019      	strh	r1, [r3, #0]
    uint8_t dataBuf[BUFFER_SIZE_SLEEP] = {0};
 8004150:	2300      	movs	r3, #0
 8004152:	60bb      	str	r3, [r7, #8]
 8004154:	2300      	movs	r3, #0
 8004156:	60fb      	str	r3, [r7, #12]
    //  char respuestaStr[BUFFER_SIZE_RESPONSE];

    // uart_print(MSG_SOLICITAR);
    // uart_vector_print(sizeof(sleepCmd), sleepCmd);
    self->send_receive(self, sleepCmd, sizeof(sleepCmd), dataBuf, sizeof(dataBuf));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800415c:	f107 0308 	add.w	r3, r7, #8
 8004160:	f107 0110 	add.w	r1, r7, #16
 8004164:	2208      	movs	r2, #8
 8004166:	9200      	str	r2, [sp, #0]
 8004168:	2206      	movs	r2, #6
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	47a0      	blx	r4
    // uart_vector_print(sizeof(dataBuf), dataBuf);

    //    int longRespuesta = SHDLC_CalculateDataSize(dataBuf, sizeof(dataBuf));
    // snprintf(respuestaStr, sizeof(respuestaStr), MENSAJE_SIZE_RESPUESTA, longRespuesta);
    // uart_print(respuestaStr);
}
 800416e:	bf00      	nop
 8004170:	371c      	adds	r7, #28
 8004172:	46bd      	mov	sp, r7
 8004174:	bd90      	pop	{r4, r7, pc}
 8004176:	bf00      	nop
 8004178:	08012c9c 	.word	0x08012c9c

0800417c <sps30_read_data>:

void sps30_read_data(SPS30 * self) {
 800417c:	b590      	push	{r4, r7, lr}
 800417e:	b0bb      	sub	sp, #236	; 0xec
 8004180:	af02      	add	r7, sp, #8
 8004182:	6078      	str	r0, [r7, #4]
    uint8_t readCmd[] = SPS30_FRAME_READ_MEASUREMENT;
 8004184:	4a29      	ldr	r2, [pc, #164]	; (800422c <sps30_read_data+0xb0>)
 8004186:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800418a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800418e:	6018      	str	r0, [r3, #0]
 8004190:	3304      	adds	r3, #4
 8004192:	8019      	strh	r1, [r3, #0]
    uint8_t dataBuf[BUFFER_SIZE_READ_DATA] = {0};
 8004194:	2300      	movs	r3, #0
 8004196:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800419a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800419e:	2238      	movs	r2, #56	; 0x38
 80041a0:	2100      	movs	r1, #0
 80041a2:	4618      	mov	r0, r3
 80041a4:	f008 fd4e 	bl	800cc44 <memset>
    uint8_t originalData[BUFFER_SIZE_READ_DATA] = {0};
 80041a8:	2300      	movs	r3, #0
 80041aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041ac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80041b0:	2238      	movs	r2, #56	; 0x38
 80041b2:	2100      	movs	r1, #0
 80041b4:	4618      	mov	r0, r3
 80041b6:	f008 fd45 	bl	800cc44 <memset>
    ConcentracionesPM concentraciones;
    //   char respuestaStr[BUFFER_SIZE_RESPONSE];

    // uart_print(MSG_SOLICITAR);
    // uart_vector_print(sizeof(readCmd), readCmd);
    self->send_receive(self, readCmd, sizeof(readCmd), dataBuf, sizeof(dataBuf));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80041be:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80041c2:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 80041c6:	223c      	movs	r2, #60	; 0x3c
 80041c8:	9200      	str	r2, [sp, #0]
 80041ca:	2206      	movs	r2, #6
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	47a0      	blx	r4
    // uart_print(MSG_RESPUESTA);
    // uart_vector_print(sizeof(dataBuf), dataBuf);

    SHDLC_revertByteStuffing(dataBuf, sizeof(dataBuf), originalData);
 80041d0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80041d4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80041d8:	213c      	movs	r1, #60	; 0x3c
 80041da:	4618      	mov	r0, r3
 80041dc:	f7ff fd9a 	bl	8003d14 <SHDLC_revertByteStuffing>
    // uart_print(MSG_RESPUESTA_CON_BYTESTUFFING);
    // uart_vector_print(sizeof(originalData), originalData);

    int longRespuesta = SHDLC_CalculateDataSize(originalData, sizeof(originalData));
 80041e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80041e4:	213c      	movs	r1, #60	; 0x3c
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff fd48 	bl	8003c7c <SHDLC_CalculateDataSize>
 80041ec:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    // snprintf(respuestaStr, sizeof(respuestaStr), MSG_LONGITUD_RESPUESTA, longRespuesta);
    // uart_print(respuestaStr);

    Shdlc_FrameMiso Newframe = {};
 80041f0:	f107 0308 	add.w	r3, r7, #8
 80041f4:	2241      	movs	r2, #65	; 0x41
 80041f6:	2100      	movs	r1, #0
 80041f8:	4618      	mov	r0, r3
 80041fa:	f008 fd23 	bl	800cc44 <memset>
    SHDLC_LoadMyVector(&Newframe, originalData, longRespuesta);
 80041fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004202:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8004206:	f107 0308 	add.w	r3, r7, #8
 800420a:	4618      	mov	r0, r3
 800420c:	f7ff fd00 	bl	8003c10 <SHDLC_LoadMyVector>
    // uart_print(MSG_DATOS_RESPUESTA);
    // uart_vector_print(Newframe.lon, Newframe.myVector);

    SHDLC_llenarConcentraciones(&concentraciones, Newframe.myVector);
 8004210:	f107 0308 	add.w	r3, r7, #8
 8004214:	1cda      	adds	r2, r3, #3
 8004216:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800421a:	4611      	mov	r1, r2
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff fe03 	bl	8003e28 <SHDLC_llenarConcentraciones>
    // uart_print(buffer);
    // sprintf(buffer, FORMATO_CONCENTRACION_PM4_0, concentraciones.pm4_0);
    // uart_print(buffer);
    // sprintf(buffer, FORMATO_CONCENTRACION_PM10, concentraciones.pm10);
    // uart_print(buffer);
}
 8004222:	bf00      	nop
 8004224:	37e4      	adds	r7, #228	; 0xe4
 8004226:	46bd      	mov	sp, r7
 8004228:	bd90      	pop	{r4, r7, pc}
 800422a:	bf00      	nop
 800422c:	08012ca4 	.word	0x08012ca4

08004230 <sps30_get_concentrations>:

ConcentracionesPM sps30_get_concentrations(SPS30 * self) {
 8004230:	b590      	push	{r4, r7, lr}
 8004232:	b0c3      	sub	sp, #268	; 0x10c
 8004234:	af02      	add	r7, sp, #8
 8004236:	6178      	str	r0, [r7, #20]
    uint8_t readCmd[] = SPS30_FRAME_READ_MEASUREMENT;
 8004238:	4a37      	ldr	r2, [pc, #220]	; (8004318 <sps30_get_concentrations+0xe8>)
 800423a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800423e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004242:	6018      	str	r0, [r3, #0]
 8004244:	3304      	adds	r3, #4
 8004246:	8019      	strh	r1, [r3, #0]
    uint8_t dataBuf[BUFFER_SIZE_READ_DATA] = {0};
 8004248:	2300      	movs	r3, #0
 800424a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800424e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004252:	2238      	movs	r2, #56	; 0x38
 8004254:	2100      	movs	r1, #0
 8004256:	4618      	mov	r0, r3
 8004258:	f008 fcf4 	bl	800cc44 <memset>
    uint8_t originalData[BUFFER_SIZE_READ_DATA] = {0};
 800425c:	2300      	movs	r3, #0
 800425e:	673b      	str	r3, [r7, #112]	; 0x70
 8004260:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004264:	2238      	movs	r2, #56	; 0x38
 8004266:	2100      	movs	r1, #0
 8004268:	4618      	mov	r0, r3
 800426a:	f008 fceb 	bl	800cc44 <memset>
    ConcentracionesPM concentraciones;

    self->send_receive(self, readCmd, sizeof(readCmd), dataBuf, sizeof(dataBuf));
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8004272:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004276:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 800427a:	223c      	movs	r2, #60	; 0x3c
 800427c:	9200      	str	r2, [sp, #0]
 800427e:	2206      	movs	r2, #6
 8004280:	6978      	ldr	r0, [r7, #20]
 8004282:	47a0      	blx	r4
    SHDLC_revertByteStuffing(dataBuf, sizeof(dataBuf), originalData);
 8004284:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8004288:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800428c:	213c      	movs	r1, #60	; 0x3c
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff fd40 	bl	8003d14 <SHDLC_revertByteStuffing>

    Shdlc_FrameMiso Newframe = {};
 8004294:	f107 031c 	add.w	r3, r7, #28
 8004298:	2241      	movs	r2, #65	; 0x41
 800429a:	2100      	movs	r1, #0
 800429c:	4618      	mov	r0, r3
 800429e:	f008 fcd1 	bl	800cc44 <memset>
    SHDLC_LoadMyVector(&Newframe, originalData,
                       SHDLC_CalculateDataSize(originalData, sizeof(originalData)));
 80042a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80042a6:	213c      	movs	r1, #60	; 0x3c
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7ff fce7 	bl	8003c7c <SHDLC_CalculateDataSize>
 80042ae:	4603      	mov	r3, r0
    SHDLC_LoadMyVector(&Newframe, originalData,
 80042b0:	461a      	mov	r2, r3
 80042b2:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80042b6:	f107 031c 	add.w	r3, r7, #28
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7ff fca8 	bl	8003c10 <SHDLC_LoadMyVector>
    SHDLC_llenarConcentraciones(&concentraciones, Newframe.myVector);
 80042c0:	f107 031c 	add.w	r3, r7, #28
 80042c4:	1cda      	adds	r2, r3, #3
 80042c6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80042ca:	4611      	mov	r1, r2
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff fdab 	bl	8003e28 <SHDLC_llenarConcentraciones>

    return concentraciones;
 80042d2:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 80042d6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80042da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80042dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80042e0:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 80042e4:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 80042e8:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80042ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042f0:	ee06 0a10 	vmov	s12, r0
 80042f4:	ee06 1a90 	vmov	s13, r1
 80042f8:	ee07 2a10 	vmov	s14, r2
 80042fc:	ee07 3a90 	vmov	s15, r3
}
 8004300:	eeb0 0a46 	vmov.f32	s0, s12
 8004304:	eef0 0a66 	vmov.f32	s1, s13
 8004308:	eeb0 1a47 	vmov.f32	s2, s14
 800430c:	eef0 1a67 	vmov.f32	s3, s15
 8004310:	f507 7782 	add.w	r7, r7, #260	; 0x104
 8004314:	46bd      	mov	sp, r7
 8004316:	bd90      	pop	{r4, r7, pc}
 8004318:	08012ca4 	.word	0x08012ca4

0800431c <sps30_serial_number>:

bool sps30_serial_number(SPS30 * self, char * out_serial) {
 800431c:	b590      	push	{r4, r7, lr}
 800431e:	b091      	sub	sp, #68	; 0x44
 8004320:	af02      	add	r7, sp, #8
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
    static const uint8_t cmd_serial[] = SPS30_FRAME_SERIAL_NUMBER;
    uint8_t respuesta[48] = {0};
 8004326:	2300      	movs	r3, #0
 8004328:	60bb      	str	r3, [r7, #8]
 800432a:	f107 030c 	add.w	r3, r7, #12
 800432e:	222c      	movs	r2, #44	; 0x2c
 8004330:	2100      	movs	r1, #0
 8004332:	4618      	mov	r0, r3
 8004334:	f008 fc86 	bl	800cc44 <memset>
    if (respuesta[0] != 0xD3 || respuesta[1] != 0x00) {
        return false;
    }
*/

    self->send_receive(self, cmd_serial, sizeof(cmd_serial), respuesta, sizeof(respuesta));
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800433c:	f107 0308 	add.w	r3, r7, #8
 8004340:	2230      	movs	r2, #48	; 0x30
 8004342:	9200      	str	r2, [sp, #0]
 8004344:	2207      	movs	r2, #7
 8004346:	490c      	ldr	r1, [pc, #48]	; (8004378 <sps30_serial_number+0x5c>)
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	47a0      	blx	r4

    if (respuesta[0] == '\0') {
 800434c:	7a3b      	ldrb	r3, [r7, #8]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <sps30_serial_number+0x3a>
        return false;
 8004352:	2300      	movs	r3, #0
 8004354:	e00c      	b.n	8004370 <sps30_serial_number+0x54>
    }
    // Copiar serial: desde byte 4 hasta byte 4+32 (o menos)
    strncpy(out_serial, (const char *)&respuesta[5], SERIAL_BUFFER_LEN - 1);
 8004356:	f107 0308 	add.w	r3, r7, #8
 800435a:	3305      	adds	r3, #5
 800435c:	2220      	movs	r2, #32
 800435e:	4619      	mov	r1, r3
 8004360:	6838      	ldr	r0, [r7, #0]
 8004362:	f009 fd19 	bl	800dd98 <strncpy>
    out_serial[SERIAL_BUFFER_LEN - 1] = '\0'; // Terminar manualmente por seguridad
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	3320      	adds	r3, #32
 800436a:	2200      	movs	r2, #0
 800436c:	701a      	strb	r2, [r3, #0]

    return true;
 800436e:	2301      	movs	r3, #1
}
 8004370:	4618      	mov	r0, r3
 8004372:	373c      	adds	r7, #60	; 0x3c
 8004374:	46bd      	mov	sp, r7
 8004376:	bd90      	pop	{r4, r7, pc}
 8004378:	08013184 	.word	0x08013184

0800437c <sps30_wake_up>:

void sps30_wake_up(SPS30 * self) {
 800437c:	b590      	push	{r4, r7, lr}
 800437e:	b089      	sub	sp, #36	; 0x24
 8004380:	af02      	add	r7, sp, #8
 8004382:	6078      	str	r0, [r7, #4]
    uint8_t Pulse = SPS30_PULSE_WAKE_UP;
 8004384:	23ff      	movs	r3, #255	; 0xff
 8004386:	75fb      	strb	r3, [r7, #23]
    uint8_t readCmd[] = SPS30_FRAME_WAKE_UP;
 8004388:	4a13      	ldr	r2, [pc, #76]	; (80043d8 <sps30_wake_up+0x5c>)
 800438a:	f107 0310 	add.w	r3, r7, #16
 800438e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004392:	6018      	str	r0, [r3, #0]
 8004394:	3304      	adds	r3, #4
 8004396:	8019      	strh	r1, [r3, #0]
 8004398:	3302      	adds	r3, #2
 800439a:	0c0a      	lsrs	r2, r1, #16
 800439c:	701a      	strb	r2, [r3, #0]
    uint8_t dataBuf[BUFFER_SIZE_WAKEUP] = {0};
 800439e:	2300      	movs	r3, #0
 80043a0:	60bb      	str	r3, [r7, #8]
 80043a2:	2300      	movs	r3, #0
 80043a4:	60fb      	str	r3, [r7, #12]
    //   char respuestaStr[BUFFER_SIZE_RESPONSE];

    // uart_print(MSG_SOLICITAR);
    // uart_vector_print(sizeof(readCmd), readCmd);
    self->send_command(self, &Pulse, sizeof(Pulse));
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043aa:	f107 0117 	add.w	r1, r7, #23
 80043ae:	2201      	movs	r2, #1
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	4798      	blx	r3
    HAL_Delay(DELAY_WAKEUP);
 80043b4:	2032      	movs	r0, #50	; 0x32
 80043b6:	f001 fadb 	bl	8005970 <HAL_Delay>
    self->send_receive(self, readCmd, sizeof(readCmd), dataBuf, sizeof(dataBuf));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80043be:	f107 0308 	add.w	r3, r7, #8
 80043c2:	f107 0110 	add.w	r1, r7, #16
 80043c6:	2208      	movs	r2, #8
 80043c8:	9200      	str	r2, [sp, #0]
 80043ca:	2207      	movs	r2, #7
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	47a0      	blx	r4
    // uart_vector_print(sizeof(dataBuf), dataBuf);

    //   int longRespuesta = SHDLC_CalculateDataSize(dataBuf, sizeof(dataBuf));
    // snprintf(respuestaStr, sizeof(respuestaStr), MENSAJE_SIZE_RESPUESTA, longRespuesta);
    // uart_print(respuestaStr);
}
 80043d0:	bf00      	nop
 80043d2:	371c      	adds	r7, #28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd90      	pop	{r4, r7, pc}
 80043d8:	08012cac 	.word	0x08012cac

080043dc <SPS30_init>:

void SPS30_init(SPS30 * self, UART_HandleTypeDef * huart) {
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
    self->huart = huart;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	601a      	str	r2, [r3, #0]
    self->send_command = sps30_send_command;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a11      	ldr	r2, [pc, #68]	; (8004434 <SPS30_init+0x58>)
 80043f0:	629a      	str	r2, [r3, #40]	; 0x28
    self->receive_async = sps30_receive_async;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a10      	ldr	r2, [pc, #64]	; (8004438 <SPS30_init+0x5c>)
 80043f6:	62da      	str	r2, [r3, #44]	; 0x2c
    self->send_receive = sps30_send_receive;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a10      	ldr	r2, [pc, #64]	; (800443c <SPS30_init+0x60>)
 80043fc:	631a      	str	r2, [r3, #48]	; 0x30
    self->start_measurement = sps30_start_measurement;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a0f      	ldr	r2, [pc, #60]	; (8004440 <SPS30_init+0x64>)
 8004402:	635a      	str	r2, [r3, #52]	; 0x34
    self->stop_measurement = sps30_stop_measurement;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a0f      	ldr	r2, [pc, #60]	; (8004444 <SPS30_init+0x68>)
 8004408:	639a      	str	r2, [r3, #56]	; 0x38
    self->sleep = sps30_sleep;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a0e      	ldr	r2, [pc, #56]	; (8004448 <SPS30_init+0x6c>)
 800440e:	63da      	str	r2, [r3, #60]	; 0x3c
    self->read_data = sps30_read_data;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a0e      	ldr	r2, [pc, #56]	; (800444c <SPS30_init+0x70>)
 8004414:	641a      	str	r2, [r3, #64]	; 0x40
    self->serial_number = sps30_serial_number;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a0d      	ldr	r2, [pc, #52]	; (8004450 <SPS30_init+0x74>)
 800441a:	645a      	str	r2, [r3, #68]	; 0x44
    self->wake_up = sps30_wake_up;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a0d      	ldr	r2, [pc, #52]	; (8004454 <SPS30_init+0x78>)
 8004420:	649a      	str	r2, [r3, #72]	; 0x48
    self->get_concentrations = sps30_get_concentrations;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a0c      	ldr	r2, [pc, #48]	; (8004458 <SPS30_init+0x7c>)
 8004426:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	08003ffd 	.word	0x08003ffd
 8004438:	08004021 	.word	0x08004021
 800443c:	08004045 	.word	0x08004045
 8004440:	08004091 	.word	0x08004091
 8004444:	080040e9 	.word	0x080040e9
 8004448:	08004139 	.word	0x08004139
 800444c:	0800417d 	.word	0x0800417d
 8004450:	0800431d 	.word	0x0800431d
 8004454:	0800437d 	.word	0x0800437d
 8004458:	08004231 	.word	0x08004231

0800445c <inicializar_sensores_sps30>:
SensorSPS30 sensores_sps30[NUM_SENSORES_SPS30];
int sensores_disponibles = 0;

/* === Funciones ============================================================================== */

void inicializar_sensores_sps30(void) {
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
    sensores_disponibles = 0;
 8004460:	4b38      	ldr	r3, [pc, #224]	; (8004544 <inicializar_sensores_sps30+0xe8>)
 8004462:	2200      	movs	r2, #0
 8004464:	601a      	str	r2, [r3, #0]

#if 1 // UART5 está habilitado
    sensores_sps30[sensores_disponibles].id = ID_SENSOR_UNO;
 8004466:	4b37      	ldr	r3, [pc, #220]	; (8004544 <inicializar_sensores_sps30+0xe8>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a37      	ldr	r2, [pc, #220]	; (8004548 <inicializar_sensores_sps30+0xec>)
 800446c:	2158      	movs	r1, #88	; 0x58
 800446e:	fb01 f303 	mul.w	r3, r1, r3
 8004472:	4413      	add	r3, r2
 8004474:	3350      	adds	r3, #80	; 0x50
 8004476:	2201      	movs	r2, #1
 8004478:	701a      	strb	r2, [r3, #0]
    sensores_sps30[sensores_disponibles].uart = &huart5;
 800447a:	4b32      	ldr	r3, [pc, #200]	; (8004544 <inicializar_sensores_sps30+0xe8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a32      	ldr	r2, [pc, #200]	; (8004548 <inicializar_sensores_sps30+0xec>)
 8004480:	2158      	movs	r1, #88	; 0x58
 8004482:	fb01 f303 	mul.w	r3, r1, r3
 8004486:	4413      	add	r3, r2
 8004488:	3354      	adds	r3, #84	; 0x54
 800448a:	4a30      	ldr	r2, [pc, #192]	; (800454c <inicializar_sensores_sps30+0xf0>)
 800448c:	601a      	str	r2, [r3, #0]
    SPS30_init(&sensores_sps30[sensores_disponibles].sensor, &huart5);
 800448e:	4b2d      	ldr	r3, [pc, #180]	; (8004544 <inicializar_sensores_sps30+0xe8>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2258      	movs	r2, #88	; 0x58
 8004494:	fb02 f303 	mul.w	r3, r2, r3
 8004498:	4a2b      	ldr	r2, [pc, #172]	; (8004548 <inicializar_sensores_sps30+0xec>)
 800449a:	4413      	add	r3, r2
 800449c:	492b      	ldr	r1, [pc, #172]	; (800454c <inicializar_sensores_sps30+0xf0>)
 800449e:	4618      	mov	r0, r3
 80044a0:	f7ff ff9c 	bl	80043dc <SPS30_init>
    sensores_disponibles++;
 80044a4:	4b27      	ldr	r3, [pc, #156]	; (8004544 <inicializar_sensores_sps30+0xe8>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	3301      	adds	r3, #1
 80044aa:	4a26      	ldr	r2, [pc, #152]	; (8004544 <inicializar_sensores_sps30+0xe8>)
 80044ac:	6013      	str	r3, [r2, #0]
#endif

#if 1 // Habilitar cuando uses UART7
    sensores_sps30[sensores_disponibles].id = ID_SENSOR_DOS;
 80044ae:	4b25      	ldr	r3, [pc, #148]	; (8004544 <inicializar_sensores_sps30+0xe8>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a25      	ldr	r2, [pc, #148]	; (8004548 <inicializar_sensores_sps30+0xec>)
 80044b4:	2158      	movs	r1, #88	; 0x58
 80044b6:	fb01 f303 	mul.w	r3, r1, r3
 80044ba:	4413      	add	r3, r2
 80044bc:	3350      	adds	r3, #80	; 0x50
 80044be:	2202      	movs	r2, #2
 80044c0:	701a      	strb	r2, [r3, #0]
    sensores_sps30[sensores_disponibles].uart = &huart7;
 80044c2:	4b20      	ldr	r3, [pc, #128]	; (8004544 <inicializar_sensores_sps30+0xe8>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a20      	ldr	r2, [pc, #128]	; (8004548 <inicializar_sensores_sps30+0xec>)
 80044c8:	2158      	movs	r1, #88	; 0x58
 80044ca:	fb01 f303 	mul.w	r3, r1, r3
 80044ce:	4413      	add	r3, r2
 80044d0:	3354      	adds	r3, #84	; 0x54
 80044d2:	4a1f      	ldr	r2, [pc, #124]	; (8004550 <inicializar_sensores_sps30+0xf4>)
 80044d4:	601a      	str	r2, [r3, #0]
    SPS30_init(&sensores_sps30[sensores_disponibles].sensor, &huart7);
 80044d6:	4b1b      	ldr	r3, [pc, #108]	; (8004544 <inicializar_sensores_sps30+0xe8>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2258      	movs	r2, #88	; 0x58
 80044dc:	fb02 f303 	mul.w	r3, r2, r3
 80044e0:	4a19      	ldr	r2, [pc, #100]	; (8004548 <inicializar_sensores_sps30+0xec>)
 80044e2:	4413      	add	r3, r2
 80044e4:	491a      	ldr	r1, [pc, #104]	; (8004550 <inicializar_sensores_sps30+0xf4>)
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7ff ff78 	bl	80043dc <SPS30_init>
    sensores_disponibles++;
 80044ec:	4b15      	ldr	r3, [pc, #84]	; (8004544 <inicializar_sensores_sps30+0xe8>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	3301      	adds	r3, #1
 80044f2:	4a14      	ldr	r2, [pc, #80]	; (8004544 <inicializar_sensores_sps30+0xe8>)
 80044f4:	6013      	str	r3, [r2, #0]
#endif

#if 1 // Habilitar cuando uses UART8
    sensores_sps30[sensores_disponibles].id = ID_SENSOR_TRES;
 80044f6:	4b13      	ldr	r3, [pc, #76]	; (8004544 <inicializar_sensores_sps30+0xe8>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a13      	ldr	r2, [pc, #76]	; (8004548 <inicializar_sensores_sps30+0xec>)
 80044fc:	2158      	movs	r1, #88	; 0x58
 80044fe:	fb01 f303 	mul.w	r3, r1, r3
 8004502:	4413      	add	r3, r2
 8004504:	3350      	adds	r3, #80	; 0x50
 8004506:	2203      	movs	r2, #3
 8004508:	701a      	strb	r2, [r3, #0]
    sensores_sps30[sensores_disponibles].uart = &huart1;
 800450a:	4b0e      	ldr	r3, [pc, #56]	; (8004544 <inicializar_sensores_sps30+0xe8>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a0e      	ldr	r2, [pc, #56]	; (8004548 <inicializar_sensores_sps30+0xec>)
 8004510:	2158      	movs	r1, #88	; 0x58
 8004512:	fb01 f303 	mul.w	r3, r1, r3
 8004516:	4413      	add	r3, r2
 8004518:	3354      	adds	r3, #84	; 0x54
 800451a:	4a0e      	ldr	r2, [pc, #56]	; (8004554 <inicializar_sensores_sps30+0xf8>)
 800451c:	601a      	str	r2, [r3, #0]
    SPS30_init(&sensores_sps30[sensores_disponibles].sensor, &huart1);
 800451e:	4b09      	ldr	r3, [pc, #36]	; (8004544 <inicializar_sensores_sps30+0xe8>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2258      	movs	r2, #88	; 0x58
 8004524:	fb02 f303 	mul.w	r3, r2, r3
 8004528:	4a07      	ldr	r2, [pc, #28]	; (8004548 <inicializar_sensores_sps30+0xec>)
 800452a:	4413      	add	r3, r2
 800452c:	4909      	ldr	r1, [pc, #36]	; (8004554 <inicializar_sensores_sps30+0xf8>)
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff ff54 	bl	80043dc <SPS30_init>
    sensores_disponibles++;
 8004534:	4b03      	ldr	r3, [pc, #12]	; (8004544 <inicializar_sensores_sps30+0xe8>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3301      	adds	r3, #1
 800453a:	4a02      	ldr	r2, [pc, #8]	; (8004544 <inicializar_sensores_sps30+0xe8>)
 800453c:	6013      	str	r3, [r2, #0]
#endif
}
 800453e:	bf00      	nop
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	2000235c 	.word	0x2000235c
 8004548:	20002254 	.word	0x20002254
 800454c:	20002440 	.word	0x20002440
 8004550:	20002484 	.word	0x20002484
 8004554:	200024c8 	.word	0x200024c8

08004558 <rtc_external_available>:

/* === Función interna ============================================================= */
/**
 * @brief Verifica si el RTC externo responde por I2C
 */
static bool rtc_external_available(void) {
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
    return (HAL_I2C_IsDeviceReady(&RTC_I2C_HANDLER, RTC_I2C_ADDRESS, RTC_RETRIES, RTC_TIMEOUT_MS) ==
 800455c:	2364      	movs	r3, #100	; 0x64
 800455e:	2203      	movs	r2, #3
 8004560:	21d0      	movs	r1, #208	; 0xd0
 8004562:	4805      	ldr	r0, [pc, #20]	; (8004578 <rtc_external_available+0x20>)
 8004564:	f002 fb5a 	bl	8006c1c <HAL_I2C_IsDeviceReady>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	bf0c      	ite	eq
 800456e:	2301      	moveq	r3, #1
 8004570:	2300      	movne	r3, #0
 8004572:	b2db      	uxtb	r3, r3
            HAL_OK);
}
 8004574:	4618      	mov	r0, r3
 8004576:	bd80      	pop	{r7, pc}
 8004578:	20002368 	.word	0x20002368

0800457c <rtc_auto_init>:
/**
 * @brief Inicializa automáticamente el RTC (externo o interno), y si está habilitado,
 *        configura la hora con el timestamp de compilación en caso de ser necesario.
 */

bool rtc_auto_init(void) {
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
    if (rtc_external_available()) {
 8004580:	f7ff ffea 	bl	8004558 <rtc_external_available>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d007      	beq.n	800459a <rtc_auto_init+0x1e>
        DS3231_Init(&RTC_I2C_HANDLER);
 800458a:	4808      	ldr	r0, [pc, #32]	; (80045ac <rtc_auto_init+0x30>)
 800458c:	f7ff f926 	bl	80037dc <DS3231_Init>
        active_rtc = RTC_SOURCE_EXTERNAL;
 8004590:	4b07      	ldr	r3, [pc, #28]	; (80045b0 <rtc_auto_init+0x34>)
 8004592:	2201      	movs	r2, #1
 8004594:	701a      	strb	r2, [r3, #0]
            DS3231_DateTime build_time = rtc_get_compile_time();
            DS3231_SetDateTime(&build_time);
            return false; // hora inválida
        }
#endif
        return true;
 8004596:	2301      	movs	r3, #1
 8004598:	e005      	b.n	80045a6 <rtc_auto_init+0x2a>
    } else {
        MX_RTC_Init();
 800459a:	f000 fc99 	bl	8004ed0 <MX_RTC_Init>
        active_rtc = RTC_SOURCE_INTERNAL;
 800459e:	4b04      	ldr	r3, [pc, #16]	; (80045b0 <rtc_auto_init+0x34>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	701a      	strb	r2, [r3, #0]
        return true; // aunque sea interno, se considera OK
 80045a4:	2301      	movs	r3, #1
    }
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	20002368 	.word	0x20002368
 80045b0:	20002360 	.word	0x20002360

080045b4 <RTC_ReceiveTimeFromTerminal>:

/* === Interfaz de usuario por UART ================================================== */

bool RTC_ReceiveTimeFromTerminal(UART_HandleTypeDef * huart) {
 80045b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045b6:	b0c3      	sub	sp, #268	; 0x10c
 80045b8:	af06      	add	r7, sp, #24
 80045ba:	6078      	str	r0, [r7, #4]
    char rx_buffer[UART_INPUT_BUFFER_LEN] = {0};
 80045bc:	2300      	movs	r3, #0
 80045be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80045c2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80045c6:	2200      	movs	r2, #0
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	605a      	str	r2, [r3, #4]
 80045cc:	609a      	str	r2, [r3, #8]
 80045ce:	60da      	str	r2, [r3, #12]
 80045d0:	611a      	str	r2, [r3, #16]
 80045d2:	615a      	str	r2, [r3, #20]
 80045d4:	619a      	str	r2, [r3, #24]
    char debug_buf[UART_DEBUG_BUFFER_LEN];
    uint8_t idx = 0;
 80045d6:	2300      	movs	r3, #0
 80045d8:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    uint32_t start_tick = HAL_GetTick();
 80045dc:	f001 f9bc 	bl	8005958 <HAL_GetTick>
 80045e0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
    HAL_StatusTypeDef status;

    uart_print(RTC_PROMPT_MSG);
 80045e4:	489d      	ldr	r0, [pc, #628]	; (800485c <RTC_ReceiveTimeFromTerminal+0x2a8>)
 80045e6:	f000 f959 	bl	800489c <uart_print>

    while ((HAL_GetTick() - start_tick) < UART_INPUT_TIMEOUT_MS) {
 80045ea:	e026      	b.n	800463a <RTC_ReceiveTimeFromTerminal+0x86>
        uint8_t ch;
        status = HAL_UART_Receive(huart, &ch, 1, UART_TIMEOUT_MS);
 80045ec:	f107 010f 	add.w	r1, r7, #15
 80045f0:	2364      	movs	r3, #100	; 0x64
 80045f2:	2201      	movs	r2, #1
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f004 fe10 	bl	800921a <HAL_UART_Receive>
 80045fa:	4603      	mov	r3, r0
 80045fc:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
        if (status == HAL_OK) {
 8004600:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8004604:	2b00      	cmp	r3, #0
 8004606:	d118      	bne.n	800463a <RTC_ReceiveTimeFromTerminal+0x86>
            if (ch == ';') {
 8004608:	7bfb      	ldrb	r3, [r7, #15]
 800460a:	2b3b      	cmp	r3, #59	; 0x3b
 800460c:	d107      	bne.n	800461e <RTC_ReceiveTimeFromTerminal+0x6a>
                rx_buffer[idx] = '\0';
 800460e:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8004612:	33f0      	adds	r3, #240	; 0xf0
 8004614:	443b      	add	r3, r7
 8004616:	2200      	movs	r2, #0
 8004618:	f803 2c2c 	strb.w	r2, [r3, #-44]
 800461c:	e017      	b.n	800464e <RTC_ReceiveTimeFromTerminal+0x9a>
                break;
            }
            if (idx < UART_INPUT_BUFFER_LEN - 1) {
 800461e:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8004622:	2b1e      	cmp	r3, #30
 8004624:	d809      	bhi.n	800463a <RTC_ReceiveTimeFromTerminal+0x86>
                rx_buffer[idx++] = ch;
 8004626:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800462a:	1c5a      	adds	r2, r3, #1
 800462c:	f887 20ef 	strb.w	r2, [r7, #239]	; 0xef
 8004630:	7bfa      	ldrb	r2, [r7, #15]
 8004632:	33f0      	adds	r3, #240	; 0xf0
 8004634:	443b      	add	r3, r7
 8004636:	f803 2c2c 	strb.w	r2, [r3, #-44]
    while ((HAL_GetTick() - start_tick) < UART_INPUT_TIMEOUT_MS) {
 800463a:	f001 f98d 	bl	8005958 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	f247 522f 	movw	r2, #29999	; 0x752f
 800464a:	4293      	cmp	r3, r2
 800464c:	d9ce      	bls.n	80045ec <RTC_ReceiveTimeFromTerminal+0x38>
            }
        }
    }

    if (idx < 14) {
 800464e:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8004652:	2b0d      	cmp	r3, #13
 8004654:	d804      	bhi.n	8004660 <RTC_ReceiveTimeFromTerminal+0xac>
        uart_print(RTC_PARSE_FAIL_MSG);
 8004656:	4882      	ldr	r0, [pc, #520]	; (8004860 <RTC_ReceiveTimeFromTerminal+0x2ac>)
 8004658:	f000 f920 	bl	800489c <uart_print>
        return false;
 800465c:	2300      	movs	r3, #0
 800465e:	e0f9      	b.n	8004854 <RTC_ReceiveTimeFromTerminal+0x2a0>
    }

    snprintf(debug_buf, sizeof(debug_buf), "[DEBUG] Entrada recibida: %s\r\n", rx_buffer);
 8004660:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004664:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8004668:	4a7e      	ldr	r2, [pc, #504]	; (8004864 <RTC_ReceiveTimeFromTerminal+0x2b0>)
 800466a:	2180      	movs	r1, #128	; 0x80
 800466c:	f009 fad8 	bl	800dc20 <sniprintf>
    uart_print(debug_buf);
 8004670:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004674:	4618      	mov	r0, r3
 8004676:	f000 f911 	bl	800489c <uart_print>

    rx_buffer[strcspn(rx_buffer, "\r\n;")] = '\0';
 800467a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800467e:	497a      	ldr	r1, [pc, #488]	; (8004868 <RTC_ReceiveTimeFromTerminal+0x2b4>)
 8004680:	4618      	mov	r0, r3
 8004682:	f009 fb64 	bl	800dd4e <strcspn>
 8004686:	4603      	mov	r3, r0
 8004688:	33f0      	adds	r3, #240	; 0xf0
 800468a:	443b      	add	r3, r7
 800468c:	2200      	movs	r2, #0
 800468e:	f803 2c2c 	strb.w	r2, [r3, #-44]

    char year_str[5] = {0}, month_str[3] = {0}, day_str[3] = {0};
 8004692:	2300      	movs	r3, #0
 8004694:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004696:	2300      	movs	r3, #0
 8004698:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 800469c:	4b73      	ldr	r3, [pc, #460]	; (800486c <RTC_ReceiveTimeFromTerminal+0x2b8>)
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	873b      	strh	r3, [r7, #56]	; 0x38
 80046a2:	2300      	movs	r3, #0
 80046a4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 80046a8:	4b70      	ldr	r3, [pc, #448]	; (800486c <RTC_ReceiveTimeFromTerminal+0x2b8>)
 80046aa:	881b      	ldrh	r3, [r3, #0]
 80046ac:	86bb      	strh	r3, [r7, #52]	; 0x34
 80046ae:	2300      	movs	r3, #0
 80046b0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    char hour_str[3] = {0}, min_str[3] = {0}, sec_str[3] = {0};
 80046b4:	4b6d      	ldr	r3, [pc, #436]	; (800486c <RTC_ReceiveTimeFromTerminal+0x2b8>)
 80046b6:	881b      	ldrh	r3, [r3, #0]
 80046b8:	863b      	strh	r3, [r7, #48]	; 0x30
 80046ba:	2300      	movs	r3, #0
 80046bc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80046c0:	4b6a      	ldr	r3, [pc, #424]	; (800486c <RTC_ReceiveTimeFromTerminal+0x2b8>)
 80046c2:	881b      	ldrh	r3, [r3, #0]
 80046c4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80046c6:	2300      	movs	r3, #0
 80046c8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80046cc:	4b67      	ldr	r3, [pc, #412]	; (800486c <RTC_ReceiveTimeFromTerminal+0x2b8>)
 80046ce:	881b      	ldrh	r3, [r3, #0]
 80046d0:	853b      	strh	r3, [r7, #40]	; 0x28
 80046d2:	2300      	movs	r3, #0
 80046d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

    strncpy(year_str, rx_buffer + 0, 4);
 80046d8:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80046dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80046e0:	2204      	movs	r2, #4
 80046e2:	4618      	mov	r0, r3
 80046e4:	f009 fb58 	bl	800dd98 <strncpy>
    strncpy(month_str, rx_buffer + 4, 2);
 80046e8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80046ec:	3304      	adds	r3, #4
 80046ee:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80046f2:	2202      	movs	r2, #2
 80046f4:	4619      	mov	r1, r3
 80046f6:	f009 fb4f 	bl	800dd98 <strncpy>
    strncpy(day_str, rx_buffer + 6, 2);
 80046fa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80046fe:	3306      	adds	r3, #6
 8004700:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8004704:	2202      	movs	r2, #2
 8004706:	4619      	mov	r1, r3
 8004708:	f009 fb46 	bl	800dd98 <strncpy>
    strncpy(hour_str, rx_buffer + 8, 2);
 800470c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004710:	3308      	adds	r3, #8
 8004712:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8004716:	2202      	movs	r2, #2
 8004718:	4619      	mov	r1, r3
 800471a:	f009 fb3d 	bl	800dd98 <strncpy>
    strncpy(min_str, rx_buffer + 10, 2);
 800471e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004722:	330a      	adds	r3, #10
 8004724:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8004728:	2202      	movs	r2, #2
 800472a:	4619      	mov	r1, r3
 800472c:	f009 fb34 	bl	800dd98 <strncpy>
    strncpy(sec_str, rx_buffer + 12, 2);
 8004730:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004734:	330c      	adds	r3, #12
 8004736:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800473a:	2202      	movs	r2, #2
 800473c:	4619      	mov	r1, r3
 800473e:	f009 fb2b 	bl	800dd98 <strncpy>

    uint16_t year = atoi(year_str);
 8004742:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004746:	4618      	mov	r0, r3
 8004748:	f008 fa2f 	bl	800cbaa <atoi>
 800474c:	4603      	mov	r3, r0
 800474e:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
    RTC_DateTypeDef date = {0};
 8004752:	2300      	movs	r3, #0
 8004754:	627b      	str	r3, [r7, #36]	; 0x24
    RTC_TimeTypeDef time = {0};
 8004756:	f107 0310 	add.w	r3, r7, #16
 800475a:	2200      	movs	r2, #0
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	605a      	str	r2, [r3, #4]
 8004760:	609a      	str	r2, [r3, #8]
 8004762:	60da      	str	r2, [r3, #12]
 8004764:	611a      	str	r2, [r3, #16]

    date.Month = atoi(month_str);
 8004766:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800476a:	4618      	mov	r0, r3
 800476c:	f008 fa1d 	bl	800cbaa <atoi>
 8004770:	4603      	mov	r3, r0
 8004772:	b2db      	uxtb	r3, r3
 8004774:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    date.Date = atoi(day_str);
 8004778:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800477c:	4618      	mov	r0, r3
 800477e:	f008 fa14 	bl	800cbaa <atoi>
 8004782:	4603      	mov	r3, r0
 8004784:	b2db      	uxtb	r3, r3
 8004786:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    time.Hours = atoi(hour_str);
 800478a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800478e:	4618      	mov	r0, r3
 8004790:	f008 fa0b 	bl	800cbaa <atoi>
 8004794:	4603      	mov	r3, r0
 8004796:	b2db      	uxtb	r3, r3
 8004798:	743b      	strb	r3, [r7, #16]
    time.Minutes = atoi(min_str);
 800479a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800479e:	4618      	mov	r0, r3
 80047a0:	f008 fa03 	bl	800cbaa <atoi>
 80047a4:	4603      	mov	r3, r0
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	747b      	strb	r3, [r7, #17]
    time.Seconds = atoi(sec_str);
 80047aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047ae:	4618      	mov	r0, r3
 80047b0:	f008 f9fb 	bl	800cbaa <atoi>
 80047b4:	4603      	mov	r3, r0
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	74bb      	strb	r3, [r7, #18]

    snprintf(debug_buf, sizeof(debug_buf), "Fecha parseada: %04u-%02u-%02u %02u:%02u:%02u\r\n",
 80047ba:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
             year, date.Month, date.Date, time.Hours, time.Minutes, time.Seconds);
 80047be:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80047c2:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80047c6:	7c38      	ldrb	r0, [r7, #16]
    snprintf(debug_buf, sizeof(debug_buf), "Fecha parseada: %04u-%02u-%02u %02u:%02u:%02u\r\n",
 80047c8:	4604      	mov	r4, r0
             year, date.Month, date.Date, time.Hours, time.Minutes, time.Seconds);
 80047ca:	7c78      	ldrb	r0, [r7, #17]
    snprintf(debug_buf, sizeof(debug_buf), "Fecha parseada: %04u-%02u-%02u %02u:%02u:%02u\r\n",
 80047cc:	4605      	mov	r5, r0
             year, date.Month, date.Date, time.Hours, time.Minutes, time.Seconds);
 80047ce:	7cb8      	ldrb	r0, [r7, #18]
    snprintf(debug_buf, sizeof(debug_buf), "Fecha parseada: %04u-%02u-%02u %02u:%02u:%02u\r\n",
 80047d0:	4606      	mov	r6, r0
 80047d2:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80047d6:	9604      	str	r6, [sp, #16]
 80047d8:	9503      	str	r5, [sp, #12]
 80047da:	9402      	str	r4, [sp, #8]
 80047dc:	9101      	str	r1, [sp, #4]
 80047de:	9200      	str	r2, [sp, #0]
 80047e0:	4a23      	ldr	r2, [pc, #140]	; (8004870 <RTC_ReceiveTimeFromTerminal+0x2bc>)
 80047e2:	2180      	movs	r1, #128	; 0x80
 80047e4:	f009 fa1c 	bl	800dc20 <sniprintf>
    uart_print(debug_buf);
 80047e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 f855 	bl	800489c <uart_print>

    if (year < RTC_YEAR_MIN || year > RTC_YEAR_MAX) {
 80047f2:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 80047f6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80047fa:	d305      	bcc.n	8004808 <RTC_ReceiveTimeFromTerminal+0x254>
 80047fc:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8004800:	f640 0233 	movw	r2, #2099	; 0x833
 8004804:	4293      	cmp	r3, r2
 8004806:	d904      	bls.n	8004812 <RTC_ReceiveTimeFromTerminal+0x25e>
        uart_print(RTC_YEAR_ERROR_MSG);
 8004808:	481a      	ldr	r0, [pc, #104]	; (8004874 <RTC_ReceiveTimeFromTerminal+0x2c0>)
 800480a:	f000 f847 	bl	800489c <uart_print>
        return false;
 800480e:	2300      	movs	r3, #0
 8004810:	e020      	b.n	8004854 <RTC_ReceiveTimeFromTerminal+0x2a0>
    }

    date.Year = (uint8_t)(year - 2000);
 8004812:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8004816:	b2db      	uxtb	r3, r3
 8004818:	3330      	adds	r3, #48	; 0x30
 800481a:	b2db      	uxtb	r3, r3
 800481c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    date.WeekDay = 1;
 8004820:	2301      	movs	r3, #1
 8004822:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

    if (!RTC_DS3231_Set(&date, &time)) {
 8004826:	f107 0210 	add.w	r2, r7, #16
 800482a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800482e:	4611      	mov	r1, r2
 8004830:	4618      	mov	r0, r3
 8004832:	f7ff f93f 	bl	8003ab4 <RTC_DS3231_Set>
 8004836:	4603      	mov	r3, r0
 8004838:	f083 0301 	eor.w	r3, r3, #1
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d004      	beq.n	800484c <RTC_ReceiveTimeFromTerminal+0x298>
        uart_print(RTC_SET_ERROR_MSG);
 8004842:	480d      	ldr	r0, [pc, #52]	; (8004878 <RTC_ReceiveTimeFromTerminal+0x2c4>)
 8004844:	f000 f82a 	bl	800489c <uart_print>
        return false;
 8004848:	2300      	movs	r3, #0
 800484a:	e003      	b.n	8004854 <RTC_ReceiveTimeFromTerminal+0x2a0>
    }

    uart_print(RTC_SUCCESS_MSG);
 800484c:	480b      	ldr	r0, [pc, #44]	; (800487c <RTC_ReceiveTimeFromTerminal+0x2c8>)
 800484e:	f000 f825 	bl	800489c <uart_print>
    return true;
 8004852:	2301      	movs	r3, #1
}
 8004854:	4618      	mov	r0, r3
 8004856:	37f4      	adds	r7, #244	; 0xf4
 8004858:	46bd      	mov	sp, r7
 800485a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800485c:	08012cb4 	.word	0x08012cb4
 8004860:	08012ce0 	.word	0x08012ce0
 8004864:	08012d28 	.word	0x08012d28
 8004868:	08012d48 	.word	0x08012d48
 800486c:	08012dd4 	.word	0x08012dd4
 8004870:	08012d4c 	.word	0x08012d4c
 8004874:	08012d7c 	.word	0x08012d7c
 8004878:	08012d94 	.word	0x08012d94
 800487c:	08012db4 	.word	0x08012db4

08004880 <time_rtc_GetFormattedDateTime>:

void time_rtc_Init(void) {
    rtc_auto_init();
}

void time_rtc_GetFormattedDateTime(char * buffer, size_t len) {
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
    rtc_get_time(buffer, len);
 800488a:	6839      	ldr	r1, [r7, #0]
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f7ff f8ef 	bl	8003a70 <rtc_get_time>
}
 8004892:	bf00      	nop
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
	...

0800489c <uart_print>:

/**
 * @brief Envía un mensaje a través de UART3.
 * @param message Mensaje a enviar.
 */
void uart_print(const char * format, ...) {
 800489c:	b40f      	push	{r0, r1, r2, r3}
 800489e:	b590      	push	{r4, r7, lr}
 80048a0:	b0c3      	sub	sp, #268	; 0x10c
 80048a2:	af00      	add	r7, sp, #0
    char buffer[256];
    va_list args;
    va_start(args, format);
 80048a4:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 80048a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048b0:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 80048b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048ba:	f107 0008 	add.w	r0, r7, #8
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80048c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80048c8:	f00a f95c 	bl	800eb84 <vsniprintf>
    va_end(args);

    if (uart_debug != NULL) {
 80048cc:	4b0d      	ldr	r3, [pc, #52]	; (8004904 <uart_print+0x68>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00f      	beq.n	80048f4 <uart_print+0x58>
        HAL_UART_Transmit(uart_debug, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80048d4:	4b0b      	ldr	r3, [pc, #44]	; (8004904 <uart_print+0x68>)
 80048d6:	681c      	ldr	r4, [r3, #0]
 80048d8:	f107 0308 	add.w	r3, r7, #8
 80048dc:	4618      	mov	r0, r3
 80048de:	f7fb fc87 	bl	80001f0 <strlen>
 80048e2:	4603      	mov	r3, r0
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	f107 0108 	add.w	r1, r7, #8
 80048ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048ee:	4620      	mov	r0, r4
 80048f0:	f004 fc01 	bl	80090f6 <HAL_UART_Transmit>
    }
}
 80048f4:	bf00      	nop
 80048f6:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 80048fa:	46bd      	mov	sp, r7
 80048fc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004900:	b004      	add	sp, #16
 8004902:	4770      	bx	lr
 8004904:	20002364 	.word	0x20002364

08004908 <MX_GPIO_Init>:
 * Input
 * Output
 * EVENT_OUT
 * EXTI
 */
void MX_GPIO_Init(void) {
 8004908:	b580      	push	{r7, lr}
 800490a:	b08a      	sub	sp, #40	; 0x28
 800490c:	af00      	add	r7, sp, #0

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800490e:	f107 0314 	add.w	r3, r7, #20
 8004912:	2200      	movs	r2, #0
 8004914:	601a      	str	r2, [r3, #0]
 8004916:	605a      	str	r2, [r3, #4]
 8004918:	609a      	str	r2, [r3, #8]
 800491a:	60da      	str	r2, [r3, #12]
 800491c:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800491e:	2300      	movs	r3, #0
 8004920:	613b      	str	r3, [r7, #16]
 8004922:	4b36      	ldr	r3, [pc, #216]	; (80049fc <MX_GPIO_Init+0xf4>)
 8004924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004926:	4a35      	ldr	r2, [pc, #212]	; (80049fc <MX_GPIO_Init+0xf4>)
 8004928:	f043 0320 	orr.w	r3, r3, #32
 800492c:	6313      	str	r3, [r2, #48]	; 0x30
 800492e:	4b33      	ldr	r3, [pc, #204]	; (80049fc <MX_GPIO_Init+0xf4>)
 8004930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004932:	f003 0320 	and.w	r3, r3, #32
 8004936:	613b      	str	r3, [r7, #16]
 8004938:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800493a:	2300      	movs	r3, #0
 800493c:	60fb      	str	r3, [r7, #12]
 800493e:	4b2f      	ldr	r3, [pc, #188]	; (80049fc <MX_GPIO_Init+0xf4>)
 8004940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004942:	4a2e      	ldr	r2, [pc, #184]	; (80049fc <MX_GPIO_Init+0xf4>)
 8004944:	f043 0301 	orr.w	r3, r3, #1
 8004948:	6313      	str	r3, [r2, #48]	; 0x30
 800494a:	4b2c      	ldr	r3, [pc, #176]	; (80049fc <MX_GPIO_Init+0xf4>)
 800494c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	60fb      	str	r3, [r7, #12]
 8004954:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004956:	2300      	movs	r3, #0
 8004958:	60bb      	str	r3, [r7, #8]
 800495a:	4b28      	ldr	r3, [pc, #160]	; (80049fc <MX_GPIO_Init+0xf4>)
 800495c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495e:	4a27      	ldr	r2, [pc, #156]	; (80049fc <MX_GPIO_Init+0xf4>)
 8004960:	f043 0302 	orr.w	r3, r3, #2
 8004964:	6313      	str	r3, [r2, #48]	; 0x30
 8004966:	4b25      	ldr	r3, [pc, #148]	; (80049fc <MX_GPIO_Init+0xf4>)
 8004968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	60bb      	str	r3, [r7, #8]
 8004970:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004972:	2300      	movs	r3, #0
 8004974:	607b      	str	r3, [r7, #4]
 8004976:	4b21      	ldr	r3, [pc, #132]	; (80049fc <MX_GPIO_Init+0xf4>)
 8004978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497a:	4a20      	ldr	r2, [pc, #128]	; (80049fc <MX_GPIO_Init+0xf4>)
 800497c:	f043 0308 	orr.w	r3, r3, #8
 8004980:	6313      	str	r3, [r2, #48]	; 0x30
 8004982:	4b1e      	ldr	r3, [pc, #120]	; (80049fc <MX_GPIO_Init+0xf4>)
 8004984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004986:	f003 0308 	and.w	r3, r3, #8
 800498a:	607b      	str	r3, [r7, #4]
 800498c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800498e:	2300      	movs	r3, #0
 8004990:	603b      	str	r3, [r7, #0]
 8004992:	4b1a      	ldr	r3, [pc, #104]	; (80049fc <MX_GPIO_Init+0xf4>)
 8004994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004996:	4a19      	ldr	r2, [pc, #100]	; (80049fc <MX_GPIO_Init+0xf4>)
 8004998:	f043 0304 	orr.w	r3, r3, #4
 800499c:	6313      	str	r3, [r2, #48]	; 0x30
 800499e:	4b17      	ldr	r3, [pc, #92]	; (80049fc <MX_GPIO_Init+0xf4>)
 80049a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a2:	f003 0304 	and.w	r3, r3, #4
 80049a6:	603b      	str	r3, [r7, #0]
 80049a8:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80049aa:	2200      	movs	r2, #0
 80049ac:	2101      	movs	r1, #1
 80049ae:	4814      	ldr	r0, [pc, #80]	; (8004a00 <MX_GPIO_Init+0xf8>)
 80049b0:	f001 fbb8 	bl	8006124 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1 | GPIO_PIN_4, GPIO_PIN_SET);
 80049b4:	2201      	movs	r2, #1
 80049b6:	2112      	movs	r1, #18
 80049b8:	4811      	ldr	r0, [pc, #68]	; (8004a00 <MX_GPIO_Init+0xf8>)
 80049ba:	f001 fbb3 	bl	8006124 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : PBPin PB1 PB4 */
    GPIO_InitStruct.Pin = SD_CS_Pin | GPIO_PIN_1 | GPIO_PIN_4;
 80049be:	2313      	movs	r3, #19
 80049c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049c2:	2301      	movs	r3, #1
 80049c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049c6:	2300      	movs	r3, #0
 80049c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049ca:	2300      	movs	r3, #0
 80049cc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049ce:	f107 0314 	add.w	r3, r7, #20
 80049d2:	4619      	mov	r1, r3
 80049d4:	480a      	ldr	r0, [pc, #40]	; (8004a00 <MX_GPIO_Init+0xf8>)
 80049d6:	f001 f8d5 	bl	8005b84 <HAL_GPIO_Init>

    /*Configure GPIO pins : PB11 PB12 */
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 80049da:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80049de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049e0:	2300      	movs	r3, #0
 80049e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049e4:	2301      	movs	r3, #1
 80049e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049e8:	f107 0314 	add.w	r3, r7, #20
 80049ec:	4619      	mov	r1, r3
 80049ee:	4804      	ldr	r0, [pc, #16]	; (8004a00 <MX_GPIO_Init+0xf8>)
 80049f0:	f001 f8c8 	bl	8005b84 <HAL_GPIO_Init>
}
 80049f4:	bf00      	nop
 80049f6:	3728      	adds	r7, #40	; 0x28
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40023800 	.word	0x40023800
 8004a00:	40020400 	.word	0x40020400

08004a04 <MX_I2C2_Init>:
/* USER CODE END 0 */

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void) {
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
    /* USER CODE END I2C2_Init 0 */

    /* USER CODE BEGIN I2C2_Init 1 */

    /* USER CODE END I2C2_Init 1 */
    hi2c2.Instance = I2C2;
 8004a08:	4b1b      	ldr	r3, [pc, #108]	; (8004a78 <MX_I2C2_Init+0x74>)
 8004a0a:	4a1c      	ldr	r2, [pc, #112]	; (8004a7c <MX_I2C2_Init+0x78>)
 8004a0c:	601a      	str	r2, [r3, #0]
    hi2c2.Init.ClockSpeed = 100000;
 8004a0e:	4b1a      	ldr	r3, [pc, #104]	; (8004a78 <MX_I2C2_Init+0x74>)
 8004a10:	4a1b      	ldr	r2, [pc, #108]	; (8004a80 <MX_I2C2_Init+0x7c>)
 8004a12:	605a      	str	r2, [r3, #4]
    hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004a14:	4b18      	ldr	r3, [pc, #96]	; (8004a78 <MX_I2C2_Init+0x74>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	609a      	str	r2, [r3, #8]
    hi2c2.Init.OwnAddress1 = 0;
 8004a1a:	4b17      	ldr	r3, [pc, #92]	; (8004a78 <MX_I2C2_Init+0x74>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	60da      	str	r2, [r3, #12]
    hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004a20:	4b15      	ldr	r3, [pc, #84]	; (8004a78 <MX_I2C2_Init+0x74>)
 8004a22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a26:	611a      	str	r2, [r3, #16]
    hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004a28:	4b13      	ldr	r3, [pc, #76]	; (8004a78 <MX_I2C2_Init+0x74>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	615a      	str	r2, [r3, #20]
    hi2c2.Init.OwnAddress2 = 0;
 8004a2e:	4b12      	ldr	r3, [pc, #72]	; (8004a78 <MX_I2C2_Init+0x74>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	619a      	str	r2, [r3, #24]
    hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004a34:	4b10      	ldr	r3, [pc, #64]	; (8004a78 <MX_I2C2_Init+0x74>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	61da      	str	r2, [r3, #28]
    hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004a3a:	4b0f      	ldr	r3, [pc, #60]	; (8004a78 <MX_I2C2_Init+0x74>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8004a40:	480d      	ldr	r0, [pc, #52]	; (8004a78 <MX_I2C2_Init+0x74>)
 8004a42:	f001 fb89 	bl	8006158 <HAL_I2C_Init>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <MX_I2C2_Init+0x4c>
        Error_Handler();
 8004a4c:	f000 fa3a 	bl	8004ec4 <Error_Handler>
    }

    /** Configure Analogue filter
     */
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8004a50:	2100      	movs	r1, #0
 8004a52:	4809      	ldr	r0, [pc, #36]	; (8004a78 <MX_I2C2_Init+0x74>)
 8004a54:	f002 fdd3 	bl	80075fe <HAL_I2CEx_ConfigAnalogFilter>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <MX_I2C2_Init+0x5e>
        Error_Handler();
 8004a5e:	f000 fa31 	bl	8004ec4 <Error_Handler>
    }

    /** Configure Digital filter
     */
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8004a62:	2100      	movs	r1, #0
 8004a64:	4804      	ldr	r0, [pc, #16]	; (8004a78 <MX_I2C2_Init+0x74>)
 8004a66:	f002 fe06 	bl	8007676 <HAL_I2CEx_ConfigDigitalFilter>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <MX_I2C2_Init+0x70>
        Error_Handler();
 8004a70:	f000 fa28 	bl	8004ec4 <Error_Handler>
    }
    /* USER CODE BEGIN I2C2_Init 2 */

    /* USER CODE END I2C2_Init 2 */
}
 8004a74:	bf00      	nop
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	20002368 	.word	0x20002368
 8004a7c:	40005800 	.word	0x40005800
 8004a80:	000186a0 	.word	0x000186a0

08004a84 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef * i2cHandle) {
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b08a      	sub	sp, #40	; 0x28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a8c:	f107 0314 	add.w	r3, r7, #20
 8004a90:	2200      	movs	r2, #0
 8004a92:	601a      	str	r2, [r3, #0]
 8004a94:	605a      	str	r2, [r3, #4]
 8004a96:	609a      	str	r2, [r3, #8]
 8004a98:	60da      	str	r2, [r3, #12]
 8004a9a:	611a      	str	r2, [r3, #16]
    if (i2cHandle->Instance == I2C2) {
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a19      	ldr	r2, [pc, #100]	; (8004b08 <HAL_I2C_MspInit+0x84>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d12b      	bne.n	8004afe <HAL_I2C_MspInit+0x7a>
        /* USER CODE BEGIN I2C2_MspInit 0 */

        /* USER CODE END I2C2_MspInit 0 */

        __HAL_RCC_GPIOF_CLK_ENABLE();
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	613b      	str	r3, [r7, #16]
 8004aaa:	4b18      	ldr	r3, [pc, #96]	; (8004b0c <HAL_I2C_MspInit+0x88>)
 8004aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aae:	4a17      	ldr	r2, [pc, #92]	; (8004b0c <HAL_I2C_MspInit+0x88>)
 8004ab0:	f043 0320 	orr.w	r3, r3, #32
 8004ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ab6:	4b15      	ldr	r3, [pc, #84]	; (8004b0c <HAL_I2C_MspInit+0x88>)
 8004ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aba:	f003 0320 	and.w	r3, r3, #32
 8004abe:	613b      	str	r3, [r7, #16]
 8004ac0:	693b      	ldr	r3, [r7, #16]
        /**I2C2 GPIO Configuration
        PF0     ------> I2C2_SDA
        PF1     ------> I2C2_SCL
        */
        GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ac6:	2312      	movs	r3, #18
 8004ac8:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aca:	2300      	movs	r3, #0
 8004acc:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004ad2:	2304      	movs	r3, #4
 8004ad4:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004ad6:	f107 0314 	add.w	r3, r7, #20
 8004ada:	4619      	mov	r1, r3
 8004adc:	480c      	ldr	r0, [pc, #48]	; (8004b10 <HAL_I2C_MspInit+0x8c>)
 8004ade:	f001 f851 	bl	8005b84 <HAL_GPIO_Init>

        /* I2C2 clock enable */
        __HAL_RCC_I2C2_CLK_ENABLE();
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	4b09      	ldr	r3, [pc, #36]	; (8004b0c <HAL_I2C_MspInit+0x88>)
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	4a08      	ldr	r2, [pc, #32]	; (8004b0c <HAL_I2C_MspInit+0x88>)
 8004aec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004af0:	6413      	str	r3, [r2, #64]	; 0x40
 8004af2:	4b06      	ldr	r3, [pc, #24]	; (8004b0c <HAL_I2C_MspInit+0x88>)
 8004af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	68fb      	ldr	r3, [r7, #12]
        /* USER CODE BEGIN I2C2_MspInit 1 */

        /* USER CODE END I2C2_MspInit 1 */
    }
}
 8004afe:	bf00      	nop
 8004b00:	3728      	adds	r7, #40	; 0x28
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	40005800 	.word	0x40005800
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	40021400 	.word	0x40021400

08004b14 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8004b14:	b5b0      	push	{r4, r5, r7, lr}
 8004b16:	b0b6      	sub	sp, #216	; 0xd8
 8004b18:	af02      	add	r7, sp, #8
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8004b1a:	f000 feb7 	bl	800588c <HAL_Init>

    /* USER CODE BEGIN Init */

    sensors_init_all();
 8004b1e:	f7ff f85f 	bl	8003be0 <sensors_init_all>
    // SPS30_Init(&huart5);

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8004b22:	f000 f96d 	bl	8004e00 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8004b26:	f7ff feef 	bl	8004908 <MX_GPIO_Init>
    MX_RTC_Init();
 8004b2a:	f000 f9d1 	bl	8004ed0 <MX_RTC_Init>
    MX_UART5_Init();
 8004b2e:	f000 fc51 	bl	80053d4 <MX_UART5_Init>
    MX_USART3_UART_Init();
 8004b32:	f000 fccd 	bl	80054d0 <MX_USART3_UART_Init>
    MX_UART7_Init();
 8004b36:	f000 fc77 	bl	8005428 <MX_UART7_Init>
    MX_USART6_UART_Init();
 8004b3a:	f000 fcf3 	bl	8005524 <MX_USART6_UART_Init>
    MX_USART1_UART_Init();
 8004b3e:	f000 fc9d 	bl	800547c <MX_USART1_UART_Init>
    MX_I2C2_Init();
 8004b42:	f7ff ff5f 	bl	8004a04 <MX_I2C2_Init>
    MX_SPI1_Init();
 8004b46:	f000 fa47 	bl	8004fd8 <MX_SPI1_Init>
    MX_FATFS_Init();
 8004b4a:	f004 feeb 	bl	8009924 <MX_FATFS_Init>
    /* USER CODE BEGIN 2 */

    uart_debug = &huart3;
 8004b4e:	4b92      	ldr	r3, [pc, #584]	; (8004d98 <main+0x284>)
 8004b50:	4a92      	ldr	r2, [pc, #584]	; (8004d9c <main+0x288>)
 8004b52:	601a      	str	r2, [r3, #0]

    /* Initialization welcome message */
    uart_print("\n\n-------------------------------------------------------------------\n");
 8004b54:	4892      	ldr	r0, [pc, #584]	; (8004da0 <main+0x28c>)
 8004b56:	f7ff fea1 	bl	800489c <uart_print>
    uart_print("|   Sistema de Monitoreo de Material Particulado  |\n");
 8004b5a:	4892      	ldr	r0, [pc, #584]	; (8004da4 <main+0x290>)
 8004b5c:	f7ff fe9e 	bl	800489c <uart_print>
    uart_print("---------------------------------------------------------------------\n");
 8004b60:	4891      	ldr	r0, [pc, #580]	; (8004da8 <main+0x294>)
 8004b62:	f7ff fe9b 	bl	800489c <uart_print>

    bool sistema_ok = sistema_verificar_componentes();
 8004b66:	f7ff f995 	bl	8003e94 <sistema_verificar_componentes>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

    if (!sistema_ok) {
 8004b70:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8004b74:	f083 0301 	eor.w	r3, r3, #1
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d003      	beq.n	8004b86 <main+0x72>
        uart_print("[WARN] Error en la verificación del sistema. Algunos componentes no están "
 8004b7e:	488b      	ldr	r0, [pc, #556]	; (8004dac <main+0x298>)
 8004b80:	f7ff fe8c 	bl	800489c <uart_print>
 8004b84:	e002      	b.n	8004b8c <main+0x78>
                   "operativos.\r\n");
        // Aquí podrías registrar el error, encender un LED de advertencia o guardar en un log.
    } else {
        uart_print("[INFO] Todos los componentes verificados correctamente.\r\n");
 8004b86:	488a      	ldr	r0, [pc, #552]	; (8004db0 <main+0x29c>)
 8004b88:	f7ff fe88 	bl	800489c <uart_print>
    }

    // Crea una nueva instancia de MicroSD
    MicroSD * sd =
        microSD_create(&huart3, "initlog.txt", "/"); // Inicialización con el directorio raíz
 8004b8c:	4a89      	ldr	r2, [pc, #548]	; (8004db4 <main+0x2a0>)
 8004b8e:	498a      	ldr	r1, [pc, #552]	; (8004db8 <main+0x2a4>)
 8004b90:	4882      	ldr	r0, [pc, #520]	; (8004d9c <main+0x288>)
 8004b92:	f7fe f987 	bl	8002ea4 <microSD_create>
 8004b96:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
    uart_print("Inicializando sistema de almacenamiento de datos 1A ...\n");
 8004b9a:	4888      	ldr	r0, [pc, #544]	; (8004dbc <main+0x2a8>)
 8004b9c:	f7ff fe7e 	bl	800489c <uart_print>

    if (sd == NULL) {
 8004ba0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d101      	bne.n	8004bac <main+0x98>
        // Manejar error de creación
        Error_Handler();
 8004ba8:	f000 f98c 	bl	8004ec4 <Error_Handler>
    }

    uart_print("fin Inicializando sistema de almacenamiento de datos 4...\n");
 8004bac:	4884      	ldr	r0, [pc, #528]	; (8004dc0 <main+0x2ac>)
 8004bae:	f7ff fe75 	bl	800489c <uart_print>
    microSD_setDirectory(sd, "/"); // Cambia el directorio según sea necesario
 8004bb2:	4980      	ldr	r1, [pc, #512]	; (8004db4 <main+0x2a0>)
 8004bb4:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8004bb8:	f7fe fa02 	bl	8002fc0 <microSD_setDirectory>

    uart_print("Inicializando sistema de almacenamiento de datos 3 ...\n");
 8004bbc:	4881      	ldr	r0, [pc, #516]	; (8004dc4 <main+0x2b0>)
 8004bbe:	f7ff fe6d 	bl	800489c <uart_print>
    if (!data_logger_init()) {
 8004bc2:	f7fd f965 	bl	8001e90 <data_logger_init>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	f083 0301 	eor.w	r3, r3, #1
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <main+0xc4>
        uart_print("¡Error al inicializar el sistema de almacenamiento!\n");
 8004bd2:	487d      	ldr	r0, [pc, #500]	; (8004dc8 <main+0x2b4>)
 8004bd4:	f7ff fe62 	bl	800489c <uart_print>
    }

    HAL_Delay(200);
 8004bd8:	20c8      	movs	r0, #200	; 0xc8
 8004bda:	f000 fec9 	bl	8005970 <HAL_Delay>

    /* Inicializar sensores SPS30 disponibles*/

    rtc_auto_init(); // Detecta y configura el RTC correcto
 8004bde:	f7ff fccd 	bl	800457c <rtc_auto_init>

    //    test_format_csv_line();

    RTC_ReceiveTimeFromTerminal(&huart3);
 8004be2:	486e      	ldr	r0, [pc, #440]	; (8004d9c <main+0x288>)
 8004be4:	f7ff fce6 	bl	80045b4 <RTC_ReceiveTimeFromTerminal>

    /* Initialize SPS30 sensors array */

    uart_print("Inicializando sensores SPS30...\n");
 8004be8:	4878      	ldr	r0, [pc, #480]	; (8004dcc <main+0x2b8>)
 8004bea:	f7ff fe57 	bl	800489c <uart_print>
    inicializar_sensores_sps30();
 8004bee:	f7ff fc35 	bl	800445c <inicializar_sensores_sps30>

    mp_sensors_info_init(); // ← Aquí obtienes y guardas los seriales
 8004bf2:	f7fe fb27 	bl	8003244 <mp_sensors_info_init>

    /* Buffer de Mensajes */

    uint32_t ciclo_contador = 0;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while (1) {

        /* === Medición de sensores DHT22 (ambiente y cámara) ========================== */

        DHT22_Data sensorData;
        float temp_amb = -99.9f;
 8004bfc:	4b74      	ldr	r3, [pc, #464]	; (8004dd0 <main+0x2bc>)
 8004bfe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        float hum_amb = -99.9f;
 8004c02:	4b73      	ldr	r3, [pc, #460]	; (8004dd0 <main+0x2bc>)
 8004c04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
        float temp_cam = -99.9f;
 8004c08:	4b71      	ldr	r3, [pc, #452]	; (8004dd0 <main+0x2bc>)
 8004c0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        float hum_cam = -99.9f;
 8004c0e:	4b70      	ldr	r3, [pc, #448]	; (8004dd0 <main+0x2bc>)
 8004c10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

        if (DHT22_Read(&dhtA, &sensorData) == DHT22_OK) {
 8004c14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004c18:	4619      	mov	r1, r3
 8004c1a:	486e      	ldr	r0, [pc, #440]	; (8004dd4 <main+0x2c0>)
 8004c1c:	f7fc fa10 	bl	8001040 <DHT22_Read>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d11b      	bne.n	8004c5e <main+0x14a>
            temp_amb = sensorData.temperatura;
 8004c26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004c2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            hum_amb = sensorData.humedad;
 8004c2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            uart_print("Ambiente: Temp: %.1f C, Hum: %.1f%%\n", temp_amb, hum_amb);
 8004c36:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8004c3a:	f7fb fc95 	bl	8000568 <__aeabi_f2d>
 8004c3e:	4604      	mov	r4, r0
 8004c40:	460d      	mov	r5, r1
 8004c42:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8004c46:	f7fb fc8f 	bl	8000568 <__aeabi_f2d>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	e9cd 2300 	strd	r2, r3, [sp]
 8004c52:	4622      	mov	r2, r4
 8004c54:	462b      	mov	r3, r5
 8004c56:	4860      	ldr	r0, [pc, #384]	; (8004dd8 <main+0x2c4>)
 8004c58:	f7ff fe20 	bl	800489c <uart_print>
 8004c5c:	e002      	b.n	8004c64 <main+0x150>
        } else {
            uart_print("Error leyendo DHT22 ambiente\n");
 8004c5e:	485f      	ldr	r0, [pc, #380]	; (8004ddc <main+0x2c8>)
 8004c60:	f7ff fe1c 	bl	800489c <uart_print>
        }

        if (DHT22_Read(&dhtB, &sensorData) == DHT22_OK) {
 8004c64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004c68:	4619      	mov	r1, r3
 8004c6a:	485d      	ldr	r0, [pc, #372]	; (8004de0 <main+0x2cc>)
 8004c6c:	f7fc f9e8 	bl	8001040 <DHT22_Read>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d11b      	bne.n	8004cae <main+0x19a>
            temp_cam = sensorData.temperatura;
 8004c76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004c7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            hum_cam = sensorData.humedad;
 8004c7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            uart_print("Camara: Temp: %.1f C, Hum: %.1f%%\n", temp_cam, hum_cam);
 8004c86:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8004c8a:	f7fb fc6d 	bl	8000568 <__aeabi_f2d>
 8004c8e:	4604      	mov	r4, r0
 8004c90:	460d      	mov	r5, r1
 8004c92:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8004c96:	f7fb fc67 	bl	8000568 <__aeabi_f2d>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	e9cd 2300 	strd	r2, r3, [sp]
 8004ca2:	4622      	mov	r2, r4
 8004ca4:	462b      	mov	r3, r5
 8004ca6:	484f      	ldr	r0, [pc, #316]	; (8004de4 <main+0x2d0>)
 8004ca8:	f7ff fdf8 	bl	800489c <uart_print>
 8004cac:	e002      	b.n	8004cb4 <main+0x1a0>
        } else {
            uart_print("Error leyendo DHT22 cámara\n");
 8004cae:	484e      	ldr	r0, [pc, #312]	; (8004de8 <main+0x2d4>)
 8004cb0:	f7ff fdf4 	bl	800489c <uart_print>
        }

        /* === Timestamp y encabezado de ciclo ========================================= */
        char datetime_buffer[32];
        char msg_buffer[128];
        time_rtc_GetFormattedDateTime(datetime_buffer, sizeof(datetime_buffer));
 8004cb4:	1d3b      	adds	r3, r7, #4
 8004cb6:	2120      	movs	r1, #32
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7ff fde1 	bl	8004880 <time_rtc_GetFormattedDateTime>

        snprintf(msg_buffer, sizeof(msg_buffer), "\n=== Ciclo de medicion #%lu: %s ===\n",
 8004cbe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004cc8:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004ccc:	1d3b      	adds	r3, r7, #4
 8004cce:	9300      	str	r3, [sp, #0]
 8004cd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004cd4:	4a45      	ldr	r2, [pc, #276]	; (8004dec <main+0x2d8>)
 8004cd6:	2180      	movs	r1, #128	; 0x80
 8004cd8:	f008 ffa2 	bl	800dc20 <sniprintf>
                 ++ciclo_contador, datetime_buffer);
        uart_print(msg_buffer);
 8004cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7ff fddb 	bl	800489c <uart_print>

        /* === Ciclo de medición SPS30 ================================================= */
        for (int i = 0; i < sensores_disponibles; i++) {
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cec:	e020      	b.n	8004d30 <main+0x21c>
            proceso_observador_3PM_2TH(&sensores_sps30[i].sensor, sensores_sps30[i].id,
 8004cee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004cf2:	2258      	movs	r2, #88	; 0x58
 8004cf4:	fb02 f303 	mul.w	r3, r2, r3
 8004cf8:	4a3d      	ldr	r2, [pc, #244]	; (8004df0 <main+0x2dc>)
 8004cfa:	1898      	adds	r0, r3, r2
 8004cfc:	4a3c      	ldr	r2, [pc, #240]	; (8004df0 <main+0x2dc>)
 8004cfe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d02:	2158      	movs	r1, #88	; 0x58
 8004d04:	fb01 f303 	mul.w	r3, r1, r3
 8004d08:	4413      	add	r3, r2
 8004d0a:	3350      	adds	r3, #80	; 0x50
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	1d3a      	adds	r2, r7, #4
 8004d10:	edd7 1a2f 	vldr	s3, [r7, #188]	; 0xbc
 8004d14:	ed97 1a30 	vldr	s2, [r7, #192]	; 0xc0
 8004d18:	edd7 0a31 	vldr	s1, [r7, #196]	; 0xc4
 8004d1c:	ed97 0a32 	vldr	s0, [r7, #200]	; 0xc8
 8004d20:	4619      	mov	r1, r3
 8004d22:	f7fe fb31 	bl	8003388 <proceso_observador_3PM_2TH>
        for (int i = 0; i < sensores_disponibles; i++) {
 8004d26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d30:	4b30      	ldr	r3, [pc, #192]	; (8004df4 <main+0x2e0>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	dbd8      	blt.n	8004cee <main+0x1da>
                                       datetime_buffer, temp_amb, hum_amb, temp_cam, hum_cam);
        }

        /* === Reporte de resumen cada 10 ciclos ======================================= */
        if (ciclo_contador % 10U == 0U) {
 8004d3c:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8004d40:	4b2d      	ldr	r3, [pc, #180]	; (8004df8 <main+0x2e4>)
 8004d42:	fba3 2301 	umull	r2, r3, r3, r1
 8004d46:	08da      	lsrs	r2, r3, #3
 8004d48:	4613      	mov	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	005b      	lsls	r3, r3, #1
 8004d50:	1aca      	subs	r2, r1, r3
 8004d52:	2a00      	cmp	r2, #0
 8004d54:	d11a      	bne.n	8004d8c <main+0x278>
            data_logger_print_summary();
 8004d56:	f7fd f935 	bl	8001fc4 <data_logger_print_summary>

            float pm25_avg = data_logger_get_average_pm25(0U, 10U);
 8004d5a:	210a      	movs	r1, #10
 8004d5c:	2000      	movs	r0, #0
 8004d5e:	f7fd f8c1 	bl	8001ee4 <data_logger_get_average_pm25>
 8004d62:	ed87 0a2b 	vstr	s0, [r7, #172]	; 0xac
            snprintf(msg_buffer, sizeof(msg_buffer),
 8004d66:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004d6a:	f7fb fbfd 	bl	8000568 <__aeabi_f2d>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	460b      	mov	r3, r1
 8004d72:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004d76:	e9cd 2300 	strd	r2, r3, [sp]
 8004d7a:	4a20      	ldr	r2, [pc, #128]	; (8004dfc <main+0x2e8>)
 8004d7c:	2180      	movs	r1, #128	; 0x80
 8004d7e:	f008 ff4f 	bl	800dc20 <sniprintf>
                     "Promedio PM2.5 (ultimas 10 mediciones): %.2f ug/m3\n", pm25_avg);
            uart_print(msg_buffer);
 8004d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7ff fd88 	bl	800489c <uart_print>

        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */

        HAL_Delay(10000); // Espera 10 segundos antes de la próxima lectura
 8004d8c:	f242 7010 	movw	r0, #10000	; 0x2710
 8004d90:	f000 fdee 	bl	8005970 <HAL_Delay>
    while (1) {
 8004d94:	e732      	b.n	8004bfc <main+0xe8>
 8004d96:	bf00      	nop
 8004d98:	20002364 	.word	0x20002364
 8004d9c:	2000250c 	.word	0x2000250c
 8004da0:	08012dd8 	.word	0x08012dd8
 8004da4:	08012e20 	.word	0x08012e20
 8004da8:	08012e58 	.word	0x08012e58
 8004dac:	08012ea0 	.word	0x08012ea0
 8004db0:	08012efc 	.word	0x08012efc
 8004db4:	08012f38 	.word	0x08012f38
 8004db8:	08012f3c 	.word	0x08012f3c
 8004dbc:	08012f48 	.word	0x08012f48
 8004dc0:	08012f84 	.word	0x08012f84
 8004dc4:	08012fc0 	.word	0x08012fc0
 8004dc8:	08012ff8 	.word	0x08012ff8
 8004dcc:	08013030 	.word	0x08013030
 8004dd0:	c2c7cccd 	.word	0xc2c7cccd
 8004dd4:	20002244 	.word	0x20002244
 8004dd8:	08013054 	.word	0x08013054
 8004ddc:	0801307c 	.word	0x0801307c
 8004de0:	2000224c 	.word	0x2000224c
 8004de4:	0801309c 	.word	0x0801309c
 8004de8:	080130c0 	.word	0x080130c0
 8004dec:	080130e0 	.word	0x080130e0
 8004df0:	20002254 	.word	0x20002254
 8004df4:	2000235c 	.word	0x2000235c
 8004df8:	cccccccd 	.word	0xcccccccd
 8004dfc:	08013108 	.word	0x08013108

08004e00 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b094      	sub	sp, #80	; 0x50
 8004e04:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004e06:	f107 0320 	add.w	r3, r7, #32
 8004e0a:	2230      	movs	r2, #48	; 0x30
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f007 ff18 	bl	800cc44 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004e14:	f107 030c 	add.w	r3, r7, #12
 8004e18:	2200      	movs	r2, #0
 8004e1a:	601a      	str	r2, [r3, #0]
 8004e1c:	605a      	str	r2, [r3, #4]
 8004e1e:	609a      	str	r2, [r3, #8]
 8004e20:	60da      	str	r2, [r3, #12]
 8004e22:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e24:	2300      	movs	r3, #0
 8004e26:	60bb      	str	r3, [r7, #8]
 8004e28:	4b24      	ldr	r3, [pc, #144]	; (8004ebc <SystemClock_Config+0xbc>)
 8004e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2c:	4a23      	ldr	r2, [pc, #140]	; (8004ebc <SystemClock_Config+0xbc>)
 8004e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e32:	6413      	str	r3, [r2, #64]	; 0x40
 8004e34:	4b21      	ldr	r3, [pc, #132]	; (8004ebc <SystemClock_Config+0xbc>)
 8004e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e3c:	60bb      	str	r3, [r7, #8]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004e40:	2300      	movs	r3, #0
 8004e42:	607b      	str	r3, [r7, #4]
 8004e44:	4b1e      	ldr	r3, [pc, #120]	; (8004ec0 <SystemClock_Config+0xc0>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004e4c:	4a1c      	ldr	r2, [pc, #112]	; (8004ec0 <SystemClock_Config+0xc0>)
 8004e4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e52:	6013      	str	r3, [r2, #0]
 8004e54:	4b1a      	ldr	r3, [pc, #104]	; (8004ec0 <SystemClock_Config+0xc0>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004e5c:	607b      	str	r3, [r7, #4]
 8004e5e:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI;
 8004e60:	230a      	movs	r3, #10
 8004e62:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004e64:	2301      	movs	r3, #1
 8004e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004e68:	2310      	movs	r3, #16
 8004e6a:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004e70:	2300      	movs	r3, #0
 8004e72:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004e74:	f107 0320 	add.w	r3, r7, #32
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f002 fc3b 	bl	80076f4 <HAL_RCC_OscConfig>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d001      	beq.n	8004e88 <SystemClock_Config+0x88>
        Error_Handler();
 8004e84:	f000 f81e 	bl	8004ec4 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType =
 8004e88:	230f      	movs	r3, #15
 8004e8a:	60fb      	str	r3, [r7, #12]
        RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004e90:	2300      	movs	r3, #0
 8004e92:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004e94:	2300      	movs	r3, #0
 8004e96:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8004e9c:	f107 030c 	add.w	r3, r7, #12
 8004ea0:	2100      	movs	r1, #0
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f002 fe9e 	bl	8007be4 <HAL_RCC_ClockConfig>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d001      	beq.n	8004eb2 <SystemClock_Config+0xb2>
        Error_Handler();
 8004eae:	f000 f809 	bl	8004ec4 <Error_Handler>
    }
}
 8004eb2:	bf00      	nop
 8004eb4:	3750      	adds	r7, #80	; 0x50
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	40023800 	.word	0x40023800
 8004ec0:	40007000 	.word	0x40007000

08004ec4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004ec8:	b672      	cpsid	i
}
 8004eca:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8004ecc:	e7fe      	b.n	8004ecc <Error_Handler+0x8>
	...

08004ed0 <MX_RTC_Init>:
/* USER CODE END 0 */

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void) {
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN RTC_Init 0 */

    /* USER CODE END RTC_Init 0 */

    RTC_TimeTypeDef sTime = {0};
 8004ed6:	1d3b      	adds	r3, r7, #4
 8004ed8:	2200      	movs	r2, #0
 8004eda:	601a      	str	r2, [r3, #0]
 8004edc:	605a      	str	r2, [r3, #4]
 8004ede:	609a      	str	r2, [r3, #8]
 8004ee0:	60da      	str	r2, [r3, #12]
 8004ee2:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	603b      	str	r3, [r7, #0]

    /* USER CODE END RTC_Init 1 */

    /** Initialize RTC Only
     */
    hrtc.Instance = RTC;
 8004ee8:	4b24      	ldr	r3, [pc, #144]	; (8004f7c <MX_RTC_Init+0xac>)
 8004eea:	4a25      	ldr	r2, [pc, #148]	; (8004f80 <MX_RTC_Init+0xb0>)
 8004eec:	601a      	str	r2, [r3, #0]
    hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004eee:	4b23      	ldr	r3, [pc, #140]	; (8004f7c <MX_RTC_Init+0xac>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	605a      	str	r2, [r3, #4]
    hrtc.Init.AsynchPrediv = 127;
 8004ef4:	4b21      	ldr	r3, [pc, #132]	; (8004f7c <MX_RTC_Init+0xac>)
 8004ef6:	227f      	movs	r2, #127	; 0x7f
 8004ef8:	609a      	str	r2, [r3, #8]
    hrtc.Init.SynchPrediv = 255;
 8004efa:	4b20      	ldr	r3, [pc, #128]	; (8004f7c <MX_RTC_Init+0xac>)
 8004efc:	22ff      	movs	r2, #255	; 0xff
 8004efe:	60da      	str	r2, [r3, #12]
    hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004f00:	4b1e      	ldr	r3, [pc, #120]	; (8004f7c <MX_RTC_Init+0xac>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	611a      	str	r2, [r3, #16]
    hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004f06:	4b1d      	ldr	r3, [pc, #116]	; (8004f7c <MX_RTC_Init+0xac>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	615a      	str	r2, [r3, #20]
    hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004f0c:	4b1b      	ldr	r3, [pc, #108]	; (8004f7c <MX_RTC_Init+0xac>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8004f12:	481a      	ldr	r0, [pc, #104]	; (8004f7c <MX_RTC_Init+0xac>)
 8004f14:	f003 fa06 	bl	8008324 <HAL_RTC_Init>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <MX_RTC_Init+0x52>
        Error_Handler();
 8004f1e:	f7ff ffd1 	bl	8004ec4 <Error_Handler>

    /* USER CODE END Check_RTC_BKUP */

    /** Initialize RTC and set the Time and Date
     */
    sTime.Hours = 0x0;
 8004f22:	2300      	movs	r3, #0
 8004f24:	713b      	strb	r3, [r7, #4]
    sTime.Minutes = 0x0;
 8004f26:	2300      	movs	r3, #0
 8004f28:	717b      	strb	r3, [r7, #5]
    sTime.Seconds = 0x0;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	71bb      	strb	r3, [r7, #6]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	613b      	str	r3, [r7, #16]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004f32:	2300      	movs	r3, #0
 8004f34:	617b      	str	r3, [r7, #20]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8004f36:	1d3b      	adds	r3, r7, #4
 8004f38:	2201      	movs	r2, #1
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	480f      	ldr	r0, [pc, #60]	; (8004f7c <MX_RTC_Init+0xac>)
 8004f3e:	f003 fa67 	bl	8008410 <HAL_RTC_SetTime>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d001      	beq.n	8004f4c <MX_RTC_Init+0x7c>
        Error_Handler();
 8004f48:	f7ff ffbc 	bl	8004ec4 <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	703b      	strb	r3, [r7, #0]
    sDate.Month = RTC_MONTH_JANUARY;
 8004f50:	2301      	movs	r3, #1
 8004f52:	707b      	strb	r3, [r7, #1]
    sDate.Date = 0x1;
 8004f54:	2301      	movs	r3, #1
 8004f56:	70bb      	strb	r3, [r7, #2]
    sDate.Year = 0x0;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	70fb      	strb	r3, [r7, #3]

    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8004f5c:	463b      	mov	r3, r7
 8004f5e:	2201      	movs	r2, #1
 8004f60:	4619      	mov	r1, r3
 8004f62:	4806      	ldr	r0, [pc, #24]	; (8004f7c <MX_RTC_Init+0xac>)
 8004f64:	f003 faee 	bl	8008544 <HAL_RTC_SetDate>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <MX_RTC_Init+0xa2>
        Error_Handler();
 8004f6e:	f7ff ffa9 	bl	8004ec4 <Error_Handler>
    }
    /* USER CODE BEGIN RTC_Init 2 */

    /* USER CODE END RTC_Init 2 */
}
 8004f72:	bf00      	nop
 8004f74:	3718      	adds	r7, #24
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	200023bc 	.word	0x200023bc
 8004f80:	40002800 	.word	0x40002800

08004f84 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef * rtcHandle) {
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b08e      	sub	sp, #56	; 0x38
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]

    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004f8c:	f107 0308 	add.w	r3, r7, #8
 8004f90:	2230      	movs	r2, #48	; 0x30
 8004f92:	2100      	movs	r1, #0
 8004f94:	4618      	mov	r0, r3
 8004f96:	f007 fe55 	bl	800cc44 <memset>
    if (rtcHandle->Instance == RTC) {
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a0c      	ldr	r2, [pc, #48]	; (8004fd0 <HAL_RTC_MspInit+0x4c>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d111      	bne.n	8004fc8 <HAL_RTC_MspInit+0x44>

        /* USER CODE END RTC_MspInit 0 */

        /** Initializes the peripherals clock
         */
        PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004fa4:	2320      	movs	r3, #32
 8004fa6:	60bb      	str	r3, [r7, #8]
        PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004fa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fac:	633b      	str	r3, [r7, #48]	; 0x30
        if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8004fae:	f107 0308 	add.w	r3, r7, #8
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f002 fff6 	bl	8007fa4 <HAL_RCCEx_PeriphCLKConfig>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <HAL_RTC_MspInit+0x3e>
            Error_Handler();
 8004fbe:	f7ff ff81 	bl	8004ec4 <Error_Handler>
        }

        /* RTC clock enable */
        __HAL_RCC_RTC_ENABLE();
 8004fc2:	4b04      	ldr	r3, [pc, #16]	; (8004fd4 <HAL_RTC_MspInit+0x50>)
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	601a      	str	r2, [r3, #0]
        /* USER CODE BEGIN RTC_MspInit 1 */

        /* USER CODE END RTC_MspInit 1 */
    }
}
 8004fc8:	bf00      	nop
 8004fca:	3738      	adds	r7, #56	; 0x38
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	40002800 	.word	0x40002800
 8004fd4:	42470e3c 	.word	0x42470e3c

08004fd8 <MX_SPI1_Init>:
/* USER CODE END 0 */

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void) {
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	af00      	add	r7, sp, #0
    /* USER CODE END SPI1_Init 0 */

    /* USER CODE BEGIN SPI1_Init 1 */

    /* USER CODE END SPI1_Init 1 */
    hspi1.Instance = SPI1;
 8004fdc:	4b17      	ldr	r3, [pc, #92]	; (800503c <MX_SPI1_Init+0x64>)
 8004fde:	4a18      	ldr	r2, [pc, #96]	; (8005040 <MX_SPI1_Init+0x68>)
 8004fe0:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8004fe2:	4b16      	ldr	r3, [pc, #88]	; (800503c <MX_SPI1_Init+0x64>)
 8004fe4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004fe8:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004fea:	4b14      	ldr	r3, [pc, #80]	; (800503c <MX_SPI1_Init+0x64>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004ff0:	4b12      	ldr	r3, [pc, #72]	; (800503c <MX_SPI1_Init+0x64>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ff6:	4b11      	ldr	r3, [pc, #68]	; (800503c <MX_SPI1_Init+0x64>)
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004ffc:	4b0f      	ldr	r3, [pc, #60]	; (800503c <MX_SPI1_Init+0x64>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8005002:	4b0e      	ldr	r3, [pc, #56]	; (800503c <MX_SPI1_Init+0x64>)
 8005004:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005008:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800500a:	4b0c      	ldr	r3, [pc, #48]	; (800503c <MX_SPI1_Init+0x64>)
 800500c:	2210      	movs	r2, #16
 800500e:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005010:	4b0a      	ldr	r3, [pc, #40]	; (800503c <MX_SPI1_Init+0x64>)
 8005012:	2200      	movs	r2, #0
 8005014:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005016:	4b09      	ldr	r3, [pc, #36]	; (800503c <MX_SPI1_Init+0x64>)
 8005018:	2200      	movs	r2, #0
 800501a:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800501c:	4b07      	ldr	r3, [pc, #28]	; (800503c <MX_SPI1_Init+0x64>)
 800501e:	2200      	movs	r2, #0
 8005020:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 10;
 8005022:	4b06      	ldr	r3, [pc, #24]	; (800503c <MX_SPI1_Init+0x64>)
 8005024:	220a      	movs	r2, #10
 8005026:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8005028:	4804      	ldr	r0, [pc, #16]	; (800503c <MX_SPI1_Init+0x64>)
 800502a:	f003 fbb0 	bl	800878e <HAL_SPI_Init>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d001      	beq.n	8005038 <MX_SPI1_Init+0x60>
        Error_Handler();
 8005034:	f7ff ff46 	bl	8004ec4 <Error_Handler>
    }
    /* USER CODE BEGIN SPI1_Init 2 */

    /* USER CODE END SPI1_Init 2 */
}
 8005038:	bf00      	nop
 800503a:	bd80      	pop	{r7, pc}
 800503c:	200023dc 	.word	0x200023dc
 8005040:	40013000 	.word	0x40013000

08005044 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef * spiHandle) {
 8005044:	b580      	push	{r7, lr}
 8005046:	b08a      	sub	sp, #40	; 0x28
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800504c:	f107 0314 	add.w	r3, r7, #20
 8005050:	2200      	movs	r2, #0
 8005052:	601a      	str	r2, [r3, #0]
 8005054:	605a      	str	r2, [r3, #4]
 8005056:	609a      	str	r2, [r3, #8]
 8005058:	60da      	str	r2, [r3, #12]
 800505a:	611a      	str	r2, [r3, #16]
    if (spiHandle->Instance == SPI1) {
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a19      	ldr	r2, [pc, #100]	; (80050c8 <HAL_SPI_MspInit+0x84>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d12b      	bne.n	80050be <HAL_SPI_MspInit+0x7a>
        /* USER CODE BEGIN SPI1_MspInit 0 */

        /* USER CODE END SPI1_MspInit 0 */
        /* SPI1 clock enable */
        __HAL_RCC_SPI1_CLK_ENABLE();
 8005066:	2300      	movs	r3, #0
 8005068:	613b      	str	r3, [r7, #16]
 800506a:	4b18      	ldr	r3, [pc, #96]	; (80050cc <HAL_SPI_MspInit+0x88>)
 800506c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800506e:	4a17      	ldr	r2, [pc, #92]	; (80050cc <HAL_SPI_MspInit+0x88>)
 8005070:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005074:	6453      	str	r3, [r2, #68]	; 0x44
 8005076:	4b15      	ldr	r3, [pc, #84]	; (80050cc <HAL_SPI_MspInit+0x88>)
 8005078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800507a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800507e:	613b      	str	r3, [r7, #16]
 8005080:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 8005082:	2300      	movs	r3, #0
 8005084:	60fb      	str	r3, [r7, #12]
 8005086:	4b11      	ldr	r3, [pc, #68]	; (80050cc <HAL_SPI_MspInit+0x88>)
 8005088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508a:	4a10      	ldr	r2, [pc, #64]	; (80050cc <HAL_SPI_MspInit+0x88>)
 800508c:	f043 0301 	orr.w	r3, r3, #1
 8005090:	6313      	str	r3, [r2, #48]	; 0x30
 8005092:	4b0e      	ldr	r3, [pc, #56]	; (80050cc <HAL_SPI_MspInit+0x88>)
 8005094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	68fb      	ldr	r3, [r7, #12]
        /**SPI1 GPIO Configuration
        PA5     ------> SPI1_SCK
        PA6     ------> SPI1_MISO
        PA7     ------> SPI1_MOSI
        */
        GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 800509e:	23e0      	movs	r3, #224	; 0xe0
 80050a0:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050a2:	2302      	movs	r3, #2
 80050a4:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a6:	2300      	movs	r3, #0
 80050a8:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050aa:	2303      	movs	r3, #3
 80050ac:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80050ae:	2305      	movs	r3, #5
 80050b0:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050b2:	f107 0314 	add.w	r3, r7, #20
 80050b6:	4619      	mov	r1, r3
 80050b8:	4805      	ldr	r0, [pc, #20]	; (80050d0 <HAL_SPI_MspInit+0x8c>)
 80050ba:	f000 fd63 	bl	8005b84 <HAL_GPIO_Init>

        /* USER CODE BEGIN SPI1_MspInit 1 */

        /* USER CODE END SPI1_MspInit 1 */
    }
}
 80050be:	bf00      	nop
 80050c0:	3728      	adds	r7, #40	; 0x28
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	40013000 	.word	0x40013000
 80050cc:	40023800 	.word	0x40023800
 80050d0:	40020000 	.word	0x40020000

080050d4 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef * spiHandle) {
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]

    if (spiHandle->Instance == SPI1) {
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a08      	ldr	r2, [pc, #32]	; (8005104 <HAL_SPI_MspDeInit+0x30>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d109      	bne.n	80050fa <HAL_SPI_MspDeInit+0x26>
        /* USER CODE BEGIN SPI1_MspDeInit 0 */

        /* USER CODE END SPI1_MspDeInit 0 */
        /* Peripheral clock disable */
        __HAL_RCC_SPI1_CLK_DISABLE();
 80050e6:	4b08      	ldr	r3, [pc, #32]	; (8005108 <HAL_SPI_MspDeInit+0x34>)
 80050e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ea:	4a07      	ldr	r2, [pc, #28]	; (8005108 <HAL_SPI_MspDeInit+0x34>)
 80050ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050f0:	6453      	str	r3, [r2, #68]	; 0x44
        /**SPI1 GPIO Configuration
        PA5     ------> SPI1_SCK
        PA6     ------> SPI1_MISO
        PA7     ------> SPI1_MOSI
        */
        HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7);
 80050f2:	21e0      	movs	r1, #224	; 0xe0
 80050f4:	4805      	ldr	r0, [pc, #20]	; (800510c <HAL_SPI_MspDeInit+0x38>)
 80050f6:	f000 fef1 	bl	8005edc <HAL_GPIO_DeInit>

        /* USER CODE BEGIN SPI1_MspDeInit 1 */

        /* USER CODE END SPI1_MspDeInit 1 */
    }
}
 80050fa:	bf00      	nop
 80050fc:	3708      	adds	r7, #8
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	40013000 	.word	0x40013000
 8005108:	40023800 	.word	0x40023800
 800510c:	40020000 	.word	0x40020000

08005110 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005116:	2300      	movs	r3, #0
 8005118:	607b      	str	r3, [r7, #4]
 800511a:	4b10      	ldr	r3, [pc, #64]	; (800515c <HAL_MspInit+0x4c>)
 800511c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511e:	4a0f      	ldr	r2, [pc, #60]	; (800515c <HAL_MspInit+0x4c>)
 8005120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005124:	6453      	str	r3, [r2, #68]	; 0x44
 8005126:	4b0d      	ldr	r3, [pc, #52]	; (800515c <HAL_MspInit+0x4c>)
 8005128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800512e:	607b      	str	r3, [r7, #4]
 8005130:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 8005132:	2300      	movs	r3, #0
 8005134:	603b      	str	r3, [r7, #0]
 8005136:	4b09      	ldr	r3, [pc, #36]	; (800515c <HAL_MspInit+0x4c>)
 8005138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513a:	4a08      	ldr	r2, [pc, #32]	; (800515c <HAL_MspInit+0x4c>)
 800513c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005140:	6413      	str	r3, [r2, #64]	; 0x40
 8005142:	4b06      	ldr	r3, [pc, #24]	; (800515c <HAL_MspInit+0x4c>)
 8005144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800514a:	603b      	str	r3, [r7, #0]
 800514c:	683b      	ldr	r3, [r7, #0]
    /* System interrupt init*/

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 800514e:	bf00      	nop
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	40023800 	.word	0x40023800

08005160 <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void) {
 8005160:	b480      	push	{r7}
 8005162:	af00      	add	r7, sp, #0
    if (Timer1 > 0)
 8005164:	4b0e      	ldr	r3, [pc, #56]	; (80051a0 <SDTimer_Handler+0x40>)
 8005166:	881b      	ldrh	r3, [r3, #0]
 8005168:	b29b      	uxth	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d006      	beq.n	800517c <SDTimer_Handler+0x1c>
        Timer1--;
 800516e:	4b0c      	ldr	r3, [pc, #48]	; (80051a0 <SDTimer_Handler+0x40>)
 8005170:	881b      	ldrh	r3, [r3, #0]
 8005172:	b29b      	uxth	r3, r3
 8005174:	3b01      	subs	r3, #1
 8005176:	b29a      	uxth	r2, r3
 8005178:	4b09      	ldr	r3, [pc, #36]	; (80051a0 <SDTimer_Handler+0x40>)
 800517a:	801a      	strh	r2, [r3, #0]
    if (Timer2 > 0)
 800517c:	4b09      	ldr	r3, [pc, #36]	; (80051a4 <SDTimer_Handler+0x44>)
 800517e:	881b      	ldrh	r3, [r3, #0]
 8005180:	b29b      	uxth	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d006      	beq.n	8005194 <SDTimer_Handler+0x34>
        Timer2--;
 8005186:	4b07      	ldr	r3, [pc, #28]	; (80051a4 <SDTimer_Handler+0x44>)
 8005188:	881b      	ldrh	r3, [r3, #0]
 800518a:	b29b      	uxth	r3, r3
 800518c:	3b01      	subs	r3, #1
 800518e:	b29a      	uxth	r2, r3
 8005190:	4b04      	ldr	r3, [pc, #16]	; (80051a4 <SDTimer_Handler+0x44>)
 8005192:	801a      	strh	r2, [r3, #0]
}
 8005194:	bf00      	nop
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	20002436 	.word	0x20002436
 80051a4:	20002438 	.word	0x20002438

080051a8 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 80051a8:	b480      	push	{r7}
 80051aa:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 80051ac:	e7fe      	b.n	80051ac <NMI_Handler+0x4>

080051ae <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80051ae:	b480      	push	{r7}
 80051b0:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1) {
 80051b2:	e7fe      	b.n	80051b2 <HardFault_Handler+0x4>

080051b4 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80051b4:	b480      	push	{r7}
 80051b6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1) {
 80051b8:	e7fe      	b.n	80051b8 <MemManage_Handler+0x4>

080051ba <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 80051ba:	b480      	push	{r7}
 80051bc:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1) {
 80051be:	e7fe      	b.n	80051be <BusFault_Handler+0x4>

080051c0 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80051c0:	b480      	push	{r7}
 80051c2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1) {
 80051c4:	e7fe      	b.n	80051c4 <UsageFault_Handler+0x4>

080051c6 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 80051c6:	b480      	push	{r7}
 80051c8:	af00      	add	r7, sp, #0

    /* USER CODE END SVCall_IRQn 0 */
    /* USER CODE BEGIN SVCall_IRQn 1 */

    /* USER CODE END SVCall_IRQn 1 */
}
 80051ca:	bf00      	nop
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80051d4:	b480      	push	{r7}
 80051d6:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 80051d8:	bf00      	nop
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 80051e2:	b480      	push	{r7}
 80051e4:	af00      	add	r7, sp, #0

    /* USER CODE END PendSV_IRQn 0 */
    /* USER CODE BEGIN PendSV_IRQn 1 */

    /* USER CODE END PendSV_IRQn 1 */
}
 80051e6:	bf00      	nop
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80051f0:	b580      	push	{r7, lr}
 80051f2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */
    FatFsCnt++;
 80051f4:	4b0a      	ldr	r3, [pc, #40]	; (8005220 <SysTick_Handler+0x30>)
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	3301      	adds	r3, #1
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	4b08      	ldr	r3, [pc, #32]	; (8005220 <SysTick_Handler+0x30>)
 8005200:	701a      	strb	r2, [r3, #0]
    if (FatFsCnt > 10) {
 8005202:	4b07      	ldr	r3, [pc, #28]	; (8005220 <SysTick_Handler+0x30>)
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	b2db      	uxtb	r3, r3
 8005208:	2b0a      	cmp	r3, #10
 800520a:	d904      	bls.n	8005216 <SysTick_Handler+0x26>
        FatFsCnt = 0;
 800520c:	4b04      	ldr	r3, [pc, #16]	; (8005220 <SysTick_Handler+0x30>)
 800520e:	2200      	movs	r2, #0
 8005210:	701a      	strb	r2, [r3, #0]
        SDTimer_Handler();
 8005212:	f7ff ffa5 	bl	8005160 <SDTimer_Handler>
    }

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 8005216:	f000 fb8b 	bl	8005930 <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 800521a:	bf00      	nop
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	20002434 	.word	0x20002434

08005224 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8005224:	b480      	push	{r7}
 8005226:	af00      	add	r7, sp, #0
    return 1;
 8005228:	2301      	movs	r3, #1
}
 800522a:	4618      	mov	r0, r3
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <_kill>:

int _kill(int pid, int sig) {
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
    (void)pid;
    (void)sig;
    errno = EINVAL;
 800523e:	f007 fcb9 	bl	800cbb4 <__errno>
 8005242:	4603      	mov	r3, r0
 8005244:	2216      	movs	r2, #22
 8005246:	601a      	str	r2, [r3, #0]
    return -1;
 8005248:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800524c:	4618      	mov	r0, r3
 800524e:	3708      	adds	r7, #8
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <_exit>:

void _exit(int status) {
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
    _kill(status, -1);
 800525c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f7ff ffe7 	bl	8005234 <_kill>
    while (1) {
 8005266:	e7fe      	b.n	8005266 <_exit+0x12>

08005268 <_read>:
    } /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char * ptr, int len) {
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8005274:	2300      	movs	r3, #0
 8005276:	617b      	str	r3, [r7, #20]
 8005278:	e00a      	b.n	8005290 <_read+0x28>
        *ptr++ = __io_getchar();
 800527a:	f3af 8000 	nop.w
 800527e:	4601      	mov	r1, r0
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	1c5a      	adds	r2, r3, #1
 8005284:	60ba      	str	r2, [r7, #8]
 8005286:	b2ca      	uxtb	r2, r1
 8005288:	701a      	strb	r2, [r3, #0]
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	3301      	adds	r3, #1
 800528e:	617b      	str	r3, [r7, #20]
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	429a      	cmp	r2, r3
 8005296:	dbf0      	blt.n	800527a <_read+0x12>
    }

    return len;
 8005298:	687b      	ldr	r3, [r7, #4]
}
 800529a:	4618      	mov	r0, r3
 800529c:	3718      	adds	r7, #24
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <_write>:

__attribute__((weak)) int _write(int file, char * ptr, int len) {
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b086      	sub	sp, #24
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	60f8      	str	r0, [r7, #12]
 80052aa:	60b9      	str	r1, [r7, #8]
 80052ac:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80052ae:	2300      	movs	r3, #0
 80052b0:	617b      	str	r3, [r7, #20]
 80052b2:	e009      	b.n	80052c8 <_write+0x26>
        __io_putchar(*ptr++);
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	1c5a      	adds	r2, r3, #1
 80052b8:	60ba      	str	r2, [r7, #8]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	4618      	mov	r0, r3
 80052be:	f3af 8000 	nop.w
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	3301      	adds	r3, #1
 80052c6:	617b      	str	r3, [r7, #20]
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	dbf1      	blt.n	80052b4 <_write+0x12>
    }
    return len;
 80052d0:	687b      	ldr	r3, [r7, #4]
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3718      	adds	r7, #24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <_close>:

int _close(int file) {
 80052da:	b480      	push	{r7}
 80052dc:	b083      	sub	sp, #12
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
    (void)file;
    return -1;
 80052e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <_fstat>:

int _fstat(int file, struct stat * st) {
 80052f2:	b480      	push	{r7}
 80052f4:	b083      	sub	sp, #12
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
 80052fa:	6039      	str	r1, [r7, #0]
    (void)file;
    st->st_mode = S_IFCHR;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005302:	605a      	str	r2, [r3, #4]
    return 0;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr

08005312 <_isatty>:

int _isatty(int file) {
 8005312:	b480      	push	{r7}
 8005314:	b083      	sub	sp, #12
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
    (void)file;
    return 1;
 800531a:	2301      	movs	r3, #1
}
 800531c:	4618      	mov	r0, r3
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
    (void)file;
    (void)ptr;
    (void)dir;
    return 0;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
	...

08005344 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void * _sbrk(ptrdiff_t incr) {
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800534c:	4a14      	ldr	r2, [pc, #80]	; (80053a0 <_sbrk+0x5c>)
 800534e:	4b15      	ldr	r3, [pc, #84]	; (80053a4 <_sbrk+0x60>)
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	617b      	str	r3, [r7, #20]
    const uint8_t * max_heap = (uint8_t *)stack_limit;
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	613b      	str	r3, [r7, #16]
    uint8_t * prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 8005358:	4b13      	ldr	r3, [pc, #76]	; (80053a8 <_sbrk+0x64>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d102      	bne.n	8005366 <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 8005360:	4b11      	ldr	r3, [pc, #68]	; (80053a8 <_sbrk+0x64>)
 8005362:	4a12      	ldr	r2, [pc, #72]	; (80053ac <_sbrk+0x68>)
 8005364:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 8005366:	4b10      	ldr	r3, [pc, #64]	; (80053a8 <_sbrk+0x64>)
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4413      	add	r3, r2
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	429a      	cmp	r2, r3
 8005372:	d207      	bcs.n	8005384 <_sbrk+0x40>
        errno = ENOMEM;
 8005374:	f007 fc1e 	bl	800cbb4 <__errno>
 8005378:	4603      	mov	r3, r0
 800537a:	220c      	movs	r2, #12
 800537c:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 800537e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005382:	e009      	b.n	8005398 <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 8005384:	4b08      	ldr	r3, [pc, #32]	; (80053a8 <_sbrk+0x64>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 800538a:	4b07      	ldr	r3, [pc, #28]	; (80053a8 <_sbrk+0x64>)
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4413      	add	r3, r2
 8005392:	4a05      	ldr	r2, [pc, #20]	; (80053a8 <_sbrk+0x64>)
 8005394:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 8005396:	68fb      	ldr	r3, [r7, #12]
}
 8005398:	4618      	mov	r0, r3
 800539a:	3718      	adds	r7, #24
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	20030000 	.word	0x20030000
 80053a4:	00000400 	.word	0x00000400
 80053a8:	2000243c 	.word	0x2000243c
 80053ac:	200027e8 	.word	0x200027e8

080053b0 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80053b0:	b480      	push	{r7}
 80053b2:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 80053b4:	4b06      	ldr	r3, [pc, #24]	; (80053d0 <SystemInit+0x20>)
 80053b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ba:	4a05      	ldr	r2, [pc, #20]	; (80053d0 <SystemInit+0x20>)
 80053bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80053c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 80053c4:	bf00      	nop
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	e000ed00 	.word	0xe000ed00

080053d4 <MX_UART5_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART5 init function */
void MX_UART5_Init(void) {
 80053d4:	b580      	push	{r7, lr}
 80053d6:	af00      	add	r7, sp, #0
    /* USER CODE END UART5_Init 0 */

    /* USER CODE BEGIN UART5_Init 1 */

    /* USER CODE END UART5_Init 1 */
    huart5.Instance = UART5;
 80053d8:	4b11      	ldr	r3, [pc, #68]	; (8005420 <MX_UART5_Init+0x4c>)
 80053da:	4a12      	ldr	r2, [pc, #72]	; (8005424 <MX_UART5_Init+0x50>)
 80053dc:	601a      	str	r2, [r3, #0]
    huart5.Init.BaudRate = 115200;
 80053de:	4b10      	ldr	r3, [pc, #64]	; (8005420 <MX_UART5_Init+0x4c>)
 80053e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80053e4:	605a      	str	r2, [r3, #4]
    huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80053e6:	4b0e      	ldr	r3, [pc, #56]	; (8005420 <MX_UART5_Init+0x4c>)
 80053e8:	2200      	movs	r2, #0
 80053ea:	609a      	str	r2, [r3, #8]
    huart5.Init.StopBits = UART_STOPBITS_1;
 80053ec:	4b0c      	ldr	r3, [pc, #48]	; (8005420 <MX_UART5_Init+0x4c>)
 80053ee:	2200      	movs	r2, #0
 80053f0:	60da      	str	r2, [r3, #12]
    huart5.Init.Parity = UART_PARITY_NONE;
 80053f2:	4b0b      	ldr	r3, [pc, #44]	; (8005420 <MX_UART5_Init+0x4c>)
 80053f4:	2200      	movs	r2, #0
 80053f6:	611a      	str	r2, [r3, #16]
    huart5.Init.Mode = UART_MODE_TX_RX;
 80053f8:	4b09      	ldr	r3, [pc, #36]	; (8005420 <MX_UART5_Init+0x4c>)
 80053fa:	220c      	movs	r2, #12
 80053fc:	615a      	str	r2, [r3, #20]
    huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80053fe:	4b08      	ldr	r3, [pc, #32]	; (8005420 <MX_UART5_Init+0x4c>)
 8005400:	2200      	movs	r2, #0
 8005402:	619a      	str	r2, [r3, #24]
    huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8005404:	4b06      	ldr	r3, [pc, #24]	; (8005420 <MX_UART5_Init+0x4c>)
 8005406:	2200      	movs	r2, #0
 8005408:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart5) != HAL_OK) {
 800540a:	4805      	ldr	r0, [pc, #20]	; (8005420 <MX_UART5_Init+0x4c>)
 800540c:	f003 fe26 	bl	800905c <HAL_UART_Init>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d001      	beq.n	800541a <MX_UART5_Init+0x46>
        Error_Handler();
 8005416:	f7ff fd55 	bl	8004ec4 <Error_Handler>
    }
    /* USER CODE BEGIN UART5_Init 2 */

    /* USER CODE END UART5_Init 2 */
}
 800541a:	bf00      	nop
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	20002440 	.word	0x20002440
 8005424:	40005000 	.word	0x40005000

08005428 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void) {
 8005428:	b580      	push	{r7, lr}
 800542a:	af00      	add	r7, sp, #0
    /* USER CODE END UART7_Init 0 */

    /* USER CODE BEGIN UART7_Init 1 */

    /* USER CODE END UART7_Init 1 */
    huart7.Instance = UART7;
 800542c:	4b11      	ldr	r3, [pc, #68]	; (8005474 <MX_UART7_Init+0x4c>)
 800542e:	4a12      	ldr	r2, [pc, #72]	; (8005478 <MX_UART7_Init+0x50>)
 8005430:	601a      	str	r2, [r3, #0]
    huart7.Init.BaudRate = 115200;
 8005432:	4b10      	ldr	r3, [pc, #64]	; (8005474 <MX_UART7_Init+0x4c>)
 8005434:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005438:	605a      	str	r2, [r3, #4]
    huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800543a:	4b0e      	ldr	r3, [pc, #56]	; (8005474 <MX_UART7_Init+0x4c>)
 800543c:	2200      	movs	r2, #0
 800543e:	609a      	str	r2, [r3, #8]
    huart7.Init.StopBits = UART_STOPBITS_1;
 8005440:	4b0c      	ldr	r3, [pc, #48]	; (8005474 <MX_UART7_Init+0x4c>)
 8005442:	2200      	movs	r2, #0
 8005444:	60da      	str	r2, [r3, #12]
    huart7.Init.Parity = UART_PARITY_NONE;
 8005446:	4b0b      	ldr	r3, [pc, #44]	; (8005474 <MX_UART7_Init+0x4c>)
 8005448:	2200      	movs	r2, #0
 800544a:	611a      	str	r2, [r3, #16]
    huart7.Init.Mode = UART_MODE_TX_RX;
 800544c:	4b09      	ldr	r3, [pc, #36]	; (8005474 <MX_UART7_Init+0x4c>)
 800544e:	220c      	movs	r2, #12
 8005450:	615a      	str	r2, [r3, #20]
    huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005452:	4b08      	ldr	r3, [pc, #32]	; (8005474 <MX_UART7_Init+0x4c>)
 8005454:	2200      	movs	r2, #0
 8005456:	619a      	str	r2, [r3, #24]
    huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8005458:	4b06      	ldr	r3, [pc, #24]	; (8005474 <MX_UART7_Init+0x4c>)
 800545a:	2200      	movs	r2, #0
 800545c:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart7) != HAL_OK) {
 800545e:	4805      	ldr	r0, [pc, #20]	; (8005474 <MX_UART7_Init+0x4c>)
 8005460:	f003 fdfc 	bl	800905c <HAL_UART_Init>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <MX_UART7_Init+0x46>
        Error_Handler();
 800546a:	f7ff fd2b 	bl	8004ec4 <Error_Handler>
    }
    /* USER CODE BEGIN UART7_Init 2 */

    /* USER CODE END UART7_Init 2 */
}
 800546e:	bf00      	nop
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	20002484 	.word	0x20002484
 8005478:	40007800 	.word	0x40007800

0800547c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void) {
 800547c:	b580      	push	{r7, lr}
 800547e:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8005480:	4b11      	ldr	r3, [pc, #68]	; (80054c8 <MX_USART1_UART_Init+0x4c>)
 8005482:	4a12      	ldr	r2, [pc, #72]	; (80054cc <MX_USART1_UART_Init+0x50>)
 8005484:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8005486:	4b10      	ldr	r3, [pc, #64]	; (80054c8 <MX_USART1_UART_Init+0x4c>)
 8005488:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800548c:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800548e:	4b0e      	ldr	r3, [pc, #56]	; (80054c8 <MX_USART1_UART_Init+0x4c>)
 8005490:	2200      	movs	r2, #0
 8005492:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8005494:	4b0c      	ldr	r3, [pc, #48]	; (80054c8 <MX_USART1_UART_Init+0x4c>)
 8005496:	2200      	movs	r2, #0
 8005498:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 800549a:	4b0b      	ldr	r3, [pc, #44]	; (80054c8 <MX_USART1_UART_Init+0x4c>)
 800549c:	2200      	movs	r2, #0
 800549e:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80054a0:	4b09      	ldr	r3, [pc, #36]	; (80054c8 <MX_USART1_UART_Init+0x4c>)
 80054a2:	220c      	movs	r2, #12
 80054a4:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80054a6:	4b08      	ldr	r3, [pc, #32]	; (80054c8 <MX_USART1_UART_Init+0x4c>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80054ac:	4b06      	ldr	r3, [pc, #24]	; (80054c8 <MX_USART1_UART_Init+0x4c>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 80054b2:	4805      	ldr	r0, [pc, #20]	; (80054c8 <MX_USART1_UART_Init+0x4c>)
 80054b4:	f003 fdd2 	bl	800905c <HAL_UART_Init>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d001      	beq.n	80054c2 <MX_USART1_UART_Init+0x46>
        Error_Handler();
 80054be:	f7ff fd01 	bl	8004ec4 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */
}
 80054c2:	bf00      	nop
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	200024c8 	.word	0x200024c8
 80054cc:	40011000 	.word	0x40011000

080054d0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void) {
 80054d0:	b580      	push	{r7, lr}
 80054d2:	af00      	add	r7, sp, #0
    /* USER CODE END USART3_Init 0 */

    /* USER CODE BEGIN USART3_Init 1 */

    /* USER CODE END USART3_Init 1 */
    huart3.Instance = USART3;
 80054d4:	4b11      	ldr	r3, [pc, #68]	; (800551c <MX_USART3_UART_Init+0x4c>)
 80054d6:	4a12      	ldr	r2, [pc, #72]	; (8005520 <MX_USART3_UART_Init+0x50>)
 80054d8:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate = 115200;
 80054da:	4b10      	ldr	r3, [pc, #64]	; (800551c <MX_USART3_UART_Init+0x4c>)
 80054dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80054e0:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80054e2:	4b0e      	ldr	r3, [pc, #56]	; (800551c <MX_USART3_UART_Init+0x4c>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits = UART_STOPBITS_1;
 80054e8:	4b0c      	ldr	r3, [pc, #48]	; (800551c <MX_USART3_UART_Init+0x4c>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity = UART_PARITY_NONE;
 80054ee:	4b0b      	ldr	r3, [pc, #44]	; (800551c <MX_USART3_UART_Init+0x4c>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	611a      	str	r2, [r3, #16]
    huart3.Init.Mode = UART_MODE_TX_RX;
 80054f4:	4b09      	ldr	r3, [pc, #36]	; (800551c <MX_USART3_UART_Init+0x4c>)
 80054f6:	220c      	movs	r2, #12
 80054f8:	615a      	str	r2, [r3, #20]
    huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80054fa:	4b08      	ldr	r3, [pc, #32]	; (800551c <MX_USART3_UART_Init+0x4c>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	619a      	str	r2, [r3, #24]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005500:	4b06      	ldr	r3, [pc, #24]	; (800551c <MX_USART3_UART_Init+0x4c>)
 8005502:	2200      	movs	r2, #0
 8005504:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart3) != HAL_OK) {
 8005506:	4805      	ldr	r0, [pc, #20]	; (800551c <MX_USART3_UART_Init+0x4c>)
 8005508:	f003 fda8 	bl	800905c <HAL_UART_Init>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <MX_USART3_UART_Init+0x46>
        Error_Handler();
 8005512:	f7ff fcd7 	bl	8004ec4 <Error_Handler>
    }
    /* USER CODE BEGIN USART3_Init 2 */

    /* USER CODE END USART3_Init 2 */
}
 8005516:	bf00      	nop
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	2000250c 	.word	0x2000250c
 8005520:	40004800 	.word	0x40004800

08005524 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void) {
 8005524:	b580      	push	{r7, lr}
 8005526:	af00      	add	r7, sp, #0
    /* USER CODE END USART6_Init 0 */

    /* USER CODE BEGIN USART6_Init 1 */

    /* USER CODE END USART6_Init 1 */
    huart6.Instance = USART6;
 8005528:	4b11      	ldr	r3, [pc, #68]	; (8005570 <MX_USART6_UART_Init+0x4c>)
 800552a:	4a12      	ldr	r2, [pc, #72]	; (8005574 <MX_USART6_UART_Init+0x50>)
 800552c:	601a      	str	r2, [r3, #0]
    huart6.Init.BaudRate = 115200;
 800552e:	4b10      	ldr	r3, [pc, #64]	; (8005570 <MX_USART6_UART_Init+0x4c>)
 8005530:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005534:	605a      	str	r2, [r3, #4]
    huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8005536:	4b0e      	ldr	r3, [pc, #56]	; (8005570 <MX_USART6_UART_Init+0x4c>)
 8005538:	2200      	movs	r2, #0
 800553a:	609a      	str	r2, [r3, #8]
    huart6.Init.StopBits = UART_STOPBITS_1;
 800553c:	4b0c      	ldr	r3, [pc, #48]	; (8005570 <MX_USART6_UART_Init+0x4c>)
 800553e:	2200      	movs	r2, #0
 8005540:	60da      	str	r2, [r3, #12]
    huart6.Init.Parity = UART_PARITY_NONE;
 8005542:	4b0b      	ldr	r3, [pc, #44]	; (8005570 <MX_USART6_UART_Init+0x4c>)
 8005544:	2200      	movs	r2, #0
 8005546:	611a      	str	r2, [r3, #16]
    huart6.Init.Mode = UART_MODE_TX_RX;
 8005548:	4b09      	ldr	r3, [pc, #36]	; (8005570 <MX_USART6_UART_Init+0x4c>)
 800554a:	220c      	movs	r2, #12
 800554c:	615a      	str	r2, [r3, #20]
    huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800554e:	4b08      	ldr	r3, [pc, #32]	; (8005570 <MX_USART6_UART_Init+0x4c>)
 8005550:	2200      	movs	r2, #0
 8005552:	619a      	str	r2, [r3, #24]
    huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005554:	4b06      	ldr	r3, [pc, #24]	; (8005570 <MX_USART6_UART_Init+0x4c>)
 8005556:	2200      	movs	r2, #0
 8005558:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart6) != HAL_OK) {
 800555a:	4805      	ldr	r0, [pc, #20]	; (8005570 <MX_USART6_UART_Init+0x4c>)
 800555c:	f003 fd7e 	bl	800905c <HAL_UART_Init>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <MX_USART6_UART_Init+0x46>
        Error_Handler();
 8005566:	f7ff fcad 	bl	8004ec4 <Error_Handler>
    }
    /* USER CODE BEGIN USART6_Init 2 */

    /* USER CODE END USART6_Init 2 */
}
 800556a:	bf00      	nop
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	20002550 	.word	0x20002550
 8005574:	40011400 	.word	0x40011400

08005578 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef * uartHandle) {
 8005578:	b580      	push	{r7, lr}
 800557a:	b092      	sub	sp, #72	; 0x48
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005580:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005584:	2200      	movs	r2, #0
 8005586:	601a      	str	r2, [r3, #0]
 8005588:	605a      	str	r2, [r3, #4]
 800558a:	609a      	str	r2, [r3, #8]
 800558c:	60da      	str	r2, [r3, #12]
 800558e:	611a      	str	r2, [r3, #16]
    if (uartHandle->Instance == UART5) {
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a9e      	ldr	r2, [pc, #632]	; (8005810 <HAL_UART_MspInit+0x298>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d14b      	bne.n	8005632 <HAL_UART_MspInit+0xba>
        /* USER CODE BEGIN UART5_MspInit 0 */

        /* USER CODE END UART5_MspInit 0 */
        /* UART5 clock enable */
        __HAL_RCC_UART5_CLK_ENABLE();
 800559a:	2300      	movs	r3, #0
 800559c:	633b      	str	r3, [r7, #48]	; 0x30
 800559e:	4b9d      	ldr	r3, [pc, #628]	; (8005814 <HAL_UART_MspInit+0x29c>)
 80055a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a2:	4a9c      	ldr	r2, [pc, #624]	; (8005814 <HAL_UART_MspInit+0x29c>)
 80055a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055a8:	6413      	str	r3, [r2, #64]	; 0x40
 80055aa:	4b9a      	ldr	r3, [pc, #616]	; (8005814 <HAL_UART_MspInit+0x29c>)
 80055ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055b2:	633b      	str	r3, [r7, #48]	; 0x30
 80055b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

        __HAL_RCC_GPIOC_CLK_ENABLE();
 80055b6:	2300      	movs	r3, #0
 80055b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055ba:	4b96      	ldr	r3, [pc, #600]	; (8005814 <HAL_UART_MspInit+0x29c>)
 80055bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055be:	4a95      	ldr	r2, [pc, #596]	; (8005814 <HAL_UART_MspInit+0x29c>)
 80055c0:	f043 0304 	orr.w	r3, r3, #4
 80055c4:	6313      	str	r3, [r2, #48]	; 0x30
 80055c6:	4b93      	ldr	r3, [pc, #588]	; (8005814 <HAL_UART_MspInit+0x29c>)
 80055c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ca:	f003 0304 	and.w	r3, r3, #4
 80055ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        __HAL_RCC_GPIOD_CLK_ENABLE();
 80055d2:	2300      	movs	r3, #0
 80055d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80055d6:	4b8f      	ldr	r3, [pc, #572]	; (8005814 <HAL_UART_MspInit+0x29c>)
 80055d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055da:	4a8e      	ldr	r2, [pc, #568]	; (8005814 <HAL_UART_MspInit+0x29c>)
 80055dc:	f043 0308 	orr.w	r3, r3, #8
 80055e0:	6313      	str	r3, [r2, #48]	; 0x30
 80055e2:	4b8c      	ldr	r3, [pc, #560]	; (8005814 <HAL_UART_MspInit+0x29c>)
 80055e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e6:	f003 0308 	and.w	r3, r3, #8
 80055ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80055ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
        /**UART5 GPIO Configuration
        PC12     ------> UART5_TX
        PD2     ------> UART5_RX
        */
        GPIO_InitStruct.Pin = GPIO_PIN_12;
 80055ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055f2:	637b      	str	r3, [r7, #52]	; 0x34
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055f4:	2302      	movs	r3, #2
 80055f6:	63bb      	str	r3, [r7, #56]	; 0x38
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055f8:	2300      	movs	r3, #0
 80055fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055fc:	2303      	movs	r3, #3
 80055fe:	643b      	str	r3, [r7, #64]	; 0x40
        GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005600:	2308      	movs	r3, #8
 8005602:	647b      	str	r3, [r7, #68]	; 0x44
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005604:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005608:	4619      	mov	r1, r3
 800560a:	4883      	ldr	r0, [pc, #524]	; (8005818 <HAL_UART_MspInit+0x2a0>)
 800560c:	f000 faba 	bl	8005b84 <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005610:	2304      	movs	r3, #4
 8005612:	637b      	str	r3, [r7, #52]	; 0x34
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005614:	2302      	movs	r3, #2
 8005616:	63bb      	str	r3, [r7, #56]	; 0x38
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005618:	2301      	movs	r3, #1
 800561a:	63fb      	str	r3, [r7, #60]	; 0x3c
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800561c:	2303      	movs	r3, #3
 800561e:	643b      	str	r3, [r7, #64]	; 0x40
        GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005620:	2308      	movs	r3, #8
 8005622:	647b      	str	r3, [r7, #68]	; 0x44
        HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005624:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005628:	4619      	mov	r1, r3
 800562a:	487c      	ldr	r0, [pc, #496]	; (800581c <HAL_UART_MspInit+0x2a4>)
 800562c:	f000 faaa 	bl	8005b84 <HAL_GPIO_Init>

        /* USER CODE BEGIN USART6_MspInit 1 */

        /* USER CODE END USART6_MspInit 1 */
    }
}
 8005630:	e0e9      	b.n	8005806 <HAL_UART_MspInit+0x28e>
    } else if (uartHandle->Instance == UART7) {
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a7a      	ldr	r2, [pc, #488]	; (8005820 <HAL_UART_MspInit+0x2a8>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d13c      	bne.n	80056b6 <HAL_UART_MspInit+0x13e>
        __HAL_RCC_UART7_CLK_ENABLE();
 800563c:	2300      	movs	r3, #0
 800563e:	627b      	str	r3, [r7, #36]	; 0x24
 8005640:	4b74      	ldr	r3, [pc, #464]	; (8005814 <HAL_UART_MspInit+0x29c>)
 8005642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005644:	4a73      	ldr	r2, [pc, #460]	; (8005814 <HAL_UART_MspInit+0x29c>)
 8005646:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800564a:	6413      	str	r3, [r2, #64]	; 0x40
 800564c:	4b71      	ldr	r3, [pc, #452]	; (8005814 <HAL_UART_MspInit+0x29c>)
 800564e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005650:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005654:	627b      	str	r3, [r7, #36]	; 0x24
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        __HAL_RCC_GPIOF_CLK_ENABLE();
 8005658:	2300      	movs	r3, #0
 800565a:	623b      	str	r3, [r7, #32]
 800565c:	4b6d      	ldr	r3, [pc, #436]	; (8005814 <HAL_UART_MspInit+0x29c>)
 800565e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005660:	4a6c      	ldr	r2, [pc, #432]	; (8005814 <HAL_UART_MspInit+0x29c>)
 8005662:	f043 0320 	orr.w	r3, r3, #32
 8005666:	6313      	str	r3, [r2, #48]	; 0x30
 8005668:	4b6a      	ldr	r3, [pc, #424]	; (8005814 <HAL_UART_MspInit+0x29c>)
 800566a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566c:	f003 0320 	and.w	r3, r3, #32
 8005670:	623b      	str	r3, [r7, #32]
 8005672:	6a3b      	ldr	r3, [r7, #32]
        GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005674:	2340      	movs	r3, #64	; 0x40
 8005676:	637b      	str	r3, [r7, #52]	; 0x34
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005678:	2302      	movs	r3, #2
 800567a:	63bb      	str	r3, [r7, #56]	; 0x38
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 800567c:	2301      	movs	r3, #1
 800567e:	63fb      	str	r3, [r7, #60]	; 0x3c
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005680:	2303      	movs	r3, #3
 8005682:	643b      	str	r3, [r7, #64]	; 0x40
        GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8005684:	2308      	movs	r3, #8
 8005686:	647b      	str	r3, [r7, #68]	; 0x44
        HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005688:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800568c:	4619      	mov	r1, r3
 800568e:	4865      	ldr	r0, [pc, #404]	; (8005824 <HAL_UART_MspInit+0x2ac>)
 8005690:	f000 fa78 	bl	8005b84 <HAL_GPIO_Init>
        GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005694:	2380      	movs	r3, #128	; 0x80
 8005696:	637b      	str	r3, [r7, #52]	; 0x34
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005698:	2302      	movs	r3, #2
 800569a:	63bb      	str	r3, [r7, #56]	; 0x38
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800569c:	2300      	movs	r3, #0
 800569e:	63fb      	str	r3, [r7, #60]	; 0x3c
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056a0:	2303      	movs	r3, #3
 80056a2:	643b      	str	r3, [r7, #64]	; 0x40
        GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80056a4:	2308      	movs	r3, #8
 80056a6:	647b      	str	r3, [r7, #68]	; 0x44
        HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80056a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80056ac:	4619      	mov	r1, r3
 80056ae:	485d      	ldr	r0, [pc, #372]	; (8005824 <HAL_UART_MspInit+0x2ac>)
 80056b0:	f000 fa68 	bl	8005b84 <HAL_GPIO_Init>
}
 80056b4:	e0a7      	b.n	8005806 <HAL_UART_MspInit+0x28e>
    } else if (uartHandle->Instance == USART1) {
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a5b      	ldr	r2, [pc, #364]	; (8005828 <HAL_UART_MspInit+0x2b0>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d13e      	bne.n	800573e <HAL_UART_MspInit+0x1c6>
        __HAL_RCC_USART1_CLK_ENABLE();
 80056c0:	2300      	movs	r3, #0
 80056c2:	61fb      	str	r3, [r7, #28]
 80056c4:	4b53      	ldr	r3, [pc, #332]	; (8005814 <HAL_UART_MspInit+0x29c>)
 80056c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c8:	4a52      	ldr	r2, [pc, #328]	; (8005814 <HAL_UART_MspInit+0x29c>)
 80056ca:	f043 0310 	orr.w	r3, r3, #16
 80056ce:	6453      	str	r3, [r2, #68]	; 0x44
 80056d0:	4b50      	ldr	r3, [pc, #320]	; (8005814 <HAL_UART_MspInit+0x29c>)
 80056d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056d4:	f003 0310 	and.w	r3, r3, #16
 80056d8:	61fb      	str	r3, [r7, #28]
 80056da:	69fb      	ldr	r3, [r7, #28]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 80056dc:	2300      	movs	r3, #0
 80056de:	61bb      	str	r3, [r7, #24]
 80056e0:	4b4c      	ldr	r3, [pc, #304]	; (8005814 <HAL_UART_MspInit+0x29c>)
 80056e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e4:	4a4b      	ldr	r2, [pc, #300]	; (8005814 <HAL_UART_MspInit+0x29c>)
 80056e6:	f043 0301 	orr.w	r3, r3, #1
 80056ea:	6313      	str	r3, [r2, #48]	; 0x30
 80056ec:	4b49      	ldr	r3, [pc, #292]	; (8005814 <HAL_UART_MspInit+0x29c>)
 80056ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	61bb      	str	r3, [r7, #24]
 80056f6:	69bb      	ldr	r3, [r7, #24]
        GPIO_InitStruct.Pin = GPIO_PIN_9;
 80056f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056fc:	637b      	str	r3, [r7, #52]	; 0x34
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056fe:	2302      	movs	r3, #2
 8005700:	63bb      	str	r3, [r7, #56]	; 0x38
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005702:	2300      	movs	r3, #0
 8005704:	63fb      	str	r3, [r7, #60]	; 0x3c
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005706:	2303      	movs	r3, #3
 8005708:	643b      	str	r3, [r7, #64]	; 0x40
        GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800570a:	2307      	movs	r3, #7
 800570c:	647b      	str	r3, [r7, #68]	; 0x44
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800570e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005712:	4619      	mov	r1, r3
 8005714:	4845      	ldr	r0, [pc, #276]	; (800582c <HAL_UART_MspInit+0x2b4>)
 8005716:	f000 fa35 	bl	8005b84 <HAL_GPIO_Init>
        GPIO_InitStruct.Pin = GPIO_PIN_10;
 800571a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800571e:	637b      	str	r3, [r7, #52]	; 0x34
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005720:	2302      	movs	r3, #2
 8005722:	63bb      	str	r3, [r7, #56]	; 0x38
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005724:	2301      	movs	r3, #1
 8005726:	63fb      	str	r3, [r7, #60]	; 0x3c
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005728:	2303      	movs	r3, #3
 800572a:	643b      	str	r3, [r7, #64]	; 0x40
        GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800572c:	2307      	movs	r3, #7
 800572e:	647b      	str	r3, [r7, #68]	; 0x44
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005730:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005734:	4619      	mov	r1, r3
 8005736:	483d      	ldr	r0, [pc, #244]	; (800582c <HAL_UART_MspInit+0x2b4>)
 8005738:	f000 fa24 	bl	8005b84 <HAL_GPIO_Init>
}
 800573c:	e063      	b.n	8005806 <HAL_UART_MspInit+0x28e>
    } else if (uartHandle->Instance == USART3) {
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a3b      	ldr	r2, [pc, #236]	; (8005830 <HAL_UART_MspInit+0x2b8>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d12d      	bne.n	80057a4 <HAL_UART_MspInit+0x22c>
        __HAL_RCC_USART3_CLK_ENABLE();
 8005748:	2300      	movs	r3, #0
 800574a:	617b      	str	r3, [r7, #20]
 800574c:	4b31      	ldr	r3, [pc, #196]	; (8005814 <HAL_UART_MspInit+0x29c>)
 800574e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005750:	4a30      	ldr	r2, [pc, #192]	; (8005814 <HAL_UART_MspInit+0x29c>)
 8005752:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005756:	6413      	str	r3, [r2, #64]	; 0x40
 8005758:	4b2e      	ldr	r3, [pc, #184]	; (8005814 <HAL_UART_MspInit+0x29c>)
 800575a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005760:	617b      	str	r3, [r7, #20]
 8005762:	697b      	ldr	r3, [r7, #20]
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8005764:	2300      	movs	r3, #0
 8005766:	613b      	str	r3, [r7, #16]
 8005768:	4b2a      	ldr	r3, [pc, #168]	; (8005814 <HAL_UART_MspInit+0x29c>)
 800576a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576c:	4a29      	ldr	r2, [pc, #164]	; (8005814 <HAL_UART_MspInit+0x29c>)
 800576e:	f043 0308 	orr.w	r3, r3, #8
 8005772:	6313      	str	r3, [r2, #48]	; 0x30
 8005774:	4b27      	ldr	r3, [pc, #156]	; (8005814 <HAL_UART_MspInit+0x29c>)
 8005776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005778:	f003 0308 	and.w	r3, r3, #8
 800577c:	613b      	str	r3, [r7, #16]
 800577e:	693b      	ldr	r3, [r7, #16]
        GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8005780:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005784:	637b      	str	r3, [r7, #52]	; 0x34
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005786:	2302      	movs	r3, #2
 8005788:	63bb      	str	r3, [r7, #56]	; 0x38
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800578a:	2300      	movs	r3, #0
 800578c:	63fb      	str	r3, [r7, #60]	; 0x3c
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800578e:	2303      	movs	r3, #3
 8005790:	643b      	str	r3, [r7, #64]	; 0x40
        GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005792:	2307      	movs	r3, #7
 8005794:	647b      	str	r3, [r7, #68]	; 0x44
        HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005796:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800579a:	4619      	mov	r1, r3
 800579c:	481f      	ldr	r0, [pc, #124]	; (800581c <HAL_UART_MspInit+0x2a4>)
 800579e:	f000 f9f1 	bl	8005b84 <HAL_GPIO_Init>
}
 80057a2:	e030      	b.n	8005806 <HAL_UART_MspInit+0x28e>
    } else if (uartHandle->Instance == USART6) {
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a22      	ldr	r2, [pc, #136]	; (8005834 <HAL_UART_MspInit+0x2bc>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d12b      	bne.n	8005806 <HAL_UART_MspInit+0x28e>
        __HAL_RCC_USART6_CLK_ENABLE();
 80057ae:	2300      	movs	r3, #0
 80057b0:	60fb      	str	r3, [r7, #12]
 80057b2:	4b18      	ldr	r3, [pc, #96]	; (8005814 <HAL_UART_MspInit+0x29c>)
 80057b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b6:	4a17      	ldr	r2, [pc, #92]	; (8005814 <HAL_UART_MspInit+0x29c>)
 80057b8:	f043 0320 	orr.w	r3, r3, #32
 80057bc:	6453      	str	r3, [r2, #68]	; 0x44
 80057be:	4b15      	ldr	r3, [pc, #84]	; (8005814 <HAL_UART_MspInit+0x29c>)
 80057c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c2:	f003 0320 	and.w	r3, r3, #32
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	68fb      	ldr	r3, [r7, #12]
        __HAL_RCC_GPIOC_CLK_ENABLE();
 80057ca:	2300      	movs	r3, #0
 80057cc:	60bb      	str	r3, [r7, #8]
 80057ce:	4b11      	ldr	r3, [pc, #68]	; (8005814 <HAL_UART_MspInit+0x29c>)
 80057d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d2:	4a10      	ldr	r2, [pc, #64]	; (8005814 <HAL_UART_MspInit+0x29c>)
 80057d4:	f043 0304 	orr.w	r3, r3, #4
 80057d8:	6313      	str	r3, [r2, #48]	; 0x30
 80057da:	4b0e      	ldr	r3, [pc, #56]	; (8005814 <HAL_UART_MspInit+0x29c>)
 80057dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057de:	f003 0304 	and.w	r3, r3, #4
 80057e2:	60bb      	str	r3, [r7, #8]
 80057e4:	68bb      	ldr	r3, [r7, #8]
        GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 80057e6:	23c0      	movs	r3, #192	; 0xc0
 80057e8:	637b      	str	r3, [r7, #52]	; 0x34
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057ea:	2302      	movs	r3, #2
 80057ec:	63bb      	str	r3, [r7, #56]	; 0x38
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ee:	2300      	movs	r3, #0
 80057f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057f2:	2303      	movs	r3, #3
 80057f4:	643b      	str	r3, [r7, #64]	; 0x40
        GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80057f6:	2308      	movs	r3, #8
 80057f8:	647b      	str	r3, [r7, #68]	; 0x44
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80057fe:	4619      	mov	r1, r3
 8005800:	4805      	ldr	r0, [pc, #20]	; (8005818 <HAL_UART_MspInit+0x2a0>)
 8005802:	f000 f9bf 	bl	8005b84 <HAL_GPIO_Init>
}
 8005806:	bf00      	nop
 8005808:	3748      	adds	r7, #72	; 0x48
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	40005000 	.word	0x40005000
 8005814:	40023800 	.word	0x40023800
 8005818:	40020800 	.word	0x40020800
 800581c:	40020c00 	.word	0x40020c00
 8005820:	40007800 	.word	0x40007800
 8005824:	40021400 	.word	0x40021400
 8005828:	40011000 	.word	0x40011000
 800582c:	40020000 	.word	0x40020000
 8005830:	40004800 	.word	0x40004800
 8005834:	40011400 	.word	0x40011400

08005838 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack       /* set stack pointer */
 8005838:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005870 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800583c:	480d      	ldr	r0, [pc, #52]	; (8005874 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800583e:	490e      	ldr	r1, [pc, #56]	; (8005878 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005840:	4a0e      	ldr	r2, [pc, #56]	; (800587c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005844:	e002      	b.n	800584c <LoopCopyDataInit>

08005846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800584a:	3304      	adds	r3, #4

0800584c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800584c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800584e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005850:	d3f9      	bcc.n	8005846 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005852:	4a0b      	ldr	r2, [pc, #44]	; (8005880 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005854:	4c0b      	ldr	r4, [pc, #44]	; (8005884 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005858:	e001      	b.n	800585e <LoopFillZerobss>

0800585a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800585a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800585c:	3204      	adds	r2, #4

0800585e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800585e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005860:	d3fb      	bcc.n	800585a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005862:	f7ff fda5 	bl	80053b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005866:	f007 f9ab 	bl	800cbc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800586a:	f7ff f953 	bl	8004b14 <main>
  bx  lr
 800586e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8005870:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8005874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005878:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 800587c:	08013a9c 	.word	0x08013a9c
  ldr r2, =_sbss
 8005880:	2000034c 	.word	0x2000034c
  ldr r4, =_ebss
 8005884:	200027e4 	.word	0x200027e4

08005888 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005888:	e7fe      	b.n	8005888 <ADC_IRQHandler>
	...

0800588c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005890:	4b0e      	ldr	r3, [pc, #56]	; (80058cc <HAL_Init+0x40>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a0d      	ldr	r2, [pc, #52]	; (80058cc <HAL_Init+0x40>)
 8005896:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800589a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800589c:	4b0b      	ldr	r3, [pc, #44]	; (80058cc <HAL_Init+0x40>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a0a      	ldr	r2, [pc, #40]	; (80058cc <HAL_Init+0x40>)
 80058a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80058a8:	4b08      	ldr	r3, [pc, #32]	; (80058cc <HAL_Init+0x40>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a07      	ldr	r2, [pc, #28]	; (80058cc <HAL_Init+0x40>)
 80058ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80058b4:	2003      	movs	r0, #3
 80058b6:	f000 f931 	bl	8005b1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80058ba:	200f      	movs	r0, #15
 80058bc:	f000 f808 	bl	80058d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80058c0:	f7ff fc26 	bl	8005110 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	40023c00 	.word	0x40023c00

080058d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80058d8:	4b12      	ldr	r3, [pc, #72]	; (8005924 <HAL_InitTick+0x54>)
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	4b12      	ldr	r3, [pc, #72]	; (8005928 <HAL_InitTick+0x58>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	4619      	mov	r1, r3
 80058e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80058ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 f93b 	bl	8005b6a <HAL_SYSTICK_Config>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e00e      	b.n	800591c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b0f      	cmp	r3, #15
 8005902:	d80a      	bhi.n	800591a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005904:	2200      	movs	r2, #0
 8005906:	6879      	ldr	r1, [r7, #4]
 8005908:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800590c:	f000 f911 	bl	8005b32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005910:	4a06      	ldr	r2, [pc, #24]	; (800592c <HAL_InitTick+0x5c>)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005916:	2300      	movs	r3, #0
 8005918:	e000      	b.n	800591c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
}
 800591c:	4618      	mov	r0, r3
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	20000158 	.word	0x20000158
 8005928:	20000160 	.word	0x20000160
 800592c:	2000015c 	.word	0x2000015c

08005930 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005930:	b480      	push	{r7}
 8005932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005934:	4b06      	ldr	r3, [pc, #24]	; (8005950 <HAL_IncTick+0x20>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	461a      	mov	r2, r3
 800593a:	4b06      	ldr	r3, [pc, #24]	; (8005954 <HAL_IncTick+0x24>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4413      	add	r3, r2
 8005940:	4a04      	ldr	r2, [pc, #16]	; (8005954 <HAL_IncTick+0x24>)
 8005942:	6013      	str	r3, [r2, #0]
}
 8005944:	bf00      	nop
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	20000160 	.word	0x20000160
 8005954:	20002594 	.word	0x20002594

08005958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005958:	b480      	push	{r7}
 800595a:	af00      	add	r7, sp, #0
  return uwTick;
 800595c:	4b03      	ldr	r3, [pc, #12]	; (800596c <HAL_GetTick+0x14>)
 800595e:	681b      	ldr	r3, [r3, #0]
}
 8005960:	4618      	mov	r0, r3
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	20002594 	.word	0x20002594

08005970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005978:	f7ff ffee 	bl	8005958 <HAL_GetTick>
 800597c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005988:	d005      	beq.n	8005996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800598a:	4b0a      	ldr	r3, [pc, #40]	; (80059b4 <HAL_Delay+0x44>)
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	461a      	mov	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	4413      	add	r3, r2
 8005994:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005996:	bf00      	nop
 8005998:	f7ff ffde 	bl	8005958 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d8f7      	bhi.n	8005998 <HAL_Delay+0x28>
  {
  }
}
 80059a8:	bf00      	nop
 80059aa:	bf00      	nop
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	20000160 	.word	0x20000160

080059b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f003 0307 	and.w	r3, r3, #7
 80059c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80059c8:	4b0c      	ldr	r3, [pc, #48]	; (80059fc <__NVIC_SetPriorityGrouping+0x44>)
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80059d4:	4013      	ands	r3, r2
 80059d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80059e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80059e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80059ea:	4a04      	ldr	r2, [pc, #16]	; (80059fc <__NVIC_SetPriorityGrouping+0x44>)
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	60d3      	str	r3, [r2, #12]
}
 80059f0:	bf00      	nop
 80059f2:	3714      	adds	r7, #20
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr
 80059fc:	e000ed00 	.word	0xe000ed00

08005a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a00:	b480      	push	{r7}
 8005a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a04:	4b04      	ldr	r3, [pc, #16]	; (8005a18 <__NVIC_GetPriorityGrouping+0x18>)
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	0a1b      	lsrs	r3, r3, #8
 8005a0a:	f003 0307 	and.w	r3, r3, #7
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr
 8005a18:	e000ed00 	.word	0xe000ed00

08005a1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	4603      	mov	r3, r0
 8005a24:	6039      	str	r1, [r7, #0]
 8005a26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	db0a      	blt.n	8005a46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	b2da      	uxtb	r2, r3
 8005a34:	490c      	ldr	r1, [pc, #48]	; (8005a68 <__NVIC_SetPriority+0x4c>)
 8005a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a3a:	0112      	lsls	r2, r2, #4
 8005a3c:	b2d2      	uxtb	r2, r2
 8005a3e:	440b      	add	r3, r1
 8005a40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a44:	e00a      	b.n	8005a5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	4908      	ldr	r1, [pc, #32]	; (8005a6c <__NVIC_SetPriority+0x50>)
 8005a4c:	79fb      	ldrb	r3, [r7, #7]
 8005a4e:	f003 030f 	and.w	r3, r3, #15
 8005a52:	3b04      	subs	r3, #4
 8005a54:	0112      	lsls	r2, r2, #4
 8005a56:	b2d2      	uxtb	r2, r2
 8005a58:	440b      	add	r3, r1
 8005a5a:	761a      	strb	r2, [r3, #24]
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	e000e100 	.word	0xe000e100
 8005a6c:	e000ed00 	.word	0xe000ed00

08005a70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b089      	sub	sp, #36	; 0x24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f003 0307 	and.w	r3, r3, #7
 8005a82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	f1c3 0307 	rsb	r3, r3, #7
 8005a8a:	2b04      	cmp	r3, #4
 8005a8c:	bf28      	it	cs
 8005a8e:	2304      	movcs	r3, #4
 8005a90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	3304      	adds	r3, #4
 8005a96:	2b06      	cmp	r3, #6
 8005a98:	d902      	bls.n	8005aa0 <NVIC_EncodePriority+0x30>
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	3b03      	subs	r3, #3
 8005a9e:	e000      	b.n	8005aa2 <NVIC_EncodePriority+0x32>
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005aa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8005aae:	43da      	mvns	r2, r3
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	401a      	ands	r2, r3
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ab8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac2:	43d9      	mvns	r1, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ac8:	4313      	orrs	r3, r2
         );
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3724      	adds	r7, #36	; 0x24
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
	...

08005ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ae8:	d301      	bcc.n	8005aee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005aea:	2301      	movs	r3, #1
 8005aec:	e00f      	b.n	8005b0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005aee:	4a0a      	ldr	r2, [pc, #40]	; (8005b18 <SysTick_Config+0x40>)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	3b01      	subs	r3, #1
 8005af4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005af6:	210f      	movs	r1, #15
 8005af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005afc:	f7ff ff8e 	bl	8005a1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b00:	4b05      	ldr	r3, [pc, #20]	; (8005b18 <SysTick_Config+0x40>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b06:	4b04      	ldr	r3, [pc, #16]	; (8005b18 <SysTick_Config+0x40>)
 8005b08:	2207      	movs	r2, #7
 8005b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3708      	adds	r7, #8
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	e000e010 	.word	0xe000e010

08005b1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f7ff ff47 	bl	80059b8 <__NVIC_SetPriorityGrouping>
}
 8005b2a:	bf00      	nop
 8005b2c:	3708      	adds	r7, #8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b086      	sub	sp, #24
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	4603      	mov	r3, r0
 8005b3a:	60b9      	str	r1, [r7, #8]
 8005b3c:	607a      	str	r2, [r7, #4]
 8005b3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005b44:	f7ff ff5c 	bl	8005a00 <__NVIC_GetPriorityGrouping>
 8005b48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	68b9      	ldr	r1, [r7, #8]
 8005b4e:	6978      	ldr	r0, [r7, #20]
 8005b50:	f7ff ff8e 	bl	8005a70 <NVIC_EncodePriority>
 8005b54:	4602      	mov	r2, r0
 8005b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b5a:	4611      	mov	r1, r2
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7ff ff5d 	bl	8005a1c <__NVIC_SetPriority>
}
 8005b62:	bf00      	nop
 8005b64:	3718      	adds	r7, #24
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b082      	sub	sp, #8
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7ff ffb0 	bl	8005ad8 <SysTick_Config>
 8005b78:	4603      	mov	r3, r0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
	...

08005b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b089      	sub	sp, #36	; 0x24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005b92:	2300      	movs	r3, #0
 8005b94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005b96:	2300      	movs	r3, #0
 8005b98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	61fb      	str	r3, [r7, #28]
 8005b9e:	e177      	b.n	8005e90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	f040 8166 	bne.w	8005e8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f003 0303 	and.w	r3, r3, #3
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d005      	beq.n	8005bd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d130      	bne.n	8005c38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	005b      	lsls	r3, r3, #1
 8005be0:	2203      	movs	r2, #3
 8005be2:	fa02 f303 	lsl.w	r3, r2, r3
 8005be6:	43db      	mvns	r3, r3
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	4013      	ands	r3, r2
 8005bec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	68da      	ldr	r2, [r3, #12]
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	005b      	lsls	r3, r3, #1
 8005bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfa:	69ba      	ldr	r2, [r7, #24]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	fa02 f303 	lsl.w	r3, r2, r3
 8005c14:	43db      	mvns	r3, r3
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	4013      	ands	r3, r2
 8005c1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	091b      	lsrs	r3, r3, #4
 8005c22:	f003 0201 	and.w	r2, r3, #1
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f003 0303 	and.w	r3, r3, #3
 8005c40:	2b03      	cmp	r3, #3
 8005c42:	d017      	beq.n	8005c74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	005b      	lsls	r3, r3, #1
 8005c4e:	2203      	movs	r2, #3
 8005c50:	fa02 f303 	lsl.w	r3, r2, r3
 8005c54:	43db      	mvns	r3, r3
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	4013      	ands	r3, r2
 8005c5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	689a      	ldr	r2, [r3, #8]
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	005b      	lsls	r3, r3, #1
 8005c64:	fa02 f303 	lsl.w	r3, r2, r3
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	69ba      	ldr	r2, [r7, #24]
 8005c72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	f003 0303 	and.w	r3, r3, #3
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d123      	bne.n	8005cc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	08da      	lsrs	r2, r3, #3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	3208      	adds	r2, #8
 8005c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	f003 0307 	and.w	r3, r3, #7
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	220f      	movs	r2, #15
 8005c98:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9c:	43db      	mvns	r3, r3
 8005c9e:	69ba      	ldr	r2, [r7, #24]
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	691a      	ldr	r2, [r3, #16]
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	f003 0307 	and.w	r3, r3, #7
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	08da      	lsrs	r2, r3, #3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	3208      	adds	r2, #8
 8005cc2:	69b9      	ldr	r1, [r7, #24]
 8005cc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	005b      	lsls	r3, r3, #1
 8005cd2:	2203      	movs	r2, #3
 8005cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd8:	43db      	mvns	r3, r3
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	4013      	ands	r3, r2
 8005cde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	f003 0203 	and.w	r2, r3, #3
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	005b      	lsls	r3, r3, #1
 8005cec:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	69ba      	ldr	r2, [r7, #24]
 8005cfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f000 80c0 	beq.w	8005e8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	60fb      	str	r3, [r7, #12]
 8005d0e:	4b66      	ldr	r3, [pc, #408]	; (8005ea8 <HAL_GPIO_Init+0x324>)
 8005d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d12:	4a65      	ldr	r2, [pc, #404]	; (8005ea8 <HAL_GPIO_Init+0x324>)
 8005d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d18:	6453      	str	r3, [r2, #68]	; 0x44
 8005d1a:	4b63      	ldr	r3, [pc, #396]	; (8005ea8 <HAL_GPIO_Init+0x324>)
 8005d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d22:	60fb      	str	r3, [r7, #12]
 8005d24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d26:	4a61      	ldr	r2, [pc, #388]	; (8005eac <HAL_GPIO_Init+0x328>)
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	089b      	lsrs	r3, r3, #2
 8005d2c:	3302      	adds	r3, #2
 8005d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	f003 0303 	and.w	r3, r3, #3
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	220f      	movs	r2, #15
 8005d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d42:	43db      	mvns	r3, r3
 8005d44:	69ba      	ldr	r2, [r7, #24]
 8005d46:	4013      	ands	r3, r2
 8005d48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a58      	ldr	r2, [pc, #352]	; (8005eb0 <HAL_GPIO_Init+0x32c>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d037      	beq.n	8005dc2 <HAL_GPIO_Init+0x23e>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a57      	ldr	r2, [pc, #348]	; (8005eb4 <HAL_GPIO_Init+0x330>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d031      	beq.n	8005dbe <HAL_GPIO_Init+0x23a>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a56      	ldr	r2, [pc, #344]	; (8005eb8 <HAL_GPIO_Init+0x334>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d02b      	beq.n	8005dba <HAL_GPIO_Init+0x236>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a55      	ldr	r2, [pc, #340]	; (8005ebc <HAL_GPIO_Init+0x338>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d025      	beq.n	8005db6 <HAL_GPIO_Init+0x232>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a54      	ldr	r2, [pc, #336]	; (8005ec0 <HAL_GPIO_Init+0x33c>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d01f      	beq.n	8005db2 <HAL_GPIO_Init+0x22e>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a53      	ldr	r2, [pc, #332]	; (8005ec4 <HAL_GPIO_Init+0x340>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d019      	beq.n	8005dae <HAL_GPIO_Init+0x22a>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a52      	ldr	r2, [pc, #328]	; (8005ec8 <HAL_GPIO_Init+0x344>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d013      	beq.n	8005daa <HAL_GPIO_Init+0x226>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a51      	ldr	r2, [pc, #324]	; (8005ecc <HAL_GPIO_Init+0x348>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d00d      	beq.n	8005da6 <HAL_GPIO_Init+0x222>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a50      	ldr	r2, [pc, #320]	; (8005ed0 <HAL_GPIO_Init+0x34c>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d007      	beq.n	8005da2 <HAL_GPIO_Init+0x21e>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a4f      	ldr	r2, [pc, #316]	; (8005ed4 <HAL_GPIO_Init+0x350>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d101      	bne.n	8005d9e <HAL_GPIO_Init+0x21a>
 8005d9a:	2309      	movs	r3, #9
 8005d9c:	e012      	b.n	8005dc4 <HAL_GPIO_Init+0x240>
 8005d9e:	230a      	movs	r3, #10
 8005da0:	e010      	b.n	8005dc4 <HAL_GPIO_Init+0x240>
 8005da2:	2308      	movs	r3, #8
 8005da4:	e00e      	b.n	8005dc4 <HAL_GPIO_Init+0x240>
 8005da6:	2307      	movs	r3, #7
 8005da8:	e00c      	b.n	8005dc4 <HAL_GPIO_Init+0x240>
 8005daa:	2306      	movs	r3, #6
 8005dac:	e00a      	b.n	8005dc4 <HAL_GPIO_Init+0x240>
 8005dae:	2305      	movs	r3, #5
 8005db0:	e008      	b.n	8005dc4 <HAL_GPIO_Init+0x240>
 8005db2:	2304      	movs	r3, #4
 8005db4:	e006      	b.n	8005dc4 <HAL_GPIO_Init+0x240>
 8005db6:	2303      	movs	r3, #3
 8005db8:	e004      	b.n	8005dc4 <HAL_GPIO_Init+0x240>
 8005dba:	2302      	movs	r3, #2
 8005dbc:	e002      	b.n	8005dc4 <HAL_GPIO_Init+0x240>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e000      	b.n	8005dc4 <HAL_GPIO_Init+0x240>
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	69fa      	ldr	r2, [r7, #28]
 8005dc6:	f002 0203 	and.w	r2, r2, #3
 8005dca:	0092      	lsls	r2, r2, #2
 8005dcc:	4093      	lsls	r3, r2
 8005dce:	69ba      	ldr	r2, [r7, #24]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005dd4:	4935      	ldr	r1, [pc, #212]	; (8005eac <HAL_GPIO_Init+0x328>)
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	089b      	lsrs	r3, r3, #2
 8005dda:	3302      	adds	r3, #2
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005de2:	4b3d      	ldr	r3, [pc, #244]	; (8005ed8 <HAL_GPIO_Init+0x354>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	43db      	mvns	r3, r3
 8005dec:	69ba      	ldr	r2, [r7, #24]
 8005dee:	4013      	ands	r3, r2
 8005df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d003      	beq.n	8005e06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e06:	4a34      	ldr	r2, [pc, #208]	; (8005ed8 <HAL_GPIO_Init+0x354>)
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e0c:	4b32      	ldr	r3, [pc, #200]	; (8005ed8 <HAL_GPIO_Init+0x354>)
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	43db      	mvns	r3, r3
 8005e16:	69ba      	ldr	r2, [r7, #24]
 8005e18:	4013      	ands	r3, r2
 8005e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d003      	beq.n	8005e30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005e28:	69ba      	ldr	r2, [r7, #24]
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005e30:	4a29      	ldr	r2, [pc, #164]	; (8005ed8 <HAL_GPIO_Init+0x354>)
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005e36:	4b28      	ldr	r3, [pc, #160]	; (8005ed8 <HAL_GPIO_Init+0x354>)
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	43db      	mvns	r3, r3
 8005e40:	69ba      	ldr	r2, [r7, #24]
 8005e42:	4013      	ands	r3, r2
 8005e44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d003      	beq.n	8005e5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e5a:	4a1f      	ldr	r2, [pc, #124]	; (8005ed8 <HAL_GPIO_Init+0x354>)
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e60:	4b1d      	ldr	r3, [pc, #116]	; (8005ed8 <HAL_GPIO_Init+0x354>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	43db      	mvns	r3, r3
 8005e6a:	69ba      	ldr	r2, [r7, #24]
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d003      	beq.n	8005e84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005e7c:	69ba      	ldr	r2, [r7, #24]
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005e84:	4a14      	ldr	r2, [pc, #80]	; (8005ed8 <HAL_GPIO_Init+0x354>)
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	61fb      	str	r3, [r7, #28]
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	2b0f      	cmp	r3, #15
 8005e94:	f67f ae84 	bls.w	8005ba0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005e98:	bf00      	nop
 8005e9a:	bf00      	nop
 8005e9c:	3724      	adds	r7, #36	; 0x24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	40023800 	.word	0x40023800
 8005eac:	40013800 	.word	0x40013800
 8005eb0:	40020000 	.word	0x40020000
 8005eb4:	40020400 	.word	0x40020400
 8005eb8:	40020800 	.word	0x40020800
 8005ebc:	40020c00 	.word	0x40020c00
 8005ec0:	40021000 	.word	0x40021000
 8005ec4:	40021400 	.word	0x40021400
 8005ec8:	40021800 	.word	0x40021800
 8005ecc:	40021c00 	.word	0x40021c00
 8005ed0:	40022000 	.word	0x40022000
 8005ed4:	40022400 	.word	0x40022400
 8005ed8:	40013c00 	.word	0x40013c00

08005edc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b087      	sub	sp, #28
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005eea:	2300      	movs	r3, #0
 8005eec:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	617b      	str	r3, [r7, #20]
 8005ef6:	e0d9      	b.n	80060ac <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005ef8:	2201      	movs	r2, #1
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	fa02 f303 	lsl.w	r3, r2, r3
 8005f00:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	4013      	ands	r3, r2
 8005f08:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	f040 80c9 	bne.w	80060a6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005f14:	4a6b      	ldr	r2, [pc, #428]	; (80060c4 <HAL_GPIO_DeInit+0x1e8>)
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	089b      	lsrs	r3, r3, #2
 8005f1a:	3302      	adds	r3, #2
 8005f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f20:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f003 0303 	and.w	r3, r3, #3
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	220f      	movs	r2, #15
 8005f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f30:	68ba      	ldr	r2, [r7, #8]
 8005f32:	4013      	ands	r3, r2
 8005f34:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a63      	ldr	r2, [pc, #396]	; (80060c8 <HAL_GPIO_DeInit+0x1ec>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d037      	beq.n	8005fae <HAL_GPIO_DeInit+0xd2>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a62      	ldr	r2, [pc, #392]	; (80060cc <HAL_GPIO_DeInit+0x1f0>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d031      	beq.n	8005faa <HAL_GPIO_DeInit+0xce>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a61      	ldr	r2, [pc, #388]	; (80060d0 <HAL_GPIO_DeInit+0x1f4>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d02b      	beq.n	8005fa6 <HAL_GPIO_DeInit+0xca>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a60      	ldr	r2, [pc, #384]	; (80060d4 <HAL_GPIO_DeInit+0x1f8>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d025      	beq.n	8005fa2 <HAL_GPIO_DeInit+0xc6>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a5f      	ldr	r2, [pc, #380]	; (80060d8 <HAL_GPIO_DeInit+0x1fc>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d01f      	beq.n	8005f9e <HAL_GPIO_DeInit+0xc2>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a5e      	ldr	r2, [pc, #376]	; (80060dc <HAL_GPIO_DeInit+0x200>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d019      	beq.n	8005f9a <HAL_GPIO_DeInit+0xbe>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a5d      	ldr	r2, [pc, #372]	; (80060e0 <HAL_GPIO_DeInit+0x204>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d013      	beq.n	8005f96 <HAL_GPIO_DeInit+0xba>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a5c      	ldr	r2, [pc, #368]	; (80060e4 <HAL_GPIO_DeInit+0x208>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d00d      	beq.n	8005f92 <HAL_GPIO_DeInit+0xb6>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a5b      	ldr	r2, [pc, #364]	; (80060e8 <HAL_GPIO_DeInit+0x20c>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d007      	beq.n	8005f8e <HAL_GPIO_DeInit+0xb2>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a5a      	ldr	r2, [pc, #360]	; (80060ec <HAL_GPIO_DeInit+0x210>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d101      	bne.n	8005f8a <HAL_GPIO_DeInit+0xae>
 8005f86:	2309      	movs	r3, #9
 8005f88:	e012      	b.n	8005fb0 <HAL_GPIO_DeInit+0xd4>
 8005f8a:	230a      	movs	r3, #10
 8005f8c:	e010      	b.n	8005fb0 <HAL_GPIO_DeInit+0xd4>
 8005f8e:	2308      	movs	r3, #8
 8005f90:	e00e      	b.n	8005fb0 <HAL_GPIO_DeInit+0xd4>
 8005f92:	2307      	movs	r3, #7
 8005f94:	e00c      	b.n	8005fb0 <HAL_GPIO_DeInit+0xd4>
 8005f96:	2306      	movs	r3, #6
 8005f98:	e00a      	b.n	8005fb0 <HAL_GPIO_DeInit+0xd4>
 8005f9a:	2305      	movs	r3, #5
 8005f9c:	e008      	b.n	8005fb0 <HAL_GPIO_DeInit+0xd4>
 8005f9e:	2304      	movs	r3, #4
 8005fa0:	e006      	b.n	8005fb0 <HAL_GPIO_DeInit+0xd4>
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e004      	b.n	8005fb0 <HAL_GPIO_DeInit+0xd4>
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	e002      	b.n	8005fb0 <HAL_GPIO_DeInit+0xd4>
 8005faa:	2301      	movs	r3, #1
 8005fac:	e000      	b.n	8005fb0 <HAL_GPIO_DeInit+0xd4>
 8005fae:	2300      	movs	r3, #0
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	f002 0203 	and.w	r2, r2, #3
 8005fb6:	0092      	lsls	r2, r2, #2
 8005fb8:	4093      	lsls	r3, r2
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d132      	bne.n	8006026 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005fc0:	4b4b      	ldr	r3, [pc, #300]	; (80060f0 <HAL_GPIO_DeInit+0x214>)
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	43db      	mvns	r3, r3
 8005fc8:	4949      	ldr	r1, [pc, #292]	; (80060f0 <HAL_GPIO_DeInit+0x214>)
 8005fca:	4013      	ands	r3, r2
 8005fcc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005fce:	4b48      	ldr	r3, [pc, #288]	; (80060f0 <HAL_GPIO_DeInit+0x214>)
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	43db      	mvns	r3, r3
 8005fd6:	4946      	ldr	r1, [pc, #280]	; (80060f0 <HAL_GPIO_DeInit+0x214>)
 8005fd8:	4013      	ands	r3, r2
 8005fda:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005fdc:	4b44      	ldr	r3, [pc, #272]	; (80060f0 <HAL_GPIO_DeInit+0x214>)
 8005fde:	68da      	ldr	r2, [r3, #12]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	43db      	mvns	r3, r3
 8005fe4:	4942      	ldr	r1, [pc, #264]	; (80060f0 <HAL_GPIO_DeInit+0x214>)
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005fea:	4b41      	ldr	r3, [pc, #260]	; (80060f0 <HAL_GPIO_DeInit+0x214>)
 8005fec:	689a      	ldr	r2, [r3, #8]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	43db      	mvns	r3, r3
 8005ff2:	493f      	ldr	r1, [pc, #252]	; (80060f0 <HAL_GPIO_DeInit+0x214>)
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	f003 0303 	and.w	r3, r3, #3
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	220f      	movs	r2, #15
 8006002:	fa02 f303 	lsl.w	r3, r2, r3
 8006006:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006008:	4a2e      	ldr	r2, [pc, #184]	; (80060c4 <HAL_GPIO_DeInit+0x1e8>)
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	089b      	lsrs	r3, r3, #2
 800600e:	3302      	adds	r3, #2
 8006010:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	43da      	mvns	r2, r3
 8006018:	482a      	ldr	r0, [pc, #168]	; (80060c4 <HAL_GPIO_DeInit+0x1e8>)
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	089b      	lsrs	r3, r3, #2
 800601e:	400a      	ands	r2, r1
 8006020:	3302      	adds	r3, #2
 8006022:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	005b      	lsls	r3, r3, #1
 800602e:	2103      	movs	r1, #3
 8006030:	fa01 f303 	lsl.w	r3, r1, r3
 8006034:	43db      	mvns	r3, r3
 8006036:	401a      	ands	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	08da      	lsrs	r2, r3, #3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	3208      	adds	r2, #8
 8006044:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	f003 0307 	and.w	r3, r3, #7
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	220f      	movs	r2, #15
 8006052:	fa02 f303 	lsl.w	r3, r2, r3
 8006056:	43db      	mvns	r3, r3
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	08d2      	lsrs	r2, r2, #3
 800605c:	4019      	ands	r1, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	3208      	adds	r2, #8
 8006062:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	68da      	ldr	r2, [r3, #12]
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	005b      	lsls	r3, r3, #1
 800606e:	2103      	movs	r1, #3
 8006070:	fa01 f303 	lsl.w	r3, r1, r3
 8006074:	43db      	mvns	r3, r3
 8006076:	401a      	ands	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685a      	ldr	r2, [r3, #4]
 8006080:	2101      	movs	r1, #1
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	fa01 f303 	lsl.w	r3, r1, r3
 8006088:	43db      	mvns	r3, r3
 800608a:	401a      	ands	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	689a      	ldr	r2, [r3, #8]
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	005b      	lsls	r3, r3, #1
 8006098:	2103      	movs	r1, #3
 800609a:	fa01 f303 	lsl.w	r3, r1, r3
 800609e:	43db      	mvns	r3, r3
 80060a0:	401a      	ands	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	3301      	adds	r3, #1
 80060aa:	617b      	str	r3, [r7, #20]
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	2b0f      	cmp	r3, #15
 80060b0:	f67f af22 	bls.w	8005ef8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80060b4:	bf00      	nop
 80060b6:	bf00      	nop
 80060b8:	371c      	adds	r7, #28
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	40013800 	.word	0x40013800
 80060c8:	40020000 	.word	0x40020000
 80060cc:	40020400 	.word	0x40020400
 80060d0:	40020800 	.word	0x40020800
 80060d4:	40020c00 	.word	0x40020c00
 80060d8:	40021000 	.word	0x40021000
 80060dc:	40021400 	.word	0x40021400
 80060e0:	40021800 	.word	0x40021800
 80060e4:	40021c00 	.word	0x40021c00
 80060e8:	40022000 	.word	0x40022000
 80060ec:	40022400 	.word	0x40022400
 80060f0:	40013c00 	.word	0x40013c00

080060f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	460b      	mov	r3, r1
 80060fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	691a      	ldr	r2, [r3, #16]
 8006104:	887b      	ldrh	r3, [r7, #2]
 8006106:	4013      	ands	r3, r2
 8006108:	2b00      	cmp	r3, #0
 800610a:	d002      	beq.n	8006112 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800610c:	2301      	movs	r3, #1
 800610e:	73fb      	strb	r3, [r7, #15]
 8006110:	e001      	b.n	8006116 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006112:	2300      	movs	r3, #0
 8006114:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006116:	7bfb      	ldrb	r3, [r7, #15]
}
 8006118:	4618      	mov	r0, r3
 800611a:	3714      	adds	r7, #20
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	460b      	mov	r3, r1
 800612e:	807b      	strh	r3, [r7, #2]
 8006130:	4613      	mov	r3, r2
 8006132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006134:	787b      	ldrb	r3, [r7, #1]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800613a:	887a      	ldrh	r2, [r7, #2]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006140:	e003      	b.n	800614a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006142:	887b      	ldrh	r3, [r7, #2]
 8006144:	041a      	lsls	r2, r3, #16
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	619a      	str	r2, [r3, #24]
}
 800614a:	bf00      	nop
 800614c:	370c      	adds	r7, #12
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
	...

08006158 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e12b      	b.n	80063c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d106      	bne.n	8006184 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7fe fc80 	bl	8004a84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2224      	movs	r2, #36	; 0x24
 8006188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f022 0201 	bic.w	r2, r2, #1
 800619a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80061bc:	f001 feca 	bl	8007f54 <HAL_RCC_GetPCLK1Freq>
 80061c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	4a81      	ldr	r2, [pc, #516]	; (80063cc <HAL_I2C_Init+0x274>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d807      	bhi.n	80061dc <HAL_I2C_Init+0x84>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	4a80      	ldr	r2, [pc, #512]	; (80063d0 <HAL_I2C_Init+0x278>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	bf94      	ite	ls
 80061d4:	2301      	movls	r3, #1
 80061d6:	2300      	movhi	r3, #0
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	e006      	b.n	80061ea <HAL_I2C_Init+0x92>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	4a7d      	ldr	r2, [pc, #500]	; (80063d4 <HAL_I2C_Init+0x27c>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	bf94      	ite	ls
 80061e4:	2301      	movls	r3, #1
 80061e6:	2300      	movhi	r3, #0
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d001      	beq.n	80061f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e0e7      	b.n	80063c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	4a78      	ldr	r2, [pc, #480]	; (80063d8 <HAL_I2C_Init+0x280>)
 80061f6:	fba2 2303 	umull	r2, r3, r2, r3
 80061fa:	0c9b      	lsrs	r3, r3, #18
 80061fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	430a      	orrs	r2, r1
 8006210:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	6a1b      	ldr	r3, [r3, #32]
 8006218:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	4a6a      	ldr	r2, [pc, #424]	; (80063cc <HAL_I2C_Init+0x274>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d802      	bhi.n	800622c <HAL_I2C_Init+0xd4>
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	3301      	adds	r3, #1
 800622a:	e009      	b.n	8006240 <HAL_I2C_Init+0xe8>
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006232:	fb02 f303 	mul.w	r3, r2, r3
 8006236:	4a69      	ldr	r2, [pc, #420]	; (80063dc <HAL_I2C_Init+0x284>)
 8006238:	fba2 2303 	umull	r2, r3, r2, r3
 800623c:	099b      	lsrs	r3, r3, #6
 800623e:	3301      	adds	r3, #1
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	6812      	ldr	r2, [r2, #0]
 8006244:	430b      	orrs	r3, r1
 8006246:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	69db      	ldr	r3, [r3, #28]
 800624e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006252:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	495c      	ldr	r1, [pc, #368]	; (80063cc <HAL_I2C_Init+0x274>)
 800625c:	428b      	cmp	r3, r1
 800625e:	d819      	bhi.n	8006294 <HAL_I2C_Init+0x13c>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	1e59      	subs	r1, r3, #1
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	005b      	lsls	r3, r3, #1
 800626a:	fbb1 f3f3 	udiv	r3, r1, r3
 800626e:	1c59      	adds	r1, r3, #1
 8006270:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006274:	400b      	ands	r3, r1
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00a      	beq.n	8006290 <HAL_I2C_Init+0x138>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	1e59      	subs	r1, r3, #1
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	005b      	lsls	r3, r3, #1
 8006284:	fbb1 f3f3 	udiv	r3, r1, r3
 8006288:	3301      	adds	r3, #1
 800628a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800628e:	e051      	b.n	8006334 <HAL_I2C_Init+0x1dc>
 8006290:	2304      	movs	r3, #4
 8006292:	e04f      	b.n	8006334 <HAL_I2C_Init+0x1dc>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d111      	bne.n	80062c0 <HAL_I2C_Init+0x168>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	1e58      	subs	r0, r3, #1
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6859      	ldr	r1, [r3, #4]
 80062a4:	460b      	mov	r3, r1
 80062a6:	005b      	lsls	r3, r3, #1
 80062a8:	440b      	add	r3, r1
 80062aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80062ae:	3301      	adds	r3, #1
 80062b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	bf0c      	ite	eq
 80062b8:	2301      	moveq	r3, #1
 80062ba:	2300      	movne	r3, #0
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	e012      	b.n	80062e6 <HAL_I2C_Init+0x18e>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	1e58      	subs	r0, r3, #1
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6859      	ldr	r1, [r3, #4]
 80062c8:	460b      	mov	r3, r1
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	440b      	add	r3, r1
 80062ce:	0099      	lsls	r1, r3, #2
 80062d0:	440b      	add	r3, r1
 80062d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80062d6:	3301      	adds	r3, #1
 80062d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062dc:	2b00      	cmp	r3, #0
 80062de:	bf0c      	ite	eq
 80062e0:	2301      	moveq	r3, #1
 80062e2:	2300      	movne	r3, #0
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d001      	beq.n	80062ee <HAL_I2C_Init+0x196>
 80062ea:	2301      	movs	r3, #1
 80062ec:	e022      	b.n	8006334 <HAL_I2C_Init+0x1dc>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10e      	bne.n	8006314 <HAL_I2C_Init+0x1bc>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	1e58      	subs	r0, r3, #1
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6859      	ldr	r1, [r3, #4]
 80062fe:	460b      	mov	r3, r1
 8006300:	005b      	lsls	r3, r3, #1
 8006302:	440b      	add	r3, r1
 8006304:	fbb0 f3f3 	udiv	r3, r0, r3
 8006308:	3301      	adds	r3, #1
 800630a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800630e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006312:	e00f      	b.n	8006334 <HAL_I2C_Init+0x1dc>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	1e58      	subs	r0, r3, #1
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6859      	ldr	r1, [r3, #4]
 800631c:	460b      	mov	r3, r1
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	440b      	add	r3, r1
 8006322:	0099      	lsls	r1, r3, #2
 8006324:	440b      	add	r3, r1
 8006326:	fbb0 f3f3 	udiv	r3, r0, r3
 800632a:	3301      	adds	r3, #1
 800632c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006330:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006334:	6879      	ldr	r1, [r7, #4]
 8006336:	6809      	ldr	r1, [r1, #0]
 8006338:	4313      	orrs	r3, r2
 800633a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	69da      	ldr	r2, [r3, #28]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	431a      	orrs	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	430a      	orrs	r2, r1
 8006356:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006362:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	6911      	ldr	r1, [r2, #16]
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	68d2      	ldr	r2, [r2, #12]
 800636e:	4311      	orrs	r1, r2
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	6812      	ldr	r2, [r2, #0]
 8006374:	430b      	orrs	r3, r1
 8006376:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	695a      	ldr	r2, [r3, #20]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	431a      	orrs	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	430a      	orrs	r2, r1
 8006392:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f042 0201 	orr.w	r2, r2, #1
 80063a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2220      	movs	r2, #32
 80063ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	000186a0 	.word	0x000186a0
 80063d0:	001e847f 	.word	0x001e847f
 80063d4:	003d08ff 	.word	0x003d08ff
 80063d8:	431bde83 	.word	0x431bde83
 80063dc:	10624dd3 	.word	0x10624dd3

080063e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b088      	sub	sp, #32
 80063e4:	af02      	add	r7, sp, #8
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	607a      	str	r2, [r7, #4]
 80063ea:	461a      	mov	r2, r3
 80063ec:	460b      	mov	r3, r1
 80063ee:	817b      	strh	r3, [r7, #10]
 80063f0:	4613      	mov	r3, r2
 80063f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80063f4:	f7ff fab0 	bl	8005958 <HAL_GetTick>
 80063f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b20      	cmp	r3, #32
 8006404:	f040 80e0 	bne.w	80065c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	9300      	str	r3, [sp, #0]
 800640c:	2319      	movs	r3, #25
 800640e:	2201      	movs	r2, #1
 8006410:	4970      	ldr	r1, [pc, #448]	; (80065d4 <HAL_I2C_Master_Transmit+0x1f4>)
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f000 ff16 	bl	8007244 <I2C_WaitOnFlagUntilTimeout>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d001      	beq.n	8006422 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800641e:	2302      	movs	r3, #2
 8006420:	e0d3      	b.n	80065ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006428:	2b01      	cmp	r3, #1
 800642a:	d101      	bne.n	8006430 <HAL_I2C_Master_Transmit+0x50>
 800642c:	2302      	movs	r3, #2
 800642e:	e0cc      	b.n	80065ca <HAL_I2C_Master_Transmit+0x1ea>
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	2b01      	cmp	r3, #1
 8006444:	d007      	beq.n	8006456 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f042 0201 	orr.w	r2, r2, #1
 8006454:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006464:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2221      	movs	r2, #33	; 0x21
 800646a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2210      	movs	r2, #16
 8006472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	893a      	ldrh	r2, [r7, #8]
 8006486:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800648c:	b29a      	uxth	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	4a50      	ldr	r2, [pc, #320]	; (80065d8 <HAL_I2C_Master_Transmit+0x1f8>)
 8006496:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006498:	8979      	ldrh	r1, [r7, #10]
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	6a3a      	ldr	r2, [r7, #32]
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f000 fcea 	bl	8006e78 <I2C_MasterRequestWrite>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d001      	beq.n	80064ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e08d      	b.n	80065ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064ae:	2300      	movs	r3, #0
 80064b0:	613b      	str	r3, [r7, #16]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	613b      	str	r3, [r7, #16]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	613b      	str	r3, [r7, #16]
 80064c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80064c4:	e066      	b.n	8006594 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	6a39      	ldr	r1, [r7, #32]
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f000 ff90 	bl	80073f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00d      	beq.n	80064f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064da:	2b04      	cmp	r3, #4
 80064dc:	d107      	bne.n	80064ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e06b      	b.n	80065ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f6:	781a      	ldrb	r2, [r3, #0]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006502:	1c5a      	adds	r2, r3, #1
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800650c:	b29b      	uxth	r3, r3
 800650e:	3b01      	subs	r3, #1
 8006510:	b29a      	uxth	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800651a:	3b01      	subs	r3, #1
 800651c:	b29a      	uxth	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	f003 0304 	and.w	r3, r3, #4
 800652c:	2b04      	cmp	r3, #4
 800652e:	d11b      	bne.n	8006568 <HAL_I2C_Master_Transmit+0x188>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006534:	2b00      	cmp	r3, #0
 8006536:	d017      	beq.n	8006568 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653c:	781a      	ldrb	r2, [r3, #0]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006548:	1c5a      	adds	r2, r3, #1
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006552:	b29b      	uxth	r3, r3
 8006554:	3b01      	subs	r3, #1
 8006556:	b29a      	uxth	r2, r3
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006560:	3b01      	subs	r3, #1
 8006562:	b29a      	uxth	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	6a39      	ldr	r1, [r7, #32]
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f000 ff80 	bl	8007472 <I2C_WaitOnBTFFlagUntilTimeout>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00d      	beq.n	8006594 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657c:	2b04      	cmp	r3, #4
 800657e:	d107      	bne.n	8006590 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800658e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e01a      	b.n	80065ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006598:	2b00      	cmp	r3, #0
 800659a:	d194      	bne.n	80064c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2220      	movs	r2, #32
 80065b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80065c4:	2300      	movs	r3, #0
 80065c6:	e000      	b.n	80065ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80065c8:	2302      	movs	r3, #2
  }
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3718      	adds	r7, #24
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	00100002 	.word	0x00100002
 80065d8:	ffff0000 	.word	0xffff0000

080065dc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b08c      	sub	sp, #48	; 0x30
 80065e0:	af02      	add	r7, sp, #8
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	607a      	str	r2, [r7, #4]
 80065e6:	461a      	mov	r2, r3
 80065e8:	460b      	mov	r3, r1
 80065ea:	817b      	strh	r3, [r7, #10]
 80065ec:	4613      	mov	r3, r2
 80065ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80065f0:	f7ff f9b2 	bl	8005958 <HAL_GetTick>
 80065f4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b20      	cmp	r3, #32
 8006600:	f040 820b 	bne.w	8006a1a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006606:	9300      	str	r3, [sp, #0]
 8006608:	2319      	movs	r3, #25
 800660a:	2201      	movs	r2, #1
 800660c:	497c      	ldr	r1, [pc, #496]	; (8006800 <HAL_I2C_Master_Receive+0x224>)
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f000 fe18 	bl	8007244 <I2C_WaitOnFlagUntilTimeout>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d001      	beq.n	800661e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800661a:	2302      	movs	r3, #2
 800661c:	e1fe      	b.n	8006a1c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006624:	2b01      	cmp	r3, #1
 8006626:	d101      	bne.n	800662c <HAL_I2C_Master_Receive+0x50>
 8006628:	2302      	movs	r3, #2
 800662a:	e1f7      	b.n	8006a1c <HAL_I2C_Master_Receive+0x440>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b01      	cmp	r3, #1
 8006640:	d007      	beq.n	8006652 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f042 0201 	orr.w	r2, r2, #1
 8006650:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006660:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2222      	movs	r2, #34	; 0x22
 8006666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2210      	movs	r2, #16
 800666e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	893a      	ldrh	r2, [r7, #8]
 8006682:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006688:	b29a      	uxth	r2, r3
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	4a5c      	ldr	r2, [pc, #368]	; (8006804 <HAL_I2C_Master_Receive+0x228>)
 8006692:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006694:	8979      	ldrh	r1, [r7, #10]
 8006696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f000 fc6e 	bl	8006f7c <I2C_MasterRequestRead>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d001      	beq.n	80066aa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e1b8      	b.n	8006a1c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d113      	bne.n	80066da <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066b2:	2300      	movs	r3, #0
 80066b4:	623b      	str	r3, [r7, #32]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	695b      	ldr	r3, [r3, #20]
 80066bc:	623b      	str	r3, [r7, #32]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	623b      	str	r3, [r7, #32]
 80066c6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066d6:	601a      	str	r2, [r3, #0]
 80066d8:	e18c      	b.n	80069f4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d11b      	bne.n	800671a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066f2:	2300      	movs	r3, #0
 80066f4:	61fb      	str	r3, [r7, #28]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	695b      	ldr	r3, [r3, #20]
 80066fc:	61fb      	str	r3, [r7, #28]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	699b      	ldr	r3, [r3, #24]
 8006704:	61fb      	str	r3, [r7, #28]
 8006706:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006716:	601a      	str	r2, [r3, #0]
 8006718:	e16c      	b.n	80069f4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800671e:	2b02      	cmp	r3, #2
 8006720:	d11b      	bne.n	800675a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006730:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006740:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006742:	2300      	movs	r3, #0
 8006744:	61bb      	str	r3, [r7, #24]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	61bb      	str	r3, [r7, #24]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	61bb      	str	r3, [r7, #24]
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	e14c      	b.n	80069f4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006768:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800676a:	2300      	movs	r3, #0
 800676c:	617b      	str	r3, [r7, #20]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	695b      	ldr	r3, [r3, #20]
 8006774:	617b      	str	r3, [r7, #20]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	699b      	ldr	r3, [r3, #24]
 800677c:	617b      	str	r3, [r7, #20]
 800677e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006780:	e138      	b.n	80069f4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006786:	2b03      	cmp	r3, #3
 8006788:	f200 80f1 	bhi.w	800696e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006790:	2b01      	cmp	r3, #1
 8006792:	d123      	bne.n	80067dc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006796:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f000 feab 	bl	80074f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d001      	beq.n	80067a8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e139      	b.n	8006a1c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	691a      	ldr	r2, [r3, #16]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b2:	b2d2      	uxtb	r2, r2
 80067b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ba:	1c5a      	adds	r2, r3, #1
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067c4:	3b01      	subs	r3, #1
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	3b01      	subs	r3, #1
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80067da:	e10b      	b.n	80069f4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d14e      	bne.n	8006882 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e6:	9300      	str	r3, [sp, #0]
 80067e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ea:	2200      	movs	r2, #0
 80067ec:	4906      	ldr	r1, [pc, #24]	; (8006808 <HAL_I2C_Master_Receive+0x22c>)
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f000 fd28 	bl	8007244 <I2C_WaitOnFlagUntilTimeout>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d008      	beq.n	800680c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e10e      	b.n	8006a1c <HAL_I2C_Master_Receive+0x440>
 80067fe:	bf00      	nop
 8006800:	00100002 	.word	0x00100002
 8006804:	ffff0000 	.word	0xffff0000
 8006808:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800681a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	691a      	ldr	r2, [r3, #16]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006826:	b2d2      	uxtb	r2, r2
 8006828:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682e:	1c5a      	adds	r2, r3, #1
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006838:	3b01      	subs	r3, #1
 800683a:	b29a      	uxth	r2, r3
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006844:	b29b      	uxth	r3, r3
 8006846:	3b01      	subs	r3, #1
 8006848:	b29a      	uxth	r2, r3
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	691a      	ldr	r2, [r3, #16]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	b2d2      	uxtb	r2, r2
 800685a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006860:	1c5a      	adds	r2, r3, #1
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800686a:	3b01      	subs	r3, #1
 800686c:	b29a      	uxth	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006876:	b29b      	uxth	r3, r3
 8006878:	3b01      	subs	r3, #1
 800687a:	b29a      	uxth	r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006880:	e0b8      	b.n	80069f4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006888:	2200      	movs	r2, #0
 800688a:	4966      	ldr	r1, [pc, #408]	; (8006a24 <HAL_I2C_Master_Receive+0x448>)
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f000 fcd9 	bl	8007244 <I2C_WaitOnFlagUntilTimeout>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d001      	beq.n	800689c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e0bf      	b.n	8006a1c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	691a      	ldr	r2, [r3, #16]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b6:	b2d2      	uxtb	r2, r2
 80068b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068be:	1c5a      	adds	r2, r3, #1
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068c8:	3b01      	subs	r3, #1
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	3b01      	subs	r3, #1
 80068d8:	b29a      	uxth	r2, r3
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	9300      	str	r3, [sp, #0]
 80068e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e4:	2200      	movs	r2, #0
 80068e6:	494f      	ldr	r1, [pc, #316]	; (8006a24 <HAL_I2C_Master_Receive+0x448>)
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f000 fcab 	bl	8007244 <I2C_WaitOnFlagUntilTimeout>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d001      	beq.n	80068f8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	e091      	b.n	8006a1c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006906:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	691a      	ldr	r2, [r3, #16]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006912:	b2d2      	uxtb	r2, r2
 8006914:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691a:	1c5a      	adds	r2, r3, #1
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006924:	3b01      	subs	r3, #1
 8006926:	b29a      	uxth	r2, r3
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006930:	b29b      	uxth	r3, r3
 8006932:	3b01      	subs	r3, #1
 8006934:	b29a      	uxth	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	691a      	ldr	r2, [r3, #16]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006944:	b2d2      	uxtb	r2, r2
 8006946:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694c:	1c5a      	adds	r2, r3, #1
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006956:	3b01      	subs	r3, #1
 8006958:	b29a      	uxth	r2, r3
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006962:	b29b      	uxth	r3, r3
 8006964:	3b01      	subs	r3, #1
 8006966:	b29a      	uxth	r2, r3
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800696c:	e042      	b.n	80069f4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800696e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006970:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f000 fdbe 	bl	80074f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d001      	beq.n	8006982 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e04c      	b.n	8006a1c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	691a      	ldr	r2, [r3, #16]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698c:	b2d2      	uxtb	r2, r2
 800698e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006994:	1c5a      	adds	r2, r3, #1
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800699e:	3b01      	subs	r3, #1
 80069a0:	b29a      	uxth	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	3b01      	subs	r3, #1
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	f003 0304 	and.w	r3, r3, #4
 80069be:	2b04      	cmp	r3, #4
 80069c0:	d118      	bne.n	80069f4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	691a      	ldr	r2, [r3, #16]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069cc:	b2d2      	uxtb	r2, r2
 80069ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d4:	1c5a      	adds	r2, r3, #1
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069de:	3b01      	subs	r3, #1
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	3b01      	subs	r3, #1
 80069ee:	b29a      	uxth	r2, r3
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f47f aec2 	bne.w	8006782 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2220      	movs	r2, #32
 8006a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006a16:	2300      	movs	r3, #0
 8006a18:	e000      	b.n	8006a1c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006a1a:	2302      	movs	r3, #2
  }
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3728      	adds	r7, #40	; 0x28
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	00010004 	.word	0x00010004

08006a28 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b088      	sub	sp, #32
 8006a2c:	af02      	add	r7, sp, #8
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	4608      	mov	r0, r1
 8006a32:	4611      	mov	r1, r2
 8006a34:	461a      	mov	r2, r3
 8006a36:	4603      	mov	r3, r0
 8006a38:	817b      	strh	r3, [r7, #10]
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	813b      	strh	r3, [r7, #8]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a42:	f7fe ff89 	bl	8005958 <HAL_GetTick>
 8006a46:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	2b20      	cmp	r3, #32
 8006a52:	f040 80d9 	bne.w	8006c08 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	9300      	str	r3, [sp, #0]
 8006a5a:	2319      	movs	r3, #25
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	496d      	ldr	r1, [pc, #436]	; (8006c14 <HAL_I2C_Mem_Write+0x1ec>)
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f000 fbef 	bl	8007244 <I2C_WaitOnFlagUntilTimeout>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d001      	beq.n	8006a70 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	e0cc      	b.n	8006c0a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d101      	bne.n	8006a7e <HAL_I2C_Mem_Write+0x56>
 8006a7a:	2302      	movs	r3, #2
 8006a7c:	e0c5      	b.n	8006c0a <HAL_I2C_Mem_Write+0x1e2>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2201      	movs	r2, #1
 8006a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 0301 	and.w	r3, r3, #1
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d007      	beq.n	8006aa4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f042 0201 	orr.w	r2, r2, #1
 8006aa2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ab2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2221      	movs	r2, #33	; 0x21
 8006ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2240      	movs	r2, #64	; 0x40
 8006ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6a3a      	ldr	r2, [r7, #32]
 8006ace:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006ad4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	4a4d      	ldr	r2, [pc, #308]	; (8006c18 <HAL_I2C_Mem_Write+0x1f0>)
 8006ae4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006ae6:	88f8      	ldrh	r0, [r7, #6]
 8006ae8:	893a      	ldrh	r2, [r7, #8]
 8006aea:	8979      	ldrh	r1, [r7, #10]
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	9301      	str	r3, [sp, #4]
 8006af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af2:	9300      	str	r3, [sp, #0]
 8006af4:	4603      	mov	r3, r0
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f000 fb0e 	bl	8007118 <I2C_RequestMemoryWrite>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d052      	beq.n	8006ba8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e081      	b.n	8006c0a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f000 fc70 	bl	80073f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00d      	beq.n	8006b32 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1a:	2b04      	cmp	r3, #4
 8006b1c:	d107      	bne.n	8006b2e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e06b      	b.n	8006c0a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b36:	781a      	ldrb	r2, [r3, #0]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b42:	1c5a      	adds	r2, r3, #1
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	695b      	ldr	r3, [r3, #20]
 8006b68:	f003 0304 	and.w	r3, r3, #4
 8006b6c:	2b04      	cmp	r3, #4
 8006b6e:	d11b      	bne.n	8006ba8 <HAL_I2C_Mem_Write+0x180>
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d017      	beq.n	8006ba8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7c:	781a      	ldrb	r2, [r3, #0]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b88:	1c5a      	adds	r2, r3, #1
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b92:	3b01      	subs	r3, #1
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1aa      	bne.n	8006b06 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f000 fc5c 	bl	8007472 <I2C_WaitOnBTFFlagUntilTimeout>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00d      	beq.n	8006bdc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc4:	2b04      	cmp	r3, #4
 8006bc6:	d107      	bne.n	8006bd8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bd6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e016      	b.n	8006c0a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2220      	movs	r2, #32
 8006bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006c04:	2300      	movs	r3, #0
 8006c06:	e000      	b.n	8006c0a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006c08:	2302      	movs	r3, #2
  }
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3718      	adds	r7, #24
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	00100002 	.word	0x00100002
 8006c18:	ffff0000 	.word	0xffff0000

08006c1c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b08a      	sub	sp, #40	; 0x28
 8006c20:	af02      	add	r7, sp, #8
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	607a      	str	r2, [r7, #4]
 8006c26:	603b      	str	r3, [r7, #0]
 8006c28:	460b      	mov	r3, r1
 8006c2a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006c2c:	f7fe fe94 	bl	8005958 <HAL_GetTick>
 8006c30:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8006c32:	2300      	movs	r3, #0
 8006c34:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b20      	cmp	r3, #32
 8006c40:	f040 8111 	bne.w	8006e66 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	9300      	str	r3, [sp, #0]
 8006c48:	2319      	movs	r3, #25
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	4988      	ldr	r1, [pc, #544]	; (8006e70 <HAL_I2C_IsDeviceReady+0x254>)
 8006c4e:	68f8      	ldr	r0, [r7, #12]
 8006c50:	f000 faf8 	bl	8007244 <I2C_WaitOnFlagUntilTimeout>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d001      	beq.n	8006c5e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006c5a:	2302      	movs	r3, #2
 8006c5c:	e104      	b.n	8006e68 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d101      	bne.n	8006c6c <HAL_I2C_IsDeviceReady+0x50>
 8006c68:	2302      	movs	r3, #2
 8006c6a:	e0fd      	b.n	8006e68 <HAL_I2C_IsDeviceReady+0x24c>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0301 	and.w	r3, r3, #1
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d007      	beq.n	8006c92 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f042 0201 	orr.w	r2, r2, #1
 8006c90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ca0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2224      	movs	r2, #36	; 0x24
 8006ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	4a70      	ldr	r2, [pc, #448]	; (8006e74 <HAL_I2C_IsDeviceReady+0x258>)
 8006cb4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cc4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	9300      	str	r3, [sp, #0]
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006cd2:	68f8      	ldr	r0, [r7, #12]
 8006cd4:	f000 fab6 	bl	8007244 <I2C_WaitOnFlagUntilTimeout>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00d      	beq.n	8006cfa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cec:	d103      	bne.n	8006cf6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cf4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e0b6      	b.n	8006e68 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006cfa:	897b      	ldrh	r3, [r7, #10]
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	461a      	mov	r2, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006d08:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006d0a:	f7fe fe25 	bl	8005958 <HAL_GetTick>
 8006d0e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	f003 0302 	and.w	r3, r3, #2
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	bf0c      	ite	eq
 8006d1e:	2301      	moveq	r3, #1
 8006d20:	2300      	movne	r3, #0
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	695b      	ldr	r3, [r3, #20]
 8006d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d34:	bf0c      	ite	eq
 8006d36:	2301      	moveq	r3, #1
 8006d38:	2300      	movne	r3, #0
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006d3e:	e025      	b.n	8006d8c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006d40:	f7fe fe0a 	bl	8005958 <HAL_GetTick>
 8006d44:	4602      	mov	r2, r0
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	683a      	ldr	r2, [r7, #0]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d302      	bcc.n	8006d56 <HAL_I2C_IsDeviceReady+0x13a>
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d103      	bne.n	8006d5e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	22a0      	movs	r2, #160	; 0xa0
 8006d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	695b      	ldr	r3, [r3, #20]
 8006d64:	f003 0302 	and.w	r3, r3, #2
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	bf0c      	ite	eq
 8006d6c:	2301      	moveq	r3, #1
 8006d6e:	2300      	movne	r3, #0
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d82:	bf0c      	ite	eq
 8006d84:	2301      	moveq	r3, #1
 8006d86:	2300      	movne	r3, #0
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	2ba0      	cmp	r3, #160	; 0xa0
 8006d96:	d005      	beq.n	8006da4 <HAL_I2C_IsDeviceReady+0x188>
 8006d98:	7dfb      	ldrb	r3, [r7, #23]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d102      	bne.n	8006da4 <HAL_I2C_IsDeviceReady+0x188>
 8006d9e:	7dbb      	ldrb	r3, [r7, #22]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d0cd      	beq.n	8006d40 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2220      	movs	r2, #32
 8006da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	695b      	ldr	r3, [r3, #20]
 8006db2:	f003 0302 	and.w	r3, r3, #2
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d129      	bne.n	8006e0e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dc8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dca:	2300      	movs	r3, #0
 8006dcc:	613b      	str	r3, [r7, #16]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	695b      	ldr	r3, [r3, #20]
 8006dd4:	613b      	str	r3, [r7, #16]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	613b      	str	r3, [r7, #16]
 8006dde:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	9300      	str	r3, [sp, #0]
 8006de4:	2319      	movs	r3, #25
 8006de6:	2201      	movs	r2, #1
 8006de8:	4921      	ldr	r1, [pc, #132]	; (8006e70 <HAL_I2C_IsDeviceReady+0x254>)
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f000 fa2a 	bl	8007244 <I2C_WaitOnFlagUntilTimeout>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d001      	beq.n	8006dfa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e036      	b.n	8006e68 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2220      	movs	r2, #32
 8006dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	e02c      	b.n	8006e68 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e1c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e26:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	9300      	str	r3, [sp, #0]
 8006e2c:	2319      	movs	r3, #25
 8006e2e:	2201      	movs	r2, #1
 8006e30:	490f      	ldr	r1, [pc, #60]	; (8006e70 <HAL_I2C_IsDeviceReady+0x254>)
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	f000 fa06 	bl	8007244 <I2C_WaitOnFlagUntilTimeout>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d001      	beq.n	8006e42 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e012      	b.n	8006e68 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	3301      	adds	r3, #1
 8006e46:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006e48:	69ba      	ldr	r2, [r7, #24]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	f4ff af32 	bcc.w	8006cb6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2220      	movs	r2, #32
 8006e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	e000      	b.n	8006e68 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006e66:	2302      	movs	r3, #2
  }
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3720      	adds	r7, #32
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	00100002 	.word	0x00100002
 8006e74:	ffff0000 	.word	0xffff0000

08006e78 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b088      	sub	sp, #32
 8006e7c:	af02      	add	r7, sp, #8
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	607a      	str	r2, [r7, #4]
 8006e82:	603b      	str	r3, [r7, #0]
 8006e84:	460b      	mov	r3, r1
 8006e86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	2b08      	cmp	r3, #8
 8006e92:	d006      	beq.n	8006ea2 <I2C_MasterRequestWrite+0x2a>
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d003      	beq.n	8006ea2 <I2C_MasterRequestWrite+0x2a>
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006ea0:	d108      	bne.n	8006eb4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006eb0:	601a      	str	r2, [r3, #0]
 8006eb2:	e00b      	b.n	8006ecc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb8:	2b12      	cmp	r3, #18
 8006eba:	d107      	bne.n	8006ecc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006eca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f000 f9b3 	bl	8007244 <I2C_WaitOnFlagUntilTimeout>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00d      	beq.n	8006f00 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ef2:	d103      	bne.n	8006efc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006efa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006efc:	2303      	movs	r3, #3
 8006efe:	e035      	b.n	8006f6c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f08:	d108      	bne.n	8006f1c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f0a:	897b      	ldrh	r3, [r7, #10]
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	461a      	mov	r2, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006f18:	611a      	str	r2, [r3, #16]
 8006f1a:	e01b      	b.n	8006f54 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006f1c:	897b      	ldrh	r3, [r7, #10]
 8006f1e:	11db      	asrs	r3, r3, #7
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	f003 0306 	and.w	r3, r3, #6
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	f063 030f 	orn	r3, r3, #15
 8006f2c:	b2da      	uxtb	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	490e      	ldr	r1, [pc, #56]	; (8006f74 <I2C_MasterRequestWrite+0xfc>)
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f000 f9d9 	bl	80072f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d001      	beq.n	8006f4a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e010      	b.n	8006f6c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006f4a:	897b      	ldrh	r3, [r7, #10]
 8006f4c:	b2da      	uxtb	r2, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	4907      	ldr	r1, [pc, #28]	; (8006f78 <I2C_MasterRequestWrite+0x100>)
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f000 f9c9 	bl	80072f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d001      	beq.n	8006f6a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e000      	b.n	8006f6c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3718      	adds	r7, #24
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	00010008 	.word	0x00010008
 8006f78:	00010002 	.word	0x00010002

08006f7c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b088      	sub	sp, #32
 8006f80:	af02      	add	r7, sp, #8
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	607a      	str	r2, [r7, #4]
 8006f86:	603b      	str	r3, [r7, #0]
 8006f88:	460b      	mov	r3, r1
 8006f8a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f90:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006fa0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	2b08      	cmp	r3, #8
 8006fa6:	d006      	beq.n	8006fb6 <I2C_MasterRequestRead+0x3a>
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d003      	beq.n	8006fb6 <I2C_MasterRequestRead+0x3a>
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006fb4:	d108      	bne.n	8006fc8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fc4:	601a      	str	r2, [r3, #0]
 8006fc6:	e00b      	b.n	8006fe0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fcc:	2b11      	cmp	r3, #17
 8006fce:	d107      	bne.n	8006fe0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fde:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	9300      	str	r3, [sp, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f000 f929 	bl	8007244 <I2C_WaitOnFlagUntilTimeout>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d00d      	beq.n	8007014 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007006:	d103      	bne.n	8007010 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800700e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007010:	2303      	movs	r3, #3
 8007012:	e079      	b.n	8007108 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800701c:	d108      	bne.n	8007030 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800701e:	897b      	ldrh	r3, [r7, #10]
 8007020:	b2db      	uxtb	r3, r3
 8007022:	f043 0301 	orr.w	r3, r3, #1
 8007026:	b2da      	uxtb	r2, r3
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	611a      	str	r2, [r3, #16]
 800702e:	e05f      	b.n	80070f0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007030:	897b      	ldrh	r3, [r7, #10]
 8007032:	11db      	asrs	r3, r3, #7
 8007034:	b2db      	uxtb	r3, r3
 8007036:	f003 0306 	and.w	r3, r3, #6
 800703a:	b2db      	uxtb	r3, r3
 800703c:	f063 030f 	orn	r3, r3, #15
 8007040:	b2da      	uxtb	r2, r3
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	4930      	ldr	r1, [pc, #192]	; (8007110 <I2C_MasterRequestRead+0x194>)
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f000 f94f 	bl	80072f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d001      	beq.n	800705e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e054      	b.n	8007108 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800705e:	897b      	ldrh	r3, [r7, #10]
 8007060:	b2da      	uxtb	r2, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	4929      	ldr	r1, [pc, #164]	; (8007114 <I2C_MasterRequestRead+0x198>)
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f000 f93f 	bl	80072f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d001      	beq.n	800707e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e044      	b.n	8007108 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800707e:	2300      	movs	r3, #0
 8007080:	613b      	str	r3, [r7, #16]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	695b      	ldr	r3, [r3, #20]
 8007088:	613b      	str	r3, [r7, #16]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	613b      	str	r3, [r7, #16]
 8007092:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070a2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	9300      	str	r3, [sp, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f000 f8c7 	bl	8007244 <I2C_WaitOnFlagUntilTimeout>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00d      	beq.n	80070d8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070ca:	d103      	bne.n	80070d4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070d2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80070d4:	2303      	movs	r3, #3
 80070d6:	e017      	b.n	8007108 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80070d8:	897b      	ldrh	r3, [r7, #10]
 80070da:	11db      	asrs	r3, r3, #7
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	f003 0306 	and.w	r3, r3, #6
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	f063 030e 	orn	r3, r3, #14
 80070e8:	b2da      	uxtb	r2, r3
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	4907      	ldr	r1, [pc, #28]	; (8007114 <I2C_MasterRequestRead+0x198>)
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f000 f8fb 	bl	80072f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d001      	beq.n	8007106 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e000      	b.n	8007108 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3718      	adds	r7, #24
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	00010008 	.word	0x00010008
 8007114:	00010002 	.word	0x00010002

08007118 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b088      	sub	sp, #32
 800711c:	af02      	add	r7, sp, #8
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	4608      	mov	r0, r1
 8007122:	4611      	mov	r1, r2
 8007124:	461a      	mov	r2, r3
 8007126:	4603      	mov	r3, r0
 8007128:	817b      	strh	r3, [r7, #10]
 800712a:	460b      	mov	r3, r1
 800712c:	813b      	strh	r3, [r7, #8]
 800712e:	4613      	mov	r3, r2
 8007130:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007140:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	6a3b      	ldr	r3, [r7, #32]
 8007148:	2200      	movs	r2, #0
 800714a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800714e:	68f8      	ldr	r0, [r7, #12]
 8007150:	f000 f878 	bl	8007244 <I2C_WaitOnFlagUntilTimeout>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00d      	beq.n	8007176 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007168:	d103      	bne.n	8007172 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007170:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	e05f      	b.n	8007236 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007176:	897b      	ldrh	r3, [r7, #10]
 8007178:	b2db      	uxtb	r3, r3
 800717a:	461a      	mov	r2, r3
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007184:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007188:	6a3a      	ldr	r2, [r7, #32]
 800718a:	492d      	ldr	r1, [pc, #180]	; (8007240 <I2C_RequestMemoryWrite+0x128>)
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	f000 f8b0 	bl	80072f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d001      	beq.n	800719c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e04c      	b.n	8007236 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800719c:	2300      	movs	r3, #0
 800719e:	617b      	str	r3, [r7, #20]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	617b      	str	r3, [r7, #20]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	617b      	str	r3, [r7, #20]
 80071b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071b4:	6a39      	ldr	r1, [r7, #32]
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f000 f91a 	bl	80073f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00d      	beq.n	80071de <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c6:	2b04      	cmp	r3, #4
 80071c8:	d107      	bne.n	80071da <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	e02b      	b.n	8007236 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80071de:	88fb      	ldrh	r3, [r7, #6]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d105      	bne.n	80071f0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80071e4:	893b      	ldrh	r3, [r7, #8]
 80071e6:	b2da      	uxtb	r2, r3
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	611a      	str	r2, [r3, #16]
 80071ee:	e021      	b.n	8007234 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80071f0:	893b      	ldrh	r3, [r7, #8]
 80071f2:	0a1b      	lsrs	r3, r3, #8
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	b2da      	uxtb	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007200:	6a39      	ldr	r1, [r7, #32]
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f000 f8f4 	bl	80073f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00d      	beq.n	800722a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007212:	2b04      	cmp	r3, #4
 8007214:	d107      	bne.n	8007226 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007224:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e005      	b.n	8007236 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800722a:	893b      	ldrh	r3, [r7, #8]
 800722c:	b2da      	uxtb	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3718      	adds	r7, #24
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	00010002 	.word	0x00010002

08007244 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	603b      	str	r3, [r7, #0]
 8007250:	4613      	mov	r3, r2
 8007252:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007254:	e025      	b.n	80072a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800725c:	d021      	beq.n	80072a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800725e:	f7fe fb7b 	bl	8005958 <HAL_GetTick>
 8007262:	4602      	mov	r2, r0
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	683a      	ldr	r2, [r7, #0]
 800726a:	429a      	cmp	r2, r3
 800726c:	d302      	bcc.n	8007274 <I2C_WaitOnFlagUntilTimeout+0x30>
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d116      	bne.n	80072a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2200      	movs	r2, #0
 8007278:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2220      	movs	r2, #32
 800727e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728e:	f043 0220 	orr.w	r2, r3, #32
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e023      	b.n	80072ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	0c1b      	lsrs	r3, r3, #16
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d10d      	bne.n	80072c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	695b      	ldr	r3, [r3, #20]
 80072b2:	43da      	mvns	r2, r3
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	4013      	ands	r3, r2
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	bf0c      	ite	eq
 80072be:	2301      	moveq	r3, #1
 80072c0:	2300      	movne	r3, #0
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	461a      	mov	r2, r3
 80072c6:	e00c      	b.n	80072e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	43da      	mvns	r2, r3
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	4013      	ands	r3, r2
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	bf0c      	ite	eq
 80072da:	2301      	moveq	r3, #1
 80072dc:	2300      	movne	r3, #0
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	461a      	mov	r2, r3
 80072e2:	79fb      	ldrb	r3, [r7, #7]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d0b6      	beq.n	8007256 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b084      	sub	sp, #16
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	60f8      	str	r0, [r7, #12]
 80072fa:	60b9      	str	r1, [r7, #8]
 80072fc:	607a      	str	r2, [r7, #4]
 80072fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007300:	e051      	b.n	80073a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	695b      	ldr	r3, [r3, #20]
 8007308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800730c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007310:	d123      	bne.n	800735a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007320:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800732a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2200      	movs	r2, #0
 8007330:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2220      	movs	r2, #32
 8007336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007346:	f043 0204 	orr.w	r2, r3, #4
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e046      	b.n	80073e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007360:	d021      	beq.n	80073a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007362:	f7fe faf9 	bl	8005958 <HAL_GetTick>
 8007366:	4602      	mov	r2, r0
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	429a      	cmp	r2, r3
 8007370:	d302      	bcc.n	8007378 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d116      	bne.n	80073a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2200      	movs	r2, #0
 800737c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2220      	movs	r2, #32
 8007382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007392:	f043 0220 	orr.w	r2, r3, #32
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e020      	b.n	80073e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	0c1b      	lsrs	r3, r3, #16
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d10c      	bne.n	80073ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	695b      	ldr	r3, [r3, #20]
 80073b6:	43da      	mvns	r2, r3
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	4013      	ands	r3, r2
 80073bc:	b29b      	uxth	r3, r3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	bf14      	ite	ne
 80073c2:	2301      	movne	r3, #1
 80073c4:	2300      	moveq	r3, #0
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	e00b      	b.n	80073e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	699b      	ldr	r3, [r3, #24]
 80073d0:	43da      	mvns	r2, r3
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	4013      	ands	r3, r2
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	2b00      	cmp	r3, #0
 80073da:	bf14      	ite	ne
 80073dc:	2301      	movne	r3, #1
 80073de:	2300      	moveq	r3, #0
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d18d      	bne.n	8007302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3710      	adds	r7, #16
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80073fc:	e02d      	b.n	800745a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f000 f8ce 	bl	80075a0 <I2C_IsAcknowledgeFailed>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d001      	beq.n	800740e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e02d      	b.n	800746a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007414:	d021      	beq.n	800745a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007416:	f7fe fa9f 	bl	8005958 <HAL_GetTick>
 800741a:	4602      	mov	r2, r0
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	68ba      	ldr	r2, [r7, #8]
 8007422:	429a      	cmp	r2, r3
 8007424:	d302      	bcc.n	800742c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d116      	bne.n	800745a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2200      	movs	r2, #0
 8007430:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2220      	movs	r2, #32
 8007436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007446:	f043 0220 	orr.w	r2, r3, #32
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e007      	b.n	800746a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	695b      	ldr	r3, [r3, #20]
 8007460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007464:	2b80      	cmp	r3, #128	; 0x80
 8007466:	d1ca      	bne.n	80073fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b084      	sub	sp, #16
 8007476:	af00      	add	r7, sp, #0
 8007478:	60f8      	str	r0, [r7, #12]
 800747a:	60b9      	str	r1, [r7, #8]
 800747c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800747e:	e02d      	b.n	80074dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f000 f88d 	bl	80075a0 <I2C_IsAcknowledgeFailed>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d001      	beq.n	8007490 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	e02d      	b.n	80074ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007496:	d021      	beq.n	80074dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007498:	f7fe fa5e 	bl	8005958 <HAL_GetTick>
 800749c:	4602      	mov	r2, r0
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d302      	bcc.n	80074ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d116      	bne.n	80074dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2200      	movs	r2, #0
 80074b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2220      	movs	r2, #32
 80074b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c8:	f043 0220 	orr.w	r2, r3, #32
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e007      	b.n	80074ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	695b      	ldr	r3, [r3, #20]
 80074e2:	f003 0304 	and.w	r3, r3, #4
 80074e6:	2b04      	cmp	r3, #4
 80074e8:	d1ca      	bne.n	8007480 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007500:	e042      	b.n	8007588 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	695b      	ldr	r3, [r3, #20]
 8007508:	f003 0310 	and.w	r3, r3, #16
 800750c:	2b10      	cmp	r3, #16
 800750e:	d119      	bne.n	8007544 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f06f 0210 	mvn.w	r2, #16
 8007518:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2200      	movs	r2, #0
 800751e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2220      	movs	r2, #32
 8007524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	e029      	b.n	8007598 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007544:	f7fe fa08 	bl	8005958 <HAL_GetTick>
 8007548:	4602      	mov	r2, r0
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	68ba      	ldr	r2, [r7, #8]
 8007550:	429a      	cmp	r2, r3
 8007552:	d302      	bcc.n	800755a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d116      	bne.n	8007588 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2220      	movs	r2, #32
 8007564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007574:	f043 0220 	orr.w	r2, r3, #32
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	e007      	b.n	8007598 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	695b      	ldr	r3, [r3, #20]
 800758e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007592:	2b40      	cmp	r3, #64	; 0x40
 8007594:	d1b5      	bne.n	8007502 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075b6:	d11b      	bne.n	80075f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80075c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2220      	movs	r2, #32
 80075cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075dc:	f043 0204 	orr.w	r2, r3, #4
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	e000      	b.n	80075f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	370c      	adds	r7, #12
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr

080075fe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80075fe:	b480      	push	{r7}
 8007600:	b083      	sub	sp, #12
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
 8007606:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800760e:	b2db      	uxtb	r3, r3
 8007610:	2b20      	cmp	r3, #32
 8007612:	d129      	bne.n	8007668 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2224      	movs	r2, #36	; 0x24
 8007618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f022 0201 	bic.w	r2, r2, #1
 800762a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f022 0210 	bic.w	r2, r2, #16
 800763a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	683a      	ldr	r2, [r7, #0]
 8007648:	430a      	orrs	r2, r1
 800764a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f042 0201 	orr.w	r2, r2, #1
 800765a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2220      	movs	r2, #32
 8007660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007664:	2300      	movs	r3, #0
 8007666:	e000      	b.n	800766a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8007668:	2302      	movs	r3, #2
  }
}
 800766a:	4618      	mov	r0, r3
 800766c:	370c      	adds	r7, #12
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr

08007676 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007676:	b480      	push	{r7}
 8007678:	b085      	sub	sp, #20
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
 800767e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8007680:	2300      	movs	r3, #0
 8007682:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800768a:	b2db      	uxtb	r3, r3
 800768c:	2b20      	cmp	r3, #32
 800768e:	d12a      	bne.n	80076e6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2224      	movs	r2, #36	; 0x24
 8007694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f022 0201 	bic.w	r2, r2, #1
 80076a6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ae:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80076b0:	89fb      	ldrh	r3, [r7, #14]
 80076b2:	f023 030f 	bic.w	r3, r3, #15
 80076b6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	b29a      	uxth	r2, r3
 80076bc:	89fb      	ldrh	r3, [r7, #14]
 80076be:	4313      	orrs	r3, r2
 80076c0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	89fa      	ldrh	r2, [r7, #14]
 80076c8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f042 0201 	orr.w	r2, r2, #1
 80076d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2220      	movs	r2, #32
 80076de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80076e2:	2300      	movs	r3, #0
 80076e4:	e000      	b.n	80076e8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80076e6:	2302      	movs	r3, #2
  }
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3714      	adds	r7, #20
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b086      	sub	sp, #24
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d101      	bne.n	8007706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e267      	b.n	8007bd6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 0301 	and.w	r3, r3, #1
 800770e:	2b00      	cmp	r3, #0
 8007710:	d075      	beq.n	80077fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007712:	4b88      	ldr	r3, [pc, #544]	; (8007934 <HAL_RCC_OscConfig+0x240>)
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	f003 030c 	and.w	r3, r3, #12
 800771a:	2b04      	cmp	r3, #4
 800771c:	d00c      	beq.n	8007738 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800771e:	4b85      	ldr	r3, [pc, #532]	; (8007934 <HAL_RCC_OscConfig+0x240>)
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007726:	2b08      	cmp	r3, #8
 8007728:	d112      	bne.n	8007750 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800772a:	4b82      	ldr	r3, [pc, #520]	; (8007934 <HAL_RCC_OscConfig+0x240>)
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007732:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007736:	d10b      	bne.n	8007750 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007738:	4b7e      	ldr	r3, [pc, #504]	; (8007934 <HAL_RCC_OscConfig+0x240>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007740:	2b00      	cmp	r3, #0
 8007742:	d05b      	beq.n	80077fc <HAL_RCC_OscConfig+0x108>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d157      	bne.n	80077fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	e242      	b.n	8007bd6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007758:	d106      	bne.n	8007768 <HAL_RCC_OscConfig+0x74>
 800775a:	4b76      	ldr	r3, [pc, #472]	; (8007934 <HAL_RCC_OscConfig+0x240>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a75      	ldr	r2, [pc, #468]	; (8007934 <HAL_RCC_OscConfig+0x240>)
 8007760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007764:	6013      	str	r3, [r2, #0]
 8007766:	e01d      	b.n	80077a4 <HAL_RCC_OscConfig+0xb0>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007770:	d10c      	bne.n	800778c <HAL_RCC_OscConfig+0x98>
 8007772:	4b70      	ldr	r3, [pc, #448]	; (8007934 <HAL_RCC_OscConfig+0x240>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a6f      	ldr	r2, [pc, #444]	; (8007934 <HAL_RCC_OscConfig+0x240>)
 8007778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800777c:	6013      	str	r3, [r2, #0]
 800777e:	4b6d      	ldr	r3, [pc, #436]	; (8007934 <HAL_RCC_OscConfig+0x240>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a6c      	ldr	r2, [pc, #432]	; (8007934 <HAL_RCC_OscConfig+0x240>)
 8007784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007788:	6013      	str	r3, [r2, #0]
 800778a:	e00b      	b.n	80077a4 <HAL_RCC_OscConfig+0xb0>
 800778c:	4b69      	ldr	r3, [pc, #420]	; (8007934 <HAL_RCC_OscConfig+0x240>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a68      	ldr	r2, [pc, #416]	; (8007934 <HAL_RCC_OscConfig+0x240>)
 8007792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007796:	6013      	str	r3, [r2, #0]
 8007798:	4b66      	ldr	r3, [pc, #408]	; (8007934 <HAL_RCC_OscConfig+0x240>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a65      	ldr	r2, [pc, #404]	; (8007934 <HAL_RCC_OscConfig+0x240>)
 800779e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d013      	beq.n	80077d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077ac:	f7fe f8d4 	bl	8005958 <HAL_GetTick>
 80077b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077b2:	e008      	b.n	80077c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80077b4:	f7fe f8d0 	bl	8005958 <HAL_GetTick>
 80077b8:	4602      	mov	r2, r0
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	2b64      	cmp	r3, #100	; 0x64
 80077c0:	d901      	bls.n	80077c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80077c2:	2303      	movs	r3, #3
 80077c4:	e207      	b.n	8007bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077c6:	4b5b      	ldr	r3, [pc, #364]	; (8007934 <HAL_RCC_OscConfig+0x240>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d0f0      	beq.n	80077b4 <HAL_RCC_OscConfig+0xc0>
 80077d2:	e014      	b.n	80077fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077d4:	f7fe f8c0 	bl	8005958 <HAL_GetTick>
 80077d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077da:	e008      	b.n	80077ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80077dc:	f7fe f8bc 	bl	8005958 <HAL_GetTick>
 80077e0:	4602      	mov	r2, r0
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	1ad3      	subs	r3, r2, r3
 80077e6:	2b64      	cmp	r3, #100	; 0x64
 80077e8:	d901      	bls.n	80077ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80077ea:	2303      	movs	r3, #3
 80077ec:	e1f3      	b.n	8007bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077ee:	4b51      	ldr	r3, [pc, #324]	; (8007934 <HAL_RCC_OscConfig+0x240>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d1f0      	bne.n	80077dc <HAL_RCC_OscConfig+0xe8>
 80077fa:	e000      	b.n	80077fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 0302 	and.w	r3, r3, #2
 8007806:	2b00      	cmp	r3, #0
 8007808:	d063      	beq.n	80078d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800780a:	4b4a      	ldr	r3, [pc, #296]	; (8007934 <HAL_RCC_OscConfig+0x240>)
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	f003 030c 	and.w	r3, r3, #12
 8007812:	2b00      	cmp	r3, #0
 8007814:	d00b      	beq.n	800782e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007816:	4b47      	ldr	r3, [pc, #284]	; (8007934 <HAL_RCC_OscConfig+0x240>)
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800781e:	2b08      	cmp	r3, #8
 8007820:	d11c      	bne.n	800785c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007822:	4b44      	ldr	r3, [pc, #272]	; (8007934 <HAL_RCC_OscConfig+0x240>)
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800782a:	2b00      	cmp	r3, #0
 800782c:	d116      	bne.n	800785c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800782e:	4b41      	ldr	r3, [pc, #260]	; (8007934 <HAL_RCC_OscConfig+0x240>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 0302 	and.w	r3, r3, #2
 8007836:	2b00      	cmp	r3, #0
 8007838:	d005      	beq.n	8007846 <HAL_RCC_OscConfig+0x152>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	2b01      	cmp	r3, #1
 8007840:	d001      	beq.n	8007846 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e1c7      	b.n	8007bd6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007846:	4b3b      	ldr	r3, [pc, #236]	; (8007934 <HAL_RCC_OscConfig+0x240>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	00db      	lsls	r3, r3, #3
 8007854:	4937      	ldr	r1, [pc, #220]	; (8007934 <HAL_RCC_OscConfig+0x240>)
 8007856:	4313      	orrs	r3, r2
 8007858:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800785a:	e03a      	b.n	80078d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d020      	beq.n	80078a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007864:	4b34      	ldr	r3, [pc, #208]	; (8007938 <HAL_RCC_OscConfig+0x244>)
 8007866:	2201      	movs	r2, #1
 8007868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800786a:	f7fe f875 	bl	8005958 <HAL_GetTick>
 800786e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007870:	e008      	b.n	8007884 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007872:	f7fe f871 	bl	8005958 <HAL_GetTick>
 8007876:	4602      	mov	r2, r0
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	2b02      	cmp	r3, #2
 800787e:	d901      	bls.n	8007884 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007880:	2303      	movs	r3, #3
 8007882:	e1a8      	b.n	8007bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007884:	4b2b      	ldr	r3, [pc, #172]	; (8007934 <HAL_RCC_OscConfig+0x240>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 0302 	and.w	r3, r3, #2
 800788c:	2b00      	cmp	r3, #0
 800788e:	d0f0      	beq.n	8007872 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007890:	4b28      	ldr	r3, [pc, #160]	; (8007934 <HAL_RCC_OscConfig+0x240>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	00db      	lsls	r3, r3, #3
 800789e:	4925      	ldr	r1, [pc, #148]	; (8007934 <HAL_RCC_OscConfig+0x240>)
 80078a0:	4313      	orrs	r3, r2
 80078a2:	600b      	str	r3, [r1, #0]
 80078a4:	e015      	b.n	80078d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80078a6:	4b24      	ldr	r3, [pc, #144]	; (8007938 <HAL_RCC_OscConfig+0x244>)
 80078a8:	2200      	movs	r2, #0
 80078aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078ac:	f7fe f854 	bl	8005958 <HAL_GetTick>
 80078b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078b2:	e008      	b.n	80078c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078b4:	f7fe f850 	bl	8005958 <HAL_GetTick>
 80078b8:	4602      	mov	r2, r0
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	1ad3      	subs	r3, r2, r3
 80078be:	2b02      	cmp	r3, #2
 80078c0:	d901      	bls.n	80078c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80078c2:	2303      	movs	r3, #3
 80078c4:	e187      	b.n	8007bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078c6:	4b1b      	ldr	r3, [pc, #108]	; (8007934 <HAL_RCC_OscConfig+0x240>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 0302 	and.w	r3, r3, #2
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1f0      	bne.n	80078b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 0308 	and.w	r3, r3, #8
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d036      	beq.n	800794c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	695b      	ldr	r3, [r3, #20]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d016      	beq.n	8007914 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078e6:	4b15      	ldr	r3, [pc, #84]	; (800793c <HAL_RCC_OscConfig+0x248>)
 80078e8:	2201      	movs	r2, #1
 80078ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078ec:	f7fe f834 	bl	8005958 <HAL_GetTick>
 80078f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078f2:	e008      	b.n	8007906 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078f4:	f7fe f830 	bl	8005958 <HAL_GetTick>
 80078f8:	4602      	mov	r2, r0
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	1ad3      	subs	r3, r2, r3
 80078fe:	2b02      	cmp	r3, #2
 8007900:	d901      	bls.n	8007906 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	e167      	b.n	8007bd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007906:	4b0b      	ldr	r3, [pc, #44]	; (8007934 <HAL_RCC_OscConfig+0x240>)
 8007908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800790a:	f003 0302 	and.w	r3, r3, #2
 800790e:	2b00      	cmp	r3, #0
 8007910:	d0f0      	beq.n	80078f4 <HAL_RCC_OscConfig+0x200>
 8007912:	e01b      	b.n	800794c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007914:	4b09      	ldr	r3, [pc, #36]	; (800793c <HAL_RCC_OscConfig+0x248>)
 8007916:	2200      	movs	r2, #0
 8007918:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800791a:	f7fe f81d 	bl	8005958 <HAL_GetTick>
 800791e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007920:	e00e      	b.n	8007940 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007922:	f7fe f819 	bl	8005958 <HAL_GetTick>
 8007926:	4602      	mov	r2, r0
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	1ad3      	subs	r3, r2, r3
 800792c:	2b02      	cmp	r3, #2
 800792e:	d907      	bls.n	8007940 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007930:	2303      	movs	r3, #3
 8007932:	e150      	b.n	8007bd6 <HAL_RCC_OscConfig+0x4e2>
 8007934:	40023800 	.word	0x40023800
 8007938:	42470000 	.word	0x42470000
 800793c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007940:	4b88      	ldr	r3, [pc, #544]	; (8007b64 <HAL_RCC_OscConfig+0x470>)
 8007942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007944:	f003 0302 	and.w	r3, r3, #2
 8007948:	2b00      	cmp	r3, #0
 800794a:	d1ea      	bne.n	8007922 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f003 0304 	and.w	r3, r3, #4
 8007954:	2b00      	cmp	r3, #0
 8007956:	f000 8097 	beq.w	8007a88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800795a:	2300      	movs	r3, #0
 800795c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800795e:	4b81      	ldr	r3, [pc, #516]	; (8007b64 <HAL_RCC_OscConfig+0x470>)
 8007960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10f      	bne.n	800798a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800796a:	2300      	movs	r3, #0
 800796c:	60bb      	str	r3, [r7, #8]
 800796e:	4b7d      	ldr	r3, [pc, #500]	; (8007b64 <HAL_RCC_OscConfig+0x470>)
 8007970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007972:	4a7c      	ldr	r2, [pc, #496]	; (8007b64 <HAL_RCC_OscConfig+0x470>)
 8007974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007978:	6413      	str	r3, [r2, #64]	; 0x40
 800797a:	4b7a      	ldr	r3, [pc, #488]	; (8007b64 <HAL_RCC_OscConfig+0x470>)
 800797c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007982:	60bb      	str	r3, [r7, #8]
 8007984:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007986:	2301      	movs	r3, #1
 8007988:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800798a:	4b77      	ldr	r3, [pc, #476]	; (8007b68 <HAL_RCC_OscConfig+0x474>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007992:	2b00      	cmp	r3, #0
 8007994:	d118      	bne.n	80079c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007996:	4b74      	ldr	r3, [pc, #464]	; (8007b68 <HAL_RCC_OscConfig+0x474>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a73      	ldr	r2, [pc, #460]	; (8007b68 <HAL_RCC_OscConfig+0x474>)
 800799c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079a2:	f7fd ffd9 	bl	8005958 <HAL_GetTick>
 80079a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079a8:	e008      	b.n	80079bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079aa:	f7fd ffd5 	bl	8005958 <HAL_GetTick>
 80079ae:	4602      	mov	r2, r0
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	1ad3      	subs	r3, r2, r3
 80079b4:	2b02      	cmp	r3, #2
 80079b6:	d901      	bls.n	80079bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80079b8:	2303      	movs	r3, #3
 80079ba:	e10c      	b.n	8007bd6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079bc:	4b6a      	ldr	r3, [pc, #424]	; (8007b68 <HAL_RCC_OscConfig+0x474>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d0f0      	beq.n	80079aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d106      	bne.n	80079de <HAL_RCC_OscConfig+0x2ea>
 80079d0:	4b64      	ldr	r3, [pc, #400]	; (8007b64 <HAL_RCC_OscConfig+0x470>)
 80079d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079d4:	4a63      	ldr	r2, [pc, #396]	; (8007b64 <HAL_RCC_OscConfig+0x470>)
 80079d6:	f043 0301 	orr.w	r3, r3, #1
 80079da:	6713      	str	r3, [r2, #112]	; 0x70
 80079dc:	e01c      	b.n	8007a18 <HAL_RCC_OscConfig+0x324>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	2b05      	cmp	r3, #5
 80079e4:	d10c      	bne.n	8007a00 <HAL_RCC_OscConfig+0x30c>
 80079e6:	4b5f      	ldr	r3, [pc, #380]	; (8007b64 <HAL_RCC_OscConfig+0x470>)
 80079e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ea:	4a5e      	ldr	r2, [pc, #376]	; (8007b64 <HAL_RCC_OscConfig+0x470>)
 80079ec:	f043 0304 	orr.w	r3, r3, #4
 80079f0:	6713      	str	r3, [r2, #112]	; 0x70
 80079f2:	4b5c      	ldr	r3, [pc, #368]	; (8007b64 <HAL_RCC_OscConfig+0x470>)
 80079f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f6:	4a5b      	ldr	r2, [pc, #364]	; (8007b64 <HAL_RCC_OscConfig+0x470>)
 80079f8:	f043 0301 	orr.w	r3, r3, #1
 80079fc:	6713      	str	r3, [r2, #112]	; 0x70
 80079fe:	e00b      	b.n	8007a18 <HAL_RCC_OscConfig+0x324>
 8007a00:	4b58      	ldr	r3, [pc, #352]	; (8007b64 <HAL_RCC_OscConfig+0x470>)
 8007a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a04:	4a57      	ldr	r2, [pc, #348]	; (8007b64 <HAL_RCC_OscConfig+0x470>)
 8007a06:	f023 0301 	bic.w	r3, r3, #1
 8007a0a:	6713      	str	r3, [r2, #112]	; 0x70
 8007a0c:	4b55      	ldr	r3, [pc, #340]	; (8007b64 <HAL_RCC_OscConfig+0x470>)
 8007a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a10:	4a54      	ldr	r2, [pc, #336]	; (8007b64 <HAL_RCC_OscConfig+0x470>)
 8007a12:	f023 0304 	bic.w	r3, r3, #4
 8007a16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d015      	beq.n	8007a4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a20:	f7fd ff9a 	bl	8005958 <HAL_GetTick>
 8007a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a26:	e00a      	b.n	8007a3e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a28:	f7fd ff96 	bl	8005958 <HAL_GetTick>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	1ad3      	subs	r3, r2, r3
 8007a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d901      	bls.n	8007a3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	e0cb      	b.n	8007bd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a3e:	4b49      	ldr	r3, [pc, #292]	; (8007b64 <HAL_RCC_OscConfig+0x470>)
 8007a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a42:	f003 0302 	and.w	r3, r3, #2
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d0ee      	beq.n	8007a28 <HAL_RCC_OscConfig+0x334>
 8007a4a:	e014      	b.n	8007a76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a4c:	f7fd ff84 	bl	8005958 <HAL_GetTick>
 8007a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a52:	e00a      	b.n	8007a6a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a54:	f7fd ff80 	bl	8005958 <HAL_GetTick>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	1ad3      	subs	r3, r2, r3
 8007a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d901      	bls.n	8007a6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	e0b5      	b.n	8007bd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a6a:	4b3e      	ldr	r3, [pc, #248]	; (8007b64 <HAL_RCC_OscConfig+0x470>)
 8007a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a6e:	f003 0302 	and.w	r3, r3, #2
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d1ee      	bne.n	8007a54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a76:	7dfb      	ldrb	r3, [r7, #23]
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d105      	bne.n	8007a88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a7c:	4b39      	ldr	r3, [pc, #228]	; (8007b64 <HAL_RCC_OscConfig+0x470>)
 8007a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a80:	4a38      	ldr	r2, [pc, #224]	; (8007b64 <HAL_RCC_OscConfig+0x470>)
 8007a82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a86:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	699b      	ldr	r3, [r3, #24]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f000 80a1 	beq.w	8007bd4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007a92:	4b34      	ldr	r3, [pc, #208]	; (8007b64 <HAL_RCC_OscConfig+0x470>)
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	f003 030c 	and.w	r3, r3, #12
 8007a9a:	2b08      	cmp	r3, #8
 8007a9c:	d05c      	beq.n	8007b58 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	2b02      	cmp	r3, #2
 8007aa4:	d141      	bne.n	8007b2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007aa6:	4b31      	ldr	r3, [pc, #196]	; (8007b6c <HAL_RCC_OscConfig+0x478>)
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007aac:	f7fd ff54 	bl	8005958 <HAL_GetTick>
 8007ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ab2:	e008      	b.n	8007ac6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ab4:	f7fd ff50 	bl	8005958 <HAL_GetTick>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	1ad3      	subs	r3, r2, r3
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d901      	bls.n	8007ac6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007ac2:	2303      	movs	r3, #3
 8007ac4:	e087      	b.n	8007bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ac6:	4b27      	ldr	r3, [pc, #156]	; (8007b64 <HAL_RCC_OscConfig+0x470>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1f0      	bne.n	8007ab4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	69da      	ldr	r2, [r3, #28]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a1b      	ldr	r3, [r3, #32]
 8007ada:	431a      	orrs	r2, r3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae0:	019b      	lsls	r3, r3, #6
 8007ae2:	431a      	orrs	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae8:	085b      	lsrs	r3, r3, #1
 8007aea:	3b01      	subs	r3, #1
 8007aec:	041b      	lsls	r3, r3, #16
 8007aee:	431a      	orrs	r2, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af4:	061b      	lsls	r3, r3, #24
 8007af6:	491b      	ldr	r1, [pc, #108]	; (8007b64 <HAL_RCC_OscConfig+0x470>)
 8007af8:	4313      	orrs	r3, r2
 8007afa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007afc:	4b1b      	ldr	r3, [pc, #108]	; (8007b6c <HAL_RCC_OscConfig+0x478>)
 8007afe:	2201      	movs	r2, #1
 8007b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b02:	f7fd ff29 	bl	8005958 <HAL_GetTick>
 8007b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b08:	e008      	b.n	8007b1c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b0a:	f7fd ff25 	bl	8005958 <HAL_GetTick>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	1ad3      	subs	r3, r2, r3
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	d901      	bls.n	8007b1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	e05c      	b.n	8007bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b1c:	4b11      	ldr	r3, [pc, #68]	; (8007b64 <HAL_RCC_OscConfig+0x470>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d0f0      	beq.n	8007b0a <HAL_RCC_OscConfig+0x416>
 8007b28:	e054      	b.n	8007bd4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b2a:	4b10      	ldr	r3, [pc, #64]	; (8007b6c <HAL_RCC_OscConfig+0x478>)
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b30:	f7fd ff12 	bl	8005958 <HAL_GetTick>
 8007b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b36:	e008      	b.n	8007b4a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b38:	f7fd ff0e 	bl	8005958 <HAL_GetTick>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d901      	bls.n	8007b4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007b46:	2303      	movs	r3, #3
 8007b48:	e045      	b.n	8007bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b4a:	4b06      	ldr	r3, [pc, #24]	; (8007b64 <HAL_RCC_OscConfig+0x470>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d1f0      	bne.n	8007b38 <HAL_RCC_OscConfig+0x444>
 8007b56:	e03d      	b.n	8007bd4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	699b      	ldr	r3, [r3, #24]
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d107      	bne.n	8007b70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	e038      	b.n	8007bd6 <HAL_RCC_OscConfig+0x4e2>
 8007b64:	40023800 	.word	0x40023800
 8007b68:	40007000 	.word	0x40007000
 8007b6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007b70:	4b1b      	ldr	r3, [pc, #108]	; (8007be0 <HAL_RCC_OscConfig+0x4ec>)
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	699b      	ldr	r3, [r3, #24]
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d028      	beq.n	8007bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d121      	bne.n	8007bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d11a      	bne.n	8007bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b9a:	68fa      	ldr	r2, [r7, #12]
 8007b9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007ba0:	4013      	ands	r3, r2
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007ba6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d111      	bne.n	8007bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb6:	085b      	lsrs	r3, r3, #1
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d107      	bne.n	8007bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d001      	beq.n	8007bd4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e000      	b.n	8007bd6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3718      	adds	r7, #24
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	40023800 	.word	0x40023800

08007be4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d101      	bne.n	8007bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e0cc      	b.n	8007d92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007bf8:	4b68      	ldr	r3, [pc, #416]	; (8007d9c <HAL_RCC_ClockConfig+0x1b8>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 030f 	and.w	r3, r3, #15
 8007c00:	683a      	ldr	r2, [r7, #0]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d90c      	bls.n	8007c20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c06:	4b65      	ldr	r3, [pc, #404]	; (8007d9c <HAL_RCC_ClockConfig+0x1b8>)
 8007c08:	683a      	ldr	r2, [r7, #0]
 8007c0a:	b2d2      	uxtb	r2, r2
 8007c0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c0e:	4b63      	ldr	r3, [pc, #396]	; (8007d9c <HAL_RCC_ClockConfig+0x1b8>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f003 030f 	and.w	r3, r3, #15
 8007c16:	683a      	ldr	r2, [r7, #0]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d001      	beq.n	8007c20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e0b8      	b.n	8007d92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f003 0302 	and.w	r3, r3, #2
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d020      	beq.n	8007c6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 0304 	and.w	r3, r3, #4
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d005      	beq.n	8007c44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c38:	4b59      	ldr	r3, [pc, #356]	; (8007da0 <HAL_RCC_ClockConfig+0x1bc>)
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	4a58      	ldr	r2, [pc, #352]	; (8007da0 <HAL_RCC_ClockConfig+0x1bc>)
 8007c3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007c42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f003 0308 	and.w	r3, r3, #8
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d005      	beq.n	8007c5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c50:	4b53      	ldr	r3, [pc, #332]	; (8007da0 <HAL_RCC_ClockConfig+0x1bc>)
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	4a52      	ldr	r2, [pc, #328]	; (8007da0 <HAL_RCC_ClockConfig+0x1bc>)
 8007c56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007c5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c5c:	4b50      	ldr	r3, [pc, #320]	; (8007da0 <HAL_RCC_ClockConfig+0x1bc>)
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	494d      	ldr	r1, [pc, #308]	; (8007da0 <HAL_RCC_ClockConfig+0x1bc>)
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 0301 	and.w	r3, r3, #1
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d044      	beq.n	8007d04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d107      	bne.n	8007c92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c82:	4b47      	ldr	r3, [pc, #284]	; (8007da0 <HAL_RCC_ClockConfig+0x1bc>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d119      	bne.n	8007cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e07f      	b.n	8007d92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	d003      	beq.n	8007ca2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c9e:	2b03      	cmp	r3, #3
 8007ca0:	d107      	bne.n	8007cb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ca2:	4b3f      	ldr	r3, [pc, #252]	; (8007da0 <HAL_RCC_ClockConfig+0x1bc>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d109      	bne.n	8007cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e06f      	b.n	8007d92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cb2:	4b3b      	ldr	r3, [pc, #236]	; (8007da0 <HAL_RCC_ClockConfig+0x1bc>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f003 0302 	and.w	r3, r3, #2
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d101      	bne.n	8007cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e067      	b.n	8007d92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007cc2:	4b37      	ldr	r3, [pc, #220]	; (8007da0 <HAL_RCC_ClockConfig+0x1bc>)
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	f023 0203 	bic.w	r2, r3, #3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	4934      	ldr	r1, [pc, #208]	; (8007da0 <HAL_RCC_ClockConfig+0x1bc>)
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007cd4:	f7fd fe40 	bl	8005958 <HAL_GetTick>
 8007cd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cda:	e00a      	b.n	8007cf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007cdc:	f7fd fe3c 	bl	8005958 <HAL_GetTick>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d901      	bls.n	8007cf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007cee:	2303      	movs	r3, #3
 8007cf0:	e04f      	b.n	8007d92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cf2:	4b2b      	ldr	r3, [pc, #172]	; (8007da0 <HAL_RCC_ClockConfig+0x1bc>)
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	f003 020c 	and.w	r2, r3, #12
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d1eb      	bne.n	8007cdc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d04:	4b25      	ldr	r3, [pc, #148]	; (8007d9c <HAL_RCC_ClockConfig+0x1b8>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 030f 	and.w	r3, r3, #15
 8007d0c:	683a      	ldr	r2, [r7, #0]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d20c      	bcs.n	8007d2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d12:	4b22      	ldr	r3, [pc, #136]	; (8007d9c <HAL_RCC_ClockConfig+0x1b8>)
 8007d14:	683a      	ldr	r2, [r7, #0]
 8007d16:	b2d2      	uxtb	r2, r2
 8007d18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d1a:	4b20      	ldr	r3, [pc, #128]	; (8007d9c <HAL_RCC_ClockConfig+0x1b8>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 030f 	and.w	r3, r3, #15
 8007d22:	683a      	ldr	r2, [r7, #0]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d001      	beq.n	8007d2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e032      	b.n	8007d92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f003 0304 	and.w	r3, r3, #4
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d008      	beq.n	8007d4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d38:	4b19      	ldr	r3, [pc, #100]	; (8007da0 <HAL_RCC_ClockConfig+0x1bc>)
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	4916      	ldr	r1, [pc, #88]	; (8007da0 <HAL_RCC_ClockConfig+0x1bc>)
 8007d46:	4313      	orrs	r3, r2
 8007d48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f003 0308 	and.w	r3, r3, #8
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d009      	beq.n	8007d6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d56:	4b12      	ldr	r3, [pc, #72]	; (8007da0 <HAL_RCC_ClockConfig+0x1bc>)
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	00db      	lsls	r3, r3, #3
 8007d64:	490e      	ldr	r1, [pc, #56]	; (8007da0 <HAL_RCC_ClockConfig+0x1bc>)
 8007d66:	4313      	orrs	r3, r2
 8007d68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007d6a:	f000 f821 	bl	8007db0 <HAL_RCC_GetSysClockFreq>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	4b0b      	ldr	r3, [pc, #44]	; (8007da0 <HAL_RCC_ClockConfig+0x1bc>)
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	091b      	lsrs	r3, r3, #4
 8007d76:	f003 030f 	and.w	r3, r3, #15
 8007d7a:	490a      	ldr	r1, [pc, #40]	; (8007da4 <HAL_RCC_ClockConfig+0x1c0>)
 8007d7c:	5ccb      	ldrb	r3, [r1, r3]
 8007d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8007d82:	4a09      	ldr	r2, [pc, #36]	; (8007da8 <HAL_RCC_ClockConfig+0x1c4>)
 8007d84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007d86:	4b09      	ldr	r3, [pc, #36]	; (8007dac <HAL_RCC_ClockConfig+0x1c8>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7fd fda0 	bl	80058d0 <HAL_InitTick>

  return HAL_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	40023c00 	.word	0x40023c00
 8007da0:	40023800 	.word	0x40023800
 8007da4:	0801318c 	.word	0x0801318c
 8007da8:	20000158 	.word	0x20000158
 8007dac:	2000015c 	.word	0x2000015c

08007db0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007db0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007db4:	b090      	sub	sp, #64	; 0x40
 8007db6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007db8:	2300      	movs	r3, #0
 8007dba:	637b      	str	r3, [r7, #52]	; 0x34
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007dc8:	4b59      	ldr	r3, [pc, #356]	; (8007f30 <HAL_RCC_GetSysClockFreq+0x180>)
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	f003 030c 	and.w	r3, r3, #12
 8007dd0:	2b08      	cmp	r3, #8
 8007dd2:	d00d      	beq.n	8007df0 <HAL_RCC_GetSysClockFreq+0x40>
 8007dd4:	2b08      	cmp	r3, #8
 8007dd6:	f200 80a1 	bhi.w	8007f1c <HAL_RCC_GetSysClockFreq+0x16c>
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d002      	beq.n	8007de4 <HAL_RCC_GetSysClockFreq+0x34>
 8007dde:	2b04      	cmp	r3, #4
 8007de0:	d003      	beq.n	8007dea <HAL_RCC_GetSysClockFreq+0x3a>
 8007de2:	e09b      	b.n	8007f1c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007de4:	4b53      	ldr	r3, [pc, #332]	; (8007f34 <HAL_RCC_GetSysClockFreq+0x184>)
 8007de6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007de8:	e09b      	b.n	8007f22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007dea:	4b53      	ldr	r3, [pc, #332]	; (8007f38 <HAL_RCC_GetSysClockFreq+0x188>)
 8007dec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007dee:	e098      	b.n	8007f22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007df0:	4b4f      	ldr	r3, [pc, #316]	; (8007f30 <HAL_RCC_GetSysClockFreq+0x180>)
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007df8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007dfa:	4b4d      	ldr	r3, [pc, #308]	; (8007f30 <HAL_RCC_GetSysClockFreq+0x180>)
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d028      	beq.n	8007e58 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e06:	4b4a      	ldr	r3, [pc, #296]	; (8007f30 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	099b      	lsrs	r3, r3, #6
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	623b      	str	r3, [r7, #32]
 8007e10:	627a      	str	r2, [r7, #36]	; 0x24
 8007e12:	6a3b      	ldr	r3, [r7, #32]
 8007e14:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007e18:	2100      	movs	r1, #0
 8007e1a:	4b47      	ldr	r3, [pc, #284]	; (8007f38 <HAL_RCC_GetSysClockFreq+0x188>)
 8007e1c:	fb03 f201 	mul.w	r2, r3, r1
 8007e20:	2300      	movs	r3, #0
 8007e22:	fb00 f303 	mul.w	r3, r0, r3
 8007e26:	4413      	add	r3, r2
 8007e28:	4a43      	ldr	r2, [pc, #268]	; (8007f38 <HAL_RCC_GetSysClockFreq+0x188>)
 8007e2a:	fba0 1202 	umull	r1, r2, r0, r2
 8007e2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e30:	460a      	mov	r2, r1
 8007e32:	62ba      	str	r2, [r7, #40]	; 0x28
 8007e34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e36:	4413      	add	r3, r2
 8007e38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	61bb      	str	r3, [r7, #24]
 8007e40:	61fa      	str	r2, [r7, #28]
 8007e42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007e4a:	f7f8 ff2d 	bl	8000ca8 <__aeabi_uldivmod>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	460b      	mov	r3, r1
 8007e52:	4613      	mov	r3, r2
 8007e54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e56:	e053      	b.n	8007f00 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e58:	4b35      	ldr	r3, [pc, #212]	; (8007f30 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	099b      	lsrs	r3, r3, #6
 8007e5e:	2200      	movs	r2, #0
 8007e60:	613b      	str	r3, [r7, #16]
 8007e62:	617a      	str	r2, [r7, #20]
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007e6a:	f04f 0b00 	mov.w	fp, #0
 8007e6e:	4652      	mov	r2, sl
 8007e70:	465b      	mov	r3, fp
 8007e72:	f04f 0000 	mov.w	r0, #0
 8007e76:	f04f 0100 	mov.w	r1, #0
 8007e7a:	0159      	lsls	r1, r3, #5
 8007e7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e80:	0150      	lsls	r0, r2, #5
 8007e82:	4602      	mov	r2, r0
 8007e84:	460b      	mov	r3, r1
 8007e86:	ebb2 080a 	subs.w	r8, r2, sl
 8007e8a:	eb63 090b 	sbc.w	r9, r3, fp
 8007e8e:	f04f 0200 	mov.w	r2, #0
 8007e92:	f04f 0300 	mov.w	r3, #0
 8007e96:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007e9a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007e9e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007ea2:	ebb2 0408 	subs.w	r4, r2, r8
 8007ea6:	eb63 0509 	sbc.w	r5, r3, r9
 8007eaa:	f04f 0200 	mov.w	r2, #0
 8007eae:	f04f 0300 	mov.w	r3, #0
 8007eb2:	00eb      	lsls	r3, r5, #3
 8007eb4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007eb8:	00e2      	lsls	r2, r4, #3
 8007eba:	4614      	mov	r4, r2
 8007ebc:	461d      	mov	r5, r3
 8007ebe:	eb14 030a 	adds.w	r3, r4, sl
 8007ec2:	603b      	str	r3, [r7, #0]
 8007ec4:	eb45 030b 	adc.w	r3, r5, fp
 8007ec8:	607b      	str	r3, [r7, #4]
 8007eca:	f04f 0200 	mov.w	r2, #0
 8007ece:	f04f 0300 	mov.w	r3, #0
 8007ed2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007ed6:	4629      	mov	r1, r5
 8007ed8:	028b      	lsls	r3, r1, #10
 8007eda:	4621      	mov	r1, r4
 8007edc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007ee0:	4621      	mov	r1, r4
 8007ee2:	028a      	lsls	r2, r1, #10
 8007ee4:	4610      	mov	r0, r2
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eea:	2200      	movs	r2, #0
 8007eec:	60bb      	str	r3, [r7, #8]
 8007eee:	60fa      	str	r2, [r7, #12]
 8007ef0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ef4:	f7f8 fed8 	bl	8000ca8 <__aeabi_uldivmod>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	460b      	mov	r3, r1
 8007efc:	4613      	mov	r3, r2
 8007efe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007f00:	4b0b      	ldr	r3, [pc, #44]	; (8007f30 <HAL_RCC_GetSysClockFreq+0x180>)
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	0c1b      	lsrs	r3, r3, #16
 8007f06:	f003 0303 	and.w	r3, r3, #3
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	005b      	lsls	r3, r3, #1
 8007f0e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007f10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f18:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007f1a:	e002      	b.n	8007f22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007f1c:	4b05      	ldr	r3, [pc, #20]	; (8007f34 <HAL_RCC_GetSysClockFreq+0x184>)
 8007f1e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007f20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3740      	adds	r7, #64	; 0x40
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f2e:	bf00      	nop
 8007f30:	40023800 	.word	0x40023800
 8007f34:	00f42400 	.word	0x00f42400
 8007f38:	017d7840 	.word	0x017d7840

08007f3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f40:	4b03      	ldr	r3, [pc, #12]	; (8007f50 <HAL_RCC_GetHCLKFreq+0x14>)
 8007f42:	681b      	ldr	r3, [r3, #0]
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
 8007f4e:	bf00      	nop
 8007f50:	20000158 	.word	0x20000158

08007f54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007f58:	f7ff fff0 	bl	8007f3c <HAL_RCC_GetHCLKFreq>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	4b05      	ldr	r3, [pc, #20]	; (8007f74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	0a9b      	lsrs	r3, r3, #10
 8007f64:	f003 0307 	and.w	r3, r3, #7
 8007f68:	4903      	ldr	r1, [pc, #12]	; (8007f78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f6a:	5ccb      	ldrb	r3, [r1, r3]
 8007f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	40023800 	.word	0x40023800
 8007f78:	0801319c 	.word	0x0801319c

08007f7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007f80:	f7ff ffdc 	bl	8007f3c <HAL_RCC_GetHCLKFreq>
 8007f84:	4602      	mov	r2, r0
 8007f86:	4b05      	ldr	r3, [pc, #20]	; (8007f9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	0b5b      	lsrs	r3, r3, #13
 8007f8c:	f003 0307 	and.w	r3, r3, #7
 8007f90:	4903      	ldr	r1, [pc, #12]	; (8007fa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f92:	5ccb      	ldrb	r3, [r1, r3]
 8007f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	40023800 	.word	0x40023800
 8007fa0:	0801319c 	.word	0x0801319c

08007fa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007fac:	2300      	movs	r3, #0
 8007fae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 0301 	and.w	r3, r3, #1
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d10b      	bne.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d105      	bne.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d075      	beq.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007fd8:	4b91      	ldr	r3, [pc, #580]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007fda:	2200      	movs	r2, #0
 8007fdc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007fde:	f7fd fcbb 	bl	8005958 <HAL_GetTick>
 8007fe2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007fe4:	e008      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007fe6:	f7fd fcb7 	bl	8005958 <HAL_GetTick>
 8007fea:	4602      	mov	r2, r0
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	1ad3      	subs	r3, r2, r3
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	d901      	bls.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	e189      	b.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ff8:	4b8a      	ldr	r3, [pc, #552]	; (8008224 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008000:	2b00      	cmp	r3, #0
 8008002:	d1f0      	bne.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 0301 	and.w	r3, r3, #1
 800800c:	2b00      	cmp	r3, #0
 800800e:	d009      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	019a      	lsls	r2, r3, #6
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	071b      	lsls	r3, r3, #28
 800801c:	4981      	ldr	r1, [pc, #516]	; (8008224 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800801e:	4313      	orrs	r3, r2
 8008020:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 0302 	and.w	r3, r3, #2
 800802c:	2b00      	cmp	r3, #0
 800802e:	d01f      	beq.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008030:	4b7c      	ldr	r3, [pc, #496]	; (8008224 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008032:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008036:	0f1b      	lsrs	r3, r3, #28
 8008038:	f003 0307 	and.w	r3, r3, #7
 800803c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	019a      	lsls	r2, r3, #6
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	061b      	lsls	r3, r3, #24
 800804a:	431a      	orrs	r2, r3
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	071b      	lsls	r3, r3, #28
 8008050:	4974      	ldr	r1, [pc, #464]	; (8008224 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008052:	4313      	orrs	r3, r2
 8008054:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008058:	4b72      	ldr	r3, [pc, #456]	; (8008224 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800805a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800805e:	f023 021f 	bic.w	r2, r3, #31
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	69db      	ldr	r3, [r3, #28]
 8008066:	3b01      	subs	r3, #1
 8008068:	496e      	ldr	r1, [pc, #440]	; (8008224 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800806a:	4313      	orrs	r3, r2
 800806c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00d      	beq.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	019a      	lsls	r2, r3, #6
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	061b      	lsls	r3, r3, #24
 8008088:	431a      	orrs	r2, r3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	071b      	lsls	r3, r3, #28
 8008090:	4964      	ldr	r1, [pc, #400]	; (8008224 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008092:	4313      	orrs	r3, r2
 8008094:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008098:	4b61      	ldr	r3, [pc, #388]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800809a:	2201      	movs	r2, #1
 800809c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800809e:	f7fd fc5b 	bl	8005958 <HAL_GetTick>
 80080a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80080a4:	e008      	b.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80080a6:	f7fd fc57 	bl	8005958 <HAL_GetTick>
 80080aa:	4602      	mov	r2, r0
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	1ad3      	subs	r3, r2, r3
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	d901      	bls.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80080b4:	2303      	movs	r3, #3
 80080b6:	e129      	b.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80080b8:	4b5a      	ldr	r3, [pc, #360]	; (8008224 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d0f0      	beq.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 0304 	and.w	r3, r3, #4
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d105      	bne.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d079      	beq.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80080dc:	4b52      	ldr	r3, [pc, #328]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80080de:	2200      	movs	r2, #0
 80080e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80080e2:	f7fd fc39 	bl	8005958 <HAL_GetTick>
 80080e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80080e8:	e008      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80080ea:	f7fd fc35 	bl	8005958 <HAL_GetTick>
 80080ee:	4602      	mov	r2, r0
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	1ad3      	subs	r3, r2, r3
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d901      	bls.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80080f8:	2303      	movs	r3, #3
 80080fa:	e107      	b.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80080fc:	4b49      	ldr	r3, [pc, #292]	; (8008224 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008104:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008108:	d0ef      	beq.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 0304 	and.w	r3, r3, #4
 8008112:	2b00      	cmp	r3, #0
 8008114:	d020      	beq.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008116:	4b43      	ldr	r3, [pc, #268]	; (8008224 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800811c:	0f1b      	lsrs	r3, r3, #28
 800811e:	f003 0307 	and.w	r3, r3, #7
 8008122:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	691b      	ldr	r3, [r3, #16]
 8008128:	019a      	lsls	r2, r3, #6
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	695b      	ldr	r3, [r3, #20]
 800812e:	061b      	lsls	r3, r3, #24
 8008130:	431a      	orrs	r2, r3
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	071b      	lsls	r3, r3, #28
 8008136:	493b      	ldr	r1, [pc, #236]	; (8008224 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008138:	4313      	orrs	r3, r2
 800813a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800813e:	4b39      	ldr	r3, [pc, #228]	; (8008224 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008144:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6a1b      	ldr	r3, [r3, #32]
 800814c:	3b01      	subs	r3, #1
 800814e:	021b      	lsls	r3, r3, #8
 8008150:	4934      	ldr	r1, [pc, #208]	; (8008224 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008152:	4313      	orrs	r3, r2
 8008154:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 0308 	and.w	r3, r3, #8
 8008160:	2b00      	cmp	r3, #0
 8008162:	d01e      	beq.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008164:	4b2f      	ldr	r3, [pc, #188]	; (8008224 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800816a:	0e1b      	lsrs	r3, r3, #24
 800816c:	f003 030f 	and.w	r3, r3, #15
 8008170:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	019a      	lsls	r2, r3, #6
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	061b      	lsls	r3, r3, #24
 800817c:	431a      	orrs	r2, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	699b      	ldr	r3, [r3, #24]
 8008182:	071b      	lsls	r3, r3, #28
 8008184:	4927      	ldr	r1, [pc, #156]	; (8008224 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008186:	4313      	orrs	r3, r2
 8008188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800818c:	4b25      	ldr	r3, [pc, #148]	; (8008224 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800818e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008192:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819a:	4922      	ldr	r1, [pc, #136]	; (8008224 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800819c:	4313      	orrs	r3, r2
 800819e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80081a2:	4b21      	ldr	r3, [pc, #132]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80081a4:	2201      	movs	r2, #1
 80081a6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80081a8:	f7fd fbd6 	bl	8005958 <HAL_GetTick>
 80081ac:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80081ae:	e008      	b.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80081b0:	f7fd fbd2 	bl	8005958 <HAL_GetTick>
 80081b4:	4602      	mov	r2, r0
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	d901      	bls.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80081be:	2303      	movs	r3, #3
 80081c0:	e0a4      	b.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80081c2:	4b18      	ldr	r3, [pc, #96]	; (8008224 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081ce:	d1ef      	bne.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f003 0320 	and.w	r3, r3, #32
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f000 808b 	beq.w	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80081de:	2300      	movs	r3, #0
 80081e0:	60fb      	str	r3, [r7, #12]
 80081e2:	4b10      	ldr	r3, [pc, #64]	; (8008224 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80081e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e6:	4a0f      	ldr	r2, [pc, #60]	; (8008224 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80081e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081ec:	6413      	str	r3, [r2, #64]	; 0x40
 80081ee:	4b0d      	ldr	r3, [pc, #52]	; (8008224 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80081f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081f6:	60fb      	str	r3, [r7, #12]
 80081f8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80081fa:	4b0c      	ldr	r3, [pc, #48]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a0b      	ldr	r2, [pc, #44]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008204:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008206:	f7fd fba7 	bl	8005958 <HAL_GetTick>
 800820a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800820c:	e010      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800820e:	f7fd fba3 	bl	8005958 <HAL_GetTick>
 8008212:	4602      	mov	r2, r0
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	1ad3      	subs	r3, r2, r3
 8008218:	2b02      	cmp	r3, #2
 800821a:	d909      	bls.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800821c:	2303      	movs	r3, #3
 800821e:	e075      	b.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8008220:	42470068 	.word	0x42470068
 8008224:	40023800 	.word	0x40023800
 8008228:	42470070 	.word	0x42470070
 800822c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008230:	4b38      	ldr	r3, [pc, #224]	; (8008314 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008238:	2b00      	cmp	r3, #0
 800823a:	d0e8      	beq.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800823c:	4b36      	ldr	r3, [pc, #216]	; (8008318 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800823e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008240:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008244:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d02f      	beq.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x308>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008250:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008254:	693a      	ldr	r2, [r7, #16]
 8008256:	429a      	cmp	r2, r3
 8008258:	d028      	beq.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800825a:	4b2f      	ldr	r3, [pc, #188]	; (8008318 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800825c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800825e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008262:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008264:	4b2d      	ldr	r3, [pc, #180]	; (800831c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8008266:	2201      	movs	r2, #1
 8008268:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800826a:	4b2c      	ldr	r3, [pc, #176]	; (800831c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800826c:	2200      	movs	r2, #0
 800826e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008270:	4a29      	ldr	r2, [pc, #164]	; (8008318 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008276:	4b28      	ldr	r3, [pc, #160]	; (8008318 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800827a:	f003 0301 	and.w	r3, r3, #1
 800827e:	2b01      	cmp	r3, #1
 8008280:	d114      	bne.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008282:	f7fd fb69 	bl	8005958 <HAL_GetTick>
 8008286:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008288:	e00a      	b.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800828a:	f7fd fb65 	bl	8005958 <HAL_GetTick>
 800828e:	4602      	mov	r2, r0
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	1ad3      	subs	r3, r2, r3
 8008294:	f241 3288 	movw	r2, #5000	; 0x1388
 8008298:	4293      	cmp	r3, r2
 800829a:	d901      	bls.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800829c:	2303      	movs	r3, #3
 800829e:	e035      	b.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082a0:	4b1d      	ldr	r3, [pc, #116]	; (8008318 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80082a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082a4:	f003 0302 	and.w	r3, r3, #2
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d0ee      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082b8:	d10d      	bne.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80082ba:	4b17      	ldr	r3, [pc, #92]	; (8008318 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80082ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082ce:	4912      	ldr	r1, [pc, #72]	; (8008318 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80082d0:	4313      	orrs	r3, r2
 80082d2:	608b      	str	r3, [r1, #8]
 80082d4:	e005      	b.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80082d6:	4b10      	ldr	r3, [pc, #64]	; (8008318 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	4a0f      	ldr	r2, [pc, #60]	; (8008318 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80082dc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80082e0:	6093      	str	r3, [r2, #8]
 80082e2:	4b0d      	ldr	r3, [pc, #52]	; (8008318 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80082e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082ee:	490a      	ldr	r1, [pc, #40]	; (8008318 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80082f0:	4313      	orrs	r3, r2
 80082f2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f003 0310 	and.w	r3, r3, #16
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d004      	beq.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8008306:	4b06      	ldr	r3, [pc, #24]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8008308:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800830a:	2300      	movs	r3, #0
}
 800830c:	4618      	mov	r0, r3
 800830e:	3718      	adds	r7, #24
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}
 8008314:	40007000 	.word	0x40007000
 8008318:	40023800 	.word	0x40023800
 800831c:	42470e40 	.word	0x42470e40
 8008320:	424711e0 	.word	0x424711e0

08008324 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d101      	bne.n	800833a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	e066      	b.n	8008408 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	7f5b      	ldrb	r3, [r3, #29]
 800833e:	b2db      	uxtb	r3, r3
 8008340:	2b00      	cmp	r3, #0
 8008342:	d105      	bne.n	8008350 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f7fc fe1a 	bl	8004f84 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2202      	movs	r2, #2
 8008354:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	22ca      	movs	r2, #202	; 0xca
 800835c:	625a      	str	r2, [r3, #36]	; 0x24
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2253      	movs	r2, #83	; 0x53
 8008364:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 f998 	bl	800869c <RTC_EnterInitMode>
 800836c:	4603      	mov	r3, r0
 800836e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008370:	7bfb      	ldrb	r3, [r7, #15]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d12c      	bne.n	80083d0 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	6812      	ldr	r2, [r2, #0]
 8008380:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008384:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008388:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	6899      	ldr	r1, [r3, #8]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	685a      	ldr	r2, [r3, #4]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	431a      	orrs	r2, r3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	695b      	ldr	r3, [r3, #20]
 800839e:	431a      	orrs	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	430a      	orrs	r2, r1
 80083a6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	68d2      	ldr	r2, [r2, #12]
 80083b0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	6919      	ldr	r1, [r3, #16]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	041a      	lsls	r2, r3, #16
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	430a      	orrs	r2, r1
 80083c4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f99f 	bl	800870a <RTC_ExitInitMode>
 80083cc:	4603      	mov	r3, r0
 80083ce:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80083d0:	7bfb      	ldrb	r3, [r7, #15]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d113      	bne.n	80083fe <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80083e4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	699a      	ldr	r2, [r3, #24]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	430a      	orrs	r2, r1
 80083f6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	22ff      	movs	r2, #255	; 0xff
 8008404:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8008406:	7bfb      	ldrb	r3, [r7, #15]
}
 8008408:	4618      	mov	r0, r3
 800840a:	3710      	adds	r7, #16
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008410:	b590      	push	{r4, r7, lr}
 8008412:	b087      	sub	sp, #28
 8008414:	af00      	add	r7, sp, #0
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800841c:	2300      	movs	r3, #0
 800841e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	7f1b      	ldrb	r3, [r3, #28]
 8008424:	2b01      	cmp	r3, #1
 8008426:	d101      	bne.n	800842c <HAL_RTC_SetTime+0x1c>
 8008428:	2302      	movs	r3, #2
 800842a:	e087      	b.n	800853c <HAL_RTC_SetTime+0x12c>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2201      	movs	r2, #1
 8008430:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2202      	movs	r2, #2
 8008436:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d126      	bne.n	800848c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008448:	2b00      	cmp	r3, #0
 800844a:	d102      	bne.n	8008452 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	2200      	movs	r2, #0
 8008450:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	4618      	mov	r0, r3
 8008458:	f000 f97c 	bl	8008754 <RTC_ByteToBcd2>
 800845c:	4603      	mov	r3, r0
 800845e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	785b      	ldrb	r3, [r3, #1]
 8008464:	4618      	mov	r0, r3
 8008466:	f000 f975 	bl	8008754 <RTC_ByteToBcd2>
 800846a:	4603      	mov	r3, r0
 800846c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800846e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	789b      	ldrb	r3, [r3, #2]
 8008474:	4618      	mov	r0, r3
 8008476:	f000 f96d 	bl	8008754 <RTC_ByteToBcd2>
 800847a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800847c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	78db      	ldrb	r3, [r3, #3]
 8008484:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008486:	4313      	orrs	r3, r2
 8008488:	617b      	str	r3, [r7, #20]
 800848a:	e018      	b.n	80084be <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008496:	2b00      	cmp	r3, #0
 8008498:	d102      	bne.n	80084a0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	2200      	movs	r2, #0
 800849e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	785b      	ldrb	r3, [r3, #1]
 80084aa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80084ac:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80084ae:	68ba      	ldr	r2, [r7, #8]
 80084b0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80084b2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	78db      	ldrb	r3, [r3, #3]
 80084b8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80084ba:	4313      	orrs	r3, r2
 80084bc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	22ca      	movs	r2, #202	; 0xca
 80084c4:	625a      	str	r2, [r3, #36]	; 0x24
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2253      	movs	r2, #83	; 0x53
 80084cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f000 f8e4 	bl	800869c <RTC_EnterInitMode>
 80084d4:	4603      	mov	r3, r0
 80084d6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80084d8:	7cfb      	ldrb	r3, [r7, #19]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d120      	bne.n	8008520 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80084e8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80084ec:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	689a      	ldr	r2, [r3, #8]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80084fc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	6899      	ldr	r1, [r3, #8]
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	68da      	ldr	r2, [r3, #12]
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	691b      	ldr	r3, [r3, #16]
 800850c:	431a      	orrs	r2, r3
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	430a      	orrs	r2, r1
 8008514:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008516:	68f8      	ldr	r0, [r7, #12]
 8008518:	f000 f8f7 	bl	800870a <RTC_ExitInitMode>
 800851c:	4603      	mov	r3, r0
 800851e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008520:	7cfb      	ldrb	r3, [r7, #19]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d102      	bne.n	800852c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2201      	movs	r2, #1
 800852a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	22ff      	movs	r2, #255	; 0xff
 8008532:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2200      	movs	r2, #0
 8008538:	771a      	strb	r2, [r3, #28]

  return status;
 800853a:	7cfb      	ldrb	r3, [r7, #19]
}
 800853c:	4618      	mov	r0, r3
 800853e:	371c      	adds	r7, #28
 8008540:	46bd      	mov	sp, r7
 8008542:	bd90      	pop	{r4, r7, pc}

08008544 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008544:	b590      	push	{r4, r7, lr}
 8008546:	b087      	sub	sp, #28
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008550:	2300      	movs	r3, #0
 8008552:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	7f1b      	ldrb	r3, [r3, #28]
 8008558:	2b01      	cmp	r3, #1
 800855a:	d101      	bne.n	8008560 <HAL_RTC_SetDate+0x1c>
 800855c:	2302      	movs	r3, #2
 800855e:	e071      	b.n	8008644 <HAL_RTC_SetDate+0x100>
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2201      	movs	r2, #1
 8008564:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2202      	movs	r2, #2
 800856a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d10e      	bne.n	8008590 <HAL_RTC_SetDate+0x4c>
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	785b      	ldrb	r3, [r3, #1]
 8008576:	f003 0310 	and.w	r3, r3, #16
 800857a:	2b00      	cmp	r3, #0
 800857c:	d008      	beq.n	8008590 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	785b      	ldrb	r3, [r3, #1]
 8008582:	f023 0310 	bic.w	r3, r3, #16
 8008586:	b2db      	uxtb	r3, r3
 8008588:	330a      	adds	r3, #10
 800858a:	b2da      	uxtb	r2, r3
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d11c      	bne.n	80085d0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	78db      	ldrb	r3, [r3, #3]
 800859a:	4618      	mov	r0, r3
 800859c:	f000 f8da 	bl	8008754 <RTC_ByteToBcd2>
 80085a0:	4603      	mov	r3, r0
 80085a2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	785b      	ldrb	r3, [r3, #1]
 80085a8:	4618      	mov	r0, r3
 80085aa:	f000 f8d3 	bl	8008754 <RTC_ByteToBcd2>
 80085ae:	4603      	mov	r3, r0
 80085b0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80085b2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	789b      	ldrb	r3, [r3, #2]
 80085b8:	4618      	mov	r0, r3
 80085ba:	f000 f8cb 	bl	8008754 <RTC_ByteToBcd2>
 80085be:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80085c0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80085ca:	4313      	orrs	r3, r2
 80085cc:	617b      	str	r3, [r7, #20]
 80085ce:	e00e      	b.n	80085ee <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	78db      	ldrb	r3, [r3, #3]
 80085d4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	785b      	ldrb	r3, [r3, #1]
 80085da:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80085dc:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80085de:	68ba      	ldr	r2, [r7, #8]
 80085e0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80085e2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80085ea:	4313      	orrs	r3, r2
 80085ec:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	22ca      	movs	r2, #202	; 0xca
 80085f4:	625a      	str	r2, [r3, #36]	; 0x24
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2253      	movs	r2, #83	; 0x53
 80085fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80085fe:	68f8      	ldr	r0, [r7, #12]
 8008600:	f000 f84c 	bl	800869c <RTC_EnterInitMode>
 8008604:	4603      	mov	r3, r0
 8008606:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008608:	7cfb      	ldrb	r3, [r7, #19]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d10c      	bne.n	8008628 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008618:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800861c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	f000 f873 	bl	800870a <RTC_ExitInitMode>
 8008624:	4603      	mov	r3, r0
 8008626:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008628:	7cfb      	ldrb	r3, [r7, #19]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d102      	bne.n	8008634 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2201      	movs	r2, #1
 8008632:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	22ff      	movs	r2, #255	; 0xff
 800863a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2200      	movs	r2, #0
 8008640:	771a      	strb	r2, [r3, #28]

  return status;
 8008642:	7cfb      	ldrb	r3, [r7, #19]
}
 8008644:	4618      	mov	r0, r3
 8008646:	371c      	adds	r7, #28
 8008648:	46bd      	mov	sp, r7
 800864a:	bd90      	pop	{r4, r7, pc}

0800864c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008654:	2300      	movs	r3, #0
 8008656:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	68da      	ldr	r2, [r3, #12]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008666:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008668:	f7fd f976 	bl	8005958 <HAL_GetTick>
 800866c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800866e:	e009      	b.n	8008684 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008670:	f7fd f972 	bl	8005958 <HAL_GetTick>
 8008674:	4602      	mov	r2, r0
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	1ad3      	subs	r3, r2, r3
 800867a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800867e:	d901      	bls.n	8008684 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008680:	2303      	movs	r3, #3
 8008682:	e007      	b.n	8008694 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	f003 0320 	and.w	r3, r3, #32
 800868e:	2b00      	cmp	r3, #0
 8008690:	d0ee      	beq.n	8008670 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	3710      	adds	r7, #16
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80086a4:	2300      	movs	r3, #0
 80086a6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80086a8:	2300      	movs	r3, #0
 80086aa:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68db      	ldr	r3, [r3, #12]
 80086b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d122      	bne.n	8008700 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	68da      	ldr	r2, [r3, #12]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80086c8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80086ca:	f7fd f945 	bl	8005958 <HAL_GetTick>
 80086ce:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80086d0:	e00c      	b.n	80086ec <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80086d2:	f7fd f941 	bl	8005958 <HAL_GetTick>
 80086d6:	4602      	mov	r2, r0
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	1ad3      	subs	r3, r2, r3
 80086dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086e0:	d904      	bls.n	80086ec <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2204      	movs	r2, #4
 80086e6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80086e8:	2301      	movs	r3, #1
 80086ea:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d102      	bne.n	8008700 <RTC_EnterInitMode+0x64>
 80086fa:	7bfb      	ldrb	r3, [r7, #15]
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d1e8      	bne.n	80086d2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008700:	7bfb      	ldrb	r3, [r7, #15]
}
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b084      	sub	sp, #16
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008712:	2300      	movs	r3, #0
 8008714:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	68da      	ldr	r2, [r3, #12]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008724:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	f003 0320 	and.w	r3, r3, #32
 8008730:	2b00      	cmp	r3, #0
 8008732:	d10a      	bne.n	800874a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f7ff ff89 	bl	800864c <HAL_RTC_WaitForSynchro>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d004      	beq.n	800874a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2204      	movs	r2, #4
 8008744:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800874a:	7bfb      	ldrb	r3, [r7, #15]
}
 800874c:	4618      	mov	r0, r3
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8008754:	b480      	push	{r7}
 8008756:	b085      	sub	sp, #20
 8008758:	af00      	add	r7, sp, #0
 800875a:	4603      	mov	r3, r0
 800875c:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800875e:	2300      	movs	r3, #0
 8008760:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8008762:	e005      	b.n	8008770 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008764:	7bfb      	ldrb	r3, [r7, #15]
 8008766:	3301      	adds	r3, #1
 8008768:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800876a:	79fb      	ldrb	r3, [r7, #7]
 800876c:	3b0a      	subs	r3, #10
 800876e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8008770:	79fb      	ldrb	r3, [r7, #7]
 8008772:	2b09      	cmp	r3, #9
 8008774:	d8f6      	bhi.n	8008764 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8008776:	7bfb      	ldrb	r3, [r7, #15]
 8008778:	011b      	lsls	r3, r3, #4
 800877a:	b2da      	uxtb	r2, r3
 800877c:	79fb      	ldrb	r3, [r7, #7]
 800877e:	4313      	orrs	r3, r2
 8008780:	b2db      	uxtb	r3, r3
}
 8008782:	4618      	mov	r0, r3
 8008784:	3714      	adds	r7, #20
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr

0800878e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b082      	sub	sp, #8
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d101      	bne.n	80087a0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800879c:	2301      	movs	r3, #1
 800879e:	e07b      	b.n	8008898 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d108      	bne.n	80087ba <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087b0:	d009      	beq.n	80087c6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	61da      	str	r2, [r3, #28]
 80087b8:	e005      	b.n	80087c6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d106      	bne.n	80087e6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f7fc fc2f 	bl	8005044 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2202      	movs	r2, #2
 80087ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087fc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800880e:	431a      	orrs	r2, r3
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008818:	431a      	orrs	r2, r3
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	691b      	ldr	r3, [r3, #16]
 800881e:	f003 0302 	and.w	r3, r3, #2
 8008822:	431a      	orrs	r2, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	695b      	ldr	r3, [r3, #20]
 8008828:	f003 0301 	and.w	r3, r3, #1
 800882c:	431a      	orrs	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	699b      	ldr	r3, [r3, #24]
 8008832:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008836:	431a      	orrs	r2, r3
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	69db      	ldr	r3, [r3, #28]
 800883c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008840:	431a      	orrs	r2, r3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6a1b      	ldr	r3, [r3, #32]
 8008846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800884a:	ea42 0103 	orr.w	r1, r2, r3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008852:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	430a      	orrs	r2, r1
 800885c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	699b      	ldr	r3, [r3, #24]
 8008862:	0c1b      	lsrs	r3, r3, #16
 8008864:	f003 0104 	and.w	r1, r3, #4
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886c:	f003 0210 	and.w	r2, r3, #16
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	430a      	orrs	r2, r1
 8008876:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	69da      	ldr	r2, [r3, #28]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008886:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2201      	movs	r2, #1
 8008892:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	3708      	adds	r7, #8
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d101      	bne.n	80088b2 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	e01a      	b.n	80088e8 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2202      	movs	r2, #2
 80088b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088c8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f7fc fc02 	bl	80050d4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2200      	movs	r2, #0
 80088d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b088      	sub	sp, #32
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	60f8      	str	r0, [r7, #12]
 80088f8:	60b9      	str	r1, [r7, #8]
 80088fa:	603b      	str	r3, [r7, #0]
 80088fc:	4613      	mov	r3, r2
 80088fe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008900:	2300      	movs	r3, #0
 8008902:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800890a:	2b01      	cmp	r3, #1
 800890c:	d101      	bne.n	8008912 <HAL_SPI_Transmit+0x22>
 800890e:	2302      	movs	r3, #2
 8008910:	e126      	b.n	8008b60 <HAL_SPI_Transmit+0x270>
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2201      	movs	r2, #1
 8008916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800891a:	f7fd f81d 	bl	8005958 <HAL_GetTick>
 800891e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008920:	88fb      	ldrh	r3, [r7, #6]
 8008922:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800892a:	b2db      	uxtb	r3, r3
 800892c:	2b01      	cmp	r3, #1
 800892e:	d002      	beq.n	8008936 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008930:	2302      	movs	r3, #2
 8008932:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008934:	e10b      	b.n	8008b4e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d002      	beq.n	8008942 <HAL_SPI_Transmit+0x52>
 800893c:	88fb      	ldrh	r3, [r7, #6]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d102      	bne.n	8008948 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008942:	2301      	movs	r3, #1
 8008944:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008946:	e102      	b.n	8008b4e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2203      	movs	r2, #3
 800894c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2200      	movs	r2, #0
 8008954:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	88fa      	ldrh	r2, [r7, #6]
 8008960:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	88fa      	ldrh	r2, [r7, #6]
 8008966:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2200      	movs	r2, #0
 800896c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2200      	movs	r2, #0
 8008972:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2200      	movs	r2, #0
 8008978:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2200      	movs	r2, #0
 800897e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800898e:	d10f      	bne.n	80089b0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800899e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80089ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ba:	2b40      	cmp	r3, #64	; 0x40
 80089bc:	d007      	beq.n	80089ce <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089d6:	d14b      	bne.n	8008a70 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d002      	beq.n	80089e6 <HAL_SPI_Transmit+0xf6>
 80089e0:	8afb      	ldrh	r3, [r7, #22]
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d13e      	bne.n	8008a64 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ea:	881a      	ldrh	r2, [r3, #0]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f6:	1c9a      	adds	r2, r3, #2
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	3b01      	subs	r3, #1
 8008a04:	b29a      	uxth	r2, r3
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008a0a:	e02b      	b.n	8008a64 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	f003 0302 	and.w	r3, r3, #2
 8008a16:	2b02      	cmp	r3, #2
 8008a18:	d112      	bne.n	8008a40 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a1e:	881a      	ldrh	r2, [r3, #0]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a2a:	1c9a      	adds	r2, r3, #2
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	3b01      	subs	r3, #1
 8008a38:	b29a      	uxth	r2, r3
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	86da      	strh	r2, [r3, #54]	; 0x36
 8008a3e:	e011      	b.n	8008a64 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a40:	f7fc ff8a 	bl	8005958 <HAL_GetTick>
 8008a44:	4602      	mov	r2, r0
 8008a46:	69bb      	ldr	r3, [r7, #24]
 8008a48:	1ad3      	subs	r3, r2, r3
 8008a4a:	683a      	ldr	r2, [r7, #0]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d803      	bhi.n	8008a58 <HAL_SPI_Transmit+0x168>
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a56:	d102      	bne.n	8008a5e <HAL_SPI_Transmit+0x16e>
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d102      	bne.n	8008a64 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008a5e:	2303      	movs	r3, #3
 8008a60:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008a62:	e074      	b.n	8008b4e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d1ce      	bne.n	8008a0c <HAL_SPI_Transmit+0x11c>
 8008a6e:	e04c      	b.n	8008b0a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d002      	beq.n	8008a7e <HAL_SPI_Transmit+0x18e>
 8008a78:	8afb      	ldrh	r3, [r7, #22]
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d140      	bne.n	8008b00 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	330c      	adds	r3, #12
 8008a88:	7812      	ldrb	r2, [r2, #0]
 8008a8a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a90:	1c5a      	adds	r2, r3, #1
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	3b01      	subs	r3, #1
 8008a9e:	b29a      	uxth	r2, r3
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008aa4:	e02c      	b.n	8008b00 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	f003 0302 	and.w	r3, r3, #2
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	d113      	bne.n	8008adc <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	330c      	adds	r3, #12
 8008abe:	7812      	ldrb	r2, [r2, #0]
 8008ac0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac6:	1c5a      	adds	r2, r3, #1
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	b29a      	uxth	r2, r3
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	86da      	strh	r2, [r3, #54]	; 0x36
 8008ada:	e011      	b.n	8008b00 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008adc:	f7fc ff3c 	bl	8005958 <HAL_GetTick>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	1ad3      	subs	r3, r2, r3
 8008ae6:	683a      	ldr	r2, [r7, #0]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d803      	bhi.n	8008af4 <HAL_SPI_Transmit+0x204>
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008af2:	d102      	bne.n	8008afa <HAL_SPI_Transmit+0x20a>
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d102      	bne.n	8008b00 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008afa:	2303      	movs	r3, #3
 8008afc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008afe:	e026      	b.n	8008b4e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d1cd      	bne.n	8008aa6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008b0a:	69ba      	ldr	r2, [r7, #24]
 8008b0c:	6839      	ldr	r1, [r7, #0]
 8008b0e:	68f8      	ldr	r0, [r7, #12]
 8008b10:	f000 fa62 	bl	8008fd8 <SPI_EndRxTxTransaction>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d002      	beq.n	8008b20 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2220      	movs	r2, #32
 8008b1e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d10a      	bne.n	8008b3e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b28:	2300      	movs	r3, #0
 8008b2a:	613b      	str	r3, [r7, #16]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	68db      	ldr	r3, [r3, #12]
 8008b32:	613b      	str	r3, [r7, #16]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	613b      	str	r3, [r7, #16]
 8008b3c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d002      	beq.n	8008b4c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	77fb      	strb	r3, [r7, #31]
 8008b4a:	e000      	b.n	8008b4e <HAL_SPI_Transmit+0x25e>
  }

error:
 8008b4c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2201      	movs	r2, #1
 8008b52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008b5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3720      	adds	r7, #32
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b08c      	sub	sp, #48	; 0x30
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	607a      	str	r2, [r7, #4]
 8008b74:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008b76:	2301      	movs	r3, #1
 8008b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d101      	bne.n	8008b8e <HAL_SPI_TransmitReceive+0x26>
 8008b8a:	2302      	movs	r3, #2
 8008b8c:	e18a      	b.n	8008ea4 <HAL_SPI_TransmitReceive+0x33c>
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2201      	movs	r2, #1
 8008b92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b96:	f7fc fedf 	bl	8005958 <HAL_GetTick>
 8008b9a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ba2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008bac:	887b      	ldrh	r3, [r7, #2]
 8008bae:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008bb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d00f      	beq.n	8008bd8 <HAL_SPI_TransmitReceive+0x70>
 8008bb8:	69fb      	ldr	r3, [r7, #28]
 8008bba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008bbe:	d107      	bne.n	8008bd0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d103      	bne.n	8008bd0 <HAL_SPI_TransmitReceive+0x68>
 8008bc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008bcc:	2b04      	cmp	r3, #4
 8008bce:	d003      	beq.n	8008bd8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008bd0:	2302      	movs	r3, #2
 8008bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008bd6:	e15b      	b.n	8008e90 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d005      	beq.n	8008bea <HAL_SPI_TransmitReceive+0x82>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d002      	beq.n	8008bea <HAL_SPI_TransmitReceive+0x82>
 8008be4:	887b      	ldrh	r3, [r7, #2]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d103      	bne.n	8008bf2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008bf0:	e14e      	b.n	8008e90 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	2b04      	cmp	r3, #4
 8008bfc:	d003      	beq.n	8008c06 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2205      	movs	r2, #5
 8008c02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	887a      	ldrh	r2, [r7, #2]
 8008c16:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	887a      	ldrh	r2, [r7, #2]
 8008c1c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	68ba      	ldr	r2, [r7, #8]
 8008c22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	887a      	ldrh	r2, [r7, #2]
 8008c28:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	887a      	ldrh	r2, [r7, #2]
 8008c2e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2200      	movs	r2, #0
 8008c34:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c46:	2b40      	cmp	r3, #64	; 0x40
 8008c48:	d007      	beq.n	8008c5a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c62:	d178      	bne.n	8008d56 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d002      	beq.n	8008c72 <HAL_SPI_TransmitReceive+0x10a>
 8008c6c:	8b7b      	ldrh	r3, [r7, #26]
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d166      	bne.n	8008d40 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c76:	881a      	ldrh	r2, [r3, #0]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c82:	1c9a      	adds	r2, r3, #2
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	3b01      	subs	r3, #1
 8008c90:	b29a      	uxth	r2, r3
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c96:	e053      	b.n	8008d40 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	f003 0302 	and.w	r3, r3, #2
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	d11b      	bne.n	8008cde <HAL_SPI_TransmitReceive+0x176>
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d016      	beq.n	8008cde <HAL_SPI_TransmitReceive+0x176>
 8008cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d113      	bne.n	8008cde <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cba:	881a      	ldrh	r2, [r3, #0]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc6:	1c9a      	adds	r2, r3, #2
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	3b01      	subs	r3, #1
 8008cd4:	b29a      	uxth	r2, r3
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	f003 0301 	and.w	r3, r3, #1
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d119      	bne.n	8008d20 <HAL_SPI_TransmitReceive+0x1b8>
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d014      	beq.n	8008d20 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	68da      	ldr	r2, [r3, #12]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d00:	b292      	uxth	r2, r2
 8008d02:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d08:	1c9a      	adds	r2, r3, #2
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	3b01      	subs	r3, #1
 8008d16:	b29a      	uxth	r2, r3
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008d20:	f7fc fe1a 	bl	8005958 <HAL_GetTick>
 8008d24:	4602      	mov	r2, r0
 8008d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d28:	1ad3      	subs	r3, r2, r3
 8008d2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d807      	bhi.n	8008d40 <HAL_SPI_TransmitReceive+0x1d8>
 8008d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d36:	d003      	beq.n	8008d40 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008d38:	2303      	movs	r3, #3
 8008d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008d3e:	e0a7      	b.n	8008e90 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d1a6      	bne.n	8008c98 <HAL_SPI_TransmitReceive+0x130>
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d1a1      	bne.n	8008c98 <HAL_SPI_TransmitReceive+0x130>
 8008d54:	e07c      	b.n	8008e50 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d002      	beq.n	8008d64 <HAL_SPI_TransmitReceive+0x1fc>
 8008d5e:	8b7b      	ldrh	r3, [r7, #26]
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d16b      	bne.n	8008e3c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	330c      	adds	r3, #12
 8008d6e:	7812      	ldrb	r2, [r2, #0]
 8008d70:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d76:	1c5a      	adds	r2, r3, #1
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	3b01      	subs	r3, #1
 8008d84:	b29a      	uxth	r2, r3
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d8a:	e057      	b.n	8008e3c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	f003 0302 	and.w	r3, r3, #2
 8008d96:	2b02      	cmp	r3, #2
 8008d98:	d11c      	bne.n	8008dd4 <HAL_SPI_TransmitReceive+0x26c>
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d017      	beq.n	8008dd4 <HAL_SPI_TransmitReceive+0x26c>
 8008da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d114      	bne.n	8008dd4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	330c      	adds	r3, #12
 8008db4:	7812      	ldrb	r2, [r2, #0]
 8008db6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dbc:	1c5a      	adds	r2, r3, #1
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	3b01      	subs	r3, #1
 8008dca:	b29a      	uxth	r2, r3
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	f003 0301 	and.w	r3, r3, #1
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d119      	bne.n	8008e16 <HAL_SPI_TransmitReceive+0x2ae>
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d014      	beq.n	8008e16 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	68da      	ldr	r2, [r3, #12]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df6:	b2d2      	uxtb	r2, r2
 8008df8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dfe:	1c5a      	adds	r2, r3, #1
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	3b01      	subs	r3, #1
 8008e0c:	b29a      	uxth	r2, r3
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008e12:	2301      	movs	r3, #1
 8008e14:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008e16:	f7fc fd9f 	bl	8005958 <HAL_GetTick>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1e:	1ad3      	subs	r3, r2, r3
 8008e20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d803      	bhi.n	8008e2e <HAL_SPI_TransmitReceive+0x2c6>
 8008e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e2c:	d102      	bne.n	8008e34 <HAL_SPI_TransmitReceive+0x2cc>
 8008e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d103      	bne.n	8008e3c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008e34:	2303      	movs	r3, #3
 8008e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008e3a:	e029      	b.n	8008e90 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1a2      	bne.n	8008d8c <HAL_SPI_TransmitReceive+0x224>
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d19d      	bne.n	8008d8c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008e54:	68f8      	ldr	r0, [r7, #12]
 8008e56:	f000 f8bf 	bl	8008fd8 <SPI_EndRxTxTransaction>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d006      	beq.n	8008e6e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008e60:	2301      	movs	r3, #1
 8008e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2220      	movs	r2, #32
 8008e6a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008e6c:	e010      	b.n	8008e90 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d10b      	bne.n	8008e8e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008e76:	2300      	movs	r3, #0
 8008e78:	617b      	str	r3, [r7, #20]
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	617b      	str	r3, [r7, #20]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	617b      	str	r3, [r7, #20]
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	e000      	b.n	8008e90 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008e8e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2201      	movs	r2, #1
 8008e94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008ea0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3730      	adds	r7, #48	; 0x30
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008eba:	b2db      	uxtb	r3, r3
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	370c      	adds	r7, #12
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b088      	sub	sp, #32
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	60b9      	str	r1, [r7, #8]
 8008ed2:	603b      	str	r3, [r7, #0]
 8008ed4:	4613      	mov	r3, r2
 8008ed6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008ed8:	f7fc fd3e 	bl	8005958 <HAL_GetTick>
 8008edc:	4602      	mov	r2, r0
 8008ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee0:	1a9b      	subs	r3, r3, r2
 8008ee2:	683a      	ldr	r2, [r7, #0]
 8008ee4:	4413      	add	r3, r2
 8008ee6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008ee8:	f7fc fd36 	bl	8005958 <HAL_GetTick>
 8008eec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008eee:	4b39      	ldr	r3, [pc, #228]	; (8008fd4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	015b      	lsls	r3, r3, #5
 8008ef4:	0d1b      	lsrs	r3, r3, #20
 8008ef6:	69fa      	ldr	r2, [r7, #28]
 8008ef8:	fb02 f303 	mul.w	r3, r2, r3
 8008efc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008efe:	e054      	b.n	8008faa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f06:	d050      	beq.n	8008faa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008f08:	f7fc fd26 	bl	8005958 <HAL_GetTick>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	1ad3      	subs	r3, r2, r3
 8008f12:	69fa      	ldr	r2, [r7, #28]
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d902      	bls.n	8008f1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008f18:	69fb      	ldr	r3, [r7, #28]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d13d      	bne.n	8008f9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	685a      	ldr	r2, [r3, #4]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008f2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f36:	d111      	bne.n	8008f5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f40:	d004      	beq.n	8008f4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	689b      	ldr	r3, [r3, #8]
 8008f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f4a:	d107      	bne.n	8008f5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f64:	d10f      	bne.n	8008f86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f74:	601a      	str	r2, [r3, #0]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008f84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2201      	movs	r2, #1
 8008f8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2200      	movs	r2, #0
 8008f92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008f96:	2303      	movs	r3, #3
 8008f98:	e017      	b.n	8008fca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d101      	bne.n	8008fa4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	3b01      	subs	r3, #1
 8008fa8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	689a      	ldr	r2, [r3, #8]
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	4013      	ands	r3, r2
 8008fb4:	68ba      	ldr	r2, [r7, #8]
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	bf0c      	ite	eq
 8008fba:	2301      	moveq	r3, #1
 8008fbc:	2300      	movne	r3, #0
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	79fb      	ldrb	r3, [r7, #7]
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d19b      	bne.n	8008f00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3720      	adds	r7, #32
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	20000158 	.word	0x20000158

08008fd8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b088      	sub	sp, #32
 8008fdc:	af02      	add	r7, sp, #8
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008fe4:	4b1b      	ldr	r3, [pc, #108]	; (8009054 <SPI_EndRxTxTransaction+0x7c>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a1b      	ldr	r2, [pc, #108]	; (8009058 <SPI_EndRxTxTransaction+0x80>)
 8008fea:	fba2 2303 	umull	r2, r3, r2, r3
 8008fee:	0d5b      	lsrs	r3, r3, #21
 8008ff0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008ff4:	fb02 f303 	mul.w	r3, r2, r3
 8008ff8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009002:	d112      	bne.n	800902a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	9300      	str	r3, [sp, #0]
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	2200      	movs	r2, #0
 800900c:	2180      	movs	r1, #128	; 0x80
 800900e:	68f8      	ldr	r0, [r7, #12]
 8009010:	f7ff ff5a 	bl	8008ec8 <SPI_WaitFlagStateUntilTimeout>
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d016      	beq.n	8009048 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800901e:	f043 0220 	orr.w	r2, r3, #32
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009026:	2303      	movs	r3, #3
 8009028:	e00f      	b.n	800904a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d00a      	beq.n	8009046 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	3b01      	subs	r3, #1
 8009034:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009040:	2b80      	cmp	r3, #128	; 0x80
 8009042:	d0f2      	beq.n	800902a <SPI_EndRxTxTransaction+0x52>
 8009044:	e000      	b.n	8009048 <SPI_EndRxTxTransaction+0x70>
        break;
 8009046:	bf00      	nop
  }

  return HAL_OK;
 8009048:	2300      	movs	r3, #0
}
 800904a:	4618      	mov	r0, r3
 800904c:	3718      	adds	r7, #24
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	20000158 	.word	0x20000158
 8009058:	165e9f81 	.word	0x165e9f81

0800905c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d101      	bne.n	800906e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800906a:	2301      	movs	r3, #1
 800906c:	e03f      	b.n	80090ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009074:	b2db      	uxtb	r3, r3
 8009076:	2b00      	cmp	r3, #0
 8009078:	d106      	bne.n	8009088 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2200      	movs	r2, #0
 800907e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f7fc fa78 	bl	8005578 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2224      	movs	r2, #36	; 0x24
 800908c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	68da      	ldr	r2, [r3, #12]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800909e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 f9cb 	bl	800943c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	691a      	ldr	r2, [r3, #16]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80090b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	695a      	ldr	r2, [r3, #20]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80090c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	68da      	ldr	r2, [r3, #12]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80090d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2200      	movs	r2, #0
 80090da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2220      	movs	r2, #32
 80090e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2220      	movs	r2, #32
 80090e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80090ec:	2300      	movs	r3, #0
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3708      	adds	r7, #8
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b08a      	sub	sp, #40	; 0x28
 80090fa:	af02      	add	r7, sp, #8
 80090fc:	60f8      	str	r0, [r7, #12]
 80090fe:	60b9      	str	r1, [r7, #8]
 8009100:	603b      	str	r3, [r7, #0]
 8009102:	4613      	mov	r3, r2
 8009104:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009106:	2300      	movs	r3, #0
 8009108:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009110:	b2db      	uxtb	r3, r3
 8009112:	2b20      	cmp	r3, #32
 8009114:	d17c      	bne.n	8009210 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d002      	beq.n	8009122 <HAL_UART_Transmit+0x2c>
 800911c:	88fb      	ldrh	r3, [r7, #6]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d101      	bne.n	8009126 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	e075      	b.n	8009212 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800912c:	2b01      	cmp	r3, #1
 800912e:	d101      	bne.n	8009134 <HAL_UART_Transmit+0x3e>
 8009130:	2302      	movs	r3, #2
 8009132:	e06e      	b.n	8009212 <HAL_UART_Transmit+0x11c>
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2201      	movs	r2, #1
 8009138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2200      	movs	r2, #0
 8009140:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2221      	movs	r2, #33	; 0x21
 8009146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800914a:	f7fc fc05 	bl	8005958 <HAL_GetTick>
 800914e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	88fa      	ldrh	r2, [r7, #6]
 8009154:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	88fa      	ldrh	r2, [r7, #6]
 800915a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009164:	d108      	bne.n	8009178 <HAL_UART_Transmit+0x82>
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	691b      	ldr	r3, [r3, #16]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d104      	bne.n	8009178 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800916e:	2300      	movs	r3, #0
 8009170:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	61bb      	str	r3, [r7, #24]
 8009176:	e003      	b.n	8009180 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800917c:	2300      	movs	r3, #0
 800917e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2200      	movs	r2, #0
 8009184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009188:	e02a      	b.n	80091e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	9300      	str	r3, [sp, #0]
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	2200      	movs	r2, #0
 8009192:	2180      	movs	r1, #128	; 0x80
 8009194:	68f8      	ldr	r0, [r7, #12]
 8009196:	f000 f8e2 	bl	800935e <UART_WaitOnFlagUntilTimeout>
 800919a:	4603      	mov	r3, r0
 800919c:	2b00      	cmp	r3, #0
 800919e:	d001      	beq.n	80091a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80091a0:	2303      	movs	r3, #3
 80091a2:	e036      	b.n	8009212 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80091a4:	69fb      	ldr	r3, [r7, #28]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d10b      	bne.n	80091c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80091aa:	69bb      	ldr	r3, [r7, #24]
 80091ac:	881b      	ldrh	r3, [r3, #0]
 80091ae:	461a      	mov	r2, r3
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	3302      	adds	r3, #2
 80091be:	61bb      	str	r3, [r7, #24]
 80091c0:	e007      	b.n	80091d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80091c2:	69fb      	ldr	r3, [r7, #28]
 80091c4:	781a      	ldrb	r2, [r3, #0]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	3301      	adds	r3, #1
 80091d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	3b01      	subs	r3, #1
 80091da:	b29a      	uxth	r2, r3
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d1cf      	bne.n	800918a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	9300      	str	r3, [sp, #0]
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	2200      	movs	r2, #0
 80091f2:	2140      	movs	r1, #64	; 0x40
 80091f4:	68f8      	ldr	r0, [r7, #12]
 80091f6:	f000 f8b2 	bl	800935e <UART_WaitOnFlagUntilTimeout>
 80091fa:	4603      	mov	r3, r0
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d001      	beq.n	8009204 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009200:	2303      	movs	r3, #3
 8009202:	e006      	b.n	8009212 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2220      	movs	r2, #32
 8009208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800920c:	2300      	movs	r3, #0
 800920e:	e000      	b.n	8009212 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009210:	2302      	movs	r3, #2
  }
}
 8009212:	4618      	mov	r0, r3
 8009214:	3720      	adds	r7, #32
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b08a      	sub	sp, #40	; 0x28
 800921e:	af02      	add	r7, sp, #8
 8009220:	60f8      	str	r0, [r7, #12]
 8009222:	60b9      	str	r1, [r7, #8]
 8009224:	603b      	str	r3, [r7, #0]
 8009226:	4613      	mov	r3, r2
 8009228:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800922a:	2300      	movs	r3, #0
 800922c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009234:	b2db      	uxtb	r3, r3
 8009236:	2b20      	cmp	r3, #32
 8009238:	f040 808c 	bne.w	8009354 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d002      	beq.n	8009248 <HAL_UART_Receive+0x2e>
 8009242:	88fb      	ldrh	r3, [r7, #6]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d101      	bne.n	800924c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8009248:	2301      	movs	r3, #1
 800924a:	e084      	b.n	8009356 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009252:	2b01      	cmp	r3, #1
 8009254:	d101      	bne.n	800925a <HAL_UART_Receive+0x40>
 8009256:	2302      	movs	r3, #2
 8009258:	e07d      	b.n	8009356 <HAL_UART_Receive+0x13c>
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2201      	movs	r2, #1
 800925e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2200      	movs	r2, #0
 8009266:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2222      	movs	r2, #34	; 0x22
 800926c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2200      	movs	r2, #0
 8009274:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009276:	f7fc fb6f 	bl	8005958 <HAL_GetTick>
 800927a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	88fa      	ldrh	r2, [r7, #6]
 8009280:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	88fa      	ldrh	r2, [r7, #6]
 8009286:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009290:	d108      	bne.n	80092a4 <HAL_UART_Receive+0x8a>
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	691b      	ldr	r3, [r3, #16]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d104      	bne.n	80092a4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800929a:	2300      	movs	r3, #0
 800929c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	61bb      	str	r3, [r7, #24]
 80092a2:	e003      	b.n	80092ac <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80092a8:	2300      	movs	r3, #0
 80092aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2200      	movs	r2, #0
 80092b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80092b4:	e043      	b.n	800933e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	9300      	str	r3, [sp, #0]
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	2200      	movs	r2, #0
 80092be:	2120      	movs	r1, #32
 80092c0:	68f8      	ldr	r0, [r7, #12]
 80092c2:	f000 f84c 	bl	800935e <UART_WaitOnFlagUntilTimeout>
 80092c6:	4603      	mov	r3, r0
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d001      	beq.n	80092d0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80092cc:	2303      	movs	r3, #3
 80092ce:	e042      	b.n	8009356 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80092d0:	69fb      	ldr	r3, [r7, #28]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d10c      	bne.n	80092f0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	b29b      	uxth	r3, r3
 80092de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092e2:	b29a      	uxth	r2, r3
 80092e4:	69bb      	ldr	r3, [r7, #24]
 80092e6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80092e8:	69bb      	ldr	r3, [r7, #24]
 80092ea:	3302      	adds	r3, #2
 80092ec:	61bb      	str	r3, [r7, #24]
 80092ee:	e01f      	b.n	8009330 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092f8:	d007      	beq.n	800930a <HAL_UART_Receive+0xf0>
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d10a      	bne.n	8009318 <HAL_UART_Receive+0xfe>
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	691b      	ldr	r3, [r3, #16]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d106      	bne.n	8009318 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	b2da      	uxtb	r2, r3
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	701a      	strb	r2, [r3, #0]
 8009316:	e008      	b.n	800932a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	b2db      	uxtb	r3, r3
 8009320:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009324:	b2da      	uxtb	r2, r3
 8009326:	69fb      	ldr	r3, [r7, #28]
 8009328:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800932a:	69fb      	ldr	r3, [r7, #28]
 800932c:	3301      	adds	r3, #1
 800932e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009334:	b29b      	uxth	r3, r3
 8009336:	3b01      	subs	r3, #1
 8009338:	b29a      	uxth	r2, r3
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009342:	b29b      	uxth	r3, r3
 8009344:	2b00      	cmp	r3, #0
 8009346:	d1b6      	bne.n	80092b6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2220      	movs	r2, #32
 800934c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8009350:	2300      	movs	r3, #0
 8009352:	e000      	b.n	8009356 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8009354:	2302      	movs	r3, #2
  }
}
 8009356:	4618      	mov	r0, r3
 8009358:	3720      	adds	r7, #32
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}

0800935e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800935e:	b580      	push	{r7, lr}
 8009360:	b090      	sub	sp, #64	; 0x40
 8009362:	af00      	add	r7, sp, #0
 8009364:	60f8      	str	r0, [r7, #12]
 8009366:	60b9      	str	r1, [r7, #8]
 8009368:	603b      	str	r3, [r7, #0]
 800936a:	4613      	mov	r3, r2
 800936c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800936e:	e050      	b.n	8009412 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009370:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009372:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009376:	d04c      	beq.n	8009412 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009378:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800937a:	2b00      	cmp	r3, #0
 800937c:	d007      	beq.n	800938e <UART_WaitOnFlagUntilTimeout+0x30>
 800937e:	f7fc faeb 	bl	8005958 <HAL_GetTick>
 8009382:	4602      	mov	r2, r0
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	1ad3      	subs	r3, r2, r3
 8009388:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800938a:	429a      	cmp	r2, r3
 800938c:	d241      	bcs.n	8009412 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	330c      	adds	r3, #12
 8009394:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009398:	e853 3f00 	ldrex	r3, [r3]
 800939c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800939e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80093a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	330c      	adds	r3, #12
 80093ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80093ae:	637a      	str	r2, [r7, #52]	; 0x34
 80093b0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80093b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093b6:	e841 2300 	strex	r3, r2, [r1]
 80093ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80093bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d1e5      	bne.n	800938e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	3314      	adds	r3, #20
 80093c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	e853 3f00 	ldrex	r3, [r3]
 80093d0:	613b      	str	r3, [r7, #16]
   return(result);
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	f023 0301 	bic.w	r3, r3, #1
 80093d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	3314      	adds	r3, #20
 80093e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093e2:	623a      	str	r2, [r7, #32]
 80093e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e6:	69f9      	ldr	r1, [r7, #28]
 80093e8:	6a3a      	ldr	r2, [r7, #32]
 80093ea:	e841 2300 	strex	r3, r2, [r1]
 80093ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80093f0:	69bb      	ldr	r3, [r7, #24]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d1e5      	bne.n	80093c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2220      	movs	r2, #32
 80093fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2220      	movs	r2, #32
 8009402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2200      	movs	r2, #0
 800940a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800940e:	2303      	movs	r3, #3
 8009410:	e00f      	b.n	8009432 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	4013      	ands	r3, r2
 800941c:	68ba      	ldr	r2, [r7, #8]
 800941e:	429a      	cmp	r2, r3
 8009420:	bf0c      	ite	eq
 8009422:	2301      	moveq	r3, #1
 8009424:	2300      	movne	r3, #0
 8009426:	b2db      	uxtb	r3, r3
 8009428:	461a      	mov	r2, r3
 800942a:	79fb      	ldrb	r3, [r7, #7]
 800942c:	429a      	cmp	r2, r3
 800942e:	d09f      	beq.n	8009370 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009430:	2300      	movs	r3, #0
}
 8009432:	4618      	mov	r0, r3
 8009434:	3740      	adds	r7, #64	; 0x40
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
	...

0800943c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800943c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009440:	b0c0      	sub	sp, #256	; 0x100
 8009442:	af00      	add	r7, sp, #0
 8009444:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	691b      	ldr	r3, [r3, #16]
 8009450:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009458:	68d9      	ldr	r1, [r3, #12]
 800945a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	ea40 0301 	orr.w	r3, r0, r1
 8009464:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800946a:	689a      	ldr	r2, [r3, #8]
 800946c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009470:	691b      	ldr	r3, [r3, #16]
 8009472:	431a      	orrs	r2, r3
 8009474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009478:	695b      	ldr	r3, [r3, #20]
 800947a:	431a      	orrs	r2, r3
 800947c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009480:	69db      	ldr	r3, [r3, #28]
 8009482:	4313      	orrs	r3, r2
 8009484:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009494:	f021 010c 	bic.w	r1, r1, #12
 8009498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800949c:	681a      	ldr	r2, [r3, #0]
 800949e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80094a2:	430b      	orrs	r3, r1
 80094a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80094a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	695b      	ldr	r3, [r3, #20]
 80094ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80094b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094b6:	6999      	ldr	r1, [r3, #24]
 80094b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	ea40 0301 	orr.w	r3, r0, r1
 80094c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80094c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	4b8f      	ldr	r3, [pc, #572]	; (8009708 <UART_SetConfig+0x2cc>)
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d005      	beq.n	80094dc <UART_SetConfig+0xa0>
 80094d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	4b8d      	ldr	r3, [pc, #564]	; (800970c <UART_SetConfig+0x2d0>)
 80094d8:	429a      	cmp	r2, r3
 80094da:	d104      	bne.n	80094e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80094dc:	f7fe fd4e 	bl	8007f7c <HAL_RCC_GetPCLK2Freq>
 80094e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80094e4:	e003      	b.n	80094ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80094e6:	f7fe fd35 	bl	8007f54 <HAL_RCC_GetPCLK1Freq>
 80094ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094f2:	69db      	ldr	r3, [r3, #28]
 80094f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094f8:	f040 810c 	bne.w	8009714 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80094fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009500:	2200      	movs	r2, #0
 8009502:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009506:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800950a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800950e:	4622      	mov	r2, r4
 8009510:	462b      	mov	r3, r5
 8009512:	1891      	adds	r1, r2, r2
 8009514:	65b9      	str	r1, [r7, #88]	; 0x58
 8009516:	415b      	adcs	r3, r3
 8009518:	65fb      	str	r3, [r7, #92]	; 0x5c
 800951a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800951e:	4621      	mov	r1, r4
 8009520:	eb12 0801 	adds.w	r8, r2, r1
 8009524:	4629      	mov	r1, r5
 8009526:	eb43 0901 	adc.w	r9, r3, r1
 800952a:	f04f 0200 	mov.w	r2, #0
 800952e:	f04f 0300 	mov.w	r3, #0
 8009532:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009536:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800953a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800953e:	4690      	mov	r8, r2
 8009540:	4699      	mov	r9, r3
 8009542:	4623      	mov	r3, r4
 8009544:	eb18 0303 	adds.w	r3, r8, r3
 8009548:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800954c:	462b      	mov	r3, r5
 800954e:	eb49 0303 	adc.w	r3, r9, r3
 8009552:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009562:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009566:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800956a:	460b      	mov	r3, r1
 800956c:	18db      	adds	r3, r3, r3
 800956e:	653b      	str	r3, [r7, #80]	; 0x50
 8009570:	4613      	mov	r3, r2
 8009572:	eb42 0303 	adc.w	r3, r2, r3
 8009576:	657b      	str	r3, [r7, #84]	; 0x54
 8009578:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800957c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009580:	f7f7 fb92 	bl	8000ca8 <__aeabi_uldivmod>
 8009584:	4602      	mov	r2, r0
 8009586:	460b      	mov	r3, r1
 8009588:	4b61      	ldr	r3, [pc, #388]	; (8009710 <UART_SetConfig+0x2d4>)
 800958a:	fba3 2302 	umull	r2, r3, r3, r2
 800958e:	095b      	lsrs	r3, r3, #5
 8009590:	011c      	lsls	r4, r3, #4
 8009592:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009596:	2200      	movs	r2, #0
 8009598:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800959c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80095a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80095a4:	4642      	mov	r2, r8
 80095a6:	464b      	mov	r3, r9
 80095a8:	1891      	adds	r1, r2, r2
 80095aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80095ac:	415b      	adcs	r3, r3
 80095ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80095b4:	4641      	mov	r1, r8
 80095b6:	eb12 0a01 	adds.w	sl, r2, r1
 80095ba:	4649      	mov	r1, r9
 80095bc:	eb43 0b01 	adc.w	fp, r3, r1
 80095c0:	f04f 0200 	mov.w	r2, #0
 80095c4:	f04f 0300 	mov.w	r3, #0
 80095c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80095cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80095d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80095d4:	4692      	mov	sl, r2
 80095d6:	469b      	mov	fp, r3
 80095d8:	4643      	mov	r3, r8
 80095da:	eb1a 0303 	adds.w	r3, sl, r3
 80095de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80095e2:	464b      	mov	r3, r9
 80095e4:	eb4b 0303 	adc.w	r3, fp, r3
 80095e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80095ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	2200      	movs	r2, #0
 80095f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80095f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80095fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009600:	460b      	mov	r3, r1
 8009602:	18db      	adds	r3, r3, r3
 8009604:	643b      	str	r3, [r7, #64]	; 0x40
 8009606:	4613      	mov	r3, r2
 8009608:	eb42 0303 	adc.w	r3, r2, r3
 800960c:	647b      	str	r3, [r7, #68]	; 0x44
 800960e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009612:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009616:	f7f7 fb47 	bl	8000ca8 <__aeabi_uldivmod>
 800961a:	4602      	mov	r2, r0
 800961c:	460b      	mov	r3, r1
 800961e:	4611      	mov	r1, r2
 8009620:	4b3b      	ldr	r3, [pc, #236]	; (8009710 <UART_SetConfig+0x2d4>)
 8009622:	fba3 2301 	umull	r2, r3, r3, r1
 8009626:	095b      	lsrs	r3, r3, #5
 8009628:	2264      	movs	r2, #100	; 0x64
 800962a:	fb02 f303 	mul.w	r3, r2, r3
 800962e:	1acb      	subs	r3, r1, r3
 8009630:	00db      	lsls	r3, r3, #3
 8009632:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009636:	4b36      	ldr	r3, [pc, #216]	; (8009710 <UART_SetConfig+0x2d4>)
 8009638:	fba3 2302 	umull	r2, r3, r3, r2
 800963c:	095b      	lsrs	r3, r3, #5
 800963e:	005b      	lsls	r3, r3, #1
 8009640:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009644:	441c      	add	r4, r3
 8009646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800964a:	2200      	movs	r2, #0
 800964c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009650:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009654:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009658:	4642      	mov	r2, r8
 800965a:	464b      	mov	r3, r9
 800965c:	1891      	adds	r1, r2, r2
 800965e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009660:	415b      	adcs	r3, r3
 8009662:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009664:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009668:	4641      	mov	r1, r8
 800966a:	1851      	adds	r1, r2, r1
 800966c:	6339      	str	r1, [r7, #48]	; 0x30
 800966e:	4649      	mov	r1, r9
 8009670:	414b      	adcs	r3, r1
 8009672:	637b      	str	r3, [r7, #52]	; 0x34
 8009674:	f04f 0200 	mov.w	r2, #0
 8009678:	f04f 0300 	mov.w	r3, #0
 800967c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009680:	4659      	mov	r1, fp
 8009682:	00cb      	lsls	r3, r1, #3
 8009684:	4651      	mov	r1, sl
 8009686:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800968a:	4651      	mov	r1, sl
 800968c:	00ca      	lsls	r2, r1, #3
 800968e:	4610      	mov	r0, r2
 8009690:	4619      	mov	r1, r3
 8009692:	4603      	mov	r3, r0
 8009694:	4642      	mov	r2, r8
 8009696:	189b      	adds	r3, r3, r2
 8009698:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800969c:	464b      	mov	r3, r9
 800969e:	460a      	mov	r2, r1
 80096a0:	eb42 0303 	adc.w	r3, r2, r3
 80096a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80096a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80096b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80096b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80096bc:	460b      	mov	r3, r1
 80096be:	18db      	adds	r3, r3, r3
 80096c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80096c2:	4613      	mov	r3, r2
 80096c4:	eb42 0303 	adc.w	r3, r2, r3
 80096c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80096ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80096d2:	f7f7 fae9 	bl	8000ca8 <__aeabi_uldivmod>
 80096d6:	4602      	mov	r2, r0
 80096d8:	460b      	mov	r3, r1
 80096da:	4b0d      	ldr	r3, [pc, #52]	; (8009710 <UART_SetConfig+0x2d4>)
 80096dc:	fba3 1302 	umull	r1, r3, r3, r2
 80096e0:	095b      	lsrs	r3, r3, #5
 80096e2:	2164      	movs	r1, #100	; 0x64
 80096e4:	fb01 f303 	mul.w	r3, r1, r3
 80096e8:	1ad3      	subs	r3, r2, r3
 80096ea:	00db      	lsls	r3, r3, #3
 80096ec:	3332      	adds	r3, #50	; 0x32
 80096ee:	4a08      	ldr	r2, [pc, #32]	; (8009710 <UART_SetConfig+0x2d4>)
 80096f0:	fba2 2303 	umull	r2, r3, r2, r3
 80096f4:	095b      	lsrs	r3, r3, #5
 80096f6:	f003 0207 	and.w	r2, r3, #7
 80096fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4422      	add	r2, r4
 8009702:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009704:	e105      	b.n	8009912 <UART_SetConfig+0x4d6>
 8009706:	bf00      	nop
 8009708:	40011000 	.word	0x40011000
 800970c:	40011400 	.word	0x40011400
 8009710:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009714:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009718:	2200      	movs	r2, #0
 800971a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800971e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009722:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009726:	4642      	mov	r2, r8
 8009728:	464b      	mov	r3, r9
 800972a:	1891      	adds	r1, r2, r2
 800972c:	6239      	str	r1, [r7, #32]
 800972e:	415b      	adcs	r3, r3
 8009730:	627b      	str	r3, [r7, #36]	; 0x24
 8009732:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009736:	4641      	mov	r1, r8
 8009738:	1854      	adds	r4, r2, r1
 800973a:	4649      	mov	r1, r9
 800973c:	eb43 0501 	adc.w	r5, r3, r1
 8009740:	f04f 0200 	mov.w	r2, #0
 8009744:	f04f 0300 	mov.w	r3, #0
 8009748:	00eb      	lsls	r3, r5, #3
 800974a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800974e:	00e2      	lsls	r2, r4, #3
 8009750:	4614      	mov	r4, r2
 8009752:	461d      	mov	r5, r3
 8009754:	4643      	mov	r3, r8
 8009756:	18e3      	adds	r3, r4, r3
 8009758:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800975c:	464b      	mov	r3, r9
 800975e:	eb45 0303 	adc.w	r3, r5, r3
 8009762:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009772:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009776:	f04f 0200 	mov.w	r2, #0
 800977a:	f04f 0300 	mov.w	r3, #0
 800977e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009782:	4629      	mov	r1, r5
 8009784:	008b      	lsls	r3, r1, #2
 8009786:	4621      	mov	r1, r4
 8009788:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800978c:	4621      	mov	r1, r4
 800978e:	008a      	lsls	r2, r1, #2
 8009790:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009794:	f7f7 fa88 	bl	8000ca8 <__aeabi_uldivmod>
 8009798:	4602      	mov	r2, r0
 800979a:	460b      	mov	r3, r1
 800979c:	4b60      	ldr	r3, [pc, #384]	; (8009920 <UART_SetConfig+0x4e4>)
 800979e:	fba3 2302 	umull	r2, r3, r3, r2
 80097a2:	095b      	lsrs	r3, r3, #5
 80097a4:	011c      	lsls	r4, r3, #4
 80097a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097aa:	2200      	movs	r2, #0
 80097ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80097b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80097b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80097b8:	4642      	mov	r2, r8
 80097ba:	464b      	mov	r3, r9
 80097bc:	1891      	adds	r1, r2, r2
 80097be:	61b9      	str	r1, [r7, #24]
 80097c0:	415b      	adcs	r3, r3
 80097c2:	61fb      	str	r3, [r7, #28]
 80097c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80097c8:	4641      	mov	r1, r8
 80097ca:	1851      	adds	r1, r2, r1
 80097cc:	6139      	str	r1, [r7, #16]
 80097ce:	4649      	mov	r1, r9
 80097d0:	414b      	adcs	r3, r1
 80097d2:	617b      	str	r3, [r7, #20]
 80097d4:	f04f 0200 	mov.w	r2, #0
 80097d8:	f04f 0300 	mov.w	r3, #0
 80097dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80097e0:	4659      	mov	r1, fp
 80097e2:	00cb      	lsls	r3, r1, #3
 80097e4:	4651      	mov	r1, sl
 80097e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80097ea:	4651      	mov	r1, sl
 80097ec:	00ca      	lsls	r2, r1, #3
 80097ee:	4610      	mov	r0, r2
 80097f0:	4619      	mov	r1, r3
 80097f2:	4603      	mov	r3, r0
 80097f4:	4642      	mov	r2, r8
 80097f6:	189b      	adds	r3, r3, r2
 80097f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80097fc:	464b      	mov	r3, r9
 80097fe:	460a      	mov	r2, r1
 8009800:	eb42 0303 	adc.w	r3, r2, r3
 8009804:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	67bb      	str	r3, [r7, #120]	; 0x78
 8009812:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009814:	f04f 0200 	mov.w	r2, #0
 8009818:	f04f 0300 	mov.w	r3, #0
 800981c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009820:	4649      	mov	r1, r9
 8009822:	008b      	lsls	r3, r1, #2
 8009824:	4641      	mov	r1, r8
 8009826:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800982a:	4641      	mov	r1, r8
 800982c:	008a      	lsls	r2, r1, #2
 800982e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009832:	f7f7 fa39 	bl	8000ca8 <__aeabi_uldivmod>
 8009836:	4602      	mov	r2, r0
 8009838:	460b      	mov	r3, r1
 800983a:	4b39      	ldr	r3, [pc, #228]	; (8009920 <UART_SetConfig+0x4e4>)
 800983c:	fba3 1302 	umull	r1, r3, r3, r2
 8009840:	095b      	lsrs	r3, r3, #5
 8009842:	2164      	movs	r1, #100	; 0x64
 8009844:	fb01 f303 	mul.w	r3, r1, r3
 8009848:	1ad3      	subs	r3, r2, r3
 800984a:	011b      	lsls	r3, r3, #4
 800984c:	3332      	adds	r3, #50	; 0x32
 800984e:	4a34      	ldr	r2, [pc, #208]	; (8009920 <UART_SetConfig+0x4e4>)
 8009850:	fba2 2303 	umull	r2, r3, r2, r3
 8009854:	095b      	lsrs	r3, r3, #5
 8009856:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800985a:	441c      	add	r4, r3
 800985c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009860:	2200      	movs	r2, #0
 8009862:	673b      	str	r3, [r7, #112]	; 0x70
 8009864:	677a      	str	r2, [r7, #116]	; 0x74
 8009866:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800986a:	4642      	mov	r2, r8
 800986c:	464b      	mov	r3, r9
 800986e:	1891      	adds	r1, r2, r2
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	415b      	adcs	r3, r3
 8009874:	60fb      	str	r3, [r7, #12]
 8009876:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800987a:	4641      	mov	r1, r8
 800987c:	1851      	adds	r1, r2, r1
 800987e:	6039      	str	r1, [r7, #0]
 8009880:	4649      	mov	r1, r9
 8009882:	414b      	adcs	r3, r1
 8009884:	607b      	str	r3, [r7, #4]
 8009886:	f04f 0200 	mov.w	r2, #0
 800988a:	f04f 0300 	mov.w	r3, #0
 800988e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009892:	4659      	mov	r1, fp
 8009894:	00cb      	lsls	r3, r1, #3
 8009896:	4651      	mov	r1, sl
 8009898:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800989c:	4651      	mov	r1, sl
 800989e:	00ca      	lsls	r2, r1, #3
 80098a0:	4610      	mov	r0, r2
 80098a2:	4619      	mov	r1, r3
 80098a4:	4603      	mov	r3, r0
 80098a6:	4642      	mov	r2, r8
 80098a8:	189b      	adds	r3, r3, r2
 80098aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80098ac:	464b      	mov	r3, r9
 80098ae:	460a      	mov	r2, r1
 80098b0:	eb42 0303 	adc.w	r3, r2, r3
 80098b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80098b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	2200      	movs	r2, #0
 80098be:	663b      	str	r3, [r7, #96]	; 0x60
 80098c0:	667a      	str	r2, [r7, #100]	; 0x64
 80098c2:	f04f 0200 	mov.w	r2, #0
 80098c6:	f04f 0300 	mov.w	r3, #0
 80098ca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80098ce:	4649      	mov	r1, r9
 80098d0:	008b      	lsls	r3, r1, #2
 80098d2:	4641      	mov	r1, r8
 80098d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80098d8:	4641      	mov	r1, r8
 80098da:	008a      	lsls	r2, r1, #2
 80098dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80098e0:	f7f7 f9e2 	bl	8000ca8 <__aeabi_uldivmod>
 80098e4:	4602      	mov	r2, r0
 80098e6:	460b      	mov	r3, r1
 80098e8:	4b0d      	ldr	r3, [pc, #52]	; (8009920 <UART_SetConfig+0x4e4>)
 80098ea:	fba3 1302 	umull	r1, r3, r3, r2
 80098ee:	095b      	lsrs	r3, r3, #5
 80098f0:	2164      	movs	r1, #100	; 0x64
 80098f2:	fb01 f303 	mul.w	r3, r1, r3
 80098f6:	1ad3      	subs	r3, r2, r3
 80098f8:	011b      	lsls	r3, r3, #4
 80098fa:	3332      	adds	r3, #50	; 0x32
 80098fc:	4a08      	ldr	r2, [pc, #32]	; (8009920 <UART_SetConfig+0x4e4>)
 80098fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009902:	095b      	lsrs	r3, r3, #5
 8009904:	f003 020f 	and.w	r2, r3, #15
 8009908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4422      	add	r2, r4
 8009910:	609a      	str	r2, [r3, #8]
}
 8009912:	bf00      	nop
 8009914:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009918:	46bd      	mov	sp, r7
 800991a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800991e:	bf00      	nop
 8009920:	51eb851f 	.word	0x51eb851f

08009924 <MX_FATFS_Init>:

/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void) {
 8009924:	b580      	push	{r7, lr}
 8009926:	af00      	add	r7, sp, #0
    /*## FatFS: Link the USER driver ###########################*/
    retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009928:	4904      	ldr	r1, [pc, #16]	; (800993c <MX_FATFS_Init+0x18>)
 800992a:	4805      	ldr	r0, [pc, #20]	; (8009940 <MX_FATFS_Init+0x1c>)
 800992c:	f003 f92e 	bl	800cb8c <FATFS_LinkDriver>
 8009930:	4603      	mov	r3, r0
 8009932:	461a      	mov	r2, r3
 8009934:	4b03      	ldr	r3, [pc, #12]	; (8009944 <MX_FATFS_Init+0x20>)
 8009936:	701a      	strb	r2, [r3, #0]

    /* USER CODE BEGIN Init */
    /* additional user code for init */
    /* USER CODE END Init */
}
 8009938:	bf00      	nop
 800993a:	bd80      	pop	{r7, pc}
 800993c:	2000259c 	.word	0x2000259c
 8009940:	20000164 	.word	0x20000164
 8009944:	20002598 	.word	0x20002598

08009948 <get_fattime>:
/**
 * @brief  Gets Time from RTC
 * @param  None
 * @retval Time in DWORD
 */
DWORD get_fattime(void) {
 8009948:	b480      	push	{r7}
 800994a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN get_fattime */
    return 0;
 800994c:	2300      	movs	r3, #0
    /* USER CODE END get_fattime */
}
 800994e:	4618      	mov	r0, r3
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <USER_initialize>:
 * @brief  Initializes a Drive
 * @param  pdrv: Physical drive number (0..)
 * @retval DSTATUS: Operation status
 */
DSTATUS USER_initialize(BYTE pdrv /* Physical drive nmuber to identify the drive */
) {
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	4603      	mov	r3, r0
 8009960:	71fb      	strb	r3, [r7, #7]
    /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8009962:	79fb      	ldrb	r3, [r7, #7]
 8009964:	4618      	mov	r0, r3
 8009966:	f7f8 fdc3 	bl	80024f0 <SD_disk_initialize>
 800996a:	4603      	mov	r3, r0
    /* USER CODE END INIT */
}
 800996c:	4618      	mov	r0, r3
 800996e:	3708      	adds	r7, #8
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <USER_status>:
 * @brief  Gets Disk Status
 * @param  pdrv: Physical drive number (0..)
 * @retval DSTATUS: Operation status
 */
DSTATUS USER_status(BYTE pdrv /* Physical drive number to identify the drive */
) {
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
 800997a:	4603      	mov	r3, r0
 800997c:	71fb      	strb	r3, [r7, #7]
    /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800997e:	79fb      	ldrb	r3, [r7, #7]
 8009980:	4618      	mov	r0, r3
 8009982:	f7f8 fe9f 	bl	80026c4 <SD_disk_status>
 8009986:	4603      	mov	r3, r0
    /* USER CODE END STATUS */
}
 8009988:	4618      	mov	r0, r3
 800998a:	3708      	adds	r7, #8
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <USER_read>:
 */
DRESULT USER_read(BYTE pdrv,    /* Physical drive nmuber to identify the drive */
                  BYTE * buff,  /* Data buffer to store read data */
                  DWORD sector, /* Sector address in LBA */
                  UINT count    /* Number of sectors to read */
) {
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	60b9      	str	r1, [r7, #8]
 8009998:	607a      	str	r2, [r7, #4]
 800999a:	603b      	str	r3, [r7, #0]
 800999c:	4603      	mov	r3, r0
 800999e:	73fb      	strb	r3, [r7, #15]
    /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 80099a0:	7bf8      	ldrb	r0, [r7, #15]
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	68b9      	ldr	r1, [r7, #8]
 80099a8:	f7f8 fea2 	bl	80026f0 <SD_disk_read>
 80099ac:	4603      	mov	r3, r0
    /* USER CODE END READ */
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <USER_write>:
#if _USE_WRITE == 1
DRESULT USER_write(BYTE pdrv,         /* Physical drive nmuber to identify the drive */
                   const BYTE * buff, /* Data to be written */
                   DWORD sector,      /* Sector address in LBA */
                   UINT count         /* Number of sectors to write */
) {
 80099b6:	b580      	push	{r7, lr}
 80099b8:	b084      	sub	sp, #16
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	60b9      	str	r1, [r7, #8]
 80099be:	607a      	str	r2, [r7, #4]
 80099c0:	603b      	str	r3, [r7, #0]
 80099c2:	4603      	mov	r3, r0
 80099c4:	73fb      	strb	r3, [r7, #15]
    /* USER CODE BEGIN WRITE */
    /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80099c6:	7bf8      	ldrb	r0, [r7, #15]
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	68b9      	ldr	r1, [r7, #8]
 80099ce:	f7f8 fef9 	bl	80027c4 <SD_disk_write>
 80099d2:	4603      	mov	r3, r0
    /* USER CODE END WRITE */
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3710      	adds	r7, #16
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <USER_ioctl>:
 */
#if _USE_IOCTL == 1
DRESULT USER_ioctl(BYTE pdrv,  /* Physical drive nmuber (0..) */
                   BYTE cmd,   /* Control code */
                   void * buff /* Buffer to send/receive control data */
) {
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	4603      	mov	r3, r0
 80099e4:	603a      	str	r2, [r7, #0]
 80099e6:	71fb      	strb	r3, [r7, #7]
 80099e8:	460b      	mov	r3, r1
 80099ea:	71bb      	strb	r3, [r7, #6]
    /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 80099ec:	79b9      	ldrb	r1, [r7, #6]
 80099ee:	79fb      	ldrb	r3, [r7, #7]
 80099f0:	683a      	ldr	r2, [r7, #0]
 80099f2:	4618      	mov	r0, r3
 80099f4:	f7f8 ff6a 	bl	80028cc <SD_disk_ioctl>
 80099f8:	4603      	mov	r3, r0
    /* USER CODE END IOCTL */
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3708      	adds	r7, #8
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
	...

08009a04 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b085      	sub	sp, #20
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	6039      	str	r1, [r7, #0]
 8009a0e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009a10:	88fb      	ldrh	r3, [r7, #6]
 8009a12:	2b7f      	cmp	r3, #127	; 0x7f
 8009a14:	d802      	bhi.n	8009a1c <ff_convert+0x18>
		c = chr;
 8009a16:	88fb      	ldrh	r3, [r7, #6]
 8009a18:	81fb      	strh	r3, [r7, #14]
 8009a1a:	e025      	b.n	8009a68 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d00b      	beq.n	8009a3a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009a22:	88fb      	ldrh	r3, [r7, #6]
 8009a24:	2bff      	cmp	r3, #255	; 0xff
 8009a26:	d805      	bhi.n	8009a34 <ff_convert+0x30>
 8009a28:	88fb      	ldrh	r3, [r7, #6]
 8009a2a:	3b80      	subs	r3, #128	; 0x80
 8009a2c:	4a12      	ldr	r2, [pc, #72]	; (8009a78 <ff_convert+0x74>)
 8009a2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a32:	e000      	b.n	8009a36 <ff_convert+0x32>
 8009a34:	2300      	movs	r3, #0
 8009a36:	81fb      	strh	r3, [r7, #14]
 8009a38:	e016      	b.n	8009a68 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	81fb      	strh	r3, [r7, #14]
 8009a3e:	e009      	b.n	8009a54 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009a40:	89fb      	ldrh	r3, [r7, #14]
 8009a42:	4a0d      	ldr	r2, [pc, #52]	; (8009a78 <ff_convert+0x74>)
 8009a44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a48:	88fa      	ldrh	r2, [r7, #6]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d006      	beq.n	8009a5c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8009a4e:	89fb      	ldrh	r3, [r7, #14]
 8009a50:	3301      	adds	r3, #1
 8009a52:	81fb      	strh	r3, [r7, #14]
 8009a54:	89fb      	ldrh	r3, [r7, #14]
 8009a56:	2b7f      	cmp	r3, #127	; 0x7f
 8009a58:	d9f2      	bls.n	8009a40 <ff_convert+0x3c>
 8009a5a:	e000      	b.n	8009a5e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009a5c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8009a5e:	89fb      	ldrh	r3, [r7, #14]
 8009a60:	3380      	adds	r3, #128	; 0x80
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	b2db      	uxtb	r3, r3
 8009a66:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009a68:	89fb      	ldrh	r3, [r7, #14]
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3714      	adds	r7, #20
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr
 8009a76:	bf00      	nop
 8009a78:	080131a4 	.word	0x080131a4

08009a7c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b087      	sub	sp, #28
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	4603      	mov	r3, r0
 8009a84:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8009a86:	88fb      	ldrh	r3, [r7, #6]
 8009a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a8c:	d201      	bcs.n	8009a92 <ff_wtoupper+0x16>
 8009a8e:	4b3e      	ldr	r3, [pc, #248]	; (8009b88 <ff_wtoupper+0x10c>)
 8009a90:	e000      	b.n	8009a94 <ff_wtoupper+0x18>
 8009a92:	4b3e      	ldr	r3, [pc, #248]	; (8009b8c <ff_wtoupper+0x110>)
 8009a94:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	1c9a      	adds	r2, r3, #2
 8009a9a:	617a      	str	r2, [r7, #20]
 8009a9c:	881b      	ldrh	r3, [r3, #0]
 8009a9e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009aa0:	8a7b      	ldrh	r3, [r7, #18]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d068      	beq.n	8009b78 <ff_wtoupper+0xfc>
 8009aa6:	88fa      	ldrh	r2, [r7, #6]
 8009aa8:	8a7b      	ldrh	r3, [r7, #18]
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d364      	bcc.n	8009b78 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	1c9a      	adds	r2, r3, #2
 8009ab2:	617a      	str	r2, [r7, #20]
 8009ab4:	881b      	ldrh	r3, [r3, #0]
 8009ab6:	823b      	strh	r3, [r7, #16]
 8009ab8:	8a3b      	ldrh	r3, [r7, #16]
 8009aba:	0a1b      	lsrs	r3, r3, #8
 8009abc:	81fb      	strh	r3, [r7, #14]
 8009abe:	8a3b      	ldrh	r3, [r7, #16]
 8009ac0:	b2db      	uxtb	r3, r3
 8009ac2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8009ac4:	88fa      	ldrh	r2, [r7, #6]
 8009ac6:	8a79      	ldrh	r1, [r7, #18]
 8009ac8:	8a3b      	ldrh	r3, [r7, #16]
 8009aca:	440b      	add	r3, r1
 8009acc:	429a      	cmp	r2, r3
 8009ace:	da49      	bge.n	8009b64 <ff_wtoupper+0xe8>
			switch (cmd) {
 8009ad0:	89fb      	ldrh	r3, [r7, #14]
 8009ad2:	2b08      	cmp	r3, #8
 8009ad4:	d84f      	bhi.n	8009b76 <ff_wtoupper+0xfa>
 8009ad6:	a201      	add	r2, pc, #4	; (adr r2, 8009adc <ff_wtoupper+0x60>)
 8009ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009adc:	08009b01 	.word	0x08009b01
 8009ae0:	08009b13 	.word	0x08009b13
 8009ae4:	08009b29 	.word	0x08009b29
 8009ae8:	08009b31 	.word	0x08009b31
 8009aec:	08009b39 	.word	0x08009b39
 8009af0:	08009b41 	.word	0x08009b41
 8009af4:	08009b49 	.word	0x08009b49
 8009af8:	08009b51 	.word	0x08009b51
 8009afc:	08009b59 	.word	0x08009b59
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8009b00:	88fa      	ldrh	r2, [r7, #6]
 8009b02:	8a7b      	ldrh	r3, [r7, #18]
 8009b04:	1ad3      	subs	r3, r2, r3
 8009b06:	005b      	lsls	r3, r3, #1
 8009b08:	697a      	ldr	r2, [r7, #20]
 8009b0a:	4413      	add	r3, r2
 8009b0c:	881b      	ldrh	r3, [r3, #0]
 8009b0e:	80fb      	strh	r3, [r7, #6]
 8009b10:	e027      	b.n	8009b62 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8009b12:	88fa      	ldrh	r2, [r7, #6]
 8009b14:	8a7b      	ldrh	r3, [r7, #18]
 8009b16:	1ad3      	subs	r3, r2, r3
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	f003 0301 	and.w	r3, r3, #1
 8009b1e:	b29b      	uxth	r3, r3
 8009b20:	88fa      	ldrh	r2, [r7, #6]
 8009b22:	1ad3      	subs	r3, r2, r3
 8009b24:	80fb      	strh	r3, [r7, #6]
 8009b26:	e01c      	b.n	8009b62 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8009b28:	88fb      	ldrh	r3, [r7, #6]
 8009b2a:	3b10      	subs	r3, #16
 8009b2c:	80fb      	strh	r3, [r7, #6]
 8009b2e:	e018      	b.n	8009b62 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8009b30:	88fb      	ldrh	r3, [r7, #6]
 8009b32:	3b20      	subs	r3, #32
 8009b34:	80fb      	strh	r3, [r7, #6]
 8009b36:	e014      	b.n	8009b62 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009b38:	88fb      	ldrh	r3, [r7, #6]
 8009b3a:	3b30      	subs	r3, #48	; 0x30
 8009b3c:	80fb      	strh	r3, [r7, #6]
 8009b3e:	e010      	b.n	8009b62 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8009b40:	88fb      	ldrh	r3, [r7, #6]
 8009b42:	3b1a      	subs	r3, #26
 8009b44:	80fb      	strh	r3, [r7, #6]
 8009b46:	e00c      	b.n	8009b62 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8009b48:	88fb      	ldrh	r3, [r7, #6]
 8009b4a:	3308      	adds	r3, #8
 8009b4c:	80fb      	strh	r3, [r7, #6]
 8009b4e:	e008      	b.n	8009b62 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009b50:	88fb      	ldrh	r3, [r7, #6]
 8009b52:	3b50      	subs	r3, #80	; 0x50
 8009b54:	80fb      	strh	r3, [r7, #6]
 8009b56:	e004      	b.n	8009b62 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009b58:	88fb      	ldrh	r3, [r7, #6]
 8009b5a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8009b5e:	80fb      	strh	r3, [r7, #6]
 8009b60:	bf00      	nop
			}
			break;
 8009b62:	e008      	b.n	8009b76 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8009b64:	89fb      	ldrh	r3, [r7, #14]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d195      	bne.n	8009a96 <ff_wtoupper+0x1a>
 8009b6a:	8a3b      	ldrh	r3, [r7, #16]
 8009b6c:	005b      	lsls	r3, r3, #1
 8009b6e:	697a      	ldr	r2, [r7, #20]
 8009b70:	4413      	add	r3, r2
 8009b72:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8009b74:	e78f      	b.n	8009a96 <ff_wtoupper+0x1a>
			break;
 8009b76:	bf00      	nop
	}

	return chr;
 8009b78:	88fb      	ldrh	r3, [r7, #6]
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	371c      	adds	r7, #28
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr
 8009b86:	bf00      	nop
 8009b88:	080132a4 	.word	0x080132a4
 8009b8c:	08013498 	.word	0x08013498

08009b90 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	4603      	mov	r3, r0
 8009b98:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009b9a:	79fb      	ldrb	r3, [r7, #7]
 8009b9c:	4a08      	ldr	r2, [pc, #32]	; (8009bc0 <disk_status+0x30>)
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	4413      	add	r3, r2
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	79fa      	ldrb	r2, [r7, #7]
 8009ba8:	4905      	ldr	r1, [pc, #20]	; (8009bc0 <disk_status+0x30>)
 8009baa:	440a      	add	r2, r1
 8009bac:	7a12      	ldrb	r2, [r2, #8]
 8009bae:	4610      	mov	r0, r2
 8009bb0:	4798      	blx	r3
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3710      	adds	r7, #16
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	200027c8 	.word	0x200027c8

08009bc4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	4603      	mov	r3, r0
 8009bcc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009bd2:	79fb      	ldrb	r3, [r7, #7]
 8009bd4:	4a0d      	ldr	r2, [pc, #52]	; (8009c0c <disk_initialize+0x48>)
 8009bd6:	5cd3      	ldrb	r3, [r2, r3]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d111      	bne.n	8009c00 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009bdc:	79fb      	ldrb	r3, [r7, #7]
 8009bde:	4a0b      	ldr	r2, [pc, #44]	; (8009c0c <disk_initialize+0x48>)
 8009be0:	2101      	movs	r1, #1
 8009be2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009be4:	79fb      	ldrb	r3, [r7, #7]
 8009be6:	4a09      	ldr	r2, [pc, #36]	; (8009c0c <disk_initialize+0x48>)
 8009be8:	009b      	lsls	r3, r3, #2
 8009bea:	4413      	add	r3, r2
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	79fa      	ldrb	r2, [r7, #7]
 8009bf2:	4906      	ldr	r1, [pc, #24]	; (8009c0c <disk_initialize+0x48>)
 8009bf4:	440a      	add	r2, r1
 8009bf6:	7a12      	ldrb	r2, [r2, #8]
 8009bf8:	4610      	mov	r0, r2
 8009bfa:	4798      	blx	r3
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3710      	adds	r7, #16
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	200027c8 	.word	0x200027c8

08009c10 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009c10:	b590      	push	{r4, r7, lr}
 8009c12:	b087      	sub	sp, #28
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	60b9      	str	r1, [r7, #8]
 8009c18:	607a      	str	r2, [r7, #4]
 8009c1a:	603b      	str	r3, [r7, #0]
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009c20:	7bfb      	ldrb	r3, [r7, #15]
 8009c22:	4a0a      	ldr	r2, [pc, #40]	; (8009c4c <disk_read+0x3c>)
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	4413      	add	r3, r2
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	689c      	ldr	r4, [r3, #8]
 8009c2c:	7bfb      	ldrb	r3, [r7, #15]
 8009c2e:	4a07      	ldr	r2, [pc, #28]	; (8009c4c <disk_read+0x3c>)
 8009c30:	4413      	add	r3, r2
 8009c32:	7a18      	ldrb	r0, [r3, #8]
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	68b9      	ldr	r1, [r7, #8]
 8009c3a:	47a0      	blx	r4
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	371c      	adds	r7, #28
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd90      	pop	{r4, r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	200027c8 	.word	0x200027c8

08009c50 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009c50:	b590      	push	{r4, r7, lr}
 8009c52:	b087      	sub	sp, #28
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	60b9      	str	r1, [r7, #8]
 8009c58:	607a      	str	r2, [r7, #4]
 8009c5a:	603b      	str	r3, [r7, #0]
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009c60:	7bfb      	ldrb	r3, [r7, #15]
 8009c62:	4a0a      	ldr	r2, [pc, #40]	; (8009c8c <disk_write+0x3c>)
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	4413      	add	r3, r2
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	68dc      	ldr	r4, [r3, #12]
 8009c6c:	7bfb      	ldrb	r3, [r7, #15]
 8009c6e:	4a07      	ldr	r2, [pc, #28]	; (8009c8c <disk_write+0x3c>)
 8009c70:	4413      	add	r3, r2
 8009c72:	7a18      	ldrb	r0, [r3, #8]
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	68b9      	ldr	r1, [r7, #8]
 8009c7a:	47a0      	blx	r4
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	371c      	adds	r7, #28
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd90      	pop	{r4, r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	200027c8 	.word	0x200027c8

08009c90 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	4603      	mov	r3, r0
 8009c98:	603a      	str	r2, [r7, #0]
 8009c9a:	71fb      	strb	r3, [r7, #7]
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009ca0:	79fb      	ldrb	r3, [r7, #7]
 8009ca2:	4a09      	ldr	r2, [pc, #36]	; (8009cc8 <disk_ioctl+0x38>)
 8009ca4:	009b      	lsls	r3, r3, #2
 8009ca6:	4413      	add	r3, r2
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	691b      	ldr	r3, [r3, #16]
 8009cac:	79fa      	ldrb	r2, [r7, #7]
 8009cae:	4906      	ldr	r1, [pc, #24]	; (8009cc8 <disk_ioctl+0x38>)
 8009cb0:	440a      	add	r2, r1
 8009cb2:	7a10      	ldrb	r0, [r2, #8]
 8009cb4:	79b9      	ldrb	r1, [r7, #6]
 8009cb6:	683a      	ldr	r2, [r7, #0]
 8009cb8:	4798      	blx	r3
 8009cba:	4603      	mov	r3, r0
 8009cbc:	73fb      	strb	r3, [r7, #15]
  return res;
 8009cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3710      	adds	r7, #16
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}
 8009cc8:	200027c8 	.word	0x200027c8

08009ccc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b085      	sub	sp, #20
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	3301      	adds	r3, #1
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009cdc:	89fb      	ldrh	r3, [r7, #14]
 8009cde:	021b      	lsls	r3, r3, #8
 8009ce0:	b21a      	sxth	r2, r3
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	b21b      	sxth	r3, r3
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	b21b      	sxth	r3, r3
 8009cec:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009cee:	89fb      	ldrh	r3, [r7, #14]
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3714      	adds	r7, #20
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr

08009cfc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b085      	sub	sp, #20
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	3303      	adds	r3, #3
 8009d08:	781b      	ldrb	r3, [r3, #0]
 8009d0a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	021b      	lsls	r3, r3, #8
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	3202      	adds	r2, #2
 8009d14:	7812      	ldrb	r2, [r2, #0]
 8009d16:	4313      	orrs	r3, r2
 8009d18:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	021b      	lsls	r3, r3, #8
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	3201      	adds	r2, #1
 8009d22:	7812      	ldrb	r2, [r2, #0]
 8009d24:	4313      	orrs	r3, r2
 8009d26:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	021b      	lsls	r3, r3, #8
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	7812      	ldrb	r2, [r2, #0]
 8009d30:	4313      	orrs	r3, r2
 8009d32:	60fb      	str	r3, [r7, #12]
	return rv;
 8009d34:	68fb      	ldr	r3, [r7, #12]
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3714      	adds	r7, #20
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr

08009d42 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009d42:	b480      	push	{r7}
 8009d44:	b083      	sub	sp, #12
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
 8009d4a:	460b      	mov	r3, r1
 8009d4c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	1c5a      	adds	r2, r3, #1
 8009d52:	607a      	str	r2, [r7, #4]
 8009d54:	887a      	ldrh	r2, [r7, #2]
 8009d56:	b2d2      	uxtb	r2, r2
 8009d58:	701a      	strb	r2, [r3, #0]
 8009d5a:	887b      	ldrh	r3, [r7, #2]
 8009d5c:	0a1b      	lsrs	r3, r3, #8
 8009d5e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	1c5a      	adds	r2, r3, #1
 8009d64:	607a      	str	r2, [r7, #4]
 8009d66:	887a      	ldrh	r2, [r7, #2]
 8009d68:	b2d2      	uxtb	r2, r2
 8009d6a:	701a      	strb	r2, [r3, #0]
}
 8009d6c:	bf00      	nop
 8009d6e:	370c      	adds	r7, #12
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr

08009d78 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b083      	sub	sp, #12
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	1c5a      	adds	r2, r3, #1
 8009d86:	607a      	str	r2, [r7, #4]
 8009d88:	683a      	ldr	r2, [r7, #0]
 8009d8a:	b2d2      	uxtb	r2, r2
 8009d8c:	701a      	strb	r2, [r3, #0]
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	0a1b      	lsrs	r3, r3, #8
 8009d92:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	1c5a      	adds	r2, r3, #1
 8009d98:	607a      	str	r2, [r7, #4]
 8009d9a:	683a      	ldr	r2, [r7, #0]
 8009d9c:	b2d2      	uxtb	r2, r2
 8009d9e:	701a      	strb	r2, [r3, #0]
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	0a1b      	lsrs	r3, r3, #8
 8009da4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	1c5a      	adds	r2, r3, #1
 8009daa:	607a      	str	r2, [r7, #4]
 8009dac:	683a      	ldr	r2, [r7, #0]
 8009dae:	b2d2      	uxtb	r2, r2
 8009db0:	701a      	strb	r2, [r3, #0]
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	0a1b      	lsrs	r3, r3, #8
 8009db6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	1c5a      	adds	r2, r3, #1
 8009dbc:	607a      	str	r2, [r7, #4]
 8009dbe:	683a      	ldr	r2, [r7, #0]
 8009dc0:	b2d2      	uxtb	r2, r2
 8009dc2:	701a      	strb	r2, [r3, #0]
}
 8009dc4:	bf00      	nop
 8009dc6:	370c      	adds	r7, #12
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr

08009dd0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009dd0:	b480      	push	{r7}
 8009dd2:	b087      	sub	sp, #28
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d00d      	beq.n	8009e06 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009dea:	693a      	ldr	r2, [r7, #16]
 8009dec:	1c53      	adds	r3, r2, #1
 8009dee:	613b      	str	r3, [r7, #16]
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	1c59      	adds	r1, r3, #1
 8009df4:	6179      	str	r1, [r7, #20]
 8009df6:	7812      	ldrb	r2, [r2, #0]
 8009df8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	3b01      	subs	r3, #1
 8009dfe:	607b      	str	r3, [r7, #4]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d1f1      	bne.n	8009dea <mem_cpy+0x1a>
	}
}
 8009e06:	bf00      	nop
 8009e08:	371c      	adds	r7, #28
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr

08009e12 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009e12:	b480      	push	{r7}
 8009e14:	b087      	sub	sp, #28
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	60f8      	str	r0, [r7, #12]
 8009e1a:	60b9      	str	r1, [r7, #8]
 8009e1c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	1c5a      	adds	r2, r3, #1
 8009e26:	617a      	str	r2, [r7, #20]
 8009e28:	68ba      	ldr	r2, [r7, #8]
 8009e2a:	b2d2      	uxtb	r2, r2
 8009e2c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	3b01      	subs	r3, #1
 8009e32:	607b      	str	r3, [r7, #4]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d1f3      	bne.n	8009e22 <mem_set+0x10>
}
 8009e3a:	bf00      	nop
 8009e3c:	bf00      	nop
 8009e3e:	371c      	adds	r7, #28
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr

08009e48 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009e48:	b480      	push	{r7}
 8009e4a:	b089      	sub	sp, #36	; 0x24
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	60f8      	str	r0, [r7, #12]
 8009e50:	60b9      	str	r1, [r7, #8]
 8009e52:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	61fb      	str	r3, [r7, #28]
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009e60:	69fb      	ldr	r3, [r7, #28]
 8009e62:	1c5a      	adds	r2, r3, #1
 8009e64:	61fa      	str	r2, [r7, #28]
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	4619      	mov	r1, r3
 8009e6a:	69bb      	ldr	r3, [r7, #24]
 8009e6c:	1c5a      	adds	r2, r3, #1
 8009e6e:	61ba      	str	r2, [r7, #24]
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	1acb      	subs	r3, r1, r3
 8009e74:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	3b01      	subs	r3, #1
 8009e7a:	607b      	str	r3, [r7, #4]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d002      	beq.n	8009e88 <mem_cmp+0x40>
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d0eb      	beq.n	8009e60 <mem_cmp+0x18>

	return r;
 8009e88:	697b      	ldr	r3, [r7, #20]
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3724      	adds	r7, #36	; 0x24
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr

08009e96 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009e96:	b480      	push	{r7}
 8009e98:	b083      	sub	sp, #12
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
 8009e9e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009ea0:	e002      	b.n	8009ea8 <chk_chr+0x12>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	3301      	adds	r3, #1
 8009ea6:	607b      	str	r3, [r7, #4]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d005      	beq.n	8009ebc <chk_chr+0x26>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d1f2      	bne.n	8009ea2 <chk_chr+0xc>
	return *str;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	781b      	ldrb	r3, [r3, #0]
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	370c      	adds	r7, #12
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b085      	sub	sp, #20
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	60bb      	str	r3, [r7, #8]
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	60fb      	str	r3, [r7, #12]
 8009ede:	e029      	b.n	8009f34 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009ee0:	4a27      	ldr	r2, [pc, #156]	; (8009f80 <chk_lock+0xb4>)
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	011b      	lsls	r3, r3, #4
 8009ee6:	4413      	add	r3, r2
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d01d      	beq.n	8009f2a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009eee:	4a24      	ldr	r2, [pc, #144]	; (8009f80 <chk_lock+0xb4>)
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	011b      	lsls	r3, r3, #4
 8009ef4:	4413      	add	r3, r2
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d116      	bne.n	8009f2e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009f00:	4a1f      	ldr	r2, [pc, #124]	; (8009f80 <chk_lock+0xb4>)
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	011b      	lsls	r3, r3, #4
 8009f06:	4413      	add	r3, r2
 8009f08:	3304      	adds	r3, #4
 8009f0a:	681a      	ldr	r2, [r3, #0]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d10c      	bne.n	8009f2e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009f14:	4a1a      	ldr	r2, [pc, #104]	; (8009f80 <chk_lock+0xb4>)
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	011b      	lsls	r3, r3, #4
 8009f1a:	4413      	add	r3, r2
 8009f1c:	3308      	adds	r3, #8
 8009f1e:	681a      	ldr	r2, [r3, #0]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d102      	bne.n	8009f2e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009f28:	e007      	b.n	8009f3a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	3301      	adds	r3, #1
 8009f32:	60fb      	str	r3, [r7, #12]
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2b01      	cmp	r3, #1
 8009f38:	d9d2      	bls.n	8009ee0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2b02      	cmp	r3, #2
 8009f3e:	d109      	bne.n	8009f54 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d102      	bne.n	8009f4c <chk_lock+0x80>
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	2b02      	cmp	r3, #2
 8009f4a:	d101      	bne.n	8009f50 <chk_lock+0x84>
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	e010      	b.n	8009f72 <chk_lock+0xa6>
 8009f50:	2312      	movs	r3, #18
 8009f52:	e00e      	b.n	8009f72 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d108      	bne.n	8009f6c <chk_lock+0xa0>
 8009f5a:	4a09      	ldr	r2, [pc, #36]	; (8009f80 <chk_lock+0xb4>)
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	011b      	lsls	r3, r3, #4
 8009f60:	4413      	add	r3, r2
 8009f62:	330c      	adds	r3, #12
 8009f64:	881b      	ldrh	r3, [r3, #0]
 8009f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f6a:	d101      	bne.n	8009f70 <chk_lock+0xa4>
 8009f6c:	2310      	movs	r3, #16
 8009f6e:	e000      	b.n	8009f72 <chk_lock+0xa6>
 8009f70:	2300      	movs	r3, #0
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3714      	adds	r7, #20
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr
 8009f7e:	bf00      	nop
 8009f80:	200025a8 	.word	0x200025a8

08009f84 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009f84:	b480      	push	{r7}
 8009f86:	b083      	sub	sp, #12
 8009f88:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	607b      	str	r3, [r7, #4]
 8009f8e:	e002      	b.n	8009f96 <enq_lock+0x12>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	3301      	adds	r3, #1
 8009f94:	607b      	str	r3, [r7, #4]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d806      	bhi.n	8009faa <enq_lock+0x26>
 8009f9c:	4a09      	ldr	r2, [pc, #36]	; (8009fc4 <enq_lock+0x40>)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	011b      	lsls	r3, r3, #4
 8009fa2:	4413      	add	r3, r2
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d1f2      	bne.n	8009f90 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2b02      	cmp	r3, #2
 8009fae:	bf14      	ite	ne
 8009fb0:	2301      	movne	r3, #1
 8009fb2:	2300      	moveq	r3, #0
 8009fb4:	b2db      	uxtb	r3, r3
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	370c      	adds	r7, #12
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr
 8009fc2:	bf00      	nop
 8009fc4:	200025a8 	.word	0x200025a8

08009fc8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b085      	sub	sp, #20
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	60fb      	str	r3, [r7, #12]
 8009fd6:	e01f      	b.n	800a018 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009fd8:	4a41      	ldr	r2, [pc, #260]	; (800a0e0 <inc_lock+0x118>)
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	011b      	lsls	r3, r3, #4
 8009fde:	4413      	add	r3, r2
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d113      	bne.n	800a012 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009fea:	4a3d      	ldr	r2, [pc, #244]	; (800a0e0 <inc_lock+0x118>)
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	011b      	lsls	r3, r3, #4
 8009ff0:	4413      	add	r3, r2
 8009ff2:	3304      	adds	r3, #4
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d109      	bne.n	800a012 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009ffe:	4a38      	ldr	r2, [pc, #224]	; (800a0e0 <inc_lock+0x118>)
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	011b      	lsls	r3, r3, #4
 800a004:	4413      	add	r3, r2
 800a006:	3308      	adds	r3, #8
 800a008:	681a      	ldr	r2, [r3, #0]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a00e:	429a      	cmp	r2, r3
 800a010:	d006      	beq.n	800a020 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	3301      	adds	r3, #1
 800a016:	60fb      	str	r3, [r7, #12]
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d9dc      	bls.n	8009fd8 <inc_lock+0x10>
 800a01e:	e000      	b.n	800a022 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a020:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2b02      	cmp	r3, #2
 800a026:	d132      	bne.n	800a08e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a028:	2300      	movs	r3, #0
 800a02a:	60fb      	str	r3, [r7, #12]
 800a02c:	e002      	b.n	800a034 <inc_lock+0x6c>
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	3301      	adds	r3, #1
 800a032:	60fb      	str	r3, [r7, #12]
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2b01      	cmp	r3, #1
 800a038:	d806      	bhi.n	800a048 <inc_lock+0x80>
 800a03a:	4a29      	ldr	r2, [pc, #164]	; (800a0e0 <inc_lock+0x118>)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	011b      	lsls	r3, r3, #4
 800a040:	4413      	add	r3, r2
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d1f2      	bne.n	800a02e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2b02      	cmp	r3, #2
 800a04c:	d101      	bne.n	800a052 <inc_lock+0x8a>
 800a04e:	2300      	movs	r3, #0
 800a050:	e040      	b.n	800a0d4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681a      	ldr	r2, [r3, #0]
 800a056:	4922      	ldr	r1, [pc, #136]	; (800a0e0 <inc_lock+0x118>)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	011b      	lsls	r3, r3, #4
 800a05c:	440b      	add	r3, r1
 800a05e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	689a      	ldr	r2, [r3, #8]
 800a064:	491e      	ldr	r1, [pc, #120]	; (800a0e0 <inc_lock+0x118>)
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	011b      	lsls	r3, r3, #4
 800a06a:	440b      	add	r3, r1
 800a06c:	3304      	adds	r3, #4
 800a06e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	695a      	ldr	r2, [r3, #20]
 800a074:	491a      	ldr	r1, [pc, #104]	; (800a0e0 <inc_lock+0x118>)
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	011b      	lsls	r3, r3, #4
 800a07a:	440b      	add	r3, r1
 800a07c:	3308      	adds	r3, #8
 800a07e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a080:	4a17      	ldr	r2, [pc, #92]	; (800a0e0 <inc_lock+0x118>)
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	011b      	lsls	r3, r3, #4
 800a086:	4413      	add	r3, r2
 800a088:	330c      	adds	r3, #12
 800a08a:	2200      	movs	r2, #0
 800a08c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d009      	beq.n	800a0a8 <inc_lock+0xe0>
 800a094:	4a12      	ldr	r2, [pc, #72]	; (800a0e0 <inc_lock+0x118>)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	011b      	lsls	r3, r3, #4
 800a09a:	4413      	add	r3, r2
 800a09c:	330c      	adds	r3, #12
 800a09e:	881b      	ldrh	r3, [r3, #0]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d001      	beq.n	800a0a8 <inc_lock+0xe0>
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	e015      	b.n	800a0d4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d108      	bne.n	800a0c0 <inc_lock+0xf8>
 800a0ae:	4a0c      	ldr	r2, [pc, #48]	; (800a0e0 <inc_lock+0x118>)
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	011b      	lsls	r3, r3, #4
 800a0b4:	4413      	add	r3, r2
 800a0b6:	330c      	adds	r3, #12
 800a0b8:	881b      	ldrh	r3, [r3, #0]
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	b29a      	uxth	r2, r3
 800a0be:	e001      	b.n	800a0c4 <inc_lock+0xfc>
 800a0c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a0c4:	4906      	ldr	r1, [pc, #24]	; (800a0e0 <inc_lock+0x118>)
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	011b      	lsls	r3, r3, #4
 800a0ca:	440b      	add	r3, r1
 800a0cc:	330c      	adds	r3, #12
 800a0ce:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	3301      	adds	r3, #1
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3714      	adds	r7, #20
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr
 800a0e0:	200025a8 	.word	0x200025a8

0800a0e4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b085      	sub	sp, #20
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	3b01      	subs	r3, #1
 800a0f0:	607b      	str	r3, [r7, #4]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d825      	bhi.n	800a144 <dec_lock+0x60>
		n = Files[i].ctr;
 800a0f8:	4a17      	ldr	r2, [pc, #92]	; (800a158 <dec_lock+0x74>)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	011b      	lsls	r3, r3, #4
 800a0fe:	4413      	add	r3, r2
 800a100:	330c      	adds	r3, #12
 800a102:	881b      	ldrh	r3, [r3, #0]
 800a104:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a106:	89fb      	ldrh	r3, [r7, #14]
 800a108:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a10c:	d101      	bne.n	800a112 <dec_lock+0x2e>
 800a10e:	2300      	movs	r3, #0
 800a110:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a112:	89fb      	ldrh	r3, [r7, #14]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d002      	beq.n	800a11e <dec_lock+0x3a>
 800a118:	89fb      	ldrh	r3, [r7, #14]
 800a11a:	3b01      	subs	r3, #1
 800a11c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a11e:	4a0e      	ldr	r2, [pc, #56]	; (800a158 <dec_lock+0x74>)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	011b      	lsls	r3, r3, #4
 800a124:	4413      	add	r3, r2
 800a126:	330c      	adds	r3, #12
 800a128:	89fa      	ldrh	r2, [r7, #14]
 800a12a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a12c:	89fb      	ldrh	r3, [r7, #14]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d105      	bne.n	800a13e <dec_lock+0x5a>
 800a132:	4a09      	ldr	r2, [pc, #36]	; (800a158 <dec_lock+0x74>)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	011b      	lsls	r3, r3, #4
 800a138:	4413      	add	r3, r2
 800a13a:	2200      	movs	r2, #0
 800a13c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a13e:	2300      	movs	r3, #0
 800a140:	737b      	strb	r3, [r7, #13]
 800a142:	e001      	b.n	800a148 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a144:	2302      	movs	r3, #2
 800a146:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a148:	7b7b      	ldrb	r3, [r7, #13]
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3714      	adds	r7, #20
 800a14e:	46bd      	mov	sp, r7
 800a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a154:	4770      	bx	lr
 800a156:	bf00      	nop
 800a158:	200025a8 	.word	0x200025a8

0800a15c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b085      	sub	sp, #20
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a164:	2300      	movs	r3, #0
 800a166:	60fb      	str	r3, [r7, #12]
 800a168:	e010      	b.n	800a18c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a16a:	4a0d      	ldr	r2, [pc, #52]	; (800a1a0 <clear_lock+0x44>)
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	011b      	lsls	r3, r3, #4
 800a170:	4413      	add	r3, r2
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	429a      	cmp	r2, r3
 800a178:	d105      	bne.n	800a186 <clear_lock+0x2a>
 800a17a:	4a09      	ldr	r2, [pc, #36]	; (800a1a0 <clear_lock+0x44>)
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	011b      	lsls	r3, r3, #4
 800a180:	4413      	add	r3, r2
 800a182:	2200      	movs	r2, #0
 800a184:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	3301      	adds	r3, #1
 800a18a:	60fb      	str	r3, [r7, #12]
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d9eb      	bls.n	800a16a <clear_lock+0xe>
	}
}
 800a192:	bf00      	nop
 800a194:	bf00      	nop
 800a196:	3714      	adds	r7, #20
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr
 800a1a0:	200025a8 	.word	0x200025a8

0800a1a4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b086      	sub	sp, #24
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	78db      	ldrb	r3, [r3, #3]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d034      	beq.n	800a222 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1bc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	7858      	ldrb	r0, [r3, #1]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	697a      	ldr	r2, [r7, #20]
 800a1cc:	f7ff fd40 	bl	8009c50 <disk_write>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d002      	beq.n	800a1dc <sync_window+0x38>
			res = FR_DISK_ERR;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	73fb      	strb	r3, [r7, #15]
 800a1da:	e022      	b.n	800a222 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e6:	697a      	ldr	r2, [r7, #20]
 800a1e8:	1ad2      	subs	r2, r2, r3
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	69db      	ldr	r3, [r3, #28]
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d217      	bcs.n	800a222 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	789b      	ldrb	r3, [r3, #2]
 800a1f6:	613b      	str	r3, [r7, #16]
 800a1f8:	e010      	b.n	800a21c <sync_window+0x78>
					wsect += fs->fsize;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	69db      	ldr	r3, [r3, #28]
 800a1fe:	697a      	ldr	r2, [r7, #20]
 800a200:	4413      	add	r3, r2
 800a202:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	7858      	ldrb	r0, [r3, #1]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a20e:	2301      	movs	r3, #1
 800a210:	697a      	ldr	r2, [r7, #20]
 800a212:	f7ff fd1d 	bl	8009c50 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	3b01      	subs	r3, #1
 800a21a:	613b      	str	r3, [r7, #16]
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d8eb      	bhi.n	800a1fa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a222:	7bfb      	ldrb	r3, [r7, #15]
}
 800a224:	4618      	mov	r0, r3
 800a226:	3718      	adds	r7, #24
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a236:	2300      	movs	r3, #0
 800a238:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a23e:	683a      	ldr	r2, [r7, #0]
 800a240:	429a      	cmp	r2, r3
 800a242:	d01b      	beq.n	800a27c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f7ff ffad 	bl	800a1a4 <sync_window>
 800a24a:	4603      	mov	r3, r0
 800a24c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a24e:	7bfb      	ldrb	r3, [r7, #15]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d113      	bne.n	800a27c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	7858      	ldrb	r0, [r3, #1]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a25e:	2301      	movs	r3, #1
 800a260:	683a      	ldr	r2, [r7, #0]
 800a262:	f7ff fcd5 	bl	8009c10 <disk_read>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d004      	beq.n	800a276 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a26c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a270:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a272:	2301      	movs	r3, #1
 800a274:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	683a      	ldr	r2, [r7, #0]
 800a27a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800a27c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3710      	adds	r7, #16
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
	...

0800a288 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f7ff ff87 	bl	800a1a4 <sync_window>
 800a296:	4603      	mov	r3, r0
 800a298:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a29a:	7bfb      	ldrb	r3, [r7, #15]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d158      	bne.n	800a352 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	781b      	ldrb	r3, [r3, #0]
 800a2a4:	2b03      	cmp	r3, #3
 800a2a6:	d148      	bne.n	800a33a <sync_fs+0xb2>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	791b      	ldrb	r3, [r3, #4]
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d144      	bne.n	800a33a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	3334      	adds	r3, #52	; 0x34
 800a2b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a2b8:	2100      	movs	r1, #0
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7ff fda9 	bl	8009e12 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	3334      	adds	r3, #52	; 0x34
 800a2c4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a2c8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f7ff fd38 	bl	8009d42 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	3334      	adds	r3, #52	; 0x34
 800a2d6:	4921      	ldr	r1, [pc, #132]	; (800a35c <sync_fs+0xd4>)
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7ff fd4d 	bl	8009d78 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	3334      	adds	r3, #52	; 0x34
 800a2e2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a2e6:	491e      	ldr	r1, [pc, #120]	; (800a360 <sync_fs+0xd8>)
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f7ff fd45 	bl	8009d78 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	3334      	adds	r3, #52	; 0x34
 800a2f2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	695b      	ldr	r3, [r3, #20]
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	4610      	mov	r0, r2
 800a2fe:	f7ff fd3b 	bl	8009d78 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	3334      	adds	r3, #52	; 0x34
 800a306:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	691b      	ldr	r3, [r3, #16]
 800a30e:	4619      	mov	r1, r3
 800a310:	4610      	mov	r0, r2
 800a312:	f7ff fd31 	bl	8009d78 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6a1b      	ldr	r3, [r3, #32]
 800a31a:	1c5a      	adds	r2, r3, #1
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	7858      	ldrb	r0, [r3, #1]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a32e:	2301      	movs	r3, #1
 800a330:	f7ff fc8e 	bl	8009c50 <disk_write>
			fs->fsi_flag = 0;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2200      	movs	r2, #0
 800a338:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	785b      	ldrb	r3, [r3, #1]
 800a33e:	2200      	movs	r2, #0
 800a340:	2100      	movs	r1, #0
 800a342:	4618      	mov	r0, r3
 800a344:	f7ff fca4 	bl	8009c90 <disk_ioctl>
 800a348:	4603      	mov	r3, r0
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d001      	beq.n	800a352 <sync_fs+0xca>
 800a34e:	2301      	movs	r3, #1
 800a350:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a352:	7bfb      	ldrb	r3, [r7, #15]
}
 800a354:	4618      	mov	r0, r3
 800a356:	3710      	adds	r7, #16
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}
 800a35c:	41615252 	.word	0x41615252
 800a360:	61417272 	.word	0x61417272

0800a364 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a364:	b480      	push	{r7}
 800a366:	b083      	sub	sp, #12
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	3b02      	subs	r3, #2
 800a372:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	699b      	ldr	r3, [r3, #24]
 800a378:	3b02      	subs	r3, #2
 800a37a:	683a      	ldr	r2, [r7, #0]
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d301      	bcc.n	800a384 <clust2sect+0x20>
 800a380:	2300      	movs	r3, #0
 800a382:	e008      	b.n	800a396 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	895b      	ldrh	r3, [r3, #10]
 800a388:	461a      	mov	r2, r3
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	fb03 f202 	mul.w	r2, r3, r2
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a394:	4413      	add	r3, r2
}
 800a396:	4618      	mov	r0, r3
 800a398:	370c      	adds	r7, #12
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr

0800a3a2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a3a2:	b580      	push	{r7, lr}
 800a3a4:	b086      	sub	sp, #24
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
 800a3aa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d904      	bls.n	800a3c2 <get_fat+0x20>
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	699b      	ldr	r3, [r3, #24]
 800a3bc:	683a      	ldr	r2, [r7, #0]
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d302      	bcc.n	800a3c8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	617b      	str	r3, [r7, #20]
 800a3c6:	e08f      	b.n	800a4e8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a3c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a3cc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	2b03      	cmp	r3, #3
 800a3d4:	d062      	beq.n	800a49c <get_fat+0xfa>
 800a3d6:	2b03      	cmp	r3, #3
 800a3d8:	dc7c      	bgt.n	800a4d4 <get_fat+0x132>
 800a3da:	2b01      	cmp	r3, #1
 800a3dc:	d002      	beq.n	800a3e4 <get_fat+0x42>
 800a3de:	2b02      	cmp	r3, #2
 800a3e0:	d042      	beq.n	800a468 <get_fat+0xc6>
 800a3e2:	e077      	b.n	800a4d4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	60fb      	str	r3, [r7, #12]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	085b      	lsrs	r3, r3, #1
 800a3ec:	68fa      	ldr	r2, [r7, #12]
 800a3ee:	4413      	add	r3, r2
 800a3f0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	0a5b      	lsrs	r3, r3, #9
 800a3fa:	4413      	add	r3, r2
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	6938      	ldr	r0, [r7, #16]
 800a400:	f7ff ff14 	bl	800a22c <move_window>
 800a404:	4603      	mov	r3, r0
 800a406:	2b00      	cmp	r3, #0
 800a408:	d167      	bne.n	800a4da <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	1c5a      	adds	r2, r3, #1
 800a40e:	60fa      	str	r2, [r7, #12]
 800a410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a414:	693a      	ldr	r2, [r7, #16]
 800a416:	4413      	add	r3, r2
 800a418:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a41c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	0a5b      	lsrs	r3, r3, #9
 800a426:	4413      	add	r3, r2
 800a428:	4619      	mov	r1, r3
 800a42a:	6938      	ldr	r0, [r7, #16]
 800a42c:	f7ff fefe 	bl	800a22c <move_window>
 800a430:	4603      	mov	r3, r0
 800a432:	2b00      	cmp	r3, #0
 800a434:	d153      	bne.n	800a4de <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a43c:	693a      	ldr	r2, [r7, #16]
 800a43e:	4413      	add	r3, r2
 800a440:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a444:	021b      	lsls	r3, r3, #8
 800a446:	461a      	mov	r2, r3
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	4313      	orrs	r3, r2
 800a44c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	f003 0301 	and.w	r3, r3, #1
 800a454:	2b00      	cmp	r3, #0
 800a456:	d002      	beq.n	800a45e <get_fat+0xbc>
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	091b      	lsrs	r3, r3, #4
 800a45c:	e002      	b.n	800a464 <get_fat+0xc2>
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a464:	617b      	str	r3, [r7, #20]
			break;
 800a466:	e03f      	b.n	800a4e8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	0a1b      	lsrs	r3, r3, #8
 800a470:	4413      	add	r3, r2
 800a472:	4619      	mov	r1, r3
 800a474:	6938      	ldr	r0, [r7, #16]
 800a476:	f7ff fed9 	bl	800a22c <move_window>
 800a47a:	4603      	mov	r3, r0
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d130      	bne.n	800a4e2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	005b      	lsls	r3, r3, #1
 800a48a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a48e:	4413      	add	r3, r2
 800a490:	4618      	mov	r0, r3
 800a492:	f7ff fc1b 	bl	8009ccc <ld_word>
 800a496:	4603      	mov	r3, r0
 800a498:	617b      	str	r3, [r7, #20]
			break;
 800a49a:	e025      	b.n	800a4e8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	09db      	lsrs	r3, r3, #7
 800a4a4:	4413      	add	r3, r2
 800a4a6:	4619      	mov	r1, r3
 800a4a8:	6938      	ldr	r0, [r7, #16]
 800a4aa:	f7ff febf 	bl	800a22c <move_window>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d118      	bne.n	800a4e6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	009b      	lsls	r3, r3, #2
 800a4be:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a4c2:	4413      	add	r3, r2
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f7ff fc19 	bl	8009cfc <ld_dword>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a4d0:	617b      	str	r3, [r7, #20]
			break;
 800a4d2:	e009      	b.n	800a4e8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	617b      	str	r3, [r7, #20]
 800a4d8:	e006      	b.n	800a4e8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a4da:	bf00      	nop
 800a4dc:	e004      	b.n	800a4e8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a4de:	bf00      	nop
 800a4e0:	e002      	b.n	800a4e8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a4e2:	bf00      	nop
 800a4e4:	e000      	b.n	800a4e8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a4e6:	bf00      	nop
		}
	}

	return val;
 800a4e8:	697b      	ldr	r3, [r7, #20]
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3718      	adds	r7, #24
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a4f2:	b590      	push	{r4, r7, lr}
 800a4f4:	b089      	sub	sp, #36	; 0x24
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	60f8      	str	r0, [r7, #12]
 800a4fa:	60b9      	str	r1, [r7, #8]
 800a4fc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a4fe:	2302      	movs	r3, #2
 800a500:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	2b01      	cmp	r3, #1
 800a506:	f240 80d2 	bls.w	800a6ae <put_fat+0x1bc>
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	699b      	ldr	r3, [r3, #24]
 800a50e:	68ba      	ldr	r2, [r7, #8]
 800a510:	429a      	cmp	r2, r3
 800a512:	f080 80cc 	bcs.w	800a6ae <put_fat+0x1bc>
		switch (fs->fs_type) {
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	2b03      	cmp	r3, #3
 800a51c:	f000 8096 	beq.w	800a64c <put_fat+0x15a>
 800a520:	2b03      	cmp	r3, #3
 800a522:	f300 80cd 	bgt.w	800a6c0 <put_fat+0x1ce>
 800a526:	2b01      	cmp	r3, #1
 800a528:	d002      	beq.n	800a530 <put_fat+0x3e>
 800a52a:	2b02      	cmp	r3, #2
 800a52c:	d06e      	beq.n	800a60c <put_fat+0x11a>
 800a52e:	e0c7      	b.n	800a6c0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	61bb      	str	r3, [r7, #24]
 800a534:	69bb      	ldr	r3, [r7, #24]
 800a536:	085b      	lsrs	r3, r3, #1
 800a538:	69ba      	ldr	r2, [r7, #24]
 800a53a:	4413      	add	r3, r2
 800a53c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a542:	69bb      	ldr	r3, [r7, #24]
 800a544:	0a5b      	lsrs	r3, r3, #9
 800a546:	4413      	add	r3, r2
 800a548:	4619      	mov	r1, r3
 800a54a:	68f8      	ldr	r0, [r7, #12]
 800a54c:	f7ff fe6e 	bl	800a22c <move_window>
 800a550:	4603      	mov	r3, r0
 800a552:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a554:	7ffb      	ldrb	r3, [r7, #31]
 800a556:	2b00      	cmp	r3, #0
 800a558:	f040 80ab 	bne.w	800a6b2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a562:	69bb      	ldr	r3, [r7, #24]
 800a564:	1c59      	adds	r1, r3, #1
 800a566:	61b9      	str	r1, [r7, #24]
 800a568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a56c:	4413      	add	r3, r2
 800a56e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	f003 0301 	and.w	r3, r3, #1
 800a576:	2b00      	cmp	r3, #0
 800a578:	d00d      	beq.n	800a596 <put_fat+0xa4>
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	b25b      	sxtb	r3, r3
 800a580:	f003 030f 	and.w	r3, r3, #15
 800a584:	b25a      	sxtb	r2, r3
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	b2db      	uxtb	r3, r3
 800a58a:	011b      	lsls	r3, r3, #4
 800a58c:	b25b      	sxtb	r3, r3
 800a58e:	4313      	orrs	r3, r2
 800a590:	b25b      	sxtb	r3, r3
 800a592:	b2db      	uxtb	r3, r3
 800a594:	e001      	b.n	800a59a <put_fat+0xa8>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	b2db      	uxtb	r3, r3
 800a59a:	697a      	ldr	r2, [r7, #20]
 800a59c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	2201      	movs	r2, #1
 800a5a2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5a8:	69bb      	ldr	r3, [r7, #24]
 800a5aa:	0a5b      	lsrs	r3, r3, #9
 800a5ac:	4413      	add	r3, r2
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	68f8      	ldr	r0, [r7, #12]
 800a5b2:	f7ff fe3b 	bl	800a22c <move_window>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a5ba:	7ffb      	ldrb	r3, [r7, #31]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d17a      	bne.n	800a6b6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a5c6:	69bb      	ldr	r3, [r7, #24]
 800a5c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5cc:	4413      	add	r3, r2
 800a5ce:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	f003 0301 	and.w	r3, r3, #1
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d003      	beq.n	800a5e2 <put_fat+0xf0>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	091b      	lsrs	r3, r3, #4
 800a5de:	b2db      	uxtb	r3, r3
 800a5e0:	e00e      	b.n	800a600 <put_fat+0x10e>
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	781b      	ldrb	r3, [r3, #0]
 800a5e6:	b25b      	sxtb	r3, r3
 800a5e8:	f023 030f 	bic.w	r3, r3, #15
 800a5ec:	b25a      	sxtb	r2, r3
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	0a1b      	lsrs	r3, r3, #8
 800a5f2:	b25b      	sxtb	r3, r3
 800a5f4:	f003 030f 	and.w	r3, r3, #15
 800a5f8:	b25b      	sxtb	r3, r3
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	b25b      	sxtb	r3, r3
 800a5fe:	b2db      	uxtb	r3, r3
 800a600:	697a      	ldr	r2, [r7, #20]
 800a602:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2201      	movs	r2, #1
 800a608:	70da      	strb	r2, [r3, #3]
			break;
 800a60a:	e059      	b.n	800a6c0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	0a1b      	lsrs	r3, r3, #8
 800a614:	4413      	add	r3, r2
 800a616:	4619      	mov	r1, r3
 800a618:	68f8      	ldr	r0, [r7, #12]
 800a61a:	f7ff fe07 	bl	800a22c <move_window>
 800a61e:	4603      	mov	r3, r0
 800a620:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a622:	7ffb      	ldrb	r3, [r7, #31]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d148      	bne.n	800a6ba <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	005b      	lsls	r3, r3, #1
 800a632:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a636:	4413      	add	r3, r2
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	b292      	uxth	r2, r2
 800a63c:	4611      	mov	r1, r2
 800a63e:	4618      	mov	r0, r3
 800a640:	f7ff fb7f 	bl	8009d42 <st_word>
			fs->wflag = 1;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2201      	movs	r2, #1
 800a648:	70da      	strb	r2, [r3, #3]
			break;
 800a64a:	e039      	b.n	800a6c0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	09db      	lsrs	r3, r3, #7
 800a654:	4413      	add	r3, r2
 800a656:	4619      	mov	r1, r3
 800a658:	68f8      	ldr	r0, [r7, #12]
 800a65a:	f7ff fde7 	bl	800a22c <move_window>
 800a65e:	4603      	mov	r3, r0
 800a660:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a662:	7ffb      	ldrb	r3, [r7, #31]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d12a      	bne.n	800a6be <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	009b      	lsls	r3, r3, #2
 800a678:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a67c:	4413      	add	r3, r2
 800a67e:	4618      	mov	r0, r3
 800a680:	f7ff fb3c 	bl	8009cfc <ld_dword>
 800a684:	4603      	mov	r3, r0
 800a686:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a68a:	4323      	orrs	r3, r4
 800a68c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	009b      	lsls	r3, r3, #2
 800a698:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a69c:	4413      	add	r3, r2
 800a69e:	6879      	ldr	r1, [r7, #4]
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7ff fb69 	bl	8009d78 <st_dword>
			fs->wflag = 1;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	70da      	strb	r2, [r3, #3]
			break;
 800a6ac:	e008      	b.n	800a6c0 <put_fat+0x1ce>
		}
	}
 800a6ae:	bf00      	nop
 800a6b0:	e006      	b.n	800a6c0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a6b2:	bf00      	nop
 800a6b4:	e004      	b.n	800a6c0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a6b6:	bf00      	nop
 800a6b8:	e002      	b.n	800a6c0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a6ba:	bf00      	nop
 800a6bc:	e000      	b.n	800a6c0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a6be:	bf00      	nop
	return res;
 800a6c0:	7ffb      	ldrb	r3, [r7, #31]
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3724      	adds	r7, #36	; 0x24
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd90      	pop	{r4, r7, pc}

0800a6ca <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b088      	sub	sp, #32
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	60f8      	str	r0, [r7, #12]
 800a6d2:	60b9      	str	r1, [r7, #8]
 800a6d4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	2b01      	cmp	r3, #1
 800a6e4:	d904      	bls.n	800a6f0 <remove_chain+0x26>
 800a6e6:	69bb      	ldr	r3, [r7, #24]
 800a6e8:	699b      	ldr	r3, [r3, #24]
 800a6ea:	68ba      	ldr	r2, [r7, #8]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d301      	bcc.n	800a6f4 <remove_chain+0x2a>
 800a6f0:	2302      	movs	r3, #2
 800a6f2:	e04b      	b.n	800a78c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d00c      	beq.n	800a714 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a6fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a6fe:	6879      	ldr	r1, [r7, #4]
 800a700:	69b8      	ldr	r0, [r7, #24]
 800a702:	f7ff fef6 	bl	800a4f2 <put_fat>
 800a706:	4603      	mov	r3, r0
 800a708:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a70a:	7ffb      	ldrb	r3, [r7, #31]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d001      	beq.n	800a714 <remove_chain+0x4a>
 800a710:	7ffb      	ldrb	r3, [r7, #31]
 800a712:	e03b      	b.n	800a78c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a714:	68b9      	ldr	r1, [r7, #8]
 800a716:	68f8      	ldr	r0, [r7, #12]
 800a718:	f7ff fe43 	bl	800a3a2 <get_fat>
 800a71c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d031      	beq.n	800a788 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	2b01      	cmp	r3, #1
 800a728:	d101      	bne.n	800a72e <remove_chain+0x64>
 800a72a:	2302      	movs	r3, #2
 800a72c:	e02e      	b.n	800a78c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a734:	d101      	bne.n	800a73a <remove_chain+0x70>
 800a736:	2301      	movs	r3, #1
 800a738:	e028      	b.n	800a78c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a73a:	2200      	movs	r2, #0
 800a73c:	68b9      	ldr	r1, [r7, #8]
 800a73e:	69b8      	ldr	r0, [r7, #24]
 800a740:	f7ff fed7 	bl	800a4f2 <put_fat>
 800a744:	4603      	mov	r3, r0
 800a746:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a748:	7ffb      	ldrb	r3, [r7, #31]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d001      	beq.n	800a752 <remove_chain+0x88>
 800a74e:	7ffb      	ldrb	r3, [r7, #31]
 800a750:	e01c      	b.n	800a78c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a752:	69bb      	ldr	r3, [r7, #24]
 800a754:	695a      	ldr	r2, [r3, #20]
 800a756:	69bb      	ldr	r3, [r7, #24]
 800a758:	699b      	ldr	r3, [r3, #24]
 800a75a:	3b02      	subs	r3, #2
 800a75c:	429a      	cmp	r2, r3
 800a75e:	d20b      	bcs.n	800a778 <remove_chain+0xae>
			fs->free_clst++;
 800a760:	69bb      	ldr	r3, [r7, #24]
 800a762:	695b      	ldr	r3, [r3, #20]
 800a764:	1c5a      	adds	r2, r3, #1
 800a766:	69bb      	ldr	r3, [r7, #24]
 800a768:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800a76a:	69bb      	ldr	r3, [r7, #24]
 800a76c:	791b      	ldrb	r3, [r3, #4]
 800a76e:	f043 0301 	orr.w	r3, r3, #1
 800a772:	b2da      	uxtb	r2, r3
 800a774:	69bb      	ldr	r3, [r7, #24]
 800a776:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a77c:	69bb      	ldr	r3, [r7, #24]
 800a77e:	699b      	ldr	r3, [r3, #24]
 800a780:	68ba      	ldr	r2, [r7, #8]
 800a782:	429a      	cmp	r2, r3
 800a784:	d3c6      	bcc.n	800a714 <remove_chain+0x4a>
 800a786:	e000      	b.n	800a78a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a788:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a78a:	2300      	movs	r3, #0
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3720      	adds	r7, #32
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b088      	sub	sp, #32
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d10d      	bne.n	800a7c6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	691b      	ldr	r3, [r3, #16]
 800a7ae:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a7b0:	69bb      	ldr	r3, [r7, #24]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d004      	beq.n	800a7c0 <create_chain+0x2c>
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	699b      	ldr	r3, [r3, #24]
 800a7ba:	69ba      	ldr	r2, [r7, #24]
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d31b      	bcc.n	800a7f8 <create_chain+0x64>
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	61bb      	str	r3, [r7, #24]
 800a7c4:	e018      	b.n	800a7f8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a7c6:	6839      	ldr	r1, [r7, #0]
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f7ff fdea 	bl	800a3a2 <get_fat>
 800a7ce:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	2b01      	cmp	r3, #1
 800a7d4:	d801      	bhi.n	800a7da <create_chain+0x46>
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e070      	b.n	800a8bc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7e0:	d101      	bne.n	800a7e6 <create_chain+0x52>
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	e06a      	b.n	800a8bc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	699b      	ldr	r3, [r3, #24]
 800a7ea:	68fa      	ldr	r2, [r7, #12]
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	d201      	bcs.n	800a7f4 <create_chain+0x60>
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	e063      	b.n	800a8bc <create_chain+0x128>
		scl = clst;
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a7f8:	69bb      	ldr	r3, [r7, #24]
 800a7fa:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a7fc:	69fb      	ldr	r3, [r7, #28]
 800a7fe:	3301      	adds	r3, #1
 800a800:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	699b      	ldr	r3, [r3, #24]
 800a806:	69fa      	ldr	r2, [r7, #28]
 800a808:	429a      	cmp	r2, r3
 800a80a:	d307      	bcc.n	800a81c <create_chain+0x88>
				ncl = 2;
 800a80c:	2302      	movs	r3, #2
 800a80e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a810:	69fa      	ldr	r2, [r7, #28]
 800a812:	69bb      	ldr	r3, [r7, #24]
 800a814:	429a      	cmp	r2, r3
 800a816:	d901      	bls.n	800a81c <create_chain+0x88>
 800a818:	2300      	movs	r3, #0
 800a81a:	e04f      	b.n	800a8bc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a81c:	69f9      	ldr	r1, [r7, #28]
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f7ff fdbf 	bl	800a3a2 <get_fat>
 800a824:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d00e      	beq.n	800a84a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2b01      	cmp	r3, #1
 800a830:	d003      	beq.n	800a83a <create_chain+0xa6>
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a838:	d101      	bne.n	800a83e <create_chain+0xaa>
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	e03e      	b.n	800a8bc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a83e:	69fa      	ldr	r2, [r7, #28]
 800a840:	69bb      	ldr	r3, [r7, #24]
 800a842:	429a      	cmp	r2, r3
 800a844:	d1da      	bne.n	800a7fc <create_chain+0x68>
 800a846:	2300      	movs	r3, #0
 800a848:	e038      	b.n	800a8bc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a84a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a84c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a850:	69f9      	ldr	r1, [r7, #28]
 800a852:	6938      	ldr	r0, [r7, #16]
 800a854:	f7ff fe4d 	bl	800a4f2 <put_fat>
 800a858:	4603      	mov	r3, r0
 800a85a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a85c:	7dfb      	ldrb	r3, [r7, #23]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d109      	bne.n	800a876 <create_chain+0xe2>
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d006      	beq.n	800a876 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a868:	69fa      	ldr	r2, [r7, #28]
 800a86a:	6839      	ldr	r1, [r7, #0]
 800a86c:	6938      	ldr	r0, [r7, #16]
 800a86e:	f7ff fe40 	bl	800a4f2 <put_fat>
 800a872:	4603      	mov	r3, r0
 800a874:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a876:	7dfb      	ldrb	r3, [r7, #23]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d116      	bne.n	800a8aa <create_chain+0x116>
		fs->last_clst = ncl;
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	69fa      	ldr	r2, [r7, #28]
 800a880:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	695a      	ldr	r2, [r3, #20]
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	699b      	ldr	r3, [r3, #24]
 800a88a:	3b02      	subs	r3, #2
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d804      	bhi.n	800a89a <create_chain+0x106>
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	695b      	ldr	r3, [r3, #20]
 800a894:	1e5a      	subs	r2, r3, #1
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	791b      	ldrb	r3, [r3, #4]
 800a89e:	f043 0301 	orr.w	r3, r3, #1
 800a8a2:	b2da      	uxtb	r2, r3
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	711a      	strb	r2, [r3, #4]
 800a8a8:	e007      	b.n	800a8ba <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a8aa:	7dfb      	ldrb	r3, [r7, #23]
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d102      	bne.n	800a8b6 <create_chain+0x122>
 800a8b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8b4:	e000      	b.n	800a8b8 <create_chain+0x124>
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a8ba:	69fb      	ldr	r3, [r7, #28]
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3720      	adds	r7, #32
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b087      	sub	sp, #28
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8d8:	3304      	adds	r3, #4
 800a8da:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	0a5b      	lsrs	r3, r3, #9
 800a8e0:	68fa      	ldr	r2, [r7, #12]
 800a8e2:	8952      	ldrh	r2, [r2, #10]
 800a8e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8e8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	1d1a      	adds	r2, r3, #4
 800a8ee:	613a      	str	r2, [r7, #16]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d101      	bne.n	800a8fe <clmt_clust+0x3a>
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	e010      	b.n	800a920 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a8fe:	697a      	ldr	r2, [r7, #20]
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	429a      	cmp	r2, r3
 800a904:	d307      	bcc.n	800a916 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a906:	697a      	ldr	r2, [r7, #20]
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	1ad3      	subs	r3, r2, r3
 800a90c:	617b      	str	r3, [r7, #20]
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	3304      	adds	r3, #4
 800a912:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a914:	e7e9      	b.n	800a8ea <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a916:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	4413      	add	r3, r2
}
 800a920:	4618      	mov	r0, r3
 800a922:	371c      	adds	r7, #28
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr

0800a92c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b086      	sub	sp, #24
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a942:	d204      	bcs.n	800a94e <dir_sdi+0x22>
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	f003 031f 	and.w	r3, r3, #31
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d001      	beq.n	800a952 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a94e:	2302      	movs	r3, #2
 800a950:	e063      	b.n	800aa1a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	683a      	ldr	r2, [r7, #0]
 800a956:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	689b      	ldr	r3, [r3, #8]
 800a95c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d106      	bne.n	800a972 <dir_sdi+0x46>
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	2b02      	cmp	r3, #2
 800a96a:	d902      	bls.n	800a972 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a970:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d10c      	bne.n	800a992 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	095b      	lsrs	r3, r3, #5
 800a97c:	693a      	ldr	r2, [r7, #16]
 800a97e:	8912      	ldrh	r2, [r2, #8]
 800a980:	4293      	cmp	r3, r2
 800a982:	d301      	bcc.n	800a988 <dir_sdi+0x5c>
 800a984:	2302      	movs	r3, #2
 800a986:	e048      	b.n	800aa1a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	61da      	str	r2, [r3, #28]
 800a990:	e029      	b.n	800a9e6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	895b      	ldrh	r3, [r3, #10]
 800a996:	025b      	lsls	r3, r3, #9
 800a998:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a99a:	e019      	b.n	800a9d0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6979      	ldr	r1, [r7, #20]
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f7ff fcfe 	bl	800a3a2 <get_fat>
 800a9a6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9ae:	d101      	bne.n	800a9b4 <dir_sdi+0x88>
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	e032      	b.n	800aa1a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d904      	bls.n	800a9c4 <dir_sdi+0x98>
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	699b      	ldr	r3, [r3, #24]
 800a9be:	697a      	ldr	r2, [r7, #20]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d301      	bcc.n	800a9c8 <dir_sdi+0x9c>
 800a9c4:	2302      	movs	r3, #2
 800a9c6:	e028      	b.n	800aa1a <dir_sdi+0xee>
			ofs -= csz;
 800a9c8:	683a      	ldr	r2, [r7, #0]
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	1ad3      	subs	r3, r2, r3
 800a9ce:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a9d0:	683a      	ldr	r2, [r7, #0]
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d2e1      	bcs.n	800a99c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a9d8:	6979      	ldr	r1, [r7, #20]
 800a9da:	6938      	ldr	r0, [r7, #16]
 800a9dc:	f7ff fcc2 	bl	800a364 <clust2sect>
 800a9e0:	4602      	mov	r2, r0
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	697a      	ldr	r2, [r7, #20]
 800a9ea:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	69db      	ldr	r3, [r3, #28]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d101      	bne.n	800a9f8 <dir_sdi+0xcc>
 800a9f4:	2302      	movs	r3, #2
 800a9f6:	e010      	b.n	800aa1a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	69da      	ldr	r2, [r3, #28]
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	0a5b      	lsrs	r3, r3, #9
 800aa00:	441a      	add	r2, r3
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa12:	441a      	add	r2, r3
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800aa18:	2300      	movs	r3, #0
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3718      	adds	r7, #24
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}

0800aa22 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800aa22:	b580      	push	{r7, lr}
 800aa24:	b086      	sub	sp, #24
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
 800aa2a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	695b      	ldr	r3, [r3, #20]
 800aa36:	3320      	adds	r3, #32
 800aa38:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	69db      	ldr	r3, [r3, #28]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d003      	beq.n	800aa4a <dir_next+0x28>
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa48:	d301      	bcc.n	800aa4e <dir_next+0x2c>
 800aa4a:	2304      	movs	r3, #4
 800aa4c:	e0aa      	b.n	800aba4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	f040 8098 	bne.w	800ab8a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	69db      	ldr	r3, [r3, #28]
 800aa5e:	1c5a      	adds	r2, r3, #1
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	699b      	ldr	r3, [r3, #24]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d10b      	bne.n	800aa84 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	095b      	lsrs	r3, r3, #5
 800aa70:	68fa      	ldr	r2, [r7, #12]
 800aa72:	8912      	ldrh	r2, [r2, #8]
 800aa74:	4293      	cmp	r3, r2
 800aa76:	f0c0 8088 	bcc.w	800ab8a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	61da      	str	r2, [r3, #28]
 800aa80:	2304      	movs	r3, #4
 800aa82:	e08f      	b.n	800aba4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	0a5b      	lsrs	r3, r3, #9
 800aa88:	68fa      	ldr	r2, [r7, #12]
 800aa8a:	8952      	ldrh	r2, [r2, #10]
 800aa8c:	3a01      	subs	r2, #1
 800aa8e:	4013      	ands	r3, r2
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d17a      	bne.n	800ab8a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	699b      	ldr	r3, [r3, #24]
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	4610      	mov	r0, r2
 800aa9e:	f7ff fc80 	bl	800a3a2 <get_fat>
 800aaa2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	2b01      	cmp	r3, #1
 800aaa8:	d801      	bhi.n	800aaae <dir_next+0x8c>
 800aaaa:	2302      	movs	r3, #2
 800aaac:	e07a      	b.n	800aba4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aab4:	d101      	bne.n	800aaba <dir_next+0x98>
 800aab6:	2301      	movs	r3, #1
 800aab8:	e074      	b.n	800aba4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	699b      	ldr	r3, [r3, #24]
 800aabe:	697a      	ldr	r2, [r7, #20]
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d358      	bcc.n	800ab76 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d104      	bne.n	800aad4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2200      	movs	r2, #0
 800aace:	61da      	str	r2, [r3, #28]
 800aad0:	2304      	movs	r3, #4
 800aad2:	e067      	b.n	800aba4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800aad4:	687a      	ldr	r2, [r7, #4]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	699b      	ldr	r3, [r3, #24]
 800aada:	4619      	mov	r1, r3
 800aadc:	4610      	mov	r0, r2
 800aade:	f7ff fe59 	bl	800a794 <create_chain>
 800aae2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d101      	bne.n	800aaee <dir_next+0xcc>
 800aaea:	2307      	movs	r3, #7
 800aaec:	e05a      	b.n	800aba4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d101      	bne.n	800aaf8 <dir_next+0xd6>
 800aaf4:	2302      	movs	r3, #2
 800aaf6:	e055      	b.n	800aba4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aafe:	d101      	bne.n	800ab04 <dir_next+0xe2>
 800ab00:	2301      	movs	r3, #1
 800ab02:	e04f      	b.n	800aba4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ab04:	68f8      	ldr	r0, [r7, #12]
 800ab06:	f7ff fb4d 	bl	800a1a4 <sync_window>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d001      	beq.n	800ab14 <dir_next+0xf2>
 800ab10:	2301      	movs	r3, #1
 800ab12:	e047      	b.n	800aba4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	3334      	adds	r3, #52	; 0x34
 800ab18:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab1c:	2100      	movs	r1, #0
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f7ff f977 	bl	8009e12 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ab24:	2300      	movs	r3, #0
 800ab26:	613b      	str	r3, [r7, #16]
 800ab28:	6979      	ldr	r1, [r7, #20]
 800ab2a:	68f8      	ldr	r0, [r7, #12]
 800ab2c:	f7ff fc1a 	bl	800a364 <clust2sect>
 800ab30:	4602      	mov	r2, r0
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	631a      	str	r2, [r3, #48]	; 0x30
 800ab36:	e012      	b.n	800ab5e <dir_next+0x13c>
						fs->wflag = 1;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ab3e:	68f8      	ldr	r0, [r7, #12]
 800ab40:	f7ff fb30 	bl	800a1a4 <sync_window>
 800ab44:	4603      	mov	r3, r0
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d001      	beq.n	800ab4e <dir_next+0x12c>
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	e02a      	b.n	800aba4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	3301      	adds	r3, #1
 800ab52:	613b      	str	r3, [r7, #16]
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab58:	1c5a      	adds	r2, r3, #1
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	631a      	str	r2, [r3, #48]	; 0x30
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	895b      	ldrh	r3, [r3, #10]
 800ab62:	461a      	mov	r2, r3
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d3e6      	bcc.n	800ab38 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab6e:	693b      	ldr	r3, [r7, #16]
 800ab70:	1ad2      	subs	r2, r2, r3
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	697a      	ldr	r2, [r7, #20]
 800ab7a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ab7c:	6979      	ldr	r1, [r7, #20]
 800ab7e:	68f8      	ldr	r0, [r7, #12]
 800ab80:	f7ff fbf0 	bl	800a364 <clust2sect>
 800ab84:	4602      	mov	r2, r0
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	68ba      	ldr	r2, [r7, #8]
 800ab8e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab9c:	441a      	add	r2, r3
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800aba2:	2300      	movs	r3, #0
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3718      	adds	r7, #24
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b086      	sub	sp, #24
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800abbc:	2100      	movs	r1, #0
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f7ff feb4 	bl	800a92c <dir_sdi>
 800abc4:	4603      	mov	r3, r0
 800abc6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800abc8:	7dfb      	ldrb	r3, [r7, #23]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d12b      	bne.n	800ac26 <dir_alloc+0x7a>
		n = 0;
 800abce:	2300      	movs	r3, #0
 800abd0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	69db      	ldr	r3, [r3, #28]
 800abd6:	4619      	mov	r1, r3
 800abd8:	68f8      	ldr	r0, [r7, #12]
 800abda:	f7ff fb27 	bl	800a22c <move_window>
 800abde:	4603      	mov	r3, r0
 800abe0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800abe2:	7dfb      	ldrb	r3, [r7, #23]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d11d      	bne.n	800ac24 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6a1b      	ldr	r3, [r3, #32]
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	2be5      	cmp	r3, #229	; 0xe5
 800abf0:	d004      	beq.n	800abfc <dir_alloc+0x50>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6a1b      	ldr	r3, [r3, #32]
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d107      	bne.n	800ac0c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	3301      	adds	r3, #1
 800ac00:	613b      	str	r3, [r7, #16]
 800ac02:	693a      	ldr	r2, [r7, #16]
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d102      	bne.n	800ac10 <dir_alloc+0x64>
 800ac0a:	e00c      	b.n	800ac26 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ac10:	2101      	movs	r1, #1
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f7ff ff05 	bl	800aa22 <dir_next>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ac1c:	7dfb      	ldrb	r3, [r7, #23]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d0d7      	beq.n	800abd2 <dir_alloc+0x26>
 800ac22:	e000      	b.n	800ac26 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ac24:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ac26:	7dfb      	ldrb	r3, [r7, #23]
 800ac28:	2b04      	cmp	r3, #4
 800ac2a:	d101      	bne.n	800ac30 <dir_alloc+0x84>
 800ac2c:	2307      	movs	r3, #7
 800ac2e:	75fb      	strb	r3, [r7, #23]
	return res;
 800ac30:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3718      	adds	r7, #24
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}

0800ac3a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ac3a:	b580      	push	{r7, lr}
 800ac3c:	b084      	sub	sp, #16
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	6078      	str	r0, [r7, #4]
 800ac42:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	331a      	adds	r3, #26
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f7ff f83f 	bl	8009ccc <ld_word>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	2b03      	cmp	r3, #3
 800ac58:	d109      	bne.n	800ac6e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	3314      	adds	r3, #20
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7ff f834 	bl	8009ccc <ld_word>
 800ac64:	4603      	mov	r3, r0
 800ac66:	041b      	lsls	r3, r3, #16
 800ac68:	68fa      	ldr	r2, [r7, #12]
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3710      	adds	r7, #16
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b084      	sub	sp, #16
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	60f8      	str	r0, [r7, #12]
 800ac80:	60b9      	str	r1, [r7, #8]
 800ac82:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	331a      	adds	r3, #26
 800ac88:	687a      	ldr	r2, [r7, #4]
 800ac8a:	b292      	uxth	r2, r2
 800ac8c:	4611      	mov	r1, r2
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7ff f857 	bl	8009d42 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	2b03      	cmp	r3, #3
 800ac9a:	d109      	bne.n	800acb0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	f103 0214 	add.w	r2, r3, #20
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	0c1b      	lsrs	r3, r3, #16
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	4619      	mov	r1, r3
 800acaa:	4610      	mov	r0, r2
 800acac:	f7ff f849 	bl	8009d42 <st_word>
	}
}
 800acb0:	bf00      	nop
 800acb2:	3710      	adds	r7, #16
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800acb8:	b590      	push	{r4, r7, lr}
 800acba:	b087      	sub	sp, #28
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	331a      	adds	r3, #26
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7ff f800 	bl	8009ccc <ld_word>
 800accc:	4603      	mov	r3, r0
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d001      	beq.n	800acd6 <cmp_lfn+0x1e>
 800acd2:	2300      	movs	r3, #0
 800acd4:	e059      	b.n	800ad8a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800acde:	1e5a      	subs	r2, r3, #1
 800ace0:	4613      	mov	r3, r2
 800ace2:	005b      	lsls	r3, r3, #1
 800ace4:	4413      	add	r3, r2
 800ace6:	009b      	lsls	r3, r3, #2
 800ace8:	4413      	add	r3, r2
 800acea:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800acec:	2301      	movs	r3, #1
 800acee:	81fb      	strh	r3, [r7, #14]
 800acf0:	2300      	movs	r3, #0
 800acf2:	613b      	str	r3, [r7, #16]
 800acf4:	e033      	b.n	800ad5e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800acf6:	4a27      	ldr	r2, [pc, #156]	; (800ad94 <cmp_lfn+0xdc>)
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	4413      	add	r3, r2
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	461a      	mov	r2, r3
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	4413      	add	r3, r2
 800ad04:	4618      	mov	r0, r3
 800ad06:	f7fe ffe1 	bl	8009ccc <ld_word>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ad0e:	89fb      	ldrh	r3, [r7, #14]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d01a      	beq.n	800ad4a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	2bfe      	cmp	r3, #254	; 0xfe
 800ad18:	d812      	bhi.n	800ad40 <cmp_lfn+0x88>
 800ad1a:	89bb      	ldrh	r3, [r7, #12]
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f7fe fead 	bl	8009a7c <ff_wtoupper>
 800ad22:	4603      	mov	r3, r0
 800ad24:	461c      	mov	r4, r3
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	1c5a      	adds	r2, r3, #1
 800ad2a:	617a      	str	r2, [r7, #20]
 800ad2c:	005b      	lsls	r3, r3, #1
 800ad2e:	687a      	ldr	r2, [r7, #4]
 800ad30:	4413      	add	r3, r2
 800ad32:	881b      	ldrh	r3, [r3, #0]
 800ad34:	4618      	mov	r0, r3
 800ad36:	f7fe fea1 	bl	8009a7c <ff_wtoupper>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	429c      	cmp	r4, r3
 800ad3e:	d001      	beq.n	800ad44 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800ad40:	2300      	movs	r3, #0
 800ad42:	e022      	b.n	800ad8a <cmp_lfn+0xd2>
			}
			wc = uc;
 800ad44:	89bb      	ldrh	r3, [r7, #12]
 800ad46:	81fb      	strh	r3, [r7, #14]
 800ad48:	e006      	b.n	800ad58 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ad4a:	89bb      	ldrh	r3, [r7, #12]
 800ad4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d001      	beq.n	800ad58 <cmp_lfn+0xa0>
 800ad54:	2300      	movs	r3, #0
 800ad56:	e018      	b.n	800ad8a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	613b      	str	r3, [r7, #16]
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	2b0c      	cmp	r3, #12
 800ad62:	d9c8      	bls.n	800acf6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d00b      	beq.n	800ad88 <cmp_lfn+0xd0>
 800ad70:	89fb      	ldrh	r3, [r7, #14]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d008      	beq.n	800ad88 <cmp_lfn+0xd0>
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	005b      	lsls	r3, r3, #1
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	4413      	add	r3, r2
 800ad7e:	881b      	ldrh	r3, [r3, #0]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d001      	beq.n	800ad88 <cmp_lfn+0xd0>
 800ad84:	2300      	movs	r3, #0
 800ad86:	e000      	b.n	800ad8a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800ad88:	2301      	movs	r3, #1
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	371c      	adds	r7, #28
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd90      	pop	{r4, r7, pc}
 800ad92:	bf00      	nop
 800ad94:	080135d4 	.word	0x080135d4

0800ad98 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b088      	sub	sp, #32
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	60f8      	str	r0, [r7, #12]
 800ada0:	60b9      	str	r1, [r7, #8]
 800ada2:	4611      	mov	r1, r2
 800ada4:	461a      	mov	r2, r3
 800ada6:	460b      	mov	r3, r1
 800ada8:	71fb      	strb	r3, [r7, #7]
 800adaa:	4613      	mov	r3, r2
 800adac:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	330d      	adds	r3, #13
 800adb2:	79ba      	ldrb	r2, [r7, #6]
 800adb4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	330b      	adds	r3, #11
 800adba:	220f      	movs	r2, #15
 800adbc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	330c      	adds	r3, #12
 800adc2:	2200      	movs	r2, #0
 800adc4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	331a      	adds	r3, #26
 800adca:	2100      	movs	r1, #0
 800adcc:	4618      	mov	r0, r3
 800adce:	f7fe ffb8 	bl	8009d42 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800add2:	79fb      	ldrb	r3, [r7, #7]
 800add4:	1e5a      	subs	r2, r3, #1
 800add6:	4613      	mov	r3, r2
 800add8:	005b      	lsls	r3, r3, #1
 800adda:	4413      	add	r3, r2
 800addc:	009b      	lsls	r3, r3, #2
 800adde:	4413      	add	r3, r2
 800ade0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ade2:	2300      	movs	r3, #0
 800ade4:	82fb      	strh	r3, [r7, #22]
 800ade6:	2300      	movs	r3, #0
 800ade8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800adea:	8afb      	ldrh	r3, [r7, #22]
 800adec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d007      	beq.n	800ae04 <put_lfn+0x6c>
 800adf4:	69fb      	ldr	r3, [r7, #28]
 800adf6:	1c5a      	adds	r2, r3, #1
 800adf8:	61fa      	str	r2, [r7, #28]
 800adfa:	005b      	lsls	r3, r3, #1
 800adfc:	68fa      	ldr	r2, [r7, #12]
 800adfe:	4413      	add	r3, r2
 800ae00:	881b      	ldrh	r3, [r3, #0]
 800ae02:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ae04:	4a17      	ldr	r2, [pc, #92]	; (800ae64 <put_lfn+0xcc>)
 800ae06:	69bb      	ldr	r3, [r7, #24]
 800ae08:	4413      	add	r3, r2
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	461a      	mov	r2, r3
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	4413      	add	r3, r2
 800ae12:	8afa      	ldrh	r2, [r7, #22]
 800ae14:	4611      	mov	r1, r2
 800ae16:	4618      	mov	r0, r3
 800ae18:	f7fe ff93 	bl	8009d42 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ae1c:	8afb      	ldrh	r3, [r7, #22]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d102      	bne.n	800ae28 <put_lfn+0x90>
 800ae22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ae26:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800ae28:	69bb      	ldr	r3, [r7, #24]
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	61bb      	str	r3, [r7, #24]
 800ae2e:	69bb      	ldr	r3, [r7, #24]
 800ae30:	2b0c      	cmp	r3, #12
 800ae32:	d9da      	bls.n	800adea <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ae34:	8afb      	ldrh	r3, [r7, #22]
 800ae36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d006      	beq.n	800ae4c <put_lfn+0xb4>
 800ae3e:	69fb      	ldr	r3, [r7, #28]
 800ae40:	005b      	lsls	r3, r3, #1
 800ae42:	68fa      	ldr	r2, [r7, #12]
 800ae44:	4413      	add	r3, r2
 800ae46:	881b      	ldrh	r3, [r3, #0]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d103      	bne.n	800ae54 <put_lfn+0xbc>
 800ae4c:	79fb      	ldrb	r3, [r7, #7]
 800ae4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae52:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	79fa      	ldrb	r2, [r7, #7]
 800ae58:	701a      	strb	r2, [r3, #0]
}
 800ae5a:	bf00      	nop
 800ae5c:	3720      	adds	r7, #32
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
 800ae62:	bf00      	nop
 800ae64:	080135d4 	.word	0x080135d4

0800ae68 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b08c      	sub	sp, #48	; 0x30
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	60f8      	str	r0, [r7, #12]
 800ae70:	60b9      	str	r1, [r7, #8]
 800ae72:	607a      	str	r2, [r7, #4]
 800ae74:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ae76:	220b      	movs	r2, #11
 800ae78:	68b9      	ldr	r1, [r7, #8]
 800ae7a:	68f8      	ldr	r0, [r7, #12]
 800ae7c:	f7fe ffa8 	bl	8009dd0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	2b05      	cmp	r3, #5
 800ae84:	d92b      	bls.n	800aede <gen_numname+0x76>
		sr = seq;
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ae8a:	e022      	b.n	800aed2 <gen_numname+0x6a>
			wc = *lfn++;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	1c9a      	adds	r2, r3, #2
 800ae90:	607a      	str	r2, [r7, #4]
 800ae92:	881b      	ldrh	r3, [r3, #0]
 800ae94:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800ae96:	2300      	movs	r3, #0
 800ae98:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae9a:	e017      	b.n	800aecc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800ae9c:	69fb      	ldr	r3, [r7, #28]
 800ae9e:	005a      	lsls	r2, r3, #1
 800aea0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aea2:	f003 0301 	and.w	r3, r3, #1
 800aea6:	4413      	add	r3, r2
 800aea8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800aeaa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aeac:	085b      	lsrs	r3, r3, #1
 800aeae:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800aeb0:	69fb      	ldr	r3, [r7, #28]
 800aeb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d005      	beq.n	800aec6 <gen_numname+0x5e>
 800aeba:	69fb      	ldr	r3, [r7, #28]
 800aebc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800aec0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800aec4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800aec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec8:	3301      	adds	r3, #1
 800aeca:	62bb      	str	r3, [r7, #40]	; 0x28
 800aecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aece:	2b0f      	cmp	r3, #15
 800aed0:	d9e4      	bls.n	800ae9c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	881b      	ldrh	r3, [r3, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d1d8      	bne.n	800ae8c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800aeda:	69fb      	ldr	r3, [r7, #28]
 800aedc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800aede:	2307      	movs	r3, #7
 800aee0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	b2db      	uxtb	r3, r3
 800aee6:	f003 030f 	and.w	r3, r3, #15
 800aeea:	b2db      	uxtb	r3, r3
 800aeec:	3330      	adds	r3, #48	; 0x30
 800aeee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800aef2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aef6:	2b39      	cmp	r3, #57	; 0x39
 800aef8:	d904      	bls.n	800af04 <gen_numname+0x9c>
 800aefa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aefe:	3307      	adds	r3, #7
 800af00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800af04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af06:	1e5a      	subs	r2, r3, #1
 800af08:	62ba      	str	r2, [r7, #40]	; 0x28
 800af0a:	3330      	adds	r3, #48	; 0x30
 800af0c:	443b      	add	r3, r7
 800af0e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800af12:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	091b      	lsrs	r3, r3, #4
 800af1a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d1df      	bne.n	800aee2 <gen_numname+0x7a>
	ns[i] = '~';
 800af22:	f107 0214 	add.w	r2, r7, #20
 800af26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af28:	4413      	add	r3, r2
 800af2a:	227e      	movs	r2, #126	; 0x7e
 800af2c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800af2e:	2300      	movs	r3, #0
 800af30:	627b      	str	r3, [r7, #36]	; 0x24
 800af32:	e002      	b.n	800af3a <gen_numname+0xd2>
 800af34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af36:	3301      	adds	r3, #1
 800af38:	627b      	str	r3, [r7, #36]	; 0x24
 800af3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3e:	429a      	cmp	r2, r3
 800af40:	d205      	bcs.n	800af4e <gen_numname+0xe6>
 800af42:	68fa      	ldr	r2, [r7, #12]
 800af44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af46:	4413      	add	r3, r2
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	2b20      	cmp	r3, #32
 800af4c:	d1f2      	bne.n	800af34 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800af4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af50:	2b07      	cmp	r3, #7
 800af52:	d807      	bhi.n	800af64 <gen_numname+0xfc>
 800af54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af56:	1c5a      	adds	r2, r3, #1
 800af58:	62ba      	str	r2, [r7, #40]	; 0x28
 800af5a:	3330      	adds	r3, #48	; 0x30
 800af5c:	443b      	add	r3, r7
 800af5e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800af62:	e000      	b.n	800af66 <gen_numname+0xfe>
 800af64:	2120      	movs	r1, #32
 800af66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af68:	1c5a      	adds	r2, r3, #1
 800af6a:	627a      	str	r2, [r7, #36]	; 0x24
 800af6c:	68fa      	ldr	r2, [r7, #12]
 800af6e:	4413      	add	r3, r2
 800af70:	460a      	mov	r2, r1
 800af72:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800af74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af76:	2b07      	cmp	r3, #7
 800af78:	d9e9      	bls.n	800af4e <gen_numname+0xe6>
}
 800af7a:	bf00      	nop
 800af7c:	bf00      	nop
 800af7e:	3730      	adds	r7, #48	; 0x30
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800af84:	b480      	push	{r7}
 800af86:	b085      	sub	sp, #20
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800af8c:	2300      	movs	r3, #0
 800af8e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800af90:	230b      	movs	r3, #11
 800af92:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800af94:	7bfb      	ldrb	r3, [r7, #15]
 800af96:	b2da      	uxtb	r2, r3
 800af98:	0852      	lsrs	r2, r2, #1
 800af9a:	01db      	lsls	r3, r3, #7
 800af9c:	4313      	orrs	r3, r2
 800af9e:	b2da      	uxtb	r2, r3
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	1c59      	adds	r1, r3, #1
 800afa4:	6079      	str	r1, [r7, #4]
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	4413      	add	r3, r2
 800afaa:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	3b01      	subs	r3, #1
 800afb0:	60bb      	str	r3, [r7, #8]
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d1ed      	bne.n	800af94 <sum_sfn+0x10>
	return sum;
 800afb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3714      	adds	r7, #20
 800afbe:	46bd      	mov	sp, r7
 800afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc4:	4770      	bx	lr

0800afc6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800afc6:	b580      	push	{r7, lr}
 800afc8:	b086      	sub	sp, #24
 800afca:	af00      	add	r7, sp, #0
 800afcc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800afd4:	2100      	movs	r1, #0
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f7ff fca8 	bl	800a92c <dir_sdi>
 800afdc:	4603      	mov	r3, r0
 800afde:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800afe0:	7dfb      	ldrb	r3, [r7, #23]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d001      	beq.n	800afea <dir_find+0x24>
 800afe6:	7dfb      	ldrb	r3, [r7, #23]
 800afe8:	e0a9      	b.n	800b13e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800afea:	23ff      	movs	r3, #255	; 0xff
 800afec:	753b      	strb	r3, [r7, #20]
 800afee:	7d3b      	ldrb	r3, [r7, #20]
 800aff0:	757b      	strb	r3, [r7, #21]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aff8:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	69db      	ldr	r3, [r3, #28]
 800affe:	4619      	mov	r1, r3
 800b000:	6938      	ldr	r0, [r7, #16]
 800b002:	f7ff f913 	bl	800a22c <move_window>
 800b006:	4603      	mov	r3, r0
 800b008:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b00a:	7dfb      	ldrb	r3, [r7, #23]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	f040 8090 	bne.w	800b132 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6a1b      	ldr	r3, [r3, #32]
 800b016:	781b      	ldrb	r3, [r3, #0]
 800b018:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b01a:	7dbb      	ldrb	r3, [r7, #22]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d102      	bne.n	800b026 <dir_find+0x60>
 800b020:	2304      	movs	r3, #4
 800b022:	75fb      	strb	r3, [r7, #23]
 800b024:	e08a      	b.n	800b13c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6a1b      	ldr	r3, [r3, #32]
 800b02a:	330b      	adds	r3, #11
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b032:	73fb      	strb	r3, [r7, #15]
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	7bfa      	ldrb	r2, [r7, #15]
 800b038:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b03a:	7dbb      	ldrb	r3, [r7, #22]
 800b03c:	2be5      	cmp	r3, #229	; 0xe5
 800b03e:	d007      	beq.n	800b050 <dir_find+0x8a>
 800b040:	7bfb      	ldrb	r3, [r7, #15]
 800b042:	f003 0308 	and.w	r3, r3, #8
 800b046:	2b00      	cmp	r3, #0
 800b048:	d009      	beq.n	800b05e <dir_find+0x98>
 800b04a:	7bfb      	ldrb	r3, [r7, #15]
 800b04c:	2b0f      	cmp	r3, #15
 800b04e:	d006      	beq.n	800b05e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b050:	23ff      	movs	r3, #255	; 0xff
 800b052:	757b      	strb	r3, [r7, #21]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b05a:	631a      	str	r2, [r3, #48]	; 0x30
 800b05c:	e05e      	b.n	800b11c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b05e:	7bfb      	ldrb	r3, [r7, #15]
 800b060:	2b0f      	cmp	r3, #15
 800b062:	d136      	bne.n	800b0d2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b06a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d154      	bne.n	800b11c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b072:	7dbb      	ldrb	r3, [r7, #22]
 800b074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d00d      	beq.n	800b098 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6a1b      	ldr	r3, [r3, #32]
 800b080:	7b5b      	ldrb	r3, [r3, #13]
 800b082:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800b084:	7dbb      	ldrb	r3, [r7, #22]
 800b086:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b08a:	75bb      	strb	r3, [r7, #22]
 800b08c:	7dbb      	ldrb	r3, [r7, #22]
 800b08e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	695a      	ldr	r2, [r3, #20]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b098:	7dba      	ldrb	r2, [r7, #22]
 800b09a:	7d7b      	ldrb	r3, [r7, #21]
 800b09c:	429a      	cmp	r2, r3
 800b09e:	d115      	bne.n	800b0cc <dir_find+0x106>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6a1b      	ldr	r3, [r3, #32]
 800b0a4:	330d      	adds	r3, #13
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	7d3a      	ldrb	r2, [r7, #20]
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	d10e      	bne.n	800b0cc <dir_find+0x106>
 800b0ae:	693b      	ldr	r3, [r7, #16]
 800b0b0:	68da      	ldr	r2, [r3, #12]
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6a1b      	ldr	r3, [r3, #32]
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	4610      	mov	r0, r2
 800b0ba:	f7ff fdfd 	bl	800acb8 <cmp_lfn>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d003      	beq.n	800b0cc <dir_find+0x106>
 800b0c4:	7d7b      	ldrb	r3, [r7, #21]
 800b0c6:	3b01      	subs	r3, #1
 800b0c8:	b2db      	uxtb	r3, r3
 800b0ca:	e000      	b.n	800b0ce <dir_find+0x108>
 800b0cc:	23ff      	movs	r3, #255	; 0xff
 800b0ce:	757b      	strb	r3, [r7, #21]
 800b0d0:	e024      	b.n	800b11c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b0d2:	7d7b      	ldrb	r3, [r7, #21]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d109      	bne.n	800b0ec <dir_find+0x126>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6a1b      	ldr	r3, [r3, #32]
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f7ff ff51 	bl	800af84 <sum_sfn>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	461a      	mov	r2, r3
 800b0e6:	7d3b      	ldrb	r3, [r7, #20]
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d024      	beq.n	800b136 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b0f2:	f003 0301 	and.w	r3, r3, #1
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d10a      	bne.n	800b110 <dir_find+0x14a>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6a18      	ldr	r0, [r3, #32]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	3324      	adds	r3, #36	; 0x24
 800b102:	220b      	movs	r2, #11
 800b104:	4619      	mov	r1, r3
 800b106:	f7fe fe9f 	bl	8009e48 <mem_cmp>
 800b10a:	4603      	mov	r3, r0
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d014      	beq.n	800b13a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b110:	23ff      	movs	r3, #255	; 0xff
 800b112:	757b      	strb	r3, [r7, #21]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b11a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b11c:	2100      	movs	r1, #0
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f7ff fc7f 	bl	800aa22 <dir_next>
 800b124:	4603      	mov	r3, r0
 800b126:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b128:	7dfb      	ldrb	r3, [r7, #23]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	f43f af65 	beq.w	800affa <dir_find+0x34>
 800b130:	e004      	b.n	800b13c <dir_find+0x176>
		if (res != FR_OK) break;
 800b132:	bf00      	nop
 800b134:	e002      	b.n	800b13c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b136:	bf00      	nop
 800b138:	e000      	b.n	800b13c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b13a:	bf00      	nop

	return res;
 800b13c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b13e:	4618      	mov	r0, r3
 800b140:	3718      	adds	r7, #24
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
	...

0800b148 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b08c      	sub	sp, #48	; 0x30
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b15c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b160:	2b00      	cmp	r3, #0
 800b162:	d001      	beq.n	800b168 <dir_register+0x20>
 800b164:	2306      	movs	r3, #6
 800b166:	e0e0      	b.n	800b32a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800b168:	2300      	movs	r3, #0
 800b16a:	627b      	str	r3, [r7, #36]	; 0x24
 800b16c:	e002      	b.n	800b174 <dir_register+0x2c>
 800b16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b170:	3301      	adds	r3, #1
 800b172:	627b      	str	r3, [r7, #36]	; 0x24
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	68da      	ldr	r2, [r3, #12]
 800b178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17a:	005b      	lsls	r3, r3, #1
 800b17c:	4413      	add	r3, r2
 800b17e:	881b      	ldrh	r3, [r3, #0]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d1f4      	bne.n	800b16e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800b18a:	f107 030c 	add.w	r3, r7, #12
 800b18e:	220c      	movs	r2, #12
 800b190:	4618      	mov	r0, r3
 800b192:	f7fe fe1d 	bl	8009dd0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b196:	7dfb      	ldrb	r3, [r7, #23]
 800b198:	f003 0301 	and.w	r3, r3, #1
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d032      	beq.n	800b206 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2240      	movs	r2, #64	; 0x40
 800b1a4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1ac:	e016      	b.n	800b1dc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800b1b4:	69fb      	ldr	r3, [r7, #28]
 800b1b6:	68da      	ldr	r2, [r3, #12]
 800b1b8:	f107 010c 	add.w	r1, r7, #12
 800b1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1be:	f7ff fe53 	bl	800ae68 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f7ff feff 	bl	800afc6 <dir_find>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800b1ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d106      	bne.n	800b1e4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800b1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d8:	3301      	adds	r3, #1
 800b1da:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1de:	2b63      	cmp	r3, #99	; 0x63
 800b1e0:	d9e5      	bls.n	800b1ae <dir_register+0x66>
 800b1e2:	e000      	b.n	800b1e6 <dir_register+0x9e>
			if (res != FR_OK) break;
 800b1e4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e8:	2b64      	cmp	r3, #100	; 0x64
 800b1ea:	d101      	bne.n	800b1f0 <dir_register+0xa8>
 800b1ec:	2307      	movs	r3, #7
 800b1ee:	e09c      	b.n	800b32a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b1f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b1f4:	2b04      	cmp	r3, #4
 800b1f6:	d002      	beq.n	800b1fe <dir_register+0xb6>
 800b1f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b1fc:	e095      	b.n	800b32a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b1fe:	7dfa      	ldrb	r2, [r7, #23]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b206:	7dfb      	ldrb	r3, [r7, #23]
 800b208:	f003 0302 	and.w	r3, r3, #2
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d007      	beq.n	800b220 <dir_register+0xd8>
 800b210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b212:	330c      	adds	r3, #12
 800b214:	4a47      	ldr	r2, [pc, #284]	; (800b334 <dir_register+0x1ec>)
 800b216:	fba2 2303 	umull	r2, r3, r2, r3
 800b21a:	089b      	lsrs	r3, r3, #2
 800b21c:	3301      	adds	r3, #1
 800b21e:	e000      	b.n	800b222 <dir_register+0xda>
 800b220:	2301      	movs	r3, #1
 800b222:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b224:	6a39      	ldr	r1, [r7, #32]
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f7ff fcc0 	bl	800abac <dir_alloc>
 800b22c:	4603      	mov	r3, r0
 800b22e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b232:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b236:	2b00      	cmp	r3, #0
 800b238:	d148      	bne.n	800b2cc <dir_register+0x184>
 800b23a:	6a3b      	ldr	r3, [r7, #32]
 800b23c:	3b01      	subs	r3, #1
 800b23e:	623b      	str	r3, [r7, #32]
 800b240:	6a3b      	ldr	r3, [r7, #32]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d042      	beq.n	800b2cc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	695a      	ldr	r2, [r3, #20]
 800b24a:	6a3b      	ldr	r3, [r7, #32]
 800b24c:	015b      	lsls	r3, r3, #5
 800b24e:	1ad3      	subs	r3, r2, r3
 800b250:	4619      	mov	r1, r3
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f7ff fb6a 	bl	800a92c <dir_sdi>
 800b258:	4603      	mov	r3, r0
 800b25a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b25e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b262:	2b00      	cmp	r3, #0
 800b264:	d132      	bne.n	800b2cc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	3324      	adds	r3, #36	; 0x24
 800b26a:	4618      	mov	r0, r3
 800b26c:	f7ff fe8a 	bl	800af84 <sum_sfn>
 800b270:	4603      	mov	r3, r0
 800b272:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	69db      	ldr	r3, [r3, #28]
 800b278:	4619      	mov	r1, r3
 800b27a:	69f8      	ldr	r0, [r7, #28]
 800b27c:	f7fe ffd6 	bl	800a22c <move_window>
 800b280:	4603      	mov	r3, r0
 800b282:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800b286:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d11d      	bne.n	800b2ca <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b28e:	69fb      	ldr	r3, [r7, #28]
 800b290:	68d8      	ldr	r0, [r3, #12]
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6a19      	ldr	r1, [r3, #32]
 800b296:	6a3b      	ldr	r3, [r7, #32]
 800b298:	b2da      	uxtb	r2, r3
 800b29a:	7efb      	ldrb	r3, [r7, #27]
 800b29c:	f7ff fd7c 	bl	800ad98 <put_lfn>
				fs->wflag = 1;
 800b2a0:	69fb      	ldr	r3, [r7, #28]
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b2a6:	2100      	movs	r1, #0
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f7ff fbba 	bl	800aa22 <dir_next>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800b2b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d107      	bne.n	800b2cc <dir_register+0x184>
 800b2bc:	6a3b      	ldr	r3, [r7, #32]
 800b2be:	3b01      	subs	r3, #1
 800b2c0:	623b      	str	r3, [r7, #32]
 800b2c2:	6a3b      	ldr	r3, [r7, #32]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d1d5      	bne.n	800b274 <dir_register+0x12c>
 800b2c8:	e000      	b.n	800b2cc <dir_register+0x184>
				if (res != FR_OK) break;
 800b2ca:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b2cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d128      	bne.n	800b326 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	69db      	ldr	r3, [r3, #28]
 800b2d8:	4619      	mov	r1, r3
 800b2da:	69f8      	ldr	r0, [r7, #28]
 800b2dc:	f7fe ffa6 	bl	800a22c <move_window>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b2e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d11b      	bne.n	800b326 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6a1b      	ldr	r3, [r3, #32]
 800b2f2:	2220      	movs	r2, #32
 800b2f4:	2100      	movs	r1, #0
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f7fe fd8b 	bl	8009e12 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6a18      	ldr	r0, [r3, #32]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	3324      	adds	r3, #36	; 0x24
 800b304:	220b      	movs	r2, #11
 800b306:	4619      	mov	r1, r3
 800b308:	f7fe fd62 	bl	8009dd0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6a1b      	ldr	r3, [r3, #32]
 800b316:	330c      	adds	r3, #12
 800b318:	f002 0218 	and.w	r2, r2, #24
 800b31c:	b2d2      	uxtb	r2, r2
 800b31e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b320:	69fb      	ldr	r3, [r7, #28]
 800b322:	2201      	movs	r2, #1
 800b324:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b326:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3730      	adds	r7, #48	; 0x30
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
 800b332:	bf00      	nop
 800b334:	4ec4ec4f 	.word	0x4ec4ec4f

0800b338 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b08a      	sub	sp, #40	; 0x28
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	613b      	str	r3, [r7, #16]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	68db      	ldr	r3, [r3, #12]
 800b34e:	60fb      	str	r3, [r7, #12]
 800b350:	2300      	movs	r3, #0
 800b352:	617b      	str	r3, [r7, #20]
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b358:	69bb      	ldr	r3, [r7, #24]
 800b35a:	1c5a      	adds	r2, r3, #1
 800b35c:	61ba      	str	r2, [r7, #24]
 800b35e:	693a      	ldr	r2, [r7, #16]
 800b360:	4413      	add	r3, r2
 800b362:	781b      	ldrb	r3, [r3, #0]
 800b364:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b366:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b368:	2b1f      	cmp	r3, #31
 800b36a:	d940      	bls.n	800b3ee <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b36c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b36e:	2b2f      	cmp	r3, #47	; 0x2f
 800b370:	d006      	beq.n	800b380 <create_name+0x48>
 800b372:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b374:	2b5c      	cmp	r3, #92	; 0x5c
 800b376:	d110      	bne.n	800b39a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b378:	e002      	b.n	800b380 <create_name+0x48>
 800b37a:	69bb      	ldr	r3, [r7, #24]
 800b37c:	3301      	adds	r3, #1
 800b37e:	61bb      	str	r3, [r7, #24]
 800b380:	693a      	ldr	r2, [r7, #16]
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	4413      	add	r3, r2
 800b386:	781b      	ldrb	r3, [r3, #0]
 800b388:	2b2f      	cmp	r3, #47	; 0x2f
 800b38a:	d0f6      	beq.n	800b37a <create_name+0x42>
 800b38c:	693a      	ldr	r2, [r7, #16]
 800b38e:	69bb      	ldr	r3, [r7, #24]
 800b390:	4413      	add	r3, r2
 800b392:	781b      	ldrb	r3, [r3, #0]
 800b394:	2b5c      	cmp	r3, #92	; 0x5c
 800b396:	d0f0      	beq.n	800b37a <create_name+0x42>
			break;
 800b398:	e02a      	b.n	800b3f0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	2bfe      	cmp	r3, #254	; 0xfe
 800b39e:	d901      	bls.n	800b3a4 <create_name+0x6c>
 800b3a0:	2306      	movs	r3, #6
 800b3a2:	e17d      	b.n	800b6a0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b3a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3a6:	b2db      	uxtb	r3, r3
 800b3a8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b3aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3ac:	2101      	movs	r1, #1
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f7fe fb28 	bl	8009a04 <ff_convert>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b3b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d101      	bne.n	800b3c2 <create_name+0x8a>
 800b3be:	2306      	movs	r3, #6
 800b3c0:	e16e      	b.n	800b6a0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b3c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3c4:	2b7f      	cmp	r3, #127	; 0x7f
 800b3c6:	d809      	bhi.n	800b3dc <create_name+0xa4>
 800b3c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3ca:	4619      	mov	r1, r3
 800b3cc:	488d      	ldr	r0, [pc, #564]	; (800b604 <create_name+0x2cc>)
 800b3ce:	f7fe fd62 	bl	8009e96 <chk_chr>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d001      	beq.n	800b3dc <create_name+0xa4>
 800b3d8:	2306      	movs	r3, #6
 800b3da:	e161      	b.n	800b6a0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	1c5a      	adds	r2, r3, #1
 800b3e0:	617a      	str	r2, [r7, #20]
 800b3e2:	005b      	lsls	r3, r3, #1
 800b3e4:	68fa      	ldr	r2, [r7, #12]
 800b3e6:	4413      	add	r3, r2
 800b3e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b3ea:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b3ec:	e7b4      	b.n	800b358 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b3ee:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b3f0:	693a      	ldr	r2, [r7, #16]
 800b3f2:	69bb      	ldr	r3, [r7, #24]
 800b3f4:	441a      	add	r2, r3
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b3fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3fc:	2b1f      	cmp	r3, #31
 800b3fe:	d801      	bhi.n	800b404 <create_name+0xcc>
 800b400:	2304      	movs	r3, #4
 800b402:	e000      	b.n	800b406 <create_name+0xce>
 800b404:	2300      	movs	r3, #0
 800b406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b40a:	e011      	b.n	800b430 <create_name+0xf8>
		w = lfn[di - 1];
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b412:	3b01      	subs	r3, #1
 800b414:	005b      	lsls	r3, r3, #1
 800b416:	68fa      	ldr	r2, [r7, #12]
 800b418:	4413      	add	r3, r2
 800b41a:	881b      	ldrh	r3, [r3, #0]
 800b41c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800b41e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b420:	2b20      	cmp	r3, #32
 800b422:	d002      	beq.n	800b42a <create_name+0xf2>
 800b424:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b426:	2b2e      	cmp	r3, #46	; 0x2e
 800b428:	d106      	bne.n	800b438 <create_name+0x100>
		di--;
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	3b01      	subs	r3, #1
 800b42e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d1ea      	bne.n	800b40c <create_name+0xd4>
 800b436:	e000      	b.n	800b43a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800b438:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	005b      	lsls	r3, r3, #1
 800b43e:	68fa      	ldr	r2, [r7, #12]
 800b440:	4413      	add	r3, r2
 800b442:	2200      	movs	r2, #0
 800b444:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d101      	bne.n	800b450 <create_name+0x118>
 800b44c:	2306      	movs	r3, #6
 800b44e:	e127      	b.n	800b6a0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	3324      	adds	r3, #36	; 0x24
 800b454:	220b      	movs	r2, #11
 800b456:	2120      	movs	r1, #32
 800b458:	4618      	mov	r0, r3
 800b45a:	f7fe fcda 	bl	8009e12 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b45e:	2300      	movs	r3, #0
 800b460:	61bb      	str	r3, [r7, #24]
 800b462:	e002      	b.n	800b46a <create_name+0x132>
 800b464:	69bb      	ldr	r3, [r7, #24]
 800b466:	3301      	adds	r3, #1
 800b468:	61bb      	str	r3, [r7, #24]
 800b46a:	69bb      	ldr	r3, [r7, #24]
 800b46c:	005b      	lsls	r3, r3, #1
 800b46e:	68fa      	ldr	r2, [r7, #12]
 800b470:	4413      	add	r3, r2
 800b472:	881b      	ldrh	r3, [r3, #0]
 800b474:	2b20      	cmp	r3, #32
 800b476:	d0f5      	beq.n	800b464 <create_name+0x12c>
 800b478:	69bb      	ldr	r3, [r7, #24]
 800b47a:	005b      	lsls	r3, r3, #1
 800b47c:	68fa      	ldr	r2, [r7, #12]
 800b47e:	4413      	add	r3, r2
 800b480:	881b      	ldrh	r3, [r3, #0]
 800b482:	2b2e      	cmp	r3, #46	; 0x2e
 800b484:	d0ee      	beq.n	800b464 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b486:	69bb      	ldr	r3, [r7, #24]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d009      	beq.n	800b4a0 <create_name+0x168>
 800b48c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b490:	f043 0303 	orr.w	r3, r3, #3
 800b494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b498:	e002      	b.n	800b4a0 <create_name+0x168>
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	3b01      	subs	r3, #1
 800b49e:	617b      	str	r3, [r7, #20]
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d009      	beq.n	800b4ba <create_name+0x182>
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b4ac:	3b01      	subs	r3, #1
 800b4ae:	005b      	lsls	r3, r3, #1
 800b4b0:	68fa      	ldr	r2, [r7, #12]
 800b4b2:	4413      	add	r3, r2
 800b4b4:	881b      	ldrh	r3, [r3, #0]
 800b4b6:	2b2e      	cmp	r3, #46	; 0x2e
 800b4b8:	d1ef      	bne.n	800b49a <create_name+0x162>

	i = b = 0; ni = 8;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	623b      	str	r3, [r7, #32]
 800b4c4:	2308      	movs	r3, #8
 800b4c6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b4c8:	69bb      	ldr	r3, [r7, #24]
 800b4ca:	1c5a      	adds	r2, r3, #1
 800b4cc:	61ba      	str	r2, [r7, #24]
 800b4ce:	005b      	lsls	r3, r3, #1
 800b4d0:	68fa      	ldr	r2, [r7, #12]
 800b4d2:	4413      	add	r3, r2
 800b4d4:	881b      	ldrh	r3, [r3, #0]
 800b4d6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b4d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	f000 8090 	beq.w	800b600 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b4e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4e2:	2b20      	cmp	r3, #32
 800b4e4:	d006      	beq.n	800b4f4 <create_name+0x1bc>
 800b4e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4e8:	2b2e      	cmp	r3, #46	; 0x2e
 800b4ea:	d10a      	bne.n	800b502 <create_name+0x1ca>
 800b4ec:	69ba      	ldr	r2, [r7, #24]
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d006      	beq.n	800b502 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800b4f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4f8:	f043 0303 	orr.w	r3, r3, #3
 800b4fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b500:	e07d      	b.n	800b5fe <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b502:	6a3a      	ldr	r2, [r7, #32]
 800b504:	69fb      	ldr	r3, [r7, #28]
 800b506:	429a      	cmp	r2, r3
 800b508:	d203      	bcs.n	800b512 <create_name+0x1da>
 800b50a:	69ba      	ldr	r2, [r7, #24]
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	429a      	cmp	r2, r3
 800b510:	d123      	bne.n	800b55a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800b512:	69fb      	ldr	r3, [r7, #28]
 800b514:	2b0b      	cmp	r3, #11
 800b516:	d106      	bne.n	800b526 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800b518:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b51c:	f043 0303 	orr.w	r3, r3, #3
 800b520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b524:	e075      	b.n	800b612 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b526:	69ba      	ldr	r2, [r7, #24]
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	429a      	cmp	r2, r3
 800b52c:	d005      	beq.n	800b53a <create_name+0x202>
 800b52e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b532:	f043 0303 	orr.w	r3, r3, #3
 800b536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800b53a:	69ba      	ldr	r2, [r7, #24]
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	429a      	cmp	r2, r3
 800b540:	d866      	bhi.n	800b610 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	61bb      	str	r3, [r7, #24]
 800b546:	2308      	movs	r3, #8
 800b548:	623b      	str	r3, [r7, #32]
 800b54a:	230b      	movs	r3, #11
 800b54c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b54e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b552:	009b      	lsls	r3, r3, #2
 800b554:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b558:	e051      	b.n	800b5fe <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b55a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b55c:	2b7f      	cmp	r3, #127	; 0x7f
 800b55e:	d914      	bls.n	800b58a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b560:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b562:	2100      	movs	r1, #0
 800b564:	4618      	mov	r0, r3
 800b566:	f7fe fa4d 	bl	8009a04 <ff_convert>
 800b56a:	4603      	mov	r3, r0
 800b56c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b56e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b570:	2b00      	cmp	r3, #0
 800b572:	d004      	beq.n	800b57e <create_name+0x246>
 800b574:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b576:	3b80      	subs	r3, #128	; 0x80
 800b578:	4a23      	ldr	r2, [pc, #140]	; (800b608 <create_name+0x2d0>)
 800b57a:	5cd3      	ldrb	r3, [r2, r3]
 800b57c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b57e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b582:	f043 0302 	orr.w	r3, r3, #2
 800b586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b58a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d007      	beq.n	800b5a0 <create_name+0x268>
 800b590:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b592:	4619      	mov	r1, r3
 800b594:	481d      	ldr	r0, [pc, #116]	; (800b60c <create_name+0x2d4>)
 800b596:	f7fe fc7e 	bl	8009e96 <chk_chr>
 800b59a:	4603      	mov	r3, r0
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d008      	beq.n	800b5b2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b5a0:	235f      	movs	r3, #95	; 0x5f
 800b5a2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b5a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5a8:	f043 0303 	orr.w	r3, r3, #3
 800b5ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b5b0:	e01b      	b.n	800b5ea <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b5b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b5b4:	2b40      	cmp	r3, #64	; 0x40
 800b5b6:	d909      	bls.n	800b5cc <create_name+0x294>
 800b5b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b5ba:	2b5a      	cmp	r3, #90	; 0x5a
 800b5bc:	d806      	bhi.n	800b5cc <create_name+0x294>
					b |= 2;
 800b5be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b5c2:	f043 0302 	orr.w	r3, r3, #2
 800b5c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b5ca:	e00e      	b.n	800b5ea <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b5cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b5ce:	2b60      	cmp	r3, #96	; 0x60
 800b5d0:	d90b      	bls.n	800b5ea <create_name+0x2b2>
 800b5d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b5d4:	2b7a      	cmp	r3, #122	; 0x7a
 800b5d6:	d808      	bhi.n	800b5ea <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800b5d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b5dc:	f043 0301 	orr.w	r3, r3, #1
 800b5e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b5e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b5e6:	3b20      	subs	r3, #32
 800b5e8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b5ea:	6a3b      	ldr	r3, [r7, #32]
 800b5ec:	1c5a      	adds	r2, r3, #1
 800b5ee:	623a      	str	r2, [r7, #32]
 800b5f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b5f2:	b2d1      	uxtb	r1, r2
 800b5f4:	687a      	ldr	r2, [r7, #4]
 800b5f6:	4413      	add	r3, r2
 800b5f8:	460a      	mov	r2, r1
 800b5fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800b5fe:	e763      	b.n	800b4c8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800b600:	bf00      	nop
 800b602:	e006      	b.n	800b612 <create_name+0x2da>
 800b604:	0801313c 	.word	0x0801313c
 800b608:	08013554 	.word	0x08013554
 800b60c:	08013148 	.word	0x08013148
			if (si > di) break;			/* No extension */
 800b610:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b618:	2be5      	cmp	r3, #229	; 0xe5
 800b61a:	d103      	bne.n	800b624 <create_name+0x2ec>
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2205      	movs	r2, #5
 800b620:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800b624:	69fb      	ldr	r3, [r7, #28]
 800b626:	2b08      	cmp	r3, #8
 800b628:	d104      	bne.n	800b634 <create_name+0x2fc>
 800b62a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b62e:	009b      	lsls	r3, r3, #2
 800b630:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800b634:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b638:	f003 030c 	and.w	r3, r3, #12
 800b63c:	2b0c      	cmp	r3, #12
 800b63e:	d005      	beq.n	800b64c <create_name+0x314>
 800b640:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b644:	f003 0303 	and.w	r3, r3, #3
 800b648:	2b03      	cmp	r3, #3
 800b64a:	d105      	bne.n	800b658 <create_name+0x320>
 800b64c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b650:	f043 0302 	orr.w	r3, r3, #2
 800b654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b65c:	f003 0302 	and.w	r3, r3, #2
 800b660:	2b00      	cmp	r3, #0
 800b662:	d117      	bne.n	800b694 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b664:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b668:	f003 0303 	and.w	r3, r3, #3
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d105      	bne.n	800b67c <create_name+0x344>
 800b670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b674:	f043 0310 	orr.w	r3, r3, #16
 800b678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b67c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b680:	f003 030c 	and.w	r3, r3, #12
 800b684:	2b04      	cmp	r3, #4
 800b686:	d105      	bne.n	800b694 <create_name+0x35c>
 800b688:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b68c:	f043 0308 	orr.w	r3, r3, #8
 800b690:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b69a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800b69e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3728      	adds	r7, #40	; 0x28
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b086      	sub	sp, #24
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b6bc:	e002      	b.n	800b6c4 <follow_path+0x1c>
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	603b      	str	r3, [r7, #0]
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	2b2f      	cmp	r3, #47	; 0x2f
 800b6ca:	d0f8      	beq.n	800b6be <follow_path+0x16>
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	2b5c      	cmp	r3, #92	; 0x5c
 800b6d2:	d0f4      	beq.n	800b6be <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	781b      	ldrb	r3, [r3, #0]
 800b6de:	2b1f      	cmp	r3, #31
 800b6e0:	d80a      	bhi.n	800b6f8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2280      	movs	r2, #128	; 0x80
 800b6e6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b6ea:	2100      	movs	r1, #0
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f7ff f91d 	bl	800a92c <dir_sdi>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	75fb      	strb	r3, [r7, #23]
 800b6f6:	e043      	b.n	800b780 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b6f8:	463b      	mov	r3, r7
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f7ff fe1b 	bl	800b338 <create_name>
 800b702:	4603      	mov	r3, r0
 800b704:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b706:	7dfb      	ldrb	r3, [r7, #23]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d134      	bne.n	800b776 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f7ff fc5a 	bl	800afc6 <dir_find>
 800b712:	4603      	mov	r3, r0
 800b714:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b71c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b71e:	7dfb      	ldrb	r3, [r7, #23]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d00a      	beq.n	800b73a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b724:	7dfb      	ldrb	r3, [r7, #23]
 800b726:	2b04      	cmp	r3, #4
 800b728:	d127      	bne.n	800b77a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b72a:	7afb      	ldrb	r3, [r7, #11]
 800b72c:	f003 0304 	and.w	r3, r3, #4
 800b730:	2b00      	cmp	r3, #0
 800b732:	d122      	bne.n	800b77a <follow_path+0xd2>
 800b734:	2305      	movs	r3, #5
 800b736:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b738:	e01f      	b.n	800b77a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b73a:	7afb      	ldrb	r3, [r7, #11]
 800b73c:	f003 0304 	and.w	r3, r3, #4
 800b740:	2b00      	cmp	r3, #0
 800b742:	d11c      	bne.n	800b77e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	799b      	ldrb	r3, [r3, #6]
 800b748:	f003 0310 	and.w	r3, r3, #16
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d102      	bne.n	800b756 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b750:	2305      	movs	r3, #5
 800b752:	75fb      	strb	r3, [r7, #23]
 800b754:	e014      	b.n	800b780 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	695b      	ldr	r3, [r3, #20]
 800b760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b764:	4413      	add	r3, r2
 800b766:	4619      	mov	r1, r3
 800b768:	68f8      	ldr	r0, [r7, #12]
 800b76a:	f7ff fa66 	bl	800ac3a <ld_clust>
 800b76e:	4602      	mov	r2, r0
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b774:	e7c0      	b.n	800b6f8 <follow_path+0x50>
			if (res != FR_OK) break;
 800b776:	bf00      	nop
 800b778:	e002      	b.n	800b780 <follow_path+0xd8>
				break;
 800b77a:	bf00      	nop
 800b77c:	e000      	b.n	800b780 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b77e:	bf00      	nop
			}
		}
	}

	return res;
 800b780:	7dfb      	ldrb	r3, [r7, #23]
}
 800b782:	4618      	mov	r0, r3
 800b784:	3718      	adds	r7, #24
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}

0800b78a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b78a:	b480      	push	{r7}
 800b78c:	b087      	sub	sp, #28
 800b78e:	af00      	add	r7, sp, #0
 800b790:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b796:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d031      	beq.n	800b804 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	617b      	str	r3, [r7, #20]
 800b7a6:	e002      	b.n	800b7ae <get_ldnumber+0x24>
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	3301      	adds	r3, #1
 800b7ac:	617b      	str	r3, [r7, #20]
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	2b1f      	cmp	r3, #31
 800b7b4:	d903      	bls.n	800b7be <get_ldnumber+0x34>
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	781b      	ldrb	r3, [r3, #0]
 800b7ba:	2b3a      	cmp	r3, #58	; 0x3a
 800b7bc:	d1f4      	bne.n	800b7a8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	2b3a      	cmp	r3, #58	; 0x3a
 800b7c4:	d11c      	bne.n	800b800 <get_ldnumber+0x76>
			tp = *path;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	1c5a      	adds	r2, r3, #1
 800b7d0:	60fa      	str	r2, [r7, #12]
 800b7d2:	781b      	ldrb	r3, [r3, #0]
 800b7d4:	3b30      	subs	r3, #48	; 0x30
 800b7d6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	2b09      	cmp	r3, #9
 800b7dc:	d80e      	bhi.n	800b7fc <get_ldnumber+0x72>
 800b7de:	68fa      	ldr	r2, [r7, #12]
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d10a      	bne.n	800b7fc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d107      	bne.n	800b7fc <get_ldnumber+0x72>
					vol = (int)i;
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b7f0:	697b      	ldr	r3, [r7, #20]
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	617b      	str	r3, [r7, #20]
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	697a      	ldr	r2, [r7, #20]
 800b7fa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	e002      	b.n	800b806 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b800:	2300      	movs	r3, #0
 800b802:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b804:	693b      	ldr	r3, [r7, #16]
}
 800b806:	4618      	mov	r0, r3
 800b808:	371c      	adds	r7, #28
 800b80a:	46bd      	mov	sp, r7
 800b80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b810:	4770      	bx	lr
	...

0800b814 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b082      	sub	sp, #8
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
 800b81c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2200      	movs	r2, #0
 800b822:	70da      	strb	r2, [r3, #3]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b82a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b82c:	6839      	ldr	r1, [r7, #0]
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f7fe fcfc 	bl	800a22c <move_window>
 800b834:	4603      	mov	r3, r0
 800b836:	2b00      	cmp	r3, #0
 800b838:	d001      	beq.n	800b83e <check_fs+0x2a>
 800b83a:	2304      	movs	r3, #4
 800b83c:	e038      	b.n	800b8b0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	3334      	adds	r3, #52	; 0x34
 800b842:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b846:	4618      	mov	r0, r3
 800b848:	f7fe fa40 	bl	8009ccc <ld_word>
 800b84c:	4603      	mov	r3, r0
 800b84e:	461a      	mov	r2, r3
 800b850:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b854:	429a      	cmp	r2, r3
 800b856:	d001      	beq.n	800b85c <check_fs+0x48>
 800b858:	2303      	movs	r3, #3
 800b85a:	e029      	b.n	800b8b0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b862:	2be9      	cmp	r3, #233	; 0xe9
 800b864:	d009      	beq.n	800b87a <check_fs+0x66>
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b86c:	2beb      	cmp	r3, #235	; 0xeb
 800b86e:	d11e      	bne.n	800b8ae <check_fs+0x9a>
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b876:	2b90      	cmp	r3, #144	; 0x90
 800b878:	d119      	bne.n	800b8ae <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	3334      	adds	r3, #52	; 0x34
 800b87e:	3336      	adds	r3, #54	; 0x36
 800b880:	4618      	mov	r0, r3
 800b882:	f7fe fa3b 	bl	8009cfc <ld_dword>
 800b886:	4603      	mov	r3, r0
 800b888:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b88c:	4a0a      	ldr	r2, [pc, #40]	; (800b8b8 <check_fs+0xa4>)
 800b88e:	4293      	cmp	r3, r2
 800b890:	d101      	bne.n	800b896 <check_fs+0x82>
 800b892:	2300      	movs	r3, #0
 800b894:	e00c      	b.n	800b8b0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	3334      	adds	r3, #52	; 0x34
 800b89a:	3352      	adds	r3, #82	; 0x52
 800b89c:	4618      	mov	r0, r3
 800b89e:	f7fe fa2d 	bl	8009cfc <ld_dword>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	4a05      	ldr	r2, [pc, #20]	; (800b8bc <check_fs+0xa8>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d101      	bne.n	800b8ae <check_fs+0x9a>
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	e000      	b.n	800b8b0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b8ae:	2302      	movs	r3, #2
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3708      	adds	r7, #8
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}
 800b8b8:	00544146 	.word	0x00544146
 800b8bc:	33544146 	.word	0x33544146

0800b8c0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b096      	sub	sp, #88	; 0x58
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	60f8      	str	r0, [r7, #12]
 800b8c8:	60b9      	str	r1, [r7, #8]
 800b8ca:	4613      	mov	r3, r2
 800b8cc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b8d4:	68f8      	ldr	r0, [r7, #12]
 800b8d6:	f7ff ff58 	bl	800b78a <get_ldnumber>
 800b8da:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b8dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	da01      	bge.n	800b8e6 <find_volume+0x26>
 800b8e2:	230b      	movs	r3, #11
 800b8e4:	e230      	b.n	800bd48 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b8e6:	4aa1      	ldr	r2, [pc, #644]	; (800bb6c <find_volume+0x2ac>)
 800b8e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8ee:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d101      	bne.n	800b8fa <find_volume+0x3a>
 800b8f6:	230c      	movs	r3, #12
 800b8f8:	e226      	b.n	800bd48 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8fe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b900:	79fb      	ldrb	r3, [r7, #7]
 800b902:	f023 0301 	bic.w	r3, r3, #1
 800b906:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d01a      	beq.n	800b946 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b912:	785b      	ldrb	r3, [r3, #1]
 800b914:	4618      	mov	r0, r3
 800b916:	f7fe f93b 	bl	8009b90 <disk_status>
 800b91a:	4603      	mov	r3, r0
 800b91c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b920:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b924:	f003 0301 	and.w	r3, r3, #1
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d10c      	bne.n	800b946 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b92c:	79fb      	ldrb	r3, [r7, #7]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d007      	beq.n	800b942 <find_volume+0x82>
 800b932:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b936:	f003 0304 	and.w	r3, r3, #4
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d001      	beq.n	800b942 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b93e:	230a      	movs	r3, #10
 800b940:	e202      	b.n	800bd48 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800b942:	2300      	movs	r3, #0
 800b944:	e200      	b.n	800bd48 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b948:	2200      	movs	r2, #0
 800b94a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b94c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b94e:	b2da      	uxtb	r2, r3
 800b950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b952:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b956:	785b      	ldrb	r3, [r3, #1]
 800b958:	4618      	mov	r0, r3
 800b95a:	f7fe f933 	bl	8009bc4 <disk_initialize>
 800b95e:	4603      	mov	r3, r0
 800b960:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b964:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b968:	f003 0301 	and.w	r3, r3, #1
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d001      	beq.n	800b974 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b970:	2303      	movs	r3, #3
 800b972:	e1e9      	b.n	800bd48 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b974:	79fb      	ldrb	r3, [r7, #7]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d007      	beq.n	800b98a <find_volume+0xca>
 800b97a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b97e:	f003 0304 	and.w	r3, r3, #4
 800b982:	2b00      	cmp	r3, #0
 800b984:	d001      	beq.n	800b98a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b986:	230a      	movs	r3, #10
 800b988:	e1de      	b.n	800bd48 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b98a:	2300      	movs	r3, #0
 800b98c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b98e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b990:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b992:	f7ff ff3f 	bl	800b814 <check_fs>
 800b996:	4603      	mov	r3, r0
 800b998:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b99c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b9a0:	2b02      	cmp	r3, #2
 800b9a2:	d149      	bne.n	800ba38 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	643b      	str	r3, [r7, #64]	; 0x40
 800b9a8:	e01e      	b.n	800b9e8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b9aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ac:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b9b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9b2:	011b      	lsls	r3, r3, #4
 800b9b4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b9b8:	4413      	add	r3, r2
 800b9ba:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9be:	3304      	adds	r3, #4
 800b9c0:	781b      	ldrb	r3, [r3, #0]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d006      	beq.n	800b9d4 <find_volume+0x114>
 800b9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c8:	3308      	adds	r3, #8
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f7fe f996 	bl	8009cfc <ld_dword>
 800b9d0:	4602      	mov	r2, r0
 800b9d2:	e000      	b.n	800b9d6 <find_volume+0x116>
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9d8:	009b      	lsls	r3, r3, #2
 800b9da:	3358      	adds	r3, #88	; 0x58
 800b9dc:	443b      	add	r3, r7
 800b9de:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b9e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9e4:	3301      	adds	r3, #1
 800b9e6:	643b      	str	r3, [r7, #64]	; 0x40
 800b9e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9ea:	2b03      	cmp	r3, #3
 800b9ec:	d9dd      	bls.n	800b9aa <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b9f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d002      	beq.n	800b9fe <find_volume+0x13e>
 800b9f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9fa:	3b01      	subs	r3, #1
 800b9fc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b9fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba00:	009b      	lsls	r3, r3, #2
 800ba02:	3358      	adds	r3, #88	; 0x58
 800ba04:	443b      	add	r3, r7
 800ba06:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ba0a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ba0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d005      	beq.n	800ba1e <find_volume+0x15e>
 800ba12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ba14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ba16:	f7ff fefd 	bl	800b814 <check_fs>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	e000      	b.n	800ba20 <find_volume+0x160>
 800ba1e:	2303      	movs	r3, #3
 800ba20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ba24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ba28:	2b01      	cmp	r3, #1
 800ba2a:	d905      	bls.n	800ba38 <find_volume+0x178>
 800ba2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba2e:	3301      	adds	r3, #1
 800ba30:	643b      	str	r3, [r7, #64]	; 0x40
 800ba32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba34:	2b03      	cmp	r3, #3
 800ba36:	d9e2      	bls.n	800b9fe <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ba38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ba3c:	2b04      	cmp	r3, #4
 800ba3e:	d101      	bne.n	800ba44 <find_volume+0x184>
 800ba40:	2301      	movs	r3, #1
 800ba42:	e181      	b.n	800bd48 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ba44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d901      	bls.n	800ba50 <find_volume+0x190>
 800ba4c:	230d      	movs	r3, #13
 800ba4e:	e17b      	b.n	800bd48 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ba50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba52:	3334      	adds	r3, #52	; 0x34
 800ba54:	330b      	adds	r3, #11
 800ba56:	4618      	mov	r0, r3
 800ba58:	f7fe f938 	bl	8009ccc <ld_word>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba62:	d001      	beq.n	800ba68 <find_volume+0x1a8>
 800ba64:	230d      	movs	r3, #13
 800ba66:	e16f      	b.n	800bd48 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ba68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba6a:	3334      	adds	r3, #52	; 0x34
 800ba6c:	3316      	adds	r3, #22
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f7fe f92c 	bl	8009ccc <ld_word>
 800ba74:	4603      	mov	r3, r0
 800ba76:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ba78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d106      	bne.n	800ba8c <find_volume+0x1cc>
 800ba7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba80:	3334      	adds	r3, #52	; 0x34
 800ba82:	3324      	adds	r3, #36	; 0x24
 800ba84:	4618      	mov	r0, r3
 800ba86:	f7fe f939 	bl	8009cfc <ld_dword>
 800ba8a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ba8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ba90:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ba92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba94:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ba98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba9a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ba9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba9e:	789b      	ldrb	r3, [r3, #2]
 800baa0:	2b01      	cmp	r3, #1
 800baa2:	d005      	beq.n	800bab0 <find_volume+0x1f0>
 800baa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baa6:	789b      	ldrb	r3, [r3, #2]
 800baa8:	2b02      	cmp	r3, #2
 800baaa:	d001      	beq.n	800bab0 <find_volume+0x1f0>
 800baac:	230d      	movs	r3, #13
 800baae:	e14b      	b.n	800bd48 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab2:	789b      	ldrb	r3, [r3, #2]
 800bab4:	461a      	mov	r2, r3
 800bab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bab8:	fb02 f303 	mul.w	r3, r2, r3
 800babc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800babe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bac0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bac4:	b29a      	uxth	r2, r3
 800bac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bac8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800baca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bacc:	895b      	ldrh	r3, [r3, #10]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d008      	beq.n	800bae4 <find_volume+0x224>
 800bad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bad4:	895b      	ldrh	r3, [r3, #10]
 800bad6:	461a      	mov	r2, r3
 800bad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bada:	895b      	ldrh	r3, [r3, #10]
 800badc:	3b01      	subs	r3, #1
 800bade:	4013      	ands	r3, r2
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d001      	beq.n	800bae8 <find_volume+0x228>
 800bae4:	230d      	movs	r3, #13
 800bae6:	e12f      	b.n	800bd48 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800bae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baea:	3334      	adds	r3, #52	; 0x34
 800baec:	3311      	adds	r3, #17
 800baee:	4618      	mov	r0, r3
 800baf0:	f7fe f8ec 	bl	8009ccc <ld_word>
 800baf4:	4603      	mov	r3, r0
 800baf6:	461a      	mov	r2, r3
 800baf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bafa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bafe:	891b      	ldrh	r3, [r3, #8]
 800bb00:	f003 030f 	and.w	r3, r3, #15
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d001      	beq.n	800bb0e <find_volume+0x24e>
 800bb0a:	230d      	movs	r3, #13
 800bb0c:	e11c      	b.n	800bd48 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800bb0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb10:	3334      	adds	r3, #52	; 0x34
 800bb12:	3313      	adds	r3, #19
 800bb14:	4618      	mov	r0, r3
 800bb16:	f7fe f8d9 	bl	8009ccc <ld_word>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800bb1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d106      	bne.n	800bb32 <find_volume+0x272>
 800bb24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb26:	3334      	adds	r3, #52	; 0x34
 800bb28:	3320      	adds	r3, #32
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f7fe f8e6 	bl	8009cfc <ld_dword>
 800bb30:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800bb32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb34:	3334      	adds	r3, #52	; 0x34
 800bb36:	330e      	adds	r3, #14
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7fe f8c7 	bl	8009ccc <ld_word>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800bb42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d101      	bne.n	800bb4c <find_volume+0x28c>
 800bb48:	230d      	movs	r3, #13
 800bb4a:	e0fd      	b.n	800bd48 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800bb4c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bb4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb50:	4413      	add	r3, r2
 800bb52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb54:	8912      	ldrh	r2, [r2, #8]
 800bb56:	0912      	lsrs	r2, r2, #4
 800bb58:	b292      	uxth	r2, r2
 800bb5a:	4413      	add	r3, r2
 800bb5c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800bb5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb62:	429a      	cmp	r2, r3
 800bb64:	d204      	bcs.n	800bb70 <find_volume+0x2b0>
 800bb66:	230d      	movs	r3, #13
 800bb68:	e0ee      	b.n	800bd48 <find_volume+0x488>
 800bb6a:	bf00      	nop
 800bb6c:	200025a0 	.word	0x200025a0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800bb70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb74:	1ad3      	subs	r3, r2, r3
 800bb76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb78:	8952      	ldrh	r2, [r2, #10]
 800bb7a:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb7e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800bb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d101      	bne.n	800bb8a <find_volume+0x2ca>
 800bb86:	230d      	movs	r3, #13
 800bb88:	e0de      	b.n	800bd48 <find_volume+0x488>
		fmt = FS_FAT32;
 800bb8a:	2303      	movs	r3, #3
 800bb8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800bb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb92:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bb96:	4293      	cmp	r3, r2
 800bb98:	d802      	bhi.n	800bba0 <find_volume+0x2e0>
 800bb9a:	2302      	movs	r3, #2
 800bb9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800bba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bba6:	4293      	cmp	r3, r2
 800bba8:	d802      	bhi.n	800bbb0 <find_volume+0x2f0>
 800bbaa:	2301      	movs	r3, #1
 800bbac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800bbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb2:	1c9a      	adds	r2, r3, #2
 800bbb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbb6:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800bbb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bbbc:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800bbbe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bbc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbc2:	441a      	add	r2, r3
 800bbc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800bbc8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bbca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbcc:	441a      	add	r2, r3
 800bbce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd0:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800bbd2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bbd6:	2b03      	cmp	r3, #3
 800bbd8:	d11e      	bne.n	800bc18 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800bbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbdc:	3334      	adds	r3, #52	; 0x34
 800bbde:	332a      	adds	r3, #42	; 0x2a
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f7fe f873 	bl	8009ccc <ld_word>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d001      	beq.n	800bbf0 <find_volume+0x330>
 800bbec:	230d      	movs	r3, #13
 800bbee:	e0ab      	b.n	800bd48 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800bbf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf2:	891b      	ldrh	r3, [r3, #8]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d001      	beq.n	800bbfc <find_volume+0x33c>
 800bbf8:	230d      	movs	r3, #13
 800bbfa:	e0a5      	b.n	800bd48 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800bbfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbfe:	3334      	adds	r3, #52	; 0x34
 800bc00:	332c      	adds	r3, #44	; 0x2c
 800bc02:	4618      	mov	r0, r3
 800bc04:	f7fe f87a 	bl	8009cfc <ld_dword>
 800bc08:	4602      	mov	r2, r0
 800bc0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc0c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800bc0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc10:	699b      	ldr	r3, [r3, #24]
 800bc12:	009b      	lsls	r3, r3, #2
 800bc14:	647b      	str	r3, [r7, #68]	; 0x44
 800bc16:	e01f      	b.n	800bc58 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800bc18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc1a:	891b      	ldrh	r3, [r3, #8]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d101      	bne.n	800bc24 <find_volume+0x364>
 800bc20:	230d      	movs	r3, #13
 800bc22:	e091      	b.n	800bd48 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bc24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bc28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc2a:	441a      	add	r2, r3
 800bc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc2e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bc30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bc34:	2b02      	cmp	r3, #2
 800bc36:	d103      	bne.n	800bc40 <find_volume+0x380>
 800bc38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc3a:	699b      	ldr	r3, [r3, #24]
 800bc3c:	005b      	lsls	r3, r3, #1
 800bc3e:	e00a      	b.n	800bc56 <find_volume+0x396>
 800bc40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc42:	699a      	ldr	r2, [r3, #24]
 800bc44:	4613      	mov	r3, r2
 800bc46:	005b      	lsls	r3, r3, #1
 800bc48:	4413      	add	r3, r2
 800bc4a:	085a      	lsrs	r2, r3, #1
 800bc4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc4e:	699b      	ldr	r3, [r3, #24]
 800bc50:	f003 0301 	and.w	r3, r3, #1
 800bc54:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bc56:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bc58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc5a:	69da      	ldr	r2, [r3, #28]
 800bc5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc5e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bc62:	0a5b      	lsrs	r3, r3, #9
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d201      	bcs.n	800bc6c <find_volume+0x3ac>
 800bc68:	230d      	movs	r3, #13
 800bc6a:	e06d      	b.n	800bd48 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc72:	615a      	str	r2, [r3, #20]
 800bc74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc76:	695a      	ldr	r2, [r3, #20]
 800bc78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc7a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800bc7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc7e:	2280      	movs	r2, #128	; 0x80
 800bc80:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800bc82:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bc86:	2b03      	cmp	r3, #3
 800bc88:	d149      	bne.n	800bd1e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bc8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc8c:	3334      	adds	r3, #52	; 0x34
 800bc8e:	3330      	adds	r3, #48	; 0x30
 800bc90:	4618      	mov	r0, r3
 800bc92:	f7fe f81b 	bl	8009ccc <ld_word>
 800bc96:	4603      	mov	r3, r0
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d140      	bne.n	800bd1e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bc9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc9e:	3301      	adds	r3, #1
 800bca0:	4619      	mov	r1, r3
 800bca2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bca4:	f7fe fac2 	bl	800a22c <move_window>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d137      	bne.n	800bd1e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800bcae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bcb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb6:	3334      	adds	r3, #52	; 0x34
 800bcb8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f7fe f805 	bl	8009ccc <ld_word>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	461a      	mov	r2, r3
 800bcc6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bcca:	429a      	cmp	r2, r3
 800bccc:	d127      	bne.n	800bd1e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bcce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd0:	3334      	adds	r3, #52	; 0x34
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f7fe f812 	bl	8009cfc <ld_dword>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	4a1d      	ldr	r2, [pc, #116]	; (800bd50 <find_volume+0x490>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d11e      	bne.n	800bd1e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce2:	3334      	adds	r3, #52	; 0x34
 800bce4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bce8:	4618      	mov	r0, r3
 800bcea:	f7fe f807 	bl	8009cfc <ld_dword>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	4a18      	ldr	r2, [pc, #96]	; (800bd54 <find_volume+0x494>)
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	d113      	bne.n	800bd1e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bcf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcf8:	3334      	adds	r3, #52	; 0x34
 800bcfa:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f7fd fffc 	bl	8009cfc <ld_dword>
 800bd04:	4602      	mov	r2, r0
 800bd06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd08:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bd0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd0c:	3334      	adds	r3, #52	; 0x34
 800bd0e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7fd fff2 	bl	8009cfc <ld_dword>
 800bd18:	4602      	mov	r2, r0
 800bd1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd1c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bd1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd20:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800bd24:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bd26:	4b0c      	ldr	r3, [pc, #48]	; (800bd58 <find_volume+0x498>)
 800bd28:	881b      	ldrh	r3, [r3, #0]
 800bd2a:	3301      	adds	r3, #1
 800bd2c:	b29a      	uxth	r2, r3
 800bd2e:	4b0a      	ldr	r3, [pc, #40]	; (800bd58 <find_volume+0x498>)
 800bd30:	801a      	strh	r2, [r3, #0]
 800bd32:	4b09      	ldr	r3, [pc, #36]	; (800bd58 <find_volume+0x498>)
 800bd34:	881a      	ldrh	r2, [r3, #0]
 800bd36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd38:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800bd3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd3c:	4a07      	ldr	r2, [pc, #28]	; (800bd5c <find_volume+0x49c>)
 800bd3e:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bd40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bd42:	f7fe fa0b 	bl	800a15c <clear_lock>
#endif
	return FR_OK;
 800bd46:	2300      	movs	r3, #0
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3758      	adds	r7, #88	; 0x58
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}
 800bd50:	41615252 	.word	0x41615252
 800bd54:	61417272 	.word	0x61417272
 800bd58:	200025a4 	.word	0x200025a4
 800bd5c:	200025c8 	.word	0x200025c8

0800bd60 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b084      	sub	sp, #16
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800bd6a:	2309      	movs	r3, #9
 800bd6c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d01c      	beq.n	800bdae <validate+0x4e>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d018      	beq.n	800bdae <validate+0x4e>
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	781b      	ldrb	r3, [r3, #0]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d013      	beq.n	800bdae <validate+0x4e>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	889a      	ldrh	r2, [r3, #4]
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	88db      	ldrh	r3, [r3, #6]
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d10c      	bne.n	800bdae <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	785b      	ldrb	r3, [r3, #1]
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f7fd fef8 	bl	8009b90 <disk_status>
 800bda0:	4603      	mov	r3, r0
 800bda2:	f003 0301 	and.w	r3, r3, #1
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d101      	bne.n	800bdae <validate+0x4e>
			res = FR_OK;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bdae:	7bfb      	ldrb	r3, [r7, #15]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d102      	bne.n	800bdba <validate+0x5a>
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	e000      	b.n	800bdbc <validate+0x5c>
 800bdba:	2300      	movs	r3, #0
 800bdbc:	683a      	ldr	r2, [r7, #0]
 800bdbe:	6013      	str	r3, [r2, #0]
	return res;
 800bdc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3710      	adds	r7, #16
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}
	...

0800bdcc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b088      	sub	sp, #32
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	60f8      	str	r0, [r7, #12]
 800bdd4:	60b9      	str	r1, [r7, #8]
 800bdd6:	4613      	mov	r3, r2
 800bdd8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800bdde:	f107 0310 	add.w	r3, r7, #16
 800bde2:	4618      	mov	r0, r3
 800bde4:	f7ff fcd1 	bl	800b78a <get_ldnumber>
 800bde8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bdea:	69fb      	ldr	r3, [r7, #28]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	da01      	bge.n	800bdf4 <f_mount+0x28>
 800bdf0:	230b      	movs	r3, #11
 800bdf2:	e02b      	b.n	800be4c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bdf4:	4a17      	ldr	r2, [pc, #92]	; (800be54 <f_mount+0x88>)
 800bdf6:	69fb      	ldr	r3, [r7, #28]
 800bdf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdfc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bdfe:	69bb      	ldr	r3, [r7, #24]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d005      	beq.n	800be10 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800be04:	69b8      	ldr	r0, [r7, #24]
 800be06:	f7fe f9a9 	bl	800a15c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800be0a:	69bb      	ldr	r3, [r7, #24]
 800be0c:	2200      	movs	r2, #0
 800be0e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d002      	beq.n	800be1c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2200      	movs	r2, #0
 800be1a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800be1c:	68fa      	ldr	r2, [r7, #12]
 800be1e:	490d      	ldr	r1, [pc, #52]	; (800be54 <f_mount+0x88>)
 800be20:	69fb      	ldr	r3, [r7, #28]
 800be22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d002      	beq.n	800be32 <f_mount+0x66>
 800be2c:	79fb      	ldrb	r3, [r7, #7]
 800be2e:	2b01      	cmp	r3, #1
 800be30:	d001      	beq.n	800be36 <f_mount+0x6a>
 800be32:	2300      	movs	r3, #0
 800be34:	e00a      	b.n	800be4c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800be36:	f107 010c 	add.w	r1, r7, #12
 800be3a:	f107 0308 	add.w	r3, r7, #8
 800be3e:	2200      	movs	r2, #0
 800be40:	4618      	mov	r0, r3
 800be42:	f7ff fd3d 	bl	800b8c0 <find_volume>
 800be46:	4603      	mov	r3, r0
 800be48:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800be4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3720      	adds	r7, #32
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}
 800be54:	200025a0 	.word	0x200025a0

0800be58 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b09a      	sub	sp, #104	; 0x68
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	60f8      	str	r0, [r7, #12]
 800be60:	60b9      	str	r1, [r7, #8]
 800be62:	4613      	mov	r3, r2
 800be64:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d101      	bne.n	800be70 <f_open+0x18>
 800be6c:	2309      	movs	r3, #9
 800be6e:	e194      	b.n	800c19a <f_open+0x342>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800be70:	79fb      	ldrb	r3, [r7, #7]
 800be72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be76:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800be78:	79fa      	ldrb	r2, [r7, #7]
 800be7a:	f107 0114 	add.w	r1, r7, #20
 800be7e:	f107 0308 	add.w	r3, r7, #8
 800be82:	4618      	mov	r0, r3
 800be84:	f7ff fd1c 	bl	800b8c0 <find_volume>
 800be88:	4603      	mov	r3, r0
 800be8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800be8e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800be92:	2b00      	cmp	r3, #0
 800be94:	f040 8178 	bne.w	800c188 <f_open+0x330>
		dj.obj.fs = fs;
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800be9c:	68ba      	ldr	r2, [r7, #8]
 800be9e:	f107 0318 	add.w	r3, r7, #24
 800bea2:	4611      	mov	r1, r2
 800bea4:	4618      	mov	r0, r3
 800bea6:	f7ff fbff 	bl	800b6a8 <follow_path>
 800beaa:	4603      	mov	r3, r0
 800beac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800beb0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d11a      	bne.n	800beee <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800beb8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800bebc:	b25b      	sxtb	r3, r3
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	da03      	bge.n	800beca <f_open+0x72>
				res = FR_INVALID_NAME;
 800bec2:	2306      	movs	r3, #6
 800bec4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800bec8:	e011      	b.n	800beee <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800beca:	79fb      	ldrb	r3, [r7, #7]
 800becc:	f023 0301 	bic.w	r3, r3, #1
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	bf14      	ite	ne
 800bed4:	2301      	movne	r3, #1
 800bed6:	2300      	moveq	r3, #0
 800bed8:	b2db      	uxtb	r3, r3
 800beda:	461a      	mov	r2, r3
 800bedc:	f107 0318 	add.w	r3, r7, #24
 800bee0:	4611      	mov	r1, r2
 800bee2:	4618      	mov	r0, r3
 800bee4:	f7fd fff2 	bl	8009ecc <chk_lock>
 800bee8:	4603      	mov	r3, r0
 800beea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800beee:	79fb      	ldrb	r3, [r7, #7]
 800bef0:	f003 031c 	and.w	r3, r3, #28
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d07f      	beq.n	800bff8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800bef8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800befc:	2b00      	cmp	r3, #0
 800befe:	d017      	beq.n	800bf30 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800bf00:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bf04:	2b04      	cmp	r3, #4
 800bf06:	d10e      	bne.n	800bf26 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bf08:	f7fe f83c 	bl	8009f84 <enq_lock>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d006      	beq.n	800bf20 <f_open+0xc8>
 800bf12:	f107 0318 	add.w	r3, r7, #24
 800bf16:	4618      	mov	r0, r3
 800bf18:	f7ff f916 	bl	800b148 <dir_register>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	e000      	b.n	800bf22 <f_open+0xca>
 800bf20:	2312      	movs	r3, #18
 800bf22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800bf26:	79fb      	ldrb	r3, [r7, #7]
 800bf28:	f043 0308 	orr.w	r3, r3, #8
 800bf2c:	71fb      	strb	r3, [r7, #7]
 800bf2e:	e010      	b.n	800bf52 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bf30:	7fbb      	ldrb	r3, [r7, #30]
 800bf32:	f003 0311 	and.w	r3, r3, #17
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d003      	beq.n	800bf42 <f_open+0xea>
					res = FR_DENIED;
 800bf3a:	2307      	movs	r3, #7
 800bf3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800bf40:	e007      	b.n	800bf52 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800bf42:	79fb      	ldrb	r3, [r7, #7]
 800bf44:	f003 0304 	and.w	r3, r3, #4
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d002      	beq.n	800bf52 <f_open+0xfa>
 800bf4c:	2308      	movs	r3, #8
 800bf4e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bf52:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d168      	bne.n	800c02c <f_open+0x1d4>
 800bf5a:	79fb      	ldrb	r3, [r7, #7]
 800bf5c:	f003 0308 	and.w	r3, r3, #8
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d063      	beq.n	800c02c <f_open+0x1d4>
				dw = GET_FATTIME();
 800bf64:	f7fd fcf0 	bl	8009948 <get_fattime>
 800bf68:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800bf6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf6c:	330e      	adds	r3, #14
 800bf6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bf70:	4618      	mov	r0, r3
 800bf72:	f7fd ff01 	bl	8009d78 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800bf76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf78:	3316      	adds	r3, #22
 800bf7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f7fd fefb 	bl	8009d78 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800bf82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf84:	330b      	adds	r3, #11
 800bf86:	2220      	movs	r2, #32
 800bf88:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf8e:	4611      	mov	r1, r2
 800bf90:	4618      	mov	r0, r3
 800bf92:	f7fe fe52 	bl	800ac3a <ld_clust>
 800bf96:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f7fe fe6a 	bl	800ac78 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800bfa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa6:	331c      	adds	r3, #28
 800bfa8:	2100      	movs	r1, #0
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f7fd fee4 	bl	8009d78 <st_dword>
					fs->wflag = 1;
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	2201      	movs	r2, #1
 800bfb4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800bfb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d037      	beq.n	800c02c <f_open+0x1d4>
						dw = fs->winsect;
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfc0:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800bfc2:	f107 0318 	add.w	r3, r7, #24
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f7fe fb7d 	bl	800a6ca <remove_chain>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800bfd6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d126      	bne.n	800c02c <f_open+0x1d4>
							res = move_window(fs, dw);
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f7fe f922 	bl	800a22c <move_window>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800bfee:	697b      	ldr	r3, [r7, #20]
 800bff0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bff2:	3a01      	subs	r2, #1
 800bff4:	611a      	str	r2, [r3, #16]
 800bff6:	e019      	b.n	800c02c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800bff8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d115      	bne.n	800c02c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c000:	7fbb      	ldrb	r3, [r7, #30]
 800c002:	f003 0310 	and.w	r3, r3, #16
 800c006:	2b00      	cmp	r3, #0
 800c008:	d003      	beq.n	800c012 <f_open+0x1ba>
					res = FR_NO_FILE;
 800c00a:	2304      	movs	r3, #4
 800c00c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c010:	e00c      	b.n	800c02c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c012:	79fb      	ldrb	r3, [r7, #7]
 800c014:	f003 0302 	and.w	r3, r3, #2
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d007      	beq.n	800c02c <f_open+0x1d4>
 800c01c:	7fbb      	ldrb	r3, [r7, #30]
 800c01e:	f003 0301 	and.w	r3, r3, #1
 800c022:	2b00      	cmp	r3, #0
 800c024:	d002      	beq.n	800c02c <f_open+0x1d4>
						res = FR_DENIED;
 800c026:	2307      	movs	r3, #7
 800c028:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800c02c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c030:	2b00      	cmp	r3, #0
 800c032:	d128      	bne.n	800c086 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c034:	79fb      	ldrb	r3, [r7, #7]
 800c036:	f003 0308 	and.w	r3, r3, #8
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d003      	beq.n	800c046 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c03e:	79fb      	ldrb	r3, [r7, #7]
 800c040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c044:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c04e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c054:	79fb      	ldrb	r3, [r7, #7]
 800c056:	f023 0301 	bic.w	r3, r3, #1
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	bf14      	ite	ne
 800c05e:	2301      	movne	r3, #1
 800c060:	2300      	moveq	r3, #0
 800c062:	b2db      	uxtb	r3, r3
 800c064:	461a      	mov	r2, r3
 800c066:	f107 0318 	add.w	r3, r7, #24
 800c06a:	4611      	mov	r1, r2
 800c06c:	4618      	mov	r0, r3
 800c06e:	f7fd ffab 	bl	8009fc8 <inc_lock>
 800c072:	4602      	mov	r2, r0
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	691b      	ldr	r3, [r3, #16]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d102      	bne.n	800c086 <f_open+0x22e>
 800c080:	2302      	movs	r3, #2
 800c082:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c086:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d17c      	bne.n	800c188 <f_open+0x330>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c092:	4611      	mov	r1, r2
 800c094:	4618      	mov	r0, r3
 800c096:	f7fe fdd0 	bl	800ac3a <ld_clust>
 800c09a:	4602      	mov	r2, r0
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a2:	331c      	adds	r3, #28
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f7fd fe29 	bl	8009cfc <ld_dword>
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c0b6:	697a      	ldr	r2, [r7, #20]
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	88da      	ldrh	r2, [r3, #6]
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	79fa      	ldrb	r2, [r7, #7]
 800c0c8:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c0dc:	79fb      	ldrb	r3, [r7, #7]
 800c0de:	f003 0320 	and.w	r3, r3, #32
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d050      	beq.n	800c188 <f_open+0x330>
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	68db      	ldr	r3, [r3, #12]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d04c      	beq.n	800c188 <f_open+0x330>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	68da      	ldr	r2, [r3, #12]
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c0f6:	697b      	ldr	r3, [r7, #20]
 800c0f8:	895b      	ldrh	r3, [r3, #10]
 800c0fa:	025b      	lsls	r3, r3, #9
 800c0fc:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	689b      	ldr	r3, [r3, #8]
 800c102:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	68db      	ldr	r3, [r3, #12]
 800c108:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c10a:	e016      	b.n	800c13a <f_open+0x2e2>
					clst = get_fat(&fp->obj, clst);
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c110:	4618      	mov	r0, r3
 800c112:	f7fe f946 	bl	800a3a2 <get_fat>
 800c116:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800c118:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c11a:	2b01      	cmp	r3, #1
 800c11c:	d802      	bhi.n	800c124 <f_open+0x2cc>
 800c11e:	2302      	movs	r3, #2
 800c120:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c124:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c126:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c12a:	d102      	bne.n	800c132 <f_open+0x2da>
 800c12c:	2301      	movs	r3, #1
 800c12e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c132:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c136:	1ad3      	subs	r3, r2, r3
 800c138:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c13a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d103      	bne.n	800c14a <f_open+0x2f2>
 800c142:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c146:	429a      	cmp	r2, r3
 800c148:	d8e0      	bhi.n	800c10c <f_open+0x2b4>
				}
				fp->clust = clst;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c14e:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c150:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c154:	2b00      	cmp	r3, #0
 800c156:	d117      	bne.n	800c188 <f_open+0x330>
 800c158:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c15a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d012      	beq.n	800c188 <f_open+0x330>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c166:	4618      	mov	r0, r3
 800c168:	f7fe f8fc 	bl	800a364 <clust2sect>
 800c16c:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c16e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c170:	2b00      	cmp	r3, #0
 800c172:	d103      	bne.n	800c17c <f_open+0x324>
						res = FR_INT_ERR;
 800c174:	2302      	movs	r3, #2
 800c176:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c17a:	e005      	b.n	800c188 <f_open+0x330>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c17c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c17e:	0a5a      	lsrs	r2, r3, #9
 800c180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c182:	441a      	add	r2, r3
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	621a      	str	r2, [r3, #32]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c188:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d002      	beq.n	800c196 <f_open+0x33e>
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	2200      	movs	r2, #0
 800c194:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c196:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	3768      	adds	r7, #104	; 0x68
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}

0800c1a2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c1a2:	b580      	push	{r7, lr}
 800c1a4:	b08c      	sub	sp, #48	; 0x30
 800c1a6:	af00      	add	r7, sp, #0
 800c1a8:	60f8      	str	r0, [r7, #12]
 800c1aa:	60b9      	str	r1, [r7, #8]
 800c1ac:	607a      	str	r2, [r7, #4]
 800c1ae:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	f107 0210 	add.w	r2, r7, #16
 800c1c0:	4611      	mov	r1, r2
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f7ff fdcc 	bl	800bd60 <validate>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c1ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d107      	bne.n	800c1e6 <f_write+0x44>
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	7d5b      	ldrb	r3, [r3, #21]
 800c1da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c1de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d002      	beq.n	800c1ec <f_write+0x4a>
 800c1e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c1ea:	e13f      	b.n	800c46c <f_write+0x2ca>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	7d1b      	ldrb	r3, [r3, #20]
 800c1f0:	f003 0302 	and.w	r3, r3, #2
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d101      	bne.n	800c1fc <f_write+0x5a>
 800c1f8:	2307      	movs	r3, #7
 800c1fa:	e137      	b.n	800c46c <f_write+0x2ca>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	699a      	ldr	r2, [r3, #24]
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	441a      	add	r2, r3
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	699b      	ldr	r3, [r3, #24]
 800c208:	429a      	cmp	r2, r3
 800c20a:	f080 8121 	bcs.w	800c450 <f_write+0x2ae>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	699b      	ldr	r3, [r3, #24]
 800c212:	43db      	mvns	r3, r3
 800c214:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c216:	e11b      	b.n	800c450 <f_write+0x2ae>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	699b      	ldr	r3, [r3, #24]
 800c21c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c220:	2b00      	cmp	r3, #0
 800c222:	f040 80cc 	bne.w	800c3be <f_write+0x21c>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	699b      	ldr	r3, [r3, #24]
 800c22a:	0a5b      	lsrs	r3, r3, #9
 800c22c:	693a      	ldr	r2, [r7, #16]
 800c22e:	8952      	ldrh	r2, [r2, #10]
 800c230:	3a01      	subs	r2, #1
 800c232:	4013      	ands	r3, r2
 800c234:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c236:	69bb      	ldr	r3, [r7, #24]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d143      	bne.n	800c2c4 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	699b      	ldr	r3, [r3, #24]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d10c      	bne.n	800c25e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	689b      	ldr	r3, [r3, #8]
 800c248:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d11a      	bne.n	800c286 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	2100      	movs	r1, #0
 800c254:	4618      	mov	r0, r3
 800c256:	f7fe fa9d 	bl	800a794 <create_chain>
 800c25a:	62b8      	str	r0, [r7, #40]	; 0x28
 800c25c:	e013      	b.n	800c286 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c262:	2b00      	cmp	r3, #0
 800c264:	d007      	beq.n	800c276 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	699b      	ldr	r3, [r3, #24]
 800c26a:	4619      	mov	r1, r3
 800c26c:	68f8      	ldr	r0, [r7, #12]
 800c26e:	f7fe fb29 	bl	800a8c4 <clmt_clust>
 800c272:	62b8      	str	r0, [r7, #40]	; 0x28
 800c274:	e007      	b.n	800c286 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c276:	68fa      	ldr	r2, [r7, #12]
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	69db      	ldr	r3, [r3, #28]
 800c27c:	4619      	mov	r1, r3
 800c27e:	4610      	mov	r0, r2
 800c280:	f7fe fa88 	bl	800a794 <create_chain>
 800c284:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c288:	2b00      	cmp	r3, #0
 800c28a:	f000 80e6 	beq.w	800c45a <f_write+0x2b8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c290:	2b01      	cmp	r3, #1
 800c292:	d104      	bne.n	800c29e <f_write+0xfc>
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	2202      	movs	r2, #2
 800c298:	755a      	strb	r2, [r3, #21]
 800c29a:	2302      	movs	r3, #2
 800c29c:	e0e6      	b.n	800c46c <f_write+0x2ca>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2a4:	d104      	bne.n	800c2b0 <f_write+0x10e>
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	2201      	movs	r2, #1
 800c2aa:	755a      	strb	r2, [r3, #21]
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	e0dd      	b.n	800c46c <f_write+0x2ca>
				fp->clust = clst;			/* Update current cluster */
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2b4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	689b      	ldr	r3, [r3, #8]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d102      	bne.n	800c2c4 <f_write+0x122>
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2c2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	6a1b      	ldr	r3, [r3, #32]
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d10b      	bne.n	800c2e8 <f_write+0x146>
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f7fd ff66 	bl	800a1a4 <sync_window>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d004      	beq.n	800c2e8 <f_write+0x146>
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	755a      	strb	r2, [r3, #21]
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	e0c1      	b.n	800c46c <f_write+0x2ca>
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c2e8:	693a      	ldr	r2, [r7, #16]
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	69db      	ldr	r3, [r3, #28]
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	4610      	mov	r0, r2
 800c2f2:	f7fe f837 	bl	800a364 <clust2sect>
 800c2f6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d104      	bne.n	800c308 <f_write+0x166>
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	2202      	movs	r2, #2
 800c302:	755a      	strb	r2, [r3, #21]
 800c304:	2302      	movs	r3, #2
 800c306:	e0b1      	b.n	800c46c <f_write+0x2ca>
			sect += csect;
 800c308:	697a      	ldr	r2, [r7, #20]
 800c30a:	69bb      	ldr	r3, [r7, #24]
 800c30c:	4413      	add	r3, r2
 800c30e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	0a5b      	lsrs	r3, r3, #9
 800c314:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c316:	6a3b      	ldr	r3, [r7, #32]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d038      	beq.n	800c38e <f_write+0x1ec>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c31c:	69ba      	ldr	r2, [r7, #24]
 800c31e:	6a3b      	ldr	r3, [r7, #32]
 800c320:	4413      	add	r3, r2
 800c322:	693a      	ldr	r2, [r7, #16]
 800c324:	8952      	ldrh	r2, [r2, #10]
 800c326:	4293      	cmp	r3, r2
 800c328:	d905      	bls.n	800c336 <f_write+0x194>
					cc = fs->csize - csect;
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	895b      	ldrh	r3, [r3, #10]
 800c32e:	461a      	mov	r2, r3
 800c330:	69bb      	ldr	r3, [r7, #24]
 800c332:	1ad3      	subs	r3, r2, r3
 800c334:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	7858      	ldrb	r0, [r3, #1]
 800c33a:	6a3b      	ldr	r3, [r7, #32]
 800c33c:	697a      	ldr	r2, [r7, #20]
 800c33e:	69f9      	ldr	r1, [r7, #28]
 800c340:	f7fd fc86 	bl	8009c50 <disk_write>
 800c344:	4603      	mov	r3, r0
 800c346:	2b00      	cmp	r3, #0
 800c348:	d004      	beq.n	800c354 <f_write+0x1b2>
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	2201      	movs	r2, #1
 800c34e:	755a      	strb	r2, [r3, #21]
 800c350:	2301      	movs	r3, #1
 800c352:	e08b      	b.n	800c46c <f_write+0x2ca>
#if _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	1ad3      	subs	r3, r2, r3
 800c35c:	6a3a      	ldr	r2, [r7, #32]
 800c35e:	429a      	cmp	r2, r3
 800c360:	d911      	bls.n	800c386 <f_write+0x1e4>
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	1ad3      	subs	r3, r2, r3
 800c370:	025b      	lsls	r3, r3, #9
 800c372:	69fa      	ldr	r2, [r7, #28]
 800c374:	4413      	add	r3, r2
 800c376:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c37a:	4619      	mov	r1, r3
 800c37c:	f7fd fd28 	bl	8009dd0 <mem_cpy>
					fs->wflag = 0;
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	2200      	movs	r2, #0
 800c384:	70da      	strb	r2, [r3, #3]
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c386:	6a3b      	ldr	r3, [r7, #32]
 800c388:	025b      	lsls	r3, r3, #9
 800c38a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c38c:	e043      	b.n	800c416 <f_write+0x274>
			}
#if _FS_TINY
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	699a      	ldr	r2, [r3, #24]
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	68db      	ldr	r3, [r3, #12]
 800c396:	429a      	cmp	r2, r3
 800c398:	d30e      	bcc.n	800c3b8 <f_write+0x216>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
 800c39a:	693b      	ldr	r3, [r7, #16]
 800c39c:	4618      	mov	r0, r3
 800c39e:	f7fd ff01 	bl	800a1a4 <sync_window>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d004      	beq.n	800c3b2 <f_write+0x210>
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	2201      	movs	r2, #1
 800c3ac:	755a      	strb	r2, [r3, #21]
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	e05c      	b.n	800c46c <f_write+0x2ca>
				fs->winsect = sect;
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	697a      	ldr	r2, [r7, #20]
 800c3b6:	631a      	str	r2, [r3, #48]	; 0x30
				fp->fptr < fp->obj.objsize &&
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
					ABORT(fs, FR_DISK_ERR);
			}
#endif
			fp->sect = sect;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	697a      	ldr	r2, [r7, #20]
 800c3bc:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	699b      	ldr	r3, [r3, #24]
 800c3c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3c6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c3ca:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c3cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	d901      	bls.n	800c3d8 <f_write+0x236>
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 800c3d8:	693a      	ldr	r2, [r7, #16]
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	6a1b      	ldr	r3, [r3, #32]
 800c3de:	4619      	mov	r1, r3
 800c3e0:	4610      	mov	r0, r2
 800c3e2:	f7fd ff23 	bl	800a22c <move_window>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d004      	beq.n	800c3f6 <f_write+0x254>
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	2201      	movs	r2, #1
 800c3f0:	755a      	strb	r2, [r3, #21]
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	e03a      	b.n	800c46c <f_write+0x2ca>
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c3f6:	693b      	ldr	r3, [r7, #16]
 800c3f8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	699b      	ldr	r3, [r3, #24]
 800c400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c404:	4413      	add	r3, r2
 800c406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c408:	69f9      	ldr	r1, [r7, #28]
 800c40a:	4618      	mov	r0, r3
 800c40c:	f7fd fce0 	bl	8009dd0 <mem_cpy>
		fs->wflag = 1;
 800c410:	693b      	ldr	r3, [r7, #16]
 800c412:	2201      	movs	r2, #1
 800c414:	70da      	strb	r2, [r3, #3]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c416:	69fa      	ldr	r2, [r7, #28]
 800c418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c41a:	4413      	add	r3, r2
 800c41c:	61fb      	str	r3, [r7, #28]
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	699a      	ldr	r2, [r3, #24]
 800c422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c424:	441a      	add	r2, r3
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	619a      	str	r2, [r3, #24]
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	68da      	ldr	r2, [r3, #12]
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	699b      	ldr	r3, [r3, #24]
 800c432:	429a      	cmp	r2, r3
 800c434:	bf38      	it	cc
 800c436:	461a      	movcc	r2, r3
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	60da      	str	r2, [r3, #12]
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	681a      	ldr	r2, [r3, #0]
 800c440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c442:	441a      	add	r2, r3
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	601a      	str	r2, [r3, #0]
 800c448:	687a      	ldr	r2, [r7, #4]
 800c44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c44c:	1ad3      	subs	r3, r2, r3
 800c44e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2b00      	cmp	r3, #0
 800c454:	f47f aee0 	bne.w	800c218 <f_write+0x76>
 800c458:	e000      	b.n	800c45c <f_write+0x2ba>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c45a:	bf00      	nop
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	7d1b      	ldrb	r3, [r3, #20]
 800c460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c464:	b2da      	uxtb	r2, r3
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c46a:	2300      	movs	r3, #0
}
 800c46c:	4618      	mov	r0, r3
 800c46e:	3730      	adds	r7, #48	; 0x30
 800c470:	46bd      	mov	sp, r7
 800c472:	bd80      	pop	{r7, pc}

0800c474 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b086      	sub	sp, #24
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f107 0208 	add.w	r2, r7, #8
 800c482:	4611      	mov	r1, r2
 800c484:	4618      	mov	r0, r3
 800c486:	f7ff fc6b 	bl	800bd60 <validate>
 800c48a:	4603      	mov	r3, r0
 800c48c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c48e:	7dfb      	ldrb	r3, [r7, #23]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d14d      	bne.n	800c530 <f_sync+0xbc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	7d1b      	ldrb	r3, [r3, #20]
 800c498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d047      	beq.n	800c530 <f_sync+0xbc>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c4a0:	f7fd fa52 	bl	8009948 <get_fattime>
 800c4a4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c4a6:	68ba      	ldr	r2, [r7, #8]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	4610      	mov	r0, r2
 800c4b0:	f7fd febc 	bl	800a22c <move_window>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c4b8:	7dfb      	ldrb	r3, [r7, #23]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d138      	bne.n	800c530 <f_sync+0xbc>
					dir = fp->dir_ptr;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4c2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	330b      	adds	r3, #11
 800c4c8:	781a      	ldrb	r2, [r3, #0]
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	330b      	adds	r3, #11
 800c4ce:	f042 0220 	orr.w	r2, r2, #32
 800c4d2:	b2d2      	uxtb	r2, r2
 800c4d4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6818      	ldr	r0, [r3, #0]
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	689b      	ldr	r3, [r3, #8]
 800c4de:	461a      	mov	r2, r3
 800c4e0:	68f9      	ldr	r1, [r7, #12]
 800c4e2:	f7fe fbc9 	bl	800ac78 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	f103 021c 	add.w	r2, r3, #28
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	68db      	ldr	r3, [r3, #12]
 800c4f0:	4619      	mov	r1, r3
 800c4f2:	4610      	mov	r0, r2
 800c4f4:	f7fd fc40 	bl	8009d78 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	3316      	adds	r3, #22
 800c4fc:	6939      	ldr	r1, [r7, #16]
 800c4fe:	4618      	mov	r0, r3
 800c500:	f7fd fc3a 	bl	8009d78 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	3312      	adds	r3, #18
 800c508:	2100      	movs	r1, #0
 800c50a:	4618      	mov	r0, r3
 800c50c:	f7fd fc19 	bl	8009d42 <st_word>
					fs->wflag = 1;
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	2201      	movs	r2, #1
 800c514:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	4618      	mov	r0, r3
 800c51a:	f7fd feb5 	bl	800a288 <sync_fs>
 800c51e:	4603      	mov	r3, r0
 800c520:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	7d1b      	ldrb	r3, [r3, #20]
 800c526:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c52a:	b2da      	uxtb	r2, r3
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c530:	7dfb      	ldrb	r3, [r7, #23]
}
 800c532:	4618      	mov	r0, r3
 800c534:	3718      	adds	r7, #24
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}

0800c53a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c53a:	b580      	push	{r7, lr}
 800c53c:	b084      	sub	sp, #16
 800c53e:	af00      	add	r7, sp, #0
 800c540:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f7ff ff96 	bl	800c474 <f_sync>
 800c548:	4603      	mov	r3, r0
 800c54a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c54c:	7bfb      	ldrb	r3, [r7, #15]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d118      	bne.n	800c584 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f107 0208 	add.w	r2, r7, #8
 800c558:	4611      	mov	r1, r2
 800c55a:	4618      	mov	r0, r3
 800c55c:	f7ff fc00 	bl	800bd60 <validate>
 800c560:	4603      	mov	r3, r0
 800c562:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c564:	7bfb      	ldrb	r3, [r7, #15]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d10c      	bne.n	800c584 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	691b      	ldr	r3, [r3, #16]
 800c56e:	4618      	mov	r0, r3
 800c570:	f7fd fdb8 	bl	800a0e4 <dec_lock>
 800c574:	4603      	mov	r3, r0
 800c576:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c578:	7bfb      	ldrb	r3, [r7, #15]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d102      	bne.n	800c584 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2200      	movs	r2, #0
 800c582:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c584:	7bfb      	ldrb	r3, [r7, #15]
}
 800c586:	4618      	mov	r0, r3
 800c588:	3710      	adds	r7, #16
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}

0800c58e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800c58e:	b580      	push	{r7, lr}
 800c590:	b090      	sub	sp, #64	; 0x40
 800c592:	af00      	add	r7, sp, #0
 800c594:	6078      	str	r0, [r7, #4]
 800c596:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f107 0208 	add.w	r2, r7, #8
 800c59e:	4611      	mov	r1, r2
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f7ff fbdd 	bl	800bd60 <validate>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800c5ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d103      	bne.n	800c5bc <f_lseek+0x2e>
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	7d5b      	ldrb	r3, [r3, #21]
 800c5b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800c5bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d002      	beq.n	800c5ca <f_lseek+0x3c>
 800c5c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c5c8:	e188      	b.n	800c8dc <f_lseek+0x34e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	f000 80a2 	beq.w	800c718 <f_lseek+0x18a>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5da:	d15a      	bne.n	800c692 <f_lseek+0x104>
			tbl = fp->cltbl;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5e0:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e4:	1d1a      	adds	r2, r3, #4
 800c5e6:	627a      	str	r2, [r7, #36]	; 0x24
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	617b      	str	r3, [r7, #20]
 800c5ec:	2302      	movs	r3, #2
 800c5ee:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	689b      	ldr	r3, [r3, #8]
 800c5f4:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800c5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d03a      	beq.n	800c672 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800c5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5fe:	613b      	str	r3, [r7, #16]
 800c600:	2300      	movs	r3, #0
 800c602:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c606:	3302      	adds	r3, #2
 800c608:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800c60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c60c:	60fb      	str	r3, [r7, #12]
 800c60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c610:	3301      	adds	r3, #1
 800c612:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c618:	4618      	mov	r0, r3
 800c61a:	f7fd fec2 	bl	800a3a2 <get_fat>
 800c61e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c622:	2b01      	cmp	r3, #1
 800c624:	d804      	bhi.n	800c630 <f_lseek+0xa2>
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2202      	movs	r2, #2
 800c62a:	755a      	strb	r2, [r3, #21]
 800c62c:	2302      	movs	r3, #2
 800c62e:	e155      	b.n	800c8dc <f_lseek+0x34e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c632:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c636:	d104      	bne.n	800c642 <f_lseek+0xb4>
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2201      	movs	r2, #1
 800c63c:	755a      	strb	r2, [r3, #21]
 800c63e:	2301      	movs	r3, #1
 800c640:	e14c      	b.n	800c8dc <f_lseek+0x34e>
					} while (cl == pcl + 1);
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	3301      	adds	r3, #1
 800c646:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c648:	429a      	cmp	r2, r3
 800c64a:	d0de      	beq.n	800c60a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c64c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c64e:	697b      	ldr	r3, [r7, #20]
 800c650:	429a      	cmp	r2, r3
 800c652:	d809      	bhi.n	800c668 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800c654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c656:	1d1a      	adds	r2, r3, #4
 800c658:	627a      	str	r2, [r7, #36]	; 0x24
 800c65a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c65c:	601a      	str	r2, [r3, #0]
 800c65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c660:	1d1a      	adds	r2, r3, #4
 800c662:	627a      	str	r2, [r7, #36]	; 0x24
 800c664:	693a      	ldr	r2, [r7, #16]
 800c666:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	699b      	ldr	r3, [r3, #24]
 800c66c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c66e:	429a      	cmp	r2, r3
 800c670:	d3c4      	bcc.n	800c5fc <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c676:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c678:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800c67a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	429a      	cmp	r2, r3
 800c680:	d803      	bhi.n	800c68a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800c682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c684:	2200      	movs	r2, #0
 800c686:	601a      	str	r2, [r3, #0]
 800c688:	e126      	b.n	800c8d8 <f_lseek+0x34a>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c68a:	2311      	movs	r3, #17
 800c68c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800c690:	e122      	b.n	800c8d8 <f_lseek+0x34a>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	68db      	ldr	r3, [r3, #12]
 800c696:	683a      	ldr	r2, [r7, #0]
 800c698:	429a      	cmp	r2, r3
 800c69a:	d902      	bls.n	800c6a2 <f_lseek+0x114>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	68db      	ldr	r3, [r3, #12]
 800c6a0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	683a      	ldr	r2, [r7, #0]
 800c6a6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	f000 8114 	beq.w	800c8d8 <f_lseek+0x34a>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	3b01      	subs	r3, #1
 800c6b4:	4619      	mov	r1, r3
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f7fe f904 	bl	800a8c4 <clmt_clust>
 800c6bc:	4602      	mov	r2, r0
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800c6c2:	68ba      	ldr	r2, [r7, #8]
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	69db      	ldr	r3, [r3, #28]
 800c6c8:	4619      	mov	r1, r3
 800c6ca:	4610      	mov	r0, r2
 800c6cc:	f7fd fe4a 	bl	800a364 <clust2sect>
 800c6d0:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c6d2:	69bb      	ldr	r3, [r7, #24]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d104      	bne.n	800c6e2 <f_lseek+0x154>
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2202      	movs	r2, #2
 800c6dc:	755a      	strb	r2, [r3, #21]
 800c6de:	2302      	movs	r3, #2
 800c6e0:	e0fc      	b.n	800c8dc <f_lseek+0x34e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	3b01      	subs	r3, #1
 800c6e6:	0a5b      	lsrs	r3, r3, #9
 800c6e8:	68ba      	ldr	r2, [r7, #8]
 800c6ea:	8952      	ldrh	r2, [r2, #10]
 800c6ec:	3a01      	subs	r2, #1
 800c6ee:	4013      	ands	r3, r2
 800c6f0:	69ba      	ldr	r2, [r7, #24]
 800c6f2:	4413      	add	r3, r2
 800c6f4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	699b      	ldr	r3, [r3, #24]
 800c6fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	f000 80ea 	beq.w	800c8d8 <f_lseek+0x34a>
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6a1b      	ldr	r3, [r3, #32]
 800c708:	69ba      	ldr	r2, [r7, #24]
 800c70a:	429a      	cmp	r2, r3
 800c70c:	f000 80e4 	beq.w	800c8d8 <f_lseek+0x34a>
						fp->flag &= (BYTE)~FA_DIRTY;
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
#endif
					fp->sect = dsc;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	69ba      	ldr	r2, [r7, #24]
 800c714:	621a      	str	r2, [r3, #32]
 800c716:	e0df      	b.n	800c8d8 <f_lseek+0x34a>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	68db      	ldr	r3, [r3, #12]
 800c71c:	683a      	ldr	r2, [r7, #0]
 800c71e:	429a      	cmp	r2, r3
 800c720:	d908      	bls.n	800c734 <f_lseek+0x1a6>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	7d1b      	ldrb	r3, [r3, #20]
 800c726:	f003 0302 	and.w	r3, r3, #2
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d102      	bne.n	800c734 <f_lseek+0x1a6>
			ofs = fp->obj.objsize;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	68db      	ldr	r3, [r3, #12]
 800c732:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	699b      	ldr	r3, [r3, #24]
 800c738:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800c73a:	2300      	movs	r3, #0
 800c73c:	637b      	str	r3, [r7, #52]	; 0x34
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c742:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	f000 80a7 	beq.w	800c89a <f_lseek+0x30c>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	895b      	ldrh	r3, [r3, #10]
 800c750:	025b      	lsls	r3, r3, #9
 800c752:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800c754:	6a3b      	ldr	r3, [r7, #32]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d01b      	beq.n	800c792 <f_lseek+0x204>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	1e5a      	subs	r2, r3, #1
 800c75e:	69fb      	ldr	r3, [r7, #28]
 800c760:	fbb2 f2f3 	udiv	r2, r2, r3
 800c764:	6a3b      	ldr	r3, [r7, #32]
 800c766:	1e59      	subs	r1, r3, #1
 800c768:	69fb      	ldr	r3, [r7, #28]
 800c76a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c76e:	429a      	cmp	r2, r3
 800c770:	d30f      	bcc.n	800c792 <f_lseek+0x204>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800c772:	6a3b      	ldr	r3, [r7, #32]
 800c774:	1e5a      	subs	r2, r3, #1
 800c776:	69fb      	ldr	r3, [r7, #28]
 800c778:	425b      	negs	r3, r3
 800c77a:	401a      	ands	r2, r3
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	699b      	ldr	r3, [r3, #24]
 800c784:	683a      	ldr	r2, [r7, #0]
 800c786:	1ad3      	subs	r3, r2, r3
 800c788:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	69db      	ldr	r3, [r3, #28]
 800c78e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c790:	e022      	b.n	800c7d8 <f_lseek+0x24a>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	689b      	ldr	r3, [r3, #8]
 800c796:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d119      	bne.n	800c7d2 <f_lseek+0x244>
					clst = create_chain(&fp->obj, 0);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2100      	movs	r1, #0
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f7fd fff6 	bl	800a794 <create_chain>
 800c7a8:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ac:	2b01      	cmp	r3, #1
 800c7ae:	d104      	bne.n	800c7ba <f_lseek+0x22c>
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2202      	movs	r2, #2
 800c7b4:	755a      	strb	r2, [r3, #21]
 800c7b6:	2302      	movs	r3, #2
 800c7b8:	e090      	b.n	800c8dc <f_lseek+0x34e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7c0:	d104      	bne.n	800c7cc <f_lseek+0x23e>
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2201      	movs	r2, #1
 800c7c6:	755a      	strb	r2, [r3, #21]
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	e087      	b.n	800c8dc <f_lseek+0x34e>
					fp->obj.sclust = clst;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7d0:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7d6:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800c7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d05d      	beq.n	800c89a <f_lseek+0x30c>
				while (ofs > bcs) {						/* Cluster following loop */
 800c7de:	e03a      	b.n	800c856 <f_lseek+0x2c8>
					ofs -= bcs; fp->fptr += bcs;
 800c7e0:	683a      	ldr	r2, [r7, #0]
 800c7e2:	69fb      	ldr	r3, [r7, #28]
 800c7e4:	1ad3      	subs	r3, r2, r3
 800c7e6:	603b      	str	r3, [r7, #0]
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	699a      	ldr	r2, [r3, #24]
 800c7ec:	69fb      	ldr	r3, [r7, #28]
 800c7ee:	441a      	add	r2, r3
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	7d1b      	ldrb	r3, [r3, #20]
 800c7f8:	f003 0302 	and.w	r3, r3, #2
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d00b      	beq.n	800c818 <f_lseek+0x28a>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c804:	4618      	mov	r0, r3
 800c806:	f7fd ffc5 	bl	800a794 <create_chain>
 800c80a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800c80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d108      	bne.n	800c824 <f_lseek+0x296>
							ofs = 0; break;
 800c812:	2300      	movs	r3, #0
 800c814:	603b      	str	r3, [r7, #0]
 800c816:	e022      	b.n	800c85e <f_lseek+0x2d0>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c81c:	4618      	mov	r0, r3
 800c81e:	f7fd fdc0 	bl	800a3a2 <get_fat>
 800c822:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c826:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c82a:	d104      	bne.n	800c836 <f_lseek+0x2a8>
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2201      	movs	r2, #1
 800c830:	755a      	strb	r2, [r3, #21]
 800c832:	2301      	movs	r3, #1
 800c834:	e052      	b.n	800c8dc <f_lseek+0x34e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c838:	2b01      	cmp	r3, #1
 800c83a:	d904      	bls.n	800c846 <f_lseek+0x2b8>
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	699b      	ldr	r3, [r3, #24]
 800c840:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c842:	429a      	cmp	r2, r3
 800c844:	d304      	bcc.n	800c850 <f_lseek+0x2c2>
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2202      	movs	r2, #2
 800c84a:	755a      	strb	r2, [r3, #21]
 800c84c:	2302      	movs	r3, #2
 800c84e:	e045      	b.n	800c8dc <f_lseek+0x34e>
					fp->clust = clst;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c854:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800c856:	683a      	ldr	r2, [r7, #0]
 800c858:	69fb      	ldr	r3, [r7, #28]
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d8c0      	bhi.n	800c7e0 <f_lseek+0x252>
				}
				fp->fptr += ofs;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	699a      	ldr	r2, [r3, #24]
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	441a      	add	r2, r3
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c870:	2b00      	cmp	r3, #0
 800c872:	d012      	beq.n	800c89a <f_lseek+0x30c>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c878:	4618      	mov	r0, r3
 800c87a:	f7fd fd73 	bl	800a364 <clust2sect>
 800c87e:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800c880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c882:	2b00      	cmp	r3, #0
 800c884:	d104      	bne.n	800c890 <f_lseek+0x302>
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2202      	movs	r2, #2
 800c88a:	755a      	strb	r2, [r3, #21]
 800c88c:	2302      	movs	r3, #2
 800c88e:	e025      	b.n	800c8dc <f_lseek+0x34e>
					nsect += (DWORD)(ofs / SS(fs));
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	0a5b      	lsrs	r3, r3, #9
 800c894:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c896:	4413      	add	r3, r2
 800c898:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	699a      	ldr	r2, [r3, #24]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	68db      	ldr	r3, [r3, #12]
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d90a      	bls.n	800c8bc <f_lseek+0x32e>
			fp->obj.objsize = fp->fptr;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	699a      	ldr	r2, [r3, #24]
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	7d1b      	ldrb	r3, [r3, #20]
 800c8b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8b6:	b2da      	uxtb	r2, r3
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	699b      	ldr	r3, [r3, #24]
 800c8c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d007      	beq.n	800c8d8 <f_lseek+0x34a>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6a1b      	ldr	r3, [r3, #32]
 800c8cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	d002      	beq.n	800c8d8 <f_lseek+0x34a>
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
#endif
			fp->sect = nsect;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8d6:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800c8d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3740      	adds	r7, #64	; 0x40
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}

0800c8e4 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b098      	sub	sp, #96	; 0x60
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800c8ec:	f107 010c 	add.w	r1, r7, #12
 800c8f0:	1d3b      	adds	r3, r7, #4
 800c8f2:	2202      	movs	r2, #2
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f7fe ffe3 	bl	800b8c0 <find_volume>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 800c904:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c908:	2b00      	cmp	r3, #0
 800c90a:	f040 80ec 	bne.w	800cae6 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800c90e:	687a      	ldr	r2, [r7, #4]
 800c910:	f107 0310 	add.w	r3, r7, #16
 800c914:	4611      	mov	r1, r2
 800c916:	4618      	mov	r0, r3
 800c918:	f7fe fec6 	bl	800b6a8 <follow_path>
 800c91c:	4603      	mov	r3, r0
 800c91e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800c922:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c926:	2b00      	cmp	r3, #0
 800c928:	d102      	bne.n	800c930 <f_mkdir+0x4c>
 800c92a:	2308      	movs	r3, #8
 800c92c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800c930:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c934:	2b04      	cmp	r3, #4
 800c936:	f040 80d6 	bne.w	800cae6 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800c93a:	f107 0310 	add.w	r3, r7, #16
 800c93e:	2100      	movs	r1, #0
 800c940:	4618      	mov	r0, r3
 800c942:	f7fd ff27 	bl	800a794 <create_chain>
 800c946:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	895b      	ldrh	r3, [r3, #10]
 800c94c:	025b      	lsls	r3, r3, #9
 800c94e:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 800c950:	2300      	movs	r3, #0
 800c952:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800c956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d102      	bne.n	800c962 <f_mkdir+0x7e>
 800c95c:	2307      	movs	r3, #7
 800c95e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 800c962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c964:	2b01      	cmp	r3, #1
 800c966:	d102      	bne.n	800c96e <f_mkdir+0x8a>
 800c968:	2302      	movs	r3, #2
 800c96a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c96e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c970:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c974:	d102      	bne.n	800c97c <f_mkdir+0x98>
 800c976:	2301      	movs	r3, #1
 800c978:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800c97c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c980:	2b00      	cmp	r3, #0
 800c982:	d106      	bne.n	800c992 <f_mkdir+0xae>
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	4618      	mov	r0, r3
 800c988:	f7fd fc0c 	bl	800a1a4 <sync_window>
 800c98c:	4603      	mov	r3, r0
 800c98e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 800c992:	f7fc ffd9 	bl	8009948 <get_fattime>
 800c996:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 800c998:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d16a      	bne.n	800ca76 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f7fd fcdd 	bl	800a364 <clust2sect>
 800c9aa:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	3334      	adds	r3, #52	; 0x34
 800c9b0:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 800c9b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c9b6:	2100      	movs	r1, #0
 800c9b8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c9ba:	f7fd fa2a 	bl	8009e12 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800c9be:	220b      	movs	r2, #11
 800c9c0:	2120      	movs	r1, #32
 800c9c2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c9c4:	f7fd fa25 	bl	8009e12 <mem_set>
					dir[DIR_Name] = '.';
 800c9c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9ca:	222e      	movs	r2, #46	; 0x2e
 800c9cc:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800c9ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9d0:	330b      	adds	r3, #11
 800c9d2:	2210      	movs	r2, #16
 800c9d4:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800c9d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9d8:	3316      	adds	r3, #22
 800c9da:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c9dc:	4618      	mov	r0, r3
 800c9de:	f7fd f9cb 	bl	8009d78 <st_dword>
					st_clust(fs, dir, dcl);
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c9e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f7fe f945 	bl	800ac78 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800c9ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9f0:	3320      	adds	r3, #32
 800c9f2:	2220      	movs	r2, #32
 800c9f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f7fd f9ea 	bl	8009dd0 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800c9fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9fe:	3321      	adds	r3, #33	; 0x21
 800ca00:	222e      	movs	r2, #46	; 0x2e
 800ca02:	701a      	strb	r2, [r3, #0]
 800ca04:	69bb      	ldr	r3, [r7, #24]
 800ca06:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	781b      	ldrb	r3, [r3, #0]
 800ca0c:	2b03      	cmp	r3, #3
 800ca0e:	d106      	bne.n	800ca1e <f_mkdir+0x13a>
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ca16:	429a      	cmp	r2, r3
 800ca18:	d101      	bne.n	800ca1e <f_mkdir+0x13a>
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 800ca1e:	68f8      	ldr	r0, [r7, #12]
 800ca20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca22:	3320      	adds	r3, #32
 800ca24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ca26:	4619      	mov	r1, r3
 800ca28:	f7fe f926 	bl	800ac78 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	895b      	ldrh	r3, [r3, #10]
 800ca30:	65bb      	str	r3, [r7, #88]	; 0x58
 800ca32:	e01b      	b.n	800ca6c <f_mkdir+0x188>
					fs->winsect = dsc++;
 800ca34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca36:	1c5a      	adds	r2, r3, #1
 800ca38:	657a      	str	r2, [r7, #84]	; 0x54
 800ca3a:	68fa      	ldr	r2, [r7, #12]
 800ca3c:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	2201      	movs	r2, #1
 800ca42:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	4618      	mov	r0, r3
 800ca48:	f7fd fbac 	bl	800a1a4 <sync_window>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 800ca52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d10c      	bne.n	800ca74 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 800ca5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ca5e:	2100      	movs	r1, #0
 800ca60:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ca62:	f7fd f9d6 	bl	8009e12 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800ca66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca68:	3b01      	subs	r3, #1
 800ca6a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ca6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d1e0      	bne.n	800ca34 <f_mkdir+0x150>
 800ca72:	e000      	b.n	800ca76 <f_mkdir+0x192>
					if (res != FR_OK) break;
 800ca74:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800ca76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d107      	bne.n	800ca8e <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800ca7e:	f107 0310 	add.w	r3, r7, #16
 800ca82:	4618      	mov	r0, r3
 800ca84:	f7fe fb60 	bl	800b148 <dir_register>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 800ca8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d120      	bne.n	800cad8 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800ca96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca98:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800ca9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca9c:	3316      	adds	r3, #22
 800ca9e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800caa0:	4618      	mov	r0, r3
 800caa2:	f7fd f969 	bl	8009d78 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800caaa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800caac:	4618      	mov	r0, r3
 800caae:	f7fe f8e3 	bl	800ac78 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800cab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cab4:	330b      	adds	r3, #11
 800cab6:	2210      	movs	r2, #16
 800cab8:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	2201      	movs	r2, #1
 800cabe:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800cac0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d10e      	bne.n	800cae6 <f_mkdir+0x202>
					res = sync_fs(fs);
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	4618      	mov	r0, r3
 800cacc:	f7fd fbdc 	bl	800a288 <sync_fs>
 800cad0:	4603      	mov	r3, r0
 800cad2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800cad6:	e006      	b.n	800cae6 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800cad8:	f107 0310 	add.w	r3, r7, #16
 800cadc:	2200      	movs	r2, #0
 800cade:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cae0:	4618      	mov	r0, r3
 800cae2:	f7fd fdf2 	bl	800a6ca <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800cae6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800caea:	4618      	mov	r0, r3
 800caec:	3760      	adds	r7, #96	; 0x60
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd80      	pop	{r7, pc}
	...

0800caf4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800caf4:	b480      	push	{r7}
 800caf6:	b087      	sub	sp, #28
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	60f8      	str	r0, [r7, #12]
 800cafc:	60b9      	str	r1, [r7, #8]
 800cafe:	4613      	mov	r3, r2
 800cb00:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cb02:	2301      	movs	r3, #1
 800cb04:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cb06:	2300      	movs	r3, #0
 800cb08:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cb0a:	4b1f      	ldr	r3, [pc, #124]	; (800cb88 <FATFS_LinkDriverEx+0x94>)
 800cb0c:	7a5b      	ldrb	r3, [r3, #9]
 800cb0e:	b2db      	uxtb	r3, r3
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d131      	bne.n	800cb78 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cb14:	4b1c      	ldr	r3, [pc, #112]	; (800cb88 <FATFS_LinkDriverEx+0x94>)
 800cb16:	7a5b      	ldrb	r3, [r3, #9]
 800cb18:	b2db      	uxtb	r3, r3
 800cb1a:	461a      	mov	r2, r3
 800cb1c:	4b1a      	ldr	r3, [pc, #104]	; (800cb88 <FATFS_LinkDriverEx+0x94>)
 800cb1e:	2100      	movs	r1, #0
 800cb20:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cb22:	4b19      	ldr	r3, [pc, #100]	; (800cb88 <FATFS_LinkDriverEx+0x94>)
 800cb24:	7a5b      	ldrb	r3, [r3, #9]
 800cb26:	b2db      	uxtb	r3, r3
 800cb28:	4a17      	ldr	r2, [pc, #92]	; (800cb88 <FATFS_LinkDriverEx+0x94>)
 800cb2a:	009b      	lsls	r3, r3, #2
 800cb2c:	4413      	add	r3, r2
 800cb2e:	68fa      	ldr	r2, [r7, #12]
 800cb30:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cb32:	4b15      	ldr	r3, [pc, #84]	; (800cb88 <FATFS_LinkDriverEx+0x94>)
 800cb34:	7a5b      	ldrb	r3, [r3, #9]
 800cb36:	b2db      	uxtb	r3, r3
 800cb38:	461a      	mov	r2, r3
 800cb3a:	4b13      	ldr	r3, [pc, #76]	; (800cb88 <FATFS_LinkDriverEx+0x94>)
 800cb3c:	4413      	add	r3, r2
 800cb3e:	79fa      	ldrb	r2, [r7, #7]
 800cb40:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cb42:	4b11      	ldr	r3, [pc, #68]	; (800cb88 <FATFS_LinkDriverEx+0x94>)
 800cb44:	7a5b      	ldrb	r3, [r3, #9]
 800cb46:	b2db      	uxtb	r3, r3
 800cb48:	1c5a      	adds	r2, r3, #1
 800cb4a:	b2d1      	uxtb	r1, r2
 800cb4c:	4a0e      	ldr	r2, [pc, #56]	; (800cb88 <FATFS_LinkDriverEx+0x94>)
 800cb4e:	7251      	strb	r1, [r2, #9]
 800cb50:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cb52:	7dbb      	ldrb	r3, [r7, #22]
 800cb54:	3330      	adds	r3, #48	; 0x30
 800cb56:	b2da      	uxtb	r2, r3
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	3301      	adds	r3, #1
 800cb60:	223a      	movs	r2, #58	; 0x3a
 800cb62:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cb64:	68bb      	ldr	r3, [r7, #8]
 800cb66:	3302      	adds	r3, #2
 800cb68:	222f      	movs	r2, #47	; 0x2f
 800cb6a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	3303      	adds	r3, #3
 800cb70:	2200      	movs	r2, #0
 800cb72:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cb74:	2300      	movs	r3, #0
 800cb76:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cb78:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	371c      	adds	r7, #28
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb84:	4770      	bx	lr
 800cb86:	bf00      	nop
 800cb88:	200027c8 	.word	0x200027c8

0800cb8c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b082      	sub	sp, #8
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
 800cb94:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cb96:	2200      	movs	r2, #0
 800cb98:	6839      	ldr	r1, [r7, #0]
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f7ff ffaa 	bl	800caf4 <FATFS_LinkDriverEx>
 800cba0:	4603      	mov	r3, r0
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3708      	adds	r7, #8
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}

0800cbaa <atoi>:
 800cbaa:	220a      	movs	r2, #10
 800cbac:	2100      	movs	r1, #0
 800cbae:	f001 bfb3 	b.w	800eb18 <strtol>
	...

0800cbb4 <__errno>:
 800cbb4:	4b01      	ldr	r3, [pc, #4]	; (800cbbc <__errno+0x8>)
 800cbb6:	6818      	ldr	r0, [r3, #0]
 800cbb8:	4770      	bx	lr
 800cbba:	bf00      	nop
 800cbbc:	20000178 	.word	0x20000178

0800cbc0 <__libc_init_array>:
 800cbc0:	b570      	push	{r4, r5, r6, lr}
 800cbc2:	4d0d      	ldr	r5, [pc, #52]	; (800cbf8 <__libc_init_array+0x38>)
 800cbc4:	4c0d      	ldr	r4, [pc, #52]	; (800cbfc <__libc_init_array+0x3c>)
 800cbc6:	1b64      	subs	r4, r4, r5
 800cbc8:	10a4      	asrs	r4, r4, #2
 800cbca:	2600      	movs	r6, #0
 800cbcc:	42a6      	cmp	r6, r4
 800cbce:	d109      	bne.n	800cbe4 <__libc_init_array+0x24>
 800cbd0:	4d0b      	ldr	r5, [pc, #44]	; (800cc00 <__libc_init_array+0x40>)
 800cbd2:	4c0c      	ldr	r4, [pc, #48]	; (800cc04 <__libc_init_array+0x44>)
 800cbd4:	f004 fdaa 	bl	801172c <_init>
 800cbd8:	1b64      	subs	r4, r4, r5
 800cbda:	10a4      	asrs	r4, r4, #2
 800cbdc:	2600      	movs	r6, #0
 800cbde:	42a6      	cmp	r6, r4
 800cbe0:	d105      	bne.n	800cbee <__libc_init_array+0x2e>
 800cbe2:	bd70      	pop	{r4, r5, r6, pc}
 800cbe4:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbe8:	4798      	blx	r3
 800cbea:	3601      	adds	r6, #1
 800cbec:	e7ee      	b.n	800cbcc <__libc_init_array+0xc>
 800cbee:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbf2:	4798      	blx	r3
 800cbf4:	3601      	adds	r6, #1
 800cbf6:	e7f2      	b.n	800cbde <__libc_init_array+0x1e>
 800cbf8:	08013a94 	.word	0x08013a94
 800cbfc:	08013a94 	.word	0x08013a94
 800cc00:	08013a94 	.word	0x08013a94
 800cc04:	08013a98 	.word	0x08013a98

0800cc08 <malloc>:
 800cc08:	4b02      	ldr	r3, [pc, #8]	; (800cc14 <malloc+0xc>)
 800cc0a:	4601      	mov	r1, r0
 800cc0c:	6818      	ldr	r0, [r3, #0]
 800cc0e:	f000 b88d 	b.w	800cd2c <_malloc_r>
 800cc12:	bf00      	nop
 800cc14:	20000178 	.word	0x20000178

0800cc18 <free>:
 800cc18:	4b02      	ldr	r3, [pc, #8]	; (800cc24 <free+0xc>)
 800cc1a:	4601      	mov	r1, r0
 800cc1c:	6818      	ldr	r0, [r3, #0]
 800cc1e:	f000 b819 	b.w	800cc54 <_free_r>
 800cc22:	bf00      	nop
 800cc24:	20000178 	.word	0x20000178

0800cc28 <memcpy>:
 800cc28:	440a      	add	r2, r1
 800cc2a:	4291      	cmp	r1, r2
 800cc2c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cc30:	d100      	bne.n	800cc34 <memcpy+0xc>
 800cc32:	4770      	bx	lr
 800cc34:	b510      	push	{r4, lr}
 800cc36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc3e:	4291      	cmp	r1, r2
 800cc40:	d1f9      	bne.n	800cc36 <memcpy+0xe>
 800cc42:	bd10      	pop	{r4, pc}

0800cc44 <memset>:
 800cc44:	4402      	add	r2, r0
 800cc46:	4603      	mov	r3, r0
 800cc48:	4293      	cmp	r3, r2
 800cc4a:	d100      	bne.n	800cc4e <memset+0xa>
 800cc4c:	4770      	bx	lr
 800cc4e:	f803 1b01 	strb.w	r1, [r3], #1
 800cc52:	e7f9      	b.n	800cc48 <memset+0x4>

0800cc54 <_free_r>:
 800cc54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc56:	2900      	cmp	r1, #0
 800cc58:	d044      	beq.n	800cce4 <_free_r+0x90>
 800cc5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc5e:	9001      	str	r0, [sp, #4]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	f1a1 0404 	sub.w	r4, r1, #4
 800cc66:	bfb8      	it	lt
 800cc68:	18e4      	addlt	r4, r4, r3
 800cc6a:	f003 fcaf 	bl	80105cc <__malloc_lock>
 800cc6e:	4a1e      	ldr	r2, [pc, #120]	; (800cce8 <_free_r+0x94>)
 800cc70:	9801      	ldr	r0, [sp, #4]
 800cc72:	6813      	ldr	r3, [r2, #0]
 800cc74:	b933      	cbnz	r3, 800cc84 <_free_r+0x30>
 800cc76:	6063      	str	r3, [r4, #4]
 800cc78:	6014      	str	r4, [r2, #0]
 800cc7a:	b003      	add	sp, #12
 800cc7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc80:	f003 bcaa 	b.w	80105d8 <__malloc_unlock>
 800cc84:	42a3      	cmp	r3, r4
 800cc86:	d908      	bls.n	800cc9a <_free_r+0x46>
 800cc88:	6825      	ldr	r5, [r4, #0]
 800cc8a:	1961      	adds	r1, r4, r5
 800cc8c:	428b      	cmp	r3, r1
 800cc8e:	bf01      	itttt	eq
 800cc90:	6819      	ldreq	r1, [r3, #0]
 800cc92:	685b      	ldreq	r3, [r3, #4]
 800cc94:	1949      	addeq	r1, r1, r5
 800cc96:	6021      	streq	r1, [r4, #0]
 800cc98:	e7ed      	b.n	800cc76 <_free_r+0x22>
 800cc9a:	461a      	mov	r2, r3
 800cc9c:	685b      	ldr	r3, [r3, #4]
 800cc9e:	b10b      	cbz	r3, 800cca4 <_free_r+0x50>
 800cca0:	42a3      	cmp	r3, r4
 800cca2:	d9fa      	bls.n	800cc9a <_free_r+0x46>
 800cca4:	6811      	ldr	r1, [r2, #0]
 800cca6:	1855      	adds	r5, r2, r1
 800cca8:	42a5      	cmp	r5, r4
 800ccaa:	d10b      	bne.n	800ccc4 <_free_r+0x70>
 800ccac:	6824      	ldr	r4, [r4, #0]
 800ccae:	4421      	add	r1, r4
 800ccb0:	1854      	adds	r4, r2, r1
 800ccb2:	42a3      	cmp	r3, r4
 800ccb4:	6011      	str	r1, [r2, #0]
 800ccb6:	d1e0      	bne.n	800cc7a <_free_r+0x26>
 800ccb8:	681c      	ldr	r4, [r3, #0]
 800ccba:	685b      	ldr	r3, [r3, #4]
 800ccbc:	6053      	str	r3, [r2, #4]
 800ccbe:	4421      	add	r1, r4
 800ccc0:	6011      	str	r1, [r2, #0]
 800ccc2:	e7da      	b.n	800cc7a <_free_r+0x26>
 800ccc4:	d902      	bls.n	800cccc <_free_r+0x78>
 800ccc6:	230c      	movs	r3, #12
 800ccc8:	6003      	str	r3, [r0, #0]
 800ccca:	e7d6      	b.n	800cc7a <_free_r+0x26>
 800cccc:	6825      	ldr	r5, [r4, #0]
 800ccce:	1961      	adds	r1, r4, r5
 800ccd0:	428b      	cmp	r3, r1
 800ccd2:	bf04      	itt	eq
 800ccd4:	6819      	ldreq	r1, [r3, #0]
 800ccd6:	685b      	ldreq	r3, [r3, #4]
 800ccd8:	6063      	str	r3, [r4, #4]
 800ccda:	bf04      	itt	eq
 800ccdc:	1949      	addeq	r1, r1, r5
 800ccde:	6021      	streq	r1, [r4, #0]
 800cce0:	6054      	str	r4, [r2, #4]
 800cce2:	e7ca      	b.n	800cc7a <_free_r+0x26>
 800cce4:	b003      	add	sp, #12
 800cce6:	bd30      	pop	{r4, r5, pc}
 800cce8:	200027d4 	.word	0x200027d4

0800ccec <sbrk_aligned>:
 800ccec:	b570      	push	{r4, r5, r6, lr}
 800ccee:	4e0e      	ldr	r6, [pc, #56]	; (800cd28 <sbrk_aligned+0x3c>)
 800ccf0:	460c      	mov	r4, r1
 800ccf2:	6831      	ldr	r1, [r6, #0]
 800ccf4:	4605      	mov	r5, r0
 800ccf6:	b911      	cbnz	r1, 800ccfe <sbrk_aligned+0x12>
 800ccf8:	f000 ff7c 	bl	800dbf4 <_sbrk_r>
 800ccfc:	6030      	str	r0, [r6, #0]
 800ccfe:	4621      	mov	r1, r4
 800cd00:	4628      	mov	r0, r5
 800cd02:	f000 ff77 	bl	800dbf4 <_sbrk_r>
 800cd06:	1c43      	adds	r3, r0, #1
 800cd08:	d00a      	beq.n	800cd20 <sbrk_aligned+0x34>
 800cd0a:	1cc4      	adds	r4, r0, #3
 800cd0c:	f024 0403 	bic.w	r4, r4, #3
 800cd10:	42a0      	cmp	r0, r4
 800cd12:	d007      	beq.n	800cd24 <sbrk_aligned+0x38>
 800cd14:	1a21      	subs	r1, r4, r0
 800cd16:	4628      	mov	r0, r5
 800cd18:	f000 ff6c 	bl	800dbf4 <_sbrk_r>
 800cd1c:	3001      	adds	r0, #1
 800cd1e:	d101      	bne.n	800cd24 <sbrk_aligned+0x38>
 800cd20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cd24:	4620      	mov	r0, r4
 800cd26:	bd70      	pop	{r4, r5, r6, pc}
 800cd28:	200027d8 	.word	0x200027d8

0800cd2c <_malloc_r>:
 800cd2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd30:	1ccd      	adds	r5, r1, #3
 800cd32:	f025 0503 	bic.w	r5, r5, #3
 800cd36:	3508      	adds	r5, #8
 800cd38:	2d0c      	cmp	r5, #12
 800cd3a:	bf38      	it	cc
 800cd3c:	250c      	movcc	r5, #12
 800cd3e:	2d00      	cmp	r5, #0
 800cd40:	4607      	mov	r7, r0
 800cd42:	db01      	blt.n	800cd48 <_malloc_r+0x1c>
 800cd44:	42a9      	cmp	r1, r5
 800cd46:	d905      	bls.n	800cd54 <_malloc_r+0x28>
 800cd48:	230c      	movs	r3, #12
 800cd4a:	603b      	str	r3, [r7, #0]
 800cd4c:	2600      	movs	r6, #0
 800cd4e:	4630      	mov	r0, r6
 800cd50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd54:	4e2e      	ldr	r6, [pc, #184]	; (800ce10 <_malloc_r+0xe4>)
 800cd56:	f003 fc39 	bl	80105cc <__malloc_lock>
 800cd5a:	6833      	ldr	r3, [r6, #0]
 800cd5c:	461c      	mov	r4, r3
 800cd5e:	bb34      	cbnz	r4, 800cdae <_malloc_r+0x82>
 800cd60:	4629      	mov	r1, r5
 800cd62:	4638      	mov	r0, r7
 800cd64:	f7ff ffc2 	bl	800ccec <sbrk_aligned>
 800cd68:	1c43      	adds	r3, r0, #1
 800cd6a:	4604      	mov	r4, r0
 800cd6c:	d14d      	bne.n	800ce0a <_malloc_r+0xde>
 800cd6e:	6834      	ldr	r4, [r6, #0]
 800cd70:	4626      	mov	r6, r4
 800cd72:	2e00      	cmp	r6, #0
 800cd74:	d140      	bne.n	800cdf8 <_malloc_r+0xcc>
 800cd76:	6823      	ldr	r3, [r4, #0]
 800cd78:	4631      	mov	r1, r6
 800cd7a:	4638      	mov	r0, r7
 800cd7c:	eb04 0803 	add.w	r8, r4, r3
 800cd80:	f000 ff38 	bl	800dbf4 <_sbrk_r>
 800cd84:	4580      	cmp	r8, r0
 800cd86:	d13a      	bne.n	800cdfe <_malloc_r+0xd2>
 800cd88:	6821      	ldr	r1, [r4, #0]
 800cd8a:	3503      	adds	r5, #3
 800cd8c:	1a6d      	subs	r5, r5, r1
 800cd8e:	f025 0503 	bic.w	r5, r5, #3
 800cd92:	3508      	adds	r5, #8
 800cd94:	2d0c      	cmp	r5, #12
 800cd96:	bf38      	it	cc
 800cd98:	250c      	movcc	r5, #12
 800cd9a:	4629      	mov	r1, r5
 800cd9c:	4638      	mov	r0, r7
 800cd9e:	f7ff ffa5 	bl	800ccec <sbrk_aligned>
 800cda2:	3001      	adds	r0, #1
 800cda4:	d02b      	beq.n	800cdfe <_malloc_r+0xd2>
 800cda6:	6823      	ldr	r3, [r4, #0]
 800cda8:	442b      	add	r3, r5
 800cdaa:	6023      	str	r3, [r4, #0]
 800cdac:	e00e      	b.n	800cdcc <_malloc_r+0xa0>
 800cdae:	6822      	ldr	r2, [r4, #0]
 800cdb0:	1b52      	subs	r2, r2, r5
 800cdb2:	d41e      	bmi.n	800cdf2 <_malloc_r+0xc6>
 800cdb4:	2a0b      	cmp	r2, #11
 800cdb6:	d916      	bls.n	800cde6 <_malloc_r+0xba>
 800cdb8:	1961      	adds	r1, r4, r5
 800cdba:	42a3      	cmp	r3, r4
 800cdbc:	6025      	str	r5, [r4, #0]
 800cdbe:	bf18      	it	ne
 800cdc0:	6059      	strne	r1, [r3, #4]
 800cdc2:	6863      	ldr	r3, [r4, #4]
 800cdc4:	bf08      	it	eq
 800cdc6:	6031      	streq	r1, [r6, #0]
 800cdc8:	5162      	str	r2, [r4, r5]
 800cdca:	604b      	str	r3, [r1, #4]
 800cdcc:	4638      	mov	r0, r7
 800cdce:	f104 060b 	add.w	r6, r4, #11
 800cdd2:	f003 fc01 	bl	80105d8 <__malloc_unlock>
 800cdd6:	f026 0607 	bic.w	r6, r6, #7
 800cdda:	1d23      	adds	r3, r4, #4
 800cddc:	1af2      	subs	r2, r6, r3
 800cdde:	d0b6      	beq.n	800cd4e <_malloc_r+0x22>
 800cde0:	1b9b      	subs	r3, r3, r6
 800cde2:	50a3      	str	r3, [r4, r2]
 800cde4:	e7b3      	b.n	800cd4e <_malloc_r+0x22>
 800cde6:	6862      	ldr	r2, [r4, #4]
 800cde8:	42a3      	cmp	r3, r4
 800cdea:	bf0c      	ite	eq
 800cdec:	6032      	streq	r2, [r6, #0]
 800cdee:	605a      	strne	r2, [r3, #4]
 800cdf0:	e7ec      	b.n	800cdcc <_malloc_r+0xa0>
 800cdf2:	4623      	mov	r3, r4
 800cdf4:	6864      	ldr	r4, [r4, #4]
 800cdf6:	e7b2      	b.n	800cd5e <_malloc_r+0x32>
 800cdf8:	4634      	mov	r4, r6
 800cdfa:	6876      	ldr	r6, [r6, #4]
 800cdfc:	e7b9      	b.n	800cd72 <_malloc_r+0x46>
 800cdfe:	230c      	movs	r3, #12
 800ce00:	603b      	str	r3, [r7, #0]
 800ce02:	4638      	mov	r0, r7
 800ce04:	f003 fbe8 	bl	80105d8 <__malloc_unlock>
 800ce08:	e7a1      	b.n	800cd4e <_malloc_r+0x22>
 800ce0a:	6025      	str	r5, [r4, #0]
 800ce0c:	e7de      	b.n	800cdcc <_malloc_r+0xa0>
 800ce0e:	bf00      	nop
 800ce10:	200027d4 	.word	0x200027d4

0800ce14 <__cvt>:
 800ce14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce18:	ec55 4b10 	vmov	r4, r5, d0
 800ce1c:	2d00      	cmp	r5, #0
 800ce1e:	460e      	mov	r6, r1
 800ce20:	4619      	mov	r1, r3
 800ce22:	462b      	mov	r3, r5
 800ce24:	bfbb      	ittet	lt
 800ce26:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ce2a:	461d      	movlt	r5, r3
 800ce2c:	2300      	movge	r3, #0
 800ce2e:	232d      	movlt	r3, #45	; 0x2d
 800ce30:	700b      	strb	r3, [r1, #0]
 800ce32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce34:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ce38:	4691      	mov	r9, r2
 800ce3a:	f023 0820 	bic.w	r8, r3, #32
 800ce3e:	bfbc      	itt	lt
 800ce40:	4622      	movlt	r2, r4
 800ce42:	4614      	movlt	r4, r2
 800ce44:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ce48:	d005      	beq.n	800ce56 <__cvt+0x42>
 800ce4a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ce4e:	d100      	bne.n	800ce52 <__cvt+0x3e>
 800ce50:	3601      	adds	r6, #1
 800ce52:	2102      	movs	r1, #2
 800ce54:	e000      	b.n	800ce58 <__cvt+0x44>
 800ce56:	2103      	movs	r1, #3
 800ce58:	ab03      	add	r3, sp, #12
 800ce5a:	9301      	str	r3, [sp, #4]
 800ce5c:	ab02      	add	r3, sp, #8
 800ce5e:	9300      	str	r3, [sp, #0]
 800ce60:	ec45 4b10 	vmov	d0, r4, r5
 800ce64:	4653      	mov	r3, sl
 800ce66:	4632      	mov	r2, r6
 800ce68:	f002 f80a 	bl	800ee80 <_dtoa_r>
 800ce6c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ce70:	4607      	mov	r7, r0
 800ce72:	d102      	bne.n	800ce7a <__cvt+0x66>
 800ce74:	f019 0f01 	tst.w	r9, #1
 800ce78:	d022      	beq.n	800cec0 <__cvt+0xac>
 800ce7a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ce7e:	eb07 0906 	add.w	r9, r7, r6
 800ce82:	d110      	bne.n	800cea6 <__cvt+0x92>
 800ce84:	783b      	ldrb	r3, [r7, #0]
 800ce86:	2b30      	cmp	r3, #48	; 0x30
 800ce88:	d10a      	bne.n	800cea0 <__cvt+0x8c>
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	4620      	mov	r0, r4
 800ce90:	4629      	mov	r1, r5
 800ce92:	f7f3 fe29 	bl	8000ae8 <__aeabi_dcmpeq>
 800ce96:	b918      	cbnz	r0, 800cea0 <__cvt+0x8c>
 800ce98:	f1c6 0601 	rsb	r6, r6, #1
 800ce9c:	f8ca 6000 	str.w	r6, [sl]
 800cea0:	f8da 3000 	ldr.w	r3, [sl]
 800cea4:	4499      	add	r9, r3
 800cea6:	2200      	movs	r2, #0
 800cea8:	2300      	movs	r3, #0
 800ceaa:	4620      	mov	r0, r4
 800ceac:	4629      	mov	r1, r5
 800ceae:	f7f3 fe1b 	bl	8000ae8 <__aeabi_dcmpeq>
 800ceb2:	b108      	cbz	r0, 800ceb8 <__cvt+0xa4>
 800ceb4:	f8cd 900c 	str.w	r9, [sp, #12]
 800ceb8:	2230      	movs	r2, #48	; 0x30
 800ceba:	9b03      	ldr	r3, [sp, #12]
 800cebc:	454b      	cmp	r3, r9
 800cebe:	d307      	bcc.n	800ced0 <__cvt+0xbc>
 800cec0:	9b03      	ldr	r3, [sp, #12]
 800cec2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cec4:	1bdb      	subs	r3, r3, r7
 800cec6:	4638      	mov	r0, r7
 800cec8:	6013      	str	r3, [r2, #0]
 800ceca:	b004      	add	sp, #16
 800cecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ced0:	1c59      	adds	r1, r3, #1
 800ced2:	9103      	str	r1, [sp, #12]
 800ced4:	701a      	strb	r2, [r3, #0]
 800ced6:	e7f0      	b.n	800ceba <__cvt+0xa6>

0800ced8 <__exponent>:
 800ced8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ceda:	4603      	mov	r3, r0
 800cedc:	2900      	cmp	r1, #0
 800cede:	bfb8      	it	lt
 800cee0:	4249      	neglt	r1, r1
 800cee2:	f803 2b02 	strb.w	r2, [r3], #2
 800cee6:	bfb4      	ite	lt
 800cee8:	222d      	movlt	r2, #45	; 0x2d
 800ceea:	222b      	movge	r2, #43	; 0x2b
 800ceec:	2909      	cmp	r1, #9
 800ceee:	7042      	strb	r2, [r0, #1]
 800cef0:	dd2a      	ble.n	800cf48 <__exponent+0x70>
 800cef2:	f10d 0407 	add.w	r4, sp, #7
 800cef6:	46a4      	mov	ip, r4
 800cef8:	270a      	movs	r7, #10
 800cefa:	46a6      	mov	lr, r4
 800cefc:	460a      	mov	r2, r1
 800cefe:	fb91 f6f7 	sdiv	r6, r1, r7
 800cf02:	fb07 1516 	mls	r5, r7, r6, r1
 800cf06:	3530      	adds	r5, #48	; 0x30
 800cf08:	2a63      	cmp	r2, #99	; 0x63
 800cf0a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800cf0e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cf12:	4631      	mov	r1, r6
 800cf14:	dcf1      	bgt.n	800cefa <__exponent+0x22>
 800cf16:	3130      	adds	r1, #48	; 0x30
 800cf18:	f1ae 0502 	sub.w	r5, lr, #2
 800cf1c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cf20:	1c44      	adds	r4, r0, #1
 800cf22:	4629      	mov	r1, r5
 800cf24:	4561      	cmp	r1, ip
 800cf26:	d30a      	bcc.n	800cf3e <__exponent+0x66>
 800cf28:	f10d 0209 	add.w	r2, sp, #9
 800cf2c:	eba2 020e 	sub.w	r2, r2, lr
 800cf30:	4565      	cmp	r5, ip
 800cf32:	bf88      	it	hi
 800cf34:	2200      	movhi	r2, #0
 800cf36:	4413      	add	r3, r2
 800cf38:	1a18      	subs	r0, r3, r0
 800cf3a:	b003      	add	sp, #12
 800cf3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf42:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cf46:	e7ed      	b.n	800cf24 <__exponent+0x4c>
 800cf48:	2330      	movs	r3, #48	; 0x30
 800cf4a:	3130      	adds	r1, #48	; 0x30
 800cf4c:	7083      	strb	r3, [r0, #2]
 800cf4e:	70c1      	strb	r1, [r0, #3]
 800cf50:	1d03      	adds	r3, r0, #4
 800cf52:	e7f1      	b.n	800cf38 <__exponent+0x60>

0800cf54 <_printf_float>:
 800cf54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf58:	ed2d 8b02 	vpush	{d8}
 800cf5c:	b08d      	sub	sp, #52	; 0x34
 800cf5e:	460c      	mov	r4, r1
 800cf60:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cf64:	4616      	mov	r6, r2
 800cf66:	461f      	mov	r7, r3
 800cf68:	4605      	mov	r5, r0
 800cf6a:	f003 fa9d 	bl	80104a8 <_localeconv_r>
 800cf6e:	f8d0 a000 	ldr.w	sl, [r0]
 800cf72:	4650      	mov	r0, sl
 800cf74:	f7f3 f93c 	bl	80001f0 <strlen>
 800cf78:	2300      	movs	r3, #0
 800cf7a:	930a      	str	r3, [sp, #40]	; 0x28
 800cf7c:	6823      	ldr	r3, [r4, #0]
 800cf7e:	9305      	str	r3, [sp, #20]
 800cf80:	f8d8 3000 	ldr.w	r3, [r8]
 800cf84:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cf88:	3307      	adds	r3, #7
 800cf8a:	f023 0307 	bic.w	r3, r3, #7
 800cf8e:	f103 0208 	add.w	r2, r3, #8
 800cf92:	f8c8 2000 	str.w	r2, [r8]
 800cf96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf9a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cf9e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800cfa2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cfa6:	9307      	str	r3, [sp, #28]
 800cfa8:	f8cd 8018 	str.w	r8, [sp, #24]
 800cfac:	ee08 0a10 	vmov	s16, r0
 800cfb0:	4b9f      	ldr	r3, [pc, #636]	; (800d230 <_printf_float+0x2dc>)
 800cfb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cfb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cfba:	f7f3 fdc7 	bl	8000b4c <__aeabi_dcmpun>
 800cfbe:	bb88      	cbnz	r0, 800d024 <_printf_float+0xd0>
 800cfc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cfc4:	4b9a      	ldr	r3, [pc, #616]	; (800d230 <_printf_float+0x2dc>)
 800cfc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cfca:	f7f3 fda1 	bl	8000b10 <__aeabi_dcmple>
 800cfce:	bb48      	cbnz	r0, 800d024 <_printf_float+0xd0>
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	4640      	mov	r0, r8
 800cfd6:	4649      	mov	r1, r9
 800cfd8:	f7f3 fd90 	bl	8000afc <__aeabi_dcmplt>
 800cfdc:	b110      	cbz	r0, 800cfe4 <_printf_float+0x90>
 800cfde:	232d      	movs	r3, #45	; 0x2d
 800cfe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cfe4:	4b93      	ldr	r3, [pc, #588]	; (800d234 <_printf_float+0x2e0>)
 800cfe6:	4894      	ldr	r0, [pc, #592]	; (800d238 <_printf_float+0x2e4>)
 800cfe8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cfec:	bf94      	ite	ls
 800cfee:	4698      	movls	r8, r3
 800cff0:	4680      	movhi	r8, r0
 800cff2:	2303      	movs	r3, #3
 800cff4:	6123      	str	r3, [r4, #16]
 800cff6:	9b05      	ldr	r3, [sp, #20]
 800cff8:	f023 0204 	bic.w	r2, r3, #4
 800cffc:	6022      	str	r2, [r4, #0]
 800cffe:	f04f 0900 	mov.w	r9, #0
 800d002:	9700      	str	r7, [sp, #0]
 800d004:	4633      	mov	r3, r6
 800d006:	aa0b      	add	r2, sp, #44	; 0x2c
 800d008:	4621      	mov	r1, r4
 800d00a:	4628      	mov	r0, r5
 800d00c:	f000 f9d8 	bl	800d3c0 <_printf_common>
 800d010:	3001      	adds	r0, #1
 800d012:	f040 8090 	bne.w	800d136 <_printf_float+0x1e2>
 800d016:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d01a:	b00d      	add	sp, #52	; 0x34
 800d01c:	ecbd 8b02 	vpop	{d8}
 800d020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d024:	4642      	mov	r2, r8
 800d026:	464b      	mov	r3, r9
 800d028:	4640      	mov	r0, r8
 800d02a:	4649      	mov	r1, r9
 800d02c:	f7f3 fd8e 	bl	8000b4c <__aeabi_dcmpun>
 800d030:	b140      	cbz	r0, 800d044 <_printf_float+0xf0>
 800d032:	464b      	mov	r3, r9
 800d034:	2b00      	cmp	r3, #0
 800d036:	bfbc      	itt	lt
 800d038:	232d      	movlt	r3, #45	; 0x2d
 800d03a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d03e:	487f      	ldr	r0, [pc, #508]	; (800d23c <_printf_float+0x2e8>)
 800d040:	4b7f      	ldr	r3, [pc, #508]	; (800d240 <_printf_float+0x2ec>)
 800d042:	e7d1      	b.n	800cfe8 <_printf_float+0x94>
 800d044:	6863      	ldr	r3, [r4, #4]
 800d046:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d04a:	9206      	str	r2, [sp, #24]
 800d04c:	1c5a      	adds	r2, r3, #1
 800d04e:	d13f      	bne.n	800d0d0 <_printf_float+0x17c>
 800d050:	2306      	movs	r3, #6
 800d052:	6063      	str	r3, [r4, #4]
 800d054:	9b05      	ldr	r3, [sp, #20]
 800d056:	6861      	ldr	r1, [r4, #4]
 800d058:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d05c:	2300      	movs	r3, #0
 800d05e:	9303      	str	r3, [sp, #12]
 800d060:	ab0a      	add	r3, sp, #40	; 0x28
 800d062:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d066:	ab09      	add	r3, sp, #36	; 0x24
 800d068:	ec49 8b10 	vmov	d0, r8, r9
 800d06c:	9300      	str	r3, [sp, #0]
 800d06e:	6022      	str	r2, [r4, #0]
 800d070:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d074:	4628      	mov	r0, r5
 800d076:	f7ff fecd 	bl	800ce14 <__cvt>
 800d07a:	9b06      	ldr	r3, [sp, #24]
 800d07c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d07e:	2b47      	cmp	r3, #71	; 0x47
 800d080:	4680      	mov	r8, r0
 800d082:	d108      	bne.n	800d096 <_printf_float+0x142>
 800d084:	1cc8      	adds	r0, r1, #3
 800d086:	db02      	blt.n	800d08e <_printf_float+0x13a>
 800d088:	6863      	ldr	r3, [r4, #4]
 800d08a:	4299      	cmp	r1, r3
 800d08c:	dd41      	ble.n	800d112 <_printf_float+0x1be>
 800d08e:	f1ab 0b02 	sub.w	fp, fp, #2
 800d092:	fa5f fb8b 	uxtb.w	fp, fp
 800d096:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d09a:	d820      	bhi.n	800d0de <_printf_float+0x18a>
 800d09c:	3901      	subs	r1, #1
 800d09e:	465a      	mov	r2, fp
 800d0a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d0a4:	9109      	str	r1, [sp, #36]	; 0x24
 800d0a6:	f7ff ff17 	bl	800ced8 <__exponent>
 800d0aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d0ac:	1813      	adds	r3, r2, r0
 800d0ae:	2a01      	cmp	r2, #1
 800d0b0:	4681      	mov	r9, r0
 800d0b2:	6123      	str	r3, [r4, #16]
 800d0b4:	dc02      	bgt.n	800d0bc <_printf_float+0x168>
 800d0b6:	6822      	ldr	r2, [r4, #0]
 800d0b8:	07d2      	lsls	r2, r2, #31
 800d0ba:	d501      	bpl.n	800d0c0 <_printf_float+0x16c>
 800d0bc:	3301      	adds	r3, #1
 800d0be:	6123      	str	r3, [r4, #16]
 800d0c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d09c      	beq.n	800d002 <_printf_float+0xae>
 800d0c8:	232d      	movs	r3, #45	; 0x2d
 800d0ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d0ce:	e798      	b.n	800d002 <_printf_float+0xae>
 800d0d0:	9a06      	ldr	r2, [sp, #24]
 800d0d2:	2a47      	cmp	r2, #71	; 0x47
 800d0d4:	d1be      	bne.n	800d054 <_printf_float+0x100>
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d1bc      	bne.n	800d054 <_printf_float+0x100>
 800d0da:	2301      	movs	r3, #1
 800d0dc:	e7b9      	b.n	800d052 <_printf_float+0xfe>
 800d0de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d0e2:	d118      	bne.n	800d116 <_printf_float+0x1c2>
 800d0e4:	2900      	cmp	r1, #0
 800d0e6:	6863      	ldr	r3, [r4, #4]
 800d0e8:	dd0b      	ble.n	800d102 <_printf_float+0x1ae>
 800d0ea:	6121      	str	r1, [r4, #16]
 800d0ec:	b913      	cbnz	r3, 800d0f4 <_printf_float+0x1a0>
 800d0ee:	6822      	ldr	r2, [r4, #0]
 800d0f0:	07d0      	lsls	r0, r2, #31
 800d0f2:	d502      	bpl.n	800d0fa <_printf_float+0x1a6>
 800d0f4:	3301      	adds	r3, #1
 800d0f6:	440b      	add	r3, r1
 800d0f8:	6123      	str	r3, [r4, #16]
 800d0fa:	65a1      	str	r1, [r4, #88]	; 0x58
 800d0fc:	f04f 0900 	mov.w	r9, #0
 800d100:	e7de      	b.n	800d0c0 <_printf_float+0x16c>
 800d102:	b913      	cbnz	r3, 800d10a <_printf_float+0x1b6>
 800d104:	6822      	ldr	r2, [r4, #0]
 800d106:	07d2      	lsls	r2, r2, #31
 800d108:	d501      	bpl.n	800d10e <_printf_float+0x1ba>
 800d10a:	3302      	adds	r3, #2
 800d10c:	e7f4      	b.n	800d0f8 <_printf_float+0x1a4>
 800d10e:	2301      	movs	r3, #1
 800d110:	e7f2      	b.n	800d0f8 <_printf_float+0x1a4>
 800d112:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d118:	4299      	cmp	r1, r3
 800d11a:	db05      	blt.n	800d128 <_printf_float+0x1d4>
 800d11c:	6823      	ldr	r3, [r4, #0]
 800d11e:	6121      	str	r1, [r4, #16]
 800d120:	07d8      	lsls	r0, r3, #31
 800d122:	d5ea      	bpl.n	800d0fa <_printf_float+0x1a6>
 800d124:	1c4b      	adds	r3, r1, #1
 800d126:	e7e7      	b.n	800d0f8 <_printf_float+0x1a4>
 800d128:	2900      	cmp	r1, #0
 800d12a:	bfd4      	ite	le
 800d12c:	f1c1 0202 	rsble	r2, r1, #2
 800d130:	2201      	movgt	r2, #1
 800d132:	4413      	add	r3, r2
 800d134:	e7e0      	b.n	800d0f8 <_printf_float+0x1a4>
 800d136:	6823      	ldr	r3, [r4, #0]
 800d138:	055a      	lsls	r2, r3, #21
 800d13a:	d407      	bmi.n	800d14c <_printf_float+0x1f8>
 800d13c:	6923      	ldr	r3, [r4, #16]
 800d13e:	4642      	mov	r2, r8
 800d140:	4631      	mov	r1, r6
 800d142:	4628      	mov	r0, r5
 800d144:	47b8      	blx	r7
 800d146:	3001      	adds	r0, #1
 800d148:	d12c      	bne.n	800d1a4 <_printf_float+0x250>
 800d14a:	e764      	b.n	800d016 <_printf_float+0xc2>
 800d14c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d150:	f240 80e0 	bls.w	800d314 <_printf_float+0x3c0>
 800d154:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d158:	2200      	movs	r2, #0
 800d15a:	2300      	movs	r3, #0
 800d15c:	f7f3 fcc4 	bl	8000ae8 <__aeabi_dcmpeq>
 800d160:	2800      	cmp	r0, #0
 800d162:	d034      	beq.n	800d1ce <_printf_float+0x27a>
 800d164:	4a37      	ldr	r2, [pc, #220]	; (800d244 <_printf_float+0x2f0>)
 800d166:	2301      	movs	r3, #1
 800d168:	4631      	mov	r1, r6
 800d16a:	4628      	mov	r0, r5
 800d16c:	47b8      	blx	r7
 800d16e:	3001      	adds	r0, #1
 800d170:	f43f af51 	beq.w	800d016 <_printf_float+0xc2>
 800d174:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d178:	429a      	cmp	r2, r3
 800d17a:	db02      	blt.n	800d182 <_printf_float+0x22e>
 800d17c:	6823      	ldr	r3, [r4, #0]
 800d17e:	07d8      	lsls	r0, r3, #31
 800d180:	d510      	bpl.n	800d1a4 <_printf_float+0x250>
 800d182:	ee18 3a10 	vmov	r3, s16
 800d186:	4652      	mov	r2, sl
 800d188:	4631      	mov	r1, r6
 800d18a:	4628      	mov	r0, r5
 800d18c:	47b8      	blx	r7
 800d18e:	3001      	adds	r0, #1
 800d190:	f43f af41 	beq.w	800d016 <_printf_float+0xc2>
 800d194:	f04f 0800 	mov.w	r8, #0
 800d198:	f104 091a 	add.w	r9, r4, #26
 800d19c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d19e:	3b01      	subs	r3, #1
 800d1a0:	4543      	cmp	r3, r8
 800d1a2:	dc09      	bgt.n	800d1b8 <_printf_float+0x264>
 800d1a4:	6823      	ldr	r3, [r4, #0]
 800d1a6:	079b      	lsls	r3, r3, #30
 800d1a8:	f100 8105 	bmi.w	800d3b6 <_printf_float+0x462>
 800d1ac:	68e0      	ldr	r0, [r4, #12]
 800d1ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1b0:	4298      	cmp	r0, r3
 800d1b2:	bfb8      	it	lt
 800d1b4:	4618      	movlt	r0, r3
 800d1b6:	e730      	b.n	800d01a <_printf_float+0xc6>
 800d1b8:	2301      	movs	r3, #1
 800d1ba:	464a      	mov	r2, r9
 800d1bc:	4631      	mov	r1, r6
 800d1be:	4628      	mov	r0, r5
 800d1c0:	47b8      	blx	r7
 800d1c2:	3001      	adds	r0, #1
 800d1c4:	f43f af27 	beq.w	800d016 <_printf_float+0xc2>
 800d1c8:	f108 0801 	add.w	r8, r8, #1
 800d1cc:	e7e6      	b.n	800d19c <_printf_float+0x248>
 800d1ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	dc39      	bgt.n	800d248 <_printf_float+0x2f4>
 800d1d4:	4a1b      	ldr	r2, [pc, #108]	; (800d244 <_printf_float+0x2f0>)
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	4631      	mov	r1, r6
 800d1da:	4628      	mov	r0, r5
 800d1dc:	47b8      	blx	r7
 800d1de:	3001      	adds	r0, #1
 800d1e0:	f43f af19 	beq.w	800d016 <_printf_float+0xc2>
 800d1e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d1e8:	4313      	orrs	r3, r2
 800d1ea:	d102      	bne.n	800d1f2 <_printf_float+0x29e>
 800d1ec:	6823      	ldr	r3, [r4, #0]
 800d1ee:	07d9      	lsls	r1, r3, #31
 800d1f0:	d5d8      	bpl.n	800d1a4 <_printf_float+0x250>
 800d1f2:	ee18 3a10 	vmov	r3, s16
 800d1f6:	4652      	mov	r2, sl
 800d1f8:	4631      	mov	r1, r6
 800d1fa:	4628      	mov	r0, r5
 800d1fc:	47b8      	blx	r7
 800d1fe:	3001      	adds	r0, #1
 800d200:	f43f af09 	beq.w	800d016 <_printf_float+0xc2>
 800d204:	f04f 0900 	mov.w	r9, #0
 800d208:	f104 0a1a 	add.w	sl, r4, #26
 800d20c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d20e:	425b      	negs	r3, r3
 800d210:	454b      	cmp	r3, r9
 800d212:	dc01      	bgt.n	800d218 <_printf_float+0x2c4>
 800d214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d216:	e792      	b.n	800d13e <_printf_float+0x1ea>
 800d218:	2301      	movs	r3, #1
 800d21a:	4652      	mov	r2, sl
 800d21c:	4631      	mov	r1, r6
 800d21e:	4628      	mov	r0, r5
 800d220:	47b8      	blx	r7
 800d222:	3001      	adds	r0, #1
 800d224:	f43f aef7 	beq.w	800d016 <_printf_float+0xc2>
 800d228:	f109 0901 	add.w	r9, r9, #1
 800d22c:	e7ee      	b.n	800d20c <_printf_float+0x2b8>
 800d22e:	bf00      	nop
 800d230:	7fefffff 	.word	0x7fefffff
 800d234:	080136e8 	.word	0x080136e8
 800d238:	080136ec 	.word	0x080136ec
 800d23c:	080136f4 	.word	0x080136f4
 800d240:	080136f0 	.word	0x080136f0
 800d244:	080136f8 	.word	0x080136f8
 800d248:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d24a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d24c:	429a      	cmp	r2, r3
 800d24e:	bfa8      	it	ge
 800d250:	461a      	movge	r2, r3
 800d252:	2a00      	cmp	r2, #0
 800d254:	4691      	mov	r9, r2
 800d256:	dc37      	bgt.n	800d2c8 <_printf_float+0x374>
 800d258:	f04f 0b00 	mov.w	fp, #0
 800d25c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d260:	f104 021a 	add.w	r2, r4, #26
 800d264:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d266:	9305      	str	r3, [sp, #20]
 800d268:	eba3 0309 	sub.w	r3, r3, r9
 800d26c:	455b      	cmp	r3, fp
 800d26e:	dc33      	bgt.n	800d2d8 <_printf_float+0x384>
 800d270:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d274:	429a      	cmp	r2, r3
 800d276:	db3b      	blt.n	800d2f0 <_printf_float+0x39c>
 800d278:	6823      	ldr	r3, [r4, #0]
 800d27a:	07da      	lsls	r2, r3, #31
 800d27c:	d438      	bmi.n	800d2f0 <_printf_float+0x39c>
 800d27e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d280:	9a05      	ldr	r2, [sp, #20]
 800d282:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d284:	1a9a      	subs	r2, r3, r2
 800d286:	eba3 0901 	sub.w	r9, r3, r1
 800d28a:	4591      	cmp	r9, r2
 800d28c:	bfa8      	it	ge
 800d28e:	4691      	movge	r9, r2
 800d290:	f1b9 0f00 	cmp.w	r9, #0
 800d294:	dc35      	bgt.n	800d302 <_printf_float+0x3ae>
 800d296:	f04f 0800 	mov.w	r8, #0
 800d29a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d29e:	f104 0a1a 	add.w	sl, r4, #26
 800d2a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d2a6:	1a9b      	subs	r3, r3, r2
 800d2a8:	eba3 0309 	sub.w	r3, r3, r9
 800d2ac:	4543      	cmp	r3, r8
 800d2ae:	f77f af79 	ble.w	800d1a4 <_printf_float+0x250>
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	4652      	mov	r2, sl
 800d2b6:	4631      	mov	r1, r6
 800d2b8:	4628      	mov	r0, r5
 800d2ba:	47b8      	blx	r7
 800d2bc:	3001      	adds	r0, #1
 800d2be:	f43f aeaa 	beq.w	800d016 <_printf_float+0xc2>
 800d2c2:	f108 0801 	add.w	r8, r8, #1
 800d2c6:	e7ec      	b.n	800d2a2 <_printf_float+0x34e>
 800d2c8:	4613      	mov	r3, r2
 800d2ca:	4631      	mov	r1, r6
 800d2cc:	4642      	mov	r2, r8
 800d2ce:	4628      	mov	r0, r5
 800d2d0:	47b8      	blx	r7
 800d2d2:	3001      	adds	r0, #1
 800d2d4:	d1c0      	bne.n	800d258 <_printf_float+0x304>
 800d2d6:	e69e      	b.n	800d016 <_printf_float+0xc2>
 800d2d8:	2301      	movs	r3, #1
 800d2da:	4631      	mov	r1, r6
 800d2dc:	4628      	mov	r0, r5
 800d2de:	9205      	str	r2, [sp, #20]
 800d2e0:	47b8      	blx	r7
 800d2e2:	3001      	adds	r0, #1
 800d2e4:	f43f ae97 	beq.w	800d016 <_printf_float+0xc2>
 800d2e8:	9a05      	ldr	r2, [sp, #20]
 800d2ea:	f10b 0b01 	add.w	fp, fp, #1
 800d2ee:	e7b9      	b.n	800d264 <_printf_float+0x310>
 800d2f0:	ee18 3a10 	vmov	r3, s16
 800d2f4:	4652      	mov	r2, sl
 800d2f6:	4631      	mov	r1, r6
 800d2f8:	4628      	mov	r0, r5
 800d2fa:	47b8      	blx	r7
 800d2fc:	3001      	adds	r0, #1
 800d2fe:	d1be      	bne.n	800d27e <_printf_float+0x32a>
 800d300:	e689      	b.n	800d016 <_printf_float+0xc2>
 800d302:	9a05      	ldr	r2, [sp, #20]
 800d304:	464b      	mov	r3, r9
 800d306:	4442      	add	r2, r8
 800d308:	4631      	mov	r1, r6
 800d30a:	4628      	mov	r0, r5
 800d30c:	47b8      	blx	r7
 800d30e:	3001      	adds	r0, #1
 800d310:	d1c1      	bne.n	800d296 <_printf_float+0x342>
 800d312:	e680      	b.n	800d016 <_printf_float+0xc2>
 800d314:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d316:	2a01      	cmp	r2, #1
 800d318:	dc01      	bgt.n	800d31e <_printf_float+0x3ca>
 800d31a:	07db      	lsls	r3, r3, #31
 800d31c:	d538      	bpl.n	800d390 <_printf_float+0x43c>
 800d31e:	2301      	movs	r3, #1
 800d320:	4642      	mov	r2, r8
 800d322:	4631      	mov	r1, r6
 800d324:	4628      	mov	r0, r5
 800d326:	47b8      	blx	r7
 800d328:	3001      	adds	r0, #1
 800d32a:	f43f ae74 	beq.w	800d016 <_printf_float+0xc2>
 800d32e:	ee18 3a10 	vmov	r3, s16
 800d332:	4652      	mov	r2, sl
 800d334:	4631      	mov	r1, r6
 800d336:	4628      	mov	r0, r5
 800d338:	47b8      	blx	r7
 800d33a:	3001      	adds	r0, #1
 800d33c:	f43f ae6b 	beq.w	800d016 <_printf_float+0xc2>
 800d340:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d344:	2200      	movs	r2, #0
 800d346:	2300      	movs	r3, #0
 800d348:	f7f3 fbce 	bl	8000ae8 <__aeabi_dcmpeq>
 800d34c:	b9d8      	cbnz	r0, 800d386 <_printf_float+0x432>
 800d34e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d350:	f108 0201 	add.w	r2, r8, #1
 800d354:	3b01      	subs	r3, #1
 800d356:	4631      	mov	r1, r6
 800d358:	4628      	mov	r0, r5
 800d35a:	47b8      	blx	r7
 800d35c:	3001      	adds	r0, #1
 800d35e:	d10e      	bne.n	800d37e <_printf_float+0x42a>
 800d360:	e659      	b.n	800d016 <_printf_float+0xc2>
 800d362:	2301      	movs	r3, #1
 800d364:	4652      	mov	r2, sl
 800d366:	4631      	mov	r1, r6
 800d368:	4628      	mov	r0, r5
 800d36a:	47b8      	blx	r7
 800d36c:	3001      	adds	r0, #1
 800d36e:	f43f ae52 	beq.w	800d016 <_printf_float+0xc2>
 800d372:	f108 0801 	add.w	r8, r8, #1
 800d376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d378:	3b01      	subs	r3, #1
 800d37a:	4543      	cmp	r3, r8
 800d37c:	dcf1      	bgt.n	800d362 <_printf_float+0x40e>
 800d37e:	464b      	mov	r3, r9
 800d380:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d384:	e6dc      	b.n	800d140 <_printf_float+0x1ec>
 800d386:	f04f 0800 	mov.w	r8, #0
 800d38a:	f104 0a1a 	add.w	sl, r4, #26
 800d38e:	e7f2      	b.n	800d376 <_printf_float+0x422>
 800d390:	2301      	movs	r3, #1
 800d392:	4642      	mov	r2, r8
 800d394:	e7df      	b.n	800d356 <_printf_float+0x402>
 800d396:	2301      	movs	r3, #1
 800d398:	464a      	mov	r2, r9
 800d39a:	4631      	mov	r1, r6
 800d39c:	4628      	mov	r0, r5
 800d39e:	47b8      	blx	r7
 800d3a0:	3001      	adds	r0, #1
 800d3a2:	f43f ae38 	beq.w	800d016 <_printf_float+0xc2>
 800d3a6:	f108 0801 	add.w	r8, r8, #1
 800d3aa:	68e3      	ldr	r3, [r4, #12]
 800d3ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d3ae:	1a5b      	subs	r3, r3, r1
 800d3b0:	4543      	cmp	r3, r8
 800d3b2:	dcf0      	bgt.n	800d396 <_printf_float+0x442>
 800d3b4:	e6fa      	b.n	800d1ac <_printf_float+0x258>
 800d3b6:	f04f 0800 	mov.w	r8, #0
 800d3ba:	f104 0919 	add.w	r9, r4, #25
 800d3be:	e7f4      	b.n	800d3aa <_printf_float+0x456>

0800d3c0 <_printf_common>:
 800d3c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3c4:	4616      	mov	r6, r2
 800d3c6:	4699      	mov	r9, r3
 800d3c8:	688a      	ldr	r2, [r1, #8]
 800d3ca:	690b      	ldr	r3, [r1, #16]
 800d3cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d3d0:	4293      	cmp	r3, r2
 800d3d2:	bfb8      	it	lt
 800d3d4:	4613      	movlt	r3, r2
 800d3d6:	6033      	str	r3, [r6, #0]
 800d3d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d3dc:	4607      	mov	r7, r0
 800d3de:	460c      	mov	r4, r1
 800d3e0:	b10a      	cbz	r2, 800d3e6 <_printf_common+0x26>
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	6033      	str	r3, [r6, #0]
 800d3e6:	6823      	ldr	r3, [r4, #0]
 800d3e8:	0699      	lsls	r1, r3, #26
 800d3ea:	bf42      	ittt	mi
 800d3ec:	6833      	ldrmi	r3, [r6, #0]
 800d3ee:	3302      	addmi	r3, #2
 800d3f0:	6033      	strmi	r3, [r6, #0]
 800d3f2:	6825      	ldr	r5, [r4, #0]
 800d3f4:	f015 0506 	ands.w	r5, r5, #6
 800d3f8:	d106      	bne.n	800d408 <_printf_common+0x48>
 800d3fa:	f104 0a19 	add.w	sl, r4, #25
 800d3fe:	68e3      	ldr	r3, [r4, #12]
 800d400:	6832      	ldr	r2, [r6, #0]
 800d402:	1a9b      	subs	r3, r3, r2
 800d404:	42ab      	cmp	r3, r5
 800d406:	dc26      	bgt.n	800d456 <_printf_common+0x96>
 800d408:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d40c:	1e13      	subs	r3, r2, #0
 800d40e:	6822      	ldr	r2, [r4, #0]
 800d410:	bf18      	it	ne
 800d412:	2301      	movne	r3, #1
 800d414:	0692      	lsls	r2, r2, #26
 800d416:	d42b      	bmi.n	800d470 <_printf_common+0xb0>
 800d418:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d41c:	4649      	mov	r1, r9
 800d41e:	4638      	mov	r0, r7
 800d420:	47c0      	blx	r8
 800d422:	3001      	adds	r0, #1
 800d424:	d01e      	beq.n	800d464 <_printf_common+0xa4>
 800d426:	6823      	ldr	r3, [r4, #0]
 800d428:	68e5      	ldr	r5, [r4, #12]
 800d42a:	6832      	ldr	r2, [r6, #0]
 800d42c:	f003 0306 	and.w	r3, r3, #6
 800d430:	2b04      	cmp	r3, #4
 800d432:	bf08      	it	eq
 800d434:	1aad      	subeq	r5, r5, r2
 800d436:	68a3      	ldr	r3, [r4, #8]
 800d438:	6922      	ldr	r2, [r4, #16]
 800d43a:	bf0c      	ite	eq
 800d43c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d440:	2500      	movne	r5, #0
 800d442:	4293      	cmp	r3, r2
 800d444:	bfc4      	itt	gt
 800d446:	1a9b      	subgt	r3, r3, r2
 800d448:	18ed      	addgt	r5, r5, r3
 800d44a:	2600      	movs	r6, #0
 800d44c:	341a      	adds	r4, #26
 800d44e:	42b5      	cmp	r5, r6
 800d450:	d11a      	bne.n	800d488 <_printf_common+0xc8>
 800d452:	2000      	movs	r0, #0
 800d454:	e008      	b.n	800d468 <_printf_common+0xa8>
 800d456:	2301      	movs	r3, #1
 800d458:	4652      	mov	r2, sl
 800d45a:	4649      	mov	r1, r9
 800d45c:	4638      	mov	r0, r7
 800d45e:	47c0      	blx	r8
 800d460:	3001      	adds	r0, #1
 800d462:	d103      	bne.n	800d46c <_printf_common+0xac>
 800d464:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d46c:	3501      	adds	r5, #1
 800d46e:	e7c6      	b.n	800d3fe <_printf_common+0x3e>
 800d470:	18e1      	adds	r1, r4, r3
 800d472:	1c5a      	adds	r2, r3, #1
 800d474:	2030      	movs	r0, #48	; 0x30
 800d476:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d47a:	4422      	add	r2, r4
 800d47c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d480:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d484:	3302      	adds	r3, #2
 800d486:	e7c7      	b.n	800d418 <_printf_common+0x58>
 800d488:	2301      	movs	r3, #1
 800d48a:	4622      	mov	r2, r4
 800d48c:	4649      	mov	r1, r9
 800d48e:	4638      	mov	r0, r7
 800d490:	47c0      	blx	r8
 800d492:	3001      	adds	r0, #1
 800d494:	d0e6      	beq.n	800d464 <_printf_common+0xa4>
 800d496:	3601      	adds	r6, #1
 800d498:	e7d9      	b.n	800d44e <_printf_common+0x8e>
	...

0800d49c <_printf_i>:
 800d49c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d4a0:	7e0f      	ldrb	r7, [r1, #24]
 800d4a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d4a4:	2f78      	cmp	r7, #120	; 0x78
 800d4a6:	4691      	mov	r9, r2
 800d4a8:	4680      	mov	r8, r0
 800d4aa:	460c      	mov	r4, r1
 800d4ac:	469a      	mov	sl, r3
 800d4ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d4b2:	d807      	bhi.n	800d4c4 <_printf_i+0x28>
 800d4b4:	2f62      	cmp	r7, #98	; 0x62
 800d4b6:	d80a      	bhi.n	800d4ce <_printf_i+0x32>
 800d4b8:	2f00      	cmp	r7, #0
 800d4ba:	f000 80d8 	beq.w	800d66e <_printf_i+0x1d2>
 800d4be:	2f58      	cmp	r7, #88	; 0x58
 800d4c0:	f000 80a3 	beq.w	800d60a <_printf_i+0x16e>
 800d4c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d4c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d4cc:	e03a      	b.n	800d544 <_printf_i+0xa8>
 800d4ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d4d2:	2b15      	cmp	r3, #21
 800d4d4:	d8f6      	bhi.n	800d4c4 <_printf_i+0x28>
 800d4d6:	a101      	add	r1, pc, #4	; (adr r1, 800d4dc <_printf_i+0x40>)
 800d4d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d4dc:	0800d535 	.word	0x0800d535
 800d4e0:	0800d549 	.word	0x0800d549
 800d4e4:	0800d4c5 	.word	0x0800d4c5
 800d4e8:	0800d4c5 	.word	0x0800d4c5
 800d4ec:	0800d4c5 	.word	0x0800d4c5
 800d4f0:	0800d4c5 	.word	0x0800d4c5
 800d4f4:	0800d549 	.word	0x0800d549
 800d4f8:	0800d4c5 	.word	0x0800d4c5
 800d4fc:	0800d4c5 	.word	0x0800d4c5
 800d500:	0800d4c5 	.word	0x0800d4c5
 800d504:	0800d4c5 	.word	0x0800d4c5
 800d508:	0800d655 	.word	0x0800d655
 800d50c:	0800d579 	.word	0x0800d579
 800d510:	0800d637 	.word	0x0800d637
 800d514:	0800d4c5 	.word	0x0800d4c5
 800d518:	0800d4c5 	.word	0x0800d4c5
 800d51c:	0800d677 	.word	0x0800d677
 800d520:	0800d4c5 	.word	0x0800d4c5
 800d524:	0800d579 	.word	0x0800d579
 800d528:	0800d4c5 	.word	0x0800d4c5
 800d52c:	0800d4c5 	.word	0x0800d4c5
 800d530:	0800d63f 	.word	0x0800d63f
 800d534:	682b      	ldr	r3, [r5, #0]
 800d536:	1d1a      	adds	r2, r3, #4
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	602a      	str	r2, [r5, #0]
 800d53c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d540:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d544:	2301      	movs	r3, #1
 800d546:	e0a3      	b.n	800d690 <_printf_i+0x1f4>
 800d548:	6820      	ldr	r0, [r4, #0]
 800d54a:	6829      	ldr	r1, [r5, #0]
 800d54c:	0606      	lsls	r6, r0, #24
 800d54e:	f101 0304 	add.w	r3, r1, #4
 800d552:	d50a      	bpl.n	800d56a <_printf_i+0xce>
 800d554:	680e      	ldr	r6, [r1, #0]
 800d556:	602b      	str	r3, [r5, #0]
 800d558:	2e00      	cmp	r6, #0
 800d55a:	da03      	bge.n	800d564 <_printf_i+0xc8>
 800d55c:	232d      	movs	r3, #45	; 0x2d
 800d55e:	4276      	negs	r6, r6
 800d560:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d564:	485e      	ldr	r0, [pc, #376]	; (800d6e0 <_printf_i+0x244>)
 800d566:	230a      	movs	r3, #10
 800d568:	e019      	b.n	800d59e <_printf_i+0x102>
 800d56a:	680e      	ldr	r6, [r1, #0]
 800d56c:	602b      	str	r3, [r5, #0]
 800d56e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d572:	bf18      	it	ne
 800d574:	b236      	sxthne	r6, r6
 800d576:	e7ef      	b.n	800d558 <_printf_i+0xbc>
 800d578:	682b      	ldr	r3, [r5, #0]
 800d57a:	6820      	ldr	r0, [r4, #0]
 800d57c:	1d19      	adds	r1, r3, #4
 800d57e:	6029      	str	r1, [r5, #0]
 800d580:	0601      	lsls	r1, r0, #24
 800d582:	d501      	bpl.n	800d588 <_printf_i+0xec>
 800d584:	681e      	ldr	r6, [r3, #0]
 800d586:	e002      	b.n	800d58e <_printf_i+0xf2>
 800d588:	0646      	lsls	r6, r0, #25
 800d58a:	d5fb      	bpl.n	800d584 <_printf_i+0xe8>
 800d58c:	881e      	ldrh	r6, [r3, #0]
 800d58e:	4854      	ldr	r0, [pc, #336]	; (800d6e0 <_printf_i+0x244>)
 800d590:	2f6f      	cmp	r7, #111	; 0x6f
 800d592:	bf0c      	ite	eq
 800d594:	2308      	moveq	r3, #8
 800d596:	230a      	movne	r3, #10
 800d598:	2100      	movs	r1, #0
 800d59a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d59e:	6865      	ldr	r5, [r4, #4]
 800d5a0:	60a5      	str	r5, [r4, #8]
 800d5a2:	2d00      	cmp	r5, #0
 800d5a4:	bfa2      	ittt	ge
 800d5a6:	6821      	ldrge	r1, [r4, #0]
 800d5a8:	f021 0104 	bicge.w	r1, r1, #4
 800d5ac:	6021      	strge	r1, [r4, #0]
 800d5ae:	b90e      	cbnz	r6, 800d5b4 <_printf_i+0x118>
 800d5b0:	2d00      	cmp	r5, #0
 800d5b2:	d04d      	beq.n	800d650 <_printf_i+0x1b4>
 800d5b4:	4615      	mov	r5, r2
 800d5b6:	fbb6 f1f3 	udiv	r1, r6, r3
 800d5ba:	fb03 6711 	mls	r7, r3, r1, r6
 800d5be:	5dc7      	ldrb	r7, [r0, r7]
 800d5c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d5c4:	4637      	mov	r7, r6
 800d5c6:	42bb      	cmp	r3, r7
 800d5c8:	460e      	mov	r6, r1
 800d5ca:	d9f4      	bls.n	800d5b6 <_printf_i+0x11a>
 800d5cc:	2b08      	cmp	r3, #8
 800d5ce:	d10b      	bne.n	800d5e8 <_printf_i+0x14c>
 800d5d0:	6823      	ldr	r3, [r4, #0]
 800d5d2:	07de      	lsls	r6, r3, #31
 800d5d4:	d508      	bpl.n	800d5e8 <_printf_i+0x14c>
 800d5d6:	6923      	ldr	r3, [r4, #16]
 800d5d8:	6861      	ldr	r1, [r4, #4]
 800d5da:	4299      	cmp	r1, r3
 800d5dc:	bfde      	ittt	le
 800d5de:	2330      	movle	r3, #48	; 0x30
 800d5e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d5e4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d5e8:	1b52      	subs	r2, r2, r5
 800d5ea:	6122      	str	r2, [r4, #16]
 800d5ec:	f8cd a000 	str.w	sl, [sp]
 800d5f0:	464b      	mov	r3, r9
 800d5f2:	aa03      	add	r2, sp, #12
 800d5f4:	4621      	mov	r1, r4
 800d5f6:	4640      	mov	r0, r8
 800d5f8:	f7ff fee2 	bl	800d3c0 <_printf_common>
 800d5fc:	3001      	adds	r0, #1
 800d5fe:	d14c      	bne.n	800d69a <_printf_i+0x1fe>
 800d600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d604:	b004      	add	sp, #16
 800d606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d60a:	4835      	ldr	r0, [pc, #212]	; (800d6e0 <_printf_i+0x244>)
 800d60c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d610:	6829      	ldr	r1, [r5, #0]
 800d612:	6823      	ldr	r3, [r4, #0]
 800d614:	f851 6b04 	ldr.w	r6, [r1], #4
 800d618:	6029      	str	r1, [r5, #0]
 800d61a:	061d      	lsls	r5, r3, #24
 800d61c:	d514      	bpl.n	800d648 <_printf_i+0x1ac>
 800d61e:	07df      	lsls	r7, r3, #31
 800d620:	bf44      	itt	mi
 800d622:	f043 0320 	orrmi.w	r3, r3, #32
 800d626:	6023      	strmi	r3, [r4, #0]
 800d628:	b91e      	cbnz	r6, 800d632 <_printf_i+0x196>
 800d62a:	6823      	ldr	r3, [r4, #0]
 800d62c:	f023 0320 	bic.w	r3, r3, #32
 800d630:	6023      	str	r3, [r4, #0]
 800d632:	2310      	movs	r3, #16
 800d634:	e7b0      	b.n	800d598 <_printf_i+0xfc>
 800d636:	6823      	ldr	r3, [r4, #0]
 800d638:	f043 0320 	orr.w	r3, r3, #32
 800d63c:	6023      	str	r3, [r4, #0]
 800d63e:	2378      	movs	r3, #120	; 0x78
 800d640:	4828      	ldr	r0, [pc, #160]	; (800d6e4 <_printf_i+0x248>)
 800d642:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d646:	e7e3      	b.n	800d610 <_printf_i+0x174>
 800d648:	0659      	lsls	r1, r3, #25
 800d64a:	bf48      	it	mi
 800d64c:	b2b6      	uxthmi	r6, r6
 800d64e:	e7e6      	b.n	800d61e <_printf_i+0x182>
 800d650:	4615      	mov	r5, r2
 800d652:	e7bb      	b.n	800d5cc <_printf_i+0x130>
 800d654:	682b      	ldr	r3, [r5, #0]
 800d656:	6826      	ldr	r6, [r4, #0]
 800d658:	6961      	ldr	r1, [r4, #20]
 800d65a:	1d18      	adds	r0, r3, #4
 800d65c:	6028      	str	r0, [r5, #0]
 800d65e:	0635      	lsls	r5, r6, #24
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	d501      	bpl.n	800d668 <_printf_i+0x1cc>
 800d664:	6019      	str	r1, [r3, #0]
 800d666:	e002      	b.n	800d66e <_printf_i+0x1d2>
 800d668:	0670      	lsls	r0, r6, #25
 800d66a:	d5fb      	bpl.n	800d664 <_printf_i+0x1c8>
 800d66c:	8019      	strh	r1, [r3, #0]
 800d66e:	2300      	movs	r3, #0
 800d670:	6123      	str	r3, [r4, #16]
 800d672:	4615      	mov	r5, r2
 800d674:	e7ba      	b.n	800d5ec <_printf_i+0x150>
 800d676:	682b      	ldr	r3, [r5, #0]
 800d678:	1d1a      	adds	r2, r3, #4
 800d67a:	602a      	str	r2, [r5, #0]
 800d67c:	681d      	ldr	r5, [r3, #0]
 800d67e:	6862      	ldr	r2, [r4, #4]
 800d680:	2100      	movs	r1, #0
 800d682:	4628      	mov	r0, r5
 800d684:	f7f2 fdbc 	bl	8000200 <memchr>
 800d688:	b108      	cbz	r0, 800d68e <_printf_i+0x1f2>
 800d68a:	1b40      	subs	r0, r0, r5
 800d68c:	6060      	str	r0, [r4, #4]
 800d68e:	6863      	ldr	r3, [r4, #4]
 800d690:	6123      	str	r3, [r4, #16]
 800d692:	2300      	movs	r3, #0
 800d694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d698:	e7a8      	b.n	800d5ec <_printf_i+0x150>
 800d69a:	6923      	ldr	r3, [r4, #16]
 800d69c:	462a      	mov	r2, r5
 800d69e:	4649      	mov	r1, r9
 800d6a0:	4640      	mov	r0, r8
 800d6a2:	47d0      	blx	sl
 800d6a4:	3001      	adds	r0, #1
 800d6a6:	d0ab      	beq.n	800d600 <_printf_i+0x164>
 800d6a8:	6823      	ldr	r3, [r4, #0]
 800d6aa:	079b      	lsls	r3, r3, #30
 800d6ac:	d413      	bmi.n	800d6d6 <_printf_i+0x23a>
 800d6ae:	68e0      	ldr	r0, [r4, #12]
 800d6b0:	9b03      	ldr	r3, [sp, #12]
 800d6b2:	4298      	cmp	r0, r3
 800d6b4:	bfb8      	it	lt
 800d6b6:	4618      	movlt	r0, r3
 800d6b8:	e7a4      	b.n	800d604 <_printf_i+0x168>
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	4632      	mov	r2, r6
 800d6be:	4649      	mov	r1, r9
 800d6c0:	4640      	mov	r0, r8
 800d6c2:	47d0      	blx	sl
 800d6c4:	3001      	adds	r0, #1
 800d6c6:	d09b      	beq.n	800d600 <_printf_i+0x164>
 800d6c8:	3501      	adds	r5, #1
 800d6ca:	68e3      	ldr	r3, [r4, #12]
 800d6cc:	9903      	ldr	r1, [sp, #12]
 800d6ce:	1a5b      	subs	r3, r3, r1
 800d6d0:	42ab      	cmp	r3, r5
 800d6d2:	dcf2      	bgt.n	800d6ba <_printf_i+0x21e>
 800d6d4:	e7eb      	b.n	800d6ae <_printf_i+0x212>
 800d6d6:	2500      	movs	r5, #0
 800d6d8:	f104 0619 	add.w	r6, r4, #25
 800d6dc:	e7f5      	b.n	800d6ca <_printf_i+0x22e>
 800d6de:	bf00      	nop
 800d6e0:	080136fa 	.word	0x080136fa
 800d6e4:	0801370b 	.word	0x0801370b

0800d6e8 <_scanf_float>:
 800d6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6ec:	b087      	sub	sp, #28
 800d6ee:	4617      	mov	r7, r2
 800d6f0:	9303      	str	r3, [sp, #12]
 800d6f2:	688b      	ldr	r3, [r1, #8]
 800d6f4:	1e5a      	subs	r2, r3, #1
 800d6f6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d6fa:	bf83      	ittte	hi
 800d6fc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d700:	195b      	addhi	r3, r3, r5
 800d702:	9302      	strhi	r3, [sp, #8]
 800d704:	2300      	movls	r3, #0
 800d706:	bf86      	itte	hi
 800d708:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d70c:	608b      	strhi	r3, [r1, #8]
 800d70e:	9302      	strls	r3, [sp, #8]
 800d710:	680b      	ldr	r3, [r1, #0]
 800d712:	468b      	mov	fp, r1
 800d714:	2500      	movs	r5, #0
 800d716:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d71a:	f84b 3b1c 	str.w	r3, [fp], #28
 800d71e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d722:	4680      	mov	r8, r0
 800d724:	460c      	mov	r4, r1
 800d726:	465e      	mov	r6, fp
 800d728:	46aa      	mov	sl, r5
 800d72a:	46a9      	mov	r9, r5
 800d72c:	9501      	str	r5, [sp, #4]
 800d72e:	68a2      	ldr	r2, [r4, #8]
 800d730:	b152      	cbz	r2, 800d748 <_scanf_float+0x60>
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	781b      	ldrb	r3, [r3, #0]
 800d736:	2b4e      	cmp	r3, #78	; 0x4e
 800d738:	d864      	bhi.n	800d804 <_scanf_float+0x11c>
 800d73a:	2b40      	cmp	r3, #64	; 0x40
 800d73c:	d83c      	bhi.n	800d7b8 <_scanf_float+0xd0>
 800d73e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800d742:	b2c8      	uxtb	r0, r1
 800d744:	280e      	cmp	r0, #14
 800d746:	d93a      	bls.n	800d7be <_scanf_float+0xd6>
 800d748:	f1b9 0f00 	cmp.w	r9, #0
 800d74c:	d003      	beq.n	800d756 <_scanf_float+0x6e>
 800d74e:	6823      	ldr	r3, [r4, #0]
 800d750:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d754:	6023      	str	r3, [r4, #0]
 800d756:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d75a:	f1ba 0f01 	cmp.w	sl, #1
 800d75e:	f200 8113 	bhi.w	800d988 <_scanf_float+0x2a0>
 800d762:	455e      	cmp	r6, fp
 800d764:	f200 8105 	bhi.w	800d972 <_scanf_float+0x28a>
 800d768:	2501      	movs	r5, #1
 800d76a:	4628      	mov	r0, r5
 800d76c:	b007      	add	sp, #28
 800d76e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d772:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800d776:	2a0d      	cmp	r2, #13
 800d778:	d8e6      	bhi.n	800d748 <_scanf_float+0x60>
 800d77a:	a101      	add	r1, pc, #4	; (adr r1, 800d780 <_scanf_float+0x98>)
 800d77c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d780:	0800d8bf 	.word	0x0800d8bf
 800d784:	0800d749 	.word	0x0800d749
 800d788:	0800d749 	.word	0x0800d749
 800d78c:	0800d749 	.word	0x0800d749
 800d790:	0800d91f 	.word	0x0800d91f
 800d794:	0800d8f7 	.word	0x0800d8f7
 800d798:	0800d749 	.word	0x0800d749
 800d79c:	0800d749 	.word	0x0800d749
 800d7a0:	0800d8cd 	.word	0x0800d8cd
 800d7a4:	0800d749 	.word	0x0800d749
 800d7a8:	0800d749 	.word	0x0800d749
 800d7ac:	0800d749 	.word	0x0800d749
 800d7b0:	0800d749 	.word	0x0800d749
 800d7b4:	0800d885 	.word	0x0800d885
 800d7b8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800d7bc:	e7db      	b.n	800d776 <_scanf_float+0x8e>
 800d7be:	290e      	cmp	r1, #14
 800d7c0:	d8c2      	bhi.n	800d748 <_scanf_float+0x60>
 800d7c2:	a001      	add	r0, pc, #4	; (adr r0, 800d7c8 <_scanf_float+0xe0>)
 800d7c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d7c8:	0800d877 	.word	0x0800d877
 800d7cc:	0800d749 	.word	0x0800d749
 800d7d0:	0800d877 	.word	0x0800d877
 800d7d4:	0800d90b 	.word	0x0800d90b
 800d7d8:	0800d749 	.word	0x0800d749
 800d7dc:	0800d825 	.word	0x0800d825
 800d7e0:	0800d861 	.word	0x0800d861
 800d7e4:	0800d861 	.word	0x0800d861
 800d7e8:	0800d861 	.word	0x0800d861
 800d7ec:	0800d861 	.word	0x0800d861
 800d7f0:	0800d861 	.word	0x0800d861
 800d7f4:	0800d861 	.word	0x0800d861
 800d7f8:	0800d861 	.word	0x0800d861
 800d7fc:	0800d861 	.word	0x0800d861
 800d800:	0800d861 	.word	0x0800d861
 800d804:	2b6e      	cmp	r3, #110	; 0x6e
 800d806:	d809      	bhi.n	800d81c <_scanf_float+0x134>
 800d808:	2b60      	cmp	r3, #96	; 0x60
 800d80a:	d8b2      	bhi.n	800d772 <_scanf_float+0x8a>
 800d80c:	2b54      	cmp	r3, #84	; 0x54
 800d80e:	d077      	beq.n	800d900 <_scanf_float+0x218>
 800d810:	2b59      	cmp	r3, #89	; 0x59
 800d812:	d199      	bne.n	800d748 <_scanf_float+0x60>
 800d814:	2d07      	cmp	r5, #7
 800d816:	d197      	bne.n	800d748 <_scanf_float+0x60>
 800d818:	2508      	movs	r5, #8
 800d81a:	e029      	b.n	800d870 <_scanf_float+0x188>
 800d81c:	2b74      	cmp	r3, #116	; 0x74
 800d81e:	d06f      	beq.n	800d900 <_scanf_float+0x218>
 800d820:	2b79      	cmp	r3, #121	; 0x79
 800d822:	e7f6      	b.n	800d812 <_scanf_float+0x12a>
 800d824:	6821      	ldr	r1, [r4, #0]
 800d826:	05c8      	lsls	r0, r1, #23
 800d828:	d51a      	bpl.n	800d860 <_scanf_float+0x178>
 800d82a:	9b02      	ldr	r3, [sp, #8]
 800d82c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d830:	6021      	str	r1, [r4, #0]
 800d832:	f109 0901 	add.w	r9, r9, #1
 800d836:	b11b      	cbz	r3, 800d840 <_scanf_float+0x158>
 800d838:	3b01      	subs	r3, #1
 800d83a:	3201      	adds	r2, #1
 800d83c:	9302      	str	r3, [sp, #8]
 800d83e:	60a2      	str	r2, [r4, #8]
 800d840:	68a3      	ldr	r3, [r4, #8]
 800d842:	3b01      	subs	r3, #1
 800d844:	60a3      	str	r3, [r4, #8]
 800d846:	6923      	ldr	r3, [r4, #16]
 800d848:	3301      	adds	r3, #1
 800d84a:	6123      	str	r3, [r4, #16]
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	3b01      	subs	r3, #1
 800d850:	2b00      	cmp	r3, #0
 800d852:	607b      	str	r3, [r7, #4]
 800d854:	f340 8084 	ble.w	800d960 <_scanf_float+0x278>
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	3301      	adds	r3, #1
 800d85c:	603b      	str	r3, [r7, #0]
 800d85e:	e766      	b.n	800d72e <_scanf_float+0x46>
 800d860:	eb1a 0f05 	cmn.w	sl, r5
 800d864:	f47f af70 	bne.w	800d748 <_scanf_float+0x60>
 800d868:	6822      	ldr	r2, [r4, #0]
 800d86a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800d86e:	6022      	str	r2, [r4, #0]
 800d870:	f806 3b01 	strb.w	r3, [r6], #1
 800d874:	e7e4      	b.n	800d840 <_scanf_float+0x158>
 800d876:	6822      	ldr	r2, [r4, #0]
 800d878:	0610      	lsls	r0, r2, #24
 800d87a:	f57f af65 	bpl.w	800d748 <_scanf_float+0x60>
 800d87e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d882:	e7f4      	b.n	800d86e <_scanf_float+0x186>
 800d884:	f1ba 0f00 	cmp.w	sl, #0
 800d888:	d10e      	bne.n	800d8a8 <_scanf_float+0x1c0>
 800d88a:	f1b9 0f00 	cmp.w	r9, #0
 800d88e:	d10e      	bne.n	800d8ae <_scanf_float+0x1c6>
 800d890:	6822      	ldr	r2, [r4, #0]
 800d892:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d896:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d89a:	d108      	bne.n	800d8ae <_scanf_float+0x1c6>
 800d89c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d8a0:	6022      	str	r2, [r4, #0]
 800d8a2:	f04f 0a01 	mov.w	sl, #1
 800d8a6:	e7e3      	b.n	800d870 <_scanf_float+0x188>
 800d8a8:	f1ba 0f02 	cmp.w	sl, #2
 800d8ac:	d055      	beq.n	800d95a <_scanf_float+0x272>
 800d8ae:	2d01      	cmp	r5, #1
 800d8b0:	d002      	beq.n	800d8b8 <_scanf_float+0x1d0>
 800d8b2:	2d04      	cmp	r5, #4
 800d8b4:	f47f af48 	bne.w	800d748 <_scanf_float+0x60>
 800d8b8:	3501      	adds	r5, #1
 800d8ba:	b2ed      	uxtb	r5, r5
 800d8bc:	e7d8      	b.n	800d870 <_scanf_float+0x188>
 800d8be:	f1ba 0f01 	cmp.w	sl, #1
 800d8c2:	f47f af41 	bne.w	800d748 <_scanf_float+0x60>
 800d8c6:	f04f 0a02 	mov.w	sl, #2
 800d8ca:	e7d1      	b.n	800d870 <_scanf_float+0x188>
 800d8cc:	b97d      	cbnz	r5, 800d8ee <_scanf_float+0x206>
 800d8ce:	f1b9 0f00 	cmp.w	r9, #0
 800d8d2:	f47f af3c 	bne.w	800d74e <_scanf_float+0x66>
 800d8d6:	6822      	ldr	r2, [r4, #0]
 800d8d8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d8dc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d8e0:	f47f af39 	bne.w	800d756 <_scanf_float+0x6e>
 800d8e4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d8e8:	6022      	str	r2, [r4, #0]
 800d8ea:	2501      	movs	r5, #1
 800d8ec:	e7c0      	b.n	800d870 <_scanf_float+0x188>
 800d8ee:	2d03      	cmp	r5, #3
 800d8f0:	d0e2      	beq.n	800d8b8 <_scanf_float+0x1d0>
 800d8f2:	2d05      	cmp	r5, #5
 800d8f4:	e7de      	b.n	800d8b4 <_scanf_float+0x1cc>
 800d8f6:	2d02      	cmp	r5, #2
 800d8f8:	f47f af26 	bne.w	800d748 <_scanf_float+0x60>
 800d8fc:	2503      	movs	r5, #3
 800d8fe:	e7b7      	b.n	800d870 <_scanf_float+0x188>
 800d900:	2d06      	cmp	r5, #6
 800d902:	f47f af21 	bne.w	800d748 <_scanf_float+0x60>
 800d906:	2507      	movs	r5, #7
 800d908:	e7b2      	b.n	800d870 <_scanf_float+0x188>
 800d90a:	6822      	ldr	r2, [r4, #0]
 800d90c:	0591      	lsls	r1, r2, #22
 800d90e:	f57f af1b 	bpl.w	800d748 <_scanf_float+0x60>
 800d912:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800d916:	6022      	str	r2, [r4, #0]
 800d918:	f8cd 9004 	str.w	r9, [sp, #4]
 800d91c:	e7a8      	b.n	800d870 <_scanf_float+0x188>
 800d91e:	6822      	ldr	r2, [r4, #0]
 800d920:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800d924:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d928:	d006      	beq.n	800d938 <_scanf_float+0x250>
 800d92a:	0550      	lsls	r0, r2, #21
 800d92c:	f57f af0c 	bpl.w	800d748 <_scanf_float+0x60>
 800d930:	f1b9 0f00 	cmp.w	r9, #0
 800d934:	f43f af0f 	beq.w	800d756 <_scanf_float+0x6e>
 800d938:	0591      	lsls	r1, r2, #22
 800d93a:	bf58      	it	pl
 800d93c:	9901      	ldrpl	r1, [sp, #4]
 800d93e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d942:	bf58      	it	pl
 800d944:	eba9 0101 	subpl.w	r1, r9, r1
 800d948:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800d94c:	bf58      	it	pl
 800d94e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d952:	6022      	str	r2, [r4, #0]
 800d954:	f04f 0900 	mov.w	r9, #0
 800d958:	e78a      	b.n	800d870 <_scanf_float+0x188>
 800d95a:	f04f 0a03 	mov.w	sl, #3
 800d95e:	e787      	b.n	800d870 <_scanf_float+0x188>
 800d960:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d964:	4639      	mov	r1, r7
 800d966:	4640      	mov	r0, r8
 800d968:	4798      	blx	r3
 800d96a:	2800      	cmp	r0, #0
 800d96c:	f43f aedf 	beq.w	800d72e <_scanf_float+0x46>
 800d970:	e6ea      	b.n	800d748 <_scanf_float+0x60>
 800d972:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d976:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d97a:	463a      	mov	r2, r7
 800d97c:	4640      	mov	r0, r8
 800d97e:	4798      	blx	r3
 800d980:	6923      	ldr	r3, [r4, #16]
 800d982:	3b01      	subs	r3, #1
 800d984:	6123      	str	r3, [r4, #16]
 800d986:	e6ec      	b.n	800d762 <_scanf_float+0x7a>
 800d988:	1e6b      	subs	r3, r5, #1
 800d98a:	2b06      	cmp	r3, #6
 800d98c:	d825      	bhi.n	800d9da <_scanf_float+0x2f2>
 800d98e:	2d02      	cmp	r5, #2
 800d990:	d836      	bhi.n	800da00 <_scanf_float+0x318>
 800d992:	455e      	cmp	r6, fp
 800d994:	f67f aee8 	bls.w	800d768 <_scanf_float+0x80>
 800d998:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d99c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d9a0:	463a      	mov	r2, r7
 800d9a2:	4640      	mov	r0, r8
 800d9a4:	4798      	blx	r3
 800d9a6:	6923      	ldr	r3, [r4, #16]
 800d9a8:	3b01      	subs	r3, #1
 800d9aa:	6123      	str	r3, [r4, #16]
 800d9ac:	e7f1      	b.n	800d992 <_scanf_float+0x2aa>
 800d9ae:	9802      	ldr	r0, [sp, #8]
 800d9b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d9b4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800d9b8:	9002      	str	r0, [sp, #8]
 800d9ba:	463a      	mov	r2, r7
 800d9bc:	4640      	mov	r0, r8
 800d9be:	4798      	blx	r3
 800d9c0:	6923      	ldr	r3, [r4, #16]
 800d9c2:	3b01      	subs	r3, #1
 800d9c4:	6123      	str	r3, [r4, #16]
 800d9c6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d9ca:	fa5f fa8a 	uxtb.w	sl, sl
 800d9ce:	f1ba 0f02 	cmp.w	sl, #2
 800d9d2:	d1ec      	bne.n	800d9ae <_scanf_float+0x2c6>
 800d9d4:	3d03      	subs	r5, #3
 800d9d6:	b2ed      	uxtb	r5, r5
 800d9d8:	1b76      	subs	r6, r6, r5
 800d9da:	6823      	ldr	r3, [r4, #0]
 800d9dc:	05da      	lsls	r2, r3, #23
 800d9de:	d52f      	bpl.n	800da40 <_scanf_float+0x358>
 800d9e0:	055b      	lsls	r3, r3, #21
 800d9e2:	d510      	bpl.n	800da06 <_scanf_float+0x31e>
 800d9e4:	455e      	cmp	r6, fp
 800d9e6:	f67f aebf 	bls.w	800d768 <_scanf_float+0x80>
 800d9ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d9ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d9f2:	463a      	mov	r2, r7
 800d9f4:	4640      	mov	r0, r8
 800d9f6:	4798      	blx	r3
 800d9f8:	6923      	ldr	r3, [r4, #16]
 800d9fa:	3b01      	subs	r3, #1
 800d9fc:	6123      	str	r3, [r4, #16]
 800d9fe:	e7f1      	b.n	800d9e4 <_scanf_float+0x2fc>
 800da00:	46aa      	mov	sl, r5
 800da02:	9602      	str	r6, [sp, #8]
 800da04:	e7df      	b.n	800d9c6 <_scanf_float+0x2de>
 800da06:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800da0a:	6923      	ldr	r3, [r4, #16]
 800da0c:	2965      	cmp	r1, #101	; 0x65
 800da0e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800da12:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800da16:	6123      	str	r3, [r4, #16]
 800da18:	d00c      	beq.n	800da34 <_scanf_float+0x34c>
 800da1a:	2945      	cmp	r1, #69	; 0x45
 800da1c:	d00a      	beq.n	800da34 <_scanf_float+0x34c>
 800da1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800da22:	463a      	mov	r2, r7
 800da24:	4640      	mov	r0, r8
 800da26:	4798      	blx	r3
 800da28:	6923      	ldr	r3, [r4, #16]
 800da2a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800da2e:	3b01      	subs	r3, #1
 800da30:	1eb5      	subs	r5, r6, #2
 800da32:	6123      	str	r3, [r4, #16]
 800da34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800da38:	463a      	mov	r2, r7
 800da3a:	4640      	mov	r0, r8
 800da3c:	4798      	blx	r3
 800da3e:	462e      	mov	r6, r5
 800da40:	6825      	ldr	r5, [r4, #0]
 800da42:	f015 0510 	ands.w	r5, r5, #16
 800da46:	d159      	bne.n	800dafc <_scanf_float+0x414>
 800da48:	7035      	strb	r5, [r6, #0]
 800da4a:	6823      	ldr	r3, [r4, #0]
 800da4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800da50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800da54:	d11b      	bne.n	800da8e <_scanf_float+0x3a6>
 800da56:	9b01      	ldr	r3, [sp, #4]
 800da58:	454b      	cmp	r3, r9
 800da5a:	eba3 0209 	sub.w	r2, r3, r9
 800da5e:	d123      	bne.n	800daa8 <_scanf_float+0x3c0>
 800da60:	2200      	movs	r2, #0
 800da62:	4659      	mov	r1, fp
 800da64:	4640      	mov	r0, r8
 800da66:	f000 ffcd 	bl	800ea04 <_strtod_r>
 800da6a:	6822      	ldr	r2, [r4, #0]
 800da6c:	9b03      	ldr	r3, [sp, #12]
 800da6e:	f012 0f02 	tst.w	r2, #2
 800da72:	ec57 6b10 	vmov	r6, r7, d0
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	d021      	beq.n	800dabe <_scanf_float+0x3d6>
 800da7a:	9903      	ldr	r1, [sp, #12]
 800da7c:	1d1a      	adds	r2, r3, #4
 800da7e:	600a      	str	r2, [r1, #0]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	e9c3 6700 	strd	r6, r7, [r3]
 800da86:	68e3      	ldr	r3, [r4, #12]
 800da88:	3301      	adds	r3, #1
 800da8a:	60e3      	str	r3, [r4, #12]
 800da8c:	e66d      	b.n	800d76a <_scanf_float+0x82>
 800da8e:	9b04      	ldr	r3, [sp, #16]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d0e5      	beq.n	800da60 <_scanf_float+0x378>
 800da94:	9905      	ldr	r1, [sp, #20]
 800da96:	230a      	movs	r3, #10
 800da98:	462a      	mov	r2, r5
 800da9a:	3101      	adds	r1, #1
 800da9c:	4640      	mov	r0, r8
 800da9e:	f001 f839 	bl	800eb14 <_strtol_r>
 800daa2:	9b04      	ldr	r3, [sp, #16]
 800daa4:	9e05      	ldr	r6, [sp, #20]
 800daa6:	1ac2      	subs	r2, r0, r3
 800daa8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800daac:	429e      	cmp	r6, r3
 800daae:	bf28      	it	cs
 800dab0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800dab4:	4912      	ldr	r1, [pc, #72]	; (800db00 <_scanf_float+0x418>)
 800dab6:	4630      	mov	r0, r6
 800dab8:	f000 f8e6 	bl	800dc88 <siprintf>
 800dabc:	e7d0      	b.n	800da60 <_scanf_float+0x378>
 800dabe:	9903      	ldr	r1, [sp, #12]
 800dac0:	f012 0f04 	tst.w	r2, #4
 800dac4:	f103 0204 	add.w	r2, r3, #4
 800dac8:	600a      	str	r2, [r1, #0]
 800daca:	d1d9      	bne.n	800da80 <_scanf_float+0x398>
 800dacc:	f8d3 8000 	ldr.w	r8, [r3]
 800dad0:	ee10 2a10 	vmov	r2, s0
 800dad4:	ee10 0a10 	vmov	r0, s0
 800dad8:	463b      	mov	r3, r7
 800dada:	4639      	mov	r1, r7
 800dadc:	f7f3 f836 	bl	8000b4c <__aeabi_dcmpun>
 800dae0:	b128      	cbz	r0, 800daee <_scanf_float+0x406>
 800dae2:	4808      	ldr	r0, [pc, #32]	; (800db04 <_scanf_float+0x41c>)
 800dae4:	f000 f896 	bl	800dc14 <nanf>
 800dae8:	ed88 0a00 	vstr	s0, [r8]
 800daec:	e7cb      	b.n	800da86 <_scanf_float+0x39e>
 800daee:	4630      	mov	r0, r6
 800daf0:	4639      	mov	r1, r7
 800daf2:	f7f3 f889 	bl	8000c08 <__aeabi_d2f>
 800daf6:	f8c8 0000 	str.w	r0, [r8]
 800dafa:	e7c4      	b.n	800da86 <_scanf_float+0x39e>
 800dafc:	2500      	movs	r5, #0
 800dafe:	e634      	b.n	800d76a <_scanf_float+0x82>
 800db00:	0801371c 	.word	0x0801371c
 800db04:	08013a88 	.word	0x08013a88

0800db08 <_puts_r>:
 800db08:	b570      	push	{r4, r5, r6, lr}
 800db0a:	460e      	mov	r6, r1
 800db0c:	4605      	mov	r5, r0
 800db0e:	b118      	cbz	r0, 800db18 <_puts_r+0x10>
 800db10:	6983      	ldr	r3, [r0, #24]
 800db12:	b90b      	cbnz	r3, 800db18 <_puts_r+0x10>
 800db14:	f002 f8bc 	bl	800fc90 <__sinit>
 800db18:	69ab      	ldr	r3, [r5, #24]
 800db1a:	68ac      	ldr	r4, [r5, #8]
 800db1c:	b913      	cbnz	r3, 800db24 <_puts_r+0x1c>
 800db1e:	4628      	mov	r0, r5
 800db20:	f002 f8b6 	bl	800fc90 <__sinit>
 800db24:	4b2c      	ldr	r3, [pc, #176]	; (800dbd8 <_puts_r+0xd0>)
 800db26:	429c      	cmp	r4, r3
 800db28:	d120      	bne.n	800db6c <_puts_r+0x64>
 800db2a:	686c      	ldr	r4, [r5, #4]
 800db2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db2e:	07db      	lsls	r3, r3, #31
 800db30:	d405      	bmi.n	800db3e <_puts_r+0x36>
 800db32:	89a3      	ldrh	r3, [r4, #12]
 800db34:	0598      	lsls	r0, r3, #22
 800db36:	d402      	bmi.n	800db3e <_puts_r+0x36>
 800db38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db3a:	f002 fcba 	bl	80104b2 <__retarget_lock_acquire_recursive>
 800db3e:	89a3      	ldrh	r3, [r4, #12]
 800db40:	0719      	lsls	r1, r3, #28
 800db42:	d51d      	bpl.n	800db80 <_puts_r+0x78>
 800db44:	6923      	ldr	r3, [r4, #16]
 800db46:	b1db      	cbz	r3, 800db80 <_puts_r+0x78>
 800db48:	3e01      	subs	r6, #1
 800db4a:	68a3      	ldr	r3, [r4, #8]
 800db4c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800db50:	3b01      	subs	r3, #1
 800db52:	60a3      	str	r3, [r4, #8]
 800db54:	bb39      	cbnz	r1, 800dba6 <_puts_r+0x9e>
 800db56:	2b00      	cmp	r3, #0
 800db58:	da38      	bge.n	800dbcc <_puts_r+0xc4>
 800db5a:	4622      	mov	r2, r4
 800db5c:	210a      	movs	r1, #10
 800db5e:	4628      	mov	r0, r5
 800db60:	f001 f81e 	bl	800eba0 <__swbuf_r>
 800db64:	3001      	adds	r0, #1
 800db66:	d011      	beq.n	800db8c <_puts_r+0x84>
 800db68:	250a      	movs	r5, #10
 800db6a:	e011      	b.n	800db90 <_puts_r+0x88>
 800db6c:	4b1b      	ldr	r3, [pc, #108]	; (800dbdc <_puts_r+0xd4>)
 800db6e:	429c      	cmp	r4, r3
 800db70:	d101      	bne.n	800db76 <_puts_r+0x6e>
 800db72:	68ac      	ldr	r4, [r5, #8]
 800db74:	e7da      	b.n	800db2c <_puts_r+0x24>
 800db76:	4b1a      	ldr	r3, [pc, #104]	; (800dbe0 <_puts_r+0xd8>)
 800db78:	429c      	cmp	r4, r3
 800db7a:	bf08      	it	eq
 800db7c:	68ec      	ldreq	r4, [r5, #12]
 800db7e:	e7d5      	b.n	800db2c <_puts_r+0x24>
 800db80:	4621      	mov	r1, r4
 800db82:	4628      	mov	r0, r5
 800db84:	f001 f870 	bl	800ec68 <__swsetup_r>
 800db88:	2800      	cmp	r0, #0
 800db8a:	d0dd      	beq.n	800db48 <_puts_r+0x40>
 800db8c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800db90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db92:	07da      	lsls	r2, r3, #31
 800db94:	d405      	bmi.n	800dba2 <_puts_r+0x9a>
 800db96:	89a3      	ldrh	r3, [r4, #12]
 800db98:	059b      	lsls	r3, r3, #22
 800db9a:	d402      	bmi.n	800dba2 <_puts_r+0x9a>
 800db9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db9e:	f002 fc89 	bl	80104b4 <__retarget_lock_release_recursive>
 800dba2:	4628      	mov	r0, r5
 800dba4:	bd70      	pop	{r4, r5, r6, pc}
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	da04      	bge.n	800dbb4 <_puts_r+0xac>
 800dbaa:	69a2      	ldr	r2, [r4, #24]
 800dbac:	429a      	cmp	r2, r3
 800dbae:	dc06      	bgt.n	800dbbe <_puts_r+0xb6>
 800dbb0:	290a      	cmp	r1, #10
 800dbb2:	d004      	beq.n	800dbbe <_puts_r+0xb6>
 800dbb4:	6823      	ldr	r3, [r4, #0]
 800dbb6:	1c5a      	adds	r2, r3, #1
 800dbb8:	6022      	str	r2, [r4, #0]
 800dbba:	7019      	strb	r1, [r3, #0]
 800dbbc:	e7c5      	b.n	800db4a <_puts_r+0x42>
 800dbbe:	4622      	mov	r2, r4
 800dbc0:	4628      	mov	r0, r5
 800dbc2:	f000 ffed 	bl	800eba0 <__swbuf_r>
 800dbc6:	3001      	adds	r0, #1
 800dbc8:	d1bf      	bne.n	800db4a <_puts_r+0x42>
 800dbca:	e7df      	b.n	800db8c <_puts_r+0x84>
 800dbcc:	6823      	ldr	r3, [r4, #0]
 800dbce:	250a      	movs	r5, #10
 800dbd0:	1c5a      	adds	r2, r3, #1
 800dbd2:	6022      	str	r2, [r4, #0]
 800dbd4:	701d      	strb	r5, [r3, #0]
 800dbd6:	e7db      	b.n	800db90 <_puts_r+0x88>
 800dbd8:	08013828 	.word	0x08013828
 800dbdc:	08013848 	.word	0x08013848
 800dbe0:	08013808 	.word	0x08013808

0800dbe4 <puts>:
 800dbe4:	4b02      	ldr	r3, [pc, #8]	; (800dbf0 <puts+0xc>)
 800dbe6:	4601      	mov	r1, r0
 800dbe8:	6818      	ldr	r0, [r3, #0]
 800dbea:	f7ff bf8d 	b.w	800db08 <_puts_r>
 800dbee:	bf00      	nop
 800dbf0:	20000178 	.word	0x20000178

0800dbf4 <_sbrk_r>:
 800dbf4:	b538      	push	{r3, r4, r5, lr}
 800dbf6:	4d06      	ldr	r5, [pc, #24]	; (800dc10 <_sbrk_r+0x1c>)
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	4604      	mov	r4, r0
 800dbfc:	4608      	mov	r0, r1
 800dbfe:	602b      	str	r3, [r5, #0]
 800dc00:	f7f7 fba0 	bl	8005344 <_sbrk>
 800dc04:	1c43      	adds	r3, r0, #1
 800dc06:	d102      	bne.n	800dc0e <_sbrk_r+0x1a>
 800dc08:	682b      	ldr	r3, [r5, #0]
 800dc0a:	b103      	cbz	r3, 800dc0e <_sbrk_r+0x1a>
 800dc0c:	6023      	str	r3, [r4, #0]
 800dc0e:	bd38      	pop	{r3, r4, r5, pc}
 800dc10:	200027e0 	.word	0x200027e0

0800dc14 <nanf>:
 800dc14:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800dc1c <nanf+0x8>
 800dc18:	4770      	bx	lr
 800dc1a:	bf00      	nop
 800dc1c:	7fc00000 	.word	0x7fc00000

0800dc20 <sniprintf>:
 800dc20:	b40c      	push	{r2, r3}
 800dc22:	b530      	push	{r4, r5, lr}
 800dc24:	4b17      	ldr	r3, [pc, #92]	; (800dc84 <sniprintf+0x64>)
 800dc26:	1e0c      	subs	r4, r1, #0
 800dc28:	681d      	ldr	r5, [r3, #0]
 800dc2a:	b09d      	sub	sp, #116	; 0x74
 800dc2c:	da08      	bge.n	800dc40 <sniprintf+0x20>
 800dc2e:	238b      	movs	r3, #139	; 0x8b
 800dc30:	602b      	str	r3, [r5, #0]
 800dc32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc36:	b01d      	add	sp, #116	; 0x74
 800dc38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc3c:	b002      	add	sp, #8
 800dc3e:	4770      	bx	lr
 800dc40:	f44f 7302 	mov.w	r3, #520	; 0x208
 800dc44:	f8ad 3014 	strh.w	r3, [sp, #20]
 800dc48:	bf14      	ite	ne
 800dc4a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800dc4e:	4623      	moveq	r3, r4
 800dc50:	9304      	str	r3, [sp, #16]
 800dc52:	9307      	str	r3, [sp, #28]
 800dc54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dc58:	9002      	str	r0, [sp, #8]
 800dc5a:	9006      	str	r0, [sp, #24]
 800dc5c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800dc60:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dc62:	ab21      	add	r3, sp, #132	; 0x84
 800dc64:	a902      	add	r1, sp, #8
 800dc66:	4628      	mov	r0, r5
 800dc68:	9301      	str	r3, [sp, #4]
 800dc6a:	f003 f9ed 	bl	8011048 <_svfiprintf_r>
 800dc6e:	1c43      	adds	r3, r0, #1
 800dc70:	bfbc      	itt	lt
 800dc72:	238b      	movlt	r3, #139	; 0x8b
 800dc74:	602b      	strlt	r3, [r5, #0]
 800dc76:	2c00      	cmp	r4, #0
 800dc78:	d0dd      	beq.n	800dc36 <sniprintf+0x16>
 800dc7a:	9b02      	ldr	r3, [sp, #8]
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	701a      	strb	r2, [r3, #0]
 800dc80:	e7d9      	b.n	800dc36 <sniprintf+0x16>
 800dc82:	bf00      	nop
 800dc84:	20000178 	.word	0x20000178

0800dc88 <siprintf>:
 800dc88:	b40e      	push	{r1, r2, r3}
 800dc8a:	b500      	push	{lr}
 800dc8c:	b09c      	sub	sp, #112	; 0x70
 800dc8e:	ab1d      	add	r3, sp, #116	; 0x74
 800dc90:	9002      	str	r0, [sp, #8]
 800dc92:	9006      	str	r0, [sp, #24]
 800dc94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dc98:	4809      	ldr	r0, [pc, #36]	; (800dcc0 <siprintf+0x38>)
 800dc9a:	9107      	str	r1, [sp, #28]
 800dc9c:	9104      	str	r1, [sp, #16]
 800dc9e:	4909      	ldr	r1, [pc, #36]	; (800dcc4 <siprintf+0x3c>)
 800dca0:	f853 2b04 	ldr.w	r2, [r3], #4
 800dca4:	9105      	str	r1, [sp, #20]
 800dca6:	6800      	ldr	r0, [r0, #0]
 800dca8:	9301      	str	r3, [sp, #4]
 800dcaa:	a902      	add	r1, sp, #8
 800dcac:	f003 f9cc 	bl	8011048 <_svfiprintf_r>
 800dcb0:	9b02      	ldr	r3, [sp, #8]
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	701a      	strb	r2, [r3, #0]
 800dcb6:	b01c      	add	sp, #112	; 0x70
 800dcb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800dcbc:	b003      	add	sp, #12
 800dcbe:	4770      	bx	lr
 800dcc0:	20000178 	.word	0x20000178
 800dcc4:	ffff0208 	.word	0xffff0208

0800dcc8 <__sread>:
 800dcc8:	b510      	push	{r4, lr}
 800dcca:	460c      	mov	r4, r1
 800dccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcd0:	f003 faba 	bl	8011248 <_read_r>
 800dcd4:	2800      	cmp	r0, #0
 800dcd6:	bfab      	itete	ge
 800dcd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dcda:	89a3      	ldrhlt	r3, [r4, #12]
 800dcdc:	181b      	addge	r3, r3, r0
 800dcde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dce2:	bfac      	ite	ge
 800dce4:	6563      	strge	r3, [r4, #84]	; 0x54
 800dce6:	81a3      	strhlt	r3, [r4, #12]
 800dce8:	bd10      	pop	{r4, pc}

0800dcea <__swrite>:
 800dcea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcee:	461f      	mov	r7, r3
 800dcf0:	898b      	ldrh	r3, [r1, #12]
 800dcf2:	05db      	lsls	r3, r3, #23
 800dcf4:	4605      	mov	r5, r0
 800dcf6:	460c      	mov	r4, r1
 800dcf8:	4616      	mov	r6, r2
 800dcfa:	d505      	bpl.n	800dd08 <__swrite+0x1e>
 800dcfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd00:	2302      	movs	r3, #2
 800dd02:	2200      	movs	r2, #0
 800dd04:	f002 fbd8 	bl	80104b8 <_lseek_r>
 800dd08:	89a3      	ldrh	r3, [r4, #12]
 800dd0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dd12:	81a3      	strh	r3, [r4, #12]
 800dd14:	4632      	mov	r2, r6
 800dd16:	463b      	mov	r3, r7
 800dd18:	4628      	mov	r0, r5
 800dd1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd1e:	f000 bf91 	b.w	800ec44 <_write_r>

0800dd22 <__sseek>:
 800dd22:	b510      	push	{r4, lr}
 800dd24:	460c      	mov	r4, r1
 800dd26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd2a:	f002 fbc5 	bl	80104b8 <_lseek_r>
 800dd2e:	1c43      	adds	r3, r0, #1
 800dd30:	89a3      	ldrh	r3, [r4, #12]
 800dd32:	bf15      	itete	ne
 800dd34:	6560      	strne	r0, [r4, #84]	; 0x54
 800dd36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dd3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dd3e:	81a3      	strheq	r3, [r4, #12]
 800dd40:	bf18      	it	ne
 800dd42:	81a3      	strhne	r3, [r4, #12]
 800dd44:	bd10      	pop	{r4, pc}

0800dd46 <__sclose>:
 800dd46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd4a:	f000 bffb 	b.w	800ed44 <_close_r>

0800dd4e <strcspn>:
 800dd4e:	b570      	push	{r4, r5, r6, lr}
 800dd50:	4603      	mov	r3, r0
 800dd52:	461e      	mov	r6, r3
 800dd54:	f813 4b01 	ldrb.w	r4, [r3], #1
 800dd58:	b144      	cbz	r4, 800dd6c <strcspn+0x1e>
 800dd5a:	1e4a      	subs	r2, r1, #1
 800dd5c:	e001      	b.n	800dd62 <strcspn+0x14>
 800dd5e:	42a5      	cmp	r5, r4
 800dd60:	d004      	beq.n	800dd6c <strcspn+0x1e>
 800dd62:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800dd66:	2d00      	cmp	r5, #0
 800dd68:	d1f9      	bne.n	800dd5e <strcspn+0x10>
 800dd6a:	e7f2      	b.n	800dd52 <strcspn+0x4>
 800dd6c:	1a30      	subs	r0, r6, r0
 800dd6e:	bd70      	pop	{r4, r5, r6, pc}

0800dd70 <strncmp>:
 800dd70:	b510      	push	{r4, lr}
 800dd72:	b17a      	cbz	r2, 800dd94 <strncmp+0x24>
 800dd74:	4603      	mov	r3, r0
 800dd76:	3901      	subs	r1, #1
 800dd78:	1884      	adds	r4, r0, r2
 800dd7a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dd7e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dd82:	4290      	cmp	r0, r2
 800dd84:	d101      	bne.n	800dd8a <strncmp+0x1a>
 800dd86:	42a3      	cmp	r3, r4
 800dd88:	d101      	bne.n	800dd8e <strncmp+0x1e>
 800dd8a:	1a80      	subs	r0, r0, r2
 800dd8c:	bd10      	pop	{r4, pc}
 800dd8e:	2800      	cmp	r0, #0
 800dd90:	d1f3      	bne.n	800dd7a <strncmp+0xa>
 800dd92:	e7fa      	b.n	800dd8a <strncmp+0x1a>
 800dd94:	4610      	mov	r0, r2
 800dd96:	e7f9      	b.n	800dd8c <strncmp+0x1c>

0800dd98 <strncpy>:
 800dd98:	b510      	push	{r4, lr}
 800dd9a:	3901      	subs	r1, #1
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	b132      	cbz	r2, 800ddae <strncpy+0x16>
 800dda0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800dda4:	f803 4b01 	strb.w	r4, [r3], #1
 800dda8:	3a01      	subs	r2, #1
 800ddaa:	2c00      	cmp	r4, #0
 800ddac:	d1f7      	bne.n	800dd9e <strncpy+0x6>
 800ddae:	441a      	add	r2, r3
 800ddb0:	2100      	movs	r1, #0
 800ddb2:	4293      	cmp	r3, r2
 800ddb4:	d100      	bne.n	800ddb8 <strncpy+0x20>
 800ddb6:	bd10      	pop	{r4, pc}
 800ddb8:	f803 1b01 	strb.w	r1, [r3], #1
 800ddbc:	e7f9      	b.n	800ddb2 <strncpy+0x1a>

0800ddbe <sulp>:
 800ddbe:	b570      	push	{r4, r5, r6, lr}
 800ddc0:	4604      	mov	r4, r0
 800ddc2:	460d      	mov	r5, r1
 800ddc4:	ec45 4b10 	vmov	d0, r4, r5
 800ddc8:	4616      	mov	r6, r2
 800ddca:	f002 ff7d 	bl	8010cc8 <__ulp>
 800ddce:	ec51 0b10 	vmov	r0, r1, d0
 800ddd2:	b17e      	cbz	r6, 800ddf4 <sulp+0x36>
 800ddd4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ddd8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	dd09      	ble.n	800ddf4 <sulp+0x36>
 800dde0:	051b      	lsls	r3, r3, #20
 800dde2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800dde6:	2400      	movs	r4, #0
 800dde8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ddec:	4622      	mov	r2, r4
 800ddee:	462b      	mov	r3, r5
 800ddf0:	f7f2 fc12 	bl	8000618 <__aeabi_dmul>
 800ddf4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ddf8 <_strtod_l>:
 800ddf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddfc:	ed2d 8b02 	vpush	{d8}
 800de00:	b09d      	sub	sp, #116	; 0x74
 800de02:	461f      	mov	r7, r3
 800de04:	2300      	movs	r3, #0
 800de06:	9318      	str	r3, [sp, #96]	; 0x60
 800de08:	4ba2      	ldr	r3, [pc, #648]	; (800e094 <_strtod_l+0x29c>)
 800de0a:	9213      	str	r2, [sp, #76]	; 0x4c
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	9305      	str	r3, [sp, #20]
 800de10:	4604      	mov	r4, r0
 800de12:	4618      	mov	r0, r3
 800de14:	4688      	mov	r8, r1
 800de16:	f7f2 f9eb 	bl	80001f0 <strlen>
 800de1a:	f04f 0a00 	mov.w	sl, #0
 800de1e:	4605      	mov	r5, r0
 800de20:	f04f 0b00 	mov.w	fp, #0
 800de24:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800de28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800de2a:	781a      	ldrb	r2, [r3, #0]
 800de2c:	2a2b      	cmp	r2, #43	; 0x2b
 800de2e:	d04e      	beq.n	800dece <_strtod_l+0xd6>
 800de30:	d83b      	bhi.n	800deaa <_strtod_l+0xb2>
 800de32:	2a0d      	cmp	r2, #13
 800de34:	d834      	bhi.n	800dea0 <_strtod_l+0xa8>
 800de36:	2a08      	cmp	r2, #8
 800de38:	d834      	bhi.n	800dea4 <_strtod_l+0xac>
 800de3a:	2a00      	cmp	r2, #0
 800de3c:	d03e      	beq.n	800debc <_strtod_l+0xc4>
 800de3e:	2300      	movs	r3, #0
 800de40:	930a      	str	r3, [sp, #40]	; 0x28
 800de42:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800de44:	7833      	ldrb	r3, [r6, #0]
 800de46:	2b30      	cmp	r3, #48	; 0x30
 800de48:	f040 80b0 	bne.w	800dfac <_strtod_l+0x1b4>
 800de4c:	7873      	ldrb	r3, [r6, #1]
 800de4e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800de52:	2b58      	cmp	r3, #88	; 0x58
 800de54:	d168      	bne.n	800df28 <_strtod_l+0x130>
 800de56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de58:	9301      	str	r3, [sp, #4]
 800de5a:	ab18      	add	r3, sp, #96	; 0x60
 800de5c:	9702      	str	r7, [sp, #8]
 800de5e:	9300      	str	r3, [sp, #0]
 800de60:	4a8d      	ldr	r2, [pc, #564]	; (800e098 <_strtod_l+0x2a0>)
 800de62:	ab19      	add	r3, sp, #100	; 0x64
 800de64:	a917      	add	r1, sp, #92	; 0x5c
 800de66:	4620      	mov	r0, r4
 800de68:	f002 f816 	bl	800fe98 <__gethex>
 800de6c:	f010 0707 	ands.w	r7, r0, #7
 800de70:	4605      	mov	r5, r0
 800de72:	d005      	beq.n	800de80 <_strtod_l+0x88>
 800de74:	2f06      	cmp	r7, #6
 800de76:	d12c      	bne.n	800ded2 <_strtod_l+0xda>
 800de78:	3601      	adds	r6, #1
 800de7a:	2300      	movs	r3, #0
 800de7c:	9617      	str	r6, [sp, #92]	; 0x5c
 800de7e:	930a      	str	r3, [sp, #40]	; 0x28
 800de80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800de82:	2b00      	cmp	r3, #0
 800de84:	f040 8590 	bne.w	800e9a8 <_strtod_l+0xbb0>
 800de88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de8a:	b1eb      	cbz	r3, 800dec8 <_strtod_l+0xd0>
 800de8c:	4652      	mov	r2, sl
 800de8e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800de92:	ec43 2b10 	vmov	d0, r2, r3
 800de96:	b01d      	add	sp, #116	; 0x74
 800de98:	ecbd 8b02 	vpop	{d8}
 800de9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dea0:	2a20      	cmp	r2, #32
 800dea2:	d1cc      	bne.n	800de3e <_strtod_l+0x46>
 800dea4:	3301      	adds	r3, #1
 800dea6:	9317      	str	r3, [sp, #92]	; 0x5c
 800dea8:	e7be      	b.n	800de28 <_strtod_l+0x30>
 800deaa:	2a2d      	cmp	r2, #45	; 0x2d
 800deac:	d1c7      	bne.n	800de3e <_strtod_l+0x46>
 800deae:	2201      	movs	r2, #1
 800deb0:	920a      	str	r2, [sp, #40]	; 0x28
 800deb2:	1c5a      	adds	r2, r3, #1
 800deb4:	9217      	str	r2, [sp, #92]	; 0x5c
 800deb6:	785b      	ldrb	r3, [r3, #1]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d1c2      	bne.n	800de42 <_strtod_l+0x4a>
 800debc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800debe:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	f040 856e 	bne.w	800e9a4 <_strtod_l+0xbac>
 800dec8:	4652      	mov	r2, sl
 800deca:	465b      	mov	r3, fp
 800decc:	e7e1      	b.n	800de92 <_strtod_l+0x9a>
 800dece:	2200      	movs	r2, #0
 800ded0:	e7ee      	b.n	800deb0 <_strtod_l+0xb8>
 800ded2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ded4:	b13a      	cbz	r2, 800dee6 <_strtod_l+0xee>
 800ded6:	2135      	movs	r1, #53	; 0x35
 800ded8:	a81a      	add	r0, sp, #104	; 0x68
 800deda:	f003 f800 	bl	8010ede <__copybits>
 800dede:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dee0:	4620      	mov	r0, r4
 800dee2:	f002 fbbf 	bl	8010664 <_Bfree>
 800dee6:	3f01      	subs	r7, #1
 800dee8:	2f04      	cmp	r7, #4
 800deea:	d806      	bhi.n	800defa <_strtod_l+0x102>
 800deec:	e8df f007 	tbb	[pc, r7]
 800def0:	1714030a 	.word	0x1714030a
 800def4:	0a          	.byte	0x0a
 800def5:	00          	.byte	0x00
 800def6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800defa:	0728      	lsls	r0, r5, #28
 800defc:	d5c0      	bpl.n	800de80 <_strtod_l+0x88>
 800defe:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800df02:	e7bd      	b.n	800de80 <_strtod_l+0x88>
 800df04:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800df08:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800df0a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800df0e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800df12:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800df16:	e7f0      	b.n	800defa <_strtod_l+0x102>
 800df18:	f8df b180 	ldr.w	fp, [pc, #384]	; 800e09c <_strtod_l+0x2a4>
 800df1c:	e7ed      	b.n	800defa <_strtod_l+0x102>
 800df1e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800df22:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800df26:	e7e8      	b.n	800defa <_strtod_l+0x102>
 800df28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800df2a:	1c5a      	adds	r2, r3, #1
 800df2c:	9217      	str	r2, [sp, #92]	; 0x5c
 800df2e:	785b      	ldrb	r3, [r3, #1]
 800df30:	2b30      	cmp	r3, #48	; 0x30
 800df32:	d0f9      	beq.n	800df28 <_strtod_l+0x130>
 800df34:	2b00      	cmp	r3, #0
 800df36:	d0a3      	beq.n	800de80 <_strtod_l+0x88>
 800df38:	2301      	movs	r3, #1
 800df3a:	f04f 0900 	mov.w	r9, #0
 800df3e:	9304      	str	r3, [sp, #16]
 800df40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800df42:	9308      	str	r3, [sp, #32]
 800df44:	f8cd 901c 	str.w	r9, [sp, #28]
 800df48:	464f      	mov	r7, r9
 800df4a:	220a      	movs	r2, #10
 800df4c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800df4e:	7806      	ldrb	r6, [r0, #0]
 800df50:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800df54:	b2d9      	uxtb	r1, r3
 800df56:	2909      	cmp	r1, #9
 800df58:	d92a      	bls.n	800dfb0 <_strtod_l+0x1b8>
 800df5a:	9905      	ldr	r1, [sp, #20]
 800df5c:	462a      	mov	r2, r5
 800df5e:	f7ff ff07 	bl	800dd70 <strncmp>
 800df62:	b398      	cbz	r0, 800dfcc <_strtod_l+0x1d4>
 800df64:	2000      	movs	r0, #0
 800df66:	4632      	mov	r2, r6
 800df68:	463d      	mov	r5, r7
 800df6a:	9005      	str	r0, [sp, #20]
 800df6c:	4603      	mov	r3, r0
 800df6e:	2a65      	cmp	r2, #101	; 0x65
 800df70:	d001      	beq.n	800df76 <_strtod_l+0x17e>
 800df72:	2a45      	cmp	r2, #69	; 0x45
 800df74:	d118      	bne.n	800dfa8 <_strtod_l+0x1b0>
 800df76:	b91d      	cbnz	r5, 800df80 <_strtod_l+0x188>
 800df78:	9a04      	ldr	r2, [sp, #16]
 800df7a:	4302      	orrs	r2, r0
 800df7c:	d09e      	beq.n	800debc <_strtod_l+0xc4>
 800df7e:	2500      	movs	r5, #0
 800df80:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800df84:	f108 0201 	add.w	r2, r8, #1
 800df88:	9217      	str	r2, [sp, #92]	; 0x5c
 800df8a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800df8e:	2a2b      	cmp	r2, #43	; 0x2b
 800df90:	d075      	beq.n	800e07e <_strtod_l+0x286>
 800df92:	2a2d      	cmp	r2, #45	; 0x2d
 800df94:	d07b      	beq.n	800e08e <_strtod_l+0x296>
 800df96:	f04f 0c00 	mov.w	ip, #0
 800df9a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800df9e:	2909      	cmp	r1, #9
 800dfa0:	f240 8082 	bls.w	800e0a8 <_strtod_l+0x2b0>
 800dfa4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800dfa8:	2600      	movs	r6, #0
 800dfaa:	e09d      	b.n	800e0e8 <_strtod_l+0x2f0>
 800dfac:	2300      	movs	r3, #0
 800dfae:	e7c4      	b.n	800df3a <_strtod_l+0x142>
 800dfb0:	2f08      	cmp	r7, #8
 800dfb2:	bfd8      	it	le
 800dfb4:	9907      	ldrle	r1, [sp, #28]
 800dfb6:	f100 0001 	add.w	r0, r0, #1
 800dfba:	bfda      	itte	le
 800dfbc:	fb02 3301 	mlale	r3, r2, r1, r3
 800dfc0:	9307      	strle	r3, [sp, #28]
 800dfc2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800dfc6:	3701      	adds	r7, #1
 800dfc8:	9017      	str	r0, [sp, #92]	; 0x5c
 800dfca:	e7bf      	b.n	800df4c <_strtod_l+0x154>
 800dfcc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dfce:	195a      	adds	r2, r3, r5
 800dfd0:	9217      	str	r2, [sp, #92]	; 0x5c
 800dfd2:	5d5a      	ldrb	r2, [r3, r5]
 800dfd4:	2f00      	cmp	r7, #0
 800dfd6:	d037      	beq.n	800e048 <_strtod_l+0x250>
 800dfd8:	9005      	str	r0, [sp, #20]
 800dfda:	463d      	mov	r5, r7
 800dfdc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800dfe0:	2b09      	cmp	r3, #9
 800dfe2:	d912      	bls.n	800e00a <_strtod_l+0x212>
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	e7c2      	b.n	800df6e <_strtod_l+0x176>
 800dfe8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dfea:	1c5a      	adds	r2, r3, #1
 800dfec:	9217      	str	r2, [sp, #92]	; 0x5c
 800dfee:	785a      	ldrb	r2, [r3, #1]
 800dff0:	3001      	adds	r0, #1
 800dff2:	2a30      	cmp	r2, #48	; 0x30
 800dff4:	d0f8      	beq.n	800dfe8 <_strtod_l+0x1f0>
 800dff6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800dffa:	2b08      	cmp	r3, #8
 800dffc:	f200 84d9 	bhi.w	800e9b2 <_strtod_l+0xbba>
 800e000:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e002:	9005      	str	r0, [sp, #20]
 800e004:	2000      	movs	r0, #0
 800e006:	9308      	str	r3, [sp, #32]
 800e008:	4605      	mov	r5, r0
 800e00a:	3a30      	subs	r2, #48	; 0x30
 800e00c:	f100 0301 	add.w	r3, r0, #1
 800e010:	d014      	beq.n	800e03c <_strtod_l+0x244>
 800e012:	9905      	ldr	r1, [sp, #20]
 800e014:	4419      	add	r1, r3
 800e016:	9105      	str	r1, [sp, #20]
 800e018:	462b      	mov	r3, r5
 800e01a:	eb00 0e05 	add.w	lr, r0, r5
 800e01e:	210a      	movs	r1, #10
 800e020:	4573      	cmp	r3, lr
 800e022:	d113      	bne.n	800e04c <_strtod_l+0x254>
 800e024:	182b      	adds	r3, r5, r0
 800e026:	2b08      	cmp	r3, #8
 800e028:	f105 0501 	add.w	r5, r5, #1
 800e02c:	4405      	add	r5, r0
 800e02e:	dc1c      	bgt.n	800e06a <_strtod_l+0x272>
 800e030:	9907      	ldr	r1, [sp, #28]
 800e032:	230a      	movs	r3, #10
 800e034:	fb03 2301 	mla	r3, r3, r1, r2
 800e038:	9307      	str	r3, [sp, #28]
 800e03a:	2300      	movs	r3, #0
 800e03c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e03e:	1c51      	adds	r1, r2, #1
 800e040:	9117      	str	r1, [sp, #92]	; 0x5c
 800e042:	7852      	ldrb	r2, [r2, #1]
 800e044:	4618      	mov	r0, r3
 800e046:	e7c9      	b.n	800dfdc <_strtod_l+0x1e4>
 800e048:	4638      	mov	r0, r7
 800e04a:	e7d2      	b.n	800dff2 <_strtod_l+0x1fa>
 800e04c:	2b08      	cmp	r3, #8
 800e04e:	dc04      	bgt.n	800e05a <_strtod_l+0x262>
 800e050:	9e07      	ldr	r6, [sp, #28]
 800e052:	434e      	muls	r6, r1
 800e054:	9607      	str	r6, [sp, #28]
 800e056:	3301      	adds	r3, #1
 800e058:	e7e2      	b.n	800e020 <_strtod_l+0x228>
 800e05a:	f103 0c01 	add.w	ip, r3, #1
 800e05e:	f1bc 0f10 	cmp.w	ip, #16
 800e062:	bfd8      	it	le
 800e064:	fb01 f909 	mulle.w	r9, r1, r9
 800e068:	e7f5      	b.n	800e056 <_strtod_l+0x25e>
 800e06a:	2d10      	cmp	r5, #16
 800e06c:	bfdc      	itt	le
 800e06e:	230a      	movle	r3, #10
 800e070:	fb03 2909 	mlale	r9, r3, r9, r2
 800e074:	e7e1      	b.n	800e03a <_strtod_l+0x242>
 800e076:	2300      	movs	r3, #0
 800e078:	9305      	str	r3, [sp, #20]
 800e07a:	2301      	movs	r3, #1
 800e07c:	e77c      	b.n	800df78 <_strtod_l+0x180>
 800e07e:	f04f 0c00 	mov.w	ip, #0
 800e082:	f108 0202 	add.w	r2, r8, #2
 800e086:	9217      	str	r2, [sp, #92]	; 0x5c
 800e088:	f898 2002 	ldrb.w	r2, [r8, #2]
 800e08c:	e785      	b.n	800df9a <_strtod_l+0x1a2>
 800e08e:	f04f 0c01 	mov.w	ip, #1
 800e092:	e7f6      	b.n	800e082 <_strtod_l+0x28a>
 800e094:	080138d0 	.word	0x080138d0
 800e098:	08013724 	.word	0x08013724
 800e09c:	7ff00000 	.word	0x7ff00000
 800e0a0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e0a2:	1c51      	adds	r1, r2, #1
 800e0a4:	9117      	str	r1, [sp, #92]	; 0x5c
 800e0a6:	7852      	ldrb	r2, [r2, #1]
 800e0a8:	2a30      	cmp	r2, #48	; 0x30
 800e0aa:	d0f9      	beq.n	800e0a0 <_strtod_l+0x2a8>
 800e0ac:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800e0b0:	2908      	cmp	r1, #8
 800e0b2:	f63f af79 	bhi.w	800dfa8 <_strtod_l+0x1b0>
 800e0b6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800e0ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e0bc:	9206      	str	r2, [sp, #24]
 800e0be:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e0c0:	1c51      	adds	r1, r2, #1
 800e0c2:	9117      	str	r1, [sp, #92]	; 0x5c
 800e0c4:	7852      	ldrb	r2, [r2, #1]
 800e0c6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800e0ca:	2e09      	cmp	r6, #9
 800e0cc:	d937      	bls.n	800e13e <_strtod_l+0x346>
 800e0ce:	9e06      	ldr	r6, [sp, #24]
 800e0d0:	1b89      	subs	r1, r1, r6
 800e0d2:	2908      	cmp	r1, #8
 800e0d4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800e0d8:	dc02      	bgt.n	800e0e0 <_strtod_l+0x2e8>
 800e0da:	4576      	cmp	r6, lr
 800e0dc:	bfa8      	it	ge
 800e0de:	4676      	movge	r6, lr
 800e0e0:	f1bc 0f00 	cmp.w	ip, #0
 800e0e4:	d000      	beq.n	800e0e8 <_strtod_l+0x2f0>
 800e0e6:	4276      	negs	r6, r6
 800e0e8:	2d00      	cmp	r5, #0
 800e0ea:	d14d      	bne.n	800e188 <_strtod_l+0x390>
 800e0ec:	9904      	ldr	r1, [sp, #16]
 800e0ee:	4301      	orrs	r1, r0
 800e0f0:	f47f aec6 	bne.w	800de80 <_strtod_l+0x88>
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	f47f aee1 	bne.w	800debc <_strtod_l+0xc4>
 800e0fa:	2a69      	cmp	r2, #105	; 0x69
 800e0fc:	d027      	beq.n	800e14e <_strtod_l+0x356>
 800e0fe:	dc24      	bgt.n	800e14a <_strtod_l+0x352>
 800e100:	2a49      	cmp	r2, #73	; 0x49
 800e102:	d024      	beq.n	800e14e <_strtod_l+0x356>
 800e104:	2a4e      	cmp	r2, #78	; 0x4e
 800e106:	f47f aed9 	bne.w	800debc <_strtod_l+0xc4>
 800e10a:	499f      	ldr	r1, [pc, #636]	; (800e388 <_strtod_l+0x590>)
 800e10c:	a817      	add	r0, sp, #92	; 0x5c
 800e10e:	f002 f91b 	bl	8010348 <__match>
 800e112:	2800      	cmp	r0, #0
 800e114:	f43f aed2 	beq.w	800debc <_strtod_l+0xc4>
 800e118:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e11a:	781b      	ldrb	r3, [r3, #0]
 800e11c:	2b28      	cmp	r3, #40	; 0x28
 800e11e:	d12d      	bne.n	800e17c <_strtod_l+0x384>
 800e120:	499a      	ldr	r1, [pc, #616]	; (800e38c <_strtod_l+0x594>)
 800e122:	aa1a      	add	r2, sp, #104	; 0x68
 800e124:	a817      	add	r0, sp, #92	; 0x5c
 800e126:	f002 f923 	bl	8010370 <__hexnan>
 800e12a:	2805      	cmp	r0, #5
 800e12c:	d126      	bne.n	800e17c <_strtod_l+0x384>
 800e12e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e130:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800e134:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e138:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e13c:	e6a0      	b.n	800de80 <_strtod_l+0x88>
 800e13e:	210a      	movs	r1, #10
 800e140:	fb01 2e0e 	mla	lr, r1, lr, r2
 800e144:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e148:	e7b9      	b.n	800e0be <_strtod_l+0x2c6>
 800e14a:	2a6e      	cmp	r2, #110	; 0x6e
 800e14c:	e7db      	b.n	800e106 <_strtod_l+0x30e>
 800e14e:	4990      	ldr	r1, [pc, #576]	; (800e390 <_strtod_l+0x598>)
 800e150:	a817      	add	r0, sp, #92	; 0x5c
 800e152:	f002 f8f9 	bl	8010348 <__match>
 800e156:	2800      	cmp	r0, #0
 800e158:	f43f aeb0 	beq.w	800debc <_strtod_l+0xc4>
 800e15c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e15e:	498d      	ldr	r1, [pc, #564]	; (800e394 <_strtod_l+0x59c>)
 800e160:	3b01      	subs	r3, #1
 800e162:	a817      	add	r0, sp, #92	; 0x5c
 800e164:	9317      	str	r3, [sp, #92]	; 0x5c
 800e166:	f002 f8ef 	bl	8010348 <__match>
 800e16a:	b910      	cbnz	r0, 800e172 <_strtod_l+0x37a>
 800e16c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e16e:	3301      	adds	r3, #1
 800e170:	9317      	str	r3, [sp, #92]	; 0x5c
 800e172:	f8df b230 	ldr.w	fp, [pc, #560]	; 800e3a4 <_strtod_l+0x5ac>
 800e176:	f04f 0a00 	mov.w	sl, #0
 800e17a:	e681      	b.n	800de80 <_strtod_l+0x88>
 800e17c:	4886      	ldr	r0, [pc, #536]	; (800e398 <_strtod_l+0x5a0>)
 800e17e:	f003 f877 	bl	8011270 <nan>
 800e182:	ec5b ab10 	vmov	sl, fp, d0
 800e186:	e67b      	b.n	800de80 <_strtod_l+0x88>
 800e188:	9b05      	ldr	r3, [sp, #20]
 800e18a:	9807      	ldr	r0, [sp, #28]
 800e18c:	1af3      	subs	r3, r6, r3
 800e18e:	2f00      	cmp	r7, #0
 800e190:	bf08      	it	eq
 800e192:	462f      	moveq	r7, r5
 800e194:	2d10      	cmp	r5, #16
 800e196:	9306      	str	r3, [sp, #24]
 800e198:	46a8      	mov	r8, r5
 800e19a:	bfa8      	it	ge
 800e19c:	f04f 0810 	movge.w	r8, #16
 800e1a0:	f7f2 f9c0 	bl	8000524 <__aeabi_ui2d>
 800e1a4:	2d09      	cmp	r5, #9
 800e1a6:	4682      	mov	sl, r0
 800e1a8:	468b      	mov	fp, r1
 800e1aa:	dd13      	ble.n	800e1d4 <_strtod_l+0x3dc>
 800e1ac:	4b7b      	ldr	r3, [pc, #492]	; (800e39c <_strtod_l+0x5a4>)
 800e1ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e1b2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e1b6:	f7f2 fa2f 	bl	8000618 <__aeabi_dmul>
 800e1ba:	4682      	mov	sl, r0
 800e1bc:	4648      	mov	r0, r9
 800e1be:	468b      	mov	fp, r1
 800e1c0:	f7f2 f9b0 	bl	8000524 <__aeabi_ui2d>
 800e1c4:	4602      	mov	r2, r0
 800e1c6:	460b      	mov	r3, r1
 800e1c8:	4650      	mov	r0, sl
 800e1ca:	4659      	mov	r1, fp
 800e1cc:	f7f2 f86e 	bl	80002ac <__adddf3>
 800e1d0:	4682      	mov	sl, r0
 800e1d2:	468b      	mov	fp, r1
 800e1d4:	2d0f      	cmp	r5, #15
 800e1d6:	dc38      	bgt.n	800e24a <_strtod_l+0x452>
 800e1d8:	9b06      	ldr	r3, [sp, #24]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	f43f ae50 	beq.w	800de80 <_strtod_l+0x88>
 800e1e0:	dd24      	ble.n	800e22c <_strtod_l+0x434>
 800e1e2:	2b16      	cmp	r3, #22
 800e1e4:	dc0b      	bgt.n	800e1fe <_strtod_l+0x406>
 800e1e6:	496d      	ldr	r1, [pc, #436]	; (800e39c <_strtod_l+0x5a4>)
 800e1e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e1ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1f0:	4652      	mov	r2, sl
 800e1f2:	465b      	mov	r3, fp
 800e1f4:	f7f2 fa10 	bl	8000618 <__aeabi_dmul>
 800e1f8:	4682      	mov	sl, r0
 800e1fa:	468b      	mov	fp, r1
 800e1fc:	e640      	b.n	800de80 <_strtod_l+0x88>
 800e1fe:	9a06      	ldr	r2, [sp, #24]
 800e200:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800e204:	4293      	cmp	r3, r2
 800e206:	db20      	blt.n	800e24a <_strtod_l+0x452>
 800e208:	4c64      	ldr	r4, [pc, #400]	; (800e39c <_strtod_l+0x5a4>)
 800e20a:	f1c5 050f 	rsb	r5, r5, #15
 800e20e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e212:	4652      	mov	r2, sl
 800e214:	465b      	mov	r3, fp
 800e216:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e21a:	f7f2 f9fd 	bl	8000618 <__aeabi_dmul>
 800e21e:	9b06      	ldr	r3, [sp, #24]
 800e220:	1b5d      	subs	r5, r3, r5
 800e222:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e226:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e22a:	e7e3      	b.n	800e1f4 <_strtod_l+0x3fc>
 800e22c:	9b06      	ldr	r3, [sp, #24]
 800e22e:	3316      	adds	r3, #22
 800e230:	db0b      	blt.n	800e24a <_strtod_l+0x452>
 800e232:	9b05      	ldr	r3, [sp, #20]
 800e234:	1b9e      	subs	r6, r3, r6
 800e236:	4b59      	ldr	r3, [pc, #356]	; (800e39c <_strtod_l+0x5a4>)
 800e238:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800e23c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e240:	4650      	mov	r0, sl
 800e242:	4659      	mov	r1, fp
 800e244:	f7f2 fb12 	bl	800086c <__aeabi_ddiv>
 800e248:	e7d6      	b.n	800e1f8 <_strtod_l+0x400>
 800e24a:	9b06      	ldr	r3, [sp, #24]
 800e24c:	eba5 0808 	sub.w	r8, r5, r8
 800e250:	4498      	add	r8, r3
 800e252:	f1b8 0f00 	cmp.w	r8, #0
 800e256:	dd74      	ble.n	800e342 <_strtod_l+0x54a>
 800e258:	f018 030f 	ands.w	r3, r8, #15
 800e25c:	d00a      	beq.n	800e274 <_strtod_l+0x47c>
 800e25e:	494f      	ldr	r1, [pc, #316]	; (800e39c <_strtod_l+0x5a4>)
 800e260:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e264:	4652      	mov	r2, sl
 800e266:	465b      	mov	r3, fp
 800e268:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e26c:	f7f2 f9d4 	bl	8000618 <__aeabi_dmul>
 800e270:	4682      	mov	sl, r0
 800e272:	468b      	mov	fp, r1
 800e274:	f038 080f 	bics.w	r8, r8, #15
 800e278:	d04f      	beq.n	800e31a <_strtod_l+0x522>
 800e27a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e27e:	dd22      	ble.n	800e2c6 <_strtod_l+0x4ce>
 800e280:	2500      	movs	r5, #0
 800e282:	462e      	mov	r6, r5
 800e284:	9507      	str	r5, [sp, #28]
 800e286:	9505      	str	r5, [sp, #20]
 800e288:	2322      	movs	r3, #34	; 0x22
 800e28a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800e3a4 <_strtod_l+0x5ac>
 800e28e:	6023      	str	r3, [r4, #0]
 800e290:	f04f 0a00 	mov.w	sl, #0
 800e294:	9b07      	ldr	r3, [sp, #28]
 800e296:	2b00      	cmp	r3, #0
 800e298:	f43f adf2 	beq.w	800de80 <_strtod_l+0x88>
 800e29c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e29e:	4620      	mov	r0, r4
 800e2a0:	f002 f9e0 	bl	8010664 <_Bfree>
 800e2a4:	9905      	ldr	r1, [sp, #20]
 800e2a6:	4620      	mov	r0, r4
 800e2a8:	f002 f9dc 	bl	8010664 <_Bfree>
 800e2ac:	4631      	mov	r1, r6
 800e2ae:	4620      	mov	r0, r4
 800e2b0:	f002 f9d8 	bl	8010664 <_Bfree>
 800e2b4:	9907      	ldr	r1, [sp, #28]
 800e2b6:	4620      	mov	r0, r4
 800e2b8:	f002 f9d4 	bl	8010664 <_Bfree>
 800e2bc:	4629      	mov	r1, r5
 800e2be:	4620      	mov	r0, r4
 800e2c0:	f002 f9d0 	bl	8010664 <_Bfree>
 800e2c4:	e5dc      	b.n	800de80 <_strtod_l+0x88>
 800e2c6:	4b36      	ldr	r3, [pc, #216]	; (800e3a0 <_strtod_l+0x5a8>)
 800e2c8:	9304      	str	r3, [sp, #16]
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e2d0:	4650      	mov	r0, sl
 800e2d2:	4659      	mov	r1, fp
 800e2d4:	4699      	mov	r9, r3
 800e2d6:	f1b8 0f01 	cmp.w	r8, #1
 800e2da:	dc21      	bgt.n	800e320 <_strtod_l+0x528>
 800e2dc:	b10b      	cbz	r3, 800e2e2 <_strtod_l+0x4ea>
 800e2de:	4682      	mov	sl, r0
 800e2e0:	468b      	mov	fp, r1
 800e2e2:	4b2f      	ldr	r3, [pc, #188]	; (800e3a0 <_strtod_l+0x5a8>)
 800e2e4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e2e8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800e2ec:	4652      	mov	r2, sl
 800e2ee:	465b      	mov	r3, fp
 800e2f0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800e2f4:	f7f2 f990 	bl	8000618 <__aeabi_dmul>
 800e2f8:	4b2a      	ldr	r3, [pc, #168]	; (800e3a4 <_strtod_l+0x5ac>)
 800e2fa:	460a      	mov	r2, r1
 800e2fc:	400b      	ands	r3, r1
 800e2fe:	492a      	ldr	r1, [pc, #168]	; (800e3a8 <_strtod_l+0x5b0>)
 800e300:	428b      	cmp	r3, r1
 800e302:	4682      	mov	sl, r0
 800e304:	d8bc      	bhi.n	800e280 <_strtod_l+0x488>
 800e306:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e30a:	428b      	cmp	r3, r1
 800e30c:	bf86      	itte	hi
 800e30e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800e3ac <_strtod_l+0x5b4>
 800e312:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800e316:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e31a:	2300      	movs	r3, #0
 800e31c:	9304      	str	r3, [sp, #16]
 800e31e:	e084      	b.n	800e42a <_strtod_l+0x632>
 800e320:	f018 0f01 	tst.w	r8, #1
 800e324:	d005      	beq.n	800e332 <_strtod_l+0x53a>
 800e326:	9b04      	ldr	r3, [sp, #16]
 800e328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e32c:	f7f2 f974 	bl	8000618 <__aeabi_dmul>
 800e330:	2301      	movs	r3, #1
 800e332:	9a04      	ldr	r2, [sp, #16]
 800e334:	3208      	adds	r2, #8
 800e336:	f109 0901 	add.w	r9, r9, #1
 800e33a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e33e:	9204      	str	r2, [sp, #16]
 800e340:	e7c9      	b.n	800e2d6 <_strtod_l+0x4de>
 800e342:	d0ea      	beq.n	800e31a <_strtod_l+0x522>
 800e344:	f1c8 0800 	rsb	r8, r8, #0
 800e348:	f018 020f 	ands.w	r2, r8, #15
 800e34c:	d00a      	beq.n	800e364 <_strtod_l+0x56c>
 800e34e:	4b13      	ldr	r3, [pc, #76]	; (800e39c <_strtod_l+0x5a4>)
 800e350:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e354:	4650      	mov	r0, sl
 800e356:	4659      	mov	r1, fp
 800e358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e35c:	f7f2 fa86 	bl	800086c <__aeabi_ddiv>
 800e360:	4682      	mov	sl, r0
 800e362:	468b      	mov	fp, r1
 800e364:	ea5f 1828 	movs.w	r8, r8, asr #4
 800e368:	d0d7      	beq.n	800e31a <_strtod_l+0x522>
 800e36a:	f1b8 0f1f 	cmp.w	r8, #31
 800e36e:	dd1f      	ble.n	800e3b0 <_strtod_l+0x5b8>
 800e370:	2500      	movs	r5, #0
 800e372:	462e      	mov	r6, r5
 800e374:	9507      	str	r5, [sp, #28]
 800e376:	9505      	str	r5, [sp, #20]
 800e378:	2322      	movs	r3, #34	; 0x22
 800e37a:	f04f 0a00 	mov.w	sl, #0
 800e37e:	f04f 0b00 	mov.w	fp, #0
 800e382:	6023      	str	r3, [r4, #0]
 800e384:	e786      	b.n	800e294 <_strtod_l+0x49c>
 800e386:	bf00      	nop
 800e388:	080136f5 	.word	0x080136f5
 800e38c:	08013738 	.word	0x08013738
 800e390:	080136ed 	.word	0x080136ed
 800e394:	0801377b 	.word	0x0801377b
 800e398:	08013a88 	.word	0x08013a88
 800e39c:	08013968 	.word	0x08013968
 800e3a0:	08013940 	.word	0x08013940
 800e3a4:	7ff00000 	.word	0x7ff00000
 800e3a8:	7ca00000 	.word	0x7ca00000
 800e3ac:	7fefffff 	.word	0x7fefffff
 800e3b0:	f018 0310 	ands.w	r3, r8, #16
 800e3b4:	bf18      	it	ne
 800e3b6:	236a      	movne	r3, #106	; 0x6a
 800e3b8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800e768 <_strtod_l+0x970>
 800e3bc:	9304      	str	r3, [sp, #16]
 800e3be:	4650      	mov	r0, sl
 800e3c0:	4659      	mov	r1, fp
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	f018 0f01 	tst.w	r8, #1
 800e3c8:	d004      	beq.n	800e3d4 <_strtod_l+0x5dc>
 800e3ca:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e3ce:	f7f2 f923 	bl	8000618 <__aeabi_dmul>
 800e3d2:	2301      	movs	r3, #1
 800e3d4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800e3d8:	f109 0908 	add.w	r9, r9, #8
 800e3dc:	d1f2      	bne.n	800e3c4 <_strtod_l+0x5cc>
 800e3de:	b10b      	cbz	r3, 800e3e4 <_strtod_l+0x5ec>
 800e3e0:	4682      	mov	sl, r0
 800e3e2:	468b      	mov	fp, r1
 800e3e4:	9b04      	ldr	r3, [sp, #16]
 800e3e6:	b1c3      	cbz	r3, 800e41a <_strtod_l+0x622>
 800e3e8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e3ec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	4659      	mov	r1, fp
 800e3f4:	dd11      	ble.n	800e41a <_strtod_l+0x622>
 800e3f6:	2b1f      	cmp	r3, #31
 800e3f8:	f340 8124 	ble.w	800e644 <_strtod_l+0x84c>
 800e3fc:	2b34      	cmp	r3, #52	; 0x34
 800e3fe:	bfde      	ittt	le
 800e400:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800e404:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800e408:	fa03 f202 	lslle.w	r2, r3, r2
 800e40c:	f04f 0a00 	mov.w	sl, #0
 800e410:	bfcc      	ite	gt
 800e412:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800e416:	ea02 0b01 	andle.w	fp, r2, r1
 800e41a:	2200      	movs	r2, #0
 800e41c:	2300      	movs	r3, #0
 800e41e:	4650      	mov	r0, sl
 800e420:	4659      	mov	r1, fp
 800e422:	f7f2 fb61 	bl	8000ae8 <__aeabi_dcmpeq>
 800e426:	2800      	cmp	r0, #0
 800e428:	d1a2      	bne.n	800e370 <_strtod_l+0x578>
 800e42a:	9b07      	ldr	r3, [sp, #28]
 800e42c:	9300      	str	r3, [sp, #0]
 800e42e:	9908      	ldr	r1, [sp, #32]
 800e430:	462b      	mov	r3, r5
 800e432:	463a      	mov	r2, r7
 800e434:	4620      	mov	r0, r4
 800e436:	f002 f97d 	bl	8010734 <__s2b>
 800e43a:	9007      	str	r0, [sp, #28]
 800e43c:	2800      	cmp	r0, #0
 800e43e:	f43f af1f 	beq.w	800e280 <_strtod_l+0x488>
 800e442:	9b05      	ldr	r3, [sp, #20]
 800e444:	1b9e      	subs	r6, r3, r6
 800e446:	9b06      	ldr	r3, [sp, #24]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	bfb4      	ite	lt
 800e44c:	4633      	movlt	r3, r6
 800e44e:	2300      	movge	r3, #0
 800e450:	930c      	str	r3, [sp, #48]	; 0x30
 800e452:	9b06      	ldr	r3, [sp, #24]
 800e454:	2500      	movs	r5, #0
 800e456:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e45a:	9312      	str	r3, [sp, #72]	; 0x48
 800e45c:	462e      	mov	r6, r5
 800e45e:	9b07      	ldr	r3, [sp, #28]
 800e460:	4620      	mov	r0, r4
 800e462:	6859      	ldr	r1, [r3, #4]
 800e464:	f002 f8be 	bl	80105e4 <_Balloc>
 800e468:	9005      	str	r0, [sp, #20]
 800e46a:	2800      	cmp	r0, #0
 800e46c:	f43f af0c 	beq.w	800e288 <_strtod_l+0x490>
 800e470:	9b07      	ldr	r3, [sp, #28]
 800e472:	691a      	ldr	r2, [r3, #16]
 800e474:	3202      	adds	r2, #2
 800e476:	f103 010c 	add.w	r1, r3, #12
 800e47a:	0092      	lsls	r2, r2, #2
 800e47c:	300c      	adds	r0, #12
 800e47e:	f7fe fbd3 	bl	800cc28 <memcpy>
 800e482:	ec4b ab10 	vmov	d0, sl, fp
 800e486:	aa1a      	add	r2, sp, #104	; 0x68
 800e488:	a919      	add	r1, sp, #100	; 0x64
 800e48a:	4620      	mov	r0, r4
 800e48c:	f002 fc98 	bl	8010dc0 <__d2b>
 800e490:	ec4b ab18 	vmov	d8, sl, fp
 800e494:	9018      	str	r0, [sp, #96]	; 0x60
 800e496:	2800      	cmp	r0, #0
 800e498:	f43f aef6 	beq.w	800e288 <_strtod_l+0x490>
 800e49c:	2101      	movs	r1, #1
 800e49e:	4620      	mov	r0, r4
 800e4a0:	f002 f9e2 	bl	8010868 <__i2b>
 800e4a4:	4606      	mov	r6, r0
 800e4a6:	2800      	cmp	r0, #0
 800e4a8:	f43f aeee 	beq.w	800e288 <_strtod_l+0x490>
 800e4ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e4ae:	9904      	ldr	r1, [sp, #16]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	bfab      	itete	ge
 800e4b4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800e4b6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800e4b8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800e4ba:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800e4be:	bfac      	ite	ge
 800e4c0:	eb03 0902 	addge.w	r9, r3, r2
 800e4c4:	1ad7      	sublt	r7, r2, r3
 800e4c6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e4c8:	eba3 0801 	sub.w	r8, r3, r1
 800e4cc:	4490      	add	r8, r2
 800e4ce:	4ba1      	ldr	r3, [pc, #644]	; (800e754 <_strtod_l+0x95c>)
 800e4d0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800e4d4:	4598      	cmp	r8, r3
 800e4d6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e4da:	f280 80c7 	bge.w	800e66c <_strtod_l+0x874>
 800e4de:	eba3 0308 	sub.w	r3, r3, r8
 800e4e2:	2b1f      	cmp	r3, #31
 800e4e4:	eba2 0203 	sub.w	r2, r2, r3
 800e4e8:	f04f 0101 	mov.w	r1, #1
 800e4ec:	f300 80b1 	bgt.w	800e652 <_strtod_l+0x85a>
 800e4f0:	fa01 f303 	lsl.w	r3, r1, r3
 800e4f4:	930d      	str	r3, [sp, #52]	; 0x34
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	9308      	str	r3, [sp, #32]
 800e4fa:	eb09 0802 	add.w	r8, r9, r2
 800e4fe:	9b04      	ldr	r3, [sp, #16]
 800e500:	45c1      	cmp	r9, r8
 800e502:	4417      	add	r7, r2
 800e504:	441f      	add	r7, r3
 800e506:	464b      	mov	r3, r9
 800e508:	bfa8      	it	ge
 800e50a:	4643      	movge	r3, r8
 800e50c:	42bb      	cmp	r3, r7
 800e50e:	bfa8      	it	ge
 800e510:	463b      	movge	r3, r7
 800e512:	2b00      	cmp	r3, #0
 800e514:	bfc2      	ittt	gt
 800e516:	eba8 0803 	subgt.w	r8, r8, r3
 800e51a:	1aff      	subgt	r7, r7, r3
 800e51c:	eba9 0903 	subgt.w	r9, r9, r3
 800e520:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e522:	2b00      	cmp	r3, #0
 800e524:	dd17      	ble.n	800e556 <_strtod_l+0x75e>
 800e526:	4631      	mov	r1, r6
 800e528:	461a      	mov	r2, r3
 800e52a:	4620      	mov	r0, r4
 800e52c:	f002 fa5c 	bl	80109e8 <__pow5mult>
 800e530:	4606      	mov	r6, r0
 800e532:	2800      	cmp	r0, #0
 800e534:	f43f aea8 	beq.w	800e288 <_strtod_l+0x490>
 800e538:	4601      	mov	r1, r0
 800e53a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e53c:	4620      	mov	r0, r4
 800e53e:	f002 f9a9 	bl	8010894 <__multiply>
 800e542:	900b      	str	r0, [sp, #44]	; 0x2c
 800e544:	2800      	cmp	r0, #0
 800e546:	f43f ae9f 	beq.w	800e288 <_strtod_l+0x490>
 800e54a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e54c:	4620      	mov	r0, r4
 800e54e:	f002 f889 	bl	8010664 <_Bfree>
 800e552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e554:	9318      	str	r3, [sp, #96]	; 0x60
 800e556:	f1b8 0f00 	cmp.w	r8, #0
 800e55a:	f300 808c 	bgt.w	800e676 <_strtod_l+0x87e>
 800e55e:	9b06      	ldr	r3, [sp, #24]
 800e560:	2b00      	cmp	r3, #0
 800e562:	dd08      	ble.n	800e576 <_strtod_l+0x77e>
 800e564:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e566:	9905      	ldr	r1, [sp, #20]
 800e568:	4620      	mov	r0, r4
 800e56a:	f002 fa3d 	bl	80109e8 <__pow5mult>
 800e56e:	9005      	str	r0, [sp, #20]
 800e570:	2800      	cmp	r0, #0
 800e572:	f43f ae89 	beq.w	800e288 <_strtod_l+0x490>
 800e576:	2f00      	cmp	r7, #0
 800e578:	dd08      	ble.n	800e58c <_strtod_l+0x794>
 800e57a:	9905      	ldr	r1, [sp, #20]
 800e57c:	463a      	mov	r2, r7
 800e57e:	4620      	mov	r0, r4
 800e580:	f002 fa8c 	bl	8010a9c <__lshift>
 800e584:	9005      	str	r0, [sp, #20]
 800e586:	2800      	cmp	r0, #0
 800e588:	f43f ae7e 	beq.w	800e288 <_strtod_l+0x490>
 800e58c:	f1b9 0f00 	cmp.w	r9, #0
 800e590:	dd08      	ble.n	800e5a4 <_strtod_l+0x7ac>
 800e592:	4631      	mov	r1, r6
 800e594:	464a      	mov	r2, r9
 800e596:	4620      	mov	r0, r4
 800e598:	f002 fa80 	bl	8010a9c <__lshift>
 800e59c:	4606      	mov	r6, r0
 800e59e:	2800      	cmp	r0, #0
 800e5a0:	f43f ae72 	beq.w	800e288 <_strtod_l+0x490>
 800e5a4:	9a05      	ldr	r2, [sp, #20]
 800e5a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e5a8:	4620      	mov	r0, r4
 800e5aa:	f002 fb03 	bl	8010bb4 <__mdiff>
 800e5ae:	4605      	mov	r5, r0
 800e5b0:	2800      	cmp	r0, #0
 800e5b2:	f43f ae69 	beq.w	800e288 <_strtod_l+0x490>
 800e5b6:	68c3      	ldr	r3, [r0, #12]
 800e5b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	60c3      	str	r3, [r0, #12]
 800e5be:	4631      	mov	r1, r6
 800e5c0:	f002 fadc 	bl	8010b7c <__mcmp>
 800e5c4:	2800      	cmp	r0, #0
 800e5c6:	da60      	bge.n	800e68a <_strtod_l+0x892>
 800e5c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5ca:	ea53 030a 	orrs.w	r3, r3, sl
 800e5ce:	f040 8082 	bne.w	800e6d6 <_strtod_l+0x8de>
 800e5d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d17d      	bne.n	800e6d6 <_strtod_l+0x8de>
 800e5da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e5de:	0d1b      	lsrs	r3, r3, #20
 800e5e0:	051b      	lsls	r3, r3, #20
 800e5e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e5e6:	d976      	bls.n	800e6d6 <_strtod_l+0x8de>
 800e5e8:	696b      	ldr	r3, [r5, #20]
 800e5ea:	b913      	cbnz	r3, 800e5f2 <_strtod_l+0x7fa>
 800e5ec:	692b      	ldr	r3, [r5, #16]
 800e5ee:	2b01      	cmp	r3, #1
 800e5f0:	dd71      	ble.n	800e6d6 <_strtod_l+0x8de>
 800e5f2:	4629      	mov	r1, r5
 800e5f4:	2201      	movs	r2, #1
 800e5f6:	4620      	mov	r0, r4
 800e5f8:	f002 fa50 	bl	8010a9c <__lshift>
 800e5fc:	4631      	mov	r1, r6
 800e5fe:	4605      	mov	r5, r0
 800e600:	f002 fabc 	bl	8010b7c <__mcmp>
 800e604:	2800      	cmp	r0, #0
 800e606:	dd66      	ble.n	800e6d6 <_strtod_l+0x8de>
 800e608:	9904      	ldr	r1, [sp, #16]
 800e60a:	4a53      	ldr	r2, [pc, #332]	; (800e758 <_strtod_l+0x960>)
 800e60c:	465b      	mov	r3, fp
 800e60e:	2900      	cmp	r1, #0
 800e610:	f000 8081 	beq.w	800e716 <_strtod_l+0x91e>
 800e614:	ea02 010b 	and.w	r1, r2, fp
 800e618:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e61c:	dc7b      	bgt.n	800e716 <_strtod_l+0x91e>
 800e61e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e622:	f77f aea9 	ble.w	800e378 <_strtod_l+0x580>
 800e626:	4b4d      	ldr	r3, [pc, #308]	; (800e75c <_strtod_l+0x964>)
 800e628:	4650      	mov	r0, sl
 800e62a:	4659      	mov	r1, fp
 800e62c:	2200      	movs	r2, #0
 800e62e:	f7f1 fff3 	bl	8000618 <__aeabi_dmul>
 800e632:	460b      	mov	r3, r1
 800e634:	4303      	orrs	r3, r0
 800e636:	bf08      	it	eq
 800e638:	2322      	moveq	r3, #34	; 0x22
 800e63a:	4682      	mov	sl, r0
 800e63c:	468b      	mov	fp, r1
 800e63e:	bf08      	it	eq
 800e640:	6023      	streq	r3, [r4, #0]
 800e642:	e62b      	b.n	800e29c <_strtod_l+0x4a4>
 800e644:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e648:	fa02 f303 	lsl.w	r3, r2, r3
 800e64c:	ea03 0a0a 	and.w	sl, r3, sl
 800e650:	e6e3      	b.n	800e41a <_strtod_l+0x622>
 800e652:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800e656:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800e65a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800e65e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800e662:	fa01 f308 	lsl.w	r3, r1, r8
 800e666:	9308      	str	r3, [sp, #32]
 800e668:	910d      	str	r1, [sp, #52]	; 0x34
 800e66a:	e746      	b.n	800e4fa <_strtod_l+0x702>
 800e66c:	2300      	movs	r3, #0
 800e66e:	9308      	str	r3, [sp, #32]
 800e670:	2301      	movs	r3, #1
 800e672:	930d      	str	r3, [sp, #52]	; 0x34
 800e674:	e741      	b.n	800e4fa <_strtod_l+0x702>
 800e676:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e678:	4642      	mov	r2, r8
 800e67a:	4620      	mov	r0, r4
 800e67c:	f002 fa0e 	bl	8010a9c <__lshift>
 800e680:	9018      	str	r0, [sp, #96]	; 0x60
 800e682:	2800      	cmp	r0, #0
 800e684:	f47f af6b 	bne.w	800e55e <_strtod_l+0x766>
 800e688:	e5fe      	b.n	800e288 <_strtod_l+0x490>
 800e68a:	465f      	mov	r7, fp
 800e68c:	d16e      	bne.n	800e76c <_strtod_l+0x974>
 800e68e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e690:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e694:	b342      	cbz	r2, 800e6e8 <_strtod_l+0x8f0>
 800e696:	4a32      	ldr	r2, [pc, #200]	; (800e760 <_strtod_l+0x968>)
 800e698:	4293      	cmp	r3, r2
 800e69a:	d128      	bne.n	800e6ee <_strtod_l+0x8f6>
 800e69c:	9b04      	ldr	r3, [sp, #16]
 800e69e:	4651      	mov	r1, sl
 800e6a0:	b1eb      	cbz	r3, 800e6de <_strtod_l+0x8e6>
 800e6a2:	4b2d      	ldr	r3, [pc, #180]	; (800e758 <_strtod_l+0x960>)
 800e6a4:	403b      	ands	r3, r7
 800e6a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e6aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e6ae:	d819      	bhi.n	800e6e4 <_strtod_l+0x8ec>
 800e6b0:	0d1b      	lsrs	r3, r3, #20
 800e6b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e6b6:	fa02 f303 	lsl.w	r3, r2, r3
 800e6ba:	4299      	cmp	r1, r3
 800e6bc:	d117      	bne.n	800e6ee <_strtod_l+0x8f6>
 800e6be:	4b29      	ldr	r3, [pc, #164]	; (800e764 <_strtod_l+0x96c>)
 800e6c0:	429f      	cmp	r7, r3
 800e6c2:	d102      	bne.n	800e6ca <_strtod_l+0x8d2>
 800e6c4:	3101      	adds	r1, #1
 800e6c6:	f43f addf 	beq.w	800e288 <_strtod_l+0x490>
 800e6ca:	4b23      	ldr	r3, [pc, #140]	; (800e758 <_strtod_l+0x960>)
 800e6cc:	403b      	ands	r3, r7
 800e6ce:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800e6d2:	f04f 0a00 	mov.w	sl, #0
 800e6d6:	9b04      	ldr	r3, [sp, #16]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d1a4      	bne.n	800e626 <_strtod_l+0x82e>
 800e6dc:	e5de      	b.n	800e29c <_strtod_l+0x4a4>
 800e6de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e6e2:	e7ea      	b.n	800e6ba <_strtod_l+0x8c2>
 800e6e4:	4613      	mov	r3, r2
 800e6e6:	e7e8      	b.n	800e6ba <_strtod_l+0x8c2>
 800e6e8:	ea53 030a 	orrs.w	r3, r3, sl
 800e6ec:	d08c      	beq.n	800e608 <_strtod_l+0x810>
 800e6ee:	9b08      	ldr	r3, [sp, #32]
 800e6f0:	b1db      	cbz	r3, 800e72a <_strtod_l+0x932>
 800e6f2:	423b      	tst	r3, r7
 800e6f4:	d0ef      	beq.n	800e6d6 <_strtod_l+0x8de>
 800e6f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e6f8:	9a04      	ldr	r2, [sp, #16]
 800e6fa:	4650      	mov	r0, sl
 800e6fc:	4659      	mov	r1, fp
 800e6fe:	b1c3      	cbz	r3, 800e732 <_strtod_l+0x93a>
 800e700:	f7ff fb5d 	bl	800ddbe <sulp>
 800e704:	4602      	mov	r2, r0
 800e706:	460b      	mov	r3, r1
 800e708:	ec51 0b18 	vmov	r0, r1, d8
 800e70c:	f7f1 fdce 	bl	80002ac <__adddf3>
 800e710:	4682      	mov	sl, r0
 800e712:	468b      	mov	fp, r1
 800e714:	e7df      	b.n	800e6d6 <_strtod_l+0x8de>
 800e716:	4013      	ands	r3, r2
 800e718:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e71c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e720:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e724:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800e728:	e7d5      	b.n	800e6d6 <_strtod_l+0x8de>
 800e72a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e72c:	ea13 0f0a 	tst.w	r3, sl
 800e730:	e7e0      	b.n	800e6f4 <_strtod_l+0x8fc>
 800e732:	f7ff fb44 	bl	800ddbe <sulp>
 800e736:	4602      	mov	r2, r0
 800e738:	460b      	mov	r3, r1
 800e73a:	ec51 0b18 	vmov	r0, r1, d8
 800e73e:	f7f1 fdb3 	bl	80002a8 <__aeabi_dsub>
 800e742:	2200      	movs	r2, #0
 800e744:	2300      	movs	r3, #0
 800e746:	4682      	mov	sl, r0
 800e748:	468b      	mov	fp, r1
 800e74a:	f7f2 f9cd 	bl	8000ae8 <__aeabi_dcmpeq>
 800e74e:	2800      	cmp	r0, #0
 800e750:	d0c1      	beq.n	800e6d6 <_strtod_l+0x8de>
 800e752:	e611      	b.n	800e378 <_strtod_l+0x580>
 800e754:	fffffc02 	.word	0xfffffc02
 800e758:	7ff00000 	.word	0x7ff00000
 800e75c:	39500000 	.word	0x39500000
 800e760:	000fffff 	.word	0x000fffff
 800e764:	7fefffff 	.word	0x7fefffff
 800e768:	08013750 	.word	0x08013750
 800e76c:	4631      	mov	r1, r6
 800e76e:	4628      	mov	r0, r5
 800e770:	f002 fb82 	bl	8010e78 <__ratio>
 800e774:	ec59 8b10 	vmov	r8, r9, d0
 800e778:	ee10 0a10 	vmov	r0, s0
 800e77c:	2200      	movs	r2, #0
 800e77e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e782:	4649      	mov	r1, r9
 800e784:	f7f2 f9c4 	bl	8000b10 <__aeabi_dcmple>
 800e788:	2800      	cmp	r0, #0
 800e78a:	d07a      	beq.n	800e882 <_strtod_l+0xa8a>
 800e78c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d04a      	beq.n	800e828 <_strtod_l+0xa30>
 800e792:	4b95      	ldr	r3, [pc, #596]	; (800e9e8 <_strtod_l+0xbf0>)
 800e794:	2200      	movs	r2, #0
 800e796:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e79a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800e9e8 <_strtod_l+0xbf0>
 800e79e:	f04f 0800 	mov.w	r8, #0
 800e7a2:	4b92      	ldr	r3, [pc, #584]	; (800e9ec <_strtod_l+0xbf4>)
 800e7a4:	403b      	ands	r3, r7
 800e7a6:	930d      	str	r3, [sp, #52]	; 0x34
 800e7a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e7aa:	4b91      	ldr	r3, [pc, #580]	; (800e9f0 <_strtod_l+0xbf8>)
 800e7ac:	429a      	cmp	r2, r3
 800e7ae:	f040 80b0 	bne.w	800e912 <_strtod_l+0xb1a>
 800e7b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e7b6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800e7ba:	ec4b ab10 	vmov	d0, sl, fp
 800e7be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e7c2:	f002 fa81 	bl	8010cc8 <__ulp>
 800e7c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e7ca:	ec53 2b10 	vmov	r2, r3, d0
 800e7ce:	f7f1 ff23 	bl	8000618 <__aeabi_dmul>
 800e7d2:	4652      	mov	r2, sl
 800e7d4:	465b      	mov	r3, fp
 800e7d6:	f7f1 fd69 	bl	80002ac <__adddf3>
 800e7da:	460b      	mov	r3, r1
 800e7dc:	4983      	ldr	r1, [pc, #524]	; (800e9ec <_strtod_l+0xbf4>)
 800e7de:	4a85      	ldr	r2, [pc, #532]	; (800e9f4 <_strtod_l+0xbfc>)
 800e7e0:	4019      	ands	r1, r3
 800e7e2:	4291      	cmp	r1, r2
 800e7e4:	4682      	mov	sl, r0
 800e7e6:	d960      	bls.n	800e8aa <_strtod_l+0xab2>
 800e7e8:	ee18 3a90 	vmov	r3, s17
 800e7ec:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e7f0:	4293      	cmp	r3, r2
 800e7f2:	d104      	bne.n	800e7fe <_strtod_l+0xa06>
 800e7f4:	ee18 3a10 	vmov	r3, s16
 800e7f8:	3301      	adds	r3, #1
 800e7fa:	f43f ad45 	beq.w	800e288 <_strtod_l+0x490>
 800e7fe:	f8df b200 	ldr.w	fp, [pc, #512]	; 800ea00 <_strtod_l+0xc08>
 800e802:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800e806:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e808:	4620      	mov	r0, r4
 800e80a:	f001 ff2b 	bl	8010664 <_Bfree>
 800e80e:	9905      	ldr	r1, [sp, #20]
 800e810:	4620      	mov	r0, r4
 800e812:	f001 ff27 	bl	8010664 <_Bfree>
 800e816:	4631      	mov	r1, r6
 800e818:	4620      	mov	r0, r4
 800e81a:	f001 ff23 	bl	8010664 <_Bfree>
 800e81e:	4629      	mov	r1, r5
 800e820:	4620      	mov	r0, r4
 800e822:	f001 ff1f 	bl	8010664 <_Bfree>
 800e826:	e61a      	b.n	800e45e <_strtod_l+0x666>
 800e828:	f1ba 0f00 	cmp.w	sl, #0
 800e82c:	d11b      	bne.n	800e866 <_strtod_l+0xa6e>
 800e82e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e832:	b9f3      	cbnz	r3, 800e872 <_strtod_l+0xa7a>
 800e834:	4b6c      	ldr	r3, [pc, #432]	; (800e9e8 <_strtod_l+0xbf0>)
 800e836:	2200      	movs	r2, #0
 800e838:	4640      	mov	r0, r8
 800e83a:	4649      	mov	r1, r9
 800e83c:	f7f2 f95e 	bl	8000afc <__aeabi_dcmplt>
 800e840:	b9d0      	cbnz	r0, 800e878 <_strtod_l+0xa80>
 800e842:	4640      	mov	r0, r8
 800e844:	4649      	mov	r1, r9
 800e846:	4b6c      	ldr	r3, [pc, #432]	; (800e9f8 <_strtod_l+0xc00>)
 800e848:	2200      	movs	r2, #0
 800e84a:	f7f1 fee5 	bl	8000618 <__aeabi_dmul>
 800e84e:	4680      	mov	r8, r0
 800e850:	4689      	mov	r9, r1
 800e852:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e856:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800e85a:	9315      	str	r3, [sp, #84]	; 0x54
 800e85c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800e860:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e864:	e79d      	b.n	800e7a2 <_strtod_l+0x9aa>
 800e866:	f1ba 0f01 	cmp.w	sl, #1
 800e86a:	d102      	bne.n	800e872 <_strtod_l+0xa7a>
 800e86c:	2f00      	cmp	r7, #0
 800e86e:	f43f ad83 	beq.w	800e378 <_strtod_l+0x580>
 800e872:	4b62      	ldr	r3, [pc, #392]	; (800e9fc <_strtod_l+0xc04>)
 800e874:	2200      	movs	r2, #0
 800e876:	e78e      	b.n	800e796 <_strtod_l+0x99e>
 800e878:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800e9f8 <_strtod_l+0xc00>
 800e87c:	f04f 0800 	mov.w	r8, #0
 800e880:	e7e7      	b.n	800e852 <_strtod_l+0xa5a>
 800e882:	4b5d      	ldr	r3, [pc, #372]	; (800e9f8 <_strtod_l+0xc00>)
 800e884:	4640      	mov	r0, r8
 800e886:	4649      	mov	r1, r9
 800e888:	2200      	movs	r2, #0
 800e88a:	f7f1 fec5 	bl	8000618 <__aeabi_dmul>
 800e88e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e890:	4680      	mov	r8, r0
 800e892:	4689      	mov	r9, r1
 800e894:	b933      	cbnz	r3, 800e8a4 <_strtod_l+0xaac>
 800e896:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e89a:	900e      	str	r0, [sp, #56]	; 0x38
 800e89c:	930f      	str	r3, [sp, #60]	; 0x3c
 800e89e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800e8a2:	e7dd      	b.n	800e860 <_strtod_l+0xa68>
 800e8a4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800e8a8:	e7f9      	b.n	800e89e <_strtod_l+0xaa6>
 800e8aa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800e8ae:	9b04      	ldr	r3, [sp, #16]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d1a8      	bne.n	800e806 <_strtod_l+0xa0e>
 800e8b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e8b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e8ba:	0d1b      	lsrs	r3, r3, #20
 800e8bc:	051b      	lsls	r3, r3, #20
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	d1a1      	bne.n	800e806 <_strtod_l+0xa0e>
 800e8c2:	4640      	mov	r0, r8
 800e8c4:	4649      	mov	r1, r9
 800e8c6:	f7f2 fa07 	bl	8000cd8 <__aeabi_d2lz>
 800e8ca:	f7f1 fe77 	bl	80005bc <__aeabi_l2d>
 800e8ce:	4602      	mov	r2, r0
 800e8d0:	460b      	mov	r3, r1
 800e8d2:	4640      	mov	r0, r8
 800e8d4:	4649      	mov	r1, r9
 800e8d6:	f7f1 fce7 	bl	80002a8 <__aeabi_dsub>
 800e8da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e8dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e8e0:	ea43 030a 	orr.w	r3, r3, sl
 800e8e4:	4313      	orrs	r3, r2
 800e8e6:	4680      	mov	r8, r0
 800e8e8:	4689      	mov	r9, r1
 800e8ea:	d055      	beq.n	800e998 <_strtod_l+0xba0>
 800e8ec:	a336      	add	r3, pc, #216	; (adr r3, 800e9c8 <_strtod_l+0xbd0>)
 800e8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8f2:	f7f2 f903 	bl	8000afc <__aeabi_dcmplt>
 800e8f6:	2800      	cmp	r0, #0
 800e8f8:	f47f acd0 	bne.w	800e29c <_strtod_l+0x4a4>
 800e8fc:	a334      	add	r3, pc, #208	; (adr r3, 800e9d0 <_strtod_l+0xbd8>)
 800e8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e902:	4640      	mov	r0, r8
 800e904:	4649      	mov	r1, r9
 800e906:	f7f2 f917 	bl	8000b38 <__aeabi_dcmpgt>
 800e90a:	2800      	cmp	r0, #0
 800e90c:	f43f af7b 	beq.w	800e806 <_strtod_l+0xa0e>
 800e910:	e4c4      	b.n	800e29c <_strtod_l+0x4a4>
 800e912:	9b04      	ldr	r3, [sp, #16]
 800e914:	b333      	cbz	r3, 800e964 <_strtod_l+0xb6c>
 800e916:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e918:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e91c:	d822      	bhi.n	800e964 <_strtod_l+0xb6c>
 800e91e:	a32e      	add	r3, pc, #184	; (adr r3, 800e9d8 <_strtod_l+0xbe0>)
 800e920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e924:	4640      	mov	r0, r8
 800e926:	4649      	mov	r1, r9
 800e928:	f7f2 f8f2 	bl	8000b10 <__aeabi_dcmple>
 800e92c:	b1a0      	cbz	r0, 800e958 <_strtod_l+0xb60>
 800e92e:	4649      	mov	r1, r9
 800e930:	4640      	mov	r0, r8
 800e932:	f7f2 f949 	bl	8000bc8 <__aeabi_d2uiz>
 800e936:	2801      	cmp	r0, #1
 800e938:	bf38      	it	cc
 800e93a:	2001      	movcc	r0, #1
 800e93c:	f7f1 fdf2 	bl	8000524 <__aeabi_ui2d>
 800e940:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e942:	4680      	mov	r8, r0
 800e944:	4689      	mov	r9, r1
 800e946:	bb23      	cbnz	r3, 800e992 <_strtod_l+0xb9a>
 800e948:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e94c:	9010      	str	r0, [sp, #64]	; 0x40
 800e94e:	9311      	str	r3, [sp, #68]	; 0x44
 800e950:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e954:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e95a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e95c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e960:	1a9b      	subs	r3, r3, r2
 800e962:	9309      	str	r3, [sp, #36]	; 0x24
 800e964:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e968:	eeb0 0a48 	vmov.f32	s0, s16
 800e96c:	eef0 0a68 	vmov.f32	s1, s17
 800e970:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e974:	f002 f9a8 	bl	8010cc8 <__ulp>
 800e978:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e97c:	ec53 2b10 	vmov	r2, r3, d0
 800e980:	f7f1 fe4a 	bl	8000618 <__aeabi_dmul>
 800e984:	ec53 2b18 	vmov	r2, r3, d8
 800e988:	f7f1 fc90 	bl	80002ac <__adddf3>
 800e98c:	4682      	mov	sl, r0
 800e98e:	468b      	mov	fp, r1
 800e990:	e78d      	b.n	800e8ae <_strtod_l+0xab6>
 800e992:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800e996:	e7db      	b.n	800e950 <_strtod_l+0xb58>
 800e998:	a311      	add	r3, pc, #68	; (adr r3, 800e9e0 <_strtod_l+0xbe8>)
 800e99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e99e:	f7f2 f8ad 	bl	8000afc <__aeabi_dcmplt>
 800e9a2:	e7b2      	b.n	800e90a <_strtod_l+0xb12>
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	930a      	str	r3, [sp, #40]	; 0x28
 800e9a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e9aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e9ac:	6013      	str	r3, [r2, #0]
 800e9ae:	f7ff ba6b 	b.w	800de88 <_strtod_l+0x90>
 800e9b2:	2a65      	cmp	r2, #101	; 0x65
 800e9b4:	f43f ab5f 	beq.w	800e076 <_strtod_l+0x27e>
 800e9b8:	2a45      	cmp	r2, #69	; 0x45
 800e9ba:	f43f ab5c 	beq.w	800e076 <_strtod_l+0x27e>
 800e9be:	2301      	movs	r3, #1
 800e9c0:	f7ff bb94 	b.w	800e0ec <_strtod_l+0x2f4>
 800e9c4:	f3af 8000 	nop.w
 800e9c8:	94a03595 	.word	0x94a03595
 800e9cc:	3fdfffff 	.word	0x3fdfffff
 800e9d0:	35afe535 	.word	0x35afe535
 800e9d4:	3fe00000 	.word	0x3fe00000
 800e9d8:	ffc00000 	.word	0xffc00000
 800e9dc:	41dfffff 	.word	0x41dfffff
 800e9e0:	94a03595 	.word	0x94a03595
 800e9e4:	3fcfffff 	.word	0x3fcfffff
 800e9e8:	3ff00000 	.word	0x3ff00000
 800e9ec:	7ff00000 	.word	0x7ff00000
 800e9f0:	7fe00000 	.word	0x7fe00000
 800e9f4:	7c9fffff 	.word	0x7c9fffff
 800e9f8:	3fe00000 	.word	0x3fe00000
 800e9fc:	bff00000 	.word	0xbff00000
 800ea00:	7fefffff 	.word	0x7fefffff

0800ea04 <_strtod_r>:
 800ea04:	4b01      	ldr	r3, [pc, #4]	; (800ea0c <_strtod_r+0x8>)
 800ea06:	f7ff b9f7 	b.w	800ddf8 <_strtod_l>
 800ea0a:	bf00      	nop
 800ea0c:	200001e0 	.word	0x200001e0

0800ea10 <_strtol_l.constprop.0>:
 800ea10:	2b01      	cmp	r3, #1
 800ea12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea16:	d001      	beq.n	800ea1c <_strtol_l.constprop.0+0xc>
 800ea18:	2b24      	cmp	r3, #36	; 0x24
 800ea1a:	d906      	bls.n	800ea2a <_strtol_l.constprop.0+0x1a>
 800ea1c:	f7fe f8ca 	bl	800cbb4 <__errno>
 800ea20:	2316      	movs	r3, #22
 800ea22:	6003      	str	r3, [r0, #0]
 800ea24:	2000      	movs	r0, #0
 800ea26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea2a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800eb10 <_strtol_l.constprop.0+0x100>
 800ea2e:	460d      	mov	r5, r1
 800ea30:	462e      	mov	r6, r5
 800ea32:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ea36:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ea3a:	f017 0708 	ands.w	r7, r7, #8
 800ea3e:	d1f7      	bne.n	800ea30 <_strtol_l.constprop.0+0x20>
 800ea40:	2c2d      	cmp	r4, #45	; 0x2d
 800ea42:	d132      	bne.n	800eaaa <_strtol_l.constprop.0+0x9a>
 800ea44:	782c      	ldrb	r4, [r5, #0]
 800ea46:	2701      	movs	r7, #1
 800ea48:	1cb5      	adds	r5, r6, #2
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d05b      	beq.n	800eb06 <_strtol_l.constprop.0+0xf6>
 800ea4e:	2b10      	cmp	r3, #16
 800ea50:	d109      	bne.n	800ea66 <_strtol_l.constprop.0+0x56>
 800ea52:	2c30      	cmp	r4, #48	; 0x30
 800ea54:	d107      	bne.n	800ea66 <_strtol_l.constprop.0+0x56>
 800ea56:	782c      	ldrb	r4, [r5, #0]
 800ea58:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ea5c:	2c58      	cmp	r4, #88	; 0x58
 800ea5e:	d14d      	bne.n	800eafc <_strtol_l.constprop.0+0xec>
 800ea60:	786c      	ldrb	r4, [r5, #1]
 800ea62:	2310      	movs	r3, #16
 800ea64:	3502      	adds	r5, #2
 800ea66:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ea6a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ea6e:	f04f 0c00 	mov.w	ip, #0
 800ea72:	fbb8 f9f3 	udiv	r9, r8, r3
 800ea76:	4666      	mov	r6, ip
 800ea78:	fb03 8a19 	mls	sl, r3, r9, r8
 800ea7c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ea80:	f1be 0f09 	cmp.w	lr, #9
 800ea84:	d816      	bhi.n	800eab4 <_strtol_l.constprop.0+0xa4>
 800ea86:	4674      	mov	r4, lr
 800ea88:	42a3      	cmp	r3, r4
 800ea8a:	dd24      	ble.n	800ead6 <_strtol_l.constprop.0+0xc6>
 800ea8c:	f1bc 0f00 	cmp.w	ip, #0
 800ea90:	db1e      	blt.n	800ead0 <_strtol_l.constprop.0+0xc0>
 800ea92:	45b1      	cmp	r9, r6
 800ea94:	d31c      	bcc.n	800ead0 <_strtol_l.constprop.0+0xc0>
 800ea96:	d101      	bne.n	800ea9c <_strtol_l.constprop.0+0x8c>
 800ea98:	45a2      	cmp	sl, r4
 800ea9a:	db19      	blt.n	800ead0 <_strtol_l.constprop.0+0xc0>
 800ea9c:	fb06 4603 	mla	r6, r6, r3, r4
 800eaa0:	f04f 0c01 	mov.w	ip, #1
 800eaa4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eaa8:	e7e8      	b.n	800ea7c <_strtol_l.constprop.0+0x6c>
 800eaaa:	2c2b      	cmp	r4, #43	; 0x2b
 800eaac:	bf04      	itt	eq
 800eaae:	782c      	ldrbeq	r4, [r5, #0]
 800eab0:	1cb5      	addeq	r5, r6, #2
 800eab2:	e7ca      	b.n	800ea4a <_strtol_l.constprop.0+0x3a>
 800eab4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800eab8:	f1be 0f19 	cmp.w	lr, #25
 800eabc:	d801      	bhi.n	800eac2 <_strtol_l.constprop.0+0xb2>
 800eabe:	3c37      	subs	r4, #55	; 0x37
 800eac0:	e7e2      	b.n	800ea88 <_strtol_l.constprop.0+0x78>
 800eac2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800eac6:	f1be 0f19 	cmp.w	lr, #25
 800eaca:	d804      	bhi.n	800ead6 <_strtol_l.constprop.0+0xc6>
 800eacc:	3c57      	subs	r4, #87	; 0x57
 800eace:	e7db      	b.n	800ea88 <_strtol_l.constprop.0+0x78>
 800ead0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800ead4:	e7e6      	b.n	800eaa4 <_strtol_l.constprop.0+0x94>
 800ead6:	f1bc 0f00 	cmp.w	ip, #0
 800eada:	da05      	bge.n	800eae8 <_strtol_l.constprop.0+0xd8>
 800eadc:	2322      	movs	r3, #34	; 0x22
 800eade:	6003      	str	r3, [r0, #0]
 800eae0:	4646      	mov	r6, r8
 800eae2:	b942      	cbnz	r2, 800eaf6 <_strtol_l.constprop.0+0xe6>
 800eae4:	4630      	mov	r0, r6
 800eae6:	e79e      	b.n	800ea26 <_strtol_l.constprop.0+0x16>
 800eae8:	b107      	cbz	r7, 800eaec <_strtol_l.constprop.0+0xdc>
 800eaea:	4276      	negs	r6, r6
 800eaec:	2a00      	cmp	r2, #0
 800eaee:	d0f9      	beq.n	800eae4 <_strtol_l.constprop.0+0xd4>
 800eaf0:	f1bc 0f00 	cmp.w	ip, #0
 800eaf4:	d000      	beq.n	800eaf8 <_strtol_l.constprop.0+0xe8>
 800eaf6:	1e69      	subs	r1, r5, #1
 800eaf8:	6011      	str	r1, [r2, #0]
 800eafa:	e7f3      	b.n	800eae4 <_strtol_l.constprop.0+0xd4>
 800eafc:	2430      	movs	r4, #48	; 0x30
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d1b1      	bne.n	800ea66 <_strtol_l.constprop.0+0x56>
 800eb02:	2308      	movs	r3, #8
 800eb04:	e7af      	b.n	800ea66 <_strtol_l.constprop.0+0x56>
 800eb06:	2c30      	cmp	r4, #48	; 0x30
 800eb08:	d0a5      	beq.n	800ea56 <_strtol_l.constprop.0+0x46>
 800eb0a:	230a      	movs	r3, #10
 800eb0c:	e7ab      	b.n	800ea66 <_strtol_l.constprop.0+0x56>
 800eb0e:	bf00      	nop
 800eb10:	080135e2 	.word	0x080135e2

0800eb14 <_strtol_r>:
 800eb14:	f7ff bf7c 	b.w	800ea10 <_strtol_l.constprop.0>

0800eb18 <strtol>:
 800eb18:	4613      	mov	r3, r2
 800eb1a:	460a      	mov	r2, r1
 800eb1c:	4601      	mov	r1, r0
 800eb1e:	4802      	ldr	r0, [pc, #8]	; (800eb28 <strtol+0x10>)
 800eb20:	6800      	ldr	r0, [r0, #0]
 800eb22:	f7ff bf75 	b.w	800ea10 <_strtol_l.constprop.0>
 800eb26:	bf00      	nop
 800eb28:	20000178 	.word	0x20000178

0800eb2c <_vsniprintf_r>:
 800eb2c:	b530      	push	{r4, r5, lr}
 800eb2e:	4614      	mov	r4, r2
 800eb30:	2c00      	cmp	r4, #0
 800eb32:	b09b      	sub	sp, #108	; 0x6c
 800eb34:	4605      	mov	r5, r0
 800eb36:	461a      	mov	r2, r3
 800eb38:	da05      	bge.n	800eb46 <_vsniprintf_r+0x1a>
 800eb3a:	238b      	movs	r3, #139	; 0x8b
 800eb3c:	6003      	str	r3, [r0, #0]
 800eb3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eb42:	b01b      	add	sp, #108	; 0x6c
 800eb44:	bd30      	pop	{r4, r5, pc}
 800eb46:	f44f 7302 	mov.w	r3, #520	; 0x208
 800eb4a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800eb4e:	bf14      	ite	ne
 800eb50:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800eb54:	4623      	moveq	r3, r4
 800eb56:	9302      	str	r3, [sp, #8]
 800eb58:	9305      	str	r3, [sp, #20]
 800eb5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eb5e:	9100      	str	r1, [sp, #0]
 800eb60:	9104      	str	r1, [sp, #16]
 800eb62:	f8ad 300e 	strh.w	r3, [sp, #14]
 800eb66:	4669      	mov	r1, sp
 800eb68:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800eb6a:	f002 fa6d 	bl	8011048 <_svfiprintf_r>
 800eb6e:	1c43      	adds	r3, r0, #1
 800eb70:	bfbc      	itt	lt
 800eb72:	238b      	movlt	r3, #139	; 0x8b
 800eb74:	602b      	strlt	r3, [r5, #0]
 800eb76:	2c00      	cmp	r4, #0
 800eb78:	d0e3      	beq.n	800eb42 <_vsniprintf_r+0x16>
 800eb7a:	9b00      	ldr	r3, [sp, #0]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	701a      	strb	r2, [r3, #0]
 800eb80:	e7df      	b.n	800eb42 <_vsniprintf_r+0x16>
	...

0800eb84 <vsniprintf>:
 800eb84:	b507      	push	{r0, r1, r2, lr}
 800eb86:	9300      	str	r3, [sp, #0]
 800eb88:	4613      	mov	r3, r2
 800eb8a:	460a      	mov	r2, r1
 800eb8c:	4601      	mov	r1, r0
 800eb8e:	4803      	ldr	r0, [pc, #12]	; (800eb9c <vsniprintf+0x18>)
 800eb90:	6800      	ldr	r0, [r0, #0]
 800eb92:	f7ff ffcb 	bl	800eb2c <_vsniprintf_r>
 800eb96:	b003      	add	sp, #12
 800eb98:	f85d fb04 	ldr.w	pc, [sp], #4
 800eb9c:	20000178 	.word	0x20000178

0800eba0 <__swbuf_r>:
 800eba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eba2:	460e      	mov	r6, r1
 800eba4:	4614      	mov	r4, r2
 800eba6:	4605      	mov	r5, r0
 800eba8:	b118      	cbz	r0, 800ebb2 <__swbuf_r+0x12>
 800ebaa:	6983      	ldr	r3, [r0, #24]
 800ebac:	b90b      	cbnz	r3, 800ebb2 <__swbuf_r+0x12>
 800ebae:	f001 f86f 	bl	800fc90 <__sinit>
 800ebb2:	4b21      	ldr	r3, [pc, #132]	; (800ec38 <__swbuf_r+0x98>)
 800ebb4:	429c      	cmp	r4, r3
 800ebb6:	d12b      	bne.n	800ec10 <__swbuf_r+0x70>
 800ebb8:	686c      	ldr	r4, [r5, #4]
 800ebba:	69a3      	ldr	r3, [r4, #24]
 800ebbc:	60a3      	str	r3, [r4, #8]
 800ebbe:	89a3      	ldrh	r3, [r4, #12]
 800ebc0:	071a      	lsls	r2, r3, #28
 800ebc2:	d52f      	bpl.n	800ec24 <__swbuf_r+0x84>
 800ebc4:	6923      	ldr	r3, [r4, #16]
 800ebc6:	b36b      	cbz	r3, 800ec24 <__swbuf_r+0x84>
 800ebc8:	6923      	ldr	r3, [r4, #16]
 800ebca:	6820      	ldr	r0, [r4, #0]
 800ebcc:	1ac0      	subs	r0, r0, r3
 800ebce:	6963      	ldr	r3, [r4, #20]
 800ebd0:	b2f6      	uxtb	r6, r6
 800ebd2:	4283      	cmp	r3, r0
 800ebd4:	4637      	mov	r7, r6
 800ebd6:	dc04      	bgt.n	800ebe2 <__swbuf_r+0x42>
 800ebd8:	4621      	mov	r1, r4
 800ebda:	4628      	mov	r0, r5
 800ebdc:	f000 ffc4 	bl	800fb68 <_fflush_r>
 800ebe0:	bb30      	cbnz	r0, 800ec30 <__swbuf_r+0x90>
 800ebe2:	68a3      	ldr	r3, [r4, #8]
 800ebe4:	3b01      	subs	r3, #1
 800ebe6:	60a3      	str	r3, [r4, #8]
 800ebe8:	6823      	ldr	r3, [r4, #0]
 800ebea:	1c5a      	adds	r2, r3, #1
 800ebec:	6022      	str	r2, [r4, #0]
 800ebee:	701e      	strb	r6, [r3, #0]
 800ebf0:	6963      	ldr	r3, [r4, #20]
 800ebf2:	3001      	adds	r0, #1
 800ebf4:	4283      	cmp	r3, r0
 800ebf6:	d004      	beq.n	800ec02 <__swbuf_r+0x62>
 800ebf8:	89a3      	ldrh	r3, [r4, #12]
 800ebfa:	07db      	lsls	r3, r3, #31
 800ebfc:	d506      	bpl.n	800ec0c <__swbuf_r+0x6c>
 800ebfe:	2e0a      	cmp	r6, #10
 800ec00:	d104      	bne.n	800ec0c <__swbuf_r+0x6c>
 800ec02:	4621      	mov	r1, r4
 800ec04:	4628      	mov	r0, r5
 800ec06:	f000 ffaf 	bl	800fb68 <_fflush_r>
 800ec0a:	b988      	cbnz	r0, 800ec30 <__swbuf_r+0x90>
 800ec0c:	4638      	mov	r0, r7
 800ec0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec10:	4b0a      	ldr	r3, [pc, #40]	; (800ec3c <__swbuf_r+0x9c>)
 800ec12:	429c      	cmp	r4, r3
 800ec14:	d101      	bne.n	800ec1a <__swbuf_r+0x7a>
 800ec16:	68ac      	ldr	r4, [r5, #8]
 800ec18:	e7cf      	b.n	800ebba <__swbuf_r+0x1a>
 800ec1a:	4b09      	ldr	r3, [pc, #36]	; (800ec40 <__swbuf_r+0xa0>)
 800ec1c:	429c      	cmp	r4, r3
 800ec1e:	bf08      	it	eq
 800ec20:	68ec      	ldreq	r4, [r5, #12]
 800ec22:	e7ca      	b.n	800ebba <__swbuf_r+0x1a>
 800ec24:	4621      	mov	r1, r4
 800ec26:	4628      	mov	r0, r5
 800ec28:	f000 f81e 	bl	800ec68 <__swsetup_r>
 800ec2c:	2800      	cmp	r0, #0
 800ec2e:	d0cb      	beq.n	800ebc8 <__swbuf_r+0x28>
 800ec30:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ec34:	e7ea      	b.n	800ec0c <__swbuf_r+0x6c>
 800ec36:	bf00      	nop
 800ec38:	08013828 	.word	0x08013828
 800ec3c:	08013848 	.word	0x08013848
 800ec40:	08013808 	.word	0x08013808

0800ec44 <_write_r>:
 800ec44:	b538      	push	{r3, r4, r5, lr}
 800ec46:	4d07      	ldr	r5, [pc, #28]	; (800ec64 <_write_r+0x20>)
 800ec48:	4604      	mov	r4, r0
 800ec4a:	4608      	mov	r0, r1
 800ec4c:	4611      	mov	r1, r2
 800ec4e:	2200      	movs	r2, #0
 800ec50:	602a      	str	r2, [r5, #0]
 800ec52:	461a      	mov	r2, r3
 800ec54:	f7f6 fb25 	bl	80052a2 <_write>
 800ec58:	1c43      	adds	r3, r0, #1
 800ec5a:	d102      	bne.n	800ec62 <_write_r+0x1e>
 800ec5c:	682b      	ldr	r3, [r5, #0]
 800ec5e:	b103      	cbz	r3, 800ec62 <_write_r+0x1e>
 800ec60:	6023      	str	r3, [r4, #0]
 800ec62:	bd38      	pop	{r3, r4, r5, pc}
 800ec64:	200027e0 	.word	0x200027e0

0800ec68 <__swsetup_r>:
 800ec68:	4b32      	ldr	r3, [pc, #200]	; (800ed34 <__swsetup_r+0xcc>)
 800ec6a:	b570      	push	{r4, r5, r6, lr}
 800ec6c:	681d      	ldr	r5, [r3, #0]
 800ec6e:	4606      	mov	r6, r0
 800ec70:	460c      	mov	r4, r1
 800ec72:	b125      	cbz	r5, 800ec7e <__swsetup_r+0x16>
 800ec74:	69ab      	ldr	r3, [r5, #24]
 800ec76:	b913      	cbnz	r3, 800ec7e <__swsetup_r+0x16>
 800ec78:	4628      	mov	r0, r5
 800ec7a:	f001 f809 	bl	800fc90 <__sinit>
 800ec7e:	4b2e      	ldr	r3, [pc, #184]	; (800ed38 <__swsetup_r+0xd0>)
 800ec80:	429c      	cmp	r4, r3
 800ec82:	d10f      	bne.n	800eca4 <__swsetup_r+0x3c>
 800ec84:	686c      	ldr	r4, [r5, #4]
 800ec86:	89a3      	ldrh	r3, [r4, #12]
 800ec88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ec8c:	0719      	lsls	r1, r3, #28
 800ec8e:	d42c      	bmi.n	800ecea <__swsetup_r+0x82>
 800ec90:	06dd      	lsls	r5, r3, #27
 800ec92:	d411      	bmi.n	800ecb8 <__swsetup_r+0x50>
 800ec94:	2309      	movs	r3, #9
 800ec96:	6033      	str	r3, [r6, #0]
 800ec98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ec9c:	81a3      	strh	r3, [r4, #12]
 800ec9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eca2:	e03e      	b.n	800ed22 <__swsetup_r+0xba>
 800eca4:	4b25      	ldr	r3, [pc, #148]	; (800ed3c <__swsetup_r+0xd4>)
 800eca6:	429c      	cmp	r4, r3
 800eca8:	d101      	bne.n	800ecae <__swsetup_r+0x46>
 800ecaa:	68ac      	ldr	r4, [r5, #8]
 800ecac:	e7eb      	b.n	800ec86 <__swsetup_r+0x1e>
 800ecae:	4b24      	ldr	r3, [pc, #144]	; (800ed40 <__swsetup_r+0xd8>)
 800ecb0:	429c      	cmp	r4, r3
 800ecb2:	bf08      	it	eq
 800ecb4:	68ec      	ldreq	r4, [r5, #12]
 800ecb6:	e7e6      	b.n	800ec86 <__swsetup_r+0x1e>
 800ecb8:	0758      	lsls	r0, r3, #29
 800ecba:	d512      	bpl.n	800ece2 <__swsetup_r+0x7a>
 800ecbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ecbe:	b141      	cbz	r1, 800ecd2 <__swsetup_r+0x6a>
 800ecc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ecc4:	4299      	cmp	r1, r3
 800ecc6:	d002      	beq.n	800ecce <__swsetup_r+0x66>
 800ecc8:	4630      	mov	r0, r6
 800ecca:	f7fd ffc3 	bl	800cc54 <_free_r>
 800ecce:	2300      	movs	r3, #0
 800ecd0:	6363      	str	r3, [r4, #52]	; 0x34
 800ecd2:	89a3      	ldrh	r3, [r4, #12]
 800ecd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ecd8:	81a3      	strh	r3, [r4, #12]
 800ecda:	2300      	movs	r3, #0
 800ecdc:	6063      	str	r3, [r4, #4]
 800ecde:	6923      	ldr	r3, [r4, #16]
 800ece0:	6023      	str	r3, [r4, #0]
 800ece2:	89a3      	ldrh	r3, [r4, #12]
 800ece4:	f043 0308 	orr.w	r3, r3, #8
 800ece8:	81a3      	strh	r3, [r4, #12]
 800ecea:	6923      	ldr	r3, [r4, #16]
 800ecec:	b94b      	cbnz	r3, 800ed02 <__swsetup_r+0x9a>
 800ecee:	89a3      	ldrh	r3, [r4, #12]
 800ecf0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ecf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ecf8:	d003      	beq.n	800ed02 <__swsetup_r+0x9a>
 800ecfa:	4621      	mov	r1, r4
 800ecfc:	4630      	mov	r0, r6
 800ecfe:	f001 fc13 	bl	8010528 <__smakebuf_r>
 800ed02:	89a0      	ldrh	r0, [r4, #12]
 800ed04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ed08:	f010 0301 	ands.w	r3, r0, #1
 800ed0c:	d00a      	beq.n	800ed24 <__swsetup_r+0xbc>
 800ed0e:	2300      	movs	r3, #0
 800ed10:	60a3      	str	r3, [r4, #8]
 800ed12:	6963      	ldr	r3, [r4, #20]
 800ed14:	425b      	negs	r3, r3
 800ed16:	61a3      	str	r3, [r4, #24]
 800ed18:	6923      	ldr	r3, [r4, #16]
 800ed1a:	b943      	cbnz	r3, 800ed2e <__swsetup_r+0xc6>
 800ed1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ed20:	d1ba      	bne.n	800ec98 <__swsetup_r+0x30>
 800ed22:	bd70      	pop	{r4, r5, r6, pc}
 800ed24:	0781      	lsls	r1, r0, #30
 800ed26:	bf58      	it	pl
 800ed28:	6963      	ldrpl	r3, [r4, #20]
 800ed2a:	60a3      	str	r3, [r4, #8]
 800ed2c:	e7f4      	b.n	800ed18 <__swsetup_r+0xb0>
 800ed2e:	2000      	movs	r0, #0
 800ed30:	e7f7      	b.n	800ed22 <__swsetup_r+0xba>
 800ed32:	bf00      	nop
 800ed34:	20000178 	.word	0x20000178
 800ed38:	08013828 	.word	0x08013828
 800ed3c:	08013848 	.word	0x08013848
 800ed40:	08013808 	.word	0x08013808

0800ed44 <_close_r>:
 800ed44:	b538      	push	{r3, r4, r5, lr}
 800ed46:	4d06      	ldr	r5, [pc, #24]	; (800ed60 <_close_r+0x1c>)
 800ed48:	2300      	movs	r3, #0
 800ed4a:	4604      	mov	r4, r0
 800ed4c:	4608      	mov	r0, r1
 800ed4e:	602b      	str	r3, [r5, #0]
 800ed50:	f7f6 fac3 	bl	80052da <_close>
 800ed54:	1c43      	adds	r3, r0, #1
 800ed56:	d102      	bne.n	800ed5e <_close_r+0x1a>
 800ed58:	682b      	ldr	r3, [r5, #0]
 800ed5a:	b103      	cbz	r3, 800ed5e <_close_r+0x1a>
 800ed5c:	6023      	str	r3, [r4, #0]
 800ed5e:	bd38      	pop	{r3, r4, r5, pc}
 800ed60:	200027e0 	.word	0x200027e0

0800ed64 <quorem>:
 800ed64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed68:	6903      	ldr	r3, [r0, #16]
 800ed6a:	690c      	ldr	r4, [r1, #16]
 800ed6c:	42a3      	cmp	r3, r4
 800ed6e:	4607      	mov	r7, r0
 800ed70:	f2c0 8081 	blt.w	800ee76 <quorem+0x112>
 800ed74:	3c01      	subs	r4, #1
 800ed76:	f101 0814 	add.w	r8, r1, #20
 800ed7a:	f100 0514 	add.w	r5, r0, #20
 800ed7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ed82:	9301      	str	r3, [sp, #4]
 800ed84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ed88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ed8c:	3301      	adds	r3, #1
 800ed8e:	429a      	cmp	r2, r3
 800ed90:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ed94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ed98:	fbb2 f6f3 	udiv	r6, r2, r3
 800ed9c:	d331      	bcc.n	800ee02 <quorem+0x9e>
 800ed9e:	f04f 0e00 	mov.w	lr, #0
 800eda2:	4640      	mov	r0, r8
 800eda4:	46ac      	mov	ip, r5
 800eda6:	46f2      	mov	sl, lr
 800eda8:	f850 2b04 	ldr.w	r2, [r0], #4
 800edac:	b293      	uxth	r3, r2
 800edae:	fb06 e303 	mla	r3, r6, r3, lr
 800edb2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800edb6:	b29b      	uxth	r3, r3
 800edb8:	ebaa 0303 	sub.w	r3, sl, r3
 800edbc:	f8dc a000 	ldr.w	sl, [ip]
 800edc0:	0c12      	lsrs	r2, r2, #16
 800edc2:	fa13 f38a 	uxtah	r3, r3, sl
 800edc6:	fb06 e202 	mla	r2, r6, r2, lr
 800edca:	9300      	str	r3, [sp, #0]
 800edcc:	9b00      	ldr	r3, [sp, #0]
 800edce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800edd2:	b292      	uxth	r2, r2
 800edd4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800edd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eddc:	f8bd 3000 	ldrh.w	r3, [sp]
 800ede0:	4581      	cmp	r9, r0
 800ede2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ede6:	f84c 3b04 	str.w	r3, [ip], #4
 800edea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800edee:	d2db      	bcs.n	800eda8 <quorem+0x44>
 800edf0:	f855 300b 	ldr.w	r3, [r5, fp]
 800edf4:	b92b      	cbnz	r3, 800ee02 <quorem+0x9e>
 800edf6:	9b01      	ldr	r3, [sp, #4]
 800edf8:	3b04      	subs	r3, #4
 800edfa:	429d      	cmp	r5, r3
 800edfc:	461a      	mov	r2, r3
 800edfe:	d32e      	bcc.n	800ee5e <quorem+0xfa>
 800ee00:	613c      	str	r4, [r7, #16]
 800ee02:	4638      	mov	r0, r7
 800ee04:	f001 feba 	bl	8010b7c <__mcmp>
 800ee08:	2800      	cmp	r0, #0
 800ee0a:	db24      	blt.n	800ee56 <quorem+0xf2>
 800ee0c:	3601      	adds	r6, #1
 800ee0e:	4628      	mov	r0, r5
 800ee10:	f04f 0c00 	mov.w	ip, #0
 800ee14:	f858 2b04 	ldr.w	r2, [r8], #4
 800ee18:	f8d0 e000 	ldr.w	lr, [r0]
 800ee1c:	b293      	uxth	r3, r2
 800ee1e:	ebac 0303 	sub.w	r3, ip, r3
 800ee22:	0c12      	lsrs	r2, r2, #16
 800ee24:	fa13 f38e 	uxtah	r3, r3, lr
 800ee28:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ee2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ee30:	b29b      	uxth	r3, r3
 800ee32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ee36:	45c1      	cmp	r9, r8
 800ee38:	f840 3b04 	str.w	r3, [r0], #4
 800ee3c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ee40:	d2e8      	bcs.n	800ee14 <quorem+0xb0>
 800ee42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ee46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ee4a:	b922      	cbnz	r2, 800ee56 <quorem+0xf2>
 800ee4c:	3b04      	subs	r3, #4
 800ee4e:	429d      	cmp	r5, r3
 800ee50:	461a      	mov	r2, r3
 800ee52:	d30a      	bcc.n	800ee6a <quorem+0x106>
 800ee54:	613c      	str	r4, [r7, #16]
 800ee56:	4630      	mov	r0, r6
 800ee58:	b003      	add	sp, #12
 800ee5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee5e:	6812      	ldr	r2, [r2, #0]
 800ee60:	3b04      	subs	r3, #4
 800ee62:	2a00      	cmp	r2, #0
 800ee64:	d1cc      	bne.n	800ee00 <quorem+0x9c>
 800ee66:	3c01      	subs	r4, #1
 800ee68:	e7c7      	b.n	800edfa <quorem+0x96>
 800ee6a:	6812      	ldr	r2, [r2, #0]
 800ee6c:	3b04      	subs	r3, #4
 800ee6e:	2a00      	cmp	r2, #0
 800ee70:	d1f0      	bne.n	800ee54 <quorem+0xf0>
 800ee72:	3c01      	subs	r4, #1
 800ee74:	e7eb      	b.n	800ee4e <quorem+0xea>
 800ee76:	2000      	movs	r0, #0
 800ee78:	e7ee      	b.n	800ee58 <quorem+0xf4>
 800ee7a:	0000      	movs	r0, r0
 800ee7c:	0000      	movs	r0, r0
	...

0800ee80 <_dtoa_r>:
 800ee80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee84:	ed2d 8b04 	vpush	{d8-d9}
 800ee88:	ec57 6b10 	vmov	r6, r7, d0
 800ee8c:	b093      	sub	sp, #76	; 0x4c
 800ee8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ee90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ee94:	9106      	str	r1, [sp, #24]
 800ee96:	ee10 aa10 	vmov	sl, s0
 800ee9a:	4604      	mov	r4, r0
 800ee9c:	9209      	str	r2, [sp, #36]	; 0x24
 800ee9e:	930c      	str	r3, [sp, #48]	; 0x30
 800eea0:	46bb      	mov	fp, r7
 800eea2:	b975      	cbnz	r5, 800eec2 <_dtoa_r+0x42>
 800eea4:	2010      	movs	r0, #16
 800eea6:	f7fd feaf 	bl	800cc08 <malloc>
 800eeaa:	4602      	mov	r2, r0
 800eeac:	6260      	str	r0, [r4, #36]	; 0x24
 800eeae:	b920      	cbnz	r0, 800eeba <_dtoa_r+0x3a>
 800eeb0:	4ba7      	ldr	r3, [pc, #668]	; (800f150 <_dtoa_r+0x2d0>)
 800eeb2:	21ea      	movs	r1, #234	; 0xea
 800eeb4:	48a7      	ldr	r0, [pc, #668]	; (800f154 <_dtoa_r+0x2d4>)
 800eeb6:	f002 f9f1 	bl	801129c <__assert_func>
 800eeba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800eebe:	6005      	str	r5, [r0, #0]
 800eec0:	60c5      	str	r5, [r0, #12]
 800eec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eec4:	6819      	ldr	r1, [r3, #0]
 800eec6:	b151      	cbz	r1, 800eede <_dtoa_r+0x5e>
 800eec8:	685a      	ldr	r2, [r3, #4]
 800eeca:	604a      	str	r2, [r1, #4]
 800eecc:	2301      	movs	r3, #1
 800eece:	4093      	lsls	r3, r2
 800eed0:	608b      	str	r3, [r1, #8]
 800eed2:	4620      	mov	r0, r4
 800eed4:	f001 fbc6 	bl	8010664 <_Bfree>
 800eed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eeda:	2200      	movs	r2, #0
 800eedc:	601a      	str	r2, [r3, #0]
 800eede:	1e3b      	subs	r3, r7, #0
 800eee0:	bfaa      	itet	ge
 800eee2:	2300      	movge	r3, #0
 800eee4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800eee8:	f8c8 3000 	strge.w	r3, [r8]
 800eeec:	4b9a      	ldr	r3, [pc, #616]	; (800f158 <_dtoa_r+0x2d8>)
 800eeee:	bfbc      	itt	lt
 800eef0:	2201      	movlt	r2, #1
 800eef2:	f8c8 2000 	strlt.w	r2, [r8]
 800eef6:	ea33 030b 	bics.w	r3, r3, fp
 800eefa:	d11b      	bne.n	800ef34 <_dtoa_r+0xb4>
 800eefc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eefe:	f242 730f 	movw	r3, #9999	; 0x270f
 800ef02:	6013      	str	r3, [r2, #0]
 800ef04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ef08:	4333      	orrs	r3, r6
 800ef0a:	f000 8592 	beq.w	800fa32 <_dtoa_r+0xbb2>
 800ef0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef10:	b963      	cbnz	r3, 800ef2c <_dtoa_r+0xac>
 800ef12:	4b92      	ldr	r3, [pc, #584]	; (800f15c <_dtoa_r+0x2dc>)
 800ef14:	e022      	b.n	800ef5c <_dtoa_r+0xdc>
 800ef16:	4b92      	ldr	r3, [pc, #584]	; (800f160 <_dtoa_r+0x2e0>)
 800ef18:	9301      	str	r3, [sp, #4]
 800ef1a:	3308      	adds	r3, #8
 800ef1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ef1e:	6013      	str	r3, [r2, #0]
 800ef20:	9801      	ldr	r0, [sp, #4]
 800ef22:	b013      	add	sp, #76	; 0x4c
 800ef24:	ecbd 8b04 	vpop	{d8-d9}
 800ef28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef2c:	4b8b      	ldr	r3, [pc, #556]	; (800f15c <_dtoa_r+0x2dc>)
 800ef2e:	9301      	str	r3, [sp, #4]
 800ef30:	3303      	adds	r3, #3
 800ef32:	e7f3      	b.n	800ef1c <_dtoa_r+0x9c>
 800ef34:	2200      	movs	r2, #0
 800ef36:	2300      	movs	r3, #0
 800ef38:	4650      	mov	r0, sl
 800ef3a:	4659      	mov	r1, fp
 800ef3c:	f7f1 fdd4 	bl	8000ae8 <__aeabi_dcmpeq>
 800ef40:	ec4b ab19 	vmov	d9, sl, fp
 800ef44:	4680      	mov	r8, r0
 800ef46:	b158      	cbz	r0, 800ef60 <_dtoa_r+0xe0>
 800ef48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	6013      	str	r3, [r2, #0]
 800ef4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	f000 856b 	beq.w	800fa2c <_dtoa_r+0xbac>
 800ef56:	4883      	ldr	r0, [pc, #524]	; (800f164 <_dtoa_r+0x2e4>)
 800ef58:	6018      	str	r0, [r3, #0]
 800ef5a:	1e43      	subs	r3, r0, #1
 800ef5c:	9301      	str	r3, [sp, #4]
 800ef5e:	e7df      	b.n	800ef20 <_dtoa_r+0xa0>
 800ef60:	ec4b ab10 	vmov	d0, sl, fp
 800ef64:	aa10      	add	r2, sp, #64	; 0x40
 800ef66:	a911      	add	r1, sp, #68	; 0x44
 800ef68:	4620      	mov	r0, r4
 800ef6a:	f001 ff29 	bl	8010dc0 <__d2b>
 800ef6e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ef72:	ee08 0a10 	vmov	s16, r0
 800ef76:	2d00      	cmp	r5, #0
 800ef78:	f000 8084 	beq.w	800f084 <_dtoa_r+0x204>
 800ef7c:	ee19 3a90 	vmov	r3, s19
 800ef80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ef84:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ef88:	4656      	mov	r6, sl
 800ef8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ef8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ef92:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ef96:	4b74      	ldr	r3, [pc, #464]	; (800f168 <_dtoa_r+0x2e8>)
 800ef98:	2200      	movs	r2, #0
 800ef9a:	4630      	mov	r0, r6
 800ef9c:	4639      	mov	r1, r7
 800ef9e:	f7f1 f983 	bl	80002a8 <__aeabi_dsub>
 800efa2:	a365      	add	r3, pc, #404	; (adr r3, 800f138 <_dtoa_r+0x2b8>)
 800efa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa8:	f7f1 fb36 	bl	8000618 <__aeabi_dmul>
 800efac:	a364      	add	r3, pc, #400	; (adr r3, 800f140 <_dtoa_r+0x2c0>)
 800efae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb2:	f7f1 f97b 	bl	80002ac <__adddf3>
 800efb6:	4606      	mov	r6, r0
 800efb8:	4628      	mov	r0, r5
 800efba:	460f      	mov	r7, r1
 800efbc:	f7f1 fac2 	bl	8000544 <__aeabi_i2d>
 800efc0:	a361      	add	r3, pc, #388	; (adr r3, 800f148 <_dtoa_r+0x2c8>)
 800efc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efc6:	f7f1 fb27 	bl	8000618 <__aeabi_dmul>
 800efca:	4602      	mov	r2, r0
 800efcc:	460b      	mov	r3, r1
 800efce:	4630      	mov	r0, r6
 800efd0:	4639      	mov	r1, r7
 800efd2:	f7f1 f96b 	bl	80002ac <__adddf3>
 800efd6:	4606      	mov	r6, r0
 800efd8:	460f      	mov	r7, r1
 800efda:	f7f1 fdcd 	bl	8000b78 <__aeabi_d2iz>
 800efde:	2200      	movs	r2, #0
 800efe0:	9000      	str	r0, [sp, #0]
 800efe2:	2300      	movs	r3, #0
 800efe4:	4630      	mov	r0, r6
 800efe6:	4639      	mov	r1, r7
 800efe8:	f7f1 fd88 	bl	8000afc <__aeabi_dcmplt>
 800efec:	b150      	cbz	r0, 800f004 <_dtoa_r+0x184>
 800efee:	9800      	ldr	r0, [sp, #0]
 800eff0:	f7f1 faa8 	bl	8000544 <__aeabi_i2d>
 800eff4:	4632      	mov	r2, r6
 800eff6:	463b      	mov	r3, r7
 800eff8:	f7f1 fd76 	bl	8000ae8 <__aeabi_dcmpeq>
 800effc:	b910      	cbnz	r0, 800f004 <_dtoa_r+0x184>
 800effe:	9b00      	ldr	r3, [sp, #0]
 800f000:	3b01      	subs	r3, #1
 800f002:	9300      	str	r3, [sp, #0]
 800f004:	9b00      	ldr	r3, [sp, #0]
 800f006:	2b16      	cmp	r3, #22
 800f008:	d85a      	bhi.n	800f0c0 <_dtoa_r+0x240>
 800f00a:	9a00      	ldr	r2, [sp, #0]
 800f00c:	4b57      	ldr	r3, [pc, #348]	; (800f16c <_dtoa_r+0x2ec>)
 800f00e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f016:	ec51 0b19 	vmov	r0, r1, d9
 800f01a:	f7f1 fd6f 	bl	8000afc <__aeabi_dcmplt>
 800f01e:	2800      	cmp	r0, #0
 800f020:	d050      	beq.n	800f0c4 <_dtoa_r+0x244>
 800f022:	9b00      	ldr	r3, [sp, #0]
 800f024:	3b01      	subs	r3, #1
 800f026:	9300      	str	r3, [sp, #0]
 800f028:	2300      	movs	r3, #0
 800f02a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f02c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f02e:	1b5d      	subs	r5, r3, r5
 800f030:	1e6b      	subs	r3, r5, #1
 800f032:	9305      	str	r3, [sp, #20]
 800f034:	bf45      	ittet	mi
 800f036:	f1c5 0301 	rsbmi	r3, r5, #1
 800f03a:	9304      	strmi	r3, [sp, #16]
 800f03c:	2300      	movpl	r3, #0
 800f03e:	2300      	movmi	r3, #0
 800f040:	bf4c      	ite	mi
 800f042:	9305      	strmi	r3, [sp, #20]
 800f044:	9304      	strpl	r3, [sp, #16]
 800f046:	9b00      	ldr	r3, [sp, #0]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	db3d      	blt.n	800f0c8 <_dtoa_r+0x248>
 800f04c:	9b05      	ldr	r3, [sp, #20]
 800f04e:	9a00      	ldr	r2, [sp, #0]
 800f050:	920a      	str	r2, [sp, #40]	; 0x28
 800f052:	4413      	add	r3, r2
 800f054:	9305      	str	r3, [sp, #20]
 800f056:	2300      	movs	r3, #0
 800f058:	9307      	str	r3, [sp, #28]
 800f05a:	9b06      	ldr	r3, [sp, #24]
 800f05c:	2b09      	cmp	r3, #9
 800f05e:	f200 8089 	bhi.w	800f174 <_dtoa_r+0x2f4>
 800f062:	2b05      	cmp	r3, #5
 800f064:	bfc4      	itt	gt
 800f066:	3b04      	subgt	r3, #4
 800f068:	9306      	strgt	r3, [sp, #24]
 800f06a:	9b06      	ldr	r3, [sp, #24]
 800f06c:	f1a3 0302 	sub.w	r3, r3, #2
 800f070:	bfcc      	ite	gt
 800f072:	2500      	movgt	r5, #0
 800f074:	2501      	movle	r5, #1
 800f076:	2b03      	cmp	r3, #3
 800f078:	f200 8087 	bhi.w	800f18a <_dtoa_r+0x30a>
 800f07c:	e8df f003 	tbb	[pc, r3]
 800f080:	59383a2d 	.word	0x59383a2d
 800f084:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f088:	441d      	add	r5, r3
 800f08a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f08e:	2b20      	cmp	r3, #32
 800f090:	bfc1      	itttt	gt
 800f092:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f096:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f09a:	fa0b f303 	lslgt.w	r3, fp, r3
 800f09e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f0a2:	bfda      	itte	le
 800f0a4:	f1c3 0320 	rsble	r3, r3, #32
 800f0a8:	fa06 f003 	lslle.w	r0, r6, r3
 800f0ac:	4318      	orrgt	r0, r3
 800f0ae:	f7f1 fa39 	bl	8000524 <__aeabi_ui2d>
 800f0b2:	2301      	movs	r3, #1
 800f0b4:	4606      	mov	r6, r0
 800f0b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f0ba:	3d01      	subs	r5, #1
 800f0bc:	930e      	str	r3, [sp, #56]	; 0x38
 800f0be:	e76a      	b.n	800ef96 <_dtoa_r+0x116>
 800f0c0:	2301      	movs	r3, #1
 800f0c2:	e7b2      	b.n	800f02a <_dtoa_r+0x1aa>
 800f0c4:	900b      	str	r0, [sp, #44]	; 0x2c
 800f0c6:	e7b1      	b.n	800f02c <_dtoa_r+0x1ac>
 800f0c8:	9b04      	ldr	r3, [sp, #16]
 800f0ca:	9a00      	ldr	r2, [sp, #0]
 800f0cc:	1a9b      	subs	r3, r3, r2
 800f0ce:	9304      	str	r3, [sp, #16]
 800f0d0:	4253      	negs	r3, r2
 800f0d2:	9307      	str	r3, [sp, #28]
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	930a      	str	r3, [sp, #40]	; 0x28
 800f0d8:	e7bf      	b.n	800f05a <_dtoa_r+0x1da>
 800f0da:	2300      	movs	r3, #0
 800f0dc:	9308      	str	r3, [sp, #32]
 800f0de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	dc55      	bgt.n	800f190 <_dtoa_r+0x310>
 800f0e4:	2301      	movs	r3, #1
 800f0e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f0ea:	461a      	mov	r2, r3
 800f0ec:	9209      	str	r2, [sp, #36]	; 0x24
 800f0ee:	e00c      	b.n	800f10a <_dtoa_r+0x28a>
 800f0f0:	2301      	movs	r3, #1
 800f0f2:	e7f3      	b.n	800f0dc <_dtoa_r+0x25c>
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f0f8:	9308      	str	r3, [sp, #32]
 800f0fa:	9b00      	ldr	r3, [sp, #0]
 800f0fc:	4413      	add	r3, r2
 800f0fe:	9302      	str	r3, [sp, #8]
 800f100:	3301      	adds	r3, #1
 800f102:	2b01      	cmp	r3, #1
 800f104:	9303      	str	r3, [sp, #12]
 800f106:	bfb8      	it	lt
 800f108:	2301      	movlt	r3, #1
 800f10a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f10c:	2200      	movs	r2, #0
 800f10e:	6042      	str	r2, [r0, #4]
 800f110:	2204      	movs	r2, #4
 800f112:	f102 0614 	add.w	r6, r2, #20
 800f116:	429e      	cmp	r6, r3
 800f118:	6841      	ldr	r1, [r0, #4]
 800f11a:	d93d      	bls.n	800f198 <_dtoa_r+0x318>
 800f11c:	4620      	mov	r0, r4
 800f11e:	f001 fa61 	bl	80105e4 <_Balloc>
 800f122:	9001      	str	r0, [sp, #4]
 800f124:	2800      	cmp	r0, #0
 800f126:	d13b      	bne.n	800f1a0 <_dtoa_r+0x320>
 800f128:	4b11      	ldr	r3, [pc, #68]	; (800f170 <_dtoa_r+0x2f0>)
 800f12a:	4602      	mov	r2, r0
 800f12c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f130:	e6c0      	b.n	800eeb4 <_dtoa_r+0x34>
 800f132:	2301      	movs	r3, #1
 800f134:	e7df      	b.n	800f0f6 <_dtoa_r+0x276>
 800f136:	bf00      	nop
 800f138:	636f4361 	.word	0x636f4361
 800f13c:	3fd287a7 	.word	0x3fd287a7
 800f140:	8b60c8b3 	.word	0x8b60c8b3
 800f144:	3fc68a28 	.word	0x3fc68a28
 800f148:	509f79fb 	.word	0x509f79fb
 800f14c:	3fd34413 	.word	0x3fd34413
 800f150:	08013785 	.word	0x08013785
 800f154:	0801379c 	.word	0x0801379c
 800f158:	7ff00000 	.word	0x7ff00000
 800f15c:	08013781 	.word	0x08013781
 800f160:	08013778 	.word	0x08013778
 800f164:	080136f9 	.word	0x080136f9
 800f168:	3ff80000 	.word	0x3ff80000
 800f16c:	08013968 	.word	0x08013968
 800f170:	080137f7 	.word	0x080137f7
 800f174:	2501      	movs	r5, #1
 800f176:	2300      	movs	r3, #0
 800f178:	9306      	str	r3, [sp, #24]
 800f17a:	9508      	str	r5, [sp, #32]
 800f17c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f180:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f184:	2200      	movs	r2, #0
 800f186:	2312      	movs	r3, #18
 800f188:	e7b0      	b.n	800f0ec <_dtoa_r+0x26c>
 800f18a:	2301      	movs	r3, #1
 800f18c:	9308      	str	r3, [sp, #32]
 800f18e:	e7f5      	b.n	800f17c <_dtoa_r+0x2fc>
 800f190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f192:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f196:	e7b8      	b.n	800f10a <_dtoa_r+0x28a>
 800f198:	3101      	adds	r1, #1
 800f19a:	6041      	str	r1, [r0, #4]
 800f19c:	0052      	lsls	r2, r2, #1
 800f19e:	e7b8      	b.n	800f112 <_dtoa_r+0x292>
 800f1a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f1a2:	9a01      	ldr	r2, [sp, #4]
 800f1a4:	601a      	str	r2, [r3, #0]
 800f1a6:	9b03      	ldr	r3, [sp, #12]
 800f1a8:	2b0e      	cmp	r3, #14
 800f1aa:	f200 809d 	bhi.w	800f2e8 <_dtoa_r+0x468>
 800f1ae:	2d00      	cmp	r5, #0
 800f1b0:	f000 809a 	beq.w	800f2e8 <_dtoa_r+0x468>
 800f1b4:	9b00      	ldr	r3, [sp, #0]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	dd32      	ble.n	800f220 <_dtoa_r+0x3a0>
 800f1ba:	4ab7      	ldr	r2, [pc, #732]	; (800f498 <_dtoa_r+0x618>)
 800f1bc:	f003 030f 	and.w	r3, r3, #15
 800f1c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f1c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f1c8:	9b00      	ldr	r3, [sp, #0]
 800f1ca:	05d8      	lsls	r0, r3, #23
 800f1cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800f1d0:	d516      	bpl.n	800f200 <_dtoa_r+0x380>
 800f1d2:	4bb2      	ldr	r3, [pc, #712]	; (800f49c <_dtoa_r+0x61c>)
 800f1d4:	ec51 0b19 	vmov	r0, r1, d9
 800f1d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f1dc:	f7f1 fb46 	bl	800086c <__aeabi_ddiv>
 800f1e0:	f007 070f 	and.w	r7, r7, #15
 800f1e4:	4682      	mov	sl, r0
 800f1e6:	468b      	mov	fp, r1
 800f1e8:	2503      	movs	r5, #3
 800f1ea:	4eac      	ldr	r6, [pc, #688]	; (800f49c <_dtoa_r+0x61c>)
 800f1ec:	b957      	cbnz	r7, 800f204 <_dtoa_r+0x384>
 800f1ee:	4642      	mov	r2, r8
 800f1f0:	464b      	mov	r3, r9
 800f1f2:	4650      	mov	r0, sl
 800f1f4:	4659      	mov	r1, fp
 800f1f6:	f7f1 fb39 	bl	800086c <__aeabi_ddiv>
 800f1fa:	4682      	mov	sl, r0
 800f1fc:	468b      	mov	fp, r1
 800f1fe:	e028      	b.n	800f252 <_dtoa_r+0x3d2>
 800f200:	2502      	movs	r5, #2
 800f202:	e7f2      	b.n	800f1ea <_dtoa_r+0x36a>
 800f204:	07f9      	lsls	r1, r7, #31
 800f206:	d508      	bpl.n	800f21a <_dtoa_r+0x39a>
 800f208:	4640      	mov	r0, r8
 800f20a:	4649      	mov	r1, r9
 800f20c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f210:	f7f1 fa02 	bl	8000618 <__aeabi_dmul>
 800f214:	3501      	adds	r5, #1
 800f216:	4680      	mov	r8, r0
 800f218:	4689      	mov	r9, r1
 800f21a:	107f      	asrs	r7, r7, #1
 800f21c:	3608      	adds	r6, #8
 800f21e:	e7e5      	b.n	800f1ec <_dtoa_r+0x36c>
 800f220:	f000 809b 	beq.w	800f35a <_dtoa_r+0x4da>
 800f224:	9b00      	ldr	r3, [sp, #0]
 800f226:	4f9d      	ldr	r7, [pc, #628]	; (800f49c <_dtoa_r+0x61c>)
 800f228:	425e      	negs	r6, r3
 800f22a:	4b9b      	ldr	r3, [pc, #620]	; (800f498 <_dtoa_r+0x618>)
 800f22c:	f006 020f 	and.w	r2, r6, #15
 800f230:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f238:	ec51 0b19 	vmov	r0, r1, d9
 800f23c:	f7f1 f9ec 	bl	8000618 <__aeabi_dmul>
 800f240:	1136      	asrs	r6, r6, #4
 800f242:	4682      	mov	sl, r0
 800f244:	468b      	mov	fp, r1
 800f246:	2300      	movs	r3, #0
 800f248:	2502      	movs	r5, #2
 800f24a:	2e00      	cmp	r6, #0
 800f24c:	d17a      	bne.n	800f344 <_dtoa_r+0x4c4>
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d1d3      	bne.n	800f1fa <_dtoa_r+0x37a>
 800f252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f254:	2b00      	cmp	r3, #0
 800f256:	f000 8082 	beq.w	800f35e <_dtoa_r+0x4de>
 800f25a:	4b91      	ldr	r3, [pc, #580]	; (800f4a0 <_dtoa_r+0x620>)
 800f25c:	2200      	movs	r2, #0
 800f25e:	4650      	mov	r0, sl
 800f260:	4659      	mov	r1, fp
 800f262:	f7f1 fc4b 	bl	8000afc <__aeabi_dcmplt>
 800f266:	2800      	cmp	r0, #0
 800f268:	d079      	beq.n	800f35e <_dtoa_r+0x4de>
 800f26a:	9b03      	ldr	r3, [sp, #12]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d076      	beq.n	800f35e <_dtoa_r+0x4de>
 800f270:	9b02      	ldr	r3, [sp, #8]
 800f272:	2b00      	cmp	r3, #0
 800f274:	dd36      	ble.n	800f2e4 <_dtoa_r+0x464>
 800f276:	9b00      	ldr	r3, [sp, #0]
 800f278:	4650      	mov	r0, sl
 800f27a:	4659      	mov	r1, fp
 800f27c:	1e5f      	subs	r7, r3, #1
 800f27e:	2200      	movs	r2, #0
 800f280:	4b88      	ldr	r3, [pc, #544]	; (800f4a4 <_dtoa_r+0x624>)
 800f282:	f7f1 f9c9 	bl	8000618 <__aeabi_dmul>
 800f286:	9e02      	ldr	r6, [sp, #8]
 800f288:	4682      	mov	sl, r0
 800f28a:	468b      	mov	fp, r1
 800f28c:	3501      	adds	r5, #1
 800f28e:	4628      	mov	r0, r5
 800f290:	f7f1 f958 	bl	8000544 <__aeabi_i2d>
 800f294:	4652      	mov	r2, sl
 800f296:	465b      	mov	r3, fp
 800f298:	f7f1 f9be 	bl	8000618 <__aeabi_dmul>
 800f29c:	4b82      	ldr	r3, [pc, #520]	; (800f4a8 <_dtoa_r+0x628>)
 800f29e:	2200      	movs	r2, #0
 800f2a0:	f7f1 f804 	bl	80002ac <__adddf3>
 800f2a4:	46d0      	mov	r8, sl
 800f2a6:	46d9      	mov	r9, fp
 800f2a8:	4682      	mov	sl, r0
 800f2aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800f2ae:	2e00      	cmp	r6, #0
 800f2b0:	d158      	bne.n	800f364 <_dtoa_r+0x4e4>
 800f2b2:	4b7e      	ldr	r3, [pc, #504]	; (800f4ac <_dtoa_r+0x62c>)
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	4640      	mov	r0, r8
 800f2b8:	4649      	mov	r1, r9
 800f2ba:	f7f0 fff5 	bl	80002a8 <__aeabi_dsub>
 800f2be:	4652      	mov	r2, sl
 800f2c0:	465b      	mov	r3, fp
 800f2c2:	4680      	mov	r8, r0
 800f2c4:	4689      	mov	r9, r1
 800f2c6:	f7f1 fc37 	bl	8000b38 <__aeabi_dcmpgt>
 800f2ca:	2800      	cmp	r0, #0
 800f2cc:	f040 8295 	bne.w	800f7fa <_dtoa_r+0x97a>
 800f2d0:	4652      	mov	r2, sl
 800f2d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f2d6:	4640      	mov	r0, r8
 800f2d8:	4649      	mov	r1, r9
 800f2da:	f7f1 fc0f 	bl	8000afc <__aeabi_dcmplt>
 800f2de:	2800      	cmp	r0, #0
 800f2e0:	f040 8289 	bne.w	800f7f6 <_dtoa_r+0x976>
 800f2e4:	ec5b ab19 	vmov	sl, fp, d9
 800f2e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	f2c0 8148 	blt.w	800f580 <_dtoa_r+0x700>
 800f2f0:	9a00      	ldr	r2, [sp, #0]
 800f2f2:	2a0e      	cmp	r2, #14
 800f2f4:	f300 8144 	bgt.w	800f580 <_dtoa_r+0x700>
 800f2f8:	4b67      	ldr	r3, [pc, #412]	; (800f498 <_dtoa_r+0x618>)
 800f2fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f2fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f304:	2b00      	cmp	r3, #0
 800f306:	f280 80d5 	bge.w	800f4b4 <_dtoa_r+0x634>
 800f30a:	9b03      	ldr	r3, [sp, #12]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	f300 80d1 	bgt.w	800f4b4 <_dtoa_r+0x634>
 800f312:	f040 826f 	bne.w	800f7f4 <_dtoa_r+0x974>
 800f316:	4b65      	ldr	r3, [pc, #404]	; (800f4ac <_dtoa_r+0x62c>)
 800f318:	2200      	movs	r2, #0
 800f31a:	4640      	mov	r0, r8
 800f31c:	4649      	mov	r1, r9
 800f31e:	f7f1 f97b 	bl	8000618 <__aeabi_dmul>
 800f322:	4652      	mov	r2, sl
 800f324:	465b      	mov	r3, fp
 800f326:	f7f1 fbfd 	bl	8000b24 <__aeabi_dcmpge>
 800f32a:	9e03      	ldr	r6, [sp, #12]
 800f32c:	4637      	mov	r7, r6
 800f32e:	2800      	cmp	r0, #0
 800f330:	f040 8245 	bne.w	800f7be <_dtoa_r+0x93e>
 800f334:	9d01      	ldr	r5, [sp, #4]
 800f336:	2331      	movs	r3, #49	; 0x31
 800f338:	f805 3b01 	strb.w	r3, [r5], #1
 800f33c:	9b00      	ldr	r3, [sp, #0]
 800f33e:	3301      	adds	r3, #1
 800f340:	9300      	str	r3, [sp, #0]
 800f342:	e240      	b.n	800f7c6 <_dtoa_r+0x946>
 800f344:	07f2      	lsls	r2, r6, #31
 800f346:	d505      	bpl.n	800f354 <_dtoa_r+0x4d4>
 800f348:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f34c:	f7f1 f964 	bl	8000618 <__aeabi_dmul>
 800f350:	3501      	adds	r5, #1
 800f352:	2301      	movs	r3, #1
 800f354:	1076      	asrs	r6, r6, #1
 800f356:	3708      	adds	r7, #8
 800f358:	e777      	b.n	800f24a <_dtoa_r+0x3ca>
 800f35a:	2502      	movs	r5, #2
 800f35c:	e779      	b.n	800f252 <_dtoa_r+0x3d2>
 800f35e:	9f00      	ldr	r7, [sp, #0]
 800f360:	9e03      	ldr	r6, [sp, #12]
 800f362:	e794      	b.n	800f28e <_dtoa_r+0x40e>
 800f364:	9901      	ldr	r1, [sp, #4]
 800f366:	4b4c      	ldr	r3, [pc, #304]	; (800f498 <_dtoa_r+0x618>)
 800f368:	4431      	add	r1, r6
 800f36a:	910d      	str	r1, [sp, #52]	; 0x34
 800f36c:	9908      	ldr	r1, [sp, #32]
 800f36e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f372:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f376:	2900      	cmp	r1, #0
 800f378:	d043      	beq.n	800f402 <_dtoa_r+0x582>
 800f37a:	494d      	ldr	r1, [pc, #308]	; (800f4b0 <_dtoa_r+0x630>)
 800f37c:	2000      	movs	r0, #0
 800f37e:	f7f1 fa75 	bl	800086c <__aeabi_ddiv>
 800f382:	4652      	mov	r2, sl
 800f384:	465b      	mov	r3, fp
 800f386:	f7f0 ff8f 	bl	80002a8 <__aeabi_dsub>
 800f38a:	9d01      	ldr	r5, [sp, #4]
 800f38c:	4682      	mov	sl, r0
 800f38e:	468b      	mov	fp, r1
 800f390:	4649      	mov	r1, r9
 800f392:	4640      	mov	r0, r8
 800f394:	f7f1 fbf0 	bl	8000b78 <__aeabi_d2iz>
 800f398:	4606      	mov	r6, r0
 800f39a:	f7f1 f8d3 	bl	8000544 <__aeabi_i2d>
 800f39e:	4602      	mov	r2, r0
 800f3a0:	460b      	mov	r3, r1
 800f3a2:	4640      	mov	r0, r8
 800f3a4:	4649      	mov	r1, r9
 800f3a6:	f7f0 ff7f 	bl	80002a8 <__aeabi_dsub>
 800f3aa:	3630      	adds	r6, #48	; 0x30
 800f3ac:	f805 6b01 	strb.w	r6, [r5], #1
 800f3b0:	4652      	mov	r2, sl
 800f3b2:	465b      	mov	r3, fp
 800f3b4:	4680      	mov	r8, r0
 800f3b6:	4689      	mov	r9, r1
 800f3b8:	f7f1 fba0 	bl	8000afc <__aeabi_dcmplt>
 800f3bc:	2800      	cmp	r0, #0
 800f3be:	d163      	bne.n	800f488 <_dtoa_r+0x608>
 800f3c0:	4642      	mov	r2, r8
 800f3c2:	464b      	mov	r3, r9
 800f3c4:	4936      	ldr	r1, [pc, #216]	; (800f4a0 <_dtoa_r+0x620>)
 800f3c6:	2000      	movs	r0, #0
 800f3c8:	f7f0 ff6e 	bl	80002a8 <__aeabi_dsub>
 800f3cc:	4652      	mov	r2, sl
 800f3ce:	465b      	mov	r3, fp
 800f3d0:	f7f1 fb94 	bl	8000afc <__aeabi_dcmplt>
 800f3d4:	2800      	cmp	r0, #0
 800f3d6:	f040 80b5 	bne.w	800f544 <_dtoa_r+0x6c4>
 800f3da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f3dc:	429d      	cmp	r5, r3
 800f3de:	d081      	beq.n	800f2e4 <_dtoa_r+0x464>
 800f3e0:	4b30      	ldr	r3, [pc, #192]	; (800f4a4 <_dtoa_r+0x624>)
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	4650      	mov	r0, sl
 800f3e6:	4659      	mov	r1, fp
 800f3e8:	f7f1 f916 	bl	8000618 <__aeabi_dmul>
 800f3ec:	4b2d      	ldr	r3, [pc, #180]	; (800f4a4 <_dtoa_r+0x624>)
 800f3ee:	4682      	mov	sl, r0
 800f3f0:	468b      	mov	fp, r1
 800f3f2:	4640      	mov	r0, r8
 800f3f4:	4649      	mov	r1, r9
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	f7f1 f90e 	bl	8000618 <__aeabi_dmul>
 800f3fc:	4680      	mov	r8, r0
 800f3fe:	4689      	mov	r9, r1
 800f400:	e7c6      	b.n	800f390 <_dtoa_r+0x510>
 800f402:	4650      	mov	r0, sl
 800f404:	4659      	mov	r1, fp
 800f406:	f7f1 f907 	bl	8000618 <__aeabi_dmul>
 800f40a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f40c:	9d01      	ldr	r5, [sp, #4]
 800f40e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f410:	4682      	mov	sl, r0
 800f412:	468b      	mov	fp, r1
 800f414:	4649      	mov	r1, r9
 800f416:	4640      	mov	r0, r8
 800f418:	f7f1 fbae 	bl	8000b78 <__aeabi_d2iz>
 800f41c:	4606      	mov	r6, r0
 800f41e:	f7f1 f891 	bl	8000544 <__aeabi_i2d>
 800f422:	3630      	adds	r6, #48	; 0x30
 800f424:	4602      	mov	r2, r0
 800f426:	460b      	mov	r3, r1
 800f428:	4640      	mov	r0, r8
 800f42a:	4649      	mov	r1, r9
 800f42c:	f7f0 ff3c 	bl	80002a8 <__aeabi_dsub>
 800f430:	f805 6b01 	strb.w	r6, [r5], #1
 800f434:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f436:	429d      	cmp	r5, r3
 800f438:	4680      	mov	r8, r0
 800f43a:	4689      	mov	r9, r1
 800f43c:	f04f 0200 	mov.w	r2, #0
 800f440:	d124      	bne.n	800f48c <_dtoa_r+0x60c>
 800f442:	4b1b      	ldr	r3, [pc, #108]	; (800f4b0 <_dtoa_r+0x630>)
 800f444:	4650      	mov	r0, sl
 800f446:	4659      	mov	r1, fp
 800f448:	f7f0 ff30 	bl	80002ac <__adddf3>
 800f44c:	4602      	mov	r2, r0
 800f44e:	460b      	mov	r3, r1
 800f450:	4640      	mov	r0, r8
 800f452:	4649      	mov	r1, r9
 800f454:	f7f1 fb70 	bl	8000b38 <__aeabi_dcmpgt>
 800f458:	2800      	cmp	r0, #0
 800f45a:	d173      	bne.n	800f544 <_dtoa_r+0x6c4>
 800f45c:	4652      	mov	r2, sl
 800f45e:	465b      	mov	r3, fp
 800f460:	4913      	ldr	r1, [pc, #76]	; (800f4b0 <_dtoa_r+0x630>)
 800f462:	2000      	movs	r0, #0
 800f464:	f7f0 ff20 	bl	80002a8 <__aeabi_dsub>
 800f468:	4602      	mov	r2, r0
 800f46a:	460b      	mov	r3, r1
 800f46c:	4640      	mov	r0, r8
 800f46e:	4649      	mov	r1, r9
 800f470:	f7f1 fb44 	bl	8000afc <__aeabi_dcmplt>
 800f474:	2800      	cmp	r0, #0
 800f476:	f43f af35 	beq.w	800f2e4 <_dtoa_r+0x464>
 800f47a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f47c:	1e6b      	subs	r3, r5, #1
 800f47e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f480:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f484:	2b30      	cmp	r3, #48	; 0x30
 800f486:	d0f8      	beq.n	800f47a <_dtoa_r+0x5fa>
 800f488:	9700      	str	r7, [sp, #0]
 800f48a:	e049      	b.n	800f520 <_dtoa_r+0x6a0>
 800f48c:	4b05      	ldr	r3, [pc, #20]	; (800f4a4 <_dtoa_r+0x624>)
 800f48e:	f7f1 f8c3 	bl	8000618 <__aeabi_dmul>
 800f492:	4680      	mov	r8, r0
 800f494:	4689      	mov	r9, r1
 800f496:	e7bd      	b.n	800f414 <_dtoa_r+0x594>
 800f498:	08013968 	.word	0x08013968
 800f49c:	08013940 	.word	0x08013940
 800f4a0:	3ff00000 	.word	0x3ff00000
 800f4a4:	40240000 	.word	0x40240000
 800f4a8:	401c0000 	.word	0x401c0000
 800f4ac:	40140000 	.word	0x40140000
 800f4b0:	3fe00000 	.word	0x3fe00000
 800f4b4:	9d01      	ldr	r5, [sp, #4]
 800f4b6:	4656      	mov	r6, sl
 800f4b8:	465f      	mov	r7, fp
 800f4ba:	4642      	mov	r2, r8
 800f4bc:	464b      	mov	r3, r9
 800f4be:	4630      	mov	r0, r6
 800f4c0:	4639      	mov	r1, r7
 800f4c2:	f7f1 f9d3 	bl	800086c <__aeabi_ddiv>
 800f4c6:	f7f1 fb57 	bl	8000b78 <__aeabi_d2iz>
 800f4ca:	4682      	mov	sl, r0
 800f4cc:	f7f1 f83a 	bl	8000544 <__aeabi_i2d>
 800f4d0:	4642      	mov	r2, r8
 800f4d2:	464b      	mov	r3, r9
 800f4d4:	f7f1 f8a0 	bl	8000618 <__aeabi_dmul>
 800f4d8:	4602      	mov	r2, r0
 800f4da:	460b      	mov	r3, r1
 800f4dc:	4630      	mov	r0, r6
 800f4de:	4639      	mov	r1, r7
 800f4e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800f4e4:	f7f0 fee0 	bl	80002a8 <__aeabi_dsub>
 800f4e8:	f805 6b01 	strb.w	r6, [r5], #1
 800f4ec:	9e01      	ldr	r6, [sp, #4]
 800f4ee:	9f03      	ldr	r7, [sp, #12]
 800f4f0:	1bae      	subs	r6, r5, r6
 800f4f2:	42b7      	cmp	r7, r6
 800f4f4:	4602      	mov	r2, r0
 800f4f6:	460b      	mov	r3, r1
 800f4f8:	d135      	bne.n	800f566 <_dtoa_r+0x6e6>
 800f4fa:	f7f0 fed7 	bl	80002ac <__adddf3>
 800f4fe:	4642      	mov	r2, r8
 800f500:	464b      	mov	r3, r9
 800f502:	4606      	mov	r6, r0
 800f504:	460f      	mov	r7, r1
 800f506:	f7f1 fb17 	bl	8000b38 <__aeabi_dcmpgt>
 800f50a:	b9d0      	cbnz	r0, 800f542 <_dtoa_r+0x6c2>
 800f50c:	4642      	mov	r2, r8
 800f50e:	464b      	mov	r3, r9
 800f510:	4630      	mov	r0, r6
 800f512:	4639      	mov	r1, r7
 800f514:	f7f1 fae8 	bl	8000ae8 <__aeabi_dcmpeq>
 800f518:	b110      	cbz	r0, 800f520 <_dtoa_r+0x6a0>
 800f51a:	f01a 0f01 	tst.w	sl, #1
 800f51e:	d110      	bne.n	800f542 <_dtoa_r+0x6c2>
 800f520:	4620      	mov	r0, r4
 800f522:	ee18 1a10 	vmov	r1, s16
 800f526:	f001 f89d 	bl	8010664 <_Bfree>
 800f52a:	2300      	movs	r3, #0
 800f52c:	9800      	ldr	r0, [sp, #0]
 800f52e:	702b      	strb	r3, [r5, #0]
 800f530:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f532:	3001      	adds	r0, #1
 800f534:	6018      	str	r0, [r3, #0]
 800f536:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f538:	2b00      	cmp	r3, #0
 800f53a:	f43f acf1 	beq.w	800ef20 <_dtoa_r+0xa0>
 800f53e:	601d      	str	r5, [r3, #0]
 800f540:	e4ee      	b.n	800ef20 <_dtoa_r+0xa0>
 800f542:	9f00      	ldr	r7, [sp, #0]
 800f544:	462b      	mov	r3, r5
 800f546:	461d      	mov	r5, r3
 800f548:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f54c:	2a39      	cmp	r2, #57	; 0x39
 800f54e:	d106      	bne.n	800f55e <_dtoa_r+0x6de>
 800f550:	9a01      	ldr	r2, [sp, #4]
 800f552:	429a      	cmp	r2, r3
 800f554:	d1f7      	bne.n	800f546 <_dtoa_r+0x6c6>
 800f556:	9901      	ldr	r1, [sp, #4]
 800f558:	2230      	movs	r2, #48	; 0x30
 800f55a:	3701      	adds	r7, #1
 800f55c:	700a      	strb	r2, [r1, #0]
 800f55e:	781a      	ldrb	r2, [r3, #0]
 800f560:	3201      	adds	r2, #1
 800f562:	701a      	strb	r2, [r3, #0]
 800f564:	e790      	b.n	800f488 <_dtoa_r+0x608>
 800f566:	4ba6      	ldr	r3, [pc, #664]	; (800f800 <_dtoa_r+0x980>)
 800f568:	2200      	movs	r2, #0
 800f56a:	f7f1 f855 	bl	8000618 <__aeabi_dmul>
 800f56e:	2200      	movs	r2, #0
 800f570:	2300      	movs	r3, #0
 800f572:	4606      	mov	r6, r0
 800f574:	460f      	mov	r7, r1
 800f576:	f7f1 fab7 	bl	8000ae8 <__aeabi_dcmpeq>
 800f57a:	2800      	cmp	r0, #0
 800f57c:	d09d      	beq.n	800f4ba <_dtoa_r+0x63a>
 800f57e:	e7cf      	b.n	800f520 <_dtoa_r+0x6a0>
 800f580:	9a08      	ldr	r2, [sp, #32]
 800f582:	2a00      	cmp	r2, #0
 800f584:	f000 80d7 	beq.w	800f736 <_dtoa_r+0x8b6>
 800f588:	9a06      	ldr	r2, [sp, #24]
 800f58a:	2a01      	cmp	r2, #1
 800f58c:	f300 80ba 	bgt.w	800f704 <_dtoa_r+0x884>
 800f590:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f592:	2a00      	cmp	r2, #0
 800f594:	f000 80b2 	beq.w	800f6fc <_dtoa_r+0x87c>
 800f598:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f59c:	9e07      	ldr	r6, [sp, #28]
 800f59e:	9d04      	ldr	r5, [sp, #16]
 800f5a0:	9a04      	ldr	r2, [sp, #16]
 800f5a2:	441a      	add	r2, r3
 800f5a4:	9204      	str	r2, [sp, #16]
 800f5a6:	9a05      	ldr	r2, [sp, #20]
 800f5a8:	2101      	movs	r1, #1
 800f5aa:	441a      	add	r2, r3
 800f5ac:	4620      	mov	r0, r4
 800f5ae:	9205      	str	r2, [sp, #20]
 800f5b0:	f001 f95a 	bl	8010868 <__i2b>
 800f5b4:	4607      	mov	r7, r0
 800f5b6:	2d00      	cmp	r5, #0
 800f5b8:	dd0c      	ble.n	800f5d4 <_dtoa_r+0x754>
 800f5ba:	9b05      	ldr	r3, [sp, #20]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	dd09      	ble.n	800f5d4 <_dtoa_r+0x754>
 800f5c0:	42ab      	cmp	r3, r5
 800f5c2:	9a04      	ldr	r2, [sp, #16]
 800f5c4:	bfa8      	it	ge
 800f5c6:	462b      	movge	r3, r5
 800f5c8:	1ad2      	subs	r2, r2, r3
 800f5ca:	9204      	str	r2, [sp, #16]
 800f5cc:	9a05      	ldr	r2, [sp, #20]
 800f5ce:	1aed      	subs	r5, r5, r3
 800f5d0:	1ad3      	subs	r3, r2, r3
 800f5d2:	9305      	str	r3, [sp, #20]
 800f5d4:	9b07      	ldr	r3, [sp, #28]
 800f5d6:	b31b      	cbz	r3, 800f620 <_dtoa_r+0x7a0>
 800f5d8:	9b08      	ldr	r3, [sp, #32]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	f000 80af 	beq.w	800f73e <_dtoa_r+0x8be>
 800f5e0:	2e00      	cmp	r6, #0
 800f5e2:	dd13      	ble.n	800f60c <_dtoa_r+0x78c>
 800f5e4:	4639      	mov	r1, r7
 800f5e6:	4632      	mov	r2, r6
 800f5e8:	4620      	mov	r0, r4
 800f5ea:	f001 f9fd 	bl	80109e8 <__pow5mult>
 800f5ee:	ee18 2a10 	vmov	r2, s16
 800f5f2:	4601      	mov	r1, r0
 800f5f4:	4607      	mov	r7, r0
 800f5f6:	4620      	mov	r0, r4
 800f5f8:	f001 f94c 	bl	8010894 <__multiply>
 800f5fc:	ee18 1a10 	vmov	r1, s16
 800f600:	4680      	mov	r8, r0
 800f602:	4620      	mov	r0, r4
 800f604:	f001 f82e 	bl	8010664 <_Bfree>
 800f608:	ee08 8a10 	vmov	s16, r8
 800f60c:	9b07      	ldr	r3, [sp, #28]
 800f60e:	1b9a      	subs	r2, r3, r6
 800f610:	d006      	beq.n	800f620 <_dtoa_r+0x7a0>
 800f612:	ee18 1a10 	vmov	r1, s16
 800f616:	4620      	mov	r0, r4
 800f618:	f001 f9e6 	bl	80109e8 <__pow5mult>
 800f61c:	ee08 0a10 	vmov	s16, r0
 800f620:	2101      	movs	r1, #1
 800f622:	4620      	mov	r0, r4
 800f624:	f001 f920 	bl	8010868 <__i2b>
 800f628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	4606      	mov	r6, r0
 800f62e:	f340 8088 	ble.w	800f742 <_dtoa_r+0x8c2>
 800f632:	461a      	mov	r2, r3
 800f634:	4601      	mov	r1, r0
 800f636:	4620      	mov	r0, r4
 800f638:	f001 f9d6 	bl	80109e8 <__pow5mult>
 800f63c:	9b06      	ldr	r3, [sp, #24]
 800f63e:	2b01      	cmp	r3, #1
 800f640:	4606      	mov	r6, r0
 800f642:	f340 8081 	ble.w	800f748 <_dtoa_r+0x8c8>
 800f646:	f04f 0800 	mov.w	r8, #0
 800f64a:	6933      	ldr	r3, [r6, #16]
 800f64c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f650:	6918      	ldr	r0, [r3, #16]
 800f652:	f001 f8b9 	bl	80107c8 <__hi0bits>
 800f656:	f1c0 0020 	rsb	r0, r0, #32
 800f65a:	9b05      	ldr	r3, [sp, #20]
 800f65c:	4418      	add	r0, r3
 800f65e:	f010 001f 	ands.w	r0, r0, #31
 800f662:	f000 8092 	beq.w	800f78a <_dtoa_r+0x90a>
 800f666:	f1c0 0320 	rsb	r3, r0, #32
 800f66a:	2b04      	cmp	r3, #4
 800f66c:	f340 808a 	ble.w	800f784 <_dtoa_r+0x904>
 800f670:	f1c0 001c 	rsb	r0, r0, #28
 800f674:	9b04      	ldr	r3, [sp, #16]
 800f676:	4403      	add	r3, r0
 800f678:	9304      	str	r3, [sp, #16]
 800f67a:	9b05      	ldr	r3, [sp, #20]
 800f67c:	4403      	add	r3, r0
 800f67e:	4405      	add	r5, r0
 800f680:	9305      	str	r3, [sp, #20]
 800f682:	9b04      	ldr	r3, [sp, #16]
 800f684:	2b00      	cmp	r3, #0
 800f686:	dd07      	ble.n	800f698 <_dtoa_r+0x818>
 800f688:	ee18 1a10 	vmov	r1, s16
 800f68c:	461a      	mov	r2, r3
 800f68e:	4620      	mov	r0, r4
 800f690:	f001 fa04 	bl	8010a9c <__lshift>
 800f694:	ee08 0a10 	vmov	s16, r0
 800f698:	9b05      	ldr	r3, [sp, #20]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	dd05      	ble.n	800f6aa <_dtoa_r+0x82a>
 800f69e:	4631      	mov	r1, r6
 800f6a0:	461a      	mov	r2, r3
 800f6a2:	4620      	mov	r0, r4
 800f6a4:	f001 f9fa 	bl	8010a9c <__lshift>
 800f6a8:	4606      	mov	r6, r0
 800f6aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d06e      	beq.n	800f78e <_dtoa_r+0x90e>
 800f6b0:	ee18 0a10 	vmov	r0, s16
 800f6b4:	4631      	mov	r1, r6
 800f6b6:	f001 fa61 	bl	8010b7c <__mcmp>
 800f6ba:	2800      	cmp	r0, #0
 800f6bc:	da67      	bge.n	800f78e <_dtoa_r+0x90e>
 800f6be:	9b00      	ldr	r3, [sp, #0]
 800f6c0:	3b01      	subs	r3, #1
 800f6c2:	ee18 1a10 	vmov	r1, s16
 800f6c6:	9300      	str	r3, [sp, #0]
 800f6c8:	220a      	movs	r2, #10
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	4620      	mov	r0, r4
 800f6ce:	f000 ffeb 	bl	80106a8 <__multadd>
 800f6d2:	9b08      	ldr	r3, [sp, #32]
 800f6d4:	ee08 0a10 	vmov	s16, r0
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	f000 81b1 	beq.w	800fa40 <_dtoa_r+0xbc0>
 800f6de:	2300      	movs	r3, #0
 800f6e0:	4639      	mov	r1, r7
 800f6e2:	220a      	movs	r2, #10
 800f6e4:	4620      	mov	r0, r4
 800f6e6:	f000 ffdf 	bl	80106a8 <__multadd>
 800f6ea:	9b02      	ldr	r3, [sp, #8]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	4607      	mov	r7, r0
 800f6f0:	f300 808e 	bgt.w	800f810 <_dtoa_r+0x990>
 800f6f4:	9b06      	ldr	r3, [sp, #24]
 800f6f6:	2b02      	cmp	r3, #2
 800f6f8:	dc51      	bgt.n	800f79e <_dtoa_r+0x91e>
 800f6fa:	e089      	b.n	800f810 <_dtoa_r+0x990>
 800f6fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f6fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f702:	e74b      	b.n	800f59c <_dtoa_r+0x71c>
 800f704:	9b03      	ldr	r3, [sp, #12]
 800f706:	1e5e      	subs	r6, r3, #1
 800f708:	9b07      	ldr	r3, [sp, #28]
 800f70a:	42b3      	cmp	r3, r6
 800f70c:	bfbf      	itttt	lt
 800f70e:	9b07      	ldrlt	r3, [sp, #28]
 800f710:	9607      	strlt	r6, [sp, #28]
 800f712:	1af2      	sublt	r2, r6, r3
 800f714:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f716:	bfb6      	itet	lt
 800f718:	189b      	addlt	r3, r3, r2
 800f71a:	1b9e      	subge	r6, r3, r6
 800f71c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f71e:	9b03      	ldr	r3, [sp, #12]
 800f720:	bfb8      	it	lt
 800f722:	2600      	movlt	r6, #0
 800f724:	2b00      	cmp	r3, #0
 800f726:	bfb7      	itett	lt
 800f728:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f72c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f730:	1a9d      	sublt	r5, r3, r2
 800f732:	2300      	movlt	r3, #0
 800f734:	e734      	b.n	800f5a0 <_dtoa_r+0x720>
 800f736:	9e07      	ldr	r6, [sp, #28]
 800f738:	9d04      	ldr	r5, [sp, #16]
 800f73a:	9f08      	ldr	r7, [sp, #32]
 800f73c:	e73b      	b.n	800f5b6 <_dtoa_r+0x736>
 800f73e:	9a07      	ldr	r2, [sp, #28]
 800f740:	e767      	b.n	800f612 <_dtoa_r+0x792>
 800f742:	9b06      	ldr	r3, [sp, #24]
 800f744:	2b01      	cmp	r3, #1
 800f746:	dc18      	bgt.n	800f77a <_dtoa_r+0x8fa>
 800f748:	f1ba 0f00 	cmp.w	sl, #0
 800f74c:	d115      	bne.n	800f77a <_dtoa_r+0x8fa>
 800f74e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f752:	b993      	cbnz	r3, 800f77a <_dtoa_r+0x8fa>
 800f754:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f758:	0d1b      	lsrs	r3, r3, #20
 800f75a:	051b      	lsls	r3, r3, #20
 800f75c:	b183      	cbz	r3, 800f780 <_dtoa_r+0x900>
 800f75e:	9b04      	ldr	r3, [sp, #16]
 800f760:	3301      	adds	r3, #1
 800f762:	9304      	str	r3, [sp, #16]
 800f764:	9b05      	ldr	r3, [sp, #20]
 800f766:	3301      	adds	r3, #1
 800f768:	9305      	str	r3, [sp, #20]
 800f76a:	f04f 0801 	mov.w	r8, #1
 800f76e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f770:	2b00      	cmp	r3, #0
 800f772:	f47f af6a 	bne.w	800f64a <_dtoa_r+0x7ca>
 800f776:	2001      	movs	r0, #1
 800f778:	e76f      	b.n	800f65a <_dtoa_r+0x7da>
 800f77a:	f04f 0800 	mov.w	r8, #0
 800f77e:	e7f6      	b.n	800f76e <_dtoa_r+0x8ee>
 800f780:	4698      	mov	r8, r3
 800f782:	e7f4      	b.n	800f76e <_dtoa_r+0x8ee>
 800f784:	f43f af7d 	beq.w	800f682 <_dtoa_r+0x802>
 800f788:	4618      	mov	r0, r3
 800f78a:	301c      	adds	r0, #28
 800f78c:	e772      	b.n	800f674 <_dtoa_r+0x7f4>
 800f78e:	9b03      	ldr	r3, [sp, #12]
 800f790:	2b00      	cmp	r3, #0
 800f792:	dc37      	bgt.n	800f804 <_dtoa_r+0x984>
 800f794:	9b06      	ldr	r3, [sp, #24]
 800f796:	2b02      	cmp	r3, #2
 800f798:	dd34      	ble.n	800f804 <_dtoa_r+0x984>
 800f79a:	9b03      	ldr	r3, [sp, #12]
 800f79c:	9302      	str	r3, [sp, #8]
 800f79e:	9b02      	ldr	r3, [sp, #8]
 800f7a0:	b96b      	cbnz	r3, 800f7be <_dtoa_r+0x93e>
 800f7a2:	4631      	mov	r1, r6
 800f7a4:	2205      	movs	r2, #5
 800f7a6:	4620      	mov	r0, r4
 800f7a8:	f000 ff7e 	bl	80106a8 <__multadd>
 800f7ac:	4601      	mov	r1, r0
 800f7ae:	4606      	mov	r6, r0
 800f7b0:	ee18 0a10 	vmov	r0, s16
 800f7b4:	f001 f9e2 	bl	8010b7c <__mcmp>
 800f7b8:	2800      	cmp	r0, #0
 800f7ba:	f73f adbb 	bgt.w	800f334 <_dtoa_r+0x4b4>
 800f7be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7c0:	9d01      	ldr	r5, [sp, #4]
 800f7c2:	43db      	mvns	r3, r3
 800f7c4:	9300      	str	r3, [sp, #0]
 800f7c6:	f04f 0800 	mov.w	r8, #0
 800f7ca:	4631      	mov	r1, r6
 800f7cc:	4620      	mov	r0, r4
 800f7ce:	f000 ff49 	bl	8010664 <_Bfree>
 800f7d2:	2f00      	cmp	r7, #0
 800f7d4:	f43f aea4 	beq.w	800f520 <_dtoa_r+0x6a0>
 800f7d8:	f1b8 0f00 	cmp.w	r8, #0
 800f7dc:	d005      	beq.n	800f7ea <_dtoa_r+0x96a>
 800f7de:	45b8      	cmp	r8, r7
 800f7e0:	d003      	beq.n	800f7ea <_dtoa_r+0x96a>
 800f7e2:	4641      	mov	r1, r8
 800f7e4:	4620      	mov	r0, r4
 800f7e6:	f000 ff3d 	bl	8010664 <_Bfree>
 800f7ea:	4639      	mov	r1, r7
 800f7ec:	4620      	mov	r0, r4
 800f7ee:	f000 ff39 	bl	8010664 <_Bfree>
 800f7f2:	e695      	b.n	800f520 <_dtoa_r+0x6a0>
 800f7f4:	2600      	movs	r6, #0
 800f7f6:	4637      	mov	r7, r6
 800f7f8:	e7e1      	b.n	800f7be <_dtoa_r+0x93e>
 800f7fa:	9700      	str	r7, [sp, #0]
 800f7fc:	4637      	mov	r7, r6
 800f7fe:	e599      	b.n	800f334 <_dtoa_r+0x4b4>
 800f800:	40240000 	.word	0x40240000
 800f804:	9b08      	ldr	r3, [sp, #32]
 800f806:	2b00      	cmp	r3, #0
 800f808:	f000 80ca 	beq.w	800f9a0 <_dtoa_r+0xb20>
 800f80c:	9b03      	ldr	r3, [sp, #12]
 800f80e:	9302      	str	r3, [sp, #8]
 800f810:	2d00      	cmp	r5, #0
 800f812:	dd05      	ble.n	800f820 <_dtoa_r+0x9a0>
 800f814:	4639      	mov	r1, r7
 800f816:	462a      	mov	r2, r5
 800f818:	4620      	mov	r0, r4
 800f81a:	f001 f93f 	bl	8010a9c <__lshift>
 800f81e:	4607      	mov	r7, r0
 800f820:	f1b8 0f00 	cmp.w	r8, #0
 800f824:	d05b      	beq.n	800f8de <_dtoa_r+0xa5e>
 800f826:	6879      	ldr	r1, [r7, #4]
 800f828:	4620      	mov	r0, r4
 800f82a:	f000 fedb 	bl	80105e4 <_Balloc>
 800f82e:	4605      	mov	r5, r0
 800f830:	b928      	cbnz	r0, 800f83e <_dtoa_r+0x9be>
 800f832:	4b87      	ldr	r3, [pc, #540]	; (800fa50 <_dtoa_r+0xbd0>)
 800f834:	4602      	mov	r2, r0
 800f836:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f83a:	f7ff bb3b 	b.w	800eeb4 <_dtoa_r+0x34>
 800f83e:	693a      	ldr	r2, [r7, #16]
 800f840:	3202      	adds	r2, #2
 800f842:	0092      	lsls	r2, r2, #2
 800f844:	f107 010c 	add.w	r1, r7, #12
 800f848:	300c      	adds	r0, #12
 800f84a:	f7fd f9ed 	bl	800cc28 <memcpy>
 800f84e:	2201      	movs	r2, #1
 800f850:	4629      	mov	r1, r5
 800f852:	4620      	mov	r0, r4
 800f854:	f001 f922 	bl	8010a9c <__lshift>
 800f858:	9b01      	ldr	r3, [sp, #4]
 800f85a:	f103 0901 	add.w	r9, r3, #1
 800f85e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f862:	4413      	add	r3, r2
 800f864:	9305      	str	r3, [sp, #20]
 800f866:	f00a 0301 	and.w	r3, sl, #1
 800f86a:	46b8      	mov	r8, r7
 800f86c:	9304      	str	r3, [sp, #16]
 800f86e:	4607      	mov	r7, r0
 800f870:	4631      	mov	r1, r6
 800f872:	ee18 0a10 	vmov	r0, s16
 800f876:	f7ff fa75 	bl	800ed64 <quorem>
 800f87a:	4641      	mov	r1, r8
 800f87c:	9002      	str	r0, [sp, #8]
 800f87e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f882:	ee18 0a10 	vmov	r0, s16
 800f886:	f001 f979 	bl	8010b7c <__mcmp>
 800f88a:	463a      	mov	r2, r7
 800f88c:	9003      	str	r0, [sp, #12]
 800f88e:	4631      	mov	r1, r6
 800f890:	4620      	mov	r0, r4
 800f892:	f001 f98f 	bl	8010bb4 <__mdiff>
 800f896:	68c2      	ldr	r2, [r0, #12]
 800f898:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800f89c:	4605      	mov	r5, r0
 800f89e:	bb02      	cbnz	r2, 800f8e2 <_dtoa_r+0xa62>
 800f8a0:	4601      	mov	r1, r0
 800f8a2:	ee18 0a10 	vmov	r0, s16
 800f8a6:	f001 f969 	bl	8010b7c <__mcmp>
 800f8aa:	4602      	mov	r2, r0
 800f8ac:	4629      	mov	r1, r5
 800f8ae:	4620      	mov	r0, r4
 800f8b0:	9207      	str	r2, [sp, #28]
 800f8b2:	f000 fed7 	bl	8010664 <_Bfree>
 800f8b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f8ba:	ea43 0102 	orr.w	r1, r3, r2
 800f8be:	9b04      	ldr	r3, [sp, #16]
 800f8c0:	430b      	orrs	r3, r1
 800f8c2:	464d      	mov	r5, r9
 800f8c4:	d10f      	bne.n	800f8e6 <_dtoa_r+0xa66>
 800f8c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f8ca:	d02a      	beq.n	800f922 <_dtoa_r+0xaa2>
 800f8cc:	9b03      	ldr	r3, [sp, #12]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	dd02      	ble.n	800f8d8 <_dtoa_r+0xa58>
 800f8d2:	9b02      	ldr	r3, [sp, #8]
 800f8d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f8d8:	f88b a000 	strb.w	sl, [fp]
 800f8dc:	e775      	b.n	800f7ca <_dtoa_r+0x94a>
 800f8de:	4638      	mov	r0, r7
 800f8e0:	e7ba      	b.n	800f858 <_dtoa_r+0x9d8>
 800f8e2:	2201      	movs	r2, #1
 800f8e4:	e7e2      	b.n	800f8ac <_dtoa_r+0xa2c>
 800f8e6:	9b03      	ldr	r3, [sp, #12]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	db04      	blt.n	800f8f6 <_dtoa_r+0xa76>
 800f8ec:	9906      	ldr	r1, [sp, #24]
 800f8ee:	430b      	orrs	r3, r1
 800f8f0:	9904      	ldr	r1, [sp, #16]
 800f8f2:	430b      	orrs	r3, r1
 800f8f4:	d122      	bne.n	800f93c <_dtoa_r+0xabc>
 800f8f6:	2a00      	cmp	r2, #0
 800f8f8:	ddee      	ble.n	800f8d8 <_dtoa_r+0xa58>
 800f8fa:	ee18 1a10 	vmov	r1, s16
 800f8fe:	2201      	movs	r2, #1
 800f900:	4620      	mov	r0, r4
 800f902:	f001 f8cb 	bl	8010a9c <__lshift>
 800f906:	4631      	mov	r1, r6
 800f908:	ee08 0a10 	vmov	s16, r0
 800f90c:	f001 f936 	bl	8010b7c <__mcmp>
 800f910:	2800      	cmp	r0, #0
 800f912:	dc03      	bgt.n	800f91c <_dtoa_r+0xa9c>
 800f914:	d1e0      	bne.n	800f8d8 <_dtoa_r+0xa58>
 800f916:	f01a 0f01 	tst.w	sl, #1
 800f91a:	d0dd      	beq.n	800f8d8 <_dtoa_r+0xa58>
 800f91c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f920:	d1d7      	bne.n	800f8d2 <_dtoa_r+0xa52>
 800f922:	2339      	movs	r3, #57	; 0x39
 800f924:	f88b 3000 	strb.w	r3, [fp]
 800f928:	462b      	mov	r3, r5
 800f92a:	461d      	mov	r5, r3
 800f92c:	3b01      	subs	r3, #1
 800f92e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f932:	2a39      	cmp	r2, #57	; 0x39
 800f934:	d071      	beq.n	800fa1a <_dtoa_r+0xb9a>
 800f936:	3201      	adds	r2, #1
 800f938:	701a      	strb	r2, [r3, #0]
 800f93a:	e746      	b.n	800f7ca <_dtoa_r+0x94a>
 800f93c:	2a00      	cmp	r2, #0
 800f93e:	dd07      	ble.n	800f950 <_dtoa_r+0xad0>
 800f940:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f944:	d0ed      	beq.n	800f922 <_dtoa_r+0xaa2>
 800f946:	f10a 0301 	add.w	r3, sl, #1
 800f94a:	f88b 3000 	strb.w	r3, [fp]
 800f94e:	e73c      	b.n	800f7ca <_dtoa_r+0x94a>
 800f950:	9b05      	ldr	r3, [sp, #20]
 800f952:	f809 ac01 	strb.w	sl, [r9, #-1]
 800f956:	4599      	cmp	r9, r3
 800f958:	d047      	beq.n	800f9ea <_dtoa_r+0xb6a>
 800f95a:	ee18 1a10 	vmov	r1, s16
 800f95e:	2300      	movs	r3, #0
 800f960:	220a      	movs	r2, #10
 800f962:	4620      	mov	r0, r4
 800f964:	f000 fea0 	bl	80106a8 <__multadd>
 800f968:	45b8      	cmp	r8, r7
 800f96a:	ee08 0a10 	vmov	s16, r0
 800f96e:	f04f 0300 	mov.w	r3, #0
 800f972:	f04f 020a 	mov.w	r2, #10
 800f976:	4641      	mov	r1, r8
 800f978:	4620      	mov	r0, r4
 800f97a:	d106      	bne.n	800f98a <_dtoa_r+0xb0a>
 800f97c:	f000 fe94 	bl	80106a8 <__multadd>
 800f980:	4680      	mov	r8, r0
 800f982:	4607      	mov	r7, r0
 800f984:	f109 0901 	add.w	r9, r9, #1
 800f988:	e772      	b.n	800f870 <_dtoa_r+0x9f0>
 800f98a:	f000 fe8d 	bl	80106a8 <__multadd>
 800f98e:	4639      	mov	r1, r7
 800f990:	4680      	mov	r8, r0
 800f992:	2300      	movs	r3, #0
 800f994:	220a      	movs	r2, #10
 800f996:	4620      	mov	r0, r4
 800f998:	f000 fe86 	bl	80106a8 <__multadd>
 800f99c:	4607      	mov	r7, r0
 800f99e:	e7f1      	b.n	800f984 <_dtoa_r+0xb04>
 800f9a0:	9b03      	ldr	r3, [sp, #12]
 800f9a2:	9302      	str	r3, [sp, #8]
 800f9a4:	9d01      	ldr	r5, [sp, #4]
 800f9a6:	ee18 0a10 	vmov	r0, s16
 800f9aa:	4631      	mov	r1, r6
 800f9ac:	f7ff f9da 	bl	800ed64 <quorem>
 800f9b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f9b4:	9b01      	ldr	r3, [sp, #4]
 800f9b6:	f805 ab01 	strb.w	sl, [r5], #1
 800f9ba:	1aea      	subs	r2, r5, r3
 800f9bc:	9b02      	ldr	r3, [sp, #8]
 800f9be:	4293      	cmp	r3, r2
 800f9c0:	dd09      	ble.n	800f9d6 <_dtoa_r+0xb56>
 800f9c2:	ee18 1a10 	vmov	r1, s16
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	220a      	movs	r2, #10
 800f9ca:	4620      	mov	r0, r4
 800f9cc:	f000 fe6c 	bl	80106a8 <__multadd>
 800f9d0:	ee08 0a10 	vmov	s16, r0
 800f9d4:	e7e7      	b.n	800f9a6 <_dtoa_r+0xb26>
 800f9d6:	9b02      	ldr	r3, [sp, #8]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	bfc8      	it	gt
 800f9dc:	461d      	movgt	r5, r3
 800f9de:	9b01      	ldr	r3, [sp, #4]
 800f9e0:	bfd8      	it	le
 800f9e2:	2501      	movle	r5, #1
 800f9e4:	441d      	add	r5, r3
 800f9e6:	f04f 0800 	mov.w	r8, #0
 800f9ea:	ee18 1a10 	vmov	r1, s16
 800f9ee:	2201      	movs	r2, #1
 800f9f0:	4620      	mov	r0, r4
 800f9f2:	f001 f853 	bl	8010a9c <__lshift>
 800f9f6:	4631      	mov	r1, r6
 800f9f8:	ee08 0a10 	vmov	s16, r0
 800f9fc:	f001 f8be 	bl	8010b7c <__mcmp>
 800fa00:	2800      	cmp	r0, #0
 800fa02:	dc91      	bgt.n	800f928 <_dtoa_r+0xaa8>
 800fa04:	d102      	bne.n	800fa0c <_dtoa_r+0xb8c>
 800fa06:	f01a 0f01 	tst.w	sl, #1
 800fa0a:	d18d      	bne.n	800f928 <_dtoa_r+0xaa8>
 800fa0c:	462b      	mov	r3, r5
 800fa0e:	461d      	mov	r5, r3
 800fa10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fa14:	2a30      	cmp	r2, #48	; 0x30
 800fa16:	d0fa      	beq.n	800fa0e <_dtoa_r+0xb8e>
 800fa18:	e6d7      	b.n	800f7ca <_dtoa_r+0x94a>
 800fa1a:	9a01      	ldr	r2, [sp, #4]
 800fa1c:	429a      	cmp	r2, r3
 800fa1e:	d184      	bne.n	800f92a <_dtoa_r+0xaaa>
 800fa20:	9b00      	ldr	r3, [sp, #0]
 800fa22:	3301      	adds	r3, #1
 800fa24:	9300      	str	r3, [sp, #0]
 800fa26:	2331      	movs	r3, #49	; 0x31
 800fa28:	7013      	strb	r3, [r2, #0]
 800fa2a:	e6ce      	b.n	800f7ca <_dtoa_r+0x94a>
 800fa2c:	4b09      	ldr	r3, [pc, #36]	; (800fa54 <_dtoa_r+0xbd4>)
 800fa2e:	f7ff ba95 	b.w	800ef5c <_dtoa_r+0xdc>
 800fa32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	f47f aa6e 	bne.w	800ef16 <_dtoa_r+0x96>
 800fa3a:	4b07      	ldr	r3, [pc, #28]	; (800fa58 <_dtoa_r+0xbd8>)
 800fa3c:	f7ff ba8e 	b.w	800ef5c <_dtoa_r+0xdc>
 800fa40:	9b02      	ldr	r3, [sp, #8]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	dcae      	bgt.n	800f9a4 <_dtoa_r+0xb24>
 800fa46:	9b06      	ldr	r3, [sp, #24]
 800fa48:	2b02      	cmp	r3, #2
 800fa4a:	f73f aea8 	bgt.w	800f79e <_dtoa_r+0x91e>
 800fa4e:	e7a9      	b.n	800f9a4 <_dtoa_r+0xb24>
 800fa50:	080137f7 	.word	0x080137f7
 800fa54:	080136f8 	.word	0x080136f8
 800fa58:	08013778 	.word	0x08013778

0800fa5c <__sflush_r>:
 800fa5c:	898a      	ldrh	r2, [r1, #12]
 800fa5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa62:	4605      	mov	r5, r0
 800fa64:	0710      	lsls	r0, r2, #28
 800fa66:	460c      	mov	r4, r1
 800fa68:	d458      	bmi.n	800fb1c <__sflush_r+0xc0>
 800fa6a:	684b      	ldr	r3, [r1, #4]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	dc05      	bgt.n	800fa7c <__sflush_r+0x20>
 800fa70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	dc02      	bgt.n	800fa7c <__sflush_r+0x20>
 800fa76:	2000      	movs	r0, #0
 800fa78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fa7e:	2e00      	cmp	r6, #0
 800fa80:	d0f9      	beq.n	800fa76 <__sflush_r+0x1a>
 800fa82:	2300      	movs	r3, #0
 800fa84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fa88:	682f      	ldr	r7, [r5, #0]
 800fa8a:	602b      	str	r3, [r5, #0]
 800fa8c:	d032      	beq.n	800faf4 <__sflush_r+0x98>
 800fa8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fa90:	89a3      	ldrh	r3, [r4, #12]
 800fa92:	075a      	lsls	r2, r3, #29
 800fa94:	d505      	bpl.n	800faa2 <__sflush_r+0x46>
 800fa96:	6863      	ldr	r3, [r4, #4]
 800fa98:	1ac0      	subs	r0, r0, r3
 800fa9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fa9c:	b10b      	cbz	r3, 800faa2 <__sflush_r+0x46>
 800fa9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800faa0:	1ac0      	subs	r0, r0, r3
 800faa2:	2300      	movs	r3, #0
 800faa4:	4602      	mov	r2, r0
 800faa6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800faa8:	6a21      	ldr	r1, [r4, #32]
 800faaa:	4628      	mov	r0, r5
 800faac:	47b0      	blx	r6
 800faae:	1c43      	adds	r3, r0, #1
 800fab0:	89a3      	ldrh	r3, [r4, #12]
 800fab2:	d106      	bne.n	800fac2 <__sflush_r+0x66>
 800fab4:	6829      	ldr	r1, [r5, #0]
 800fab6:	291d      	cmp	r1, #29
 800fab8:	d82c      	bhi.n	800fb14 <__sflush_r+0xb8>
 800faba:	4a2a      	ldr	r2, [pc, #168]	; (800fb64 <__sflush_r+0x108>)
 800fabc:	40ca      	lsrs	r2, r1
 800fabe:	07d6      	lsls	r6, r2, #31
 800fac0:	d528      	bpl.n	800fb14 <__sflush_r+0xb8>
 800fac2:	2200      	movs	r2, #0
 800fac4:	6062      	str	r2, [r4, #4]
 800fac6:	04d9      	lsls	r1, r3, #19
 800fac8:	6922      	ldr	r2, [r4, #16]
 800faca:	6022      	str	r2, [r4, #0]
 800facc:	d504      	bpl.n	800fad8 <__sflush_r+0x7c>
 800face:	1c42      	adds	r2, r0, #1
 800fad0:	d101      	bne.n	800fad6 <__sflush_r+0x7a>
 800fad2:	682b      	ldr	r3, [r5, #0]
 800fad4:	b903      	cbnz	r3, 800fad8 <__sflush_r+0x7c>
 800fad6:	6560      	str	r0, [r4, #84]	; 0x54
 800fad8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fada:	602f      	str	r7, [r5, #0]
 800fadc:	2900      	cmp	r1, #0
 800fade:	d0ca      	beq.n	800fa76 <__sflush_r+0x1a>
 800fae0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fae4:	4299      	cmp	r1, r3
 800fae6:	d002      	beq.n	800faee <__sflush_r+0x92>
 800fae8:	4628      	mov	r0, r5
 800faea:	f7fd f8b3 	bl	800cc54 <_free_r>
 800faee:	2000      	movs	r0, #0
 800faf0:	6360      	str	r0, [r4, #52]	; 0x34
 800faf2:	e7c1      	b.n	800fa78 <__sflush_r+0x1c>
 800faf4:	6a21      	ldr	r1, [r4, #32]
 800faf6:	2301      	movs	r3, #1
 800faf8:	4628      	mov	r0, r5
 800fafa:	47b0      	blx	r6
 800fafc:	1c41      	adds	r1, r0, #1
 800fafe:	d1c7      	bne.n	800fa90 <__sflush_r+0x34>
 800fb00:	682b      	ldr	r3, [r5, #0]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d0c4      	beq.n	800fa90 <__sflush_r+0x34>
 800fb06:	2b1d      	cmp	r3, #29
 800fb08:	d001      	beq.n	800fb0e <__sflush_r+0xb2>
 800fb0a:	2b16      	cmp	r3, #22
 800fb0c:	d101      	bne.n	800fb12 <__sflush_r+0xb6>
 800fb0e:	602f      	str	r7, [r5, #0]
 800fb10:	e7b1      	b.n	800fa76 <__sflush_r+0x1a>
 800fb12:	89a3      	ldrh	r3, [r4, #12]
 800fb14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb18:	81a3      	strh	r3, [r4, #12]
 800fb1a:	e7ad      	b.n	800fa78 <__sflush_r+0x1c>
 800fb1c:	690f      	ldr	r7, [r1, #16]
 800fb1e:	2f00      	cmp	r7, #0
 800fb20:	d0a9      	beq.n	800fa76 <__sflush_r+0x1a>
 800fb22:	0793      	lsls	r3, r2, #30
 800fb24:	680e      	ldr	r6, [r1, #0]
 800fb26:	bf08      	it	eq
 800fb28:	694b      	ldreq	r3, [r1, #20]
 800fb2a:	600f      	str	r7, [r1, #0]
 800fb2c:	bf18      	it	ne
 800fb2e:	2300      	movne	r3, #0
 800fb30:	eba6 0807 	sub.w	r8, r6, r7
 800fb34:	608b      	str	r3, [r1, #8]
 800fb36:	f1b8 0f00 	cmp.w	r8, #0
 800fb3a:	dd9c      	ble.n	800fa76 <__sflush_r+0x1a>
 800fb3c:	6a21      	ldr	r1, [r4, #32]
 800fb3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fb40:	4643      	mov	r3, r8
 800fb42:	463a      	mov	r2, r7
 800fb44:	4628      	mov	r0, r5
 800fb46:	47b0      	blx	r6
 800fb48:	2800      	cmp	r0, #0
 800fb4a:	dc06      	bgt.n	800fb5a <__sflush_r+0xfe>
 800fb4c:	89a3      	ldrh	r3, [r4, #12]
 800fb4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb52:	81a3      	strh	r3, [r4, #12]
 800fb54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fb58:	e78e      	b.n	800fa78 <__sflush_r+0x1c>
 800fb5a:	4407      	add	r7, r0
 800fb5c:	eba8 0800 	sub.w	r8, r8, r0
 800fb60:	e7e9      	b.n	800fb36 <__sflush_r+0xda>
 800fb62:	bf00      	nop
 800fb64:	20400001 	.word	0x20400001

0800fb68 <_fflush_r>:
 800fb68:	b538      	push	{r3, r4, r5, lr}
 800fb6a:	690b      	ldr	r3, [r1, #16]
 800fb6c:	4605      	mov	r5, r0
 800fb6e:	460c      	mov	r4, r1
 800fb70:	b913      	cbnz	r3, 800fb78 <_fflush_r+0x10>
 800fb72:	2500      	movs	r5, #0
 800fb74:	4628      	mov	r0, r5
 800fb76:	bd38      	pop	{r3, r4, r5, pc}
 800fb78:	b118      	cbz	r0, 800fb82 <_fflush_r+0x1a>
 800fb7a:	6983      	ldr	r3, [r0, #24]
 800fb7c:	b90b      	cbnz	r3, 800fb82 <_fflush_r+0x1a>
 800fb7e:	f000 f887 	bl	800fc90 <__sinit>
 800fb82:	4b14      	ldr	r3, [pc, #80]	; (800fbd4 <_fflush_r+0x6c>)
 800fb84:	429c      	cmp	r4, r3
 800fb86:	d11b      	bne.n	800fbc0 <_fflush_r+0x58>
 800fb88:	686c      	ldr	r4, [r5, #4]
 800fb8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d0ef      	beq.n	800fb72 <_fflush_r+0xa>
 800fb92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fb94:	07d0      	lsls	r0, r2, #31
 800fb96:	d404      	bmi.n	800fba2 <_fflush_r+0x3a>
 800fb98:	0599      	lsls	r1, r3, #22
 800fb9a:	d402      	bmi.n	800fba2 <_fflush_r+0x3a>
 800fb9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fb9e:	f000 fc88 	bl	80104b2 <__retarget_lock_acquire_recursive>
 800fba2:	4628      	mov	r0, r5
 800fba4:	4621      	mov	r1, r4
 800fba6:	f7ff ff59 	bl	800fa5c <__sflush_r>
 800fbaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fbac:	07da      	lsls	r2, r3, #31
 800fbae:	4605      	mov	r5, r0
 800fbb0:	d4e0      	bmi.n	800fb74 <_fflush_r+0xc>
 800fbb2:	89a3      	ldrh	r3, [r4, #12]
 800fbb4:	059b      	lsls	r3, r3, #22
 800fbb6:	d4dd      	bmi.n	800fb74 <_fflush_r+0xc>
 800fbb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fbba:	f000 fc7b 	bl	80104b4 <__retarget_lock_release_recursive>
 800fbbe:	e7d9      	b.n	800fb74 <_fflush_r+0xc>
 800fbc0:	4b05      	ldr	r3, [pc, #20]	; (800fbd8 <_fflush_r+0x70>)
 800fbc2:	429c      	cmp	r4, r3
 800fbc4:	d101      	bne.n	800fbca <_fflush_r+0x62>
 800fbc6:	68ac      	ldr	r4, [r5, #8]
 800fbc8:	e7df      	b.n	800fb8a <_fflush_r+0x22>
 800fbca:	4b04      	ldr	r3, [pc, #16]	; (800fbdc <_fflush_r+0x74>)
 800fbcc:	429c      	cmp	r4, r3
 800fbce:	bf08      	it	eq
 800fbd0:	68ec      	ldreq	r4, [r5, #12]
 800fbd2:	e7da      	b.n	800fb8a <_fflush_r+0x22>
 800fbd4:	08013828 	.word	0x08013828
 800fbd8:	08013848 	.word	0x08013848
 800fbdc:	08013808 	.word	0x08013808

0800fbe0 <std>:
 800fbe0:	2300      	movs	r3, #0
 800fbe2:	b510      	push	{r4, lr}
 800fbe4:	4604      	mov	r4, r0
 800fbe6:	e9c0 3300 	strd	r3, r3, [r0]
 800fbea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fbee:	6083      	str	r3, [r0, #8]
 800fbf0:	8181      	strh	r1, [r0, #12]
 800fbf2:	6643      	str	r3, [r0, #100]	; 0x64
 800fbf4:	81c2      	strh	r2, [r0, #14]
 800fbf6:	6183      	str	r3, [r0, #24]
 800fbf8:	4619      	mov	r1, r3
 800fbfa:	2208      	movs	r2, #8
 800fbfc:	305c      	adds	r0, #92	; 0x5c
 800fbfe:	f7fd f821 	bl	800cc44 <memset>
 800fc02:	4b05      	ldr	r3, [pc, #20]	; (800fc18 <std+0x38>)
 800fc04:	6263      	str	r3, [r4, #36]	; 0x24
 800fc06:	4b05      	ldr	r3, [pc, #20]	; (800fc1c <std+0x3c>)
 800fc08:	62a3      	str	r3, [r4, #40]	; 0x28
 800fc0a:	4b05      	ldr	r3, [pc, #20]	; (800fc20 <std+0x40>)
 800fc0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fc0e:	4b05      	ldr	r3, [pc, #20]	; (800fc24 <std+0x44>)
 800fc10:	6224      	str	r4, [r4, #32]
 800fc12:	6323      	str	r3, [r4, #48]	; 0x30
 800fc14:	bd10      	pop	{r4, pc}
 800fc16:	bf00      	nop
 800fc18:	0800dcc9 	.word	0x0800dcc9
 800fc1c:	0800dceb 	.word	0x0800dceb
 800fc20:	0800dd23 	.word	0x0800dd23
 800fc24:	0800dd47 	.word	0x0800dd47

0800fc28 <_cleanup_r>:
 800fc28:	4901      	ldr	r1, [pc, #4]	; (800fc30 <_cleanup_r+0x8>)
 800fc2a:	f000 b8af 	b.w	800fd8c <_fwalk_reent>
 800fc2e:	bf00      	nop
 800fc30:	0800fb69 	.word	0x0800fb69

0800fc34 <__sfmoreglue>:
 800fc34:	b570      	push	{r4, r5, r6, lr}
 800fc36:	2268      	movs	r2, #104	; 0x68
 800fc38:	1e4d      	subs	r5, r1, #1
 800fc3a:	4355      	muls	r5, r2
 800fc3c:	460e      	mov	r6, r1
 800fc3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fc42:	f7fd f873 	bl	800cd2c <_malloc_r>
 800fc46:	4604      	mov	r4, r0
 800fc48:	b140      	cbz	r0, 800fc5c <__sfmoreglue+0x28>
 800fc4a:	2100      	movs	r1, #0
 800fc4c:	e9c0 1600 	strd	r1, r6, [r0]
 800fc50:	300c      	adds	r0, #12
 800fc52:	60a0      	str	r0, [r4, #8]
 800fc54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fc58:	f7fc fff4 	bl	800cc44 <memset>
 800fc5c:	4620      	mov	r0, r4
 800fc5e:	bd70      	pop	{r4, r5, r6, pc}

0800fc60 <__sfp_lock_acquire>:
 800fc60:	4801      	ldr	r0, [pc, #4]	; (800fc68 <__sfp_lock_acquire+0x8>)
 800fc62:	f000 bc26 	b.w	80104b2 <__retarget_lock_acquire_recursive>
 800fc66:	bf00      	nop
 800fc68:	200027dd 	.word	0x200027dd

0800fc6c <__sfp_lock_release>:
 800fc6c:	4801      	ldr	r0, [pc, #4]	; (800fc74 <__sfp_lock_release+0x8>)
 800fc6e:	f000 bc21 	b.w	80104b4 <__retarget_lock_release_recursive>
 800fc72:	bf00      	nop
 800fc74:	200027dd 	.word	0x200027dd

0800fc78 <__sinit_lock_acquire>:
 800fc78:	4801      	ldr	r0, [pc, #4]	; (800fc80 <__sinit_lock_acquire+0x8>)
 800fc7a:	f000 bc1a 	b.w	80104b2 <__retarget_lock_acquire_recursive>
 800fc7e:	bf00      	nop
 800fc80:	200027de 	.word	0x200027de

0800fc84 <__sinit_lock_release>:
 800fc84:	4801      	ldr	r0, [pc, #4]	; (800fc8c <__sinit_lock_release+0x8>)
 800fc86:	f000 bc15 	b.w	80104b4 <__retarget_lock_release_recursive>
 800fc8a:	bf00      	nop
 800fc8c:	200027de 	.word	0x200027de

0800fc90 <__sinit>:
 800fc90:	b510      	push	{r4, lr}
 800fc92:	4604      	mov	r4, r0
 800fc94:	f7ff fff0 	bl	800fc78 <__sinit_lock_acquire>
 800fc98:	69a3      	ldr	r3, [r4, #24]
 800fc9a:	b11b      	cbz	r3, 800fca4 <__sinit+0x14>
 800fc9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fca0:	f7ff bff0 	b.w	800fc84 <__sinit_lock_release>
 800fca4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fca8:	6523      	str	r3, [r4, #80]	; 0x50
 800fcaa:	4b13      	ldr	r3, [pc, #76]	; (800fcf8 <__sinit+0x68>)
 800fcac:	4a13      	ldr	r2, [pc, #76]	; (800fcfc <__sinit+0x6c>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	62a2      	str	r2, [r4, #40]	; 0x28
 800fcb2:	42a3      	cmp	r3, r4
 800fcb4:	bf04      	itt	eq
 800fcb6:	2301      	moveq	r3, #1
 800fcb8:	61a3      	streq	r3, [r4, #24]
 800fcba:	4620      	mov	r0, r4
 800fcbc:	f000 f820 	bl	800fd00 <__sfp>
 800fcc0:	6060      	str	r0, [r4, #4]
 800fcc2:	4620      	mov	r0, r4
 800fcc4:	f000 f81c 	bl	800fd00 <__sfp>
 800fcc8:	60a0      	str	r0, [r4, #8]
 800fcca:	4620      	mov	r0, r4
 800fccc:	f000 f818 	bl	800fd00 <__sfp>
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	60e0      	str	r0, [r4, #12]
 800fcd4:	2104      	movs	r1, #4
 800fcd6:	6860      	ldr	r0, [r4, #4]
 800fcd8:	f7ff ff82 	bl	800fbe0 <std>
 800fcdc:	68a0      	ldr	r0, [r4, #8]
 800fcde:	2201      	movs	r2, #1
 800fce0:	2109      	movs	r1, #9
 800fce2:	f7ff ff7d 	bl	800fbe0 <std>
 800fce6:	68e0      	ldr	r0, [r4, #12]
 800fce8:	2202      	movs	r2, #2
 800fcea:	2112      	movs	r1, #18
 800fcec:	f7ff ff78 	bl	800fbe0 <std>
 800fcf0:	2301      	movs	r3, #1
 800fcf2:	61a3      	str	r3, [r4, #24]
 800fcf4:	e7d2      	b.n	800fc9c <__sinit+0xc>
 800fcf6:	bf00      	nop
 800fcf8:	080136e4 	.word	0x080136e4
 800fcfc:	0800fc29 	.word	0x0800fc29

0800fd00 <__sfp>:
 800fd00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd02:	4607      	mov	r7, r0
 800fd04:	f7ff ffac 	bl	800fc60 <__sfp_lock_acquire>
 800fd08:	4b1e      	ldr	r3, [pc, #120]	; (800fd84 <__sfp+0x84>)
 800fd0a:	681e      	ldr	r6, [r3, #0]
 800fd0c:	69b3      	ldr	r3, [r6, #24]
 800fd0e:	b913      	cbnz	r3, 800fd16 <__sfp+0x16>
 800fd10:	4630      	mov	r0, r6
 800fd12:	f7ff ffbd 	bl	800fc90 <__sinit>
 800fd16:	3648      	adds	r6, #72	; 0x48
 800fd18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fd1c:	3b01      	subs	r3, #1
 800fd1e:	d503      	bpl.n	800fd28 <__sfp+0x28>
 800fd20:	6833      	ldr	r3, [r6, #0]
 800fd22:	b30b      	cbz	r3, 800fd68 <__sfp+0x68>
 800fd24:	6836      	ldr	r6, [r6, #0]
 800fd26:	e7f7      	b.n	800fd18 <__sfp+0x18>
 800fd28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fd2c:	b9d5      	cbnz	r5, 800fd64 <__sfp+0x64>
 800fd2e:	4b16      	ldr	r3, [pc, #88]	; (800fd88 <__sfp+0x88>)
 800fd30:	60e3      	str	r3, [r4, #12]
 800fd32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fd36:	6665      	str	r5, [r4, #100]	; 0x64
 800fd38:	f000 fbba 	bl	80104b0 <__retarget_lock_init_recursive>
 800fd3c:	f7ff ff96 	bl	800fc6c <__sfp_lock_release>
 800fd40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fd44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fd48:	6025      	str	r5, [r4, #0]
 800fd4a:	61a5      	str	r5, [r4, #24]
 800fd4c:	2208      	movs	r2, #8
 800fd4e:	4629      	mov	r1, r5
 800fd50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fd54:	f7fc ff76 	bl	800cc44 <memset>
 800fd58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fd5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fd60:	4620      	mov	r0, r4
 800fd62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd64:	3468      	adds	r4, #104	; 0x68
 800fd66:	e7d9      	b.n	800fd1c <__sfp+0x1c>
 800fd68:	2104      	movs	r1, #4
 800fd6a:	4638      	mov	r0, r7
 800fd6c:	f7ff ff62 	bl	800fc34 <__sfmoreglue>
 800fd70:	4604      	mov	r4, r0
 800fd72:	6030      	str	r0, [r6, #0]
 800fd74:	2800      	cmp	r0, #0
 800fd76:	d1d5      	bne.n	800fd24 <__sfp+0x24>
 800fd78:	f7ff ff78 	bl	800fc6c <__sfp_lock_release>
 800fd7c:	230c      	movs	r3, #12
 800fd7e:	603b      	str	r3, [r7, #0]
 800fd80:	e7ee      	b.n	800fd60 <__sfp+0x60>
 800fd82:	bf00      	nop
 800fd84:	080136e4 	.word	0x080136e4
 800fd88:	ffff0001 	.word	0xffff0001

0800fd8c <_fwalk_reent>:
 800fd8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd90:	4606      	mov	r6, r0
 800fd92:	4688      	mov	r8, r1
 800fd94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fd98:	2700      	movs	r7, #0
 800fd9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fd9e:	f1b9 0901 	subs.w	r9, r9, #1
 800fda2:	d505      	bpl.n	800fdb0 <_fwalk_reent+0x24>
 800fda4:	6824      	ldr	r4, [r4, #0]
 800fda6:	2c00      	cmp	r4, #0
 800fda8:	d1f7      	bne.n	800fd9a <_fwalk_reent+0xe>
 800fdaa:	4638      	mov	r0, r7
 800fdac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fdb0:	89ab      	ldrh	r3, [r5, #12]
 800fdb2:	2b01      	cmp	r3, #1
 800fdb4:	d907      	bls.n	800fdc6 <_fwalk_reent+0x3a>
 800fdb6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fdba:	3301      	adds	r3, #1
 800fdbc:	d003      	beq.n	800fdc6 <_fwalk_reent+0x3a>
 800fdbe:	4629      	mov	r1, r5
 800fdc0:	4630      	mov	r0, r6
 800fdc2:	47c0      	blx	r8
 800fdc4:	4307      	orrs	r7, r0
 800fdc6:	3568      	adds	r5, #104	; 0x68
 800fdc8:	e7e9      	b.n	800fd9e <_fwalk_reent+0x12>

0800fdca <rshift>:
 800fdca:	6903      	ldr	r3, [r0, #16]
 800fdcc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fdd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fdd4:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fdd8:	f100 0414 	add.w	r4, r0, #20
 800fddc:	dd45      	ble.n	800fe6a <rshift+0xa0>
 800fdde:	f011 011f 	ands.w	r1, r1, #31
 800fde2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fde6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fdea:	d10c      	bne.n	800fe06 <rshift+0x3c>
 800fdec:	f100 0710 	add.w	r7, r0, #16
 800fdf0:	4629      	mov	r1, r5
 800fdf2:	42b1      	cmp	r1, r6
 800fdf4:	d334      	bcc.n	800fe60 <rshift+0x96>
 800fdf6:	1a9b      	subs	r3, r3, r2
 800fdf8:	009b      	lsls	r3, r3, #2
 800fdfa:	1eea      	subs	r2, r5, #3
 800fdfc:	4296      	cmp	r6, r2
 800fdfe:	bf38      	it	cc
 800fe00:	2300      	movcc	r3, #0
 800fe02:	4423      	add	r3, r4
 800fe04:	e015      	b.n	800fe32 <rshift+0x68>
 800fe06:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fe0a:	f1c1 0820 	rsb	r8, r1, #32
 800fe0e:	40cf      	lsrs	r7, r1
 800fe10:	f105 0e04 	add.w	lr, r5, #4
 800fe14:	46a1      	mov	r9, r4
 800fe16:	4576      	cmp	r6, lr
 800fe18:	46f4      	mov	ip, lr
 800fe1a:	d815      	bhi.n	800fe48 <rshift+0x7e>
 800fe1c:	1a9a      	subs	r2, r3, r2
 800fe1e:	0092      	lsls	r2, r2, #2
 800fe20:	3a04      	subs	r2, #4
 800fe22:	3501      	adds	r5, #1
 800fe24:	42ae      	cmp	r6, r5
 800fe26:	bf38      	it	cc
 800fe28:	2200      	movcc	r2, #0
 800fe2a:	18a3      	adds	r3, r4, r2
 800fe2c:	50a7      	str	r7, [r4, r2]
 800fe2e:	b107      	cbz	r7, 800fe32 <rshift+0x68>
 800fe30:	3304      	adds	r3, #4
 800fe32:	1b1a      	subs	r2, r3, r4
 800fe34:	42a3      	cmp	r3, r4
 800fe36:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fe3a:	bf08      	it	eq
 800fe3c:	2300      	moveq	r3, #0
 800fe3e:	6102      	str	r2, [r0, #16]
 800fe40:	bf08      	it	eq
 800fe42:	6143      	streq	r3, [r0, #20]
 800fe44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe48:	f8dc c000 	ldr.w	ip, [ip]
 800fe4c:	fa0c fc08 	lsl.w	ip, ip, r8
 800fe50:	ea4c 0707 	orr.w	r7, ip, r7
 800fe54:	f849 7b04 	str.w	r7, [r9], #4
 800fe58:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fe5c:	40cf      	lsrs	r7, r1
 800fe5e:	e7da      	b.n	800fe16 <rshift+0x4c>
 800fe60:	f851 cb04 	ldr.w	ip, [r1], #4
 800fe64:	f847 cf04 	str.w	ip, [r7, #4]!
 800fe68:	e7c3      	b.n	800fdf2 <rshift+0x28>
 800fe6a:	4623      	mov	r3, r4
 800fe6c:	e7e1      	b.n	800fe32 <rshift+0x68>

0800fe6e <__hexdig_fun>:
 800fe6e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fe72:	2b09      	cmp	r3, #9
 800fe74:	d802      	bhi.n	800fe7c <__hexdig_fun+0xe>
 800fe76:	3820      	subs	r0, #32
 800fe78:	b2c0      	uxtb	r0, r0
 800fe7a:	4770      	bx	lr
 800fe7c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800fe80:	2b05      	cmp	r3, #5
 800fe82:	d801      	bhi.n	800fe88 <__hexdig_fun+0x1a>
 800fe84:	3847      	subs	r0, #71	; 0x47
 800fe86:	e7f7      	b.n	800fe78 <__hexdig_fun+0xa>
 800fe88:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800fe8c:	2b05      	cmp	r3, #5
 800fe8e:	d801      	bhi.n	800fe94 <__hexdig_fun+0x26>
 800fe90:	3827      	subs	r0, #39	; 0x27
 800fe92:	e7f1      	b.n	800fe78 <__hexdig_fun+0xa>
 800fe94:	2000      	movs	r0, #0
 800fe96:	4770      	bx	lr

0800fe98 <__gethex>:
 800fe98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe9c:	ed2d 8b02 	vpush	{d8}
 800fea0:	b089      	sub	sp, #36	; 0x24
 800fea2:	ee08 0a10 	vmov	s16, r0
 800fea6:	9304      	str	r3, [sp, #16]
 800fea8:	4bb4      	ldr	r3, [pc, #720]	; (801017c <__gethex+0x2e4>)
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	9301      	str	r3, [sp, #4]
 800feae:	4618      	mov	r0, r3
 800feb0:	468b      	mov	fp, r1
 800feb2:	4690      	mov	r8, r2
 800feb4:	f7f0 f99c 	bl	80001f0 <strlen>
 800feb8:	9b01      	ldr	r3, [sp, #4]
 800feba:	f8db 2000 	ldr.w	r2, [fp]
 800febe:	4403      	add	r3, r0
 800fec0:	4682      	mov	sl, r0
 800fec2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800fec6:	9305      	str	r3, [sp, #20]
 800fec8:	1c93      	adds	r3, r2, #2
 800feca:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800fece:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800fed2:	32fe      	adds	r2, #254	; 0xfe
 800fed4:	18d1      	adds	r1, r2, r3
 800fed6:	461f      	mov	r7, r3
 800fed8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fedc:	9100      	str	r1, [sp, #0]
 800fede:	2830      	cmp	r0, #48	; 0x30
 800fee0:	d0f8      	beq.n	800fed4 <__gethex+0x3c>
 800fee2:	f7ff ffc4 	bl	800fe6e <__hexdig_fun>
 800fee6:	4604      	mov	r4, r0
 800fee8:	2800      	cmp	r0, #0
 800feea:	d13a      	bne.n	800ff62 <__gethex+0xca>
 800feec:	9901      	ldr	r1, [sp, #4]
 800feee:	4652      	mov	r2, sl
 800fef0:	4638      	mov	r0, r7
 800fef2:	f7fd ff3d 	bl	800dd70 <strncmp>
 800fef6:	4605      	mov	r5, r0
 800fef8:	2800      	cmp	r0, #0
 800fefa:	d168      	bne.n	800ffce <__gethex+0x136>
 800fefc:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ff00:	eb07 060a 	add.w	r6, r7, sl
 800ff04:	f7ff ffb3 	bl	800fe6e <__hexdig_fun>
 800ff08:	2800      	cmp	r0, #0
 800ff0a:	d062      	beq.n	800ffd2 <__gethex+0x13a>
 800ff0c:	4633      	mov	r3, r6
 800ff0e:	7818      	ldrb	r0, [r3, #0]
 800ff10:	2830      	cmp	r0, #48	; 0x30
 800ff12:	461f      	mov	r7, r3
 800ff14:	f103 0301 	add.w	r3, r3, #1
 800ff18:	d0f9      	beq.n	800ff0e <__gethex+0x76>
 800ff1a:	f7ff ffa8 	bl	800fe6e <__hexdig_fun>
 800ff1e:	2301      	movs	r3, #1
 800ff20:	fab0 f480 	clz	r4, r0
 800ff24:	0964      	lsrs	r4, r4, #5
 800ff26:	4635      	mov	r5, r6
 800ff28:	9300      	str	r3, [sp, #0]
 800ff2a:	463a      	mov	r2, r7
 800ff2c:	4616      	mov	r6, r2
 800ff2e:	3201      	adds	r2, #1
 800ff30:	7830      	ldrb	r0, [r6, #0]
 800ff32:	f7ff ff9c 	bl	800fe6e <__hexdig_fun>
 800ff36:	2800      	cmp	r0, #0
 800ff38:	d1f8      	bne.n	800ff2c <__gethex+0x94>
 800ff3a:	9901      	ldr	r1, [sp, #4]
 800ff3c:	4652      	mov	r2, sl
 800ff3e:	4630      	mov	r0, r6
 800ff40:	f7fd ff16 	bl	800dd70 <strncmp>
 800ff44:	b980      	cbnz	r0, 800ff68 <__gethex+0xd0>
 800ff46:	b94d      	cbnz	r5, 800ff5c <__gethex+0xc4>
 800ff48:	eb06 050a 	add.w	r5, r6, sl
 800ff4c:	462a      	mov	r2, r5
 800ff4e:	4616      	mov	r6, r2
 800ff50:	3201      	adds	r2, #1
 800ff52:	7830      	ldrb	r0, [r6, #0]
 800ff54:	f7ff ff8b 	bl	800fe6e <__hexdig_fun>
 800ff58:	2800      	cmp	r0, #0
 800ff5a:	d1f8      	bne.n	800ff4e <__gethex+0xb6>
 800ff5c:	1bad      	subs	r5, r5, r6
 800ff5e:	00ad      	lsls	r5, r5, #2
 800ff60:	e004      	b.n	800ff6c <__gethex+0xd4>
 800ff62:	2400      	movs	r4, #0
 800ff64:	4625      	mov	r5, r4
 800ff66:	e7e0      	b.n	800ff2a <__gethex+0x92>
 800ff68:	2d00      	cmp	r5, #0
 800ff6a:	d1f7      	bne.n	800ff5c <__gethex+0xc4>
 800ff6c:	7833      	ldrb	r3, [r6, #0]
 800ff6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ff72:	2b50      	cmp	r3, #80	; 0x50
 800ff74:	d13b      	bne.n	800ffee <__gethex+0x156>
 800ff76:	7873      	ldrb	r3, [r6, #1]
 800ff78:	2b2b      	cmp	r3, #43	; 0x2b
 800ff7a:	d02c      	beq.n	800ffd6 <__gethex+0x13e>
 800ff7c:	2b2d      	cmp	r3, #45	; 0x2d
 800ff7e:	d02e      	beq.n	800ffde <__gethex+0x146>
 800ff80:	1c71      	adds	r1, r6, #1
 800ff82:	f04f 0900 	mov.w	r9, #0
 800ff86:	7808      	ldrb	r0, [r1, #0]
 800ff88:	f7ff ff71 	bl	800fe6e <__hexdig_fun>
 800ff8c:	1e43      	subs	r3, r0, #1
 800ff8e:	b2db      	uxtb	r3, r3
 800ff90:	2b18      	cmp	r3, #24
 800ff92:	d82c      	bhi.n	800ffee <__gethex+0x156>
 800ff94:	f1a0 0210 	sub.w	r2, r0, #16
 800ff98:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ff9c:	f7ff ff67 	bl	800fe6e <__hexdig_fun>
 800ffa0:	1e43      	subs	r3, r0, #1
 800ffa2:	b2db      	uxtb	r3, r3
 800ffa4:	2b18      	cmp	r3, #24
 800ffa6:	d91d      	bls.n	800ffe4 <__gethex+0x14c>
 800ffa8:	f1b9 0f00 	cmp.w	r9, #0
 800ffac:	d000      	beq.n	800ffb0 <__gethex+0x118>
 800ffae:	4252      	negs	r2, r2
 800ffb0:	4415      	add	r5, r2
 800ffb2:	f8cb 1000 	str.w	r1, [fp]
 800ffb6:	b1e4      	cbz	r4, 800fff2 <__gethex+0x15a>
 800ffb8:	9b00      	ldr	r3, [sp, #0]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	bf14      	ite	ne
 800ffbe:	2700      	movne	r7, #0
 800ffc0:	2706      	moveq	r7, #6
 800ffc2:	4638      	mov	r0, r7
 800ffc4:	b009      	add	sp, #36	; 0x24
 800ffc6:	ecbd 8b02 	vpop	{d8}
 800ffca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffce:	463e      	mov	r6, r7
 800ffd0:	4625      	mov	r5, r4
 800ffd2:	2401      	movs	r4, #1
 800ffd4:	e7ca      	b.n	800ff6c <__gethex+0xd4>
 800ffd6:	f04f 0900 	mov.w	r9, #0
 800ffda:	1cb1      	adds	r1, r6, #2
 800ffdc:	e7d3      	b.n	800ff86 <__gethex+0xee>
 800ffde:	f04f 0901 	mov.w	r9, #1
 800ffe2:	e7fa      	b.n	800ffda <__gethex+0x142>
 800ffe4:	230a      	movs	r3, #10
 800ffe6:	fb03 0202 	mla	r2, r3, r2, r0
 800ffea:	3a10      	subs	r2, #16
 800ffec:	e7d4      	b.n	800ff98 <__gethex+0x100>
 800ffee:	4631      	mov	r1, r6
 800fff0:	e7df      	b.n	800ffb2 <__gethex+0x11a>
 800fff2:	1bf3      	subs	r3, r6, r7
 800fff4:	3b01      	subs	r3, #1
 800fff6:	4621      	mov	r1, r4
 800fff8:	2b07      	cmp	r3, #7
 800fffa:	dc0b      	bgt.n	8010014 <__gethex+0x17c>
 800fffc:	ee18 0a10 	vmov	r0, s16
 8010000:	f000 faf0 	bl	80105e4 <_Balloc>
 8010004:	4604      	mov	r4, r0
 8010006:	b940      	cbnz	r0, 801001a <__gethex+0x182>
 8010008:	4b5d      	ldr	r3, [pc, #372]	; (8010180 <__gethex+0x2e8>)
 801000a:	4602      	mov	r2, r0
 801000c:	21de      	movs	r1, #222	; 0xde
 801000e:	485d      	ldr	r0, [pc, #372]	; (8010184 <__gethex+0x2ec>)
 8010010:	f001 f944 	bl	801129c <__assert_func>
 8010014:	3101      	adds	r1, #1
 8010016:	105b      	asrs	r3, r3, #1
 8010018:	e7ee      	b.n	800fff8 <__gethex+0x160>
 801001a:	f100 0914 	add.w	r9, r0, #20
 801001e:	f04f 0b00 	mov.w	fp, #0
 8010022:	f1ca 0301 	rsb	r3, sl, #1
 8010026:	f8cd 9008 	str.w	r9, [sp, #8]
 801002a:	f8cd b000 	str.w	fp, [sp]
 801002e:	9306      	str	r3, [sp, #24]
 8010030:	42b7      	cmp	r7, r6
 8010032:	d340      	bcc.n	80100b6 <__gethex+0x21e>
 8010034:	9802      	ldr	r0, [sp, #8]
 8010036:	9b00      	ldr	r3, [sp, #0]
 8010038:	f840 3b04 	str.w	r3, [r0], #4
 801003c:	eba0 0009 	sub.w	r0, r0, r9
 8010040:	1080      	asrs	r0, r0, #2
 8010042:	0146      	lsls	r6, r0, #5
 8010044:	6120      	str	r0, [r4, #16]
 8010046:	4618      	mov	r0, r3
 8010048:	f000 fbbe 	bl	80107c8 <__hi0bits>
 801004c:	1a30      	subs	r0, r6, r0
 801004e:	f8d8 6000 	ldr.w	r6, [r8]
 8010052:	42b0      	cmp	r0, r6
 8010054:	dd63      	ble.n	801011e <__gethex+0x286>
 8010056:	1b87      	subs	r7, r0, r6
 8010058:	4639      	mov	r1, r7
 801005a:	4620      	mov	r0, r4
 801005c:	f000 ff62 	bl	8010f24 <__any_on>
 8010060:	4682      	mov	sl, r0
 8010062:	b1a8      	cbz	r0, 8010090 <__gethex+0x1f8>
 8010064:	1e7b      	subs	r3, r7, #1
 8010066:	1159      	asrs	r1, r3, #5
 8010068:	f003 021f 	and.w	r2, r3, #31
 801006c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010070:	f04f 0a01 	mov.w	sl, #1
 8010074:	fa0a f202 	lsl.w	r2, sl, r2
 8010078:	420a      	tst	r2, r1
 801007a:	d009      	beq.n	8010090 <__gethex+0x1f8>
 801007c:	4553      	cmp	r3, sl
 801007e:	dd05      	ble.n	801008c <__gethex+0x1f4>
 8010080:	1eb9      	subs	r1, r7, #2
 8010082:	4620      	mov	r0, r4
 8010084:	f000 ff4e 	bl	8010f24 <__any_on>
 8010088:	2800      	cmp	r0, #0
 801008a:	d145      	bne.n	8010118 <__gethex+0x280>
 801008c:	f04f 0a02 	mov.w	sl, #2
 8010090:	4639      	mov	r1, r7
 8010092:	4620      	mov	r0, r4
 8010094:	f7ff fe99 	bl	800fdca <rshift>
 8010098:	443d      	add	r5, r7
 801009a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801009e:	42ab      	cmp	r3, r5
 80100a0:	da4c      	bge.n	801013c <__gethex+0x2a4>
 80100a2:	ee18 0a10 	vmov	r0, s16
 80100a6:	4621      	mov	r1, r4
 80100a8:	f000 fadc 	bl	8010664 <_Bfree>
 80100ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80100ae:	2300      	movs	r3, #0
 80100b0:	6013      	str	r3, [r2, #0]
 80100b2:	27a3      	movs	r7, #163	; 0xa3
 80100b4:	e785      	b.n	800ffc2 <__gethex+0x12a>
 80100b6:	1e73      	subs	r3, r6, #1
 80100b8:	9a05      	ldr	r2, [sp, #20]
 80100ba:	9303      	str	r3, [sp, #12]
 80100bc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80100c0:	4293      	cmp	r3, r2
 80100c2:	d019      	beq.n	80100f8 <__gethex+0x260>
 80100c4:	f1bb 0f20 	cmp.w	fp, #32
 80100c8:	d107      	bne.n	80100da <__gethex+0x242>
 80100ca:	9b02      	ldr	r3, [sp, #8]
 80100cc:	9a00      	ldr	r2, [sp, #0]
 80100ce:	f843 2b04 	str.w	r2, [r3], #4
 80100d2:	9302      	str	r3, [sp, #8]
 80100d4:	2300      	movs	r3, #0
 80100d6:	9300      	str	r3, [sp, #0]
 80100d8:	469b      	mov	fp, r3
 80100da:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80100de:	f7ff fec6 	bl	800fe6e <__hexdig_fun>
 80100e2:	9b00      	ldr	r3, [sp, #0]
 80100e4:	f000 000f 	and.w	r0, r0, #15
 80100e8:	fa00 f00b 	lsl.w	r0, r0, fp
 80100ec:	4303      	orrs	r3, r0
 80100ee:	9300      	str	r3, [sp, #0]
 80100f0:	f10b 0b04 	add.w	fp, fp, #4
 80100f4:	9b03      	ldr	r3, [sp, #12]
 80100f6:	e00d      	b.n	8010114 <__gethex+0x27c>
 80100f8:	9b03      	ldr	r3, [sp, #12]
 80100fa:	9a06      	ldr	r2, [sp, #24]
 80100fc:	4413      	add	r3, r2
 80100fe:	42bb      	cmp	r3, r7
 8010100:	d3e0      	bcc.n	80100c4 <__gethex+0x22c>
 8010102:	4618      	mov	r0, r3
 8010104:	9901      	ldr	r1, [sp, #4]
 8010106:	9307      	str	r3, [sp, #28]
 8010108:	4652      	mov	r2, sl
 801010a:	f7fd fe31 	bl	800dd70 <strncmp>
 801010e:	9b07      	ldr	r3, [sp, #28]
 8010110:	2800      	cmp	r0, #0
 8010112:	d1d7      	bne.n	80100c4 <__gethex+0x22c>
 8010114:	461e      	mov	r6, r3
 8010116:	e78b      	b.n	8010030 <__gethex+0x198>
 8010118:	f04f 0a03 	mov.w	sl, #3
 801011c:	e7b8      	b.n	8010090 <__gethex+0x1f8>
 801011e:	da0a      	bge.n	8010136 <__gethex+0x29e>
 8010120:	1a37      	subs	r7, r6, r0
 8010122:	4621      	mov	r1, r4
 8010124:	ee18 0a10 	vmov	r0, s16
 8010128:	463a      	mov	r2, r7
 801012a:	f000 fcb7 	bl	8010a9c <__lshift>
 801012e:	1bed      	subs	r5, r5, r7
 8010130:	4604      	mov	r4, r0
 8010132:	f100 0914 	add.w	r9, r0, #20
 8010136:	f04f 0a00 	mov.w	sl, #0
 801013a:	e7ae      	b.n	801009a <__gethex+0x202>
 801013c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010140:	42a8      	cmp	r0, r5
 8010142:	dd72      	ble.n	801022a <__gethex+0x392>
 8010144:	1b45      	subs	r5, r0, r5
 8010146:	42ae      	cmp	r6, r5
 8010148:	dc36      	bgt.n	80101b8 <__gethex+0x320>
 801014a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801014e:	2b02      	cmp	r3, #2
 8010150:	d02a      	beq.n	80101a8 <__gethex+0x310>
 8010152:	2b03      	cmp	r3, #3
 8010154:	d02c      	beq.n	80101b0 <__gethex+0x318>
 8010156:	2b01      	cmp	r3, #1
 8010158:	d11c      	bne.n	8010194 <__gethex+0x2fc>
 801015a:	42ae      	cmp	r6, r5
 801015c:	d11a      	bne.n	8010194 <__gethex+0x2fc>
 801015e:	2e01      	cmp	r6, #1
 8010160:	d112      	bne.n	8010188 <__gethex+0x2f0>
 8010162:	9a04      	ldr	r2, [sp, #16]
 8010164:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010168:	6013      	str	r3, [r2, #0]
 801016a:	2301      	movs	r3, #1
 801016c:	6123      	str	r3, [r4, #16]
 801016e:	f8c9 3000 	str.w	r3, [r9]
 8010172:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010174:	2762      	movs	r7, #98	; 0x62
 8010176:	601c      	str	r4, [r3, #0]
 8010178:	e723      	b.n	800ffc2 <__gethex+0x12a>
 801017a:	bf00      	nop
 801017c:	080138d0 	.word	0x080138d0
 8010180:	080137f7 	.word	0x080137f7
 8010184:	08013868 	.word	0x08013868
 8010188:	1e71      	subs	r1, r6, #1
 801018a:	4620      	mov	r0, r4
 801018c:	f000 feca 	bl	8010f24 <__any_on>
 8010190:	2800      	cmp	r0, #0
 8010192:	d1e6      	bne.n	8010162 <__gethex+0x2ca>
 8010194:	ee18 0a10 	vmov	r0, s16
 8010198:	4621      	mov	r1, r4
 801019a:	f000 fa63 	bl	8010664 <_Bfree>
 801019e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80101a0:	2300      	movs	r3, #0
 80101a2:	6013      	str	r3, [r2, #0]
 80101a4:	2750      	movs	r7, #80	; 0x50
 80101a6:	e70c      	b.n	800ffc2 <__gethex+0x12a>
 80101a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d1f2      	bne.n	8010194 <__gethex+0x2fc>
 80101ae:	e7d8      	b.n	8010162 <__gethex+0x2ca>
 80101b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d1d5      	bne.n	8010162 <__gethex+0x2ca>
 80101b6:	e7ed      	b.n	8010194 <__gethex+0x2fc>
 80101b8:	1e6f      	subs	r7, r5, #1
 80101ba:	f1ba 0f00 	cmp.w	sl, #0
 80101be:	d131      	bne.n	8010224 <__gethex+0x38c>
 80101c0:	b127      	cbz	r7, 80101cc <__gethex+0x334>
 80101c2:	4639      	mov	r1, r7
 80101c4:	4620      	mov	r0, r4
 80101c6:	f000 fead 	bl	8010f24 <__any_on>
 80101ca:	4682      	mov	sl, r0
 80101cc:	117b      	asrs	r3, r7, #5
 80101ce:	2101      	movs	r1, #1
 80101d0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80101d4:	f007 071f 	and.w	r7, r7, #31
 80101d8:	fa01 f707 	lsl.w	r7, r1, r7
 80101dc:	421f      	tst	r7, r3
 80101de:	4629      	mov	r1, r5
 80101e0:	4620      	mov	r0, r4
 80101e2:	bf18      	it	ne
 80101e4:	f04a 0a02 	orrne.w	sl, sl, #2
 80101e8:	1b76      	subs	r6, r6, r5
 80101ea:	f7ff fdee 	bl	800fdca <rshift>
 80101ee:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80101f2:	2702      	movs	r7, #2
 80101f4:	f1ba 0f00 	cmp.w	sl, #0
 80101f8:	d048      	beq.n	801028c <__gethex+0x3f4>
 80101fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80101fe:	2b02      	cmp	r3, #2
 8010200:	d015      	beq.n	801022e <__gethex+0x396>
 8010202:	2b03      	cmp	r3, #3
 8010204:	d017      	beq.n	8010236 <__gethex+0x39e>
 8010206:	2b01      	cmp	r3, #1
 8010208:	d109      	bne.n	801021e <__gethex+0x386>
 801020a:	f01a 0f02 	tst.w	sl, #2
 801020e:	d006      	beq.n	801021e <__gethex+0x386>
 8010210:	f8d9 0000 	ldr.w	r0, [r9]
 8010214:	ea4a 0a00 	orr.w	sl, sl, r0
 8010218:	f01a 0f01 	tst.w	sl, #1
 801021c:	d10e      	bne.n	801023c <__gethex+0x3a4>
 801021e:	f047 0710 	orr.w	r7, r7, #16
 8010222:	e033      	b.n	801028c <__gethex+0x3f4>
 8010224:	f04f 0a01 	mov.w	sl, #1
 8010228:	e7d0      	b.n	80101cc <__gethex+0x334>
 801022a:	2701      	movs	r7, #1
 801022c:	e7e2      	b.n	80101f4 <__gethex+0x35c>
 801022e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010230:	f1c3 0301 	rsb	r3, r3, #1
 8010234:	9315      	str	r3, [sp, #84]	; 0x54
 8010236:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010238:	2b00      	cmp	r3, #0
 801023a:	d0f0      	beq.n	801021e <__gethex+0x386>
 801023c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010240:	f104 0314 	add.w	r3, r4, #20
 8010244:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010248:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801024c:	f04f 0c00 	mov.w	ip, #0
 8010250:	4618      	mov	r0, r3
 8010252:	f853 2b04 	ldr.w	r2, [r3], #4
 8010256:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801025a:	d01c      	beq.n	8010296 <__gethex+0x3fe>
 801025c:	3201      	adds	r2, #1
 801025e:	6002      	str	r2, [r0, #0]
 8010260:	2f02      	cmp	r7, #2
 8010262:	f104 0314 	add.w	r3, r4, #20
 8010266:	d13f      	bne.n	80102e8 <__gethex+0x450>
 8010268:	f8d8 2000 	ldr.w	r2, [r8]
 801026c:	3a01      	subs	r2, #1
 801026e:	42b2      	cmp	r2, r6
 8010270:	d10a      	bne.n	8010288 <__gethex+0x3f0>
 8010272:	1171      	asrs	r1, r6, #5
 8010274:	2201      	movs	r2, #1
 8010276:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801027a:	f006 061f 	and.w	r6, r6, #31
 801027e:	fa02 f606 	lsl.w	r6, r2, r6
 8010282:	421e      	tst	r6, r3
 8010284:	bf18      	it	ne
 8010286:	4617      	movne	r7, r2
 8010288:	f047 0720 	orr.w	r7, r7, #32
 801028c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801028e:	601c      	str	r4, [r3, #0]
 8010290:	9b04      	ldr	r3, [sp, #16]
 8010292:	601d      	str	r5, [r3, #0]
 8010294:	e695      	b.n	800ffc2 <__gethex+0x12a>
 8010296:	4299      	cmp	r1, r3
 8010298:	f843 cc04 	str.w	ip, [r3, #-4]
 801029c:	d8d8      	bhi.n	8010250 <__gethex+0x3b8>
 801029e:	68a3      	ldr	r3, [r4, #8]
 80102a0:	459b      	cmp	fp, r3
 80102a2:	db19      	blt.n	80102d8 <__gethex+0x440>
 80102a4:	6861      	ldr	r1, [r4, #4]
 80102a6:	ee18 0a10 	vmov	r0, s16
 80102aa:	3101      	adds	r1, #1
 80102ac:	f000 f99a 	bl	80105e4 <_Balloc>
 80102b0:	4681      	mov	r9, r0
 80102b2:	b918      	cbnz	r0, 80102bc <__gethex+0x424>
 80102b4:	4b1a      	ldr	r3, [pc, #104]	; (8010320 <__gethex+0x488>)
 80102b6:	4602      	mov	r2, r0
 80102b8:	2184      	movs	r1, #132	; 0x84
 80102ba:	e6a8      	b.n	801000e <__gethex+0x176>
 80102bc:	6922      	ldr	r2, [r4, #16]
 80102be:	3202      	adds	r2, #2
 80102c0:	f104 010c 	add.w	r1, r4, #12
 80102c4:	0092      	lsls	r2, r2, #2
 80102c6:	300c      	adds	r0, #12
 80102c8:	f7fc fcae 	bl	800cc28 <memcpy>
 80102cc:	4621      	mov	r1, r4
 80102ce:	ee18 0a10 	vmov	r0, s16
 80102d2:	f000 f9c7 	bl	8010664 <_Bfree>
 80102d6:	464c      	mov	r4, r9
 80102d8:	6923      	ldr	r3, [r4, #16]
 80102da:	1c5a      	adds	r2, r3, #1
 80102dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80102e0:	6122      	str	r2, [r4, #16]
 80102e2:	2201      	movs	r2, #1
 80102e4:	615a      	str	r2, [r3, #20]
 80102e6:	e7bb      	b.n	8010260 <__gethex+0x3c8>
 80102e8:	6922      	ldr	r2, [r4, #16]
 80102ea:	455a      	cmp	r2, fp
 80102ec:	dd0b      	ble.n	8010306 <__gethex+0x46e>
 80102ee:	2101      	movs	r1, #1
 80102f0:	4620      	mov	r0, r4
 80102f2:	f7ff fd6a 	bl	800fdca <rshift>
 80102f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80102fa:	3501      	adds	r5, #1
 80102fc:	42ab      	cmp	r3, r5
 80102fe:	f6ff aed0 	blt.w	80100a2 <__gethex+0x20a>
 8010302:	2701      	movs	r7, #1
 8010304:	e7c0      	b.n	8010288 <__gethex+0x3f0>
 8010306:	f016 061f 	ands.w	r6, r6, #31
 801030a:	d0fa      	beq.n	8010302 <__gethex+0x46a>
 801030c:	4453      	add	r3, sl
 801030e:	f1c6 0620 	rsb	r6, r6, #32
 8010312:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010316:	f000 fa57 	bl	80107c8 <__hi0bits>
 801031a:	42b0      	cmp	r0, r6
 801031c:	dbe7      	blt.n	80102ee <__gethex+0x456>
 801031e:	e7f0      	b.n	8010302 <__gethex+0x46a>
 8010320:	080137f7 	.word	0x080137f7

08010324 <L_shift>:
 8010324:	f1c2 0208 	rsb	r2, r2, #8
 8010328:	0092      	lsls	r2, r2, #2
 801032a:	b570      	push	{r4, r5, r6, lr}
 801032c:	f1c2 0620 	rsb	r6, r2, #32
 8010330:	6843      	ldr	r3, [r0, #4]
 8010332:	6804      	ldr	r4, [r0, #0]
 8010334:	fa03 f506 	lsl.w	r5, r3, r6
 8010338:	432c      	orrs	r4, r5
 801033a:	40d3      	lsrs	r3, r2
 801033c:	6004      	str	r4, [r0, #0]
 801033e:	f840 3f04 	str.w	r3, [r0, #4]!
 8010342:	4288      	cmp	r0, r1
 8010344:	d3f4      	bcc.n	8010330 <L_shift+0xc>
 8010346:	bd70      	pop	{r4, r5, r6, pc}

08010348 <__match>:
 8010348:	b530      	push	{r4, r5, lr}
 801034a:	6803      	ldr	r3, [r0, #0]
 801034c:	3301      	adds	r3, #1
 801034e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010352:	b914      	cbnz	r4, 801035a <__match+0x12>
 8010354:	6003      	str	r3, [r0, #0]
 8010356:	2001      	movs	r0, #1
 8010358:	bd30      	pop	{r4, r5, pc}
 801035a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801035e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010362:	2d19      	cmp	r5, #25
 8010364:	bf98      	it	ls
 8010366:	3220      	addls	r2, #32
 8010368:	42a2      	cmp	r2, r4
 801036a:	d0f0      	beq.n	801034e <__match+0x6>
 801036c:	2000      	movs	r0, #0
 801036e:	e7f3      	b.n	8010358 <__match+0x10>

08010370 <__hexnan>:
 8010370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010374:	680b      	ldr	r3, [r1, #0]
 8010376:	115e      	asrs	r6, r3, #5
 8010378:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801037c:	f013 031f 	ands.w	r3, r3, #31
 8010380:	b087      	sub	sp, #28
 8010382:	bf18      	it	ne
 8010384:	3604      	addne	r6, #4
 8010386:	2500      	movs	r5, #0
 8010388:	1f37      	subs	r7, r6, #4
 801038a:	4690      	mov	r8, r2
 801038c:	6802      	ldr	r2, [r0, #0]
 801038e:	9301      	str	r3, [sp, #4]
 8010390:	4682      	mov	sl, r0
 8010392:	f846 5c04 	str.w	r5, [r6, #-4]
 8010396:	46b9      	mov	r9, r7
 8010398:	463c      	mov	r4, r7
 801039a:	9502      	str	r5, [sp, #8]
 801039c:	46ab      	mov	fp, r5
 801039e:	7851      	ldrb	r1, [r2, #1]
 80103a0:	1c53      	adds	r3, r2, #1
 80103a2:	9303      	str	r3, [sp, #12]
 80103a4:	b341      	cbz	r1, 80103f8 <__hexnan+0x88>
 80103a6:	4608      	mov	r0, r1
 80103a8:	9205      	str	r2, [sp, #20]
 80103aa:	9104      	str	r1, [sp, #16]
 80103ac:	f7ff fd5f 	bl	800fe6e <__hexdig_fun>
 80103b0:	2800      	cmp	r0, #0
 80103b2:	d14f      	bne.n	8010454 <__hexnan+0xe4>
 80103b4:	9904      	ldr	r1, [sp, #16]
 80103b6:	9a05      	ldr	r2, [sp, #20]
 80103b8:	2920      	cmp	r1, #32
 80103ba:	d818      	bhi.n	80103ee <__hexnan+0x7e>
 80103bc:	9b02      	ldr	r3, [sp, #8]
 80103be:	459b      	cmp	fp, r3
 80103c0:	dd13      	ble.n	80103ea <__hexnan+0x7a>
 80103c2:	454c      	cmp	r4, r9
 80103c4:	d206      	bcs.n	80103d4 <__hexnan+0x64>
 80103c6:	2d07      	cmp	r5, #7
 80103c8:	dc04      	bgt.n	80103d4 <__hexnan+0x64>
 80103ca:	462a      	mov	r2, r5
 80103cc:	4649      	mov	r1, r9
 80103ce:	4620      	mov	r0, r4
 80103d0:	f7ff ffa8 	bl	8010324 <L_shift>
 80103d4:	4544      	cmp	r4, r8
 80103d6:	d950      	bls.n	801047a <__hexnan+0x10a>
 80103d8:	2300      	movs	r3, #0
 80103da:	f1a4 0904 	sub.w	r9, r4, #4
 80103de:	f844 3c04 	str.w	r3, [r4, #-4]
 80103e2:	f8cd b008 	str.w	fp, [sp, #8]
 80103e6:	464c      	mov	r4, r9
 80103e8:	461d      	mov	r5, r3
 80103ea:	9a03      	ldr	r2, [sp, #12]
 80103ec:	e7d7      	b.n	801039e <__hexnan+0x2e>
 80103ee:	2929      	cmp	r1, #41	; 0x29
 80103f0:	d156      	bne.n	80104a0 <__hexnan+0x130>
 80103f2:	3202      	adds	r2, #2
 80103f4:	f8ca 2000 	str.w	r2, [sl]
 80103f8:	f1bb 0f00 	cmp.w	fp, #0
 80103fc:	d050      	beq.n	80104a0 <__hexnan+0x130>
 80103fe:	454c      	cmp	r4, r9
 8010400:	d206      	bcs.n	8010410 <__hexnan+0xa0>
 8010402:	2d07      	cmp	r5, #7
 8010404:	dc04      	bgt.n	8010410 <__hexnan+0xa0>
 8010406:	462a      	mov	r2, r5
 8010408:	4649      	mov	r1, r9
 801040a:	4620      	mov	r0, r4
 801040c:	f7ff ff8a 	bl	8010324 <L_shift>
 8010410:	4544      	cmp	r4, r8
 8010412:	d934      	bls.n	801047e <__hexnan+0x10e>
 8010414:	f1a8 0204 	sub.w	r2, r8, #4
 8010418:	4623      	mov	r3, r4
 801041a:	f853 1b04 	ldr.w	r1, [r3], #4
 801041e:	f842 1f04 	str.w	r1, [r2, #4]!
 8010422:	429f      	cmp	r7, r3
 8010424:	d2f9      	bcs.n	801041a <__hexnan+0xaa>
 8010426:	1b3b      	subs	r3, r7, r4
 8010428:	f023 0303 	bic.w	r3, r3, #3
 801042c:	3304      	adds	r3, #4
 801042e:	3401      	adds	r4, #1
 8010430:	3e03      	subs	r6, #3
 8010432:	42b4      	cmp	r4, r6
 8010434:	bf88      	it	hi
 8010436:	2304      	movhi	r3, #4
 8010438:	4443      	add	r3, r8
 801043a:	2200      	movs	r2, #0
 801043c:	f843 2b04 	str.w	r2, [r3], #4
 8010440:	429f      	cmp	r7, r3
 8010442:	d2fb      	bcs.n	801043c <__hexnan+0xcc>
 8010444:	683b      	ldr	r3, [r7, #0]
 8010446:	b91b      	cbnz	r3, 8010450 <__hexnan+0xe0>
 8010448:	4547      	cmp	r7, r8
 801044a:	d127      	bne.n	801049c <__hexnan+0x12c>
 801044c:	2301      	movs	r3, #1
 801044e:	603b      	str	r3, [r7, #0]
 8010450:	2005      	movs	r0, #5
 8010452:	e026      	b.n	80104a2 <__hexnan+0x132>
 8010454:	3501      	adds	r5, #1
 8010456:	2d08      	cmp	r5, #8
 8010458:	f10b 0b01 	add.w	fp, fp, #1
 801045c:	dd06      	ble.n	801046c <__hexnan+0xfc>
 801045e:	4544      	cmp	r4, r8
 8010460:	d9c3      	bls.n	80103ea <__hexnan+0x7a>
 8010462:	2300      	movs	r3, #0
 8010464:	f844 3c04 	str.w	r3, [r4, #-4]
 8010468:	2501      	movs	r5, #1
 801046a:	3c04      	subs	r4, #4
 801046c:	6822      	ldr	r2, [r4, #0]
 801046e:	f000 000f 	and.w	r0, r0, #15
 8010472:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010476:	6022      	str	r2, [r4, #0]
 8010478:	e7b7      	b.n	80103ea <__hexnan+0x7a>
 801047a:	2508      	movs	r5, #8
 801047c:	e7b5      	b.n	80103ea <__hexnan+0x7a>
 801047e:	9b01      	ldr	r3, [sp, #4]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d0df      	beq.n	8010444 <__hexnan+0xd4>
 8010484:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010488:	f1c3 0320 	rsb	r3, r3, #32
 801048c:	fa22 f303 	lsr.w	r3, r2, r3
 8010490:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010494:	401a      	ands	r2, r3
 8010496:	f846 2c04 	str.w	r2, [r6, #-4]
 801049a:	e7d3      	b.n	8010444 <__hexnan+0xd4>
 801049c:	3f04      	subs	r7, #4
 801049e:	e7d1      	b.n	8010444 <__hexnan+0xd4>
 80104a0:	2004      	movs	r0, #4
 80104a2:	b007      	add	sp, #28
 80104a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080104a8 <_localeconv_r>:
 80104a8:	4800      	ldr	r0, [pc, #0]	; (80104ac <_localeconv_r+0x4>)
 80104aa:	4770      	bx	lr
 80104ac:	200002d0 	.word	0x200002d0

080104b0 <__retarget_lock_init_recursive>:
 80104b0:	4770      	bx	lr

080104b2 <__retarget_lock_acquire_recursive>:
 80104b2:	4770      	bx	lr

080104b4 <__retarget_lock_release_recursive>:
 80104b4:	4770      	bx	lr
	...

080104b8 <_lseek_r>:
 80104b8:	b538      	push	{r3, r4, r5, lr}
 80104ba:	4d07      	ldr	r5, [pc, #28]	; (80104d8 <_lseek_r+0x20>)
 80104bc:	4604      	mov	r4, r0
 80104be:	4608      	mov	r0, r1
 80104c0:	4611      	mov	r1, r2
 80104c2:	2200      	movs	r2, #0
 80104c4:	602a      	str	r2, [r5, #0]
 80104c6:	461a      	mov	r2, r3
 80104c8:	f7f4 ff2e 	bl	8005328 <_lseek>
 80104cc:	1c43      	adds	r3, r0, #1
 80104ce:	d102      	bne.n	80104d6 <_lseek_r+0x1e>
 80104d0:	682b      	ldr	r3, [r5, #0]
 80104d2:	b103      	cbz	r3, 80104d6 <_lseek_r+0x1e>
 80104d4:	6023      	str	r3, [r4, #0]
 80104d6:	bd38      	pop	{r3, r4, r5, pc}
 80104d8:	200027e0 	.word	0x200027e0

080104dc <__swhatbuf_r>:
 80104dc:	b570      	push	{r4, r5, r6, lr}
 80104de:	460e      	mov	r6, r1
 80104e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104e4:	2900      	cmp	r1, #0
 80104e6:	b096      	sub	sp, #88	; 0x58
 80104e8:	4614      	mov	r4, r2
 80104ea:	461d      	mov	r5, r3
 80104ec:	da08      	bge.n	8010500 <__swhatbuf_r+0x24>
 80104ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80104f2:	2200      	movs	r2, #0
 80104f4:	602a      	str	r2, [r5, #0]
 80104f6:	061a      	lsls	r2, r3, #24
 80104f8:	d410      	bmi.n	801051c <__swhatbuf_r+0x40>
 80104fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80104fe:	e00e      	b.n	801051e <__swhatbuf_r+0x42>
 8010500:	466a      	mov	r2, sp
 8010502:	f000 fefb 	bl	80112fc <_fstat_r>
 8010506:	2800      	cmp	r0, #0
 8010508:	dbf1      	blt.n	80104ee <__swhatbuf_r+0x12>
 801050a:	9a01      	ldr	r2, [sp, #4]
 801050c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010510:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010514:	425a      	negs	r2, r3
 8010516:	415a      	adcs	r2, r3
 8010518:	602a      	str	r2, [r5, #0]
 801051a:	e7ee      	b.n	80104fa <__swhatbuf_r+0x1e>
 801051c:	2340      	movs	r3, #64	; 0x40
 801051e:	2000      	movs	r0, #0
 8010520:	6023      	str	r3, [r4, #0]
 8010522:	b016      	add	sp, #88	; 0x58
 8010524:	bd70      	pop	{r4, r5, r6, pc}
	...

08010528 <__smakebuf_r>:
 8010528:	898b      	ldrh	r3, [r1, #12]
 801052a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801052c:	079d      	lsls	r5, r3, #30
 801052e:	4606      	mov	r6, r0
 8010530:	460c      	mov	r4, r1
 8010532:	d507      	bpl.n	8010544 <__smakebuf_r+0x1c>
 8010534:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010538:	6023      	str	r3, [r4, #0]
 801053a:	6123      	str	r3, [r4, #16]
 801053c:	2301      	movs	r3, #1
 801053e:	6163      	str	r3, [r4, #20]
 8010540:	b002      	add	sp, #8
 8010542:	bd70      	pop	{r4, r5, r6, pc}
 8010544:	ab01      	add	r3, sp, #4
 8010546:	466a      	mov	r2, sp
 8010548:	f7ff ffc8 	bl	80104dc <__swhatbuf_r>
 801054c:	9900      	ldr	r1, [sp, #0]
 801054e:	4605      	mov	r5, r0
 8010550:	4630      	mov	r0, r6
 8010552:	f7fc fbeb 	bl	800cd2c <_malloc_r>
 8010556:	b948      	cbnz	r0, 801056c <__smakebuf_r+0x44>
 8010558:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801055c:	059a      	lsls	r2, r3, #22
 801055e:	d4ef      	bmi.n	8010540 <__smakebuf_r+0x18>
 8010560:	f023 0303 	bic.w	r3, r3, #3
 8010564:	f043 0302 	orr.w	r3, r3, #2
 8010568:	81a3      	strh	r3, [r4, #12]
 801056a:	e7e3      	b.n	8010534 <__smakebuf_r+0xc>
 801056c:	4b0d      	ldr	r3, [pc, #52]	; (80105a4 <__smakebuf_r+0x7c>)
 801056e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010570:	89a3      	ldrh	r3, [r4, #12]
 8010572:	6020      	str	r0, [r4, #0]
 8010574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010578:	81a3      	strh	r3, [r4, #12]
 801057a:	9b00      	ldr	r3, [sp, #0]
 801057c:	6163      	str	r3, [r4, #20]
 801057e:	9b01      	ldr	r3, [sp, #4]
 8010580:	6120      	str	r0, [r4, #16]
 8010582:	b15b      	cbz	r3, 801059c <__smakebuf_r+0x74>
 8010584:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010588:	4630      	mov	r0, r6
 801058a:	f000 fec9 	bl	8011320 <_isatty_r>
 801058e:	b128      	cbz	r0, 801059c <__smakebuf_r+0x74>
 8010590:	89a3      	ldrh	r3, [r4, #12]
 8010592:	f023 0303 	bic.w	r3, r3, #3
 8010596:	f043 0301 	orr.w	r3, r3, #1
 801059a:	81a3      	strh	r3, [r4, #12]
 801059c:	89a0      	ldrh	r0, [r4, #12]
 801059e:	4305      	orrs	r5, r0
 80105a0:	81a5      	strh	r5, [r4, #12]
 80105a2:	e7cd      	b.n	8010540 <__smakebuf_r+0x18>
 80105a4:	0800fc29 	.word	0x0800fc29

080105a8 <__ascii_mbtowc>:
 80105a8:	b082      	sub	sp, #8
 80105aa:	b901      	cbnz	r1, 80105ae <__ascii_mbtowc+0x6>
 80105ac:	a901      	add	r1, sp, #4
 80105ae:	b142      	cbz	r2, 80105c2 <__ascii_mbtowc+0x1a>
 80105b0:	b14b      	cbz	r3, 80105c6 <__ascii_mbtowc+0x1e>
 80105b2:	7813      	ldrb	r3, [r2, #0]
 80105b4:	600b      	str	r3, [r1, #0]
 80105b6:	7812      	ldrb	r2, [r2, #0]
 80105b8:	1e10      	subs	r0, r2, #0
 80105ba:	bf18      	it	ne
 80105bc:	2001      	movne	r0, #1
 80105be:	b002      	add	sp, #8
 80105c0:	4770      	bx	lr
 80105c2:	4610      	mov	r0, r2
 80105c4:	e7fb      	b.n	80105be <__ascii_mbtowc+0x16>
 80105c6:	f06f 0001 	mvn.w	r0, #1
 80105ca:	e7f8      	b.n	80105be <__ascii_mbtowc+0x16>

080105cc <__malloc_lock>:
 80105cc:	4801      	ldr	r0, [pc, #4]	; (80105d4 <__malloc_lock+0x8>)
 80105ce:	f7ff bf70 	b.w	80104b2 <__retarget_lock_acquire_recursive>
 80105d2:	bf00      	nop
 80105d4:	200027dc 	.word	0x200027dc

080105d8 <__malloc_unlock>:
 80105d8:	4801      	ldr	r0, [pc, #4]	; (80105e0 <__malloc_unlock+0x8>)
 80105da:	f7ff bf6b 	b.w	80104b4 <__retarget_lock_release_recursive>
 80105de:	bf00      	nop
 80105e0:	200027dc 	.word	0x200027dc

080105e4 <_Balloc>:
 80105e4:	b570      	push	{r4, r5, r6, lr}
 80105e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80105e8:	4604      	mov	r4, r0
 80105ea:	460d      	mov	r5, r1
 80105ec:	b976      	cbnz	r6, 801060c <_Balloc+0x28>
 80105ee:	2010      	movs	r0, #16
 80105f0:	f7fc fb0a 	bl	800cc08 <malloc>
 80105f4:	4602      	mov	r2, r0
 80105f6:	6260      	str	r0, [r4, #36]	; 0x24
 80105f8:	b920      	cbnz	r0, 8010604 <_Balloc+0x20>
 80105fa:	4b18      	ldr	r3, [pc, #96]	; (801065c <_Balloc+0x78>)
 80105fc:	4818      	ldr	r0, [pc, #96]	; (8010660 <_Balloc+0x7c>)
 80105fe:	2166      	movs	r1, #102	; 0x66
 8010600:	f000 fe4c 	bl	801129c <__assert_func>
 8010604:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010608:	6006      	str	r6, [r0, #0]
 801060a:	60c6      	str	r6, [r0, #12]
 801060c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801060e:	68f3      	ldr	r3, [r6, #12]
 8010610:	b183      	cbz	r3, 8010634 <_Balloc+0x50>
 8010612:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010614:	68db      	ldr	r3, [r3, #12]
 8010616:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801061a:	b9b8      	cbnz	r0, 801064c <_Balloc+0x68>
 801061c:	2101      	movs	r1, #1
 801061e:	fa01 f605 	lsl.w	r6, r1, r5
 8010622:	1d72      	adds	r2, r6, #5
 8010624:	0092      	lsls	r2, r2, #2
 8010626:	4620      	mov	r0, r4
 8010628:	f000 fc9d 	bl	8010f66 <_calloc_r>
 801062c:	b160      	cbz	r0, 8010648 <_Balloc+0x64>
 801062e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010632:	e00e      	b.n	8010652 <_Balloc+0x6e>
 8010634:	2221      	movs	r2, #33	; 0x21
 8010636:	2104      	movs	r1, #4
 8010638:	4620      	mov	r0, r4
 801063a:	f000 fc94 	bl	8010f66 <_calloc_r>
 801063e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010640:	60f0      	str	r0, [r6, #12]
 8010642:	68db      	ldr	r3, [r3, #12]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d1e4      	bne.n	8010612 <_Balloc+0x2e>
 8010648:	2000      	movs	r0, #0
 801064a:	bd70      	pop	{r4, r5, r6, pc}
 801064c:	6802      	ldr	r2, [r0, #0]
 801064e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010652:	2300      	movs	r3, #0
 8010654:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010658:	e7f7      	b.n	801064a <_Balloc+0x66>
 801065a:	bf00      	nop
 801065c:	08013785 	.word	0x08013785
 8010660:	080138e4 	.word	0x080138e4

08010664 <_Bfree>:
 8010664:	b570      	push	{r4, r5, r6, lr}
 8010666:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010668:	4605      	mov	r5, r0
 801066a:	460c      	mov	r4, r1
 801066c:	b976      	cbnz	r6, 801068c <_Bfree+0x28>
 801066e:	2010      	movs	r0, #16
 8010670:	f7fc faca 	bl	800cc08 <malloc>
 8010674:	4602      	mov	r2, r0
 8010676:	6268      	str	r0, [r5, #36]	; 0x24
 8010678:	b920      	cbnz	r0, 8010684 <_Bfree+0x20>
 801067a:	4b09      	ldr	r3, [pc, #36]	; (80106a0 <_Bfree+0x3c>)
 801067c:	4809      	ldr	r0, [pc, #36]	; (80106a4 <_Bfree+0x40>)
 801067e:	218a      	movs	r1, #138	; 0x8a
 8010680:	f000 fe0c 	bl	801129c <__assert_func>
 8010684:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010688:	6006      	str	r6, [r0, #0]
 801068a:	60c6      	str	r6, [r0, #12]
 801068c:	b13c      	cbz	r4, 801069e <_Bfree+0x3a>
 801068e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010690:	6862      	ldr	r2, [r4, #4]
 8010692:	68db      	ldr	r3, [r3, #12]
 8010694:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010698:	6021      	str	r1, [r4, #0]
 801069a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801069e:	bd70      	pop	{r4, r5, r6, pc}
 80106a0:	08013785 	.word	0x08013785
 80106a4:	080138e4 	.word	0x080138e4

080106a8 <__multadd>:
 80106a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106ac:	690d      	ldr	r5, [r1, #16]
 80106ae:	4607      	mov	r7, r0
 80106b0:	460c      	mov	r4, r1
 80106b2:	461e      	mov	r6, r3
 80106b4:	f101 0c14 	add.w	ip, r1, #20
 80106b8:	2000      	movs	r0, #0
 80106ba:	f8dc 3000 	ldr.w	r3, [ip]
 80106be:	b299      	uxth	r1, r3
 80106c0:	fb02 6101 	mla	r1, r2, r1, r6
 80106c4:	0c1e      	lsrs	r6, r3, #16
 80106c6:	0c0b      	lsrs	r3, r1, #16
 80106c8:	fb02 3306 	mla	r3, r2, r6, r3
 80106cc:	b289      	uxth	r1, r1
 80106ce:	3001      	adds	r0, #1
 80106d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80106d4:	4285      	cmp	r5, r0
 80106d6:	f84c 1b04 	str.w	r1, [ip], #4
 80106da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80106de:	dcec      	bgt.n	80106ba <__multadd+0x12>
 80106e0:	b30e      	cbz	r6, 8010726 <__multadd+0x7e>
 80106e2:	68a3      	ldr	r3, [r4, #8]
 80106e4:	42ab      	cmp	r3, r5
 80106e6:	dc19      	bgt.n	801071c <__multadd+0x74>
 80106e8:	6861      	ldr	r1, [r4, #4]
 80106ea:	4638      	mov	r0, r7
 80106ec:	3101      	adds	r1, #1
 80106ee:	f7ff ff79 	bl	80105e4 <_Balloc>
 80106f2:	4680      	mov	r8, r0
 80106f4:	b928      	cbnz	r0, 8010702 <__multadd+0x5a>
 80106f6:	4602      	mov	r2, r0
 80106f8:	4b0c      	ldr	r3, [pc, #48]	; (801072c <__multadd+0x84>)
 80106fa:	480d      	ldr	r0, [pc, #52]	; (8010730 <__multadd+0x88>)
 80106fc:	21b5      	movs	r1, #181	; 0xb5
 80106fe:	f000 fdcd 	bl	801129c <__assert_func>
 8010702:	6922      	ldr	r2, [r4, #16]
 8010704:	3202      	adds	r2, #2
 8010706:	f104 010c 	add.w	r1, r4, #12
 801070a:	0092      	lsls	r2, r2, #2
 801070c:	300c      	adds	r0, #12
 801070e:	f7fc fa8b 	bl	800cc28 <memcpy>
 8010712:	4621      	mov	r1, r4
 8010714:	4638      	mov	r0, r7
 8010716:	f7ff ffa5 	bl	8010664 <_Bfree>
 801071a:	4644      	mov	r4, r8
 801071c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010720:	3501      	adds	r5, #1
 8010722:	615e      	str	r6, [r3, #20]
 8010724:	6125      	str	r5, [r4, #16]
 8010726:	4620      	mov	r0, r4
 8010728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801072c:	080137f7 	.word	0x080137f7
 8010730:	080138e4 	.word	0x080138e4

08010734 <__s2b>:
 8010734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010738:	460c      	mov	r4, r1
 801073a:	4615      	mov	r5, r2
 801073c:	461f      	mov	r7, r3
 801073e:	2209      	movs	r2, #9
 8010740:	3308      	adds	r3, #8
 8010742:	4606      	mov	r6, r0
 8010744:	fb93 f3f2 	sdiv	r3, r3, r2
 8010748:	2100      	movs	r1, #0
 801074a:	2201      	movs	r2, #1
 801074c:	429a      	cmp	r2, r3
 801074e:	db09      	blt.n	8010764 <__s2b+0x30>
 8010750:	4630      	mov	r0, r6
 8010752:	f7ff ff47 	bl	80105e4 <_Balloc>
 8010756:	b940      	cbnz	r0, 801076a <__s2b+0x36>
 8010758:	4602      	mov	r2, r0
 801075a:	4b19      	ldr	r3, [pc, #100]	; (80107c0 <__s2b+0x8c>)
 801075c:	4819      	ldr	r0, [pc, #100]	; (80107c4 <__s2b+0x90>)
 801075e:	21ce      	movs	r1, #206	; 0xce
 8010760:	f000 fd9c 	bl	801129c <__assert_func>
 8010764:	0052      	lsls	r2, r2, #1
 8010766:	3101      	adds	r1, #1
 8010768:	e7f0      	b.n	801074c <__s2b+0x18>
 801076a:	9b08      	ldr	r3, [sp, #32]
 801076c:	6143      	str	r3, [r0, #20]
 801076e:	2d09      	cmp	r5, #9
 8010770:	f04f 0301 	mov.w	r3, #1
 8010774:	6103      	str	r3, [r0, #16]
 8010776:	dd16      	ble.n	80107a6 <__s2b+0x72>
 8010778:	f104 0909 	add.w	r9, r4, #9
 801077c:	46c8      	mov	r8, r9
 801077e:	442c      	add	r4, r5
 8010780:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010784:	4601      	mov	r1, r0
 8010786:	3b30      	subs	r3, #48	; 0x30
 8010788:	220a      	movs	r2, #10
 801078a:	4630      	mov	r0, r6
 801078c:	f7ff ff8c 	bl	80106a8 <__multadd>
 8010790:	45a0      	cmp	r8, r4
 8010792:	d1f5      	bne.n	8010780 <__s2b+0x4c>
 8010794:	f1a5 0408 	sub.w	r4, r5, #8
 8010798:	444c      	add	r4, r9
 801079a:	1b2d      	subs	r5, r5, r4
 801079c:	1963      	adds	r3, r4, r5
 801079e:	42bb      	cmp	r3, r7
 80107a0:	db04      	blt.n	80107ac <__s2b+0x78>
 80107a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107a6:	340a      	adds	r4, #10
 80107a8:	2509      	movs	r5, #9
 80107aa:	e7f6      	b.n	801079a <__s2b+0x66>
 80107ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80107b0:	4601      	mov	r1, r0
 80107b2:	3b30      	subs	r3, #48	; 0x30
 80107b4:	220a      	movs	r2, #10
 80107b6:	4630      	mov	r0, r6
 80107b8:	f7ff ff76 	bl	80106a8 <__multadd>
 80107bc:	e7ee      	b.n	801079c <__s2b+0x68>
 80107be:	bf00      	nop
 80107c0:	080137f7 	.word	0x080137f7
 80107c4:	080138e4 	.word	0x080138e4

080107c8 <__hi0bits>:
 80107c8:	0c03      	lsrs	r3, r0, #16
 80107ca:	041b      	lsls	r3, r3, #16
 80107cc:	b9d3      	cbnz	r3, 8010804 <__hi0bits+0x3c>
 80107ce:	0400      	lsls	r0, r0, #16
 80107d0:	2310      	movs	r3, #16
 80107d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80107d6:	bf04      	itt	eq
 80107d8:	0200      	lsleq	r0, r0, #8
 80107da:	3308      	addeq	r3, #8
 80107dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80107e0:	bf04      	itt	eq
 80107e2:	0100      	lsleq	r0, r0, #4
 80107e4:	3304      	addeq	r3, #4
 80107e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80107ea:	bf04      	itt	eq
 80107ec:	0080      	lsleq	r0, r0, #2
 80107ee:	3302      	addeq	r3, #2
 80107f0:	2800      	cmp	r0, #0
 80107f2:	db05      	blt.n	8010800 <__hi0bits+0x38>
 80107f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80107f8:	f103 0301 	add.w	r3, r3, #1
 80107fc:	bf08      	it	eq
 80107fe:	2320      	moveq	r3, #32
 8010800:	4618      	mov	r0, r3
 8010802:	4770      	bx	lr
 8010804:	2300      	movs	r3, #0
 8010806:	e7e4      	b.n	80107d2 <__hi0bits+0xa>

08010808 <__lo0bits>:
 8010808:	6803      	ldr	r3, [r0, #0]
 801080a:	f013 0207 	ands.w	r2, r3, #7
 801080e:	4601      	mov	r1, r0
 8010810:	d00b      	beq.n	801082a <__lo0bits+0x22>
 8010812:	07da      	lsls	r2, r3, #31
 8010814:	d423      	bmi.n	801085e <__lo0bits+0x56>
 8010816:	0798      	lsls	r0, r3, #30
 8010818:	bf49      	itett	mi
 801081a:	085b      	lsrmi	r3, r3, #1
 801081c:	089b      	lsrpl	r3, r3, #2
 801081e:	2001      	movmi	r0, #1
 8010820:	600b      	strmi	r3, [r1, #0]
 8010822:	bf5c      	itt	pl
 8010824:	600b      	strpl	r3, [r1, #0]
 8010826:	2002      	movpl	r0, #2
 8010828:	4770      	bx	lr
 801082a:	b298      	uxth	r0, r3
 801082c:	b9a8      	cbnz	r0, 801085a <__lo0bits+0x52>
 801082e:	0c1b      	lsrs	r3, r3, #16
 8010830:	2010      	movs	r0, #16
 8010832:	b2da      	uxtb	r2, r3
 8010834:	b90a      	cbnz	r2, 801083a <__lo0bits+0x32>
 8010836:	3008      	adds	r0, #8
 8010838:	0a1b      	lsrs	r3, r3, #8
 801083a:	071a      	lsls	r2, r3, #28
 801083c:	bf04      	itt	eq
 801083e:	091b      	lsreq	r3, r3, #4
 8010840:	3004      	addeq	r0, #4
 8010842:	079a      	lsls	r2, r3, #30
 8010844:	bf04      	itt	eq
 8010846:	089b      	lsreq	r3, r3, #2
 8010848:	3002      	addeq	r0, #2
 801084a:	07da      	lsls	r2, r3, #31
 801084c:	d403      	bmi.n	8010856 <__lo0bits+0x4e>
 801084e:	085b      	lsrs	r3, r3, #1
 8010850:	f100 0001 	add.w	r0, r0, #1
 8010854:	d005      	beq.n	8010862 <__lo0bits+0x5a>
 8010856:	600b      	str	r3, [r1, #0]
 8010858:	4770      	bx	lr
 801085a:	4610      	mov	r0, r2
 801085c:	e7e9      	b.n	8010832 <__lo0bits+0x2a>
 801085e:	2000      	movs	r0, #0
 8010860:	4770      	bx	lr
 8010862:	2020      	movs	r0, #32
 8010864:	4770      	bx	lr
	...

08010868 <__i2b>:
 8010868:	b510      	push	{r4, lr}
 801086a:	460c      	mov	r4, r1
 801086c:	2101      	movs	r1, #1
 801086e:	f7ff feb9 	bl	80105e4 <_Balloc>
 8010872:	4602      	mov	r2, r0
 8010874:	b928      	cbnz	r0, 8010882 <__i2b+0x1a>
 8010876:	4b05      	ldr	r3, [pc, #20]	; (801088c <__i2b+0x24>)
 8010878:	4805      	ldr	r0, [pc, #20]	; (8010890 <__i2b+0x28>)
 801087a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801087e:	f000 fd0d 	bl	801129c <__assert_func>
 8010882:	2301      	movs	r3, #1
 8010884:	6144      	str	r4, [r0, #20]
 8010886:	6103      	str	r3, [r0, #16]
 8010888:	bd10      	pop	{r4, pc}
 801088a:	bf00      	nop
 801088c:	080137f7 	.word	0x080137f7
 8010890:	080138e4 	.word	0x080138e4

08010894 <__multiply>:
 8010894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010898:	4691      	mov	r9, r2
 801089a:	690a      	ldr	r2, [r1, #16]
 801089c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80108a0:	429a      	cmp	r2, r3
 80108a2:	bfb8      	it	lt
 80108a4:	460b      	movlt	r3, r1
 80108a6:	460c      	mov	r4, r1
 80108a8:	bfbc      	itt	lt
 80108aa:	464c      	movlt	r4, r9
 80108ac:	4699      	movlt	r9, r3
 80108ae:	6927      	ldr	r7, [r4, #16]
 80108b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80108b4:	68a3      	ldr	r3, [r4, #8]
 80108b6:	6861      	ldr	r1, [r4, #4]
 80108b8:	eb07 060a 	add.w	r6, r7, sl
 80108bc:	42b3      	cmp	r3, r6
 80108be:	b085      	sub	sp, #20
 80108c0:	bfb8      	it	lt
 80108c2:	3101      	addlt	r1, #1
 80108c4:	f7ff fe8e 	bl	80105e4 <_Balloc>
 80108c8:	b930      	cbnz	r0, 80108d8 <__multiply+0x44>
 80108ca:	4602      	mov	r2, r0
 80108cc:	4b44      	ldr	r3, [pc, #272]	; (80109e0 <__multiply+0x14c>)
 80108ce:	4845      	ldr	r0, [pc, #276]	; (80109e4 <__multiply+0x150>)
 80108d0:	f240 115d 	movw	r1, #349	; 0x15d
 80108d4:	f000 fce2 	bl	801129c <__assert_func>
 80108d8:	f100 0514 	add.w	r5, r0, #20
 80108dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80108e0:	462b      	mov	r3, r5
 80108e2:	2200      	movs	r2, #0
 80108e4:	4543      	cmp	r3, r8
 80108e6:	d321      	bcc.n	801092c <__multiply+0x98>
 80108e8:	f104 0314 	add.w	r3, r4, #20
 80108ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80108f0:	f109 0314 	add.w	r3, r9, #20
 80108f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80108f8:	9202      	str	r2, [sp, #8]
 80108fa:	1b3a      	subs	r2, r7, r4
 80108fc:	3a15      	subs	r2, #21
 80108fe:	f022 0203 	bic.w	r2, r2, #3
 8010902:	3204      	adds	r2, #4
 8010904:	f104 0115 	add.w	r1, r4, #21
 8010908:	428f      	cmp	r7, r1
 801090a:	bf38      	it	cc
 801090c:	2204      	movcc	r2, #4
 801090e:	9201      	str	r2, [sp, #4]
 8010910:	9a02      	ldr	r2, [sp, #8]
 8010912:	9303      	str	r3, [sp, #12]
 8010914:	429a      	cmp	r2, r3
 8010916:	d80c      	bhi.n	8010932 <__multiply+0x9e>
 8010918:	2e00      	cmp	r6, #0
 801091a:	dd03      	ble.n	8010924 <__multiply+0x90>
 801091c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010920:	2b00      	cmp	r3, #0
 8010922:	d05a      	beq.n	80109da <__multiply+0x146>
 8010924:	6106      	str	r6, [r0, #16]
 8010926:	b005      	add	sp, #20
 8010928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801092c:	f843 2b04 	str.w	r2, [r3], #4
 8010930:	e7d8      	b.n	80108e4 <__multiply+0x50>
 8010932:	f8b3 a000 	ldrh.w	sl, [r3]
 8010936:	f1ba 0f00 	cmp.w	sl, #0
 801093a:	d024      	beq.n	8010986 <__multiply+0xf2>
 801093c:	f104 0e14 	add.w	lr, r4, #20
 8010940:	46a9      	mov	r9, r5
 8010942:	f04f 0c00 	mov.w	ip, #0
 8010946:	f85e 2b04 	ldr.w	r2, [lr], #4
 801094a:	f8d9 1000 	ldr.w	r1, [r9]
 801094e:	fa1f fb82 	uxth.w	fp, r2
 8010952:	b289      	uxth	r1, r1
 8010954:	fb0a 110b 	mla	r1, sl, fp, r1
 8010958:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801095c:	f8d9 2000 	ldr.w	r2, [r9]
 8010960:	4461      	add	r1, ip
 8010962:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010966:	fb0a c20b 	mla	r2, sl, fp, ip
 801096a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801096e:	b289      	uxth	r1, r1
 8010970:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010974:	4577      	cmp	r7, lr
 8010976:	f849 1b04 	str.w	r1, [r9], #4
 801097a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801097e:	d8e2      	bhi.n	8010946 <__multiply+0xb2>
 8010980:	9a01      	ldr	r2, [sp, #4]
 8010982:	f845 c002 	str.w	ip, [r5, r2]
 8010986:	9a03      	ldr	r2, [sp, #12]
 8010988:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801098c:	3304      	adds	r3, #4
 801098e:	f1b9 0f00 	cmp.w	r9, #0
 8010992:	d020      	beq.n	80109d6 <__multiply+0x142>
 8010994:	6829      	ldr	r1, [r5, #0]
 8010996:	f104 0c14 	add.w	ip, r4, #20
 801099a:	46ae      	mov	lr, r5
 801099c:	f04f 0a00 	mov.w	sl, #0
 80109a0:	f8bc b000 	ldrh.w	fp, [ip]
 80109a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80109a8:	fb09 220b 	mla	r2, r9, fp, r2
 80109ac:	4492      	add	sl, r2
 80109ae:	b289      	uxth	r1, r1
 80109b0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80109b4:	f84e 1b04 	str.w	r1, [lr], #4
 80109b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80109bc:	f8be 1000 	ldrh.w	r1, [lr]
 80109c0:	0c12      	lsrs	r2, r2, #16
 80109c2:	fb09 1102 	mla	r1, r9, r2, r1
 80109c6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80109ca:	4567      	cmp	r7, ip
 80109cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80109d0:	d8e6      	bhi.n	80109a0 <__multiply+0x10c>
 80109d2:	9a01      	ldr	r2, [sp, #4]
 80109d4:	50a9      	str	r1, [r5, r2]
 80109d6:	3504      	adds	r5, #4
 80109d8:	e79a      	b.n	8010910 <__multiply+0x7c>
 80109da:	3e01      	subs	r6, #1
 80109dc:	e79c      	b.n	8010918 <__multiply+0x84>
 80109de:	bf00      	nop
 80109e0:	080137f7 	.word	0x080137f7
 80109e4:	080138e4 	.word	0x080138e4

080109e8 <__pow5mult>:
 80109e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109ec:	4615      	mov	r5, r2
 80109ee:	f012 0203 	ands.w	r2, r2, #3
 80109f2:	4606      	mov	r6, r0
 80109f4:	460f      	mov	r7, r1
 80109f6:	d007      	beq.n	8010a08 <__pow5mult+0x20>
 80109f8:	4c25      	ldr	r4, [pc, #148]	; (8010a90 <__pow5mult+0xa8>)
 80109fa:	3a01      	subs	r2, #1
 80109fc:	2300      	movs	r3, #0
 80109fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010a02:	f7ff fe51 	bl	80106a8 <__multadd>
 8010a06:	4607      	mov	r7, r0
 8010a08:	10ad      	asrs	r5, r5, #2
 8010a0a:	d03d      	beq.n	8010a88 <__pow5mult+0xa0>
 8010a0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010a0e:	b97c      	cbnz	r4, 8010a30 <__pow5mult+0x48>
 8010a10:	2010      	movs	r0, #16
 8010a12:	f7fc f8f9 	bl	800cc08 <malloc>
 8010a16:	4602      	mov	r2, r0
 8010a18:	6270      	str	r0, [r6, #36]	; 0x24
 8010a1a:	b928      	cbnz	r0, 8010a28 <__pow5mult+0x40>
 8010a1c:	4b1d      	ldr	r3, [pc, #116]	; (8010a94 <__pow5mult+0xac>)
 8010a1e:	481e      	ldr	r0, [pc, #120]	; (8010a98 <__pow5mult+0xb0>)
 8010a20:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010a24:	f000 fc3a 	bl	801129c <__assert_func>
 8010a28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010a2c:	6004      	str	r4, [r0, #0]
 8010a2e:	60c4      	str	r4, [r0, #12]
 8010a30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010a34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010a38:	b94c      	cbnz	r4, 8010a4e <__pow5mult+0x66>
 8010a3a:	f240 2171 	movw	r1, #625	; 0x271
 8010a3e:	4630      	mov	r0, r6
 8010a40:	f7ff ff12 	bl	8010868 <__i2b>
 8010a44:	2300      	movs	r3, #0
 8010a46:	f8c8 0008 	str.w	r0, [r8, #8]
 8010a4a:	4604      	mov	r4, r0
 8010a4c:	6003      	str	r3, [r0, #0]
 8010a4e:	f04f 0900 	mov.w	r9, #0
 8010a52:	07eb      	lsls	r3, r5, #31
 8010a54:	d50a      	bpl.n	8010a6c <__pow5mult+0x84>
 8010a56:	4639      	mov	r1, r7
 8010a58:	4622      	mov	r2, r4
 8010a5a:	4630      	mov	r0, r6
 8010a5c:	f7ff ff1a 	bl	8010894 <__multiply>
 8010a60:	4639      	mov	r1, r7
 8010a62:	4680      	mov	r8, r0
 8010a64:	4630      	mov	r0, r6
 8010a66:	f7ff fdfd 	bl	8010664 <_Bfree>
 8010a6a:	4647      	mov	r7, r8
 8010a6c:	106d      	asrs	r5, r5, #1
 8010a6e:	d00b      	beq.n	8010a88 <__pow5mult+0xa0>
 8010a70:	6820      	ldr	r0, [r4, #0]
 8010a72:	b938      	cbnz	r0, 8010a84 <__pow5mult+0x9c>
 8010a74:	4622      	mov	r2, r4
 8010a76:	4621      	mov	r1, r4
 8010a78:	4630      	mov	r0, r6
 8010a7a:	f7ff ff0b 	bl	8010894 <__multiply>
 8010a7e:	6020      	str	r0, [r4, #0]
 8010a80:	f8c0 9000 	str.w	r9, [r0]
 8010a84:	4604      	mov	r4, r0
 8010a86:	e7e4      	b.n	8010a52 <__pow5mult+0x6a>
 8010a88:	4638      	mov	r0, r7
 8010a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a8e:	bf00      	nop
 8010a90:	08013a30 	.word	0x08013a30
 8010a94:	08013785 	.word	0x08013785
 8010a98:	080138e4 	.word	0x080138e4

08010a9c <__lshift>:
 8010a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010aa0:	460c      	mov	r4, r1
 8010aa2:	6849      	ldr	r1, [r1, #4]
 8010aa4:	6923      	ldr	r3, [r4, #16]
 8010aa6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010aaa:	68a3      	ldr	r3, [r4, #8]
 8010aac:	4607      	mov	r7, r0
 8010aae:	4691      	mov	r9, r2
 8010ab0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010ab4:	f108 0601 	add.w	r6, r8, #1
 8010ab8:	42b3      	cmp	r3, r6
 8010aba:	db0b      	blt.n	8010ad4 <__lshift+0x38>
 8010abc:	4638      	mov	r0, r7
 8010abe:	f7ff fd91 	bl	80105e4 <_Balloc>
 8010ac2:	4605      	mov	r5, r0
 8010ac4:	b948      	cbnz	r0, 8010ada <__lshift+0x3e>
 8010ac6:	4602      	mov	r2, r0
 8010ac8:	4b2a      	ldr	r3, [pc, #168]	; (8010b74 <__lshift+0xd8>)
 8010aca:	482b      	ldr	r0, [pc, #172]	; (8010b78 <__lshift+0xdc>)
 8010acc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010ad0:	f000 fbe4 	bl	801129c <__assert_func>
 8010ad4:	3101      	adds	r1, #1
 8010ad6:	005b      	lsls	r3, r3, #1
 8010ad8:	e7ee      	b.n	8010ab8 <__lshift+0x1c>
 8010ada:	2300      	movs	r3, #0
 8010adc:	f100 0114 	add.w	r1, r0, #20
 8010ae0:	f100 0210 	add.w	r2, r0, #16
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	4553      	cmp	r3, sl
 8010ae8:	db37      	blt.n	8010b5a <__lshift+0xbe>
 8010aea:	6920      	ldr	r0, [r4, #16]
 8010aec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010af0:	f104 0314 	add.w	r3, r4, #20
 8010af4:	f019 091f 	ands.w	r9, r9, #31
 8010af8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010afc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010b00:	d02f      	beq.n	8010b62 <__lshift+0xc6>
 8010b02:	f1c9 0e20 	rsb	lr, r9, #32
 8010b06:	468a      	mov	sl, r1
 8010b08:	f04f 0c00 	mov.w	ip, #0
 8010b0c:	681a      	ldr	r2, [r3, #0]
 8010b0e:	fa02 f209 	lsl.w	r2, r2, r9
 8010b12:	ea42 020c 	orr.w	r2, r2, ip
 8010b16:	f84a 2b04 	str.w	r2, [sl], #4
 8010b1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b1e:	4298      	cmp	r0, r3
 8010b20:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010b24:	d8f2      	bhi.n	8010b0c <__lshift+0x70>
 8010b26:	1b03      	subs	r3, r0, r4
 8010b28:	3b15      	subs	r3, #21
 8010b2a:	f023 0303 	bic.w	r3, r3, #3
 8010b2e:	3304      	adds	r3, #4
 8010b30:	f104 0215 	add.w	r2, r4, #21
 8010b34:	4290      	cmp	r0, r2
 8010b36:	bf38      	it	cc
 8010b38:	2304      	movcc	r3, #4
 8010b3a:	f841 c003 	str.w	ip, [r1, r3]
 8010b3e:	f1bc 0f00 	cmp.w	ip, #0
 8010b42:	d001      	beq.n	8010b48 <__lshift+0xac>
 8010b44:	f108 0602 	add.w	r6, r8, #2
 8010b48:	3e01      	subs	r6, #1
 8010b4a:	4638      	mov	r0, r7
 8010b4c:	612e      	str	r6, [r5, #16]
 8010b4e:	4621      	mov	r1, r4
 8010b50:	f7ff fd88 	bl	8010664 <_Bfree>
 8010b54:	4628      	mov	r0, r5
 8010b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8010b5e:	3301      	adds	r3, #1
 8010b60:	e7c1      	b.n	8010ae6 <__lshift+0x4a>
 8010b62:	3904      	subs	r1, #4
 8010b64:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b68:	f841 2f04 	str.w	r2, [r1, #4]!
 8010b6c:	4298      	cmp	r0, r3
 8010b6e:	d8f9      	bhi.n	8010b64 <__lshift+0xc8>
 8010b70:	e7ea      	b.n	8010b48 <__lshift+0xac>
 8010b72:	bf00      	nop
 8010b74:	080137f7 	.word	0x080137f7
 8010b78:	080138e4 	.word	0x080138e4

08010b7c <__mcmp>:
 8010b7c:	b530      	push	{r4, r5, lr}
 8010b7e:	6902      	ldr	r2, [r0, #16]
 8010b80:	690c      	ldr	r4, [r1, #16]
 8010b82:	1b12      	subs	r2, r2, r4
 8010b84:	d10e      	bne.n	8010ba4 <__mcmp+0x28>
 8010b86:	f100 0314 	add.w	r3, r0, #20
 8010b8a:	3114      	adds	r1, #20
 8010b8c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010b90:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010b94:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010b98:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010b9c:	42a5      	cmp	r5, r4
 8010b9e:	d003      	beq.n	8010ba8 <__mcmp+0x2c>
 8010ba0:	d305      	bcc.n	8010bae <__mcmp+0x32>
 8010ba2:	2201      	movs	r2, #1
 8010ba4:	4610      	mov	r0, r2
 8010ba6:	bd30      	pop	{r4, r5, pc}
 8010ba8:	4283      	cmp	r3, r0
 8010baa:	d3f3      	bcc.n	8010b94 <__mcmp+0x18>
 8010bac:	e7fa      	b.n	8010ba4 <__mcmp+0x28>
 8010bae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010bb2:	e7f7      	b.n	8010ba4 <__mcmp+0x28>

08010bb4 <__mdiff>:
 8010bb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bb8:	460c      	mov	r4, r1
 8010bba:	4606      	mov	r6, r0
 8010bbc:	4611      	mov	r1, r2
 8010bbe:	4620      	mov	r0, r4
 8010bc0:	4690      	mov	r8, r2
 8010bc2:	f7ff ffdb 	bl	8010b7c <__mcmp>
 8010bc6:	1e05      	subs	r5, r0, #0
 8010bc8:	d110      	bne.n	8010bec <__mdiff+0x38>
 8010bca:	4629      	mov	r1, r5
 8010bcc:	4630      	mov	r0, r6
 8010bce:	f7ff fd09 	bl	80105e4 <_Balloc>
 8010bd2:	b930      	cbnz	r0, 8010be2 <__mdiff+0x2e>
 8010bd4:	4b3a      	ldr	r3, [pc, #232]	; (8010cc0 <__mdiff+0x10c>)
 8010bd6:	4602      	mov	r2, r0
 8010bd8:	f240 2132 	movw	r1, #562	; 0x232
 8010bdc:	4839      	ldr	r0, [pc, #228]	; (8010cc4 <__mdiff+0x110>)
 8010bde:	f000 fb5d 	bl	801129c <__assert_func>
 8010be2:	2301      	movs	r3, #1
 8010be4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010be8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bec:	bfa4      	itt	ge
 8010bee:	4643      	movge	r3, r8
 8010bf0:	46a0      	movge	r8, r4
 8010bf2:	4630      	mov	r0, r6
 8010bf4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010bf8:	bfa6      	itte	ge
 8010bfa:	461c      	movge	r4, r3
 8010bfc:	2500      	movge	r5, #0
 8010bfe:	2501      	movlt	r5, #1
 8010c00:	f7ff fcf0 	bl	80105e4 <_Balloc>
 8010c04:	b920      	cbnz	r0, 8010c10 <__mdiff+0x5c>
 8010c06:	4b2e      	ldr	r3, [pc, #184]	; (8010cc0 <__mdiff+0x10c>)
 8010c08:	4602      	mov	r2, r0
 8010c0a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010c0e:	e7e5      	b.n	8010bdc <__mdiff+0x28>
 8010c10:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010c14:	6926      	ldr	r6, [r4, #16]
 8010c16:	60c5      	str	r5, [r0, #12]
 8010c18:	f104 0914 	add.w	r9, r4, #20
 8010c1c:	f108 0514 	add.w	r5, r8, #20
 8010c20:	f100 0e14 	add.w	lr, r0, #20
 8010c24:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010c28:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010c2c:	f108 0210 	add.w	r2, r8, #16
 8010c30:	46f2      	mov	sl, lr
 8010c32:	2100      	movs	r1, #0
 8010c34:	f859 3b04 	ldr.w	r3, [r9], #4
 8010c38:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010c3c:	fa1f f883 	uxth.w	r8, r3
 8010c40:	fa11 f18b 	uxtah	r1, r1, fp
 8010c44:	0c1b      	lsrs	r3, r3, #16
 8010c46:	eba1 0808 	sub.w	r8, r1, r8
 8010c4a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010c4e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010c52:	fa1f f888 	uxth.w	r8, r8
 8010c56:	1419      	asrs	r1, r3, #16
 8010c58:	454e      	cmp	r6, r9
 8010c5a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010c5e:	f84a 3b04 	str.w	r3, [sl], #4
 8010c62:	d8e7      	bhi.n	8010c34 <__mdiff+0x80>
 8010c64:	1b33      	subs	r3, r6, r4
 8010c66:	3b15      	subs	r3, #21
 8010c68:	f023 0303 	bic.w	r3, r3, #3
 8010c6c:	3304      	adds	r3, #4
 8010c6e:	3415      	adds	r4, #21
 8010c70:	42a6      	cmp	r6, r4
 8010c72:	bf38      	it	cc
 8010c74:	2304      	movcc	r3, #4
 8010c76:	441d      	add	r5, r3
 8010c78:	4473      	add	r3, lr
 8010c7a:	469e      	mov	lr, r3
 8010c7c:	462e      	mov	r6, r5
 8010c7e:	4566      	cmp	r6, ip
 8010c80:	d30e      	bcc.n	8010ca0 <__mdiff+0xec>
 8010c82:	f10c 0203 	add.w	r2, ip, #3
 8010c86:	1b52      	subs	r2, r2, r5
 8010c88:	f022 0203 	bic.w	r2, r2, #3
 8010c8c:	3d03      	subs	r5, #3
 8010c8e:	45ac      	cmp	ip, r5
 8010c90:	bf38      	it	cc
 8010c92:	2200      	movcc	r2, #0
 8010c94:	441a      	add	r2, r3
 8010c96:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010c9a:	b17b      	cbz	r3, 8010cbc <__mdiff+0x108>
 8010c9c:	6107      	str	r7, [r0, #16]
 8010c9e:	e7a3      	b.n	8010be8 <__mdiff+0x34>
 8010ca0:	f856 8b04 	ldr.w	r8, [r6], #4
 8010ca4:	fa11 f288 	uxtah	r2, r1, r8
 8010ca8:	1414      	asrs	r4, r2, #16
 8010caa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010cae:	b292      	uxth	r2, r2
 8010cb0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010cb4:	f84e 2b04 	str.w	r2, [lr], #4
 8010cb8:	1421      	asrs	r1, r4, #16
 8010cba:	e7e0      	b.n	8010c7e <__mdiff+0xca>
 8010cbc:	3f01      	subs	r7, #1
 8010cbe:	e7ea      	b.n	8010c96 <__mdiff+0xe2>
 8010cc0:	080137f7 	.word	0x080137f7
 8010cc4:	080138e4 	.word	0x080138e4

08010cc8 <__ulp>:
 8010cc8:	b082      	sub	sp, #8
 8010cca:	ed8d 0b00 	vstr	d0, [sp]
 8010cce:	9b01      	ldr	r3, [sp, #4]
 8010cd0:	4912      	ldr	r1, [pc, #72]	; (8010d1c <__ulp+0x54>)
 8010cd2:	4019      	ands	r1, r3
 8010cd4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010cd8:	2900      	cmp	r1, #0
 8010cda:	dd05      	ble.n	8010ce8 <__ulp+0x20>
 8010cdc:	2200      	movs	r2, #0
 8010cde:	460b      	mov	r3, r1
 8010ce0:	ec43 2b10 	vmov	d0, r2, r3
 8010ce4:	b002      	add	sp, #8
 8010ce6:	4770      	bx	lr
 8010ce8:	4249      	negs	r1, r1
 8010cea:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8010cee:	ea4f 5021 	mov.w	r0, r1, asr #20
 8010cf2:	f04f 0200 	mov.w	r2, #0
 8010cf6:	f04f 0300 	mov.w	r3, #0
 8010cfa:	da04      	bge.n	8010d06 <__ulp+0x3e>
 8010cfc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010d00:	fa41 f300 	asr.w	r3, r1, r0
 8010d04:	e7ec      	b.n	8010ce0 <__ulp+0x18>
 8010d06:	f1a0 0114 	sub.w	r1, r0, #20
 8010d0a:	291e      	cmp	r1, #30
 8010d0c:	bfda      	itte	le
 8010d0e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8010d12:	fa20 f101 	lsrle.w	r1, r0, r1
 8010d16:	2101      	movgt	r1, #1
 8010d18:	460a      	mov	r2, r1
 8010d1a:	e7e1      	b.n	8010ce0 <__ulp+0x18>
 8010d1c:	7ff00000 	.word	0x7ff00000

08010d20 <__b2d>:
 8010d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d22:	6905      	ldr	r5, [r0, #16]
 8010d24:	f100 0714 	add.w	r7, r0, #20
 8010d28:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010d2c:	1f2e      	subs	r6, r5, #4
 8010d2e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010d32:	4620      	mov	r0, r4
 8010d34:	f7ff fd48 	bl	80107c8 <__hi0bits>
 8010d38:	f1c0 0320 	rsb	r3, r0, #32
 8010d3c:	280a      	cmp	r0, #10
 8010d3e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010dbc <__b2d+0x9c>
 8010d42:	600b      	str	r3, [r1, #0]
 8010d44:	dc14      	bgt.n	8010d70 <__b2d+0x50>
 8010d46:	f1c0 0e0b 	rsb	lr, r0, #11
 8010d4a:	fa24 f10e 	lsr.w	r1, r4, lr
 8010d4e:	42b7      	cmp	r7, r6
 8010d50:	ea41 030c 	orr.w	r3, r1, ip
 8010d54:	bf34      	ite	cc
 8010d56:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010d5a:	2100      	movcs	r1, #0
 8010d5c:	3015      	adds	r0, #21
 8010d5e:	fa04 f000 	lsl.w	r0, r4, r0
 8010d62:	fa21 f10e 	lsr.w	r1, r1, lr
 8010d66:	ea40 0201 	orr.w	r2, r0, r1
 8010d6a:	ec43 2b10 	vmov	d0, r2, r3
 8010d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d70:	42b7      	cmp	r7, r6
 8010d72:	bf3a      	itte	cc
 8010d74:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010d78:	f1a5 0608 	subcc.w	r6, r5, #8
 8010d7c:	2100      	movcs	r1, #0
 8010d7e:	380b      	subs	r0, #11
 8010d80:	d017      	beq.n	8010db2 <__b2d+0x92>
 8010d82:	f1c0 0c20 	rsb	ip, r0, #32
 8010d86:	fa04 f500 	lsl.w	r5, r4, r0
 8010d8a:	42be      	cmp	r6, r7
 8010d8c:	fa21 f40c 	lsr.w	r4, r1, ip
 8010d90:	ea45 0504 	orr.w	r5, r5, r4
 8010d94:	bf8c      	ite	hi
 8010d96:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010d9a:	2400      	movls	r4, #0
 8010d9c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010da0:	fa01 f000 	lsl.w	r0, r1, r0
 8010da4:	fa24 f40c 	lsr.w	r4, r4, ip
 8010da8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010dac:	ea40 0204 	orr.w	r2, r0, r4
 8010db0:	e7db      	b.n	8010d6a <__b2d+0x4a>
 8010db2:	ea44 030c 	orr.w	r3, r4, ip
 8010db6:	460a      	mov	r2, r1
 8010db8:	e7d7      	b.n	8010d6a <__b2d+0x4a>
 8010dba:	bf00      	nop
 8010dbc:	3ff00000 	.word	0x3ff00000

08010dc0 <__d2b>:
 8010dc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010dc4:	4689      	mov	r9, r1
 8010dc6:	2101      	movs	r1, #1
 8010dc8:	ec57 6b10 	vmov	r6, r7, d0
 8010dcc:	4690      	mov	r8, r2
 8010dce:	f7ff fc09 	bl	80105e4 <_Balloc>
 8010dd2:	4604      	mov	r4, r0
 8010dd4:	b930      	cbnz	r0, 8010de4 <__d2b+0x24>
 8010dd6:	4602      	mov	r2, r0
 8010dd8:	4b25      	ldr	r3, [pc, #148]	; (8010e70 <__d2b+0xb0>)
 8010dda:	4826      	ldr	r0, [pc, #152]	; (8010e74 <__d2b+0xb4>)
 8010ddc:	f240 310a 	movw	r1, #778	; 0x30a
 8010de0:	f000 fa5c 	bl	801129c <__assert_func>
 8010de4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010de8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010dec:	bb35      	cbnz	r5, 8010e3c <__d2b+0x7c>
 8010dee:	2e00      	cmp	r6, #0
 8010df0:	9301      	str	r3, [sp, #4]
 8010df2:	d028      	beq.n	8010e46 <__d2b+0x86>
 8010df4:	4668      	mov	r0, sp
 8010df6:	9600      	str	r6, [sp, #0]
 8010df8:	f7ff fd06 	bl	8010808 <__lo0bits>
 8010dfc:	9900      	ldr	r1, [sp, #0]
 8010dfe:	b300      	cbz	r0, 8010e42 <__d2b+0x82>
 8010e00:	9a01      	ldr	r2, [sp, #4]
 8010e02:	f1c0 0320 	rsb	r3, r0, #32
 8010e06:	fa02 f303 	lsl.w	r3, r2, r3
 8010e0a:	430b      	orrs	r3, r1
 8010e0c:	40c2      	lsrs	r2, r0
 8010e0e:	6163      	str	r3, [r4, #20]
 8010e10:	9201      	str	r2, [sp, #4]
 8010e12:	9b01      	ldr	r3, [sp, #4]
 8010e14:	61a3      	str	r3, [r4, #24]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	bf14      	ite	ne
 8010e1a:	2202      	movne	r2, #2
 8010e1c:	2201      	moveq	r2, #1
 8010e1e:	6122      	str	r2, [r4, #16]
 8010e20:	b1d5      	cbz	r5, 8010e58 <__d2b+0x98>
 8010e22:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010e26:	4405      	add	r5, r0
 8010e28:	f8c9 5000 	str.w	r5, [r9]
 8010e2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010e30:	f8c8 0000 	str.w	r0, [r8]
 8010e34:	4620      	mov	r0, r4
 8010e36:	b003      	add	sp, #12
 8010e38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010e40:	e7d5      	b.n	8010dee <__d2b+0x2e>
 8010e42:	6161      	str	r1, [r4, #20]
 8010e44:	e7e5      	b.n	8010e12 <__d2b+0x52>
 8010e46:	a801      	add	r0, sp, #4
 8010e48:	f7ff fcde 	bl	8010808 <__lo0bits>
 8010e4c:	9b01      	ldr	r3, [sp, #4]
 8010e4e:	6163      	str	r3, [r4, #20]
 8010e50:	2201      	movs	r2, #1
 8010e52:	6122      	str	r2, [r4, #16]
 8010e54:	3020      	adds	r0, #32
 8010e56:	e7e3      	b.n	8010e20 <__d2b+0x60>
 8010e58:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010e5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010e60:	f8c9 0000 	str.w	r0, [r9]
 8010e64:	6918      	ldr	r0, [r3, #16]
 8010e66:	f7ff fcaf 	bl	80107c8 <__hi0bits>
 8010e6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010e6e:	e7df      	b.n	8010e30 <__d2b+0x70>
 8010e70:	080137f7 	.word	0x080137f7
 8010e74:	080138e4 	.word	0x080138e4

08010e78 <__ratio>:
 8010e78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e7c:	4688      	mov	r8, r1
 8010e7e:	4669      	mov	r1, sp
 8010e80:	4681      	mov	r9, r0
 8010e82:	f7ff ff4d 	bl	8010d20 <__b2d>
 8010e86:	a901      	add	r1, sp, #4
 8010e88:	4640      	mov	r0, r8
 8010e8a:	ec55 4b10 	vmov	r4, r5, d0
 8010e8e:	f7ff ff47 	bl	8010d20 <__b2d>
 8010e92:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010e96:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010e9a:	eba3 0c02 	sub.w	ip, r3, r2
 8010e9e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010ea2:	1a9b      	subs	r3, r3, r2
 8010ea4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010ea8:	ec51 0b10 	vmov	r0, r1, d0
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	bfd6      	itet	le
 8010eb0:	460a      	movle	r2, r1
 8010eb2:	462a      	movgt	r2, r5
 8010eb4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010eb8:	468b      	mov	fp, r1
 8010eba:	462f      	mov	r7, r5
 8010ebc:	bfd4      	ite	le
 8010ebe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010ec2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010ec6:	4620      	mov	r0, r4
 8010ec8:	ee10 2a10 	vmov	r2, s0
 8010ecc:	465b      	mov	r3, fp
 8010ece:	4639      	mov	r1, r7
 8010ed0:	f7ef fccc 	bl	800086c <__aeabi_ddiv>
 8010ed4:	ec41 0b10 	vmov	d0, r0, r1
 8010ed8:	b003      	add	sp, #12
 8010eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010ede <__copybits>:
 8010ede:	3901      	subs	r1, #1
 8010ee0:	b570      	push	{r4, r5, r6, lr}
 8010ee2:	1149      	asrs	r1, r1, #5
 8010ee4:	6914      	ldr	r4, [r2, #16]
 8010ee6:	3101      	adds	r1, #1
 8010ee8:	f102 0314 	add.w	r3, r2, #20
 8010eec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010ef0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010ef4:	1f05      	subs	r5, r0, #4
 8010ef6:	42a3      	cmp	r3, r4
 8010ef8:	d30c      	bcc.n	8010f14 <__copybits+0x36>
 8010efa:	1aa3      	subs	r3, r4, r2
 8010efc:	3b11      	subs	r3, #17
 8010efe:	f023 0303 	bic.w	r3, r3, #3
 8010f02:	3211      	adds	r2, #17
 8010f04:	42a2      	cmp	r2, r4
 8010f06:	bf88      	it	hi
 8010f08:	2300      	movhi	r3, #0
 8010f0a:	4418      	add	r0, r3
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	4288      	cmp	r0, r1
 8010f10:	d305      	bcc.n	8010f1e <__copybits+0x40>
 8010f12:	bd70      	pop	{r4, r5, r6, pc}
 8010f14:	f853 6b04 	ldr.w	r6, [r3], #4
 8010f18:	f845 6f04 	str.w	r6, [r5, #4]!
 8010f1c:	e7eb      	b.n	8010ef6 <__copybits+0x18>
 8010f1e:	f840 3b04 	str.w	r3, [r0], #4
 8010f22:	e7f4      	b.n	8010f0e <__copybits+0x30>

08010f24 <__any_on>:
 8010f24:	f100 0214 	add.w	r2, r0, #20
 8010f28:	6900      	ldr	r0, [r0, #16]
 8010f2a:	114b      	asrs	r3, r1, #5
 8010f2c:	4298      	cmp	r0, r3
 8010f2e:	b510      	push	{r4, lr}
 8010f30:	db11      	blt.n	8010f56 <__any_on+0x32>
 8010f32:	dd0a      	ble.n	8010f4a <__any_on+0x26>
 8010f34:	f011 011f 	ands.w	r1, r1, #31
 8010f38:	d007      	beq.n	8010f4a <__any_on+0x26>
 8010f3a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010f3e:	fa24 f001 	lsr.w	r0, r4, r1
 8010f42:	fa00 f101 	lsl.w	r1, r0, r1
 8010f46:	428c      	cmp	r4, r1
 8010f48:	d10b      	bne.n	8010f62 <__any_on+0x3e>
 8010f4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010f4e:	4293      	cmp	r3, r2
 8010f50:	d803      	bhi.n	8010f5a <__any_on+0x36>
 8010f52:	2000      	movs	r0, #0
 8010f54:	bd10      	pop	{r4, pc}
 8010f56:	4603      	mov	r3, r0
 8010f58:	e7f7      	b.n	8010f4a <__any_on+0x26>
 8010f5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010f5e:	2900      	cmp	r1, #0
 8010f60:	d0f5      	beq.n	8010f4e <__any_on+0x2a>
 8010f62:	2001      	movs	r0, #1
 8010f64:	e7f6      	b.n	8010f54 <__any_on+0x30>

08010f66 <_calloc_r>:
 8010f66:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010f68:	fba1 2402 	umull	r2, r4, r1, r2
 8010f6c:	b94c      	cbnz	r4, 8010f82 <_calloc_r+0x1c>
 8010f6e:	4611      	mov	r1, r2
 8010f70:	9201      	str	r2, [sp, #4]
 8010f72:	f7fb fedb 	bl	800cd2c <_malloc_r>
 8010f76:	9a01      	ldr	r2, [sp, #4]
 8010f78:	4605      	mov	r5, r0
 8010f7a:	b930      	cbnz	r0, 8010f8a <_calloc_r+0x24>
 8010f7c:	4628      	mov	r0, r5
 8010f7e:	b003      	add	sp, #12
 8010f80:	bd30      	pop	{r4, r5, pc}
 8010f82:	220c      	movs	r2, #12
 8010f84:	6002      	str	r2, [r0, #0]
 8010f86:	2500      	movs	r5, #0
 8010f88:	e7f8      	b.n	8010f7c <_calloc_r+0x16>
 8010f8a:	4621      	mov	r1, r4
 8010f8c:	f7fb fe5a 	bl	800cc44 <memset>
 8010f90:	e7f4      	b.n	8010f7c <_calloc_r+0x16>

08010f92 <__ssputs_r>:
 8010f92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f96:	688e      	ldr	r6, [r1, #8]
 8010f98:	429e      	cmp	r6, r3
 8010f9a:	4682      	mov	sl, r0
 8010f9c:	460c      	mov	r4, r1
 8010f9e:	4690      	mov	r8, r2
 8010fa0:	461f      	mov	r7, r3
 8010fa2:	d838      	bhi.n	8011016 <__ssputs_r+0x84>
 8010fa4:	898a      	ldrh	r2, [r1, #12]
 8010fa6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010faa:	d032      	beq.n	8011012 <__ssputs_r+0x80>
 8010fac:	6825      	ldr	r5, [r4, #0]
 8010fae:	6909      	ldr	r1, [r1, #16]
 8010fb0:	eba5 0901 	sub.w	r9, r5, r1
 8010fb4:	6965      	ldr	r5, [r4, #20]
 8010fb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010fba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010fbe:	3301      	adds	r3, #1
 8010fc0:	444b      	add	r3, r9
 8010fc2:	106d      	asrs	r5, r5, #1
 8010fc4:	429d      	cmp	r5, r3
 8010fc6:	bf38      	it	cc
 8010fc8:	461d      	movcc	r5, r3
 8010fca:	0553      	lsls	r3, r2, #21
 8010fcc:	d531      	bpl.n	8011032 <__ssputs_r+0xa0>
 8010fce:	4629      	mov	r1, r5
 8010fd0:	f7fb feac 	bl	800cd2c <_malloc_r>
 8010fd4:	4606      	mov	r6, r0
 8010fd6:	b950      	cbnz	r0, 8010fee <__ssputs_r+0x5c>
 8010fd8:	230c      	movs	r3, #12
 8010fda:	f8ca 3000 	str.w	r3, [sl]
 8010fde:	89a3      	ldrh	r3, [r4, #12]
 8010fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010fe4:	81a3      	strh	r3, [r4, #12]
 8010fe6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fee:	6921      	ldr	r1, [r4, #16]
 8010ff0:	464a      	mov	r2, r9
 8010ff2:	f7fb fe19 	bl	800cc28 <memcpy>
 8010ff6:	89a3      	ldrh	r3, [r4, #12]
 8010ff8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011000:	81a3      	strh	r3, [r4, #12]
 8011002:	6126      	str	r6, [r4, #16]
 8011004:	6165      	str	r5, [r4, #20]
 8011006:	444e      	add	r6, r9
 8011008:	eba5 0509 	sub.w	r5, r5, r9
 801100c:	6026      	str	r6, [r4, #0]
 801100e:	60a5      	str	r5, [r4, #8]
 8011010:	463e      	mov	r6, r7
 8011012:	42be      	cmp	r6, r7
 8011014:	d900      	bls.n	8011018 <__ssputs_r+0x86>
 8011016:	463e      	mov	r6, r7
 8011018:	6820      	ldr	r0, [r4, #0]
 801101a:	4632      	mov	r2, r6
 801101c:	4641      	mov	r1, r8
 801101e:	f000 f98f 	bl	8011340 <memmove>
 8011022:	68a3      	ldr	r3, [r4, #8]
 8011024:	1b9b      	subs	r3, r3, r6
 8011026:	60a3      	str	r3, [r4, #8]
 8011028:	6823      	ldr	r3, [r4, #0]
 801102a:	4433      	add	r3, r6
 801102c:	6023      	str	r3, [r4, #0]
 801102e:	2000      	movs	r0, #0
 8011030:	e7db      	b.n	8010fea <__ssputs_r+0x58>
 8011032:	462a      	mov	r2, r5
 8011034:	f000 f99e 	bl	8011374 <_realloc_r>
 8011038:	4606      	mov	r6, r0
 801103a:	2800      	cmp	r0, #0
 801103c:	d1e1      	bne.n	8011002 <__ssputs_r+0x70>
 801103e:	6921      	ldr	r1, [r4, #16]
 8011040:	4650      	mov	r0, sl
 8011042:	f7fb fe07 	bl	800cc54 <_free_r>
 8011046:	e7c7      	b.n	8010fd8 <__ssputs_r+0x46>

08011048 <_svfiprintf_r>:
 8011048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801104c:	4698      	mov	r8, r3
 801104e:	898b      	ldrh	r3, [r1, #12]
 8011050:	061b      	lsls	r3, r3, #24
 8011052:	b09d      	sub	sp, #116	; 0x74
 8011054:	4607      	mov	r7, r0
 8011056:	460d      	mov	r5, r1
 8011058:	4614      	mov	r4, r2
 801105a:	d50e      	bpl.n	801107a <_svfiprintf_r+0x32>
 801105c:	690b      	ldr	r3, [r1, #16]
 801105e:	b963      	cbnz	r3, 801107a <_svfiprintf_r+0x32>
 8011060:	2140      	movs	r1, #64	; 0x40
 8011062:	f7fb fe63 	bl	800cd2c <_malloc_r>
 8011066:	6028      	str	r0, [r5, #0]
 8011068:	6128      	str	r0, [r5, #16]
 801106a:	b920      	cbnz	r0, 8011076 <_svfiprintf_r+0x2e>
 801106c:	230c      	movs	r3, #12
 801106e:	603b      	str	r3, [r7, #0]
 8011070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011074:	e0d1      	b.n	801121a <_svfiprintf_r+0x1d2>
 8011076:	2340      	movs	r3, #64	; 0x40
 8011078:	616b      	str	r3, [r5, #20]
 801107a:	2300      	movs	r3, #0
 801107c:	9309      	str	r3, [sp, #36]	; 0x24
 801107e:	2320      	movs	r3, #32
 8011080:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011084:	f8cd 800c 	str.w	r8, [sp, #12]
 8011088:	2330      	movs	r3, #48	; 0x30
 801108a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011234 <_svfiprintf_r+0x1ec>
 801108e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011092:	f04f 0901 	mov.w	r9, #1
 8011096:	4623      	mov	r3, r4
 8011098:	469a      	mov	sl, r3
 801109a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801109e:	b10a      	cbz	r2, 80110a4 <_svfiprintf_r+0x5c>
 80110a0:	2a25      	cmp	r2, #37	; 0x25
 80110a2:	d1f9      	bne.n	8011098 <_svfiprintf_r+0x50>
 80110a4:	ebba 0b04 	subs.w	fp, sl, r4
 80110a8:	d00b      	beq.n	80110c2 <_svfiprintf_r+0x7a>
 80110aa:	465b      	mov	r3, fp
 80110ac:	4622      	mov	r2, r4
 80110ae:	4629      	mov	r1, r5
 80110b0:	4638      	mov	r0, r7
 80110b2:	f7ff ff6e 	bl	8010f92 <__ssputs_r>
 80110b6:	3001      	adds	r0, #1
 80110b8:	f000 80aa 	beq.w	8011210 <_svfiprintf_r+0x1c8>
 80110bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80110be:	445a      	add	r2, fp
 80110c0:	9209      	str	r2, [sp, #36]	; 0x24
 80110c2:	f89a 3000 	ldrb.w	r3, [sl]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	f000 80a2 	beq.w	8011210 <_svfiprintf_r+0x1c8>
 80110cc:	2300      	movs	r3, #0
 80110ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80110d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80110d6:	f10a 0a01 	add.w	sl, sl, #1
 80110da:	9304      	str	r3, [sp, #16]
 80110dc:	9307      	str	r3, [sp, #28]
 80110de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80110e2:	931a      	str	r3, [sp, #104]	; 0x68
 80110e4:	4654      	mov	r4, sl
 80110e6:	2205      	movs	r2, #5
 80110e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110ec:	4851      	ldr	r0, [pc, #324]	; (8011234 <_svfiprintf_r+0x1ec>)
 80110ee:	f7ef f887 	bl	8000200 <memchr>
 80110f2:	9a04      	ldr	r2, [sp, #16]
 80110f4:	b9d8      	cbnz	r0, 801112e <_svfiprintf_r+0xe6>
 80110f6:	06d0      	lsls	r0, r2, #27
 80110f8:	bf44      	itt	mi
 80110fa:	2320      	movmi	r3, #32
 80110fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011100:	0711      	lsls	r1, r2, #28
 8011102:	bf44      	itt	mi
 8011104:	232b      	movmi	r3, #43	; 0x2b
 8011106:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801110a:	f89a 3000 	ldrb.w	r3, [sl]
 801110e:	2b2a      	cmp	r3, #42	; 0x2a
 8011110:	d015      	beq.n	801113e <_svfiprintf_r+0xf6>
 8011112:	9a07      	ldr	r2, [sp, #28]
 8011114:	4654      	mov	r4, sl
 8011116:	2000      	movs	r0, #0
 8011118:	f04f 0c0a 	mov.w	ip, #10
 801111c:	4621      	mov	r1, r4
 801111e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011122:	3b30      	subs	r3, #48	; 0x30
 8011124:	2b09      	cmp	r3, #9
 8011126:	d94e      	bls.n	80111c6 <_svfiprintf_r+0x17e>
 8011128:	b1b0      	cbz	r0, 8011158 <_svfiprintf_r+0x110>
 801112a:	9207      	str	r2, [sp, #28]
 801112c:	e014      	b.n	8011158 <_svfiprintf_r+0x110>
 801112e:	eba0 0308 	sub.w	r3, r0, r8
 8011132:	fa09 f303 	lsl.w	r3, r9, r3
 8011136:	4313      	orrs	r3, r2
 8011138:	9304      	str	r3, [sp, #16]
 801113a:	46a2      	mov	sl, r4
 801113c:	e7d2      	b.n	80110e4 <_svfiprintf_r+0x9c>
 801113e:	9b03      	ldr	r3, [sp, #12]
 8011140:	1d19      	adds	r1, r3, #4
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	9103      	str	r1, [sp, #12]
 8011146:	2b00      	cmp	r3, #0
 8011148:	bfbb      	ittet	lt
 801114a:	425b      	neglt	r3, r3
 801114c:	f042 0202 	orrlt.w	r2, r2, #2
 8011150:	9307      	strge	r3, [sp, #28]
 8011152:	9307      	strlt	r3, [sp, #28]
 8011154:	bfb8      	it	lt
 8011156:	9204      	strlt	r2, [sp, #16]
 8011158:	7823      	ldrb	r3, [r4, #0]
 801115a:	2b2e      	cmp	r3, #46	; 0x2e
 801115c:	d10c      	bne.n	8011178 <_svfiprintf_r+0x130>
 801115e:	7863      	ldrb	r3, [r4, #1]
 8011160:	2b2a      	cmp	r3, #42	; 0x2a
 8011162:	d135      	bne.n	80111d0 <_svfiprintf_r+0x188>
 8011164:	9b03      	ldr	r3, [sp, #12]
 8011166:	1d1a      	adds	r2, r3, #4
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	9203      	str	r2, [sp, #12]
 801116c:	2b00      	cmp	r3, #0
 801116e:	bfb8      	it	lt
 8011170:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011174:	3402      	adds	r4, #2
 8011176:	9305      	str	r3, [sp, #20]
 8011178:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011244 <_svfiprintf_r+0x1fc>
 801117c:	7821      	ldrb	r1, [r4, #0]
 801117e:	2203      	movs	r2, #3
 8011180:	4650      	mov	r0, sl
 8011182:	f7ef f83d 	bl	8000200 <memchr>
 8011186:	b140      	cbz	r0, 801119a <_svfiprintf_r+0x152>
 8011188:	2340      	movs	r3, #64	; 0x40
 801118a:	eba0 000a 	sub.w	r0, r0, sl
 801118e:	fa03 f000 	lsl.w	r0, r3, r0
 8011192:	9b04      	ldr	r3, [sp, #16]
 8011194:	4303      	orrs	r3, r0
 8011196:	3401      	adds	r4, #1
 8011198:	9304      	str	r3, [sp, #16]
 801119a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801119e:	4826      	ldr	r0, [pc, #152]	; (8011238 <_svfiprintf_r+0x1f0>)
 80111a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80111a4:	2206      	movs	r2, #6
 80111a6:	f7ef f82b 	bl	8000200 <memchr>
 80111aa:	2800      	cmp	r0, #0
 80111ac:	d038      	beq.n	8011220 <_svfiprintf_r+0x1d8>
 80111ae:	4b23      	ldr	r3, [pc, #140]	; (801123c <_svfiprintf_r+0x1f4>)
 80111b0:	bb1b      	cbnz	r3, 80111fa <_svfiprintf_r+0x1b2>
 80111b2:	9b03      	ldr	r3, [sp, #12]
 80111b4:	3307      	adds	r3, #7
 80111b6:	f023 0307 	bic.w	r3, r3, #7
 80111ba:	3308      	adds	r3, #8
 80111bc:	9303      	str	r3, [sp, #12]
 80111be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111c0:	4433      	add	r3, r6
 80111c2:	9309      	str	r3, [sp, #36]	; 0x24
 80111c4:	e767      	b.n	8011096 <_svfiprintf_r+0x4e>
 80111c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80111ca:	460c      	mov	r4, r1
 80111cc:	2001      	movs	r0, #1
 80111ce:	e7a5      	b.n	801111c <_svfiprintf_r+0xd4>
 80111d0:	2300      	movs	r3, #0
 80111d2:	3401      	adds	r4, #1
 80111d4:	9305      	str	r3, [sp, #20]
 80111d6:	4619      	mov	r1, r3
 80111d8:	f04f 0c0a 	mov.w	ip, #10
 80111dc:	4620      	mov	r0, r4
 80111de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80111e2:	3a30      	subs	r2, #48	; 0x30
 80111e4:	2a09      	cmp	r2, #9
 80111e6:	d903      	bls.n	80111f0 <_svfiprintf_r+0x1a8>
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d0c5      	beq.n	8011178 <_svfiprintf_r+0x130>
 80111ec:	9105      	str	r1, [sp, #20]
 80111ee:	e7c3      	b.n	8011178 <_svfiprintf_r+0x130>
 80111f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80111f4:	4604      	mov	r4, r0
 80111f6:	2301      	movs	r3, #1
 80111f8:	e7f0      	b.n	80111dc <_svfiprintf_r+0x194>
 80111fa:	ab03      	add	r3, sp, #12
 80111fc:	9300      	str	r3, [sp, #0]
 80111fe:	462a      	mov	r2, r5
 8011200:	4b0f      	ldr	r3, [pc, #60]	; (8011240 <_svfiprintf_r+0x1f8>)
 8011202:	a904      	add	r1, sp, #16
 8011204:	4638      	mov	r0, r7
 8011206:	f7fb fea5 	bl	800cf54 <_printf_float>
 801120a:	1c42      	adds	r2, r0, #1
 801120c:	4606      	mov	r6, r0
 801120e:	d1d6      	bne.n	80111be <_svfiprintf_r+0x176>
 8011210:	89ab      	ldrh	r3, [r5, #12]
 8011212:	065b      	lsls	r3, r3, #25
 8011214:	f53f af2c 	bmi.w	8011070 <_svfiprintf_r+0x28>
 8011218:	9809      	ldr	r0, [sp, #36]	; 0x24
 801121a:	b01d      	add	sp, #116	; 0x74
 801121c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011220:	ab03      	add	r3, sp, #12
 8011222:	9300      	str	r3, [sp, #0]
 8011224:	462a      	mov	r2, r5
 8011226:	4b06      	ldr	r3, [pc, #24]	; (8011240 <_svfiprintf_r+0x1f8>)
 8011228:	a904      	add	r1, sp, #16
 801122a:	4638      	mov	r0, r7
 801122c:	f7fc f936 	bl	800d49c <_printf_i>
 8011230:	e7eb      	b.n	801120a <_svfiprintf_r+0x1c2>
 8011232:	bf00      	nop
 8011234:	08013a3c 	.word	0x08013a3c
 8011238:	08013a46 	.word	0x08013a46
 801123c:	0800cf55 	.word	0x0800cf55
 8011240:	08010f93 	.word	0x08010f93
 8011244:	08013a42 	.word	0x08013a42

08011248 <_read_r>:
 8011248:	b538      	push	{r3, r4, r5, lr}
 801124a:	4d07      	ldr	r5, [pc, #28]	; (8011268 <_read_r+0x20>)
 801124c:	4604      	mov	r4, r0
 801124e:	4608      	mov	r0, r1
 8011250:	4611      	mov	r1, r2
 8011252:	2200      	movs	r2, #0
 8011254:	602a      	str	r2, [r5, #0]
 8011256:	461a      	mov	r2, r3
 8011258:	f7f4 f806 	bl	8005268 <_read>
 801125c:	1c43      	adds	r3, r0, #1
 801125e:	d102      	bne.n	8011266 <_read_r+0x1e>
 8011260:	682b      	ldr	r3, [r5, #0]
 8011262:	b103      	cbz	r3, 8011266 <_read_r+0x1e>
 8011264:	6023      	str	r3, [r4, #0]
 8011266:	bd38      	pop	{r3, r4, r5, pc}
 8011268:	200027e0 	.word	0x200027e0
 801126c:	00000000 	.word	0x00000000

08011270 <nan>:
 8011270:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011278 <nan+0x8>
 8011274:	4770      	bx	lr
 8011276:	bf00      	nop
 8011278:	00000000 	.word	0x00000000
 801127c:	7ff80000 	.word	0x7ff80000

08011280 <__ascii_wctomb>:
 8011280:	b149      	cbz	r1, 8011296 <__ascii_wctomb+0x16>
 8011282:	2aff      	cmp	r2, #255	; 0xff
 8011284:	bf85      	ittet	hi
 8011286:	238a      	movhi	r3, #138	; 0x8a
 8011288:	6003      	strhi	r3, [r0, #0]
 801128a:	700a      	strbls	r2, [r1, #0]
 801128c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8011290:	bf98      	it	ls
 8011292:	2001      	movls	r0, #1
 8011294:	4770      	bx	lr
 8011296:	4608      	mov	r0, r1
 8011298:	4770      	bx	lr
	...

0801129c <__assert_func>:
 801129c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801129e:	4614      	mov	r4, r2
 80112a0:	461a      	mov	r2, r3
 80112a2:	4b09      	ldr	r3, [pc, #36]	; (80112c8 <__assert_func+0x2c>)
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	4605      	mov	r5, r0
 80112a8:	68d8      	ldr	r0, [r3, #12]
 80112aa:	b14c      	cbz	r4, 80112c0 <__assert_func+0x24>
 80112ac:	4b07      	ldr	r3, [pc, #28]	; (80112cc <__assert_func+0x30>)
 80112ae:	9100      	str	r1, [sp, #0]
 80112b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80112b4:	4906      	ldr	r1, [pc, #24]	; (80112d0 <__assert_func+0x34>)
 80112b6:	462b      	mov	r3, r5
 80112b8:	f000 f80e 	bl	80112d8 <fiprintf>
 80112bc:	f000 f9e2 	bl	8011684 <abort>
 80112c0:	4b04      	ldr	r3, [pc, #16]	; (80112d4 <__assert_func+0x38>)
 80112c2:	461c      	mov	r4, r3
 80112c4:	e7f3      	b.n	80112ae <__assert_func+0x12>
 80112c6:	bf00      	nop
 80112c8:	20000178 	.word	0x20000178
 80112cc:	08013a4d 	.word	0x08013a4d
 80112d0:	08013a5a 	.word	0x08013a5a
 80112d4:	08013a88 	.word	0x08013a88

080112d8 <fiprintf>:
 80112d8:	b40e      	push	{r1, r2, r3}
 80112da:	b503      	push	{r0, r1, lr}
 80112dc:	4601      	mov	r1, r0
 80112de:	ab03      	add	r3, sp, #12
 80112e0:	4805      	ldr	r0, [pc, #20]	; (80112f8 <fiprintf+0x20>)
 80112e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80112e6:	6800      	ldr	r0, [r0, #0]
 80112e8:	9301      	str	r3, [sp, #4]
 80112ea:	f000 f89b 	bl	8011424 <_vfiprintf_r>
 80112ee:	b002      	add	sp, #8
 80112f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80112f4:	b003      	add	sp, #12
 80112f6:	4770      	bx	lr
 80112f8:	20000178 	.word	0x20000178

080112fc <_fstat_r>:
 80112fc:	b538      	push	{r3, r4, r5, lr}
 80112fe:	4d07      	ldr	r5, [pc, #28]	; (801131c <_fstat_r+0x20>)
 8011300:	2300      	movs	r3, #0
 8011302:	4604      	mov	r4, r0
 8011304:	4608      	mov	r0, r1
 8011306:	4611      	mov	r1, r2
 8011308:	602b      	str	r3, [r5, #0]
 801130a:	f7f3 fff2 	bl	80052f2 <_fstat>
 801130e:	1c43      	adds	r3, r0, #1
 8011310:	d102      	bne.n	8011318 <_fstat_r+0x1c>
 8011312:	682b      	ldr	r3, [r5, #0]
 8011314:	b103      	cbz	r3, 8011318 <_fstat_r+0x1c>
 8011316:	6023      	str	r3, [r4, #0]
 8011318:	bd38      	pop	{r3, r4, r5, pc}
 801131a:	bf00      	nop
 801131c:	200027e0 	.word	0x200027e0

08011320 <_isatty_r>:
 8011320:	b538      	push	{r3, r4, r5, lr}
 8011322:	4d06      	ldr	r5, [pc, #24]	; (801133c <_isatty_r+0x1c>)
 8011324:	2300      	movs	r3, #0
 8011326:	4604      	mov	r4, r0
 8011328:	4608      	mov	r0, r1
 801132a:	602b      	str	r3, [r5, #0]
 801132c:	f7f3 fff1 	bl	8005312 <_isatty>
 8011330:	1c43      	adds	r3, r0, #1
 8011332:	d102      	bne.n	801133a <_isatty_r+0x1a>
 8011334:	682b      	ldr	r3, [r5, #0]
 8011336:	b103      	cbz	r3, 801133a <_isatty_r+0x1a>
 8011338:	6023      	str	r3, [r4, #0]
 801133a:	bd38      	pop	{r3, r4, r5, pc}
 801133c:	200027e0 	.word	0x200027e0

08011340 <memmove>:
 8011340:	4288      	cmp	r0, r1
 8011342:	b510      	push	{r4, lr}
 8011344:	eb01 0402 	add.w	r4, r1, r2
 8011348:	d902      	bls.n	8011350 <memmove+0x10>
 801134a:	4284      	cmp	r4, r0
 801134c:	4623      	mov	r3, r4
 801134e:	d807      	bhi.n	8011360 <memmove+0x20>
 8011350:	1e43      	subs	r3, r0, #1
 8011352:	42a1      	cmp	r1, r4
 8011354:	d008      	beq.n	8011368 <memmove+0x28>
 8011356:	f811 2b01 	ldrb.w	r2, [r1], #1
 801135a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801135e:	e7f8      	b.n	8011352 <memmove+0x12>
 8011360:	4402      	add	r2, r0
 8011362:	4601      	mov	r1, r0
 8011364:	428a      	cmp	r2, r1
 8011366:	d100      	bne.n	801136a <memmove+0x2a>
 8011368:	bd10      	pop	{r4, pc}
 801136a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801136e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011372:	e7f7      	b.n	8011364 <memmove+0x24>

08011374 <_realloc_r>:
 8011374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011378:	4680      	mov	r8, r0
 801137a:	4614      	mov	r4, r2
 801137c:	460e      	mov	r6, r1
 801137e:	b921      	cbnz	r1, 801138a <_realloc_r+0x16>
 8011380:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011384:	4611      	mov	r1, r2
 8011386:	f7fb bcd1 	b.w	800cd2c <_malloc_r>
 801138a:	b92a      	cbnz	r2, 8011398 <_realloc_r+0x24>
 801138c:	f7fb fc62 	bl	800cc54 <_free_r>
 8011390:	4625      	mov	r5, r4
 8011392:	4628      	mov	r0, r5
 8011394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011398:	f000 f97b 	bl	8011692 <_malloc_usable_size_r>
 801139c:	4284      	cmp	r4, r0
 801139e:	4607      	mov	r7, r0
 80113a0:	d802      	bhi.n	80113a8 <_realloc_r+0x34>
 80113a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80113a6:	d812      	bhi.n	80113ce <_realloc_r+0x5a>
 80113a8:	4621      	mov	r1, r4
 80113aa:	4640      	mov	r0, r8
 80113ac:	f7fb fcbe 	bl	800cd2c <_malloc_r>
 80113b0:	4605      	mov	r5, r0
 80113b2:	2800      	cmp	r0, #0
 80113b4:	d0ed      	beq.n	8011392 <_realloc_r+0x1e>
 80113b6:	42bc      	cmp	r4, r7
 80113b8:	4622      	mov	r2, r4
 80113ba:	4631      	mov	r1, r6
 80113bc:	bf28      	it	cs
 80113be:	463a      	movcs	r2, r7
 80113c0:	f7fb fc32 	bl	800cc28 <memcpy>
 80113c4:	4631      	mov	r1, r6
 80113c6:	4640      	mov	r0, r8
 80113c8:	f7fb fc44 	bl	800cc54 <_free_r>
 80113cc:	e7e1      	b.n	8011392 <_realloc_r+0x1e>
 80113ce:	4635      	mov	r5, r6
 80113d0:	e7df      	b.n	8011392 <_realloc_r+0x1e>

080113d2 <__sfputc_r>:
 80113d2:	6893      	ldr	r3, [r2, #8]
 80113d4:	3b01      	subs	r3, #1
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	b410      	push	{r4}
 80113da:	6093      	str	r3, [r2, #8]
 80113dc:	da08      	bge.n	80113f0 <__sfputc_r+0x1e>
 80113de:	6994      	ldr	r4, [r2, #24]
 80113e0:	42a3      	cmp	r3, r4
 80113e2:	db01      	blt.n	80113e8 <__sfputc_r+0x16>
 80113e4:	290a      	cmp	r1, #10
 80113e6:	d103      	bne.n	80113f0 <__sfputc_r+0x1e>
 80113e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80113ec:	f7fd bbd8 	b.w	800eba0 <__swbuf_r>
 80113f0:	6813      	ldr	r3, [r2, #0]
 80113f2:	1c58      	adds	r0, r3, #1
 80113f4:	6010      	str	r0, [r2, #0]
 80113f6:	7019      	strb	r1, [r3, #0]
 80113f8:	4608      	mov	r0, r1
 80113fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80113fe:	4770      	bx	lr

08011400 <__sfputs_r>:
 8011400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011402:	4606      	mov	r6, r0
 8011404:	460f      	mov	r7, r1
 8011406:	4614      	mov	r4, r2
 8011408:	18d5      	adds	r5, r2, r3
 801140a:	42ac      	cmp	r4, r5
 801140c:	d101      	bne.n	8011412 <__sfputs_r+0x12>
 801140e:	2000      	movs	r0, #0
 8011410:	e007      	b.n	8011422 <__sfputs_r+0x22>
 8011412:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011416:	463a      	mov	r2, r7
 8011418:	4630      	mov	r0, r6
 801141a:	f7ff ffda 	bl	80113d2 <__sfputc_r>
 801141e:	1c43      	adds	r3, r0, #1
 8011420:	d1f3      	bne.n	801140a <__sfputs_r+0xa>
 8011422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011424 <_vfiprintf_r>:
 8011424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011428:	460d      	mov	r5, r1
 801142a:	b09d      	sub	sp, #116	; 0x74
 801142c:	4614      	mov	r4, r2
 801142e:	4698      	mov	r8, r3
 8011430:	4606      	mov	r6, r0
 8011432:	b118      	cbz	r0, 801143c <_vfiprintf_r+0x18>
 8011434:	6983      	ldr	r3, [r0, #24]
 8011436:	b90b      	cbnz	r3, 801143c <_vfiprintf_r+0x18>
 8011438:	f7fe fc2a 	bl	800fc90 <__sinit>
 801143c:	4b89      	ldr	r3, [pc, #548]	; (8011664 <_vfiprintf_r+0x240>)
 801143e:	429d      	cmp	r5, r3
 8011440:	d11b      	bne.n	801147a <_vfiprintf_r+0x56>
 8011442:	6875      	ldr	r5, [r6, #4]
 8011444:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011446:	07d9      	lsls	r1, r3, #31
 8011448:	d405      	bmi.n	8011456 <_vfiprintf_r+0x32>
 801144a:	89ab      	ldrh	r3, [r5, #12]
 801144c:	059a      	lsls	r2, r3, #22
 801144e:	d402      	bmi.n	8011456 <_vfiprintf_r+0x32>
 8011450:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011452:	f7ff f82e 	bl	80104b2 <__retarget_lock_acquire_recursive>
 8011456:	89ab      	ldrh	r3, [r5, #12]
 8011458:	071b      	lsls	r3, r3, #28
 801145a:	d501      	bpl.n	8011460 <_vfiprintf_r+0x3c>
 801145c:	692b      	ldr	r3, [r5, #16]
 801145e:	b9eb      	cbnz	r3, 801149c <_vfiprintf_r+0x78>
 8011460:	4629      	mov	r1, r5
 8011462:	4630      	mov	r0, r6
 8011464:	f7fd fc00 	bl	800ec68 <__swsetup_r>
 8011468:	b1c0      	cbz	r0, 801149c <_vfiprintf_r+0x78>
 801146a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801146c:	07dc      	lsls	r4, r3, #31
 801146e:	d50e      	bpl.n	801148e <_vfiprintf_r+0x6a>
 8011470:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011474:	b01d      	add	sp, #116	; 0x74
 8011476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801147a:	4b7b      	ldr	r3, [pc, #492]	; (8011668 <_vfiprintf_r+0x244>)
 801147c:	429d      	cmp	r5, r3
 801147e:	d101      	bne.n	8011484 <_vfiprintf_r+0x60>
 8011480:	68b5      	ldr	r5, [r6, #8]
 8011482:	e7df      	b.n	8011444 <_vfiprintf_r+0x20>
 8011484:	4b79      	ldr	r3, [pc, #484]	; (801166c <_vfiprintf_r+0x248>)
 8011486:	429d      	cmp	r5, r3
 8011488:	bf08      	it	eq
 801148a:	68f5      	ldreq	r5, [r6, #12]
 801148c:	e7da      	b.n	8011444 <_vfiprintf_r+0x20>
 801148e:	89ab      	ldrh	r3, [r5, #12]
 8011490:	0598      	lsls	r0, r3, #22
 8011492:	d4ed      	bmi.n	8011470 <_vfiprintf_r+0x4c>
 8011494:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011496:	f7ff f80d 	bl	80104b4 <__retarget_lock_release_recursive>
 801149a:	e7e9      	b.n	8011470 <_vfiprintf_r+0x4c>
 801149c:	2300      	movs	r3, #0
 801149e:	9309      	str	r3, [sp, #36]	; 0x24
 80114a0:	2320      	movs	r3, #32
 80114a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80114a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80114aa:	2330      	movs	r3, #48	; 0x30
 80114ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011670 <_vfiprintf_r+0x24c>
 80114b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80114b4:	f04f 0901 	mov.w	r9, #1
 80114b8:	4623      	mov	r3, r4
 80114ba:	469a      	mov	sl, r3
 80114bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80114c0:	b10a      	cbz	r2, 80114c6 <_vfiprintf_r+0xa2>
 80114c2:	2a25      	cmp	r2, #37	; 0x25
 80114c4:	d1f9      	bne.n	80114ba <_vfiprintf_r+0x96>
 80114c6:	ebba 0b04 	subs.w	fp, sl, r4
 80114ca:	d00b      	beq.n	80114e4 <_vfiprintf_r+0xc0>
 80114cc:	465b      	mov	r3, fp
 80114ce:	4622      	mov	r2, r4
 80114d0:	4629      	mov	r1, r5
 80114d2:	4630      	mov	r0, r6
 80114d4:	f7ff ff94 	bl	8011400 <__sfputs_r>
 80114d8:	3001      	adds	r0, #1
 80114da:	f000 80aa 	beq.w	8011632 <_vfiprintf_r+0x20e>
 80114de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80114e0:	445a      	add	r2, fp
 80114e2:	9209      	str	r2, [sp, #36]	; 0x24
 80114e4:	f89a 3000 	ldrb.w	r3, [sl]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	f000 80a2 	beq.w	8011632 <_vfiprintf_r+0x20e>
 80114ee:	2300      	movs	r3, #0
 80114f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80114f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80114f8:	f10a 0a01 	add.w	sl, sl, #1
 80114fc:	9304      	str	r3, [sp, #16]
 80114fe:	9307      	str	r3, [sp, #28]
 8011500:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011504:	931a      	str	r3, [sp, #104]	; 0x68
 8011506:	4654      	mov	r4, sl
 8011508:	2205      	movs	r2, #5
 801150a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801150e:	4858      	ldr	r0, [pc, #352]	; (8011670 <_vfiprintf_r+0x24c>)
 8011510:	f7ee fe76 	bl	8000200 <memchr>
 8011514:	9a04      	ldr	r2, [sp, #16]
 8011516:	b9d8      	cbnz	r0, 8011550 <_vfiprintf_r+0x12c>
 8011518:	06d1      	lsls	r1, r2, #27
 801151a:	bf44      	itt	mi
 801151c:	2320      	movmi	r3, #32
 801151e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011522:	0713      	lsls	r3, r2, #28
 8011524:	bf44      	itt	mi
 8011526:	232b      	movmi	r3, #43	; 0x2b
 8011528:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801152c:	f89a 3000 	ldrb.w	r3, [sl]
 8011530:	2b2a      	cmp	r3, #42	; 0x2a
 8011532:	d015      	beq.n	8011560 <_vfiprintf_r+0x13c>
 8011534:	9a07      	ldr	r2, [sp, #28]
 8011536:	4654      	mov	r4, sl
 8011538:	2000      	movs	r0, #0
 801153a:	f04f 0c0a 	mov.w	ip, #10
 801153e:	4621      	mov	r1, r4
 8011540:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011544:	3b30      	subs	r3, #48	; 0x30
 8011546:	2b09      	cmp	r3, #9
 8011548:	d94e      	bls.n	80115e8 <_vfiprintf_r+0x1c4>
 801154a:	b1b0      	cbz	r0, 801157a <_vfiprintf_r+0x156>
 801154c:	9207      	str	r2, [sp, #28]
 801154e:	e014      	b.n	801157a <_vfiprintf_r+0x156>
 8011550:	eba0 0308 	sub.w	r3, r0, r8
 8011554:	fa09 f303 	lsl.w	r3, r9, r3
 8011558:	4313      	orrs	r3, r2
 801155a:	9304      	str	r3, [sp, #16]
 801155c:	46a2      	mov	sl, r4
 801155e:	e7d2      	b.n	8011506 <_vfiprintf_r+0xe2>
 8011560:	9b03      	ldr	r3, [sp, #12]
 8011562:	1d19      	adds	r1, r3, #4
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	9103      	str	r1, [sp, #12]
 8011568:	2b00      	cmp	r3, #0
 801156a:	bfbb      	ittet	lt
 801156c:	425b      	neglt	r3, r3
 801156e:	f042 0202 	orrlt.w	r2, r2, #2
 8011572:	9307      	strge	r3, [sp, #28]
 8011574:	9307      	strlt	r3, [sp, #28]
 8011576:	bfb8      	it	lt
 8011578:	9204      	strlt	r2, [sp, #16]
 801157a:	7823      	ldrb	r3, [r4, #0]
 801157c:	2b2e      	cmp	r3, #46	; 0x2e
 801157e:	d10c      	bne.n	801159a <_vfiprintf_r+0x176>
 8011580:	7863      	ldrb	r3, [r4, #1]
 8011582:	2b2a      	cmp	r3, #42	; 0x2a
 8011584:	d135      	bne.n	80115f2 <_vfiprintf_r+0x1ce>
 8011586:	9b03      	ldr	r3, [sp, #12]
 8011588:	1d1a      	adds	r2, r3, #4
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	9203      	str	r2, [sp, #12]
 801158e:	2b00      	cmp	r3, #0
 8011590:	bfb8      	it	lt
 8011592:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011596:	3402      	adds	r4, #2
 8011598:	9305      	str	r3, [sp, #20]
 801159a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011680 <_vfiprintf_r+0x25c>
 801159e:	7821      	ldrb	r1, [r4, #0]
 80115a0:	2203      	movs	r2, #3
 80115a2:	4650      	mov	r0, sl
 80115a4:	f7ee fe2c 	bl	8000200 <memchr>
 80115a8:	b140      	cbz	r0, 80115bc <_vfiprintf_r+0x198>
 80115aa:	2340      	movs	r3, #64	; 0x40
 80115ac:	eba0 000a 	sub.w	r0, r0, sl
 80115b0:	fa03 f000 	lsl.w	r0, r3, r0
 80115b4:	9b04      	ldr	r3, [sp, #16]
 80115b6:	4303      	orrs	r3, r0
 80115b8:	3401      	adds	r4, #1
 80115ba:	9304      	str	r3, [sp, #16]
 80115bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115c0:	482c      	ldr	r0, [pc, #176]	; (8011674 <_vfiprintf_r+0x250>)
 80115c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80115c6:	2206      	movs	r2, #6
 80115c8:	f7ee fe1a 	bl	8000200 <memchr>
 80115cc:	2800      	cmp	r0, #0
 80115ce:	d03f      	beq.n	8011650 <_vfiprintf_r+0x22c>
 80115d0:	4b29      	ldr	r3, [pc, #164]	; (8011678 <_vfiprintf_r+0x254>)
 80115d2:	bb1b      	cbnz	r3, 801161c <_vfiprintf_r+0x1f8>
 80115d4:	9b03      	ldr	r3, [sp, #12]
 80115d6:	3307      	adds	r3, #7
 80115d8:	f023 0307 	bic.w	r3, r3, #7
 80115dc:	3308      	adds	r3, #8
 80115de:	9303      	str	r3, [sp, #12]
 80115e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115e2:	443b      	add	r3, r7
 80115e4:	9309      	str	r3, [sp, #36]	; 0x24
 80115e6:	e767      	b.n	80114b8 <_vfiprintf_r+0x94>
 80115e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80115ec:	460c      	mov	r4, r1
 80115ee:	2001      	movs	r0, #1
 80115f0:	e7a5      	b.n	801153e <_vfiprintf_r+0x11a>
 80115f2:	2300      	movs	r3, #0
 80115f4:	3401      	adds	r4, #1
 80115f6:	9305      	str	r3, [sp, #20]
 80115f8:	4619      	mov	r1, r3
 80115fa:	f04f 0c0a 	mov.w	ip, #10
 80115fe:	4620      	mov	r0, r4
 8011600:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011604:	3a30      	subs	r2, #48	; 0x30
 8011606:	2a09      	cmp	r2, #9
 8011608:	d903      	bls.n	8011612 <_vfiprintf_r+0x1ee>
 801160a:	2b00      	cmp	r3, #0
 801160c:	d0c5      	beq.n	801159a <_vfiprintf_r+0x176>
 801160e:	9105      	str	r1, [sp, #20]
 8011610:	e7c3      	b.n	801159a <_vfiprintf_r+0x176>
 8011612:	fb0c 2101 	mla	r1, ip, r1, r2
 8011616:	4604      	mov	r4, r0
 8011618:	2301      	movs	r3, #1
 801161a:	e7f0      	b.n	80115fe <_vfiprintf_r+0x1da>
 801161c:	ab03      	add	r3, sp, #12
 801161e:	9300      	str	r3, [sp, #0]
 8011620:	462a      	mov	r2, r5
 8011622:	4b16      	ldr	r3, [pc, #88]	; (801167c <_vfiprintf_r+0x258>)
 8011624:	a904      	add	r1, sp, #16
 8011626:	4630      	mov	r0, r6
 8011628:	f7fb fc94 	bl	800cf54 <_printf_float>
 801162c:	4607      	mov	r7, r0
 801162e:	1c78      	adds	r0, r7, #1
 8011630:	d1d6      	bne.n	80115e0 <_vfiprintf_r+0x1bc>
 8011632:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011634:	07d9      	lsls	r1, r3, #31
 8011636:	d405      	bmi.n	8011644 <_vfiprintf_r+0x220>
 8011638:	89ab      	ldrh	r3, [r5, #12]
 801163a:	059a      	lsls	r2, r3, #22
 801163c:	d402      	bmi.n	8011644 <_vfiprintf_r+0x220>
 801163e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011640:	f7fe ff38 	bl	80104b4 <__retarget_lock_release_recursive>
 8011644:	89ab      	ldrh	r3, [r5, #12]
 8011646:	065b      	lsls	r3, r3, #25
 8011648:	f53f af12 	bmi.w	8011470 <_vfiprintf_r+0x4c>
 801164c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801164e:	e711      	b.n	8011474 <_vfiprintf_r+0x50>
 8011650:	ab03      	add	r3, sp, #12
 8011652:	9300      	str	r3, [sp, #0]
 8011654:	462a      	mov	r2, r5
 8011656:	4b09      	ldr	r3, [pc, #36]	; (801167c <_vfiprintf_r+0x258>)
 8011658:	a904      	add	r1, sp, #16
 801165a:	4630      	mov	r0, r6
 801165c:	f7fb ff1e 	bl	800d49c <_printf_i>
 8011660:	e7e4      	b.n	801162c <_vfiprintf_r+0x208>
 8011662:	bf00      	nop
 8011664:	08013828 	.word	0x08013828
 8011668:	08013848 	.word	0x08013848
 801166c:	08013808 	.word	0x08013808
 8011670:	08013a3c 	.word	0x08013a3c
 8011674:	08013a46 	.word	0x08013a46
 8011678:	0800cf55 	.word	0x0800cf55
 801167c:	08011401 	.word	0x08011401
 8011680:	08013a42 	.word	0x08013a42

08011684 <abort>:
 8011684:	b508      	push	{r3, lr}
 8011686:	2006      	movs	r0, #6
 8011688:	f000 f834 	bl	80116f4 <raise>
 801168c:	2001      	movs	r0, #1
 801168e:	f7f3 fde1 	bl	8005254 <_exit>

08011692 <_malloc_usable_size_r>:
 8011692:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011696:	1f18      	subs	r0, r3, #4
 8011698:	2b00      	cmp	r3, #0
 801169a:	bfbc      	itt	lt
 801169c:	580b      	ldrlt	r3, [r1, r0]
 801169e:	18c0      	addlt	r0, r0, r3
 80116a0:	4770      	bx	lr

080116a2 <_raise_r>:
 80116a2:	291f      	cmp	r1, #31
 80116a4:	b538      	push	{r3, r4, r5, lr}
 80116a6:	4604      	mov	r4, r0
 80116a8:	460d      	mov	r5, r1
 80116aa:	d904      	bls.n	80116b6 <_raise_r+0x14>
 80116ac:	2316      	movs	r3, #22
 80116ae:	6003      	str	r3, [r0, #0]
 80116b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80116b4:	bd38      	pop	{r3, r4, r5, pc}
 80116b6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80116b8:	b112      	cbz	r2, 80116c0 <_raise_r+0x1e>
 80116ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80116be:	b94b      	cbnz	r3, 80116d4 <_raise_r+0x32>
 80116c0:	4620      	mov	r0, r4
 80116c2:	f000 f831 	bl	8011728 <_getpid_r>
 80116c6:	462a      	mov	r2, r5
 80116c8:	4601      	mov	r1, r0
 80116ca:	4620      	mov	r0, r4
 80116cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80116d0:	f000 b818 	b.w	8011704 <_kill_r>
 80116d4:	2b01      	cmp	r3, #1
 80116d6:	d00a      	beq.n	80116ee <_raise_r+0x4c>
 80116d8:	1c59      	adds	r1, r3, #1
 80116da:	d103      	bne.n	80116e4 <_raise_r+0x42>
 80116dc:	2316      	movs	r3, #22
 80116de:	6003      	str	r3, [r0, #0]
 80116e0:	2001      	movs	r0, #1
 80116e2:	e7e7      	b.n	80116b4 <_raise_r+0x12>
 80116e4:	2400      	movs	r4, #0
 80116e6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80116ea:	4628      	mov	r0, r5
 80116ec:	4798      	blx	r3
 80116ee:	2000      	movs	r0, #0
 80116f0:	e7e0      	b.n	80116b4 <_raise_r+0x12>
	...

080116f4 <raise>:
 80116f4:	4b02      	ldr	r3, [pc, #8]	; (8011700 <raise+0xc>)
 80116f6:	4601      	mov	r1, r0
 80116f8:	6818      	ldr	r0, [r3, #0]
 80116fa:	f7ff bfd2 	b.w	80116a2 <_raise_r>
 80116fe:	bf00      	nop
 8011700:	20000178 	.word	0x20000178

08011704 <_kill_r>:
 8011704:	b538      	push	{r3, r4, r5, lr}
 8011706:	4d07      	ldr	r5, [pc, #28]	; (8011724 <_kill_r+0x20>)
 8011708:	2300      	movs	r3, #0
 801170a:	4604      	mov	r4, r0
 801170c:	4608      	mov	r0, r1
 801170e:	4611      	mov	r1, r2
 8011710:	602b      	str	r3, [r5, #0]
 8011712:	f7f3 fd8f 	bl	8005234 <_kill>
 8011716:	1c43      	adds	r3, r0, #1
 8011718:	d102      	bne.n	8011720 <_kill_r+0x1c>
 801171a:	682b      	ldr	r3, [r5, #0]
 801171c:	b103      	cbz	r3, 8011720 <_kill_r+0x1c>
 801171e:	6023      	str	r3, [r4, #0]
 8011720:	bd38      	pop	{r3, r4, r5, pc}
 8011722:	bf00      	nop
 8011724:	200027e0 	.word	0x200027e0

08011728 <_getpid_r>:
 8011728:	f7f3 bd7c 	b.w	8005224 <_getpid>

0801172c <_init>:
 801172c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801172e:	bf00      	nop
 8011730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011732:	bc08      	pop	{r3}
 8011734:	469e      	mov	lr, r3
 8011736:	4770      	bx	lr

08011738 <_fini>:
 8011738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801173a:	bf00      	nop
 801173c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801173e:	bc08      	pop	{r3}
 8011740:	469e      	mov	lr, r3
 8011742:	4770      	bx	lr
