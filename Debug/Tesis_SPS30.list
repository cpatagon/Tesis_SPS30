
Tesis_SPS30.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1d4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cac  0800b388  0800b388  0001b388  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c034  0800c034  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800c034  0800c034  0001c034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c03c  0800c03c  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c03c  0800c03c  0001c03c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c040  0800c040  0001c040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800c044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020210  2**0
                  CONTENTS
 10 .bss          00001da0  20000210  20000210  00020210  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001fb0  20001fb0  00020210  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012fbe  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031aa  00000000  00000000  000331fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df0  00000000  00000000  000363a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c98  00000000  00000000  00037198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000260b5  00000000  00000000  00037e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016bbf  00000000  00000000  0005dee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd5e0  00000000  00000000  00074aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00152084  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d88  00000000  00000000  001520d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000210 	.word	0x20000210
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b36c 	.word	0x0800b36c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000214 	.word	0x20000214
 80001ec:	0800b36c 	.word	0x0800b36c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <buffer_circular_agregar>:
 * @brief Añade una medición al buffer circular especificado
 *
 * @param buffer Buffer donde almacenar la medición
 * @param medicion Medición a almacenar
 */
static void buffer_circular_agregar(BufferCircular* buffer, const MedicionMP* medicion) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
    uint32_t indice;

    if (buffer->cantidad < buffer->capacidad) {
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	68da      	ldr	r2, [r3, #12]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	429a      	cmp	r2, r3
 800102c:	d212      	bcs.n	8001054 <buffer_circular_agregar+0x3c>
        // El buffer aún no está lleno
        indice = (buffer->inicio + buffer->cantidad) % buffer->capacidad;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	689a      	ldr	r2, [r3, #8]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	4413      	add	r3, r2
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	6852      	ldr	r2, [r2, #4]
 800103c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001040:	fb01 f202 	mul.w	r2, r1, r2
 8001044:	1a9b      	subs	r3, r3, r2
 8001046:	60fb      	str	r3, [r7, #12]
        buffer->cantidad++;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	1c5a      	adds	r2, r3, #1
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	e00e      	b.n	8001072 <buffer_circular_agregar+0x5a>
    } else {
        // El buffer está lleno, sobrescribir el elemento más antiguo
        indice = buffer->inicio;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	60fb      	str	r3, [r7, #12]
        buffer->inicio = (buffer->inicio + 1) % buffer->capacidad;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	3301      	adds	r3, #1
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	6852      	ldr	r2, [r2, #4]
 8001064:	fbb3 f1f2 	udiv	r1, r3, r2
 8001068:	fb01 f202 	mul.w	r2, r1, r2
 800106c:	1a9a      	subs	r2, r3, r2
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	609a      	str	r2, [r3, #8]
    }

    // Copiar la medición al buffer
    memcpy(&buffer->datos[indice], medicion, sizeof(MedicionMP));
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6819      	ldr	r1, [r3, #0]
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	4613      	mov	r3, r2
 800107a:	011b      	lsls	r3, r3, #4
 800107c:	1a9b      	subs	r3, r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	440b      	add	r3, r1
 8001082:	223c      	movs	r2, #60	; 0x3c
 8001084:	6839      	ldr	r1, [r7, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f005 fc18 	bl	80068bc <memcpy>
}
 800108c:	bf00      	nop
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <data_logger_init>:

/* === Public function implementation ========================================================== */

bool data_logger_init(void) {
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
    // Inicializar buffers
    memset(buffer_alta_frec, 0, sizeof(buffer_alta_frec));
 8001098:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800109c:	2100      	movs	r1, #0
 800109e:	4812      	ldr	r0, [pc, #72]	; (80010e8 <data_logger_init+0x54>)
 80010a0:	f005 fc1a 	bl	80068d8 <memset>
    memset(buffer_horario, 0, sizeof(buffer_horario));
 80010a4:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 80010a8:	2100      	movs	r1, #0
 80010aa:	4810      	ldr	r0, [pc, #64]	; (80010ec <data_logger_init+0x58>)
 80010ac:	f005 fc14 	bl	80068d8 <memset>
    memset(buffer_diario, 0, sizeof(buffer_diario));
 80010b0:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80010b4:	2100      	movs	r1, #0
 80010b6:	480e      	ldr	r0, [pc, #56]	; (80010f0 <data_logger_init+0x5c>)
 80010b8:	f005 fc0e 	bl	80068d8 <memset>

    buffer_alta_frecuencia.inicio = 0;
 80010bc:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <data_logger_init+0x60>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
    buffer_alta_frecuencia.cantidad = 0;
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <data_logger_init+0x60>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	60da      	str	r2, [r3, #12]

    buffer_hora.inicio = 0;
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <data_logger_init+0x64>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
    buffer_hora.cantidad = 0;
 80010ce:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <data_logger_init+0x64>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	60da      	str	r2, [r3, #12]

    buffer_dia.inicio = 0;
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <data_logger_init+0x68>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
    buffer_dia.cantidad = 0;
 80010da:	4b08      	ldr	r3, [pc, #32]	; (80010fc <data_logger_init+0x68>)
 80010dc:	2200      	movs	r2, #0
 80010de:	60da      	str	r2, [r3, #12]

    return true;
 80010e0:	2301      	movs	r3, #1
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	2000022c 	.word	0x2000022c
 80010ec:	2000103c 	.word	0x2000103c
 80010f0:	200015dc 	.word	0x200015dc
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000010 	.word	0x20000010
 80010fc:	20000020 	.word	0x20000020

08001100 <data_logger_store_measurement>:

bool data_logger_store_measurement(uint8_t sensor_id, ConcentracionesPM valores,
                                   float temperatura, float humedad) {
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b0a1      	sub	sp, #132	; 0x84
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	eeb0 6a40 	vmov.f32	s12, s0
 800110c:	eef0 6a60 	vmov.f32	s13, s1
 8001110:	eeb0 7a41 	vmov.f32	s14, s2
 8001114:	eef0 7a61 	vmov.f32	s15, s3
 8001118:	ed87 2a02 	vstr	s4, [r7, #8]
 800111c:	edc7 2a01 	vstr	s5, [r7, #4]
 8001120:	77fb      	strb	r3, [r7, #31]
 8001122:	ed87 6a03 	vstr	s12, [r7, #12]
 8001126:	edc7 6a04 	vstr	s13, [r7, #16]
 800112a:	ed87 7a05 	vstr	s14, [r7, #20]
 800112e:	edc7 7a06 	vstr	s15, [r7, #24]
    char timestamp[32];
    MedicionMP nueva_medicion;

    // Obtener timestamp actual
    time_rtc_GetFormattedDateTime(timestamp, sizeof(timestamp));
 8001132:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001136:	2120      	movs	r1, #32
 8001138:	4618      	mov	r0, r3
 800113a:	f001 fa03 	bl	8002544 <time_rtc_GetFormattedDateTime>

    // Completar estructura de medición
    strcpy(nueva_medicion.timestamp, timestamp);
 800113e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f006 fb5a 	bl	8007802 <strcpy>
    nueva_medicion.sensor_id = sensor_id;
 800114e:	7ffb      	ldrb	r3, [r7, #31]
 8001150:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    nueva_medicion.valores = valores;
 8001154:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800115e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    nueva_medicion.temperatura = temperatura;
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	65bb      	str	r3, [r7, #88]	; 0x58
    nueva_medicion.humedad = humedad;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	65fb      	str	r3, [r7, #92]	; 0x5c

    // Almacenar en buffer de alta frecuencia
    buffer_circular_agregar(&buffer_alta_frecuencia, &nueva_medicion);
 800116a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116e:	4619      	mov	r1, r3
 8001170:	4803      	ldr	r0, [pc, #12]	; (8001180 <data_logger_store_measurement+0x80>)
 8001172:	f7ff ff51 	bl	8001018 <buffer_circular_agregar>

    // Actualizar buffers de hora y día según corresponda
    // (implementación pendiente)

    return true;
 8001176:	2301      	movs	r3, #1
}
 8001178:	4618      	mov	r0, r3
 800117a:	3784      	adds	r7, #132	; 0x84
 800117c:	46bd      	mov	sp, r7
 800117e:	bd90      	pop	{r4, r7, pc}
 8001180:	20000000 	.word	0x20000000

08001184 <data_logger_get_average_pm25>:

float data_logger_get_average_pm25(uint8_t sensor_id, uint32_t num_mediciones) {
 8001184:	b480      	push	{r7}
 8001186:	b087      	sub	sp, #28
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	71fb      	strb	r3, [r7, #7]
    float suma = 0.0f;
 8001190:	f04f 0300 	mov.w	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
    uint32_t contador = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]

    // Limitar la cantidad de mediciones a usar
    if (num_mediciones > buffer_alta_frecuencia.cantidad) {
 800119a:	4b30      	ldr	r3, [pc, #192]	; (800125c <data_logger_get_average_pm25+0xd8>)
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d902      	bls.n	80011aa <data_logger_get_average_pm25+0x26>
        num_mediciones = buffer_alta_frecuencia.cantidad;
 80011a4:	4b2d      	ldr	r3, [pc, #180]	; (800125c <data_logger_get_average_pm25+0xd8>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	603b      	str	r3, [r7, #0]
    }

    // Si no hay mediciones, retornar 0
    if (num_mediciones == 0) {
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d102      	bne.n	80011b6 <data_logger_get_average_pm25+0x32>
        return 0.0f;
 80011b0:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8001260 <data_logger_get_average_pm25+0xdc>
 80011b4:	e04b      	b.n	800124e <data_logger_get_average_pm25+0xca>
    }

    // Calcular promedio de las últimas 'num_mediciones'
    for (uint32_t i = 0; i < num_mediciones; i++) {
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	e035      	b.n	8001228 <data_logger_get_average_pm25+0xa4>
        uint32_t indice = (buffer_alta_frecuencia.inicio +
 80011bc:	4b27      	ldr	r3, [pc, #156]	; (800125c <data_logger_get_average_pm25+0xd8>)
 80011be:	689a      	ldr	r2, [r3, #8]
                         buffer_alta_frecuencia.cantidad - i - 1) %
 80011c0:	4b26      	ldr	r3, [pc, #152]	; (800125c <data_logger_get_average_pm25+0xd8>)
 80011c2:	68db      	ldr	r3, [r3, #12]
        uint32_t indice = (buffer_alta_frecuencia.inicio +
 80011c4:	441a      	add	r2, r3
                         buffer_alta_frecuencia.cantidad - i - 1) %
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	3b01      	subs	r3, #1
                         buffer_alta_frecuencia.capacidad;
 80011cc:	4a23      	ldr	r2, [pc, #140]	; (800125c <data_logger_get_average_pm25+0xd8>)
 80011ce:	6852      	ldr	r2, [r2, #4]
        uint32_t indice = (buffer_alta_frecuencia.inicio +
 80011d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80011d4:	fb01 f202 	mul.w	r2, r1, r2
 80011d8:	1a9b      	subs	r3, r3, r2
 80011da:	60bb      	str	r3, [r7, #8]

        // Filtrar por sensor_id si es necesario
        if (sensor_id == 0 || buffer_alta_frecuencia.datos[indice].sensor_id == sensor_id) {
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d00c      	beq.n	80011fc <data_logger_get_average_pm25+0x78>
 80011e2:	4b1e      	ldr	r3, [pc, #120]	; (800125c <data_logger_get_average_pm25+0xd8>)
 80011e4:	6819      	ldr	r1, [r3, #0]
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	4613      	mov	r3, r2
 80011ea:	011b      	lsls	r3, r3, #4
 80011ec:	1a9b      	subs	r3, r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	440b      	add	r3, r1
 80011f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011f6:	79fa      	ldrb	r2, [r7, #7]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d112      	bne.n	8001222 <data_logger_get_average_pm25+0x9e>
            suma += buffer_alta_frecuencia.datos[indice].valores.pm2_5;
 80011fc:	4b17      	ldr	r3, [pc, #92]	; (800125c <data_logger_get_average_pm25+0xd8>)
 80011fe:	6819      	ldr	r1, [r3, #0]
 8001200:	68ba      	ldr	r2, [r7, #8]
 8001202:	4613      	mov	r3, r2
 8001204:	011b      	lsls	r3, r3, #4
 8001206:	1a9b      	subs	r3, r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	440b      	add	r3, r1
 800120c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001210:	ed97 7a05 	vldr	s14, [r7, #20]
 8001214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001218:	edc7 7a05 	vstr	s15, [r7, #20]
            contador++;
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	3301      	adds	r3, #1
 8001220:	613b      	str	r3, [r7, #16]
    for (uint32_t i = 0; i < num_mediciones; i++) {
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	3301      	adds	r3, #1
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fa      	ldr	r2, [r7, #12]
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	429a      	cmp	r2, r3
 800122e:	d3c5      	bcc.n	80011bc <data_logger_get_average_pm25+0x38>
        }
    }

    // Retornar promedio o 0 si no hay datos
    return (contador > 0) ? (suma / contador) : 0.0f;
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d009      	beq.n	800124a <data_logger_get_average_pm25+0xc6>
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	ee07 3a90 	vmov	s15, r3
 800123c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001240:	edd7 6a05 	vldr	s13, [r7, #20]
 8001244:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001248:	e001      	b.n	800124e <data_logger_get_average_pm25+0xca>
 800124a:	eddf 7a05 	vldr	s15, [pc, #20]	; 8001260 <data_logger_get_average_pm25+0xdc>
}
 800124e:	eeb0 0a67 	vmov.f32	s0, s15
 8001252:	371c      	adds	r7, #28
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	20000000 	.word	0x20000000
 8001260:	00000000 	.word	0x00000000

08001264 <data_logger_print_summary>:

void data_logger_print_summary(UART_Printing* uart) {
 8001264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001266:	b0cd      	sub	sp, #308	; 0x134
 8001268:	af06      	add	r7, sp, #24
 800126a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800126e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001272:	6018      	str	r0, [r3, #0]
    char buffer[256];

    // Imprimir encabezado
    snprintf(buffer, sizeof(buffer),
 8001274:	4b4a      	ldr	r3, [pc, #296]	; (80013a0 <data_logger_print_summary+0x13c>)
 8001276:	68de      	ldr	r6, [r3, #12]
 8001278:	4b49      	ldr	r3, [pc, #292]	; (80013a0 <data_logger_print_summary+0x13c>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	4a49      	ldr	r2, [pc, #292]	; (80013a4 <data_logger_print_summary+0x140>)
 800127e:	68d2      	ldr	r2, [r2, #12]
 8001280:	4948      	ldr	r1, [pc, #288]	; (80013a4 <data_logger_print_summary+0x140>)
 8001282:	6849      	ldr	r1, [r1, #4]
 8001284:	4848      	ldr	r0, [pc, #288]	; (80013a8 <data_logger_print_summary+0x144>)
 8001286:	68c0      	ldr	r0, [r0, #12]
 8001288:	4c47      	ldr	r4, [pc, #284]	; (80013a8 <data_logger_print_summary+0x144>)
 800128a:	6864      	ldr	r4, [r4, #4]
 800128c:	f107 050c 	add.w	r5, r7, #12
 8001290:	9404      	str	r4, [sp, #16]
 8001292:	9003      	str	r0, [sp, #12]
 8001294:	9102      	str	r1, [sp, #8]
 8001296:	9201      	str	r2, [sp, #4]
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	4633      	mov	r3, r6
 800129c:	4a43      	ldr	r2, [pc, #268]	; (80013ac <data_logger_print_summary+0x148>)
 800129e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012a2:	4628      	mov	r0, r5
 80012a4:	f006 fa16 	bl	80076d4 <sniprintf>
            "Buffer diario: %lu/%lu muestras\n",
            buffer_alta_frecuencia.cantidad, buffer_alta_frecuencia.capacidad,
            buffer_hora.cantidad, buffer_hora.capacidad,
            buffer_dia.cantidad, buffer_dia.capacidad);

    uart->print(uart, buffer);
 80012a8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80012ac:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f107 010c 	add.w	r1, r7, #12
 80012b8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80012bc:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 80012c0:	6810      	ldr	r0, [r2, #0]
 80012c2:	4798      	blx	r3

    // Imprimir últimas mediciones si hay datos
    if (buffer_alta_frecuencia.cantidad > 0) {
 80012c4:	4b36      	ldr	r3, [pc, #216]	; (80013a0 <data_logger_print_summary+0x13c>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d064      	beq.n	8001396 <data_logger_print_summary+0x132>
        uart->print(uart, "\nÚltimas 3 mediciones:\n");
 80012cc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80012d0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80012dc:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 80012e0:	4933      	ldr	r1, [pc, #204]	; (80013b0 <data_logger_print_summary+0x14c>)
 80012e2:	6810      	ldr	r0, [r2, #0]
 80012e4:	4798      	blx	r3

        for (uint32_t i = 0; i < 3 && i < buffer_alta_frecuencia.cantidad; i++) {
 80012e6:	2300      	movs	r3, #0
 80012e8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80012ec:	e049      	b.n	8001382 <data_logger_print_summary+0x11e>
            uint32_t indice = (buffer_alta_frecuencia.inicio +
 80012ee:	4b2c      	ldr	r3, [pc, #176]	; (80013a0 <data_logger_print_summary+0x13c>)
 80012f0:	689a      	ldr	r2, [r3, #8]
                             buffer_alta_frecuencia.cantidad - i - 1) %
 80012f2:	4b2b      	ldr	r3, [pc, #172]	; (80013a0 <data_logger_print_summary+0x13c>)
 80012f4:	68db      	ldr	r3, [r3, #12]
            uint32_t indice = (buffer_alta_frecuencia.inicio +
 80012f6:	441a      	add	r2, r3
                             buffer_alta_frecuencia.cantidad - i - 1) %
 80012f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	3b01      	subs	r3, #1
                             buffer_alta_frecuencia.capacidad;
 8001300:	4a27      	ldr	r2, [pc, #156]	; (80013a0 <data_logger_print_summary+0x13c>)
 8001302:	6852      	ldr	r2, [r2, #4]
            uint32_t indice = (buffer_alta_frecuencia.inicio +
 8001304:	fbb3 f1f2 	udiv	r1, r3, r2
 8001308:	fb01 f202 	mul.w	r2, r1, r2
 800130c:	1a9b      	subs	r3, r3, r2
 800130e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

            MedicionMP* medicion = &buffer_alta_frecuencia.datos[indice];
 8001312:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <data_logger_print_summary+0x13c>)
 8001314:	6819      	ldr	r1, [r3, #0]
 8001316:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800131a:	4613      	mov	r3, r2
 800131c:	011b      	lsls	r3, r3, #4
 800131e:	1a9b      	subs	r3, r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	440b      	add	r3, r1
 8001324:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

            snprintf(buffer, sizeof(buffer),
                    "[%s] Sensor %d: PM2.5=%.2f ug/m3\n",
                    medicion->timestamp,
 8001328:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
                    medicion->sensor_id,
 800132c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001330:	f893 3020 	ldrb.w	r3, [r3, #32]
            snprintf(buffer, sizeof(buffer),
 8001334:	461d      	mov	r5, r3
                    medicion->valores.pm2_5);
 8001336:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800133a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            snprintf(buffer, sizeof(buffer),
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f913 	bl	8000568 <__aeabi_f2d>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	f107 000c 	add.w	r0, r7, #12
 800134a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800134e:	9500      	str	r5, [sp, #0]
 8001350:	4623      	mov	r3, r4
 8001352:	4a18      	ldr	r2, [pc, #96]	; (80013b4 <data_logger_print_summary+0x150>)
 8001354:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001358:	f006 f9bc 	bl	80076d4 <sniprintf>

            uart->print(uart, buffer);
 800135c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001360:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f107 010c 	add.w	r1, r7, #12
 800136c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001370:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8001374:	6810      	ldr	r0, [r2, #0]
 8001376:	4798      	blx	r3
        for (uint32_t i = 0; i < 3 && i < buffer_alta_frecuencia.cantidad; i++) {
 8001378:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800137c:	3301      	adds	r3, #1
 800137e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001386:	2b02      	cmp	r3, #2
 8001388:	d805      	bhi.n	8001396 <data_logger_print_summary+0x132>
 800138a:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <data_logger_print_summary+0x13c>)
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001392:	429a      	cmp	r2, r3
 8001394:	d3ab      	bcc.n	80012ee <data_logger_print_summary+0x8a>
        }
    }
}
 8001396:	bf00      	nop
 8001398:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800139c:	46bd      	mov	sp, r7
 800139e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a0:	20000000 	.word	0x20000000
 80013a4:	20000010 	.word	0x20000010
 80013a8:	20000020 	.word	0x20000020
 80013ac:	0800b388 	.word	0x0800b388
 80013b0:	0800b41c 	.word	0x0800b41c
 80013b4:	0800b438 	.word	0x0800b438

080013b8 <proceso_observador>:
#include "proceso_observador.h"
#include "time_rtc.h"
#include <stdio.h>

/* === Definición de funciones ============================================================= */
bool proceso_observador(SPS30* sensor, UART_Printing* uart, uint8_t sensor_id) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08c      	sub	sp, #48	; 0x30
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	4613      	mov	r3, r2
 80013c4:	71fb      	strb	r3, [r7, #7]
    // Obtener timestamp actual
    char datetime_buffer[32];
    time_rtc_GetFormattedDateTime(datetime_buffer, sizeof(datetime_buffer));
 80013c6:	f107 0310 	add.w	r3, r7, #16
 80013ca:	2120      	movs	r1, #32
 80013cc:	4618      	mov	r0, r3
 80013ce:	f001 f8b9 	bl	8002544 <time_rtc_GetFormattedDateTime>

    return proceso_observador_with_time(sensor, uart, sensor_id, datetime_buffer);
 80013d2:	f107 0310 	add.w	r3, r7, #16
 80013d6:	79fa      	ldrb	r2, [r7, #7]
 80013d8:	68b9      	ldr	r1, [r7, #8]
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f000 f806 	bl	80013ec <proceso_observador_with_time>
 80013e0:	4603      	mov	r3, r0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3730      	adds	r7, #48	; 0x30
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <proceso_observador_with_time>:

bool proceso_observador_with_time(SPS30* sensor, UART_Printing* uart, uint8_t sensor_id, const char* datetime_str) {
 80013ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013f0:	b0ed      	sub	sp, #436	; 0x1b4
 80013f2:	af0a      	add	r7, sp, #40	; 0x28
 80013f4:	f507 74c4 	add.w	r4, r7, #392	; 0x188
 80013f8:	f5a4 74be 	sub.w	r4, r4, #380	; 0x17c
 80013fc:	6020      	str	r0, [r4, #0]
 80013fe:	f507 70c4 	add.w	r0, r7, #392	; 0x188
 8001402:	f5a0 70c0 	sub.w	r0, r0, #384	; 0x180
 8001406:	6001      	str	r1, [r0, #0]
 8001408:	4611      	mov	r1, r2
 800140a:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 800140e:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8001412:	6013      	str	r3, [r2, #0]
 8001414:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001418:	f2a3 1381 	subw	r3, r3, #385	; 0x181
 800141c:	460a      	mov	r2, r1
 800141e:	701a      	strb	r2, [r3, #0]
    int reintentos = NUM_REINT;
 8001420:	2303      	movs	r3, #3
 8001422:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184

    while (reintentos--) {
 8001426:	e0ca      	b.n	80015be <proceso_observador_with_time+0x1d2>
        sensor->start_measurement(sensor);
 8001428:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800142c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	691b      	ldr	r3, [r3, #16]
 8001434:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8001438:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800143c:	6810      	ldr	r0, [r2, #0]
 800143e:	4798      	blx	r3
        HAL_Delay(HAL_DELAY_SIGUIENTE_MEDICION);
 8001440:	f241 3088 	movw	r0, #5000	; 0x1388
 8001444:	f001 ffd8 	bl	80033f8 <HAL_Delay>

        ConcentracionesPM pm = sensor->get_concentrations(sensor);
 8001448:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800144c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001454:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8001458:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800145c:	6810      	ldr	r0, [r2, #0]
 800145e:	4798      	blx	r3
 8001460:	eeb0 6a40 	vmov.f32	s12, s0
 8001464:	eef0 6a60 	vmov.f32	s13, s1
 8001468:	eeb0 7a41 	vmov.f32	s14, s2
 800146c:	eef0 7a61 	vmov.f32	s15, s3
 8001470:	ed87 6a45 	vstr	s12, [r7, #276]	; 0x114
 8001474:	edc7 6a46 	vstr	s13, [r7, #280]	; 0x118
 8001478:	ed87 7a47 	vstr	s14, [r7, #284]	; 0x11c
 800147c:	edc7 7a48 	vstr	s15, [r7, #288]	; 0x120
        sensor->stop_measurement(sensor);
 8001480:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001484:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8001490:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001494:	6810      	ldr	r0, [r2, #0]
 8001496:	4798      	blx	r3

        if ((pm.pm1_0 > CONC_MIN_PM && pm.pm1_0 < CONC_MAX_PM) ||
 8001498:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 800149c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a4:	dd08      	ble.n	80014b8 <proceso_observador_with_time+0xcc>
 80014a6:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 80014aa:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 800161c <proceso_observador_with_time+0x230>
 80014ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b6:	d42f      	bmi.n	8001518 <proceso_observador_with_time+0x12c>
            (pm.pm2_5 > CONC_MIN_PM && pm.pm2_5 < CONC_MAX_PM) ||
 80014b8:	edd7 7a46 	vldr	s15, [r7, #280]	; 0x118
        if ((pm.pm1_0 > CONC_MIN_PM && pm.pm1_0 < CONC_MAX_PM) ||
 80014bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c4:	dd08      	ble.n	80014d8 <proceso_observador_with_time+0xec>
            (pm.pm2_5 > CONC_MIN_PM && pm.pm2_5 < CONC_MAX_PM) ||
 80014c6:	edd7 7a46 	vldr	s15, [r7, #280]	; 0x118
 80014ca:	ed9f 7a54 	vldr	s14, [pc, #336]	; 800161c <proceso_observador_with_time+0x230>
 80014ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d6:	d41f      	bmi.n	8001518 <proceso_observador_with_time+0x12c>
            (pm.pm4_0 > CONC_MIN_PM && pm.pm4_0 < CONC_MAX_PM) ||
 80014d8:	edd7 7a47 	vldr	s15, [r7, #284]	; 0x11c
            (pm.pm2_5 > CONC_MIN_PM && pm.pm2_5 < CONC_MAX_PM) ||
 80014dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e4:	dd08      	ble.n	80014f8 <proceso_observador_with_time+0x10c>
            (pm.pm4_0 > CONC_MIN_PM && pm.pm4_0 < CONC_MAX_PM) ||
 80014e6:	edd7 7a47 	vldr	s15, [r7, #284]	; 0x11c
 80014ea:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800161c <proceso_observador_with_time+0x230>
 80014ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f6:	d40f      	bmi.n	8001518 <proceso_observador_with_time+0x12c>
            (pm.pm10  > CONC_MIN_PM && pm.pm10  < CONC_MAX_PM)) {
 80014f8:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
            (pm.pm4_0 > CONC_MIN_PM && pm.pm4_0 < CONC_MAX_PM) ||
 80014fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001504:	dd4e      	ble.n	80015a4 <proceso_observador_with_time+0x1b8>
            (pm.pm10  > CONC_MIN_PM && pm.pm10  < CONC_MAX_PM)) {
 8001506:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 800150a:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800161c <proceso_observador_with_time+0x230>
 800150e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001516:	d545      	bpl.n	80015a4 <proceso_observador_with_time+0x1b8>

            // Formatear con timestamp
            char buffer[BUFFER_SIZE_MSG_PM_FORMAT];
            snprintf(buffer, sizeof(buffer), MSG_PM_FORMAT_WITH_TIME,
 8001518:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800151c:	f2a3 1381 	subw	r3, r3, #385	; 0x181
 8001520:	781e      	ldrb	r6, [r3, #0]
                     datetime_str, sensor_id, pm.pm1_0, pm.pm2_5, pm.pm4_0, pm.pm10);
 8001522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
            snprintf(buffer, sizeof(buffer), MSG_PM_FORMAT_WITH_TIME,
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff f81e 	bl	8000568 <__aeabi_f2d>
 800152c:	4604      	mov	r4, r0
 800152e:	460d      	mov	r5, r1
                     datetime_str, sensor_id, pm.pm1_0, pm.pm2_5, pm.pm4_0, pm.pm10);
 8001530:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
            snprintf(buffer, sizeof(buffer), MSG_PM_FORMAT_WITH_TIME,
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff f817 	bl	8000568 <__aeabi_f2d>
 800153a:	4680      	mov	r8, r0
 800153c:	4689      	mov	r9, r1
                     datetime_str, sensor_id, pm.pm1_0, pm.pm2_5, pm.pm4_0, pm.pm10);
 800153e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
            snprintf(buffer, sizeof(buffer), MSG_PM_FORMAT_WITH_TIME,
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff f810 	bl	8000568 <__aeabi_f2d>
 8001548:	4682      	mov	sl, r0
 800154a:	468b      	mov	fp, r1
                     datetime_str, sensor_id, pm.pm1_0, pm.pm2_5, pm.pm4_0, pm.pm10);
 800154c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
            snprintf(buffer, sizeof(buffer), MSG_PM_FORMAT_WITH_TIME,
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff f809 	bl	8000568 <__aeabi_f2d>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	f507 71c4 	add.w	r1, r7, #392	; 0x188
 800155e:	f5a1 71c4 	sub.w	r1, r1, #392	; 0x188
 8001562:	f107 0014 	add.w	r0, r7, #20
 8001566:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800156a:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800156e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001572:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001576:	9600      	str	r6, [sp, #0]
 8001578:	680b      	ldr	r3, [r1, #0]
 800157a:	4a29      	ldr	r2, [pc, #164]	; (8001620 <proceso_observador_with_time+0x234>)
 800157c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001580:	f006 f8a8 	bl	80076d4 <sniprintf>
            uart->print(uart, buffer);
 8001584:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001588:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f107 0114 	add.w	r1, r7, #20
 8001594:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8001598:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800159c:	6810      	ldr	r0, [r2, #0]
 800159e:	4798      	blx	r3
            return true;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e034      	b.n	800160e <proceso_observador_with_time+0x222>
        }

        uart->print(uart, MSG_ERROR_REINT);
 80015a4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80015a8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 80015b4:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80015b8:	491a      	ldr	r1, [pc, #104]	; (8001624 <proceso_observador_with_time+0x238>)
 80015ba:	6810      	ldr	r0, [r2, #0]
 80015bc:	4798      	blx	r3
    while (reintentos--) {
 80015be:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80015c2:	1e5a      	subs	r2, r3, #1
 80015c4:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f47f af2d 	bne.w	8001428 <proceso_observador_with_time+0x3c>
    }

    // Error con timestamp
    char error_msg[BUFFER_SIZE_MSG_ERROR_FALLO];
    snprintf(error_msg, sizeof(error_msg), MSG_ERROR_FALLO, datetime_str, sensor_id);
 80015ce:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80015d2:	f2a3 1381 	subw	r3, r3, #385	; 0x181
 80015d6:	781a      	ldrb	r2, [r3, #0]
 80015d8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80015dc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80015e0:	f507 7092 	add.w	r0, r7, #292	; 0x124
 80015e4:	9200      	str	r2, [sp, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a0f      	ldr	r2, [pc, #60]	; (8001628 <proceso_observador_with_time+0x23c>)
 80015ea:	2160      	movs	r1, #96	; 0x60
 80015ec:	f006 f872 	bl	80076d4 <sniprintf>
    uart->print(uart, error_msg);
 80015f0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80015f4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f507 7192 	add.w	r1, r7, #292	; 0x124
 8001600:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8001604:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001608:	6810      	ldr	r0, [r2, #0]
 800160a:	4798      	blx	r3
    return false;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	f507 77c6 	add.w	r7, r7, #396	; 0x18c
 8001614:	46bd      	mov	sp, r7
 8001616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800161a:	bf00      	nop
 800161c:	447a0000 	.word	0x447a0000
 8001620:	0800b45c 	.word	0x0800b45c
 8001624:	0800b4b0 	.word	0x0800b4b0
 8001628:	0800b4e8 	.word	0x0800b4e8

0800162c <DS3231_Init>:



static I2C_HandleTypeDef* _ds3231_i2c = NULL;

void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
    _ds3231_i2c = hi2c;
 8001634:	4a04      	ldr	r2, [pc, #16]	; (8001648 <DS3231_Init+0x1c>)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6013      	str	r3, [r2, #0]
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	20001ce4 	.word	0x20001ce4

0800164c <DS3231_GetRegByte>:

bool DS3231_IsConnected(void) {
    return HAL_I2C_IsDeviceReady(_ds3231_i2c, DS3231_I2C_ADDR << 1, 3, DS3231_TIMEOUT) == HAL_OK;
}

uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af02      	add	r7, sp, #8
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    HAL_I2C_Master_Transmit(_ds3231_i2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 8001656:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <DS3231_GetRegByte+0x3c>)
 8001658:	6818      	ldr	r0, [r3, #0]
 800165a:	1dfa      	adds	r2, r7, #7
 800165c:	2364      	movs	r3, #100	; 0x64
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	2301      	movs	r3, #1
 8001662:	21d0      	movs	r1, #208	; 0xd0
 8001664:	f002 fac2 	bl	8003bec <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(_ds3231_i2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 8001668:	4b07      	ldr	r3, [pc, #28]	; (8001688 <DS3231_GetRegByte+0x3c>)
 800166a:	6818      	ldr	r0, [r3, #0]
 800166c:	f107 020f 	add.w	r2, r7, #15
 8001670:	2364      	movs	r3, #100	; 0x64
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	2301      	movs	r3, #1
 8001676:	21d0      	movs	r1, #208	; 0xd0
 8001678:	f002 fbb6 	bl	8003de8 <HAL_I2C_Master_Receive>
    return val;
 800167c:	7bfb      	ldrb	r3, [r7, #15]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20001ce4 	.word	0x20001ce4

0800168c <DS3231_DecodeBCD>:
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
    uint8_t data[2] = {regAddr, val};
    HAL_I2C_Master_Transmit(_ds3231_i2c, DS3231_I2C_ADDR << 1, data, 2, DS3231_TIMEOUT);
}

uint8_t DS3231_DecodeBCD(uint8_t bcd) {
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
    return ((bcd >> 4) * 10) + (bcd & 0x0F);
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	091b      	lsrs	r3, r3, #4
 800169a:	b2db      	uxtb	r3, r3
 800169c:	461a      	mov	r2, r3
 800169e:	0092      	lsls	r2, r2, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	f003 030f 	and.w	r3, r3, #15
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	4413      	add	r3, r2
 80016b0:	b2db      	uxtb	r3, r3
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <DS3231_EncodeBCD>:

uint8_t DS3231_EncodeBCD(uint8_t dec) {
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
    return ((dec / 10) << 4) | (dec % 10);
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	4a0d      	ldr	r2, [pc, #52]	; (8001704 <DS3231_EncodeBCD+0x44>)
 80016ce:	fba2 2303 	umull	r2, r3, r2, r3
 80016d2:	08db      	lsrs	r3, r3, #3
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	011b      	lsls	r3, r3, #4
 80016d8:	b258      	sxtb	r0, r3
 80016da:	79fa      	ldrb	r2, [r7, #7]
 80016dc:	4b09      	ldr	r3, [pc, #36]	; (8001704 <DS3231_EncodeBCD+0x44>)
 80016de:	fba3 1302 	umull	r1, r3, r3, r2
 80016e2:	08d9      	lsrs	r1, r3, #3
 80016e4:	460b      	mov	r3, r1
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	440b      	add	r3, r1
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	b25b      	sxtb	r3, r3
 80016f2:	4303      	orrs	r3, r0
 80016f4:	b25b      	sxtb	r3, r3
 80016f6:	b2db      	uxtb	r3, r3
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	cccccccd 	.word	0xcccccccd

08001708 <DS3231_GetDateTime>:

bool DS3231_GetDateTime(DS3231_DateTime *dt)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
    uint8_t raw;

    raw = DS3231_GetRegByte(DS3231_REG_SECOND);
 8001710:	2000      	movs	r0, #0
 8001712:	f7ff ff9b 	bl	800164c <DS3231_GetRegByte>
 8001716:	4603      	mov	r3, r0
 8001718:	73fb      	strb	r3, [r7, #15]
    if (raw == 0xFF) return false;
 800171a:	7bfb      	ldrb	r3, [r7, #15]
 800171c:	2bff      	cmp	r3, #255	; 0xff
 800171e:	d101      	bne.n	8001724 <DS3231_GetDateTime+0x1c>
 8001720:	2300      	movs	r3, #0
 8001722:	e06b      	b.n	80017fc <DS3231_GetDateTime+0xf4>
    dt->seconds = DS3231_DecodeBCD(raw);
 8001724:	7bfb      	ldrb	r3, [r7, #15]
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff ffb0 	bl	800168c <DS3231_DecodeBCD>
 800172c:	4603      	mov	r3, r0
 800172e:	461a      	mov	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	701a      	strb	r2, [r3, #0]

    raw = DS3231_GetRegByte(DS3231_REG_MINUTE);
 8001734:	2001      	movs	r0, #1
 8001736:	f7ff ff89 	bl	800164c <DS3231_GetRegByte>
 800173a:	4603      	mov	r3, r0
 800173c:	73fb      	strb	r3, [r7, #15]
    if (raw == 0xFF) return false;
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	2bff      	cmp	r3, #255	; 0xff
 8001742:	d101      	bne.n	8001748 <DS3231_GetDateTime+0x40>
 8001744:	2300      	movs	r3, #0
 8001746:	e059      	b.n	80017fc <DS3231_GetDateTime+0xf4>
    dt->minutes = DS3231_DecodeBCD(raw);
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff ff9e 	bl	800168c <DS3231_DecodeBCD>
 8001750:	4603      	mov	r3, r0
 8001752:	461a      	mov	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	705a      	strb	r2, [r3, #1]

    raw = DS3231_GetRegByte(DS3231_REG_HOUR);
 8001758:	2002      	movs	r0, #2
 800175a:	f7ff ff77 	bl	800164c <DS3231_GetRegByte>
 800175e:	4603      	mov	r3, r0
 8001760:	73fb      	strb	r3, [r7, #15]
    if (raw == 0xFF) return false;
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	2bff      	cmp	r3, #255	; 0xff
 8001766:	d101      	bne.n	800176c <DS3231_GetDateTime+0x64>
 8001768:	2300      	movs	r3, #0
 800176a:	e047      	b.n	80017fc <DS3231_GetDateTime+0xf4>
    dt->hours = DS3231_DecodeBCD(raw & 0x3F); // Formato 24h, sin bit AM/PM
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001772:	b2db      	uxtb	r3, r3
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff89 	bl	800168c <DS3231_DecodeBCD>
 800177a:	4603      	mov	r3, r0
 800177c:	461a      	mov	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	709a      	strb	r2, [r3, #2]

    raw = DS3231_GetRegByte(DS3231_REG_DATE);
 8001782:	2004      	movs	r0, #4
 8001784:	f7ff ff62 	bl	800164c <DS3231_GetRegByte>
 8001788:	4603      	mov	r3, r0
 800178a:	73fb      	strb	r3, [r7, #15]
    if (raw == 0xFF) return false;
 800178c:	7bfb      	ldrb	r3, [r7, #15]
 800178e:	2bff      	cmp	r3, #255	; 0xff
 8001790:	d101      	bne.n	8001796 <DS3231_GetDateTime+0x8e>
 8001792:	2300      	movs	r3, #0
 8001794:	e032      	b.n	80017fc <DS3231_GetDateTime+0xf4>
    dt->day = DS3231_DecodeBCD(raw);
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff77 	bl	800168c <DS3231_DecodeBCD>
 800179e:	4603      	mov	r3, r0
 80017a0:	461a      	mov	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	70da      	strb	r2, [r3, #3]

    raw = DS3231_GetRegByte(DS3231_REG_MONTH);
 80017a6:	2005      	movs	r0, #5
 80017a8:	f7ff ff50 	bl	800164c <DS3231_GetRegByte>
 80017ac:	4603      	mov	r3, r0
 80017ae:	73fb      	strb	r3, [r7, #15]
    if (raw == 0xFF) return false;
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	2bff      	cmp	r3, #255	; 0xff
 80017b4:	d101      	bne.n	80017ba <DS3231_GetDateTime+0xb2>
 80017b6:	2300      	movs	r3, #0
 80017b8:	e020      	b.n	80017fc <DS3231_GetDateTime+0xf4>
    dt->month = DS3231_DecodeBCD(raw & 0x1F); // Bit 7 = siglo (ignorado)
 80017ba:	7bfb      	ldrb	r3, [r7, #15]
 80017bc:	f003 031f 	and.w	r3, r3, #31
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff ff62 	bl	800168c <DS3231_DecodeBCD>
 80017c8:	4603      	mov	r3, r0
 80017ca:	461a      	mov	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	711a      	strb	r2, [r3, #4]

    raw = DS3231_GetRegByte(DS3231_REG_YEAR);
 80017d0:	2006      	movs	r0, #6
 80017d2:	f7ff ff3b 	bl	800164c <DS3231_GetRegByte>
 80017d6:	4603      	mov	r3, r0
 80017d8:	73fb      	strb	r3, [r7, #15]
    if (raw == 0xFF) return false;
 80017da:	7bfb      	ldrb	r3, [r7, #15]
 80017dc:	2bff      	cmp	r3, #255	; 0xff
 80017de:	d101      	bne.n	80017e4 <DS3231_GetDateTime+0xdc>
 80017e0:	2300      	movs	r3, #0
 80017e2:	e00b      	b.n	80017fc <DS3231_GetDateTime+0xf4>
    dt->year = 2000 + DS3231_DecodeBCD(raw); // Año 20xx
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff ff50 	bl	800168c <DS3231_DecodeBCD>
 80017ec:	4603      	mov	r3, r0
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	80da      	strh	r2, [r3, #6]

    return true;
 80017fa:	2301      	movs	r3, #1
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <DS3231_SetDateTime>:

bool DS3231_SetDateTime(const DS3231_DateTime *dt) {
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af04      	add	r7, sp, #16
 800180a:	6078      	str	r0, [r7, #4]
    uint8_t buffer[7];

    buffer[0] = DS3231_EncodeBCD(dt->seconds);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ff55 	bl	80016c0 <DS3231_EncodeBCD>
 8001816:	4603      	mov	r3, r0
 8001818:	723b      	strb	r3, [r7, #8]
    buffer[1] = DS3231_EncodeBCD(dt->minutes);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	785b      	ldrb	r3, [r3, #1]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff ff4e 	bl	80016c0 <DS3231_EncodeBCD>
 8001824:	4603      	mov	r3, r0
 8001826:	727b      	strb	r3, [r7, #9]
    buffer[2] = DS3231_EncodeBCD(dt->hours);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	789b      	ldrb	r3, [r3, #2]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff47 	bl	80016c0 <DS3231_EncodeBCD>
 8001832:	4603      	mov	r3, r0
 8001834:	72bb      	strb	r3, [r7, #10]
    buffer[3] = 1;  // Día de la semana fijo
 8001836:	2301      	movs	r3, #1
 8001838:	72fb      	strb	r3, [r7, #11]
    buffer[4] = DS3231_EncodeBCD(dt->day);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	78db      	ldrb	r3, [r3, #3]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff ff3e 	bl	80016c0 <DS3231_EncodeBCD>
 8001844:	4603      	mov	r3, r0
 8001846:	733b      	strb	r3, [r7, #12]
    buffer[5] = DS3231_EncodeBCD(dt->month);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	791b      	ldrb	r3, [r3, #4]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff37 	bl	80016c0 <DS3231_EncodeBCD>
 8001852:	4603      	mov	r3, r0
 8001854:	737b      	strb	r3, [r7, #13]
    buffer[6] = DS3231_EncodeBCD(dt->year % 100);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	88db      	ldrh	r3, [r3, #6]
 800185a:	4a17      	ldr	r2, [pc, #92]	; (80018b8 <DS3231_SetDateTime+0xb4>)
 800185c:	fba2 1203 	umull	r1, r2, r2, r3
 8001860:	0952      	lsrs	r2, r2, #5
 8001862:	2164      	movs	r1, #100	; 0x64
 8001864:	fb01 f202 	mul.w	r2, r1, r2
 8001868:	1a9b      	subs	r3, r3, r2
 800186a:	b29b      	uxth	r3, r3
 800186c:	b2db      	uxtb	r3, r3
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff ff26 	bl	80016c0 <DS3231_EncodeBCD>
 8001874:	4603      	mov	r3, r0
 8001876:	73bb      	strb	r3, [r7, #14]

    HAL_StatusTypeDef status = HAL_I2C_Mem_Write(
 8001878:	4b10      	ldr	r3, [pc, #64]	; (80018bc <DS3231_SetDateTime+0xb8>)
 800187a:	6818      	ldr	r0, [r3, #0]
 800187c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001880:	9302      	str	r3, [sp, #8]
 8001882:	2307      	movs	r3, #7
 8001884:	9301      	str	r3, [sp, #4]
 8001886:	f107 0308 	add.w	r3, r7, #8
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	2301      	movs	r3, #1
 800188e:	2200      	movs	r2, #0
 8001890:	21d0      	movs	r1, #208	; 0xd0
 8001892:	f002 fccf 	bl	8004234 <HAL_I2C_Mem_Write>
 8001896:	4603      	mov	r3, r0
 8001898:	73fb      	strb	r3, [r7, #15]
        buffer,
        sizeof(buffer),
        HAL_MAX_DELAY
    );

    if (status != HAL_OK) {
 800189a:	7bfb      	ldrb	r3, [r7, #15]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d006      	beq.n	80018ae <DS3231_SetDateTime+0xaa>
        uart_logger.print(&uart_logger, "[RTC] Error al escribir en DS3231\r\n");
 80018a0:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <DS3231_SetDateTime+0xbc>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	4907      	ldr	r1, [pc, #28]	; (80018c4 <DS3231_SetDateTime+0xc0>)
 80018a6:	4806      	ldr	r0, [pc, #24]	; (80018c0 <DS3231_SetDateTime+0xbc>)
 80018a8:	4798      	blx	r3
        return false;
 80018aa:	2300      	movs	r3, #0
 80018ac:	e000      	b.n	80018b0 <DS3231_SetDateTime+0xac>
    }
    return true;
 80018ae:	2301      	movs	r3, #1
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	51eb851f 	.word	0x51eb851f
 80018bc:	20001ce4 	.word	0x20001ce4
 80018c0:	20001d8c 	.word	0x20001d8c
 80018c4:	0800b55c 	.word	0x0800b55c

080018c8 <rtc_get_time>:
    int8_t msb = DS3231_GetRegByte(DS3231_REG_TEMP_MSB);
    uint8_t lsb = DS3231_GetRegByte(DS3231_REG_TEMP_LSB);
    return msb + ((lsb >> 6) * 0.25f);
}

void rtc_get_time(char *buffer, size_t len) {
 80018c8:	b5b0      	push	{r4, r5, r7, lr}
 80018ca:	b08a      	sub	sp, #40	; 0x28
 80018cc:	af06      	add	r7, sp, #24
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
    DS3231_DateTime dt;
    DS3231_GetDateTime(&dt);
 80018d2:	f107 0308 	add.w	r3, r7, #8
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff ff16 	bl	8001708 <DS3231_GetDateTime>
    snprintf(buffer, len, "%04d-%02d-%02d %02d:%02d:%02d",
             dt.year, dt.month, dt.day,
 80018dc:	89fb      	ldrh	r3, [r7, #14]
    snprintf(buffer, len, "%04d-%02d-%02d %02d:%02d:%02d",
 80018de:	461d      	mov	r5, r3
             dt.year, dt.month, dt.day,
 80018e0:	7b3b      	ldrb	r3, [r7, #12]
 80018e2:	7afa      	ldrb	r2, [r7, #11]
             dt.hours, dt.minutes, dt.seconds);
 80018e4:	7ab9      	ldrb	r1, [r7, #10]
 80018e6:	7a78      	ldrb	r0, [r7, #9]
 80018e8:	7a3c      	ldrb	r4, [r7, #8]
    snprintf(buffer, len, "%04d-%02d-%02d %02d:%02d:%02d",
 80018ea:	9404      	str	r4, [sp, #16]
 80018ec:	9003      	str	r0, [sp, #12]
 80018ee:	9102      	str	r1, [sp, #8]
 80018f0:	9201      	str	r2, [sp, #4]
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	462b      	mov	r3, r5
 80018f6:	4a04      	ldr	r2, [pc, #16]	; (8001908 <rtc_get_time+0x40>)
 80018f8:	6839      	ldr	r1, [r7, #0]
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f005 feea 	bl	80076d4 <sniprintf>
}
 8001900:	bf00      	nop
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bdb0      	pop	{r4, r5, r7, pc}
 8001908:	0800b580 	.word	0x0800b580

0800190c <rtc_set_test_time>:
        uart_logger.print(&uart_logger, RTC_MSG_SET_FAIL);
    }
}


void rtc_set_test_time(void) {
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0

    } else {
        uart_logger.print(&uart_logger, "[TEST] Error al configurar RTC.\r\n");
    }
#endif
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
	...

0800191c <RTC_DS3231_Set>:
    return dt;
}


bool RTC_DS3231_Set(RTC_DateTypeDef *date, RTC_TimeTypeDef *time)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
    DS3231_DateTime dt;

    dt.year    = 2000 + date->Year;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	78db      	ldrb	r3, [r3, #3]
 800192a:	b29b      	uxth	r3, r3
 800192c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001930:	b29b      	uxth	r3, r3
 8001932:	827b      	strh	r3, [r7, #18]
    dt.month   = date->Month;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	785b      	ldrb	r3, [r3, #1]
 8001938:	743b      	strb	r3, [r7, #16]
    dt.day     = date->Date;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	789b      	ldrb	r3, [r3, #2]
 800193e:	73fb      	strb	r3, [r7, #15]
    dt.hours   = time->Hours;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	73bb      	strb	r3, [r7, #14]
    dt.minutes = time->Minutes;
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	785b      	ldrb	r3, [r3, #1]
 800194a:	737b      	strb	r3, [r7, #13]
    dt.seconds = time->Seconds;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	789b      	ldrb	r3, [r3, #2]
 8001950:	733b      	strb	r3, [r7, #12]

    bool resultado = DS3231_SetDateTime(&dt);
 8001952:	f107 030c 	add.w	r3, r7, #12
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff ff54 	bl	8001804 <DS3231_SetDateTime>
 800195c:	4603      	mov	r3, r0
 800195e:	75fb      	strb	r3, [r7, #23]

    if (!resultado) {
 8001960:	7dfb      	ldrb	r3, [r7, #23]
 8001962:	f083 0301 	eor.w	r3, r3, #1
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <RTC_DS3231_Set+0x58>
        uart_print_debug(&huart3, "Error al escribir al DS3231\r\n");
 800196c:	4904      	ldr	r1, [pc, #16]	; (8001980 <RTC_DS3231_Set+0x64>)
 800196e:	4805      	ldr	r0, [pc, #20]	; (8001984 <RTC_DS3231_Set+0x68>)
 8001970:	f000 fdf5 	bl	800255e <uart_print_debug>
    }

    return resultado;
 8001974:	7dfb      	ldrb	r3, [r7, #23]
}
 8001976:	4618      	mov	r0, r3
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	0800b74c 	.word	0x0800b74c
 8001984:	20001f14 	.word	0x20001f14

08001988 <SHDLC_LoadMyVector>:
 * @param DataFrameSize El tamaño total del arreglo DataFrame para evitar
 *        desbordamientos de búfer.
 * @return void
 */

void SHDLC_LoadMyVector(Shdlc_FrameMiso * frame, const uint8_t * DataFrame, size_t DataFrameSize) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
    if (frame == NULL || DataFrame == NULL || DataFrameSize < 5) {
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d005      	beq.n	80019a6 <SHDLC_LoadMyVector+0x1e>
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d002      	beq.n	80019a6 <SHDLC_LoadMyVector+0x1e>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	d803      	bhi.n	80019ae <SHDLC_LoadMyVector+0x26>
        // Validación básica para asegurarnos de que los parámetros son válidos y DataFrame tiene el
        // tamaño mínimo esperado.
        printf("Datos no válidos para cargar en myVector.\n");
 80019a6:	4811      	ldr	r0, [pc, #68]	; (80019ec <SHDLC_LoadMyVector+0x64>)
 80019a8:	f005 fe86 	bl	80076b8 <puts>
        return;
 80019ac:	e01b      	b.n	80019e6 <SHDLC_LoadMyVector+0x5e>
    }

    uint8_t dataLength = DataFrame[4]; // Longitud de los datos útiles.
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	791b      	ldrb	r3, [r3, #4]
 80019b2:	75fb      	strb	r3, [r7, #23]

    if (dataLength > FRAME_DATA_VECTOR_SIZE_MISO || (4 + dataLength) > DataFrameSize) {
 80019b4:	7dfb      	ldrb	r3, [r7, #23]
 80019b6:	2b3c      	cmp	r3, #60	; 0x3c
 80019b8:	d805      	bhi.n	80019c6 <SHDLC_LoadMyVector+0x3e>
 80019ba:	7dfb      	ldrb	r3, [r7, #23]
 80019bc:	3304      	adds	r3, #4
 80019be:	461a      	mov	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d203      	bcs.n	80019ce <SHDLC_LoadMyVector+0x46>
        // Asegúrate de que la longitud de los datos no excede el tamaño de myVector ni los límites
        // de DataFrame.
        printf("Longitud de los datos excede el tamaño permitido de myVector o los límites de "
 80019c6:	480a      	ldr	r0, [pc, #40]	; (80019f0 <SHDLC_LoadMyVector+0x68>)
 80019c8:	f005 fe76 	bl	80076b8 <puts>
               "DataFrame.\n");
        return;
 80019cc:	e00b      	b.n	80019e6 <SHDLC_LoadMyVector+0x5e>
    }

    // Copiar los datos útiles desde DataFrame a myVector en la estructura Shdlc_FrameMiso.
    memcpy(frame->myVector, &DataFrame[5], dataLength + 1);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	1cd8      	adds	r0, r3, #3
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	1d59      	adds	r1, r3, #5
 80019d6:	7dfb      	ldrb	r3, [r7, #23]
 80019d8:	3301      	adds	r3, #1
 80019da:	461a      	mov	r2, r3
 80019dc:	f004 ff6e 	bl	80068bc <memcpy>

    // Actualizar el campo 'lon' con la longitud de los datos copiados.
    frame->lon = dataLength;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	7dfa      	ldrb	r2, [r7, #23]
 80019e4:	709a      	strb	r2, [r3, #2]

    // Asume que podrías querer también inicializar otros campos aquí.
}
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	0800b78c 	.word	0x0800b78c
 80019f0:	0800b7b8 	.word	0x0800b7b8

080019f4 <SHDLC_CalculateDataSize>:
 * @param inputSize Tamaño del arreglo de entrada.
 * @return int La longitud de los datos contenidos entre los dos delimitadores,
 *         o -1 si los delimitadores no se encuentran en la secuencia correcta.
 */

int SHDLC_CalculateDataSize(const uint8_t * input, size_t inputSize) {
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	; 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
    int start = -1;
 80019fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a02:	61fb      	str	r3, [r7, #28]
    int end = -1;
 8001a04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a08:	61bb      	str	r3, [r7, #24]

    // Buscar el primer delimitador 0xE7.
    for (size_t i = 0; i < inputSize; ++i) {
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	e00c      	b.n	8001a2a <SHDLC_CalculateDataSize+0x36>
        if (input[i] == 0x7E) {
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	4413      	add	r3, r2
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b7e      	cmp	r3, #126	; 0x7e
 8001a1a:	d103      	bne.n	8001a24 <SHDLC_CalculateDataSize+0x30>
            start = i + 1; // Comenzar después del primer 0xE7
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	61fb      	str	r3, [r7, #28]
            break;
 8001a22:	e006      	b.n	8001a32 <SHDLC_CalculateDataSize+0x3e>
    for (size_t i = 0; i < inputSize; ++i) {
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	3301      	adds	r3, #1
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d3ee      	bcc.n	8001a10 <SHDLC_CalculateDataSize+0x1c>
        }
    }

    // Buscar el segundo delimitador 0xE7.
    for (size_t i = start; i < inputSize; ++i) {
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	e00b      	b.n	8001a50 <SHDLC_CalculateDataSize+0x5c>
        if (input[i] == 0x7E) {
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b7e      	cmp	r3, #126	; 0x7e
 8001a42:	d102      	bne.n	8001a4a <SHDLC_CalculateDataSize+0x56>
            end = i;
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	61bb      	str	r3, [r7, #24]
            break;
 8001a48:	e006      	b.n	8001a58 <SHDLC_CalculateDataSize+0x64>
    for (size_t i = start; i < inputSize; ++i) {
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	613b      	str	r3, [r7, #16]
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d3ef      	bcc.n	8001a38 <SHDLC_CalculateDataSize+0x44>
        }
    }

    // Verificar si se encontraron ambos delimitadores.
    if (start == -1 || end == -1 || start >= end) {
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a5e:	d007      	beq.n	8001a70 <SHDLC_CalculateDataSize+0x7c>
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a66:	d003      	beq.n	8001a70 <SHDLC_CalculateDataSize+0x7c>
 8001a68:	69fa      	ldr	r2, [r7, #28]
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	db02      	blt.n	8001a76 <SHDLC_CalculateDataSize+0x82>
        return -1; // No se encontró la secuencia válida.
 8001a70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a74:	e004      	b.n	8001a80 <SHDLC_CalculateDataSize+0x8c>
    }

    // Calcular la longitud de los datos a copiar y asegurarse de que no
    // exceda el buffer de salida.
    size_t dataLength = end - start;
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	60fb      	str	r3, [r7, #12]
    return dataLength;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3724      	adds	r7, #36	; 0x24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <SHDLC_revertByteStuffing>:
 * @param stuffedSize Tamaño del arreglo de bytes con byte-stuffing.
 * @param originalData Puntero al arreglo de bytes donde se almacenarán los datos revertidos.
 * @return El tamaño del arreglo de bytes revertido.
 */
size_t SHDLC_revertByteStuffing(const uint8_t * stuffedData, size_t stuffedSize,
                                uint8_t * originalData) {
 8001a8c:	b480      	push	{r7}
 8001a8e:	b087      	sub	sp, #28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
    size_t originalIndex = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < stuffedSize; ++i) {
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	e04e      	b.n	8001b40 <SHDLC_revertByteStuffing+0xb4>
        if (stuffedData[i] == 0x7D) { // Detecta el indicador de byte-stuffing
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b7d      	cmp	r3, #125	; 0x7d
 8001aac:	d137      	bne.n	8001b1e <SHDLC_revertByteStuffing+0x92>
            i++;                      // Avanza al siguiente byte para determinar el valor real
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	613b      	str	r3, [r7, #16]
            if (i < stuffedSize) {
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d23b      	bcs.n	8001b34 <SHDLC_revertByteStuffing+0xa8>
                switch (stuffedData[i]) {
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b5e      	cmp	r3, #94	; 0x5e
 8001ac6:	d00a      	beq.n	8001ade <SHDLC_revertByteStuffing+0x52>
 8001ac8:	2b5e      	cmp	r3, #94	; 0x5e
 8001aca:	dc35      	bgt.n	8001b38 <SHDLC_revertByteStuffing+0xac>
 8001acc:	2b5d      	cmp	r3, #93	; 0x5d
 8001ace:	d00e      	beq.n	8001aee <SHDLC_revertByteStuffing+0x62>
 8001ad0:	2b5d      	cmp	r3, #93	; 0x5d
 8001ad2:	dc31      	bgt.n	8001b38 <SHDLC_revertByteStuffing+0xac>
 8001ad4:	2b31      	cmp	r3, #49	; 0x31
 8001ad6:	d012      	beq.n	8001afe <SHDLC_revertByteStuffing+0x72>
 8001ad8:	2b33      	cmp	r3, #51	; 0x33
 8001ada:	d018      	beq.n	8001b0e <SHDLC_revertByteStuffing+0x82>
                    break;
                default:
                    // Trata el caso en que el byte siguiente a 0x7D no es uno esperado
                    // Esto podría indicar un error o una situación inesperada.
                    // Se podría manejar de manera especial si es necesario.
                    break;
 8001adc:	e02c      	b.n	8001b38 <SHDLC_revertByteStuffing+0xac>
                    originalData[originalIndex++] = 0x7E;
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	1c5a      	adds	r2, r3, #1
 8001ae2:	617a      	str	r2, [r7, #20]
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	227e      	movs	r2, #126	; 0x7e
 8001aea:	701a      	strb	r2, [r3, #0]
                    break;
 8001aec:	e025      	b.n	8001b3a <SHDLC_revertByteStuffing+0xae>
                    originalData[originalIndex++] = 0x7D;
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	1c5a      	adds	r2, r3, #1
 8001af2:	617a      	str	r2, [r7, #20]
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	4413      	add	r3, r2
 8001af8:	227d      	movs	r2, #125	; 0x7d
 8001afa:	701a      	strb	r2, [r3, #0]
                    break;
 8001afc:	e01d      	b.n	8001b3a <SHDLC_revertByteStuffing+0xae>
                    originalData[originalIndex++] = 0x11;
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	1c5a      	adds	r2, r3, #1
 8001b02:	617a      	str	r2, [r7, #20]
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	4413      	add	r3, r2
 8001b08:	2211      	movs	r2, #17
 8001b0a:	701a      	strb	r2, [r3, #0]
                    break;
 8001b0c:	e015      	b.n	8001b3a <SHDLC_revertByteStuffing+0xae>
                    originalData[originalIndex++] = 0x13;
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	1c5a      	adds	r2, r3, #1
 8001b12:	617a      	str	r2, [r7, #20]
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	4413      	add	r3, r2
 8001b18:	2213      	movs	r2, #19
 8001b1a:	701a      	strb	r2, [r3, #0]
                    break;
 8001b1c:	e00d      	b.n	8001b3a <SHDLC_revertByteStuffing+0xae>
                }
            }
        } else {
            // Si no es un byte-stuffing, simplemente copia el byte
            originalData[originalIndex++] = stuffedData[i];
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	441a      	add	r2, r3
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	1c59      	adds	r1, r3, #1
 8001b28:	6179      	str	r1, [r7, #20]
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	440b      	add	r3, r1
 8001b2e:	7812      	ldrb	r2, [r2, #0]
 8001b30:	701a      	strb	r2, [r3, #0]
 8001b32:	e002      	b.n	8001b3a <SHDLC_revertByteStuffing+0xae>
            }
 8001b34:	bf00      	nop
 8001b36:	e000      	b.n	8001b3a <SHDLC_revertByteStuffing+0xae>
                    break;
 8001b38:	bf00      	nop
    for (size_t i = 0; i < stuffedSize; ++i) {
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d3ac      	bcc.n	8001aa2 <SHDLC_revertByteStuffing+0x16>
        }
    }

    return originalIndex; // Retorna el tamaño del arreglo revertido
 8001b48:	697b      	ldr	r3, [r7, #20]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	371c      	adds	r7, #28
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <SHDLC_bytesToFloat>:

// Función para convertir 4 bytes en big-endian a un valor float IEEE754
float SHDLC_bytesToFloat(uint8_t * bytes) {
 8001b56:	b480      	push	{r7}
 8001b58:	b087      	sub	sp, #28
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
    float value;
    uint8_t reversedBytes[sizeof(value)];

    // Revertir el orden de los bytes para big-endian
    for (int i = 0; i < sizeof(value); i++) {
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
 8001b62:	e00e      	b.n	8001b82 <SHDLC_bytesToFloat+0x2c>
        reversedBytes[i] = bytes[sizeof(value) - i - 1];
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	f1c3 0303 	rsb	r3, r3, #3
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	7819      	ldrb	r1, [r3, #0]
 8001b70:	f107 020c 	add.w	r2, r7, #12
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	4413      	add	r3, r2
 8001b78:	460a      	mov	r2, r1
 8001b7a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < sizeof(value); i++) {
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	617b      	str	r3, [r7, #20]
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	2b03      	cmp	r3, #3
 8001b86:	d9ed      	bls.n	8001b64 <SHDLC_bytesToFloat+0xe>
 8001b88:	68fb      	ldr	r3, [r7, #12]
    }

    // Copiar los bytes revertidos en la variable float
    memcpy(&value, reversedBytes, sizeof(value));
 8001b8a:	613b      	str	r3, [r7, #16]

    return value;
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	ee07 3a90 	vmov	s15, r3
}
 8001b92:	eeb0 0a67 	vmov.f32	s0, s15
 8001b96:	371c      	adds	r7, #28
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <SHDLC_llenarConcentraciones>:

// Función para llenar la estructura con los datos de concentración
void SHDLC_llenarConcentraciones(ConcentracionesPM *concentraciones, uint8_t *data) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
    if (!concentraciones || !data) return;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d029      	beq.n	8001c04 <SHDLC_llenarConcentraciones+0x64>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d026      	beq.n	8001c04 <SHDLC_llenarConcentraciones+0x64>

    // Al menos 4 * sizeof(float) = 16 bytes
    concentraciones->pm1_0 = SHDLC_bytesToFloat(&data[0]);
 8001bb6:	6838      	ldr	r0, [r7, #0]
 8001bb8:	f7ff ffcd 	bl	8001b56 <SHDLC_bytesToFloat>
 8001bbc:	eef0 7a40 	vmov.f32	s15, s0
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	edc3 7a00 	vstr	s15, [r3]
    concentraciones->pm2_5 = SHDLC_bytesToFloat(&data[4]);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	3304      	adds	r3, #4
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff ffc3 	bl	8001b56 <SHDLC_bytesToFloat>
 8001bd0:	eef0 7a40 	vmov.f32	s15, s0
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	edc3 7a01 	vstr	s15, [r3, #4]
    concentraciones->pm4_0 = SHDLC_bytesToFloat(&data[8]);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	3308      	adds	r3, #8
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff ffb9 	bl	8001b56 <SHDLC_bytesToFloat>
 8001be4:	eef0 7a40 	vmov.f32	s15, s0
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	edc3 7a02 	vstr	s15, [r3, #8]
    concentraciones->pm10  = SHDLC_bytesToFloat(&data[12]);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	330c      	adds	r3, #12
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff ffaf 	bl	8001b56 <SHDLC_bytesToFloat>
 8001bf8:	eef0 7a40 	vmov.f32	s15, s0
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	edc3 7a03 	vstr	s15, [r3, #12]
 8001c02:	e000      	b.n	8001c06 <SHDLC_llenarConcentraciones+0x66>
    if (!concentraciones || !data) return;
 8001c04:	bf00      	nop
}
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <sps30_send_command>:
#define DELAY_STOP_MEASUREMENT      0

#define CLEAR_VAR                   0

// Implementación de las funciones del objeto SPS30
void sps30_send_command(SPS30 *self, const uint8_t *command, uint16_t commandSize) {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	4613      	mov	r3, r2
 8001c18:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit(self->huart, command, commandSize, 100);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6818      	ldr	r0, [r3, #0]
 8001c1e:	88fa      	ldrh	r2, [r7, #6]
 8001c20:	2364      	movs	r3, #100	; 0x64
 8001c22:	68b9      	ldr	r1, [r7, #8]
 8001c24:	f004 fa06 	bl	8006034 <HAL_UART_Transmit>
}
 8001c28:	bf00      	nop
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <sps30_receive_async>:

void sps30_receive_async(SPS30 *self, uint8_t *dataBuffer, uint16_t bufferSize) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Receive(self->huart, dataBuffer, bufferSize, 100);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6818      	ldr	r0, [r3, #0]
 8001c42:	88fa      	ldrh	r2, [r7, #6]
 8001c44:	2364      	movs	r3, #100	; 0x64
 8001c46:	68b9      	ldr	r1, [r7, #8]
 8001c48:	f004 fa86 	bl	8006158 <HAL_UART_Receive>
}
 8001c4c:	bf00      	nop
 8001c4e:	3710      	adds	r7, #16
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <sps30_send_receive>:

void sps30_send_receive(SPS30 *self, const uint8_t *command, uint16_t commandSize, uint8_t *dataBuffer, uint16_t bufferSize) {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	603b      	str	r3, [r7, #0]
 8001c60:	4613      	mov	r3, r2
 8001c62:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit(self->huart, command, commandSize, 100);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6818      	ldr	r0, [r3, #0]
 8001c68:	88fa      	ldrh	r2, [r7, #6]
 8001c6a:	2364      	movs	r3, #100	; 0x64
 8001c6c:	68b9      	ldr	r1, [r7, #8]
 8001c6e:	f004 f9e1 	bl	8006034 <HAL_UART_Transmit>
    HAL_UART_Receive(self->huart, dataBuffer, bufferSize, 100);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6818      	ldr	r0, [r3, #0]
 8001c76:	8b3a      	ldrh	r2, [r7, #24]
 8001c78:	2364      	movs	r3, #100	; 0x64
 8001c7a:	6839      	ldr	r1, [r7, #0]
 8001c7c:	f004 fa6c 	bl	8006158 <HAL_UART_Receive>
}
 8001c80:	bf00      	nop
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <sps30_start_measurement>:


void sps30_start_measurement(SPS30 *self) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b094      	sub	sp, #80	; 0x50
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
    uint8_t startCmd[] = SPS30_FRAME_START_MEASUREMENT; // Comando para iniciar la medición
 8001c90:	4a15      	ldr	r2, [pc, #84]	; (8001ce8 <sps30_start_measurement+0x60>)
 8001c92:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c9a:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t dataBuf[BUFFER_SIZE] = {0};      // Buffer para almacenar la respuesta del sensor
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ca2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	460a      	mov	r2, r1
 8001caa:	801a      	strh	r2, [r3, #0]
 8001cac:	460a      	mov	r2, r1
 8001cae:	709a      	strb	r2, [r3, #2]
    char respuestaStr[BUFFER_SIZE_RESPONSE]; // Buffer para el mensaje de longitud de respuesta

    // Envío del comando de inicio de medición
    //uart_print(MSG_INICIO_MEDICION);               // Notifica por UART el inicio de la operación
    //uart_vector_print(sizeof(startCmd), startCmd); // Muestra el comando enviado
    self->send_command(self, startCmd, sizeof(startCmd)); // Envía el comando al sensor SPS30
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001cb8:	2208      	movs	r2, #8
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	4798      	blx	r3
    HAL_Delay(DELAY_START_MEASUREMENT);            // Espera para el procesamiento del comando
 8001cbe:	2002      	movs	r0, #2
 8001cc0:	f001 fb9a 	bl	80033f8 <HAL_Delay>

    // Recepción y procesamiento de la respuesta
    self->receive_async(self, dataBuf, sizeof(dataBuf));
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001ccc:	2207      	movs	r2, #7
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	4798      	blx	r3
    //uart_print(MSG_RESPUESTA_INICIO_MEDICION); // Notifica la recepción de la respuesta
    //uart_vector_print(sizeof(dataBuf), dataBuf);   // Muestra la respuesta recibida

    // Cálculo y visualización de la longitud de la respuesta
    int longRespuesta = SHDLC_CalculateDataSize(dataBuf, sizeof(dataBuf)); // Calcula la longitud de los datos útiles
 8001cd2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001cd6:	2107      	movs	r1, #7
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff fe8b 	bl	80019f4 <SHDLC_CalculateDataSize>
 8001cde:	64f8      	str	r0, [r7, #76]	; 0x4c
    //snprintf(respuestaStr, sizeof(respuestaStr), MENSAJE_SIZE_RESPUESTA, longRespuesta);  // Formatea el mensaje de longitud
    //uart_print(respuestaStr); // Imprime la longitud de la respuesta
}
 8001ce0:	bf00      	nop
 8001ce2:	3750      	adds	r7, #80	; 0x50
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	0800b814 	.word	0x0800b814

08001cec <sps30_stop_measurement>:

void sps30_stop_measurement(SPS30 *self) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b094      	sub	sp, #80	; 0x50
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
    uint8_t stopCmd[] = SPS30_FRAME_STOP_MEASUREMENT;
 8001cf4:	4a13      	ldr	r2, [pc, #76]	; (8001d44 <sps30_stop_measurement+0x58>)
 8001cf6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001cfa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cfe:	6018      	str	r0, [r3, #0]
 8001d00:	3304      	adds	r3, #4
 8001d02:	8019      	strh	r1, [r3, #0]
    uint8_t dataBuf[BUFFER_SIZE_STOP_MEASUREMENT] = {0};
 8001d04:	2300      	movs	r3, #0
 8001d06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d08:	2300      	movs	r3, #0
 8001d0a:	643b      	str	r3, [r7, #64]	; 0x40
    char respuestaStr[BUFFER_SIZE_RESPONSE];

    //uart_print(MSG_SOLICITAR);
    //uart_vector_print(sizeof(stopCmd), stopCmd);
    self->send_command(self, stopCmd, sizeof(stopCmd));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001d14:	2206      	movs	r2, #6
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	4798      	blx	r3
    HAL_Delay(DELAY_STOP_MEASUREMENT);
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	f001 fb6c 	bl	80033f8 <HAL_Delay>

    self->receive_async(self, dataBuf, sizeof(dataBuf));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001d28:	2208      	movs	r2, #8
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	4798      	blx	r3
    //uart_print(MSG_RESPUESTA);
    //uart_vector_print(sizeof(dataBuf), dataBuf);

    int longRespuesta = SHDLC_CalculateDataSize(dataBuf, sizeof(dataBuf));
 8001d2e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d32:	2108      	movs	r1, #8
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff fe5d 	bl	80019f4 <SHDLC_CalculateDataSize>
 8001d3a:	64f8      	str	r0, [r7, #76]	; 0x4c
    //snprintf(respuestaStr, sizeof(respuestaStr), MENSAJE_SIZE_RESPUESTA, longRespuesta);
    //uart_print(respuestaStr);
}
 8001d3c:	bf00      	nop
 8001d3e:	3750      	adds	r7, #80	; 0x50
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	0800b81c 	.word	0x0800b81c

08001d48 <sps30_sleep>:

void sps30_sleep(SPS30 *self) {
 8001d48:	b590      	push	{r4, r7, lr}
 8001d4a:	b097      	sub	sp, #92	; 0x5c
 8001d4c:	af02      	add	r7, sp, #8
 8001d4e:	6078      	str	r0, [r7, #4]
    uint8_t sleepCmd[] = SPS30_FRAME_SLEEP;
 8001d50:	4a10      	ldr	r2, [pc, #64]	; (8001d94 <sps30_sleep+0x4c>)
 8001d52:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d5a:	6018      	str	r0, [r3, #0]
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	8019      	strh	r1, [r3, #0]
    uint8_t dataBuf[BUFFER_SIZE_SLEEP] = {0};
 8001d60:	2300      	movs	r3, #0
 8001d62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d64:	2300      	movs	r3, #0
 8001d66:	643b      	str	r3, [r7, #64]	; 0x40
    char respuestaStr[BUFFER_SIZE_RESPONSE];

    //uart_print(MSG_SOLICITAR);
    //uart_vector_print(sizeof(sleepCmd), sleepCmd);
    self->send_receive(self, sleepCmd, sizeof(sleepCmd), dataBuf, sizeof(dataBuf));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68dc      	ldr	r4, [r3, #12]
 8001d6c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d70:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001d74:	2208      	movs	r2, #8
 8001d76:	9200      	str	r2, [sp, #0]
 8001d78:	2206      	movs	r2, #6
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	47a0      	blx	r4
    //uart_print(MSG_RESPUESTA);
    //uart_vector_print(sizeof(dataBuf), dataBuf);

    int longRespuesta = SHDLC_CalculateDataSize(dataBuf, sizeof(dataBuf));
 8001d7e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d82:	2108      	movs	r1, #8
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff fe35 	bl	80019f4 <SHDLC_CalculateDataSize>
 8001d8a:	64f8      	str	r0, [r7, #76]	; 0x4c
    //snprintf(respuestaStr, sizeof(respuestaStr), MENSAJE_SIZE_RESPUESTA, longRespuesta);
    //uart_print(respuestaStr);
}
 8001d8c:	bf00      	nop
 8001d8e:	3754      	adds	r7, #84	; 0x54
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd90      	pop	{r4, r7, pc}
 8001d94:	0800b824 	.word	0x0800b824

08001d98 <sps30_read_data>:

void sps30_read_data(SPS30 *self) {
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	b0e1      	sub	sp, #388	; 0x184
 8001d9c:	af02      	add	r7, sp, #8
 8001d9e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001da2:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001da6:	6018      	str	r0, [r3, #0]
    uint8_t readCmd[] = SPS30_FRAME_READ_MEASUREMENT;
 8001da8:	4a2f      	ldr	r2, [pc, #188]	; (8001e68 <sps30_read_data+0xd0>)
 8001daa:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001dae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001db2:	6018      	str	r0, [r3, #0]
 8001db4:	3304      	adds	r3, #4
 8001db6:	8019      	strh	r1, [r3, #0]
    uint8_t dataBuf[BUFFER_SIZE_READ_DATA] = {0};
 8001db8:	2300      	movs	r3, #0
 8001dba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001dbe:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001dc2:	2238      	movs	r2, #56	; 0x38
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f004 fd86 	bl	80068d8 <memset>
    uint8_t originalData[BUFFER_SIZE_READ_DATA] = {0};
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001dd2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001dd6:	2238      	movs	r2, #56	; 0x38
 8001dd8:	2100      	movs	r1, #0
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f004 fd7c 	bl	80068d8 <memset>
    ConcentracionesPM concentraciones;
    char respuestaStr[BUFFER_SIZE_RESPONSE];

    //uart_print(MSG_SOLICITAR);
    //uart_vector_print(sizeof(readCmd), readCmd);
    self->send_receive(self, readCmd, sizeof(readCmd), dataBuf, sizeof(dataBuf));
 8001de0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001de4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68dc      	ldr	r4, [r3, #12]
 8001dec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001df0:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8001df4:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8001df8:	f5a2 70ba 	sub.w	r0, r2, #372	; 0x174
 8001dfc:	223c      	movs	r2, #60	; 0x3c
 8001dfe:	9200      	str	r2, [sp, #0]
 8001e00:	2206      	movs	r2, #6
 8001e02:	6800      	ldr	r0, [r0, #0]
 8001e04:	47a0      	blx	r4
    //uart_print(MSG_RESPUESTA);
    //uart_vector_print(sizeof(dataBuf), dataBuf);

    SHDLC_revertByteStuffing(dataBuf, sizeof(dataBuf), originalData);
 8001e06:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8001e0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001e0e:	213c      	movs	r1, #60	; 0x3c
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff fe3b 	bl	8001a8c <SHDLC_revertByteStuffing>
    //uart_print(MSG_RESPUESTA_CON_BYTESTUFFING);
    //uart_vector_print(sizeof(originalData), originalData);

    int longRespuesta = SHDLC_CalculateDataSize(originalData, sizeof(originalData));
 8001e16:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001e1a:	213c      	movs	r1, #60	; 0x3c
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fde9 	bl	80019f4 <SHDLC_CalculateDataSize>
 8001e22:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
    //snprintf(respuestaStr, sizeof(respuestaStr), MSG_LONGITUD_RESPUESTA, longRespuesta);
    //uart_print(respuestaStr);

    Shdlc_FrameMiso Newframe = {};
 8001e26:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001e2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001e2e:	4618      	mov	r0, r3
 8001e30:	2341      	movs	r3, #65	; 0x41
 8001e32:	461a      	mov	r2, r3
 8001e34:	2100      	movs	r1, #0
 8001e36:	f004 fd4f 	bl	80068d8 <memset>
    SHDLC_LoadMyVector(&Newframe, originalData, longRespuesta);
 8001e3a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001e3e:	f107 01f4 	add.w	r1, r7, #244	; 0xf4
 8001e42:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fd9e 	bl	8001988 <SHDLC_LoadMyVector>
    //uart_print(MSG_DATOS_RESPUESTA);
    //uart_vector_print(Newframe.lon, Newframe.myVector);

    SHDLC_llenarConcentraciones(&concentraciones, Newframe.myVector);
 8001e4c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e50:	1cda      	adds	r2, r3, #3
 8001e52:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff fea1 	bl	8001ba0 <SHDLC_llenarConcentraciones>
    //uart_print(buffer);
    //sprintf(buffer, FORMATO_CONCENTRACION_PM4_0, concentraciones.pm4_0);
    //uart_print(buffer);
    //sprintf(buffer, FORMATO_CONCENTRACION_PM10, concentraciones.pm10);
    //uart_print(buffer);
}
 8001e5e:	bf00      	nop
 8001e60:	f507 77be 	add.w	r7, r7, #380	; 0x17c
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd90      	pop	{r4, r7, pc}
 8001e68:	0800b82c 	.word	0x0800b82c

08001e6c <sps30_get_concentrations>:

ConcentracionesPM sps30_get_concentrations(SPS30 *self) {
 8001e6c:	b590      	push	{r4, r7, lr}
 8001e6e:	b0c3      	sub	sp, #268	; 0x10c
 8001e70:	af02      	add	r7, sp, #8
 8001e72:	6178      	str	r0, [r7, #20]
    uint8_t readCmd[] = SPS30_FRAME_READ_MEASUREMENT;
 8001e74:	4a37      	ldr	r2, [pc, #220]	; (8001f54 <sps30_get_concentrations+0xe8>)
 8001e76:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e7e:	6018      	str	r0, [r3, #0]
 8001e80:	3304      	adds	r3, #4
 8001e82:	8019      	strh	r1, [r3, #0]
    uint8_t dataBuf[BUFFER_SIZE_READ_DATA] = {0};
 8001e84:	2300      	movs	r3, #0
 8001e86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001e8a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001e8e:	2238      	movs	r2, #56	; 0x38
 8001e90:	2100      	movs	r1, #0
 8001e92:	4618      	mov	r0, r3
 8001e94:	f004 fd20 	bl	80068d8 <memset>
    uint8_t originalData[BUFFER_SIZE_READ_DATA] = {0};
 8001e98:	2300      	movs	r3, #0
 8001e9a:	673b      	str	r3, [r7, #112]	; 0x70
 8001e9c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ea0:	2238      	movs	r2, #56	; 0x38
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f004 fd17 	bl	80068d8 <memset>
    ConcentracionesPM concentraciones;

    self->send_receive(self, readCmd, sizeof(readCmd), dataBuf, sizeof(dataBuf));
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	68dc      	ldr	r4, [r3, #12]
 8001eae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001eb2:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8001eb6:	223c      	movs	r2, #60	; 0x3c
 8001eb8:	9200      	str	r2, [sp, #0]
 8001eba:	2206      	movs	r2, #6
 8001ebc:	6978      	ldr	r0, [r7, #20]
 8001ebe:	47a0      	blx	r4
    SHDLC_revertByteStuffing(dataBuf, sizeof(dataBuf), originalData);
 8001ec0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8001ec4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ec8:	213c      	movs	r1, #60	; 0x3c
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff fdde 	bl	8001a8c <SHDLC_revertByteStuffing>

    Shdlc_FrameMiso Newframe = {};
 8001ed0:	f107 031c 	add.w	r3, r7, #28
 8001ed4:	2241      	movs	r2, #65	; 0x41
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f004 fcfd 	bl	80068d8 <memset>
    SHDLC_LoadMyVector(&Newframe, originalData, SHDLC_CalculateDataSize(originalData, sizeof(originalData)));
 8001ede:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ee2:	213c      	movs	r1, #60	; 0x3c
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff fd85 	bl	80019f4 <SHDLC_CalculateDataSize>
 8001eea:	4603      	mov	r3, r0
 8001eec:	461a      	mov	r2, r3
 8001eee:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001ef2:	f107 031c 	add.w	r3, r7, #28
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fd46 	bl	8001988 <SHDLC_LoadMyVector>
    SHDLC_llenarConcentraciones(&concentraciones, Newframe.myVector);
 8001efc:	f107 031c 	add.w	r3, r7, #28
 8001f00:	1cda      	adds	r2, r3, #3
 8001f02:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001f06:	4611      	mov	r1, r2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff fe49 	bl	8001ba0 <SHDLC_llenarConcentraciones>

    return concentraciones;
 8001f0e:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 8001f12:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001f16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001f1c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8001f20:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8001f24:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8001f28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f2c:	ee06 0a10 	vmov	s12, r0
 8001f30:	ee06 1a90 	vmov	s13, r1
 8001f34:	ee07 2a10 	vmov	s14, r2
 8001f38:	ee07 3a90 	vmov	s15, r3
}
 8001f3c:	eeb0 0a46 	vmov.f32	s0, s12
 8001f40:	eef0 0a66 	vmov.f32	s1, s13
 8001f44:	eeb0 1a47 	vmov.f32	s2, s14
 8001f48:	eef0 1a67 	vmov.f32	s3, s15
 8001f4c:	f507 7782 	add.w	r7, r7, #260	; 0x104
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd90      	pop	{r4, r7, pc}
 8001f54:	0800b82c 	.word	0x0800b82c

08001f58 <sps30_serial_number>:

void sps30_serial_number(SPS30 *self) {
 8001f58:	b590      	push	{r4, r7, lr}
 8001f5a:	b0ad      	sub	sp, #180	; 0xb4
 8001f5c:	af02      	add	r7, sp, #8
 8001f5e:	6078      	str	r0, [r7, #4]
    uint8_t cmd[] = SPS30_FRAME_SERIAL_NUMBER;
 8001f60:	4a2d      	ldr	r2, [pc, #180]	; (8002018 <sps30_serial_number+0xc0>)
 8001f62:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001f66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f6a:	6018      	str	r0, [r3, #0]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	8019      	strh	r1, [r3, #0]
 8001f70:	3302      	adds	r3, #2
 8001f72:	0c0a      	lsrs	r2, r1, #16
 8001f74:	701a      	strb	r2, [r3, #0]
    uint8_t stuffed[BUFFER_SIZE_SERIAL_NUMBER] = {0};
 8001f76:	2300      	movs	r3, #0
 8001f78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001f7c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
 8001f8c:	615a      	str	r2, [r3, #20]
 8001f8e:	831a      	strh	r2, [r3, #24]
    uint8_t original[BUFFER_SIZE_SERIAL_NUMBER] = {0};
 8001f90:	2300      	movs	r3, #0
 8001f92:	663b      	str	r3, [r7, #96]	; 0x60
 8001f94:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]
 8001fa4:	615a      	str	r2, [r3, #20]
 8001fa6:	831a      	strh	r2, [r3, #24]

    self->send_receive(self, cmd, sizeof(cmd), stuffed, sizeof(stuffed));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68dc      	ldr	r4, [r3, #12]
 8001fac:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001fb0:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001fb4:	221e      	movs	r2, #30
 8001fb6:	9200      	str	r2, [sp, #0]
 8001fb8:	2207      	movs	r2, #7
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	47a0      	blx	r4
    SHDLC_revertByteStuffing(stuffed, sizeof(stuffed), original);
 8001fbe:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001fc2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001fc6:	211e      	movs	r1, #30
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff fd5f 	bl	8001a8c <SHDLC_revertByteStuffing>

    // Extrae los 16 bytes del número de serie a partir del offset 6
    char serial[17] = {0};  // 16 caracteres + nulo
 8001fce:	2300      	movs	r3, #0
 8001fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fd2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]
 8001fdc:	609a      	str	r2, [r3, #8]
 8001fde:	731a      	strb	r2, [r3, #12]
    memcpy(serial, &original[6], 16);  // Ajustar si cambia el protocolo
 8001fe0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001fe4:	1d99      	adds	r1, r3, #6
 8001fe6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fea:	2210      	movs	r2, #16
 8001fec:	4618      	mov	r0, r3
 8001fee:	f004 fc65 	bl	80068bc <memcpy>

    // Imprimir de forma legible
    char mensaje[64];
    snprintf(mensaje, sizeof(mensaje), "\nSerial Number: %s\n", serial);
 8001ff2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ff6:	f107 000c 	add.w	r0, r7, #12
 8001ffa:	4a08      	ldr	r2, [pc, #32]	; (800201c <sps30_serial_number+0xc4>)
 8001ffc:	2140      	movs	r1, #64	; 0x40
 8001ffe:	f005 fb69 	bl	80076d4 <sniprintf>
    uart.print(&uart, mensaje);
 8002002:	4b07      	ldr	r3, [pc, #28]	; (8002020 <sps30_serial_number+0xc8>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f107 020c 	add.w	r2, r7, #12
 800200a:	4611      	mov	r1, r2
 800200c:	4804      	ldr	r0, [pc, #16]	; (8002020 <sps30_serial_number+0xc8>)
 800200e:	4798      	blx	r3
}
 8002010:	bf00      	nop
 8002012:	37ac      	adds	r7, #172	; 0xac
 8002014:	46bd      	mov	sp, r7
 8002016:	bd90      	pop	{r4, r7, pc}
 8002018:	0800b848 	.word	0x0800b848
 800201c:	0800b834 	.word	0x0800b834
 8002020:	20001e18 	.word	0x20001e18

08002024 <sps30_wake_up>:


void sps30_wake_up(SPS30 *self) {
 8002024:	b590      	push	{r4, r7, lr}
 8002026:	b097      	sub	sp, #92	; 0x5c
 8002028:	af02      	add	r7, sp, #8
 800202a:	6078      	str	r0, [r7, #4]
    uint8_t Pulse = SPS30_PULSE_WAKE_UP;
 800202c:	23ff      	movs	r3, #255	; 0xff
 800202e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    uint8_t readCmd[] = SPS30_FRAME_WAKE_UP;
 8002032:	4a17      	ldr	r2, [pc, #92]	; (8002090 <sps30_wake_up+0x6c>)
 8002034:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002038:	e892 0003 	ldmia.w	r2, {r0, r1}
 800203c:	6018      	str	r0, [r3, #0]
 800203e:	3304      	adds	r3, #4
 8002040:	8019      	strh	r1, [r3, #0]
 8002042:	3302      	adds	r3, #2
 8002044:	0c0a      	lsrs	r2, r1, #16
 8002046:	701a      	strb	r2, [r3, #0]
    uint8_t dataBuf[BUFFER_SIZE_WAKEUP] = {0};
 8002048:	2300      	movs	r3, #0
 800204a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800204c:	2300      	movs	r3, #0
 800204e:	643b      	str	r3, [r7, #64]	; 0x40
    char respuestaStr[BUFFER_SIZE_RESPONSE];

    //uart_print(MSG_SOLICITAR);
    //uart_vector_print(sizeof(readCmd), readCmd);
    self->send_command(self, &Pulse, sizeof(Pulse));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f107 014b 	add.w	r1, r7, #75	; 0x4b
 8002058:	2201      	movs	r2, #1
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	4798      	blx	r3
    HAL_Delay(DELAY_WAKEUP);
 800205e:	2032      	movs	r0, #50	; 0x32
 8002060:	f001 f9ca 	bl	80033f8 <HAL_Delay>
    self->send_receive(self, readCmd, sizeof(readCmd), dataBuf, sizeof(dataBuf));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68dc      	ldr	r4, [r3, #12]
 8002068:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800206c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8002070:	2208      	movs	r2, #8
 8002072:	9200      	str	r2, [sp, #0]
 8002074:	2207      	movs	r2, #7
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	47a0      	blx	r4
    //uart_print(MSG_RESPUESTA);
    //uart_vector_print(sizeof(dataBuf), dataBuf);

    int longRespuesta = SHDLC_CalculateDataSize(dataBuf, sizeof(dataBuf));
 800207a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800207e:	2108      	movs	r1, #8
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff fcb7 	bl	80019f4 <SHDLC_CalculateDataSize>
 8002086:	64f8      	str	r0, [r7, #76]	; 0x4c
    //snprintf(respuestaStr, sizeof(respuestaStr), MENSAJE_SIZE_RESPUESTA, longRespuesta);
    //uart_print(respuestaStr);
}
 8002088:	bf00      	nop
 800208a:	3754      	adds	r7, #84	; 0x54
 800208c:	46bd      	mov	sp, r7
 800208e:	bd90      	pop	{r4, r7, pc}
 8002090:	0800b850 	.word	0x0800b850

08002094 <SPS30_init>:

void SPS30_init(SPS30 *self, UART_HandleTypeDef *huart) {
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
    self->huart = huart;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	601a      	str	r2, [r3, #0]
    self->send_command = sps30_send_command;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a11      	ldr	r2, [pc, #68]	; (80020ec <SPS30_init+0x58>)
 80020a8:	605a      	str	r2, [r3, #4]
    self->receive_async = sps30_receive_async;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a10      	ldr	r2, [pc, #64]	; (80020f0 <SPS30_init+0x5c>)
 80020ae:	609a      	str	r2, [r3, #8]
    self->send_receive = sps30_send_receive;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a10      	ldr	r2, [pc, #64]	; (80020f4 <SPS30_init+0x60>)
 80020b4:	60da      	str	r2, [r3, #12]
    self->start_measurement = sps30_start_measurement;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a0f      	ldr	r2, [pc, #60]	; (80020f8 <SPS30_init+0x64>)
 80020ba:	611a      	str	r2, [r3, #16]
    self->stop_measurement = sps30_stop_measurement;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a0f      	ldr	r2, [pc, #60]	; (80020fc <SPS30_init+0x68>)
 80020c0:	615a      	str	r2, [r3, #20]
    self->sleep = sps30_sleep;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a0e      	ldr	r2, [pc, #56]	; (8002100 <SPS30_init+0x6c>)
 80020c6:	619a      	str	r2, [r3, #24]
    self->read_data = sps30_read_data;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a0e      	ldr	r2, [pc, #56]	; (8002104 <SPS30_init+0x70>)
 80020cc:	61da      	str	r2, [r3, #28]
    self->serial_number = sps30_serial_number;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a0d      	ldr	r2, [pc, #52]	; (8002108 <SPS30_init+0x74>)
 80020d2:	621a      	str	r2, [r3, #32]
    self->wake_up = sps30_wake_up;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a0d      	ldr	r2, [pc, #52]	; (800210c <SPS30_init+0x78>)
 80020d8:	625a      	str	r2, [r3, #36]	; 0x24
    self->get_concentrations = sps30_get_concentrations;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a0c      	ldr	r2, [pc, #48]	; (8002110 <SPS30_init+0x7c>)
 80020de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	08001c0d 	.word	0x08001c0d
 80020f0:	08001c31 	.word	0x08001c31
 80020f4:	08001c55 	.word	0x08001c55
 80020f8:	08001c89 	.word	0x08001c89
 80020fc:	08001ced 	.word	0x08001ced
 8002100:	08001d49 	.word	0x08001d49
 8002104:	08001d99 	.word	0x08001d99
 8002108:	08001f59 	.word	0x08001f59
 800210c:	08002025 	.word	0x08002025
 8002110:	08001e6d 	.word	0x08001e6d

08002114 <inicializar_sensores_sps30>:
SensorSPS30 sensores_sps30[NUM_SENSORES_SPS30];
int sensores_disponibles = 0;

/* === Funciones ============================================================================== */

void inicializar_sensores_sps30(void) {
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
    sensores_disponibles = 0;
 8002118:	4b38      	ldr	r3, [pc, #224]	; (80021fc <inicializar_sensores_sps30+0xe8>)
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]

#if 1  // UART5 está habilitado
    sensores_sps30[sensores_disponibles].id   = 1;
 800211e:	4b37      	ldr	r3, [pc, #220]	; (80021fc <inicializar_sensores_sps30+0xe8>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a37      	ldr	r2, [pc, #220]	; (8002200 <inicializar_sensores_sps30+0xec>)
 8002124:	2134      	movs	r1, #52	; 0x34
 8002126:	fb01 f303 	mul.w	r3, r1, r3
 800212a:	4413      	add	r3, r2
 800212c:	332c      	adds	r3, #44	; 0x2c
 800212e:	2201      	movs	r2, #1
 8002130:	701a      	strb	r2, [r3, #0]
    sensores_sps30[sensores_disponibles].uart = &huart5;
 8002132:	4b32      	ldr	r3, [pc, #200]	; (80021fc <inicializar_sensores_sps30+0xe8>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a32      	ldr	r2, [pc, #200]	; (8002200 <inicializar_sensores_sps30+0xec>)
 8002138:	2134      	movs	r1, #52	; 0x34
 800213a:	fb01 f303 	mul.w	r3, r1, r3
 800213e:	4413      	add	r3, r2
 8002140:	3330      	adds	r3, #48	; 0x30
 8002142:	4a30      	ldr	r2, [pc, #192]	; (8002204 <inicializar_sensores_sps30+0xf0>)
 8002144:	601a      	str	r2, [r3, #0]
    SPS30_init(&sensores_sps30[sensores_disponibles].sensor, &huart5);
 8002146:	4b2d      	ldr	r3, [pc, #180]	; (80021fc <inicializar_sensores_sps30+0xe8>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2234      	movs	r2, #52	; 0x34
 800214c:	fb02 f303 	mul.w	r3, r2, r3
 8002150:	4a2b      	ldr	r2, [pc, #172]	; (8002200 <inicializar_sensores_sps30+0xec>)
 8002152:	4413      	add	r3, r2
 8002154:	492b      	ldr	r1, [pc, #172]	; (8002204 <inicializar_sensores_sps30+0xf0>)
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff ff9c 	bl	8002094 <SPS30_init>
    sensores_disponibles++;
 800215c:	4b27      	ldr	r3, [pc, #156]	; (80021fc <inicializar_sensores_sps30+0xe8>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	3301      	adds	r3, #1
 8002162:	4a26      	ldr	r2, [pc, #152]	; (80021fc <inicializar_sensores_sps30+0xe8>)
 8002164:	6013      	str	r3, [r2, #0]
#endif

#if 1  // Habilitar cuando uses UART7
    sensores_sps30[sensores_disponibles].id   = 2;
 8002166:	4b25      	ldr	r3, [pc, #148]	; (80021fc <inicializar_sensores_sps30+0xe8>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a25      	ldr	r2, [pc, #148]	; (8002200 <inicializar_sensores_sps30+0xec>)
 800216c:	2134      	movs	r1, #52	; 0x34
 800216e:	fb01 f303 	mul.w	r3, r1, r3
 8002172:	4413      	add	r3, r2
 8002174:	332c      	adds	r3, #44	; 0x2c
 8002176:	2202      	movs	r2, #2
 8002178:	701a      	strb	r2, [r3, #0]
    sensores_sps30[sensores_disponibles].uart = &huart7;
 800217a:	4b20      	ldr	r3, [pc, #128]	; (80021fc <inicializar_sensores_sps30+0xe8>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a20      	ldr	r2, [pc, #128]	; (8002200 <inicializar_sensores_sps30+0xec>)
 8002180:	2134      	movs	r1, #52	; 0x34
 8002182:	fb01 f303 	mul.w	r3, r1, r3
 8002186:	4413      	add	r3, r2
 8002188:	3330      	adds	r3, #48	; 0x30
 800218a:	4a1f      	ldr	r2, [pc, #124]	; (8002208 <inicializar_sensores_sps30+0xf4>)
 800218c:	601a      	str	r2, [r3, #0]
    SPS30_init(&sensores_sps30[sensores_disponibles].sensor, &huart7);
 800218e:	4b1b      	ldr	r3, [pc, #108]	; (80021fc <inicializar_sensores_sps30+0xe8>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2234      	movs	r2, #52	; 0x34
 8002194:	fb02 f303 	mul.w	r3, r2, r3
 8002198:	4a19      	ldr	r2, [pc, #100]	; (8002200 <inicializar_sensores_sps30+0xec>)
 800219a:	4413      	add	r3, r2
 800219c:	491a      	ldr	r1, [pc, #104]	; (8002208 <inicializar_sensores_sps30+0xf4>)
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff ff78 	bl	8002094 <SPS30_init>
    sensores_disponibles++;
 80021a4:	4b15      	ldr	r3, [pc, #84]	; (80021fc <inicializar_sensores_sps30+0xe8>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	3301      	adds	r3, #1
 80021aa:	4a14      	ldr	r2, [pc, #80]	; (80021fc <inicializar_sensores_sps30+0xe8>)
 80021ac:	6013      	str	r3, [r2, #0]
#endif

#if 1  // Habilitar cuando uses UART8
    sensores_sps30[sensores_disponibles].id   = 3;
 80021ae:	4b13      	ldr	r3, [pc, #76]	; (80021fc <inicializar_sensores_sps30+0xe8>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a13      	ldr	r2, [pc, #76]	; (8002200 <inicializar_sensores_sps30+0xec>)
 80021b4:	2134      	movs	r1, #52	; 0x34
 80021b6:	fb01 f303 	mul.w	r3, r1, r3
 80021ba:	4413      	add	r3, r2
 80021bc:	332c      	adds	r3, #44	; 0x2c
 80021be:	2203      	movs	r2, #3
 80021c0:	701a      	strb	r2, [r3, #0]
    sensores_sps30[sensores_disponibles].uart = &huart1;
 80021c2:	4b0e      	ldr	r3, [pc, #56]	; (80021fc <inicializar_sensores_sps30+0xe8>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a0e      	ldr	r2, [pc, #56]	; (8002200 <inicializar_sensores_sps30+0xec>)
 80021c8:	2134      	movs	r1, #52	; 0x34
 80021ca:	fb01 f303 	mul.w	r3, r1, r3
 80021ce:	4413      	add	r3, r2
 80021d0:	3330      	adds	r3, #48	; 0x30
 80021d2:	4a0e      	ldr	r2, [pc, #56]	; (800220c <inicializar_sensores_sps30+0xf8>)
 80021d4:	601a      	str	r2, [r3, #0]
    SPS30_init(&sensores_sps30[sensores_disponibles].sensor, &huart1);
 80021d6:	4b09      	ldr	r3, [pc, #36]	; (80021fc <inicializar_sensores_sps30+0xe8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2234      	movs	r2, #52	; 0x34
 80021dc:	fb02 f303 	mul.w	r3, r2, r3
 80021e0:	4a07      	ldr	r2, [pc, #28]	; (8002200 <inicializar_sensores_sps30+0xec>)
 80021e2:	4413      	add	r3, r2
 80021e4:	4909      	ldr	r1, [pc, #36]	; (800220c <inicializar_sensores_sps30+0xf8>)
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff ff54 	bl	8002094 <SPS30_init>
    sensores_disponibles++;
 80021ec:	4b03      	ldr	r3, [pc, #12]	; (80021fc <inicializar_sensores_sps30+0xe8>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	3301      	adds	r3, #1
 80021f2:	4a02      	ldr	r2, [pc, #8]	; (80021fc <inicializar_sensores_sps30+0xe8>)
 80021f4:	6013      	str	r3, [r2, #0]
#endif
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20001d84 	.word	0x20001d84
 8002200:	20001ce8 	.word	0x20001ce8
 8002204:	20001e48 	.word	0x20001e48
 8002208:	20001e8c 	.word	0x20001e8c
 800220c:	20001ed0 	.word	0x20001ed0

08002210 <rtc_external_available>:
RTC_Source active_rtc = RTC_SOURCE_INTERNAL;  // Por defecto

/**
 * @brief Verifica si el RTC externo responde por I2C
 */
static bool rtc_external_available(void) {
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
    return (HAL_I2C_IsDeviceReady(&hi2c2, DS3231_I2C_ADDR << 1, 3, 100) == HAL_OK);
 8002214:	2364      	movs	r3, #100	; 0x64
 8002216:	2203      	movs	r2, #3
 8002218:	21d0      	movs	r1, #208	; 0xd0
 800221a:	4805      	ldr	r0, [pc, #20]	; (8002230 <rtc_external_available+0x20>)
 800221c:	f002 f904 	bl	8004428 <HAL_I2C_IsDeviceReady>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	bf0c      	ite	eq
 8002226:	2301      	moveq	r3, #1
 8002228:	2300      	movne	r3, #0
 800222a:	b2db      	uxtb	r3, r3
}
 800222c:	4618      	mov	r0, r3
 800222e:	bd80      	pop	{r7, pc}
 8002230:	20001d98 	.word	0x20001d98

08002234 <rtc_auto_init>:

/**
 * @brief Inicializa automáticamente el RTC (externo o interno), y si está habilitado,
 *        configura la hora con el timestamp de compilación en caso de ser necesario.
 */
void rtc_auto_init(void) {
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0

    if (rtc_external_available()) {
 8002238:	f7ff ffea 	bl	8002210 <rtc_external_available>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d006      	beq.n	8002250 <rtc_auto_init+0x1c>
        DS3231_Init(&hi2c2);
 8002242:	4807      	ldr	r0, [pc, #28]	; (8002260 <rtc_auto_init+0x2c>)
 8002244:	f7ff f9f2 	bl	800162c <DS3231_Init>
        active_rtc = RTC_SOURCE_EXTERNAL;
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <rtc_auto_init+0x30>)
 800224a:	2201      	movs	r2, #1
 800224c:	701a      	strb	r2, [r3, #0]
           MX_RTC_Init(); // RTC interno
           active_rtc = RTC_SOURCE_INTERNAL;

           // Puedes agregar lógica similar aquí si quieres aplicar fallback también al RTC interno.
       }
   }
 800224e:	e004      	b.n	800225a <rtc_auto_init+0x26>
           MX_RTC_Init(); // RTC interno
 8002250:	f000 fc56 	bl	8002b00 <MX_RTC_Init>
           active_rtc = RTC_SOURCE_INTERNAL;
 8002254:	4b03      	ldr	r3, [pc, #12]	; (8002264 <rtc_auto_init+0x30>)
 8002256:	2200      	movs	r2, #0
 8002258:	701a      	strb	r2, [r3, #0]
   }
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20001d98 	.word	0x20001d98
 8002264:	20001d88 	.word	0x20001d88

08002268 <RTC_ReceiveTimeFromTerminal>:
 *
 * @note UART3 se utiliza para recibir datos y UART1 para eco de salida.
 * @note Utiliza uart_logger para mostrar instrucciones al usuario.
 */
bool RTC_ReceiveTimeFromTerminal(UART_HandleTypeDef *huart)
{
 8002268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800226a:	b0c3      	sub	sp, #268	; 0x10c
 800226c:	af06      	add	r7, sp, #24
 800226e:	6078      	str	r0, [r7, #4]
    char rx_buffer[32] = {0};
 8002270:	2300      	movs	r3, #0
 8002272:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002276:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	605a      	str	r2, [r3, #4]
 8002280:	609a      	str	r2, [r3, #8]
 8002282:	60da      	str	r2, [r3, #12]
 8002284:	611a      	str	r2, [r3, #16]
 8002286:	615a      	str	r2, [r3, #20]
 8002288:	619a      	str	r2, [r3, #24]
    char debug_buf[128];
    uint16_t year;

    HAL_StatusTypeDef status;
    uint32_t start_tick = HAL_GetTick();
 800228a:	f001 f8a9 	bl	80033e0 <HAL_GetTick>
 800228e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
    uint8_t idx = 0;
 8002292:	2300      	movs	r3, #0
 8002294:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

    uart_print_debug(huart, "Ingrese fecha y hora [YYYYMMDDHHMMSS;]:\r\n");
 8002298:	49a1      	ldr	r1, [pc, #644]	; (8002520 <RTC_ReceiveTimeFromTerminal+0x2b8>)
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f95f 	bl	800255e <uart_print_debug>

    while ((HAL_GetTick() - start_tick) < 30000) {
 80022a0:	e026      	b.n	80022f0 <RTC_ReceiveTimeFromTerminal+0x88>
        uint8_t ch;
        status = HAL_UART_Receive(huart, &ch, 1, 100);
 80022a2:	f107 010f 	add.w	r1, r7, #15
 80022a6:	2364      	movs	r3, #100	; 0x64
 80022a8:	2201      	movs	r2, #1
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f003 ff54 	bl	8006158 <HAL_UART_Receive>
 80022b0:	4603      	mov	r3, r0
 80022b2:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
        if (status == HAL_OK) {
 80022b6:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d118      	bne.n	80022f0 <RTC_ReceiveTimeFromTerminal+0x88>
            if (ch == ';') {
 80022be:	7bfb      	ldrb	r3, [r7, #15]
 80022c0:	2b3b      	cmp	r3, #59	; 0x3b
 80022c2:	d107      	bne.n	80022d4 <RTC_ReceiveTimeFromTerminal+0x6c>
                rx_buffer[idx] = '\0';
 80022c4:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80022c8:	33f0      	adds	r3, #240	; 0xf0
 80022ca:	443b      	add	r3, r7
 80022cc:	2200      	movs	r2, #0
 80022ce:	f803 2c2c 	strb.w	r2, [r3, #-44]
 80022d2:	e017      	b.n	8002304 <RTC_ReceiveTimeFromTerminal+0x9c>
                break;
            }
            if (idx < sizeof(rx_buffer) - 1) {
 80022d4:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80022d8:	2b1e      	cmp	r3, #30
 80022da:	d809      	bhi.n	80022f0 <RTC_ReceiveTimeFromTerminal+0x88>
                rx_buffer[idx++] = ch;
 80022dc:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80022e0:	1c5a      	adds	r2, r3, #1
 80022e2:	f887 20ef 	strb.w	r2, [r7, #239]	; 0xef
 80022e6:	7bfa      	ldrb	r2, [r7, #15]
 80022e8:	33f0      	adds	r3, #240	; 0xf0
 80022ea:	443b      	add	r3, r7
 80022ec:	f803 2c2c 	strb.w	r2, [r3, #-44]
    while ((HAL_GetTick() - start_tick) < 30000) {
 80022f0:	f001 f876 	bl	80033e0 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	f247 522f 	movw	r2, #29999	; 0x752f
 8002300:	4293      	cmp	r3, r2
 8002302:	d9ce      	bls.n	80022a2 <RTC_ReceiveTimeFromTerminal+0x3a>
            }
        }
    }

    if (idx < 14) {
 8002304:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8002308:	2b0d      	cmp	r3, #13
 800230a:	d805      	bhi.n	8002318 <RTC_ReceiveTimeFromTerminal+0xb0>
        uart_print_debug(huart, "Tiempo expirado o entrada incompleta. Se mantiene hora RTC actual.\r\n");
 800230c:	4985      	ldr	r1, [pc, #532]	; (8002524 <RTC_ReceiveTimeFromTerminal+0x2bc>)
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f925 	bl	800255e <uart_print_debug>
        return false;
 8002314:	2300      	movs	r3, #0
 8002316:	e0fe      	b.n	8002516 <RTC_ReceiveTimeFromTerminal+0x2ae>
    }

    snprintf(debug_buf, sizeof(debug_buf), "[DEBUG] Entrada recibida: %s\r\n", rx_buffer);
 8002318:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800231c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8002320:	4a81      	ldr	r2, [pc, #516]	; (8002528 <RTC_ReceiveTimeFromTerminal+0x2c0>)
 8002322:	2180      	movs	r1, #128	; 0x80
 8002324:	f005 f9d6 	bl	80076d4 <sniprintf>
    uart_print_debug(huart, debug_buf);
 8002328:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800232c:	4619      	mov	r1, r3
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f915 	bl	800255e <uart_print_debug>

    // Limpiar caracteres como '\r', '\n' o ';'
    rx_buffer[strcspn(rx_buffer, "\r\n;")] = '\0';
 8002334:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002338:	497c      	ldr	r1, [pc, #496]	; (800252c <RTC_ReceiveTimeFromTerminal+0x2c4>)
 800233a:	4618      	mov	r0, r3
 800233c:	f005 fa69 	bl	8007812 <strcspn>
 8002340:	4603      	mov	r3, r0
 8002342:	33f0      	adds	r3, #240	; 0xf0
 8002344:	443b      	add	r3, r7
 8002346:	2200      	movs	r2, #0
 8002348:	f803 2c2c 	strb.w	r2, [r3, #-44]

    // Parseo manual
    char year_str[5] = {0}, month_str[3] = {0}, day_str[3] = {0};
 800234c:	2300      	movs	r3, #0
 800234e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002350:	2300      	movs	r3, #0
 8002352:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8002356:	4b76      	ldr	r3, [pc, #472]	; (8002530 <RTC_ReceiveTimeFromTerminal+0x2c8>)
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	873b      	strh	r3, [r7, #56]	; 0x38
 800235c:	2300      	movs	r3, #0
 800235e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8002362:	4b73      	ldr	r3, [pc, #460]	; (8002530 <RTC_ReceiveTimeFromTerminal+0x2c8>)
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002368:	2300      	movs	r3, #0
 800236a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    char hour_str[3] = {0}, min_str[3] = {0}, sec_str[3] = {0};
 800236e:	4b70      	ldr	r3, [pc, #448]	; (8002530 <RTC_ReceiveTimeFromTerminal+0x2c8>)
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	863b      	strh	r3, [r7, #48]	; 0x30
 8002374:	2300      	movs	r3, #0
 8002376:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800237a:	4b6d      	ldr	r3, [pc, #436]	; (8002530 <RTC_ReceiveTimeFromTerminal+0x2c8>)
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002380:	2300      	movs	r3, #0
 8002382:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002386:	4b6a      	ldr	r3, [pc, #424]	; (8002530 <RTC_ReceiveTimeFromTerminal+0x2c8>)
 8002388:	881b      	ldrh	r3, [r3, #0]
 800238a:	853b      	strh	r3, [r7, #40]	; 0x28
 800238c:	2300      	movs	r3, #0
 800238e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

    strncpy(year_str,  rx_buffer +  0, 4);
 8002392:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8002396:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800239a:	2204      	movs	r2, #4
 800239c:	4618      	mov	r0, r3
 800239e:	f005 fa5d 	bl	800785c <strncpy>
    strncpy(month_str, rx_buffer +  4, 2);
 80023a2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80023a6:	3304      	adds	r3, #4
 80023a8:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80023ac:	2202      	movs	r2, #2
 80023ae:	4619      	mov	r1, r3
 80023b0:	f005 fa54 	bl	800785c <strncpy>
    strncpy(day_str,   rx_buffer +  6, 2);
 80023b4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80023b8:	3306      	adds	r3, #6
 80023ba:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80023be:	2202      	movs	r2, #2
 80023c0:	4619      	mov	r1, r3
 80023c2:	f005 fa4b 	bl	800785c <strncpy>
    strncpy(hour_str,  rx_buffer +  8, 2);
 80023c6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80023ca:	3308      	adds	r3, #8
 80023cc:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80023d0:	2202      	movs	r2, #2
 80023d2:	4619      	mov	r1, r3
 80023d4:	f005 fa42 	bl	800785c <strncpy>
    strncpy(min_str,   rx_buffer + 10, 2);
 80023d8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80023dc:	330a      	adds	r3, #10
 80023de:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80023e2:	2202      	movs	r2, #2
 80023e4:	4619      	mov	r1, r3
 80023e6:	f005 fa39 	bl	800785c <strncpy>
    strncpy(sec_str,   rx_buffer + 12, 2);
 80023ea:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80023ee:	330c      	adds	r3, #12
 80023f0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80023f4:	2202      	movs	r2, #2
 80023f6:	4619      	mov	r1, r3
 80023f8:	f005 fa30 	bl	800785c <strncpy>

    year = atoi(year_str);
 80023fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002400:	4618      	mov	r0, r3
 8002402:	f004 fa2d 	bl	8006860 <atoi>
 8002406:	4603      	mov	r3, r0
 8002408:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
    RTC_DateTypeDef date = {0};
 800240c:	2300      	movs	r3, #0
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
    RTC_TimeTypeDef time = {0};
 8002410:	f107 0310 	add.w	r3, r7, #16
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	60da      	str	r2, [r3, #12]
 800241e:	611a      	str	r2, [r3, #16]

    date.Month     = atoi(month_str);
 8002420:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002424:	4618      	mov	r0, r3
 8002426:	f004 fa1b 	bl	8006860 <atoi>
 800242a:	4603      	mov	r3, r0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    date.Date      = atoi(day_str);
 8002432:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002436:	4618      	mov	r0, r3
 8002438:	f004 fa12 	bl	8006860 <atoi>
 800243c:	4603      	mov	r3, r0
 800243e:	b2db      	uxtb	r3, r3
 8002440:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    time.Hours     = atoi(hour_str);
 8002444:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002448:	4618      	mov	r0, r3
 800244a:	f004 fa09 	bl	8006860 <atoi>
 800244e:	4603      	mov	r3, r0
 8002450:	b2db      	uxtb	r3, r3
 8002452:	743b      	strb	r3, [r7, #16]
    time.Minutes   = atoi(min_str);
 8002454:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002458:	4618      	mov	r0, r3
 800245a:	f004 fa01 	bl	8006860 <atoi>
 800245e:	4603      	mov	r3, r0
 8002460:	b2db      	uxtb	r3, r3
 8002462:	747b      	strb	r3, [r7, #17]
    time.Seconds   = atoi(sec_str);
 8002464:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002468:	4618      	mov	r0, r3
 800246a:	f004 f9f9 	bl	8006860 <atoi>
 800246e:	4603      	mov	r3, r0
 8002470:	b2db      	uxtb	r3, r3
 8002472:	74bb      	strb	r3, [r7, #18]

    snprintf(debug_buf, sizeof(debug_buf),
 8002474:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
             "Fecha parseada: %04u-%02u-%02u %02u:%02u:%02u\r\n",
             year, date.Month, date.Date,
 8002478:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800247c:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
             time.Hours, time.Minutes, time.Seconds);
 8002480:	7c38      	ldrb	r0, [r7, #16]
    snprintf(debug_buf, sizeof(debug_buf),
 8002482:	4604      	mov	r4, r0
             time.Hours, time.Minutes, time.Seconds);
 8002484:	7c78      	ldrb	r0, [r7, #17]
    snprintf(debug_buf, sizeof(debug_buf),
 8002486:	4605      	mov	r5, r0
             time.Hours, time.Minutes, time.Seconds);
 8002488:	7cb8      	ldrb	r0, [r7, #18]
    snprintf(debug_buf, sizeof(debug_buf),
 800248a:	4606      	mov	r6, r0
 800248c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8002490:	9604      	str	r6, [sp, #16]
 8002492:	9503      	str	r5, [sp, #12]
 8002494:	9402      	str	r4, [sp, #8]
 8002496:	9101      	str	r1, [sp, #4]
 8002498:	9200      	str	r2, [sp, #0]
 800249a:	4a26      	ldr	r2, [pc, #152]	; (8002534 <RTC_ReceiveTimeFromTerminal+0x2cc>)
 800249c:	2180      	movs	r1, #128	; 0x80
 800249e:	f005 f919 	bl	80076d4 <sniprintf>
    uart_print_debug(huart, debug_buf);
 80024a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80024a6:	4619      	mov	r1, r3
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 f858 	bl	800255e <uart_print_debug>

    if (year < 2000 || year > 2099) {
 80024ae:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 80024b2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80024b6:	d305      	bcc.n	80024c4 <RTC_ReceiveTimeFromTerminal+0x25c>
 80024b8:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 80024bc:	f640 0233 	movw	r2, #2099	; 0x833
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d905      	bls.n	80024d0 <RTC_ReceiveTimeFromTerminal+0x268>
        uart_print_debug(huart, "Año fuera de rango\r\n");
 80024c4:	491c      	ldr	r1, [pc, #112]	; (8002538 <RTC_ReceiveTimeFromTerminal+0x2d0>)
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f849 	bl	800255e <uart_print_debug>
        return false;
 80024cc:	2300      	movs	r3, #0
 80024ce:	e022      	b.n	8002516 <RTC_ReceiveTimeFromTerminal+0x2ae>
    }

    date.Year = (uint8_t)(year - 2000);
 80024d0:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	3330      	adds	r3, #48	; 0x30
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    date.WeekDay = 1;
 80024de:	2301      	movs	r3, #1
 80024e0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

    if (!RTC_DS3231_Set(&date, &time)) {
 80024e4:	f107 0210 	add.w	r2, r7, #16
 80024e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ec:	4611      	mov	r1, r2
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff fa14 	bl	800191c <RTC_DS3231_Set>
 80024f4:	4603      	mov	r3, r0
 80024f6:	f083 0301 	eor.w	r3, r3, #1
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d005      	beq.n	800250c <RTC_ReceiveTimeFromTerminal+0x2a4>
        uart_print_debug(huart, "Error al configurar el RTC.\r\n");
 8002500:	490e      	ldr	r1, [pc, #56]	; (800253c <RTC_ReceiveTimeFromTerminal+0x2d4>)
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f82b 	bl	800255e <uart_print_debug>
        return false;
 8002508:	2300      	movs	r3, #0
 800250a:	e004      	b.n	8002516 <RTC_ReceiveTimeFromTerminal+0x2ae>
    }

    uart_print_debug(huart, "RTC actualizado exitosamente.\r\n");
 800250c:	490c      	ldr	r1, [pc, #48]	; (8002540 <RTC_ReceiveTimeFromTerminal+0x2d8>)
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f825 	bl	800255e <uart_print_debug>
    return true;
 8002514:	2301      	movs	r3, #1
}
 8002516:	4618      	mov	r0, r3
 8002518:	37f4      	adds	r7, #244	; 0xf4
 800251a:	46bd      	mov	sp, r7
 800251c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800251e:	bf00      	nop
 8002520:	0800b858 	.word	0x0800b858
 8002524:	0800b884 	.word	0x0800b884
 8002528:	0800b8cc 	.word	0x0800b8cc
 800252c:	0800b8ec 	.word	0x0800b8ec
 8002530:	0800b978 	.word	0x0800b978
 8002534:	0800b8f0 	.word	0x0800b8f0
 8002538:	0800b920 	.word	0x0800b920
 800253c:	0800b938 	.word	0x0800b938
 8002540:	0800b958 	.word	0x0800b958

08002544 <time_rtc_GetFormattedDateTime>:
// Compatibilidad con nombres anteriores
void time_rtc_Init(void) {
    rtc_auto_init();
}

void time_rtc_GetFormattedDateTime(char *buffer, size_t len) {
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
    rtc_get_time(buffer, len);
 800254e:	6839      	ldr	r1, [r7, #0]
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff f9b9 	bl	80018c8 <rtc_get_time>
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <uart_print_debug>:
    }
    uart_print(self, buffer); // Imprimir todos los bytes formateados.
}


void uart_print_debug(UART_HandleTypeDef *huart, const char *msg) {
 800255e:	b580      	push	{r7, lr}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002568:	6838      	ldr	r0, [r7, #0]
 800256a:	f7fd fe41 	bl	80001f0 <strlen>
 800256e:	4603      	mov	r3, r0
 8002570:	b29a      	uxth	r2, r3
 8002572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002576:	6839      	ldr	r1, [r7, #0]
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f003 fd5b 	bl	8006034 <HAL_UART_Transmit>
}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <uart_default_print>:


static void uart_default_print(UART_Printing *self, const char *message) {
 8002586:	b590      	push	{r4, r7, lr}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(self->huart, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681c      	ldr	r4, [r3, #0]
 8002594:	6838      	ldr	r0, [r7, #0]
 8002596:	f7fd fe2b 	bl	80001f0 <strlen>
 800259a:	4603      	mov	r3, r0
 800259c:	b29a      	uxth	r2, r3
 800259e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025a2:	6839      	ldr	r1, [r7, #0]
 80025a4:	4620      	mov	r0, r4
 80025a6:	f003 fd45 	bl	8006034 <HAL_UART_Transmit>
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd90      	pop	{r4, r7, pc}

080025b2 <uart_default_vector_print>:

static void uart_default_vector_print(UART_Printing *self, uint16_t data_len, const uint8_t *data) {
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b084      	sub	sp, #16
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	60f8      	str	r0, [r7, #12]
 80025ba:	460b      	mov	r3, r1
 80025bc:	607a      	str	r2, [r7, #4]
 80025be:	817b      	strh	r3, [r7, #10]
    HAL_UART_Transmit(self->huart, (uint8_t *)data, data_len, HAL_MAX_DELAY);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6818      	ldr	r0, [r3, #0]
 80025c4:	897a      	ldrh	r2, [r7, #10]
 80025c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	f003 fd32 	bl	8006034 <HAL_UART_Transmit>
}
 80025d0:	bf00      	nop
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <UART_Printing_init>:

UART_Printing uart_logger;

void UART_Printing_init(UART_Printing *self, UART_HandleTypeDef *huart) {
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
    self->huart = huart;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	601a      	str	r2, [r3, #0]
    self->print = uart_default_print;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a05      	ldr	r2, [pc, #20]	; (8002600 <UART_Printing_init+0x28>)
 80025ec:	605a      	str	r2, [r3, #4]
    self->vector_print = uart_default_vector_print;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a04      	ldr	r2, [pc, #16]	; (8002604 <UART_Printing_init+0x2c>)
 80025f2:	609a      	str	r2, [r3, #8]
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	08002587 	.word	0x08002587
 8002604:	080025b3 	.word	0x080025b3

08002608 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	4b1e      	ldr	r3, [pc, #120]	; (800268c <MX_GPIO_Init+0x84>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	4a1d      	ldr	r2, [pc, #116]	; (800268c <MX_GPIO_Init+0x84>)
 8002618:	f043 0320 	orr.w	r3, r3, #32
 800261c:	6313      	str	r3, [r2, #48]	; 0x30
 800261e:	4b1b      	ldr	r3, [pc, #108]	; (800268c <MX_GPIO_Init+0x84>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	f003 0320 	and.w	r3, r3, #32
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	4b17      	ldr	r3, [pc, #92]	; (800268c <MX_GPIO_Init+0x84>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	4a16      	ldr	r2, [pc, #88]	; (800268c <MX_GPIO_Init+0x84>)
 8002634:	f043 0308 	orr.w	r3, r3, #8
 8002638:	6313      	str	r3, [r2, #48]	; 0x30
 800263a:	4b14      	ldr	r3, [pc, #80]	; (800268c <MX_GPIO_Init+0x84>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	60bb      	str	r3, [r7, #8]
 8002644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	607b      	str	r3, [r7, #4]
 800264a:	4b10      	ldr	r3, [pc, #64]	; (800268c <MX_GPIO_Init+0x84>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	4a0f      	ldr	r2, [pc, #60]	; (800268c <MX_GPIO_Init+0x84>)
 8002650:	f043 0304 	orr.w	r3, r3, #4
 8002654:	6313      	str	r3, [r2, #48]	; 0x30
 8002656:	4b0d      	ldr	r3, [pc, #52]	; (800268c <MX_GPIO_Init+0x84>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	f003 0304 	and.w	r3, r3, #4
 800265e:	607b      	str	r3, [r7, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	603b      	str	r3, [r7, #0]
 8002666:	4b09      	ldr	r3, [pc, #36]	; (800268c <MX_GPIO_Init+0x84>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	4a08      	ldr	r2, [pc, #32]	; (800268c <MX_GPIO_Init+0x84>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	6313      	str	r3, [r2, #48]	; 0x30
 8002672:	4b06      	ldr	r3, [pc, #24]	; (800268c <MX_GPIO_Init+0x84>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	603b      	str	r3, [r7, #0]
 800267c:	683b      	ldr	r3, [r7, #0]

}
 800267e:	bf00      	nop
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40023800 	.word	0x40023800

08002690 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002694:	4b1b      	ldr	r3, [pc, #108]	; (8002704 <MX_I2C2_Init+0x74>)
 8002696:	4a1c      	ldr	r2, [pc, #112]	; (8002708 <MX_I2C2_Init+0x78>)
 8002698:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800269a:	4b1a      	ldr	r3, [pc, #104]	; (8002704 <MX_I2C2_Init+0x74>)
 800269c:	4a1b      	ldr	r2, [pc, #108]	; (800270c <MX_I2C2_Init+0x7c>)
 800269e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80026a0:	4b18      	ldr	r3, [pc, #96]	; (8002704 <MX_I2C2_Init+0x74>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80026a6:	4b17      	ldr	r3, [pc, #92]	; (8002704 <MX_I2C2_Init+0x74>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026ac:	4b15      	ldr	r3, [pc, #84]	; (8002704 <MX_I2C2_Init+0x74>)
 80026ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026b2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026b4:	4b13      	ldr	r3, [pc, #76]	; (8002704 <MX_I2C2_Init+0x74>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80026ba:	4b12      	ldr	r3, [pc, #72]	; (8002704 <MX_I2C2_Init+0x74>)
 80026bc:	2200      	movs	r2, #0
 80026be:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026c0:	4b10      	ldr	r3, [pc, #64]	; (8002704 <MX_I2C2_Init+0x74>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026c6:	4b0f      	ldr	r3, [pc, #60]	; (8002704 <MX_I2C2_Init+0x74>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80026cc:	480d      	ldr	r0, [pc, #52]	; (8002704 <MX_I2C2_Init+0x74>)
 80026ce:	f001 f949 	bl	8003964 <HAL_I2C_Init>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80026d8:	f000 fa0c 	bl	8002af4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026dc:	2100      	movs	r1, #0
 80026de:	4809      	ldr	r0, [pc, #36]	; (8002704 <MX_I2C2_Init+0x74>)
 80026e0:	f002 fb93 	bl	8004e0a <HAL_I2CEx_ConfigAnalogFilter>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80026ea:	f000 fa03 	bl	8002af4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80026ee:	2100      	movs	r1, #0
 80026f0:	4804      	ldr	r0, [pc, #16]	; (8002704 <MX_I2C2_Init+0x74>)
 80026f2:	f002 fbc6 	bl	8004e82 <HAL_I2CEx_ConfigDigitalFilter>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80026fc:	f000 f9fa 	bl	8002af4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002700:	bf00      	nop
 8002702:	bd80      	pop	{r7, pc}
 8002704:	20001d98 	.word	0x20001d98
 8002708:	40005800 	.word	0x40005800
 800270c:	000186a0 	.word	0x000186a0

08002710 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b08a      	sub	sp, #40	; 0x28
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002718:	f107 0314 	add.w	r3, r7, #20
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a19      	ldr	r2, [pc, #100]	; (8002794 <HAL_I2C_MspInit+0x84>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d12b      	bne.n	800278a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	613b      	str	r3, [r7, #16]
 8002736:	4b18      	ldr	r3, [pc, #96]	; (8002798 <HAL_I2C_MspInit+0x88>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	4a17      	ldr	r2, [pc, #92]	; (8002798 <HAL_I2C_MspInit+0x88>)
 800273c:	f043 0320 	orr.w	r3, r3, #32
 8002740:	6313      	str	r3, [r2, #48]	; 0x30
 8002742:	4b15      	ldr	r3, [pc, #84]	; (8002798 <HAL_I2C_MspInit+0x88>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	f003 0320 	and.w	r3, r3, #32
 800274a:	613b      	str	r3, [r7, #16]
 800274c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800274e:	2303      	movs	r3, #3
 8002750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002752:	2312      	movs	r3, #18
 8002754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002756:	2300      	movs	r3, #0
 8002758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800275a:	2303      	movs	r3, #3
 800275c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800275e:	2304      	movs	r3, #4
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002762:	f107 0314 	add.w	r3, r7, #20
 8002766:	4619      	mov	r1, r3
 8002768:	480c      	ldr	r0, [pc, #48]	; (800279c <HAL_I2C_MspInit+0x8c>)
 800276a:	f000 ff4f 	bl	800360c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	4b09      	ldr	r3, [pc, #36]	; (8002798 <HAL_I2C_MspInit+0x88>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	4a08      	ldr	r2, [pc, #32]	; (8002798 <HAL_I2C_MspInit+0x88>)
 8002778:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800277c:	6413      	str	r3, [r2, #64]	; 0x40
 800277e:	4b06      	ldr	r3, [pc, #24]	; (8002798 <HAL_I2C_MspInit+0x88>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800278a:	bf00      	nop
 800278c:	3728      	adds	r7, #40	; 0x28
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40005800 	.word	0x40005800
 8002798:	40023800 	.word	0x40023800
 800279c:	40021400 	.word	0x40021400

080027a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b0b2      	sub	sp, #200	; 0xc8
 80027a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027a6:	f000 fdb5 	bl	8003314 <HAL_Init>
    // SPS30_Init(&huart5);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027aa:	f000 f941 	bl	8002a30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027ae:	f7ff ff2b 	bl	8002608 <MX_GPIO_Init>
  MX_RTC_Init();
 80027b2:	f000 f9a5 	bl	8002b00 <MX_RTC_Init>
  MX_UART5_Init();
 80027b6:	f000 fb51 	bl	8002e5c <MX_UART5_Init>
  MX_USART3_UART_Init();
 80027ba:	f000 fbcd 	bl	8002f58 <MX_USART3_UART_Init>
  MX_UART7_Init();
 80027be:	f000 fb77 	bl	8002eb0 <MX_UART7_Init>
  MX_USART6_UART_Init();
 80027c2:	f000 fbf3 	bl	8002fac <MX_USART6_UART_Init>
  MX_USART1_UART_Init();
 80027c6:	f000 fb9d 	bl	8002f04 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80027ca:	f7ff ff61 	bl	8002690 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* Inicializar sensores SPS30 disponibles*/
  rtc_auto_init();    // Detecta y configura el RTC correcto
 80027ce:	f7ff fd31 	bl	8002234 <rtc_auto_init>
  UART_Printing_init(&uart_logger, &huart3);
 80027d2:	4983      	ldr	r1, [pc, #524]	; (80029e0 <main+0x240>)
 80027d4:	4883      	ldr	r0, [pc, #524]	; (80029e4 <main+0x244>)
 80027d6:	f7ff feff 	bl	80025d8 <UART_Printing_init>
  rtc_set_test_time(); // <- llamada de prueba
 80027da:	f7ff f897 	bl	800190c <rtc_set_test_time>

  //char fecha_hora[32];
  //obtener_fecha_hora(fecha_hora);
 //uart_printf("Fecha y hora actual: %s\r\n", fecha_hora);

  inicializar_sensores_sps30();
 80027de:	f7ff fc99 	bl	8002114 <inicializar_sensores_sps30>



  /*Inicializar el objeto SPS30 con el manejador de UART*/

  SPS30_init(&sps30, &huart5);
 80027e2:	4981      	ldr	r1, [pc, #516]	; (80029e8 <main+0x248>)
 80027e4:	4881      	ldr	r0, [pc, #516]	; (80029ec <main+0x24c>)
 80027e6:	f7ff fc55 	bl	8002094 <SPS30_init>
  UART_Printing_init(&uart_logger, &huart3);
 80027ea:	497d      	ldr	r1, [pc, #500]	; (80029e0 <main+0x240>)
 80027ec:	487d      	ldr	r0, [pc, #500]	; (80029e4 <main+0x244>)
 80027ee:	f7ff fef3 	bl	80025d8 <UART_Printing_init>


  /* Initialize RTC */

  uart_logger.print(&uart, "Inicializando RTC DS3231...\n");
 80027f2:	4b7c      	ldr	r3, [pc, #496]	; (80029e4 <main+0x244>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	497e      	ldr	r1, [pc, #504]	; (80029f0 <main+0x250>)
 80027f8:	487e      	ldr	r0, [pc, #504]	; (80029f4 <main+0x254>)
 80027fa:	4798      	blx	r3
  //time_rtc_Init(&hi2c2);



  /* Initialization welcome message */
  uart_logger.print(&uart, "\n\n-----------------------------------------------------------\n");
 80027fc:	4b79      	ldr	r3, [pc, #484]	; (80029e4 <main+0x244>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	497d      	ldr	r1, [pc, #500]	; (80029f8 <main+0x258>)
 8002802:	487c      	ldr	r0, [pc, #496]	; (80029f4 <main+0x254>)
 8002804:	4798      	blx	r3
  uart_logger.print(&uart, "*** Sistema de Monitoreo de Material Particulado ***\n");
 8002806:	4b77      	ldr	r3, [pc, #476]	; (80029e4 <main+0x244>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	497c      	ldr	r1, [pc, #496]	; (80029fc <main+0x25c>)
 800280c:	4879      	ldr	r0, [pc, #484]	; (80029f4 <main+0x254>)
 800280e:	4798      	blx	r3
  uart_logger.print(&uart, "-----------------------------------------------------------\n");
 8002810:	4b74      	ldr	r3, [pc, #464]	; (80029e4 <main+0x244>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	497a      	ldr	r1, [pc, #488]	; (8002a00 <main+0x260>)
 8002816:	4877      	ldr	r0, [pc, #476]	; (80029f4 <main+0x254>)
 8002818:	4798      	blx	r3




  /* Initialize RTC */
  uart_logger.print(&uart_logger, "Inicializando RTC DS1307...\n");
 800281a:	4b72      	ldr	r3, [pc, #456]	; (80029e4 <main+0x244>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	4979      	ldr	r1, [pc, #484]	; (8002a04 <main+0x264>)
 8002820:	4870      	ldr	r0, [pc, #448]	; (80029e4 <main+0x244>)
 8002822:	4798      	blx	r3
  //time_rtc_Init(&hi2c2);

   /*Despierta al sensor SPS30*/
   sps30.wake_up(&sps30);
 8002824:	4b71      	ldr	r3, [pc, #452]	; (80029ec <main+0x24c>)
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	4870      	ldr	r0, [pc, #448]	; (80029ec <main+0x24c>)
 800282a:	4798      	blx	r3
   uart_logger.print(&uart_logger, "WAKE UP :\n");
 800282c:	4b6d      	ldr	r3, [pc, #436]	; (80029e4 <main+0x244>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	4975      	ldr	r1, [pc, #468]	; (8002a08 <main+0x268>)
 8002832:	486c      	ldr	r0, [pc, #432]	; (80029e4 <main+0x244>)
 8002834:	4798      	blx	r3


   /* Initialize data logger */
     uart_logger.print(&uart_logger, "Inicializando sistema de almacenamiento de datos...\n");
 8002836:	4b6b      	ldr	r3, [pc, #428]	; (80029e4 <main+0x244>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	4974      	ldr	r1, [pc, #464]	; (8002a0c <main+0x26c>)
 800283c:	4869      	ldr	r0, [pc, #420]	; (80029e4 <main+0x244>)
 800283e:	4798      	blx	r3
     if (!data_logger_init()) {
 8002840:	f7fe fc28 	bl	8001094 <data_logger_init>
 8002844:	4603      	mov	r3, r0
 8002846:	f083 0301 	eor.w	r3, r3, #1
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d004      	beq.n	800285a <main+0xba>
         uart_logger.print(&uart_logger, "¡Error al inicializar el sistema de almacenamiento!\n");
 8002850:	4b64      	ldr	r3, [pc, #400]	; (80029e4 <main+0x244>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	496e      	ldr	r1, [pc, #440]	; (8002a10 <main+0x270>)
 8002856:	4863      	ldr	r0, [pc, #396]	; (80029e4 <main+0x244>)
 8002858:	4798      	blx	r3
     }

     /* Initialize SPS30 sensors array */
     uart_logger.print(&uart_logger, "Inicializando sensores SPS30...\n");
 800285a:	4b62      	ldr	r3, [pc, #392]	; (80029e4 <main+0x244>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	496d      	ldr	r1, [pc, #436]	; (8002a14 <main+0x274>)
 8002860:	4860      	ldr	r0, [pc, #384]	; (80029e4 <main+0x244>)
 8002862:	4798      	blx	r3
     inicializar_sensores_sps30();
 8002864:	f7ff fc56 	bl	8002114 <inicializar_sensores_sps30>

   /* Buffer de Mensajes */

   char datetime_buffer[32];
   char msg_buffer[128];
   uint32_t ciclo_contador = 0;
 8002868:	2300      	movs	r3, #0
 800286a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   RTC_ReceiveTimeFromTerminal(&huart3);
 800286e:	485c      	ldr	r0, [pc, #368]	; (80029e0 <main+0x240>)
 8002870:	f7ff fcfa 	bl	8002268 <RTC_ReceiveTimeFromTerminal>
    while (1) {

    	  /* Get current date and time */
    	        time_rtc_GetFormattedDateTime(datetime_buffer, sizeof(datetime_buffer));
 8002874:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002878:	2120      	movs	r1, #32
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff fe62 	bl	8002544 <time_rtc_GetFormattedDateTime>

    	        /* Format header message with timestamp and cycle counter */
    	        snprintf(msg_buffer, sizeof(msg_buffer),
 8002880:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002884:	3301      	adds	r3, #1
 8002886:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800288a:	f107 0014 	add.w	r0, r7, #20
 800288e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002898:	4a5f      	ldr	r2, [pc, #380]	; (8002a18 <main+0x278>)
 800289a:	2180      	movs	r1, #128	; 0x80
 800289c:	f004 ff1a 	bl	80076d4 <sniprintf>
    	                "\n=== Ciclo de medición #%lu: %s ===\n",
    	                ++ciclo_contador, datetime_buffer);
    	        uart_logger.print(&uart_logger, msg_buffer);
 80028a0:	4b50      	ldr	r3, [pc, #320]	; (80029e4 <main+0x244>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f107 0214 	add.w	r2, r7, #20
 80028a8:	4611      	mov	r1, r2
 80028aa:	484e      	ldr	r0, [pc, #312]	; (80029e4 <main+0x244>)
 80028ac:	4798      	blx	r3

    	        /* Read all available sensors */
    	        for (int i = 0; i < sensores_disponibles; i++) {
 80028ae:	2300      	movs	r3, #0
 80028b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80028b4:	e05d      	b.n	8002972 <main+0x1d2>
    	            if (proceso_observador(&sensores_sps30[i].sensor, &uart_logger, sensores_sps30[i].id)) {
 80028b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80028ba:	2234      	movs	r2, #52	; 0x34
 80028bc:	fb02 f303 	mul.w	r3, r2, r3
 80028c0:	4a56      	ldr	r2, [pc, #344]	; (8002a1c <main+0x27c>)
 80028c2:	1898      	adds	r0, r3, r2
 80028c4:	4a55      	ldr	r2, [pc, #340]	; (8002a1c <main+0x27c>)
 80028c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80028ca:	2134      	movs	r1, #52	; 0x34
 80028cc:	fb01 f303 	mul.w	r3, r1, r3
 80028d0:	4413      	add	r3, r2
 80028d2:	332c      	adds	r3, #44	; 0x2c
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	461a      	mov	r2, r3
 80028d8:	4942      	ldr	r1, [pc, #264]	; (80029e4 <main+0x244>)
 80028da:	f7fe fd6d 	bl	80013b8 <proceso_observador>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d041      	beq.n	8002968 <main+0x1c8>
    	                /* Get the last measurement data and store it */
    	                ConcentracionesPM valores = sensores_sps30[i].sensor.get_concentrations(&sensores_sps30[i].sensor);
 80028e4:	4a4d      	ldr	r2, [pc, #308]	; (8002a1c <main+0x27c>)
 80028e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80028ea:	2134      	movs	r1, #52	; 0x34
 80028ec:	fb01 f303 	mul.w	r3, r1, r3
 80028f0:	4413      	add	r3, r2
 80028f2:	3328      	adds	r3, #40	; 0x28
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80028fa:	2134      	movs	r1, #52	; 0x34
 80028fc:	fb01 f202 	mul.w	r2, r1, r2
 8002900:	4946      	ldr	r1, [pc, #280]	; (8002a1c <main+0x27c>)
 8002902:	440a      	add	r2, r1
 8002904:	4610      	mov	r0, r2
 8002906:	4798      	blx	r3
 8002908:	eeb0 6a40 	vmov.f32	s12, s0
 800290c:	eef0 6a60 	vmov.f32	s13, s1
 8002910:	eeb0 7a41 	vmov.f32	s14, s2
 8002914:	eef0 7a61 	vmov.f32	s15, s3
 8002918:	ed87 6a01 	vstr	s12, [r7, #4]
 800291c:	edc7 6a02 	vstr	s13, [r7, #8]
 8002920:	ed87 7a03 	vstr	s14, [r7, #12]
 8002924:	edc7 7a04 	vstr	s15, [r7, #16]
    	                data_logger_store_measurement(sensores_sps30[i].id, valores, -999.0f, -999.0f);
 8002928:	4a3c      	ldr	r2, [pc, #240]	; (8002a1c <main+0x27c>)
 800292a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800292e:	2134      	movs	r1, #52	; 0x34
 8002930:	fb01 f303 	mul.w	r3, r1, r3
 8002934:	4413      	add	r3, r2
 8002936:	332c      	adds	r3, #44	; 0x2c
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	ed97 6a01 	vldr	s12, [r7, #4]
 800293e:	edd7 6a02 	vldr	s13, [r7, #8]
 8002942:	ed97 7a03 	vldr	s14, [r7, #12]
 8002946:	edd7 7a04 	vldr	s15, [r7, #16]
 800294a:	eddf 2a35 	vldr	s5, [pc, #212]	; 8002a20 <main+0x280>
 800294e:	ed9f 2a34 	vldr	s4, [pc, #208]	; 8002a20 <main+0x280>
 8002952:	eeb0 0a46 	vmov.f32	s0, s12
 8002956:	eef0 0a66 	vmov.f32	s1, s13
 800295a:	eeb0 1a47 	vmov.f32	s2, s14
 800295e:	eef0 1a67 	vmov.f32	s3, s15
 8002962:	4618      	mov	r0, r3
 8002964:	f7fe fbcc 	bl	8001100 <data_logger_store_measurement>
    	        for (int i = 0; i < sensores_disponibles; i++) {
 8002968:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800296c:	3301      	adds	r3, #1
 800296e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002972:	4b2c      	ldr	r3, [pc, #176]	; (8002a24 <main+0x284>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800297a:	429a      	cmp	r2, r3
 800297c:	db9b      	blt.n	80028b6 <main+0x116>
    	            }
    	        }

    	        /* Print data summary every 10 cycles */
    	        if (ciclo_contador % 10 == 0) {
 800297e:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8002982:	4b29      	ldr	r3, [pc, #164]	; (8002a28 <main+0x288>)
 8002984:	fba3 2301 	umull	r2, r3, r3, r1
 8002988:	08da      	lsrs	r2, r3, #3
 800298a:	4613      	mov	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	1aca      	subs	r2, r1, r3
 8002994:	2a00      	cmp	r2, #0
 8002996:	d11d      	bne.n	80029d4 <main+0x234>
    	            data_logger_print_summary(&uart_logger);
 8002998:	4812      	ldr	r0, [pc, #72]	; (80029e4 <main+0x244>)
 800299a:	f7fe fc63 	bl	8001264 <data_logger_print_summary>

    	            /* Print average PM2.5 of all sensors */
    	            float pm25_avg = data_logger_get_average_pm25(0, 10);
 800299e:	210a      	movs	r1, #10
 80029a0:	2000      	movs	r0, #0
 80029a2:	f7fe fbef 	bl	8001184 <data_logger_get_average_pm25>
 80029a6:	ed87 0a2d 	vstr	s0, [r7, #180]	; 0xb4
    	            snprintf(msg_buffer, sizeof(msg_buffer),
 80029aa:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80029ae:	f7fd fddb 	bl	8000568 <__aeabi_f2d>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	f107 0014 	add.w	r0, r7, #20
 80029ba:	e9cd 2300 	strd	r2, r3, [sp]
 80029be:	4a1b      	ldr	r2, [pc, #108]	; (8002a2c <main+0x28c>)
 80029c0:	2180      	movs	r1, #128	; 0x80
 80029c2:	f004 fe87 	bl	80076d4 <sniprintf>
    	                    "Promedio PM2.5 (últimas 10 mediciones): %.2f ug/m3\n", pm25_avg);
    	            uart_logger.print(&uart_logger, msg_buffer);
 80029c6:	4b07      	ldr	r3, [pc, #28]	; (80029e4 <main+0x244>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f107 0214 	add.w	r2, r7, #20
 80029ce:	4611      	mov	r1, r2
 80029d0:	4804      	ldr	r0, [pc, #16]	; (80029e4 <main+0x244>)
 80029d2:	4798      	blx	r3

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

        HAL_Delay(10000); // Espera 10 segundos antes de la próxima lectura
 80029d4:	f242 7010 	movw	r0, #10000	; 0x2710
 80029d8:	f000 fd0e 	bl	80033f8 <HAL_Delay>
    	        time_rtc_GetFormattedDateTime(datetime_buffer, sizeof(datetime_buffer));
 80029dc:	e74a      	b.n	8002874 <main+0xd4>
 80029de:	bf00      	nop
 80029e0:	20001f14 	.word	0x20001f14
 80029e4:	20001d8c 	.word	0x20001d8c
 80029e8:	20001e48 	.word	0x20001e48
 80029ec:	20001dec 	.word	0x20001dec
 80029f0:	0800b97c 	.word	0x0800b97c
 80029f4:	20001e18 	.word	0x20001e18
 80029f8:	0800b99c 	.word	0x0800b99c
 80029fc:	0800b9dc 	.word	0x0800b9dc
 8002a00:	0800ba14 	.word	0x0800ba14
 8002a04:	0800ba54 	.word	0x0800ba54
 8002a08:	0800ba74 	.word	0x0800ba74
 8002a0c:	0800ba80 	.word	0x0800ba80
 8002a10:	0800bab8 	.word	0x0800bab8
 8002a14:	0800baf0 	.word	0x0800baf0
 8002a18:	0800bb14 	.word	0x0800bb14
 8002a1c:	20001ce8 	.word	0x20001ce8
 8002a20:	c479c000 	.word	0xc479c000
 8002a24:	20001d84 	.word	0x20001d84
 8002a28:	cccccccd 	.word	0xcccccccd
 8002a2c:	0800bb3c 	.word	0x0800bb3c

08002a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b094      	sub	sp, #80	; 0x50
 8002a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a36:	f107 0320 	add.w	r3, r7, #32
 8002a3a:	2230      	movs	r2, #48	; 0x30
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f003 ff4a 	bl	80068d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a44:	f107 030c 	add.w	r3, r7, #12
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	60da      	str	r2, [r3, #12]
 8002a52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a54:	2300      	movs	r3, #0
 8002a56:	60bb      	str	r3, [r7, #8]
 8002a58:	4b24      	ldr	r3, [pc, #144]	; (8002aec <SystemClock_Config+0xbc>)
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	4a23      	ldr	r2, [pc, #140]	; (8002aec <SystemClock_Config+0xbc>)
 8002a5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a62:	6413      	str	r3, [r2, #64]	; 0x40
 8002a64:	4b21      	ldr	r3, [pc, #132]	; (8002aec <SystemClock_Config+0xbc>)
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6c:	60bb      	str	r3, [r7, #8]
 8002a6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002a70:	2300      	movs	r3, #0
 8002a72:	607b      	str	r3, [r7, #4]
 8002a74:	4b1e      	ldr	r3, [pc, #120]	; (8002af0 <SystemClock_Config+0xc0>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002a7c:	4a1c      	ldr	r2, [pc, #112]	; (8002af0 <SystemClock_Config+0xc0>)
 8002a7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a82:	6013      	str	r3, [r2, #0]
 8002a84:	4b1a      	ldr	r3, [pc, #104]	; (8002af0 <SystemClock_Config+0xc0>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a8c:	607b      	str	r3, [r7, #4]
 8002a8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002a90:	230a      	movs	r3, #10
 8002a92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a94:	2301      	movs	r3, #1
 8002a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a98:	2310      	movs	r3, #16
 8002a9a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002aa4:	f107 0320 	add.w	r3, r7, #32
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f002 fa29 	bl	8004f00 <HAL_RCC_OscConfig>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002ab4:	f000 f81e 	bl	8002af4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ab8:	230f      	movs	r3, #15
 8002aba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002abc:	2300      	movs	r3, #0
 8002abe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002acc:	f107 030c 	add.w	r3, r7, #12
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f002 fc8c 	bl	80053f0 <HAL_RCC_ClockConfig>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002ade:	f000 f809 	bl	8002af4 <Error_Handler>
  }
}
 8002ae2:	bf00      	nop
 8002ae4:	3750      	adds	r7, #80	; 0x50
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40023800 	.word	0x40023800
 8002af0:	40007000 	.word	0x40007000

08002af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002af8:	b672      	cpsid	i
}
 8002afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8002afc:	e7fe      	b.n	8002afc <Error_Handler+0x8>
	...

08002b00 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002b06:	1d3b      	adds	r3, r7, #4
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	60da      	str	r2, [r3, #12]
 8002b12:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002b14:	2300      	movs	r3, #0
 8002b16:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002b18:	4b24      	ldr	r3, [pc, #144]	; (8002bac <MX_RTC_Init+0xac>)
 8002b1a:	4a25      	ldr	r2, [pc, #148]	; (8002bb0 <MX_RTC_Init+0xb0>)
 8002b1c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002b1e:	4b23      	ldr	r3, [pc, #140]	; (8002bac <MX_RTC_Init+0xac>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002b24:	4b21      	ldr	r3, [pc, #132]	; (8002bac <MX_RTC_Init+0xac>)
 8002b26:	227f      	movs	r2, #127	; 0x7f
 8002b28:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002b2a:	4b20      	ldr	r3, [pc, #128]	; (8002bac <MX_RTC_Init+0xac>)
 8002b2c:	22ff      	movs	r2, #255	; 0xff
 8002b2e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002b30:	4b1e      	ldr	r3, [pc, #120]	; (8002bac <MX_RTC_Init+0xac>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002b36:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <MX_RTC_Init+0xac>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002b3c:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <MX_RTC_Init+0xac>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002b42:	481a      	ldr	r0, [pc, #104]	; (8002bac <MX_RTC_Init+0xac>)
 8002b44:	f002 fff4 	bl	8005b30 <HAL_RTC_Init>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8002b4e:	f7ff ffd1 	bl	8002af4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002b52:	2300      	movs	r3, #0
 8002b54:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002b56:	2300      	movs	r3, #0
 8002b58:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002b66:	1d3b      	adds	r3, r7, #4
 8002b68:	2201      	movs	r2, #1
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	480f      	ldr	r0, [pc, #60]	; (8002bac <MX_RTC_Init+0xac>)
 8002b6e:	f003 f855 	bl	8005c1c <HAL_RTC_SetTime>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002b78:	f7ff ffbc 	bl	8002af4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002b80:	2301      	movs	r3, #1
 8002b82:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002b84:	2301      	movs	r3, #1
 8002b86:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002b8c:	463b      	mov	r3, r7
 8002b8e:	2201      	movs	r2, #1
 8002b90:	4619      	mov	r1, r3
 8002b92:	4806      	ldr	r0, [pc, #24]	; (8002bac <MX_RTC_Init+0xac>)
 8002b94:	f003 f8dc 	bl	8005d50 <HAL_RTC_SetDate>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8002b9e:	f7ff ffa9 	bl	8002af4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002ba2:	bf00      	nop
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20001e24 	.word	0x20001e24
 8002bb0:	40002800 	.word	0x40002800

08002bb4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08e      	sub	sp, #56	; 0x38
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bbc:	f107 0308 	add.w	r3, r7, #8
 8002bc0:	2230      	movs	r2, #48	; 0x30
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f003 fe87 	bl	80068d8 <memset>
  if(rtcHandle->Instance==RTC)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a0c      	ldr	r2, [pc, #48]	; (8002c00 <HAL_RTC_MspInit+0x4c>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d111      	bne.n	8002bf8 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002bd4:	2320      	movs	r3, #32
 8002bd6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002bd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bdc:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bde:	f107 0308 	add.w	r3, r7, #8
 8002be2:	4618      	mov	r0, r3
 8002be4:	f002 fde4 	bl	80057b0 <HAL_RCCEx_PeriphCLKConfig>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002bee:	f7ff ff81 	bl	8002af4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002bf2:	4b04      	ldr	r3, [pc, #16]	; (8002c04 <HAL_RTC_MspInit+0x50>)
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002bf8:	bf00      	nop
 8002bfa:	3738      	adds	r7, #56	; 0x38
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40002800 	.word	0x40002800
 8002c04:	42470e3c 	.word	0x42470e3c

08002c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	607b      	str	r3, [r7, #4]
 8002c12:	4b10      	ldr	r3, [pc, #64]	; (8002c54 <HAL_MspInit+0x4c>)
 8002c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c16:	4a0f      	ldr	r2, [pc, #60]	; (8002c54 <HAL_MspInit+0x4c>)
 8002c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c1e:	4b0d      	ldr	r3, [pc, #52]	; (8002c54 <HAL_MspInit+0x4c>)
 8002c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c26:	607b      	str	r3, [r7, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	603b      	str	r3, [r7, #0]
 8002c2e:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <HAL_MspInit+0x4c>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	4a08      	ldr	r2, [pc, #32]	; (8002c54 <HAL_MspInit+0x4c>)
 8002c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c38:	6413      	str	r3, [r2, #64]	; 0x40
 8002c3a:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <HAL_MspInit+0x4c>)
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c42:	603b      	str	r3, [r7, #0]
 8002c44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	40023800 	.word	0x40023800

08002c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8002c5c:	e7fe      	b.n	8002c5c <NMI_Handler+0x4>

08002c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c62:	e7fe      	b.n	8002c62 <HardFault_Handler+0x4>

08002c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c68:	e7fe      	b.n	8002c68 <MemManage_Handler+0x4>

08002c6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c6e:	e7fe      	b.n	8002c6e <BusFault_Handler+0x4>

08002c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c74:	e7fe      	b.n	8002c74 <UsageFault_Handler+0x4>

08002c76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c76:	b480      	push	{r7}
 8002c78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c7a:	bf00      	nop
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c88:	bf00      	nop
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c92:	b480      	push	{r7}
 8002c94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c96:	bf00      	nop
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ca4:	f000 fb88 	bl	80033b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ca8:	bf00      	nop
 8002caa:	bd80      	pop	{r7, pc}

08002cac <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
    return 1;
 8002cb0:	2301      	movs	r3, #1
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <_kill>:

int _kill(int pid, int sig) {
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
    (void)pid;
    (void)sig;
    errno = EINVAL;
 8002cc6:	f003 fdcf 	bl	8006868 <__errno>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2216      	movs	r2, #22
 8002cce:	601a      	str	r2, [r3, #0]
    return -1;
 8002cd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <_exit>:

void _exit(int status) {
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
    _kill(status, -1);
 8002ce4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7ff ffe7 	bl	8002cbc <_kill>
    while (1) {
 8002cee:	e7fe      	b.n	8002cee <_exit+0x12>

08002cf0 <_read>:
    } /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char * ptr, int len) {
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	e00a      	b.n	8002d18 <_read+0x28>
        *ptr++ = __io_getchar();
 8002d02:	f3af 8000 	nop.w
 8002d06:	4601      	mov	r1, r0
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	1c5a      	adds	r2, r3, #1
 8002d0c:	60ba      	str	r2, [r7, #8]
 8002d0e:	b2ca      	uxtb	r2, r1
 8002d10:	701a      	strb	r2, [r3, #0]
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	3301      	adds	r3, #1
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	dbf0      	blt.n	8002d02 <_read+0x12>
    }

    return len;
 8002d20:	687b      	ldr	r3, [r7, #4]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <_write>:

__attribute__((weak)) int _write(int file, char * ptr, int len) {
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b086      	sub	sp, #24
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	60f8      	str	r0, [r7, #12]
 8002d32:	60b9      	str	r1, [r7, #8]
 8002d34:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002d36:	2300      	movs	r3, #0
 8002d38:	617b      	str	r3, [r7, #20]
 8002d3a:	e009      	b.n	8002d50 <_write+0x26>
        __io_putchar(*ptr++);
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	60ba      	str	r2, [r7, #8]
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f3af 8000 	nop.w
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	dbf1      	blt.n	8002d3c <_write+0x12>
    }
    return len;
 8002d58:	687b      	ldr	r3, [r7, #4]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3718      	adds	r7, #24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <_close>:

int _close(int file) {
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
    (void)file;
    return -1;
 8002d6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <_fstat>:

int _fstat(int file, struct stat * st) {
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
 8002d82:	6039      	str	r1, [r7, #0]
    (void)file;
    st->st_mode = S_IFCHR;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d8a:	605a      	str	r2, [r3, #4]
    return 0;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <_isatty>:

int _isatty(int file) {
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
    (void)file;
    return 1;
 8002da2:	2301      	movs	r3, #1
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
    (void)file;
    (void)ptr;
    (void)dir;
    return 0;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
	...

08002dcc <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void * _sbrk(ptrdiff_t incr) {
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dd4:	4a14      	ldr	r2, [pc, #80]	; (8002e28 <_sbrk+0x5c>)
 8002dd6:	4b15      	ldr	r3, [pc, #84]	; (8002e2c <_sbrk+0x60>)
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	617b      	str	r3, [r7, #20]
    const uint8_t * max_heap = (uint8_t *)stack_limit;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	613b      	str	r3, [r7, #16]
    uint8_t * prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 8002de0:	4b13      	ldr	r3, [pc, #76]	; (8002e30 <_sbrk+0x64>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d102      	bne.n	8002dee <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 8002de8:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <_sbrk+0x64>)
 8002dea:	4a12      	ldr	r2, [pc, #72]	; (8002e34 <_sbrk+0x68>)
 8002dec:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 8002dee:	4b10      	ldr	r3, [pc, #64]	; (8002e30 <_sbrk+0x64>)
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4413      	add	r3, r2
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d207      	bcs.n	8002e0c <_sbrk+0x40>
        errno = ENOMEM;
 8002dfc:	f003 fd34 	bl	8006868 <__errno>
 8002e00:	4603      	mov	r3, r0
 8002e02:	220c      	movs	r2, #12
 8002e04:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 8002e06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e0a:	e009      	b.n	8002e20 <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 8002e0c:	4b08      	ldr	r3, [pc, #32]	; (8002e30 <_sbrk+0x64>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 8002e12:	4b07      	ldr	r3, [pc, #28]	; (8002e30 <_sbrk+0x64>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4413      	add	r3, r2
 8002e1a:	4a05      	ldr	r2, [pc, #20]	; (8002e30 <_sbrk+0x64>)
 8002e1c:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	20030000 	.word	0x20030000
 8002e2c:	00000400 	.word	0x00000400
 8002e30:	20001e44 	.word	0x20001e44
 8002e34:	20001fb0 	.word	0x20001fb0

08002e38 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8002e3c:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <SystemInit+0x20>)
 8002e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e42:	4a05      	ldr	r2, [pc, #20]	; (8002e58 <SystemInit+0x20>)
 8002e44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 8002e4c:	bf00      	nop
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	e000ed00 	.word	0xe000ed00

08002e5c <MX_UART5_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002e60:	4b11      	ldr	r3, [pc, #68]	; (8002ea8 <MX_UART5_Init+0x4c>)
 8002e62:	4a12      	ldr	r2, [pc, #72]	; (8002eac <MX_UART5_Init+0x50>)
 8002e64:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002e66:	4b10      	ldr	r3, [pc, #64]	; (8002ea8 <MX_UART5_Init+0x4c>)
 8002e68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e6c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002e6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ea8 <MX_UART5_Init+0x4c>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002e74:	4b0c      	ldr	r3, [pc, #48]	; (8002ea8 <MX_UART5_Init+0x4c>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002e7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <MX_UART5_Init+0x4c>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002e80:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <MX_UART5_Init+0x4c>)
 8002e82:	220c      	movs	r2, #12
 8002e84:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e86:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <MX_UART5_Init+0x4c>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e8c:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <MX_UART5_Init+0x4c>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002e92:	4805      	ldr	r0, [pc, #20]	; (8002ea8 <MX_UART5_Init+0x4c>)
 8002e94:	f003 f881 	bl	8005f9a <HAL_UART_Init>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002e9e:	f7ff fe29 	bl	8002af4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002ea2:	bf00      	nop
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20001e48 	.word	0x20001e48
 8002eac:	40005000 	.word	0x40005000

08002eb0 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002eb4:	4b11      	ldr	r3, [pc, #68]	; (8002efc <MX_UART7_Init+0x4c>)
 8002eb6:	4a12      	ldr	r2, [pc, #72]	; (8002f00 <MX_UART7_Init+0x50>)
 8002eb8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002eba:	4b10      	ldr	r3, [pc, #64]	; (8002efc <MX_UART7_Init+0x4c>)
 8002ebc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ec0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002ec2:	4b0e      	ldr	r3, [pc, #56]	; (8002efc <MX_UART7_Init+0x4c>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002ec8:	4b0c      	ldr	r3, [pc, #48]	; (8002efc <MX_UART7_Init+0x4c>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002ece:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <MX_UART7_Init+0x4c>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002ed4:	4b09      	ldr	r3, [pc, #36]	; (8002efc <MX_UART7_Init+0x4c>)
 8002ed6:	220c      	movs	r2, #12
 8002ed8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eda:	4b08      	ldr	r3, [pc, #32]	; (8002efc <MX_UART7_Init+0x4c>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ee0:	4b06      	ldr	r3, [pc, #24]	; (8002efc <MX_UART7_Init+0x4c>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002ee6:	4805      	ldr	r0, [pc, #20]	; (8002efc <MX_UART7_Init+0x4c>)
 8002ee8:	f003 f857 	bl	8005f9a <HAL_UART_Init>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8002ef2:	f7ff fdff 	bl	8002af4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002ef6:	bf00      	nop
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	20001e8c 	.word	0x20001e8c
 8002f00:	40007800 	.word	0x40007800

08002f04 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f08:	4b11      	ldr	r3, [pc, #68]	; (8002f50 <MX_USART1_UART_Init+0x4c>)
 8002f0a:	4a12      	ldr	r2, [pc, #72]	; (8002f54 <MX_USART1_UART_Init+0x50>)
 8002f0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002f0e:	4b10      	ldr	r3, [pc, #64]	; (8002f50 <MX_USART1_UART_Init+0x4c>)
 8002f10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f16:	4b0e      	ldr	r3, [pc, #56]	; (8002f50 <MX_USART1_UART_Init+0x4c>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f1c:	4b0c      	ldr	r3, [pc, #48]	; (8002f50 <MX_USART1_UART_Init+0x4c>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f22:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <MX_USART1_UART_Init+0x4c>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f28:	4b09      	ldr	r3, [pc, #36]	; (8002f50 <MX_USART1_UART_Init+0x4c>)
 8002f2a:	220c      	movs	r2, #12
 8002f2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f2e:	4b08      	ldr	r3, [pc, #32]	; (8002f50 <MX_USART1_UART_Init+0x4c>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f34:	4b06      	ldr	r3, [pc, #24]	; (8002f50 <MX_USART1_UART_Init+0x4c>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f3a:	4805      	ldr	r0, [pc, #20]	; (8002f50 <MX_USART1_UART_Init+0x4c>)
 8002f3c:	f003 f82d 	bl	8005f9a <HAL_UART_Init>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002f46:	f7ff fdd5 	bl	8002af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f4a:	bf00      	nop
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	20001ed0 	.word	0x20001ed0
 8002f54:	40011000 	.word	0x40011000

08002f58 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002f5c:	4b11      	ldr	r3, [pc, #68]	; (8002fa4 <MX_USART3_UART_Init+0x4c>)
 8002f5e:	4a12      	ldr	r2, [pc, #72]	; (8002fa8 <MX_USART3_UART_Init+0x50>)
 8002f60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002f62:	4b10      	ldr	r3, [pc, #64]	; (8002fa4 <MX_USART3_UART_Init+0x4c>)
 8002f64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f6a:	4b0e      	ldr	r3, [pc, #56]	; (8002fa4 <MX_USART3_UART_Init+0x4c>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f70:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <MX_USART3_UART_Init+0x4c>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f76:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <MX_USART3_UART_Init+0x4c>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f7c:	4b09      	ldr	r3, [pc, #36]	; (8002fa4 <MX_USART3_UART_Init+0x4c>)
 8002f7e:	220c      	movs	r2, #12
 8002f80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f82:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <MX_USART3_UART_Init+0x4c>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f88:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <MX_USART3_UART_Init+0x4c>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f8e:	4805      	ldr	r0, [pc, #20]	; (8002fa4 <MX_USART3_UART_Init+0x4c>)
 8002f90:	f003 f803 	bl	8005f9a <HAL_UART_Init>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002f9a:	f7ff fdab 	bl	8002af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f9e:	bf00      	nop
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	20001f14 	.word	0x20001f14
 8002fa8:	40004800 	.word	0x40004800

08002fac <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002fb0:	4b11      	ldr	r3, [pc, #68]	; (8002ff8 <MX_USART6_UART_Init+0x4c>)
 8002fb2:	4a12      	ldr	r2, [pc, #72]	; (8002ffc <MX_USART6_UART_Init+0x50>)
 8002fb4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002fb6:	4b10      	ldr	r3, [pc, #64]	; (8002ff8 <MX_USART6_UART_Init+0x4c>)
 8002fb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fbc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002fbe:	4b0e      	ldr	r3, [pc, #56]	; (8002ff8 <MX_USART6_UART_Init+0x4c>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002fc4:	4b0c      	ldr	r3, [pc, #48]	; (8002ff8 <MX_USART6_UART_Init+0x4c>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002fca:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <MX_USART6_UART_Init+0x4c>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002fd0:	4b09      	ldr	r3, [pc, #36]	; (8002ff8 <MX_USART6_UART_Init+0x4c>)
 8002fd2:	220c      	movs	r2, #12
 8002fd4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fd6:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <MX_USART6_UART_Init+0x4c>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fdc:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <MX_USART6_UART_Init+0x4c>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002fe2:	4805      	ldr	r0, [pc, #20]	; (8002ff8 <MX_USART6_UART_Init+0x4c>)
 8002fe4:	f002 ffd9 	bl	8005f9a <HAL_UART_Init>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002fee:	f7ff fd81 	bl	8002af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002ff2:	bf00      	nop
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	20001f58 	.word	0x20001f58
 8002ffc:	40011400 	.word	0x40011400

08003000 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b092      	sub	sp, #72	; 0x48
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003008:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	605a      	str	r2, [r3, #4]
 8003012:	609a      	str	r2, [r3, #8]
 8003014:	60da      	str	r2, [r3, #12]
 8003016:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a9e      	ldr	r2, [pc, #632]	; (8003298 <HAL_UART_MspInit+0x298>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d14b      	bne.n	80030ba <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	633b      	str	r3, [r7, #48]	; 0x30
 8003026:	4b9d      	ldr	r3, [pc, #628]	; (800329c <HAL_UART_MspInit+0x29c>)
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	4a9c      	ldr	r2, [pc, #624]	; (800329c <HAL_UART_MspInit+0x29c>)
 800302c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003030:	6413      	str	r3, [r2, #64]	; 0x40
 8003032:	4b9a      	ldr	r3, [pc, #616]	; (800329c <HAL_UART_MspInit+0x29c>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800303a:	633b      	str	r3, [r7, #48]	; 0x30
 800303c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800303e:	2300      	movs	r3, #0
 8003040:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003042:	4b96      	ldr	r3, [pc, #600]	; (800329c <HAL_UART_MspInit+0x29c>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	4a95      	ldr	r2, [pc, #596]	; (800329c <HAL_UART_MspInit+0x29c>)
 8003048:	f043 0304 	orr.w	r3, r3, #4
 800304c:	6313      	str	r3, [r2, #48]	; 0x30
 800304e:	4b93      	ldr	r3, [pc, #588]	; (800329c <HAL_UART_MspInit+0x29c>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003052:	f003 0304 	and.w	r3, r3, #4
 8003056:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800305a:	2300      	movs	r3, #0
 800305c:	62bb      	str	r3, [r7, #40]	; 0x28
 800305e:	4b8f      	ldr	r3, [pc, #572]	; (800329c <HAL_UART_MspInit+0x29c>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	4a8e      	ldr	r2, [pc, #568]	; (800329c <HAL_UART_MspInit+0x29c>)
 8003064:	f043 0308 	orr.w	r3, r3, #8
 8003068:	6313      	str	r3, [r2, #48]	; 0x30
 800306a:	4b8c      	ldr	r3, [pc, #560]	; (800329c <HAL_UART_MspInit+0x29c>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	f003 0308 	and.w	r3, r3, #8
 8003072:	62bb      	str	r3, [r7, #40]	; 0x28
 8003074:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003076:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800307a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800307c:	2302      	movs	r3, #2
 800307e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003080:	2300      	movs	r3, #0
 8003082:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003084:	2303      	movs	r3, #3
 8003086:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003088:	2308      	movs	r3, #8
 800308a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800308c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003090:	4619      	mov	r1, r3
 8003092:	4883      	ldr	r0, [pc, #524]	; (80032a0 <HAL_UART_MspInit+0x2a0>)
 8003094:	f000 faba 	bl	800360c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003098:	2304      	movs	r3, #4
 800309a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309c:	2302      	movs	r3, #2
 800309e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030a0:	2301      	movs	r3, #1
 80030a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030a4:	2303      	movs	r3, #3
 80030a6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80030a8:	2308      	movs	r3, #8
 80030aa:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80030b0:	4619      	mov	r1, r3
 80030b2:	487c      	ldr	r0, [pc, #496]	; (80032a4 <HAL_UART_MspInit+0x2a4>)
 80030b4:	f000 faaa 	bl	800360c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80030b8:	e0e9      	b.n	800328e <HAL_UART_MspInit+0x28e>
  else if(uartHandle->Instance==UART7)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a7a      	ldr	r2, [pc, #488]	; (80032a8 <HAL_UART_MspInit+0x2a8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d13c      	bne.n	800313e <HAL_UART_MspInit+0x13e>
    __HAL_RCC_UART7_CLK_ENABLE();
 80030c4:	2300      	movs	r3, #0
 80030c6:	627b      	str	r3, [r7, #36]	; 0x24
 80030c8:	4b74      	ldr	r3, [pc, #464]	; (800329c <HAL_UART_MspInit+0x29c>)
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	4a73      	ldr	r2, [pc, #460]	; (800329c <HAL_UART_MspInit+0x29c>)
 80030ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80030d2:	6413      	str	r3, [r2, #64]	; 0x40
 80030d4:	4b71      	ldr	r3, [pc, #452]	; (800329c <HAL_UART_MspInit+0x29c>)
 80030d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80030e0:	2300      	movs	r3, #0
 80030e2:	623b      	str	r3, [r7, #32]
 80030e4:	4b6d      	ldr	r3, [pc, #436]	; (800329c <HAL_UART_MspInit+0x29c>)
 80030e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e8:	4a6c      	ldr	r2, [pc, #432]	; (800329c <HAL_UART_MspInit+0x29c>)
 80030ea:	f043 0320 	orr.w	r3, r3, #32
 80030ee:	6313      	str	r3, [r2, #48]	; 0x30
 80030f0:	4b6a      	ldr	r3, [pc, #424]	; (800329c <HAL_UART_MspInit+0x29c>)
 80030f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f4:	f003 0320 	and.w	r3, r3, #32
 80030f8:	623b      	str	r3, [r7, #32]
 80030fa:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80030fc:	2340      	movs	r3, #64	; 0x40
 80030fe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003100:	2302      	movs	r3, #2
 8003102:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003104:	2301      	movs	r3, #1
 8003106:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003108:	2303      	movs	r3, #3
 800310a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800310c:	2308      	movs	r3, #8
 800310e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003110:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003114:	4619      	mov	r1, r3
 8003116:	4865      	ldr	r0, [pc, #404]	; (80032ac <HAL_UART_MspInit+0x2ac>)
 8003118:	f000 fa78 	bl	800360c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800311c:	2380      	movs	r3, #128	; 0x80
 800311e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003120:	2302      	movs	r3, #2
 8003122:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003124:	2300      	movs	r3, #0
 8003126:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003128:	2303      	movs	r3, #3
 800312a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800312c:	2308      	movs	r3, #8
 800312e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003130:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003134:	4619      	mov	r1, r3
 8003136:	485d      	ldr	r0, [pc, #372]	; (80032ac <HAL_UART_MspInit+0x2ac>)
 8003138:	f000 fa68 	bl	800360c <HAL_GPIO_Init>
}
 800313c:	e0a7      	b.n	800328e <HAL_UART_MspInit+0x28e>
  else if(uartHandle->Instance==USART1)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a5b      	ldr	r2, [pc, #364]	; (80032b0 <HAL_UART_MspInit+0x2b0>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d13e      	bne.n	80031c6 <HAL_UART_MspInit+0x1c6>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003148:	2300      	movs	r3, #0
 800314a:	61fb      	str	r3, [r7, #28]
 800314c:	4b53      	ldr	r3, [pc, #332]	; (800329c <HAL_UART_MspInit+0x29c>)
 800314e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003150:	4a52      	ldr	r2, [pc, #328]	; (800329c <HAL_UART_MspInit+0x29c>)
 8003152:	f043 0310 	orr.w	r3, r3, #16
 8003156:	6453      	str	r3, [r2, #68]	; 0x44
 8003158:	4b50      	ldr	r3, [pc, #320]	; (800329c <HAL_UART_MspInit+0x29c>)
 800315a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315c:	f003 0310 	and.w	r3, r3, #16
 8003160:	61fb      	str	r3, [r7, #28]
 8003162:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003164:	2300      	movs	r3, #0
 8003166:	61bb      	str	r3, [r7, #24]
 8003168:	4b4c      	ldr	r3, [pc, #304]	; (800329c <HAL_UART_MspInit+0x29c>)
 800316a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316c:	4a4b      	ldr	r2, [pc, #300]	; (800329c <HAL_UART_MspInit+0x29c>)
 800316e:	f043 0301 	orr.w	r3, r3, #1
 8003172:	6313      	str	r3, [r2, #48]	; 0x30
 8003174:	4b49      	ldr	r3, [pc, #292]	; (800329c <HAL_UART_MspInit+0x29c>)
 8003176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	61bb      	str	r3, [r7, #24]
 800317e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003180:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003184:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003186:	2302      	movs	r3, #2
 8003188:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318a:	2300      	movs	r3, #0
 800318c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800318e:	2303      	movs	r3, #3
 8003190:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003192:	2307      	movs	r3, #7
 8003194:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003196:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800319a:	4619      	mov	r1, r3
 800319c:	4845      	ldr	r0, [pc, #276]	; (80032b4 <HAL_UART_MspInit+0x2b4>)
 800319e:	f000 fa35 	bl	800360c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80031a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031a6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a8:	2302      	movs	r3, #2
 80031aa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031ac:	2301      	movs	r3, #1
 80031ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b0:	2303      	movs	r3, #3
 80031b2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80031b4:	2307      	movs	r3, #7
 80031b6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80031bc:	4619      	mov	r1, r3
 80031be:	483d      	ldr	r0, [pc, #244]	; (80032b4 <HAL_UART_MspInit+0x2b4>)
 80031c0:	f000 fa24 	bl	800360c <HAL_GPIO_Init>
}
 80031c4:	e063      	b.n	800328e <HAL_UART_MspInit+0x28e>
  else if(uartHandle->Instance==USART3)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a3b      	ldr	r2, [pc, #236]	; (80032b8 <HAL_UART_MspInit+0x2b8>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d12d      	bne.n	800322c <HAL_UART_MspInit+0x22c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80031d0:	2300      	movs	r3, #0
 80031d2:	617b      	str	r3, [r7, #20]
 80031d4:	4b31      	ldr	r3, [pc, #196]	; (800329c <HAL_UART_MspInit+0x29c>)
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	4a30      	ldr	r2, [pc, #192]	; (800329c <HAL_UART_MspInit+0x29c>)
 80031da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031de:	6413      	str	r3, [r2, #64]	; 0x40
 80031e0:	4b2e      	ldr	r3, [pc, #184]	; (800329c <HAL_UART_MspInit+0x29c>)
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031e8:	617b      	str	r3, [r7, #20]
 80031ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031ec:	2300      	movs	r3, #0
 80031ee:	613b      	str	r3, [r7, #16]
 80031f0:	4b2a      	ldr	r3, [pc, #168]	; (800329c <HAL_UART_MspInit+0x29c>)
 80031f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f4:	4a29      	ldr	r2, [pc, #164]	; (800329c <HAL_UART_MspInit+0x29c>)
 80031f6:	f043 0308 	orr.w	r3, r3, #8
 80031fa:	6313      	str	r3, [r2, #48]	; 0x30
 80031fc:	4b27      	ldr	r3, [pc, #156]	; (800329c <HAL_UART_MspInit+0x29c>)
 80031fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003200:	f003 0308 	and.w	r3, r3, #8
 8003204:	613b      	str	r3, [r7, #16]
 8003206:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003208:	f44f 7340 	mov.w	r3, #768	; 0x300
 800320c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320e:	2302      	movs	r3, #2
 8003210:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003212:	2300      	movs	r3, #0
 8003214:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003216:	2303      	movs	r3, #3
 8003218:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800321a:	2307      	movs	r3, #7
 800321c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800321e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003222:	4619      	mov	r1, r3
 8003224:	481f      	ldr	r0, [pc, #124]	; (80032a4 <HAL_UART_MspInit+0x2a4>)
 8003226:	f000 f9f1 	bl	800360c <HAL_GPIO_Init>
}
 800322a:	e030      	b.n	800328e <HAL_UART_MspInit+0x28e>
  else if(uartHandle->Instance==USART6)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a22      	ldr	r2, [pc, #136]	; (80032bc <HAL_UART_MspInit+0x2bc>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d12b      	bne.n	800328e <HAL_UART_MspInit+0x28e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003236:	2300      	movs	r3, #0
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	4b18      	ldr	r3, [pc, #96]	; (800329c <HAL_UART_MspInit+0x29c>)
 800323c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323e:	4a17      	ldr	r2, [pc, #92]	; (800329c <HAL_UART_MspInit+0x29c>)
 8003240:	f043 0320 	orr.w	r3, r3, #32
 8003244:	6453      	str	r3, [r2, #68]	; 0x44
 8003246:	4b15      	ldr	r3, [pc, #84]	; (800329c <HAL_UART_MspInit+0x29c>)
 8003248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324a:	f003 0320 	and.w	r3, r3, #32
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003252:	2300      	movs	r3, #0
 8003254:	60bb      	str	r3, [r7, #8]
 8003256:	4b11      	ldr	r3, [pc, #68]	; (800329c <HAL_UART_MspInit+0x29c>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	4a10      	ldr	r2, [pc, #64]	; (800329c <HAL_UART_MspInit+0x29c>)
 800325c:	f043 0304 	orr.w	r3, r3, #4
 8003260:	6313      	str	r3, [r2, #48]	; 0x30
 8003262:	4b0e      	ldr	r3, [pc, #56]	; (800329c <HAL_UART_MspInit+0x29c>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	f003 0304 	and.w	r3, r3, #4
 800326a:	60bb      	str	r3, [r7, #8]
 800326c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800326e:	23c0      	movs	r3, #192	; 0xc0
 8003270:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003272:	2302      	movs	r3, #2
 8003274:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003276:	2300      	movs	r3, #0
 8003278:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800327a:	2303      	movs	r3, #3
 800327c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800327e:	2308      	movs	r3, #8
 8003280:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003282:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003286:	4619      	mov	r1, r3
 8003288:	4805      	ldr	r0, [pc, #20]	; (80032a0 <HAL_UART_MspInit+0x2a0>)
 800328a:	f000 f9bf 	bl	800360c <HAL_GPIO_Init>
}
 800328e:	bf00      	nop
 8003290:	3748      	adds	r7, #72	; 0x48
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40005000 	.word	0x40005000
 800329c:	40023800 	.word	0x40023800
 80032a0:	40020800 	.word	0x40020800
 80032a4:	40020c00 	.word	0x40020c00
 80032a8:	40007800 	.word	0x40007800
 80032ac:	40021400 	.word	0x40021400
 80032b0:	40011000 	.word	0x40011000
 80032b4:	40020000 	.word	0x40020000
 80032b8:	40004800 	.word	0x40004800
 80032bc:	40011400 	.word	0x40011400

080032c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack       /* set stack pointer */
 80032c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032c4:	480d      	ldr	r0, [pc, #52]	; (80032fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80032c6:	490e      	ldr	r1, [pc, #56]	; (8003300 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80032c8:	4a0e      	ldr	r2, [pc, #56]	; (8003304 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80032ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032cc:	e002      	b.n	80032d4 <LoopCopyDataInit>

080032ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032d2:	3304      	adds	r3, #4

080032d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032d8:	d3f9      	bcc.n	80032ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032da:	4a0b      	ldr	r2, [pc, #44]	; (8003308 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80032dc:	4c0b      	ldr	r4, [pc, #44]	; (800330c <LoopFillZerobss+0x26>)
  movs r3, #0
 80032de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032e0:	e001      	b.n	80032e6 <LoopFillZerobss>

080032e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032e4:	3204      	adds	r2, #4

080032e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032e8:	d3fb      	bcc.n	80032e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80032ea:	f7ff fda5 	bl	8002e38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032ee:	f003 fac1 	bl	8006874 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032f2:	f7ff fa55 	bl	80027a0 <main>
  bx  lr
 80032f6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80032f8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80032fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003300:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8003304:	0800c044 	.word	0x0800c044
  ldr r2, =_sbss
 8003308:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 800330c:	20001fb0 	.word	0x20001fb0

08003310 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003310:	e7fe      	b.n	8003310 <ADC_IRQHandler>
	...

08003314 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003318:	4b0e      	ldr	r3, [pc, #56]	; (8003354 <HAL_Init+0x40>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a0d      	ldr	r2, [pc, #52]	; (8003354 <HAL_Init+0x40>)
 800331e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003322:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003324:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <HAL_Init+0x40>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a0a      	ldr	r2, [pc, #40]	; (8003354 <HAL_Init+0x40>)
 800332a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800332e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003330:	4b08      	ldr	r3, [pc, #32]	; (8003354 <HAL_Init+0x40>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a07      	ldr	r2, [pc, #28]	; (8003354 <HAL_Init+0x40>)
 8003336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800333a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800333c:	2003      	movs	r0, #3
 800333e:	f000 f931 	bl	80035a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003342:	200f      	movs	r0, #15
 8003344:	f000 f808 	bl	8003358 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003348:	f7ff fc5e 	bl	8002c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	40023c00 	.word	0x40023c00

08003358 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003360:	4b12      	ldr	r3, [pc, #72]	; (80033ac <HAL_InitTick+0x54>)
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	4b12      	ldr	r3, [pc, #72]	; (80033b0 <HAL_InitTick+0x58>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	4619      	mov	r1, r3
 800336a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800336e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003372:	fbb2 f3f3 	udiv	r3, r2, r3
 8003376:	4618      	mov	r0, r3
 8003378:	f000 f93b 	bl	80035f2 <HAL_SYSTICK_Config>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e00e      	b.n	80033a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b0f      	cmp	r3, #15
 800338a:	d80a      	bhi.n	80033a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800338c:	2200      	movs	r2, #0
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003394:	f000 f911 	bl	80035ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003398:	4a06      	ldr	r2, [pc, #24]	; (80033b4 <HAL_InitTick+0x5c>)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800339e:	2300      	movs	r3, #0
 80033a0:	e000      	b.n	80033a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	20000030 	.word	0x20000030
 80033b0:	20000038 	.word	0x20000038
 80033b4:	20000034 	.word	0x20000034

080033b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033bc:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <HAL_IncTick+0x20>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	461a      	mov	r2, r3
 80033c2:	4b06      	ldr	r3, [pc, #24]	; (80033dc <HAL_IncTick+0x24>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4413      	add	r3, r2
 80033c8:	4a04      	ldr	r2, [pc, #16]	; (80033dc <HAL_IncTick+0x24>)
 80033ca:	6013      	str	r3, [r2, #0]
}
 80033cc:	bf00      	nop
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	20000038 	.word	0x20000038
 80033dc:	20001f9c 	.word	0x20001f9c

080033e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  return uwTick;
 80033e4:	4b03      	ldr	r3, [pc, #12]	; (80033f4 <HAL_GetTick+0x14>)
 80033e6:	681b      	ldr	r3, [r3, #0]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	20001f9c 	.word	0x20001f9c

080033f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003400:	f7ff ffee 	bl	80033e0 <HAL_GetTick>
 8003404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003410:	d005      	beq.n	800341e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003412:	4b0a      	ldr	r3, [pc, #40]	; (800343c <HAL_Delay+0x44>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	461a      	mov	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4413      	add	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800341e:	bf00      	nop
 8003420:	f7ff ffde 	bl	80033e0 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	429a      	cmp	r2, r3
 800342e:	d8f7      	bhi.n	8003420 <HAL_Delay+0x28>
  {
  }
}
 8003430:	bf00      	nop
 8003432:	bf00      	nop
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20000038 	.word	0x20000038

08003440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003450:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <__NVIC_SetPriorityGrouping+0x44>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800345c:	4013      	ands	r3, r2
 800345e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003468:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800346c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003472:	4a04      	ldr	r2, [pc, #16]	; (8003484 <__NVIC_SetPriorityGrouping+0x44>)
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	60d3      	str	r3, [r2, #12]
}
 8003478:	bf00      	nop
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	e000ed00 	.word	0xe000ed00

08003488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800348c:	4b04      	ldr	r3, [pc, #16]	; (80034a0 <__NVIC_GetPriorityGrouping+0x18>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	0a1b      	lsrs	r3, r3, #8
 8003492:	f003 0307 	and.w	r3, r3, #7
}
 8003496:	4618      	mov	r0, r3
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	e000ed00 	.word	0xe000ed00

080034a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4603      	mov	r3, r0
 80034ac:	6039      	str	r1, [r7, #0]
 80034ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	db0a      	blt.n	80034ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	490c      	ldr	r1, [pc, #48]	; (80034f0 <__NVIC_SetPriority+0x4c>)
 80034be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c2:	0112      	lsls	r2, r2, #4
 80034c4:	b2d2      	uxtb	r2, r2
 80034c6:	440b      	add	r3, r1
 80034c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034cc:	e00a      	b.n	80034e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	4908      	ldr	r1, [pc, #32]	; (80034f4 <__NVIC_SetPriority+0x50>)
 80034d4:	79fb      	ldrb	r3, [r7, #7]
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	3b04      	subs	r3, #4
 80034dc:	0112      	lsls	r2, r2, #4
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	440b      	add	r3, r1
 80034e2:	761a      	strb	r2, [r3, #24]
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	e000e100 	.word	0xe000e100
 80034f4:	e000ed00 	.word	0xe000ed00

080034f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b089      	sub	sp, #36	; 0x24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	f1c3 0307 	rsb	r3, r3, #7
 8003512:	2b04      	cmp	r3, #4
 8003514:	bf28      	it	cs
 8003516:	2304      	movcs	r3, #4
 8003518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	3304      	adds	r3, #4
 800351e:	2b06      	cmp	r3, #6
 8003520:	d902      	bls.n	8003528 <NVIC_EncodePriority+0x30>
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	3b03      	subs	r3, #3
 8003526:	e000      	b.n	800352a <NVIC_EncodePriority+0x32>
 8003528:	2300      	movs	r3, #0
 800352a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800352c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43da      	mvns	r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	401a      	ands	r2, r3
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003540:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	fa01 f303 	lsl.w	r3, r1, r3
 800354a:	43d9      	mvns	r1, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003550:	4313      	orrs	r3, r2
         );
}
 8003552:	4618      	mov	r0, r3
 8003554:	3724      	adds	r7, #36	; 0x24
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
	...

08003560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3b01      	subs	r3, #1
 800356c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003570:	d301      	bcc.n	8003576 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003572:	2301      	movs	r3, #1
 8003574:	e00f      	b.n	8003596 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003576:	4a0a      	ldr	r2, [pc, #40]	; (80035a0 <SysTick_Config+0x40>)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3b01      	subs	r3, #1
 800357c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800357e:	210f      	movs	r1, #15
 8003580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003584:	f7ff ff8e 	bl	80034a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003588:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <SysTick_Config+0x40>)
 800358a:	2200      	movs	r2, #0
 800358c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800358e:	4b04      	ldr	r3, [pc, #16]	; (80035a0 <SysTick_Config+0x40>)
 8003590:	2207      	movs	r2, #7
 8003592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	e000e010 	.word	0xe000e010

080035a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f7ff ff47 	bl	8003440 <__NVIC_SetPriorityGrouping>
}
 80035b2:	bf00      	nop
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b086      	sub	sp, #24
 80035be:	af00      	add	r7, sp, #0
 80035c0:	4603      	mov	r3, r0
 80035c2:	60b9      	str	r1, [r7, #8]
 80035c4:	607a      	str	r2, [r7, #4]
 80035c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035cc:	f7ff ff5c 	bl	8003488 <__NVIC_GetPriorityGrouping>
 80035d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	68b9      	ldr	r1, [r7, #8]
 80035d6:	6978      	ldr	r0, [r7, #20]
 80035d8:	f7ff ff8e 	bl	80034f8 <NVIC_EncodePriority>
 80035dc:	4602      	mov	r2, r0
 80035de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035e2:	4611      	mov	r1, r2
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff ff5d 	bl	80034a4 <__NVIC_SetPriority>
}
 80035ea:	bf00      	nop
 80035ec:	3718      	adds	r7, #24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b082      	sub	sp, #8
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7ff ffb0 	bl	8003560 <SysTick_Config>
 8003600:	4603      	mov	r3, r0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
	...

0800360c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800360c:	b480      	push	{r7}
 800360e:	b089      	sub	sp, #36	; 0x24
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003616:	2300      	movs	r3, #0
 8003618:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800361a:	2300      	movs	r3, #0
 800361c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800361e:	2300      	movs	r3, #0
 8003620:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003622:	2300      	movs	r3, #0
 8003624:	61fb      	str	r3, [r7, #28]
 8003626:	e177      	b.n	8003918 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003628:	2201      	movs	r2, #1
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	4013      	ands	r3, r2
 800363a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	429a      	cmp	r2, r3
 8003642:	f040 8166 	bne.w	8003912 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f003 0303 	and.w	r3, r3, #3
 800364e:	2b01      	cmp	r3, #1
 8003650:	d005      	beq.n	800365e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800365a:	2b02      	cmp	r3, #2
 800365c:	d130      	bne.n	80036c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	2203      	movs	r2, #3
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	43db      	mvns	r3, r3
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	4013      	ands	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	68da      	ldr	r2, [r3, #12]
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	4313      	orrs	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003694:	2201      	movs	r2, #1
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	43db      	mvns	r3, r3
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	4013      	ands	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	091b      	lsrs	r3, r3, #4
 80036aa:	f003 0201 	and.w	r2, r3, #1
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f003 0303 	and.w	r3, r3, #3
 80036c8:	2b03      	cmp	r3, #3
 80036ca:	d017      	beq.n	80036fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	2203      	movs	r2, #3
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	43db      	mvns	r3, r3
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	4013      	ands	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f003 0303 	and.w	r3, r3, #3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d123      	bne.n	8003750 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	08da      	lsrs	r2, r3, #3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3208      	adds	r2, #8
 8003710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003714:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	220f      	movs	r2, #15
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	43db      	mvns	r3, r3
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	4013      	ands	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	691a      	ldr	r2, [r3, #16]
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	4313      	orrs	r3, r2
 8003740:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	08da      	lsrs	r2, r3, #3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	3208      	adds	r2, #8
 800374a:	69b9      	ldr	r1, [r7, #24]
 800374c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	2203      	movs	r2, #3
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	43db      	mvns	r3, r3
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4013      	ands	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f003 0203 	and.w	r2, r3, #3
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	4313      	orrs	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 80c0 	beq.w	8003912 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	4b66      	ldr	r3, [pc, #408]	; (8003930 <HAL_GPIO_Init+0x324>)
 8003798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379a:	4a65      	ldr	r2, [pc, #404]	; (8003930 <HAL_GPIO_Init+0x324>)
 800379c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037a0:	6453      	str	r3, [r2, #68]	; 0x44
 80037a2:	4b63      	ldr	r3, [pc, #396]	; (8003930 <HAL_GPIO_Init+0x324>)
 80037a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037ae:	4a61      	ldr	r2, [pc, #388]	; (8003934 <HAL_GPIO_Init+0x328>)
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	089b      	lsrs	r3, r3, #2
 80037b4:	3302      	adds	r3, #2
 80037b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	220f      	movs	r2, #15
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	43db      	mvns	r3, r3
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	4013      	ands	r3, r2
 80037d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a58      	ldr	r2, [pc, #352]	; (8003938 <HAL_GPIO_Init+0x32c>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d037      	beq.n	800384a <HAL_GPIO_Init+0x23e>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a57      	ldr	r2, [pc, #348]	; (800393c <HAL_GPIO_Init+0x330>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d031      	beq.n	8003846 <HAL_GPIO_Init+0x23a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a56      	ldr	r2, [pc, #344]	; (8003940 <HAL_GPIO_Init+0x334>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d02b      	beq.n	8003842 <HAL_GPIO_Init+0x236>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a55      	ldr	r2, [pc, #340]	; (8003944 <HAL_GPIO_Init+0x338>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d025      	beq.n	800383e <HAL_GPIO_Init+0x232>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a54      	ldr	r2, [pc, #336]	; (8003948 <HAL_GPIO_Init+0x33c>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d01f      	beq.n	800383a <HAL_GPIO_Init+0x22e>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a53      	ldr	r2, [pc, #332]	; (800394c <HAL_GPIO_Init+0x340>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d019      	beq.n	8003836 <HAL_GPIO_Init+0x22a>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a52      	ldr	r2, [pc, #328]	; (8003950 <HAL_GPIO_Init+0x344>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d013      	beq.n	8003832 <HAL_GPIO_Init+0x226>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a51      	ldr	r2, [pc, #324]	; (8003954 <HAL_GPIO_Init+0x348>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d00d      	beq.n	800382e <HAL_GPIO_Init+0x222>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a50      	ldr	r2, [pc, #320]	; (8003958 <HAL_GPIO_Init+0x34c>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d007      	beq.n	800382a <HAL_GPIO_Init+0x21e>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a4f      	ldr	r2, [pc, #316]	; (800395c <HAL_GPIO_Init+0x350>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d101      	bne.n	8003826 <HAL_GPIO_Init+0x21a>
 8003822:	2309      	movs	r3, #9
 8003824:	e012      	b.n	800384c <HAL_GPIO_Init+0x240>
 8003826:	230a      	movs	r3, #10
 8003828:	e010      	b.n	800384c <HAL_GPIO_Init+0x240>
 800382a:	2308      	movs	r3, #8
 800382c:	e00e      	b.n	800384c <HAL_GPIO_Init+0x240>
 800382e:	2307      	movs	r3, #7
 8003830:	e00c      	b.n	800384c <HAL_GPIO_Init+0x240>
 8003832:	2306      	movs	r3, #6
 8003834:	e00a      	b.n	800384c <HAL_GPIO_Init+0x240>
 8003836:	2305      	movs	r3, #5
 8003838:	e008      	b.n	800384c <HAL_GPIO_Init+0x240>
 800383a:	2304      	movs	r3, #4
 800383c:	e006      	b.n	800384c <HAL_GPIO_Init+0x240>
 800383e:	2303      	movs	r3, #3
 8003840:	e004      	b.n	800384c <HAL_GPIO_Init+0x240>
 8003842:	2302      	movs	r3, #2
 8003844:	e002      	b.n	800384c <HAL_GPIO_Init+0x240>
 8003846:	2301      	movs	r3, #1
 8003848:	e000      	b.n	800384c <HAL_GPIO_Init+0x240>
 800384a:	2300      	movs	r3, #0
 800384c:	69fa      	ldr	r2, [r7, #28]
 800384e:	f002 0203 	and.w	r2, r2, #3
 8003852:	0092      	lsls	r2, r2, #2
 8003854:	4093      	lsls	r3, r2
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4313      	orrs	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800385c:	4935      	ldr	r1, [pc, #212]	; (8003934 <HAL_GPIO_Init+0x328>)
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	089b      	lsrs	r3, r3, #2
 8003862:	3302      	adds	r3, #2
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800386a:	4b3d      	ldr	r3, [pc, #244]	; (8003960 <HAL_GPIO_Init+0x354>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	43db      	mvns	r3, r3
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	4013      	ands	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	4313      	orrs	r3, r2
 800388c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800388e:	4a34      	ldr	r2, [pc, #208]	; (8003960 <HAL_GPIO_Init+0x354>)
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003894:	4b32      	ldr	r3, [pc, #200]	; (8003960 <HAL_GPIO_Init+0x354>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	43db      	mvns	r3, r3
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	4013      	ands	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038b8:	4a29      	ldr	r2, [pc, #164]	; (8003960 <HAL_GPIO_Init+0x354>)
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038be:	4b28      	ldr	r3, [pc, #160]	; (8003960 <HAL_GPIO_Init+0x354>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	43db      	mvns	r3, r3
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	4013      	ands	r3, r2
 80038cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	4313      	orrs	r3, r2
 80038e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038e2:	4a1f      	ldr	r2, [pc, #124]	; (8003960 <HAL_GPIO_Init+0x354>)
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038e8:	4b1d      	ldr	r3, [pc, #116]	; (8003960 <HAL_GPIO_Init+0x354>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	43db      	mvns	r3, r3
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4013      	ands	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	4313      	orrs	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800390c:	4a14      	ldr	r2, [pc, #80]	; (8003960 <HAL_GPIO_Init+0x354>)
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	3301      	adds	r3, #1
 8003916:	61fb      	str	r3, [r7, #28]
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	2b0f      	cmp	r3, #15
 800391c:	f67f ae84 	bls.w	8003628 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003920:	bf00      	nop
 8003922:	bf00      	nop
 8003924:	3724      	adds	r7, #36	; 0x24
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	40023800 	.word	0x40023800
 8003934:	40013800 	.word	0x40013800
 8003938:	40020000 	.word	0x40020000
 800393c:	40020400 	.word	0x40020400
 8003940:	40020800 	.word	0x40020800
 8003944:	40020c00 	.word	0x40020c00
 8003948:	40021000 	.word	0x40021000
 800394c:	40021400 	.word	0x40021400
 8003950:	40021800 	.word	0x40021800
 8003954:	40021c00 	.word	0x40021c00
 8003958:	40022000 	.word	0x40022000
 800395c:	40022400 	.word	0x40022400
 8003960:	40013c00 	.word	0x40013c00

08003964 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e12b      	b.n	8003bce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d106      	bne.n	8003990 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7fe fec0 	bl	8002710 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2224      	movs	r2, #36	; 0x24
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0201 	bic.w	r2, r2, #1
 80039a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039c8:	f001 feca 	bl	8005760 <HAL_RCC_GetPCLK1Freq>
 80039cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	4a81      	ldr	r2, [pc, #516]	; (8003bd8 <HAL_I2C_Init+0x274>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d807      	bhi.n	80039e8 <HAL_I2C_Init+0x84>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4a80      	ldr	r2, [pc, #512]	; (8003bdc <HAL_I2C_Init+0x278>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	bf94      	ite	ls
 80039e0:	2301      	movls	r3, #1
 80039e2:	2300      	movhi	r3, #0
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	e006      	b.n	80039f6 <HAL_I2C_Init+0x92>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4a7d      	ldr	r2, [pc, #500]	; (8003be0 <HAL_I2C_Init+0x27c>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	bf94      	ite	ls
 80039f0:	2301      	movls	r3, #1
 80039f2:	2300      	movhi	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e0e7      	b.n	8003bce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	4a78      	ldr	r2, [pc, #480]	; (8003be4 <HAL_I2C_Init+0x280>)
 8003a02:	fba2 2303 	umull	r2, r3, r2, r3
 8003a06:	0c9b      	lsrs	r3, r3, #18
 8003a08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	4a6a      	ldr	r2, [pc, #424]	; (8003bd8 <HAL_I2C_Init+0x274>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d802      	bhi.n	8003a38 <HAL_I2C_Init+0xd4>
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	3301      	adds	r3, #1
 8003a36:	e009      	b.n	8003a4c <HAL_I2C_Init+0xe8>
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a3e:	fb02 f303 	mul.w	r3, r2, r3
 8003a42:	4a69      	ldr	r2, [pc, #420]	; (8003be8 <HAL_I2C_Init+0x284>)
 8003a44:	fba2 2303 	umull	r2, r3, r2, r3
 8003a48:	099b      	lsrs	r3, r3, #6
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6812      	ldr	r2, [r2, #0]
 8003a50:	430b      	orrs	r3, r1
 8003a52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	495c      	ldr	r1, [pc, #368]	; (8003bd8 <HAL_I2C_Init+0x274>)
 8003a68:	428b      	cmp	r3, r1
 8003a6a:	d819      	bhi.n	8003aa0 <HAL_I2C_Init+0x13c>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	1e59      	subs	r1, r3, #1
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a7a:	1c59      	adds	r1, r3, #1
 8003a7c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a80:	400b      	ands	r3, r1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00a      	beq.n	8003a9c <HAL_I2C_Init+0x138>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1e59      	subs	r1, r3, #1
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a94:	3301      	adds	r3, #1
 8003a96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a9a:	e051      	b.n	8003b40 <HAL_I2C_Init+0x1dc>
 8003a9c:	2304      	movs	r3, #4
 8003a9e:	e04f      	b.n	8003b40 <HAL_I2C_Init+0x1dc>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d111      	bne.n	8003acc <HAL_I2C_Init+0x168>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	1e58      	subs	r0, r3, #1
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6859      	ldr	r1, [r3, #4]
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	440b      	add	r3, r1
 8003ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aba:	3301      	adds	r3, #1
 8003abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	bf0c      	ite	eq
 8003ac4:	2301      	moveq	r3, #1
 8003ac6:	2300      	movne	r3, #0
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	e012      	b.n	8003af2 <HAL_I2C_Init+0x18e>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	1e58      	subs	r0, r3, #1
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6859      	ldr	r1, [r3, #4]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	440b      	add	r3, r1
 8003ada:	0099      	lsls	r1, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	bf0c      	ite	eq
 8003aec:	2301      	moveq	r3, #1
 8003aee:	2300      	movne	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <HAL_I2C_Init+0x196>
 8003af6:	2301      	movs	r3, #1
 8003af8:	e022      	b.n	8003b40 <HAL_I2C_Init+0x1dc>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10e      	bne.n	8003b20 <HAL_I2C_Init+0x1bc>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	1e58      	subs	r0, r3, #1
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6859      	ldr	r1, [r3, #4]
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	440b      	add	r3, r1
 8003b10:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b14:	3301      	adds	r3, #1
 8003b16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b1e:	e00f      	b.n	8003b40 <HAL_I2C_Init+0x1dc>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	1e58      	subs	r0, r3, #1
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6859      	ldr	r1, [r3, #4]
 8003b28:	460b      	mov	r3, r1
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	0099      	lsls	r1, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b36:	3301      	adds	r3, #1
 8003b38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b40:	6879      	ldr	r1, [r7, #4]
 8003b42:	6809      	ldr	r1, [r1, #0]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	69da      	ldr	r2, [r3, #28]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6911      	ldr	r1, [r2, #16]
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	68d2      	ldr	r2, [r2, #12]
 8003b7a:	4311      	orrs	r1, r2
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	6812      	ldr	r2, [r2, #0]
 8003b80:	430b      	orrs	r3, r1
 8003b82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	695a      	ldr	r2, [r3, #20]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0201 	orr.w	r2, r2, #1
 8003bae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2220      	movs	r2, #32
 8003bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	000186a0 	.word	0x000186a0
 8003bdc:	001e847f 	.word	0x001e847f
 8003be0:	003d08ff 	.word	0x003d08ff
 8003be4:	431bde83 	.word	0x431bde83
 8003be8:	10624dd3 	.word	0x10624dd3

08003bec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b088      	sub	sp, #32
 8003bf0:	af02      	add	r7, sp, #8
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	607a      	str	r2, [r7, #4]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	817b      	strh	r3, [r7, #10]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c00:	f7ff fbee 	bl	80033e0 <HAL_GetTick>
 8003c04:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b20      	cmp	r3, #32
 8003c10:	f040 80e0 	bne.w	8003dd4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	2319      	movs	r3, #25
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	4970      	ldr	r1, [pc, #448]	; (8003de0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f000 ff16 	bl	8004a50 <I2C_WaitOnFlagUntilTimeout>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	e0d3      	b.n	8003dd6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d101      	bne.n	8003c3c <HAL_I2C_Master_Transmit+0x50>
 8003c38:	2302      	movs	r3, #2
 8003c3a:	e0cc      	b.n	8003dd6 <HAL_I2C_Master_Transmit+0x1ea>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d007      	beq.n	8003c62 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f042 0201 	orr.w	r2, r2, #1
 8003c60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c70:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2221      	movs	r2, #33	; 0x21
 8003c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2210      	movs	r2, #16
 8003c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	893a      	ldrh	r2, [r7, #8]
 8003c92:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	4a50      	ldr	r2, [pc, #320]	; (8003de4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003ca2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ca4:	8979      	ldrh	r1, [r7, #10]
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	6a3a      	ldr	r2, [r7, #32]
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 fcea 	bl	8004684 <I2C_MasterRequestWrite>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e08d      	b.n	8003dd6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cba:	2300      	movs	r3, #0
 8003cbc:	613b      	str	r3, [r7, #16]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	613b      	str	r3, [r7, #16]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	613b      	str	r3, [r7, #16]
 8003cce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003cd0:	e066      	b.n	8003da0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	6a39      	ldr	r1, [r7, #32]
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f000 ff90 	bl	8004bfc <I2C_WaitOnTXEFlagUntilTimeout>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00d      	beq.n	8003cfe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d107      	bne.n	8003cfa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cf8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e06b      	b.n	8003dd6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	781a      	ldrb	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	1c5a      	adds	r2, r3, #1
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d26:	3b01      	subs	r3, #1
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	f003 0304 	and.w	r3, r3, #4
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	d11b      	bne.n	8003d74 <HAL_I2C_Master_Transmit+0x188>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d017      	beq.n	8003d74 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	781a      	ldrb	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	1c5a      	adds	r2, r3, #1
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	3b01      	subs	r3, #1
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	6a39      	ldr	r1, [r7, #32]
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f000 ff80 	bl	8004c7e <I2C_WaitOnBTFFlagUntilTimeout>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00d      	beq.n	8003da0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d107      	bne.n	8003d9c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d9a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e01a      	b.n	8003dd6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d194      	bne.n	8003cd2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003db6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	e000      	b.n	8003dd6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003dd4:	2302      	movs	r3, #2
  }
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3718      	adds	r7, #24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	00100002 	.word	0x00100002
 8003de4:	ffff0000 	.word	0xffff0000

08003de8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b08c      	sub	sp, #48	; 0x30
 8003dec:	af02      	add	r7, sp, #8
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	607a      	str	r2, [r7, #4]
 8003df2:	461a      	mov	r2, r3
 8003df4:	460b      	mov	r3, r1
 8003df6:	817b      	strh	r3, [r7, #10]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003dfc:	f7ff faf0 	bl	80033e0 <HAL_GetTick>
 8003e00:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b20      	cmp	r3, #32
 8003e0c:	f040 820b 	bne.w	8004226 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	2319      	movs	r3, #25
 8003e16:	2201      	movs	r2, #1
 8003e18:	497c      	ldr	r1, [pc, #496]	; (800400c <HAL_I2C_Master_Receive+0x224>)
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 fe18 	bl	8004a50 <I2C_WaitOnFlagUntilTimeout>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003e26:	2302      	movs	r3, #2
 8003e28:	e1fe      	b.n	8004228 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d101      	bne.n	8003e38 <HAL_I2C_Master_Receive+0x50>
 8003e34:	2302      	movs	r3, #2
 8003e36:	e1f7      	b.n	8004228 <HAL_I2C_Master_Receive+0x440>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d007      	beq.n	8003e5e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f042 0201 	orr.w	r2, r2, #1
 8003e5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2222      	movs	r2, #34	; 0x22
 8003e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2210      	movs	r2, #16
 8003e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	893a      	ldrh	r2, [r7, #8]
 8003e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4a5c      	ldr	r2, [pc, #368]	; (8004010 <HAL_I2C_Master_Receive+0x228>)
 8003e9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ea0:	8979      	ldrh	r1, [r7, #10]
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f000 fc6e 	bl	8004788 <I2C_MasterRequestRead>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e1b8      	b.n	8004228 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d113      	bne.n	8003ee6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	623b      	str	r3, [r7, #32]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	623b      	str	r3, [r7, #32]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	623b      	str	r3, [r7, #32]
 8003ed2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	e18c      	b.n	8004200 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d11b      	bne.n	8003f26 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003efc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003efe:	2300      	movs	r3, #0
 8003f00:	61fb      	str	r3, [r7, #28]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	61fb      	str	r3, [r7, #28]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	61fb      	str	r3, [r7, #28]
 8003f12:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	e16c      	b.n	8004200 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d11b      	bne.n	8003f66 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f3c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f4e:	2300      	movs	r3, #0
 8003f50:	61bb      	str	r3, [r7, #24]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	61bb      	str	r3, [r7, #24]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	61bb      	str	r3, [r7, #24]
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	e14c      	b.n	8004200 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f76:	2300      	movs	r3, #0
 8003f78:	617b      	str	r3, [r7, #20]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	617b      	str	r3, [r7, #20]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	617b      	str	r3, [r7, #20]
 8003f8a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003f8c:	e138      	b.n	8004200 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f92:	2b03      	cmp	r3, #3
 8003f94:	f200 80f1 	bhi.w	800417a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d123      	bne.n	8003fe8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f000 feab 	bl	8004d00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d001      	beq.n	8003fb4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e139      	b.n	8004228 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	691a      	ldr	r2, [r3, #16]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	b2d2      	uxtb	r2, r2
 8003fc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	1c5a      	adds	r2, r3, #1
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fe6:	e10b      	b.n	8004200 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d14e      	bne.n	800408e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	4906      	ldr	r1, [pc, #24]	; (8004014 <HAL_I2C_Master_Receive+0x22c>)
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 fd28 	bl	8004a50 <I2C_WaitOnFlagUntilTimeout>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d008      	beq.n	8004018 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e10e      	b.n	8004228 <HAL_I2C_Master_Receive+0x440>
 800400a:	bf00      	nop
 800400c:	00100002 	.word	0x00100002
 8004010:	ffff0000 	.word	0xffff0000
 8004014:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004026:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	691a      	ldr	r2, [r3, #16]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403a:	1c5a      	adds	r2, r3, #1
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004044:	3b01      	subs	r3, #1
 8004046:	b29a      	uxth	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004050:	b29b      	uxth	r3, r3
 8004052:	3b01      	subs	r3, #1
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	691a      	ldr	r2, [r3, #16]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	b2d2      	uxtb	r2, r2
 8004066:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	1c5a      	adds	r2, r3, #1
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004076:	3b01      	subs	r3, #1
 8004078:	b29a      	uxth	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004082:	b29b      	uxth	r3, r3
 8004084:	3b01      	subs	r3, #1
 8004086:	b29a      	uxth	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800408c:	e0b8      	b.n	8004200 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004094:	2200      	movs	r2, #0
 8004096:	4966      	ldr	r1, [pc, #408]	; (8004230 <HAL_I2C_Master_Receive+0x448>)
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f000 fcd9 	bl	8004a50 <I2C_WaitOnFlagUntilTimeout>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d001      	beq.n	80040a8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e0bf      	b.n	8004228 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	691a      	ldr	r2, [r3, #16]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	b2d2      	uxtb	r2, r2
 80040c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	1c5a      	adds	r2, r3, #1
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d4:	3b01      	subs	r3, #1
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	3b01      	subs	r3, #1
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f0:	2200      	movs	r2, #0
 80040f2:	494f      	ldr	r1, [pc, #316]	; (8004230 <HAL_I2C_Master_Receive+0x448>)
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 fcab 	bl	8004a50 <I2C_WaitOnFlagUntilTimeout>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e091      	b.n	8004228 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004112:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	691a      	ldr	r2, [r3, #16]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	b2d2      	uxtb	r2, r2
 8004120:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	1c5a      	adds	r2, r3, #1
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004130:	3b01      	subs	r3, #1
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413c:	b29b      	uxth	r3, r3
 800413e:	3b01      	subs	r3, #1
 8004140:	b29a      	uxth	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	691a      	ldr	r2, [r3, #16]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004158:	1c5a      	adds	r2, r3, #1
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004162:	3b01      	subs	r3, #1
 8004164:	b29a      	uxth	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416e:	b29b      	uxth	r3, r3
 8004170:	3b01      	subs	r3, #1
 8004172:	b29a      	uxth	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004178:	e042      	b.n	8004200 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800417a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800417c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 fdbe 	bl	8004d00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e04c      	b.n	8004228 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	691a      	ldr	r2, [r3, #16]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	b2d2      	uxtb	r2, r2
 800419a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	f003 0304 	and.w	r3, r3, #4
 80041ca:	2b04      	cmp	r3, #4
 80041cc:	d118      	bne.n	8004200 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	691a      	ldr	r2, [r3, #16]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004204:	2b00      	cmp	r3, #0
 8004206:	f47f aec2 	bne.w	8003f8e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2220      	movs	r2, #32
 800420e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	e000      	b.n	8004228 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004226:	2302      	movs	r3, #2
  }
}
 8004228:	4618      	mov	r0, r3
 800422a:	3728      	adds	r7, #40	; 0x28
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	00010004 	.word	0x00010004

08004234 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b088      	sub	sp, #32
 8004238:	af02      	add	r7, sp, #8
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	4608      	mov	r0, r1
 800423e:	4611      	mov	r1, r2
 8004240:	461a      	mov	r2, r3
 8004242:	4603      	mov	r3, r0
 8004244:	817b      	strh	r3, [r7, #10]
 8004246:	460b      	mov	r3, r1
 8004248:	813b      	strh	r3, [r7, #8]
 800424a:	4613      	mov	r3, r2
 800424c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800424e:	f7ff f8c7 	bl	80033e0 <HAL_GetTick>
 8004252:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b20      	cmp	r3, #32
 800425e:	f040 80d9 	bne.w	8004414 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	2319      	movs	r3, #25
 8004268:	2201      	movs	r2, #1
 800426a:	496d      	ldr	r1, [pc, #436]	; (8004420 <HAL_I2C_Mem_Write+0x1ec>)
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 fbef 	bl	8004a50 <I2C_WaitOnFlagUntilTimeout>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004278:	2302      	movs	r3, #2
 800427a:	e0cc      	b.n	8004416 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004282:	2b01      	cmp	r3, #1
 8004284:	d101      	bne.n	800428a <HAL_I2C_Mem_Write+0x56>
 8004286:	2302      	movs	r3, #2
 8004288:	e0c5      	b.n	8004416 <HAL_I2C_Mem_Write+0x1e2>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b01      	cmp	r3, #1
 800429e:	d007      	beq.n	80042b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0201 	orr.w	r2, r2, #1
 80042ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2221      	movs	r2, #33	; 0x21
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2240      	movs	r2, #64	; 0x40
 80042cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6a3a      	ldr	r2, [r7, #32]
 80042da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80042e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4a4d      	ldr	r2, [pc, #308]	; (8004424 <HAL_I2C_Mem_Write+0x1f0>)
 80042f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042f2:	88f8      	ldrh	r0, [r7, #6]
 80042f4:	893a      	ldrh	r2, [r7, #8]
 80042f6:	8979      	ldrh	r1, [r7, #10]
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	9301      	str	r3, [sp, #4]
 80042fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	4603      	mov	r3, r0
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 fb0e 	bl	8004924 <I2C_RequestMemoryWrite>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d052      	beq.n	80043b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e081      	b.n	8004416 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 fc70 	bl	8004bfc <I2C_WaitOnTXEFlagUntilTimeout>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00d      	beq.n	800433e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	2b04      	cmp	r3, #4
 8004328:	d107      	bne.n	800433a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004338:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e06b      	b.n	8004416 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004342:	781a      	ldrb	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	1c5a      	adds	r2, r3, #1
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004358:	3b01      	subs	r3, #1
 800435a:	b29a      	uxth	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004364:	b29b      	uxth	r3, r3
 8004366:	3b01      	subs	r3, #1
 8004368:	b29a      	uxth	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b04      	cmp	r3, #4
 800437a:	d11b      	bne.n	80043b4 <HAL_I2C_Mem_Write+0x180>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004380:	2b00      	cmp	r3, #0
 8004382:	d017      	beq.n	80043b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	781a      	ldrb	r2, [r3, #0]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	1c5a      	adds	r2, r3, #1
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439e:	3b01      	subs	r3, #1
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1aa      	bne.n	8004312 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 fc5c 	bl	8004c7e <I2C_WaitOnBTFFlagUntilTimeout>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00d      	beq.n	80043e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d0:	2b04      	cmp	r3, #4
 80043d2:	d107      	bne.n	80043e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e016      	b.n	8004416 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2220      	movs	r2, #32
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004410:	2300      	movs	r3, #0
 8004412:	e000      	b.n	8004416 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004414:	2302      	movs	r3, #2
  }
}
 8004416:	4618      	mov	r0, r3
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	00100002 	.word	0x00100002
 8004424:	ffff0000 	.word	0xffff0000

08004428 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b08a      	sub	sp, #40	; 0x28
 800442c:	af02      	add	r7, sp, #8
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	607a      	str	r2, [r7, #4]
 8004432:	603b      	str	r3, [r7, #0]
 8004434:	460b      	mov	r3, r1
 8004436:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004438:	f7fe ffd2 	bl	80033e0 <HAL_GetTick>
 800443c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800443e:	2300      	movs	r3, #0
 8004440:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b20      	cmp	r3, #32
 800444c:	f040 8111 	bne.w	8004672 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	9300      	str	r3, [sp, #0]
 8004454:	2319      	movs	r3, #25
 8004456:	2201      	movs	r2, #1
 8004458:	4988      	ldr	r1, [pc, #544]	; (800467c <HAL_I2C_IsDeviceReady+0x254>)
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f000 faf8 	bl	8004a50 <I2C_WaitOnFlagUntilTimeout>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004466:	2302      	movs	r3, #2
 8004468:	e104      	b.n	8004674 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004470:	2b01      	cmp	r3, #1
 8004472:	d101      	bne.n	8004478 <HAL_I2C_IsDeviceReady+0x50>
 8004474:	2302      	movs	r3, #2
 8004476:	e0fd      	b.n	8004674 <HAL_I2C_IsDeviceReady+0x24c>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b01      	cmp	r3, #1
 800448c:	d007      	beq.n	800449e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f042 0201 	orr.w	r2, r2, #1
 800449c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2224      	movs	r2, #36	; 0x24
 80044b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4a70      	ldr	r2, [pc, #448]	; (8004680 <HAL_I2C_IsDeviceReady+0x258>)
 80044c0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044d0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2200      	movs	r2, #0
 80044da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f000 fab6 	bl	8004a50 <I2C_WaitOnFlagUntilTimeout>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00d      	beq.n	8004506 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044f8:	d103      	bne.n	8004502 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004500:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e0b6      	b.n	8004674 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004506:	897b      	ldrh	r3, [r7, #10]
 8004508:	b2db      	uxtb	r3, r3
 800450a:	461a      	mov	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004514:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004516:	f7fe ff63 	bl	80033e0 <HAL_GetTick>
 800451a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b02      	cmp	r3, #2
 8004528:	bf0c      	ite	eq
 800452a:	2301      	moveq	r3, #1
 800452c:	2300      	movne	r3, #0
 800452e:	b2db      	uxtb	r3, r3
 8004530:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	695b      	ldr	r3, [r3, #20]
 8004538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800453c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004540:	bf0c      	ite	eq
 8004542:	2301      	moveq	r3, #1
 8004544:	2300      	movne	r3, #0
 8004546:	b2db      	uxtb	r3, r3
 8004548:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800454a:	e025      	b.n	8004598 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800454c:	f7fe ff48 	bl	80033e0 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	429a      	cmp	r2, r3
 800455a:	d302      	bcc.n	8004562 <HAL_I2C_IsDeviceReady+0x13a>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d103      	bne.n	800456a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	22a0      	movs	r2, #160	; 0xa0
 8004566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b02      	cmp	r3, #2
 8004576:	bf0c      	ite	eq
 8004578:	2301      	moveq	r3, #1
 800457a:	2300      	movne	r3, #0
 800457c:	b2db      	uxtb	r3, r3
 800457e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800458a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800458e:	bf0c      	ite	eq
 8004590:	2301      	moveq	r3, #1
 8004592:	2300      	movne	r3, #0
 8004594:	b2db      	uxtb	r3, r3
 8004596:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2ba0      	cmp	r3, #160	; 0xa0
 80045a2:	d005      	beq.n	80045b0 <HAL_I2C_IsDeviceReady+0x188>
 80045a4:	7dfb      	ldrb	r3, [r7, #23]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d102      	bne.n	80045b0 <HAL_I2C_IsDeviceReady+0x188>
 80045aa:	7dbb      	ldrb	r3, [r7, #22]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0cd      	beq.n	800454c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d129      	bne.n	800461a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045d4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045d6:	2300      	movs	r3, #0
 80045d8:	613b      	str	r3, [r7, #16]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	613b      	str	r3, [r7, #16]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	613b      	str	r3, [r7, #16]
 80045ea:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	9300      	str	r3, [sp, #0]
 80045f0:	2319      	movs	r3, #25
 80045f2:	2201      	movs	r2, #1
 80045f4:	4921      	ldr	r1, [pc, #132]	; (800467c <HAL_I2C_IsDeviceReady+0x254>)
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 fa2a 	bl	8004a50 <I2C_WaitOnFlagUntilTimeout>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e036      	b.n	8004674 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2220      	movs	r2, #32
 800460a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004616:	2300      	movs	r3, #0
 8004618:	e02c      	b.n	8004674 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004628:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004632:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	2319      	movs	r3, #25
 800463a:	2201      	movs	r2, #1
 800463c:	490f      	ldr	r1, [pc, #60]	; (800467c <HAL_I2C_IsDeviceReady+0x254>)
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 fa06 	bl	8004a50 <I2C_WaitOnFlagUntilTimeout>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e012      	b.n	8004674 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	3301      	adds	r3, #1
 8004652:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	429a      	cmp	r2, r3
 800465a:	f4ff af32 	bcc.w	80044c2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2220      	movs	r2, #32
 8004662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e000      	b.n	8004674 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004672:	2302      	movs	r3, #2
  }
}
 8004674:	4618      	mov	r0, r3
 8004676:	3720      	adds	r7, #32
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	00100002 	.word	0x00100002
 8004680:	ffff0000 	.word	0xffff0000

08004684 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b088      	sub	sp, #32
 8004688:	af02      	add	r7, sp, #8
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	607a      	str	r2, [r7, #4]
 800468e:	603b      	str	r3, [r7, #0]
 8004690:	460b      	mov	r3, r1
 8004692:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004698:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	2b08      	cmp	r3, #8
 800469e:	d006      	beq.n	80046ae <I2C_MasterRequestWrite+0x2a>
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d003      	beq.n	80046ae <I2C_MasterRequestWrite+0x2a>
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046ac:	d108      	bne.n	80046c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	e00b      	b.n	80046d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c4:	2b12      	cmp	r3, #18
 80046c6:	d107      	bne.n	80046d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	f000 f9b3 	bl	8004a50 <I2C_WaitOnFlagUntilTimeout>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00d      	beq.n	800470c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046fe:	d103      	bne.n	8004708 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004706:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e035      	b.n	8004778 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004714:	d108      	bne.n	8004728 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004716:	897b      	ldrh	r3, [r7, #10]
 8004718:	b2db      	uxtb	r3, r3
 800471a:	461a      	mov	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004724:	611a      	str	r2, [r3, #16]
 8004726:	e01b      	b.n	8004760 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004728:	897b      	ldrh	r3, [r7, #10]
 800472a:	11db      	asrs	r3, r3, #7
 800472c:	b2db      	uxtb	r3, r3
 800472e:	f003 0306 	and.w	r3, r3, #6
 8004732:	b2db      	uxtb	r3, r3
 8004734:	f063 030f 	orn	r3, r3, #15
 8004738:	b2da      	uxtb	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	490e      	ldr	r1, [pc, #56]	; (8004780 <I2C_MasterRequestWrite+0xfc>)
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 f9d9 	bl	8004afe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e010      	b.n	8004778 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004756:	897b      	ldrh	r3, [r7, #10]
 8004758:	b2da      	uxtb	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	4907      	ldr	r1, [pc, #28]	; (8004784 <I2C_MasterRequestWrite+0x100>)
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f000 f9c9 	bl	8004afe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e000      	b.n	8004778 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3718      	adds	r7, #24
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	00010008 	.word	0x00010008
 8004784:	00010002 	.word	0x00010002

08004788 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b088      	sub	sp, #32
 800478c:	af02      	add	r7, sp, #8
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	607a      	str	r2, [r7, #4]
 8004792:	603b      	str	r3, [r7, #0]
 8004794:	460b      	mov	r3, r1
 8004796:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047ac:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d006      	beq.n	80047c2 <I2C_MasterRequestRead+0x3a>
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d003      	beq.n	80047c2 <I2C_MasterRequestRead+0x3a>
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047c0:	d108      	bne.n	80047d4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047d0:	601a      	str	r2, [r3, #0]
 80047d2:	e00b      	b.n	80047ec <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d8:	2b11      	cmp	r3, #17
 80047da:	d107      	bne.n	80047ec <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	9300      	str	r3, [sp, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f000 f929 	bl	8004a50 <I2C_WaitOnFlagUntilTimeout>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00d      	beq.n	8004820 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004812:	d103      	bne.n	800481c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f44f 7200 	mov.w	r2, #512	; 0x200
 800481a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e079      	b.n	8004914 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004828:	d108      	bne.n	800483c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800482a:	897b      	ldrh	r3, [r7, #10]
 800482c:	b2db      	uxtb	r3, r3
 800482e:	f043 0301 	orr.w	r3, r3, #1
 8004832:	b2da      	uxtb	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	611a      	str	r2, [r3, #16]
 800483a:	e05f      	b.n	80048fc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800483c:	897b      	ldrh	r3, [r7, #10]
 800483e:	11db      	asrs	r3, r3, #7
 8004840:	b2db      	uxtb	r3, r3
 8004842:	f003 0306 	and.w	r3, r3, #6
 8004846:	b2db      	uxtb	r3, r3
 8004848:	f063 030f 	orn	r3, r3, #15
 800484c:	b2da      	uxtb	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	4930      	ldr	r1, [pc, #192]	; (800491c <I2C_MasterRequestRead+0x194>)
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 f94f 	bl	8004afe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e054      	b.n	8004914 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800486a:	897b      	ldrh	r3, [r7, #10]
 800486c:	b2da      	uxtb	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	4929      	ldr	r1, [pc, #164]	; (8004920 <I2C_MasterRequestRead+0x198>)
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 f93f 	bl	8004afe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e044      	b.n	8004914 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800488a:	2300      	movs	r3, #0
 800488c:	613b      	str	r3, [r7, #16]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	613b      	str	r3, [r7, #16]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	613b      	str	r3, [r7, #16]
 800489e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048ae:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 f8c7 	bl	8004a50 <I2C_WaitOnFlagUntilTimeout>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00d      	beq.n	80048e4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048d6:	d103      	bne.n	80048e0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048de:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e017      	b.n	8004914 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80048e4:	897b      	ldrh	r3, [r7, #10]
 80048e6:	11db      	asrs	r3, r3, #7
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	f003 0306 	and.w	r3, r3, #6
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	f063 030e 	orn	r3, r3, #14
 80048f4:	b2da      	uxtb	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	4907      	ldr	r1, [pc, #28]	; (8004920 <I2C_MasterRequestRead+0x198>)
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f000 f8fb 	bl	8004afe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e000      	b.n	8004914 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	00010008 	.word	0x00010008
 8004920:	00010002 	.word	0x00010002

08004924 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b088      	sub	sp, #32
 8004928:	af02      	add	r7, sp, #8
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	4608      	mov	r0, r1
 800492e:	4611      	mov	r1, r2
 8004930:	461a      	mov	r2, r3
 8004932:	4603      	mov	r3, r0
 8004934:	817b      	strh	r3, [r7, #10]
 8004936:	460b      	mov	r3, r1
 8004938:	813b      	strh	r3, [r7, #8]
 800493a:	4613      	mov	r3, r2
 800493c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800494c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	6a3b      	ldr	r3, [r7, #32]
 8004954:	2200      	movs	r2, #0
 8004956:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 f878 	bl	8004a50 <I2C_WaitOnFlagUntilTimeout>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00d      	beq.n	8004982 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004974:	d103      	bne.n	800497e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800497c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e05f      	b.n	8004a42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004982:	897b      	ldrh	r3, [r7, #10]
 8004984:	b2db      	uxtb	r3, r3
 8004986:	461a      	mov	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004990:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	6a3a      	ldr	r2, [r7, #32]
 8004996:	492d      	ldr	r1, [pc, #180]	; (8004a4c <I2C_RequestMemoryWrite+0x128>)
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 f8b0 	bl	8004afe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d001      	beq.n	80049a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e04c      	b.n	8004a42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049a8:	2300      	movs	r3, #0
 80049aa:	617b      	str	r3, [r7, #20]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	617b      	str	r3, [r7, #20]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	617b      	str	r3, [r7, #20]
 80049bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c0:	6a39      	ldr	r1, [r7, #32]
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 f91a 	bl	8004bfc <I2C_WaitOnTXEFlagUntilTimeout>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00d      	beq.n	80049ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	2b04      	cmp	r3, #4
 80049d4:	d107      	bne.n	80049e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e02b      	b.n	8004a42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049ea:	88fb      	ldrh	r3, [r7, #6]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d105      	bne.n	80049fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049f0:	893b      	ldrh	r3, [r7, #8]
 80049f2:	b2da      	uxtb	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	611a      	str	r2, [r3, #16]
 80049fa:	e021      	b.n	8004a40 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80049fc:	893b      	ldrh	r3, [r7, #8]
 80049fe:	0a1b      	lsrs	r3, r3, #8
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	b2da      	uxtb	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a0c:	6a39      	ldr	r1, [r7, #32]
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f000 f8f4 	bl	8004bfc <I2C_WaitOnTXEFlagUntilTimeout>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00d      	beq.n	8004a36 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	2b04      	cmp	r3, #4
 8004a20:	d107      	bne.n	8004a32 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e005      	b.n	8004a42 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a36:	893b      	ldrh	r3, [r7, #8]
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3718      	adds	r7, #24
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	00010002 	.word	0x00010002

08004a50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	603b      	str	r3, [r7, #0]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a60:	e025      	b.n	8004aae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a68:	d021      	beq.n	8004aae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a6a:	f7fe fcb9 	bl	80033e0 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d302      	bcc.n	8004a80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d116      	bne.n	8004aae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2220      	movs	r2, #32
 8004a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	f043 0220 	orr.w	r2, r3, #32
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e023      	b.n	8004af6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	0c1b      	lsrs	r3, r3, #16
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d10d      	bne.n	8004ad4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	43da      	mvns	r2, r3
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	bf0c      	ite	eq
 8004aca:	2301      	moveq	r3, #1
 8004acc:	2300      	movne	r3, #0
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	e00c      	b.n	8004aee <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	43da      	mvns	r2, r3
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	4013      	ands	r3, r2
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	bf0c      	ite	eq
 8004ae6:	2301      	moveq	r3, #1
 8004ae8:	2300      	movne	r3, #0
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	461a      	mov	r2, r3
 8004aee:	79fb      	ldrb	r3, [r7, #7]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d0b6      	beq.n	8004a62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b084      	sub	sp, #16
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	60f8      	str	r0, [r7, #12]
 8004b06:	60b9      	str	r1, [r7, #8]
 8004b08:	607a      	str	r2, [r7, #4]
 8004b0a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b0c:	e051      	b.n	8004bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b1c:	d123      	bne.n	8004b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b2c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b36:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2220      	movs	r2, #32
 8004b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	f043 0204 	orr.w	r2, r3, #4
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e046      	b.n	8004bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b6c:	d021      	beq.n	8004bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b6e:	f7fe fc37 	bl	80033e0 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d302      	bcc.n	8004b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d116      	bne.n	8004bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	f043 0220 	orr.w	r2, r3, #32
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e020      	b.n	8004bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	0c1b      	lsrs	r3, r3, #16
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d10c      	bne.n	8004bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	43da      	mvns	r2, r3
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	bf14      	ite	ne
 8004bce:	2301      	movne	r3, #1
 8004bd0:	2300      	moveq	r3, #0
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	e00b      	b.n	8004bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	43da      	mvns	r2, r3
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	4013      	ands	r3, r2
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	bf14      	ite	ne
 8004be8:	2301      	movne	r3, #1
 8004bea:	2300      	moveq	r3, #0
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d18d      	bne.n	8004b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c08:	e02d      	b.n	8004c66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f000 f8ce 	bl	8004dac <I2C_IsAcknowledgeFailed>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e02d      	b.n	8004c76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c20:	d021      	beq.n	8004c66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c22:	f7fe fbdd 	bl	80033e0 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d302      	bcc.n	8004c38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d116      	bne.n	8004c66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2220      	movs	r2, #32
 8004c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	f043 0220 	orr.w	r2, r3, #32
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e007      	b.n	8004c76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c70:	2b80      	cmp	r3, #128	; 0x80
 8004c72:	d1ca      	bne.n	8004c0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b084      	sub	sp, #16
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	60f8      	str	r0, [r7, #12]
 8004c86:	60b9      	str	r1, [r7, #8]
 8004c88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c8a:	e02d      	b.n	8004ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 f88d 	bl	8004dac <I2C_IsAcknowledgeFailed>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e02d      	b.n	8004cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ca2:	d021      	beq.n	8004ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ca4:	f7fe fb9c 	bl	80033e0 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d302      	bcc.n	8004cba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d116      	bne.n	8004ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd4:	f043 0220 	orr.w	r2, r3, #32
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e007      	b.n	8004cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	f003 0304 	and.w	r3, r3, #4
 8004cf2:	2b04      	cmp	r3, #4
 8004cf4:	d1ca      	bne.n	8004c8c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d0c:	e042      	b.n	8004d94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	f003 0310 	and.w	r3, r3, #16
 8004d18:	2b10      	cmp	r3, #16
 8004d1a:	d119      	bne.n	8004d50 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f06f 0210 	mvn.w	r2, #16
 8004d24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e029      	b.n	8004da4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d50:	f7fe fb46 	bl	80033e0 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d302      	bcc.n	8004d66 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d116      	bne.n	8004d94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d80:	f043 0220 	orr.w	r2, r3, #32
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e007      	b.n	8004da4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9e:	2b40      	cmp	r3, #64	; 0x40
 8004da0:	d1b5      	bne.n	8004d0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dc2:	d11b      	bne.n	8004dfc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004dcc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de8:	f043 0204 	orr.w	r2, r3, #4
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e000      	b.n	8004dfe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
 8004e12:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b20      	cmp	r3, #32
 8004e1e:	d129      	bne.n	8004e74 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2224      	movs	r2, #36	; 0x24
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f022 0201 	bic.w	r2, r2, #1
 8004e36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 0210 	bic.w	r2, r2, #16
 8004e46:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f042 0201 	orr.w	r2, r2, #1
 8004e66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e70:	2300      	movs	r3, #0
 8004e72:	e000      	b.n	8004e76 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004e74:	2302      	movs	r3, #2
  }
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b085      	sub	sp, #20
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
 8004e8a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2b20      	cmp	r3, #32
 8004e9a:	d12a      	bne.n	8004ef2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2224      	movs	r2, #36	; 0x24
 8004ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f022 0201 	bic.w	r2, r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eba:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004ebc:	89fb      	ldrh	r3, [r7, #14]
 8004ebe:	f023 030f 	bic.w	r3, r3, #15
 8004ec2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	89fb      	ldrh	r3, [r7, #14]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	89fa      	ldrh	r2, [r7, #14]
 8004ed4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f042 0201 	orr.w	r2, r2, #1
 8004ee4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	e000      	b.n	8004ef4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004ef2:	2302      	movs	r3, #2
  }
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3714      	adds	r7, #20
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e267      	b.n	80053e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d075      	beq.n	800500a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f1e:	4b88      	ldr	r3, [pc, #544]	; (8005140 <HAL_RCC_OscConfig+0x240>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f003 030c 	and.w	r3, r3, #12
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d00c      	beq.n	8004f44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f2a:	4b85      	ldr	r3, [pc, #532]	; (8005140 <HAL_RCC_OscConfig+0x240>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f32:	2b08      	cmp	r3, #8
 8004f34:	d112      	bne.n	8004f5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f36:	4b82      	ldr	r3, [pc, #520]	; (8005140 <HAL_RCC_OscConfig+0x240>)
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f42:	d10b      	bne.n	8004f5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f44:	4b7e      	ldr	r3, [pc, #504]	; (8005140 <HAL_RCC_OscConfig+0x240>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d05b      	beq.n	8005008 <HAL_RCC_OscConfig+0x108>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d157      	bne.n	8005008 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e242      	b.n	80053e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f64:	d106      	bne.n	8004f74 <HAL_RCC_OscConfig+0x74>
 8004f66:	4b76      	ldr	r3, [pc, #472]	; (8005140 <HAL_RCC_OscConfig+0x240>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a75      	ldr	r2, [pc, #468]	; (8005140 <HAL_RCC_OscConfig+0x240>)
 8004f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f70:	6013      	str	r3, [r2, #0]
 8004f72:	e01d      	b.n	8004fb0 <HAL_RCC_OscConfig+0xb0>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f7c:	d10c      	bne.n	8004f98 <HAL_RCC_OscConfig+0x98>
 8004f7e:	4b70      	ldr	r3, [pc, #448]	; (8005140 <HAL_RCC_OscConfig+0x240>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a6f      	ldr	r2, [pc, #444]	; (8005140 <HAL_RCC_OscConfig+0x240>)
 8004f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f88:	6013      	str	r3, [r2, #0]
 8004f8a:	4b6d      	ldr	r3, [pc, #436]	; (8005140 <HAL_RCC_OscConfig+0x240>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a6c      	ldr	r2, [pc, #432]	; (8005140 <HAL_RCC_OscConfig+0x240>)
 8004f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f94:	6013      	str	r3, [r2, #0]
 8004f96:	e00b      	b.n	8004fb0 <HAL_RCC_OscConfig+0xb0>
 8004f98:	4b69      	ldr	r3, [pc, #420]	; (8005140 <HAL_RCC_OscConfig+0x240>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a68      	ldr	r2, [pc, #416]	; (8005140 <HAL_RCC_OscConfig+0x240>)
 8004f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fa2:	6013      	str	r3, [r2, #0]
 8004fa4:	4b66      	ldr	r3, [pc, #408]	; (8005140 <HAL_RCC_OscConfig+0x240>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a65      	ldr	r2, [pc, #404]	; (8005140 <HAL_RCC_OscConfig+0x240>)
 8004faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d013      	beq.n	8004fe0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fb8:	f7fe fa12 	bl	80033e0 <HAL_GetTick>
 8004fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fbe:	e008      	b.n	8004fd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fc0:	f7fe fa0e 	bl	80033e0 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	2b64      	cmp	r3, #100	; 0x64
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e207      	b.n	80053e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fd2:	4b5b      	ldr	r3, [pc, #364]	; (8005140 <HAL_RCC_OscConfig+0x240>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d0f0      	beq.n	8004fc0 <HAL_RCC_OscConfig+0xc0>
 8004fde:	e014      	b.n	800500a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe0:	f7fe f9fe 	bl	80033e0 <HAL_GetTick>
 8004fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fe8:	f7fe f9fa 	bl	80033e0 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b64      	cmp	r3, #100	; 0x64
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e1f3      	b.n	80053e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ffa:	4b51      	ldr	r3, [pc, #324]	; (8005140 <HAL_RCC_OscConfig+0x240>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1f0      	bne.n	8004fe8 <HAL_RCC_OscConfig+0xe8>
 8005006:	e000      	b.n	800500a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d063      	beq.n	80050de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005016:	4b4a      	ldr	r3, [pc, #296]	; (8005140 <HAL_RCC_OscConfig+0x240>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f003 030c 	and.w	r3, r3, #12
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00b      	beq.n	800503a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005022:	4b47      	ldr	r3, [pc, #284]	; (8005140 <HAL_RCC_OscConfig+0x240>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800502a:	2b08      	cmp	r3, #8
 800502c:	d11c      	bne.n	8005068 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800502e:	4b44      	ldr	r3, [pc, #272]	; (8005140 <HAL_RCC_OscConfig+0x240>)
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d116      	bne.n	8005068 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800503a:	4b41      	ldr	r3, [pc, #260]	; (8005140 <HAL_RCC_OscConfig+0x240>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d005      	beq.n	8005052 <HAL_RCC_OscConfig+0x152>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d001      	beq.n	8005052 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e1c7      	b.n	80053e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005052:	4b3b      	ldr	r3, [pc, #236]	; (8005140 <HAL_RCC_OscConfig+0x240>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	00db      	lsls	r3, r3, #3
 8005060:	4937      	ldr	r1, [pc, #220]	; (8005140 <HAL_RCC_OscConfig+0x240>)
 8005062:	4313      	orrs	r3, r2
 8005064:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005066:	e03a      	b.n	80050de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d020      	beq.n	80050b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005070:	4b34      	ldr	r3, [pc, #208]	; (8005144 <HAL_RCC_OscConfig+0x244>)
 8005072:	2201      	movs	r2, #1
 8005074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005076:	f7fe f9b3 	bl	80033e0 <HAL_GetTick>
 800507a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800507c:	e008      	b.n	8005090 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800507e:	f7fe f9af 	bl	80033e0 <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	2b02      	cmp	r3, #2
 800508a:	d901      	bls.n	8005090 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e1a8      	b.n	80053e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005090:	4b2b      	ldr	r3, [pc, #172]	; (8005140 <HAL_RCC_OscConfig+0x240>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b00      	cmp	r3, #0
 800509a:	d0f0      	beq.n	800507e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800509c:	4b28      	ldr	r3, [pc, #160]	; (8005140 <HAL_RCC_OscConfig+0x240>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	00db      	lsls	r3, r3, #3
 80050aa:	4925      	ldr	r1, [pc, #148]	; (8005140 <HAL_RCC_OscConfig+0x240>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	600b      	str	r3, [r1, #0]
 80050b0:	e015      	b.n	80050de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050b2:	4b24      	ldr	r3, [pc, #144]	; (8005144 <HAL_RCC_OscConfig+0x244>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b8:	f7fe f992 	bl	80033e0 <HAL_GetTick>
 80050bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050be:	e008      	b.n	80050d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050c0:	f7fe f98e 	bl	80033e0 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e187      	b.n	80053e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050d2:	4b1b      	ldr	r3, [pc, #108]	; (8005140 <HAL_RCC_OscConfig+0x240>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1f0      	bne.n	80050c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0308 	and.w	r3, r3, #8
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d036      	beq.n	8005158 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d016      	beq.n	8005120 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050f2:	4b15      	ldr	r3, [pc, #84]	; (8005148 <HAL_RCC_OscConfig+0x248>)
 80050f4:	2201      	movs	r2, #1
 80050f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050f8:	f7fe f972 	bl	80033e0 <HAL_GetTick>
 80050fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050fe:	e008      	b.n	8005112 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005100:	f7fe f96e 	bl	80033e0 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	2b02      	cmp	r3, #2
 800510c:	d901      	bls.n	8005112 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e167      	b.n	80053e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005112:	4b0b      	ldr	r3, [pc, #44]	; (8005140 <HAL_RCC_OscConfig+0x240>)
 8005114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d0f0      	beq.n	8005100 <HAL_RCC_OscConfig+0x200>
 800511e:	e01b      	b.n	8005158 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005120:	4b09      	ldr	r3, [pc, #36]	; (8005148 <HAL_RCC_OscConfig+0x248>)
 8005122:	2200      	movs	r2, #0
 8005124:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005126:	f7fe f95b 	bl	80033e0 <HAL_GetTick>
 800512a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800512c:	e00e      	b.n	800514c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800512e:	f7fe f957 	bl	80033e0 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	2b02      	cmp	r3, #2
 800513a:	d907      	bls.n	800514c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e150      	b.n	80053e2 <HAL_RCC_OscConfig+0x4e2>
 8005140:	40023800 	.word	0x40023800
 8005144:	42470000 	.word	0x42470000
 8005148:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800514c:	4b88      	ldr	r3, [pc, #544]	; (8005370 <HAL_RCC_OscConfig+0x470>)
 800514e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1ea      	bne.n	800512e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0304 	and.w	r3, r3, #4
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 8097 	beq.w	8005294 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005166:	2300      	movs	r3, #0
 8005168:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800516a:	4b81      	ldr	r3, [pc, #516]	; (8005370 <HAL_RCC_OscConfig+0x470>)
 800516c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10f      	bne.n	8005196 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005176:	2300      	movs	r3, #0
 8005178:	60bb      	str	r3, [r7, #8]
 800517a:	4b7d      	ldr	r3, [pc, #500]	; (8005370 <HAL_RCC_OscConfig+0x470>)
 800517c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517e:	4a7c      	ldr	r2, [pc, #496]	; (8005370 <HAL_RCC_OscConfig+0x470>)
 8005180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005184:	6413      	str	r3, [r2, #64]	; 0x40
 8005186:	4b7a      	ldr	r3, [pc, #488]	; (8005370 <HAL_RCC_OscConfig+0x470>)
 8005188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800518e:	60bb      	str	r3, [r7, #8]
 8005190:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005192:	2301      	movs	r3, #1
 8005194:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005196:	4b77      	ldr	r3, [pc, #476]	; (8005374 <HAL_RCC_OscConfig+0x474>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d118      	bne.n	80051d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051a2:	4b74      	ldr	r3, [pc, #464]	; (8005374 <HAL_RCC_OscConfig+0x474>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a73      	ldr	r2, [pc, #460]	; (8005374 <HAL_RCC_OscConfig+0x474>)
 80051a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051ae:	f7fe f917 	bl	80033e0 <HAL_GetTick>
 80051b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051b4:	e008      	b.n	80051c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051b6:	f7fe f913 	bl	80033e0 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d901      	bls.n	80051c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e10c      	b.n	80053e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051c8:	4b6a      	ldr	r3, [pc, #424]	; (8005374 <HAL_RCC_OscConfig+0x474>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d0f0      	beq.n	80051b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d106      	bne.n	80051ea <HAL_RCC_OscConfig+0x2ea>
 80051dc:	4b64      	ldr	r3, [pc, #400]	; (8005370 <HAL_RCC_OscConfig+0x470>)
 80051de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e0:	4a63      	ldr	r2, [pc, #396]	; (8005370 <HAL_RCC_OscConfig+0x470>)
 80051e2:	f043 0301 	orr.w	r3, r3, #1
 80051e6:	6713      	str	r3, [r2, #112]	; 0x70
 80051e8:	e01c      	b.n	8005224 <HAL_RCC_OscConfig+0x324>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	2b05      	cmp	r3, #5
 80051f0:	d10c      	bne.n	800520c <HAL_RCC_OscConfig+0x30c>
 80051f2:	4b5f      	ldr	r3, [pc, #380]	; (8005370 <HAL_RCC_OscConfig+0x470>)
 80051f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f6:	4a5e      	ldr	r2, [pc, #376]	; (8005370 <HAL_RCC_OscConfig+0x470>)
 80051f8:	f043 0304 	orr.w	r3, r3, #4
 80051fc:	6713      	str	r3, [r2, #112]	; 0x70
 80051fe:	4b5c      	ldr	r3, [pc, #368]	; (8005370 <HAL_RCC_OscConfig+0x470>)
 8005200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005202:	4a5b      	ldr	r2, [pc, #364]	; (8005370 <HAL_RCC_OscConfig+0x470>)
 8005204:	f043 0301 	orr.w	r3, r3, #1
 8005208:	6713      	str	r3, [r2, #112]	; 0x70
 800520a:	e00b      	b.n	8005224 <HAL_RCC_OscConfig+0x324>
 800520c:	4b58      	ldr	r3, [pc, #352]	; (8005370 <HAL_RCC_OscConfig+0x470>)
 800520e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005210:	4a57      	ldr	r2, [pc, #348]	; (8005370 <HAL_RCC_OscConfig+0x470>)
 8005212:	f023 0301 	bic.w	r3, r3, #1
 8005216:	6713      	str	r3, [r2, #112]	; 0x70
 8005218:	4b55      	ldr	r3, [pc, #340]	; (8005370 <HAL_RCC_OscConfig+0x470>)
 800521a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521c:	4a54      	ldr	r2, [pc, #336]	; (8005370 <HAL_RCC_OscConfig+0x470>)
 800521e:	f023 0304 	bic.w	r3, r3, #4
 8005222:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d015      	beq.n	8005258 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800522c:	f7fe f8d8 	bl	80033e0 <HAL_GetTick>
 8005230:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005232:	e00a      	b.n	800524a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005234:	f7fe f8d4 	bl	80033e0 <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005242:	4293      	cmp	r3, r2
 8005244:	d901      	bls.n	800524a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e0cb      	b.n	80053e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800524a:	4b49      	ldr	r3, [pc, #292]	; (8005370 <HAL_RCC_OscConfig+0x470>)
 800524c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d0ee      	beq.n	8005234 <HAL_RCC_OscConfig+0x334>
 8005256:	e014      	b.n	8005282 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005258:	f7fe f8c2 	bl	80033e0 <HAL_GetTick>
 800525c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800525e:	e00a      	b.n	8005276 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005260:	f7fe f8be 	bl	80033e0 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	f241 3288 	movw	r2, #5000	; 0x1388
 800526e:	4293      	cmp	r3, r2
 8005270:	d901      	bls.n	8005276 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e0b5      	b.n	80053e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005276:	4b3e      	ldr	r3, [pc, #248]	; (8005370 <HAL_RCC_OscConfig+0x470>)
 8005278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1ee      	bne.n	8005260 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005282:	7dfb      	ldrb	r3, [r7, #23]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d105      	bne.n	8005294 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005288:	4b39      	ldr	r3, [pc, #228]	; (8005370 <HAL_RCC_OscConfig+0x470>)
 800528a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528c:	4a38      	ldr	r2, [pc, #224]	; (8005370 <HAL_RCC_OscConfig+0x470>)
 800528e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005292:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	2b00      	cmp	r3, #0
 800529a:	f000 80a1 	beq.w	80053e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800529e:	4b34      	ldr	r3, [pc, #208]	; (8005370 <HAL_RCC_OscConfig+0x470>)
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f003 030c 	and.w	r3, r3, #12
 80052a6:	2b08      	cmp	r3, #8
 80052a8:	d05c      	beq.n	8005364 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d141      	bne.n	8005336 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052b2:	4b31      	ldr	r3, [pc, #196]	; (8005378 <HAL_RCC_OscConfig+0x478>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b8:	f7fe f892 	bl	80033e0 <HAL_GetTick>
 80052bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052be:	e008      	b.n	80052d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052c0:	f7fe f88e 	bl	80033e0 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e087      	b.n	80053e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052d2:	4b27      	ldr	r3, [pc, #156]	; (8005370 <HAL_RCC_OscConfig+0x470>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1f0      	bne.n	80052c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	69da      	ldr	r2, [r3, #28]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	431a      	orrs	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ec:	019b      	lsls	r3, r3, #6
 80052ee:	431a      	orrs	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f4:	085b      	lsrs	r3, r3, #1
 80052f6:	3b01      	subs	r3, #1
 80052f8:	041b      	lsls	r3, r3, #16
 80052fa:	431a      	orrs	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005300:	061b      	lsls	r3, r3, #24
 8005302:	491b      	ldr	r1, [pc, #108]	; (8005370 <HAL_RCC_OscConfig+0x470>)
 8005304:	4313      	orrs	r3, r2
 8005306:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005308:	4b1b      	ldr	r3, [pc, #108]	; (8005378 <HAL_RCC_OscConfig+0x478>)
 800530a:	2201      	movs	r2, #1
 800530c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800530e:	f7fe f867 	bl	80033e0 <HAL_GetTick>
 8005312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005314:	e008      	b.n	8005328 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005316:	f7fe f863 	bl	80033e0 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	2b02      	cmp	r3, #2
 8005322:	d901      	bls.n	8005328 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e05c      	b.n	80053e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005328:	4b11      	ldr	r3, [pc, #68]	; (8005370 <HAL_RCC_OscConfig+0x470>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d0f0      	beq.n	8005316 <HAL_RCC_OscConfig+0x416>
 8005334:	e054      	b.n	80053e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005336:	4b10      	ldr	r3, [pc, #64]	; (8005378 <HAL_RCC_OscConfig+0x478>)
 8005338:	2200      	movs	r2, #0
 800533a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800533c:	f7fe f850 	bl	80033e0 <HAL_GetTick>
 8005340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005342:	e008      	b.n	8005356 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005344:	f7fe f84c 	bl	80033e0 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b02      	cmp	r3, #2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e045      	b.n	80053e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005356:	4b06      	ldr	r3, [pc, #24]	; (8005370 <HAL_RCC_OscConfig+0x470>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1f0      	bne.n	8005344 <HAL_RCC_OscConfig+0x444>
 8005362:	e03d      	b.n	80053e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	2b01      	cmp	r3, #1
 800536a:	d107      	bne.n	800537c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e038      	b.n	80053e2 <HAL_RCC_OscConfig+0x4e2>
 8005370:	40023800 	.word	0x40023800
 8005374:	40007000 	.word	0x40007000
 8005378:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800537c:	4b1b      	ldr	r3, [pc, #108]	; (80053ec <HAL_RCC_OscConfig+0x4ec>)
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d028      	beq.n	80053dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005394:	429a      	cmp	r2, r3
 8005396:	d121      	bne.n	80053dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d11a      	bne.n	80053dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053ac:	4013      	ands	r3, r2
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d111      	bne.n	80053dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c2:	085b      	lsrs	r3, r3, #1
 80053c4:	3b01      	subs	r3, #1
 80053c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d107      	bne.n	80053dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053d8:	429a      	cmp	r2, r3
 80053da:	d001      	beq.n	80053e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e000      	b.n	80053e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3718      	adds	r7, #24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	40023800 	.word	0x40023800

080053f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d101      	bne.n	8005404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e0cc      	b.n	800559e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005404:	4b68      	ldr	r3, [pc, #416]	; (80055a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 030f 	and.w	r3, r3, #15
 800540c:	683a      	ldr	r2, [r7, #0]
 800540e:	429a      	cmp	r2, r3
 8005410:	d90c      	bls.n	800542c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005412:	4b65      	ldr	r3, [pc, #404]	; (80055a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005414:	683a      	ldr	r2, [r7, #0]
 8005416:	b2d2      	uxtb	r2, r2
 8005418:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800541a:	4b63      	ldr	r3, [pc, #396]	; (80055a8 <HAL_RCC_ClockConfig+0x1b8>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 030f 	and.w	r3, r3, #15
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	429a      	cmp	r2, r3
 8005426:	d001      	beq.n	800542c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e0b8      	b.n	800559e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0302 	and.w	r3, r3, #2
 8005434:	2b00      	cmp	r3, #0
 8005436:	d020      	beq.n	800547a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0304 	and.w	r3, r3, #4
 8005440:	2b00      	cmp	r3, #0
 8005442:	d005      	beq.n	8005450 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005444:	4b59      	ldr	r3, [pc, #356]	; (80055ac <HAL_RCC_ClockConfig+0x1bc>)
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	4a58      	ldr	r2, [pc, #352]	; (80055ac <HAL_RCC_ClockConfig+0x1bc>)
 800544a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800544e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0308 	and.w	r3, r3, #8
 8005458:	2b00      	cmp	r3, #0
 800545a:	d005      	beq.n	8005468 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800545c:	4b53      	ldr	r3, [pc, #332]	; (80055ac <HAL_RCC_ClockConfig+0x1bc>)
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	4a52      	ldr	r2, [pc, #328]	; (80055ac <HAL_RCC_ClockConfig+0x1bc>)
 8005462:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005466:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005468:	4b50      	ldr	r3, [pc, #320]	; (80055ac <HAL_RCC_ClockConfig+0x1bc>)
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	494d      	ldr	r1, [pc, #308]	; (80055ac <HAL_RCC_ClockConfig+0x1bc>)
 8005476:	4313      	orrs	r3, r2
 8005478:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	2b00      	cmp	r3, #0
 8005484:	d044      	beq.n	8005510 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d107      	bne.n	800549e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800548e:	4b47      	ldr	r3, [pc, #284]	; (80055ac <HAL_RCC_ClockConfig+0x1bc>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d119      	bne.n	80054ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e07f      	b.n	800559e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d003      	beq.n	80054ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054aa:	2b03      	cmp	r3, #3
 80054ac:	d107      	bne.n	80054be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054ae:	4b3f      	ldr	r3, [pc, #252]	; (80055ac <HAL_RCC_ClockConfig+0x1bc>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d109      	bne.n	80054ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e06f      	b.n	800559e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054be:	4b3b      	ldr	r3, [pc, #236]	; (80055ac <HAL_RCC_ClockConfig+0x1bc>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d101      	bne.n	80054ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e067      	b.n	800559e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054ce:	4b37      	ldr	r3, [pc, #220]	; (80055ac <HAL_RCC_ClockConfig+0x1bc>)
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f023 0203 	bic.w	r2, r3, #3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	4934      	ldr	r1, [pc, #208]	; (80055ac <HAL_RCC_ClockConfig+0x1bc>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054e0:	f7fd ff7e 	bl	80033e0 <HAL_GetTick>
 80054e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054e6:	e00a      	b.n	80054fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054e8:	f7fd ff7a 	bl	80033e0 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d901      	bls.n	80054fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e04f      	b.n	800559e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054fe:	4b2b      	ldr	r3, [pc, #172]	; (80055ac <HAL_RCC_ClockConfig+0x1bc>)
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f003 020c 	and.w	r2, r3, #12
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	429a      	cmp	r2, r3
 800550e:	d1eb      	bne.n	80054e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005510:	4b25      	ldr	r3, [pc, #148]	; (80055a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 030f 	and.w	r3, r3, #15
 8005518:	683a      	ldr	r2, [r7, #0]
 800551a:	429a      	cmp	r2, r3
 800551c:	d20c      	bcs.n	8005538 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800551e:	4b22      	ldr	r3, [pc, #136]	; (80055a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005520:	683a      	ldr	r2, [r7, #0]
 8005522:	b2d2      	uxtb	r2, r2
 8005524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005526:	4b20      	ldr	r3, [pc, #128]	; (80055a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 030f 	and.w	r3, r3, #15
 800552e:	683a      	ldr	r2, [r7, #0]
 8005530:	429a      	cmp	r2, r3
 8005532:	d001      	beq.n	8005538 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e032      	b.n	800559e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0304 	and.w	r3, r3, #4
 8005540:	2b00      	cmp	r3, #0
 8005542:	d008      	beq.n	8005556 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005544:	4b19      	ldr	r3, [pc, #100]	; (80055ac <HAL_RCC_ClockConfig+0x1bc>)
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	4916      	ldr	r1, [pc, #88]	; (80055ac <HAL_RCC_ClockConfig+0x1bc>)
 8005552:	4313      	orrs	r3, r2
 8005554:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0308 	and.w	r3, r3, #8
 800555e:	2b00      	cmp	r3, #0
 8005560:	d009      	beq.n	8005576 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005562:	4b12      	ldr	r3, [pc, #72]	; (80055ac <HAL_RCC_ClockConfig+0x1bc>)
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	00db      	lsls	r3, r3, #3
 8005570:	490e      	ldr	r1, [pc, #56]	; (80055ac <HAL_RCC_ClockConfig+0x1bc>)
 8005572:	4313      	orrs	r3, r2
 8005574:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005576:	f000 f821 	bl	80055bc <HAL_RCC_GetSysClockFreq>
 800557a:	4602      	mov	r2, r0
 800557c:	4b0b      	ldr	r3, [pc, #44]	; (80055ac <HAL_RCC_ClockConfig+0x1bc>)
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	091b      	lsrs	r3, r3, #4
 8005582:	f003 030f 	and.w	r3, r3, #15
 8005586:	490a      	ldr	r1, [pc, #40]	; (80055b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005588:	5ccb      	ldrb	r3, [r1, r3]
 800558a:	fa22 f303 	lsr.w	r3, r2, r3
 800558e:	4a09      	ldr	r2, [pc, #36]	; (80055b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005592:	4b09      	ldr	r3, [pc, #36]	; (80055b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4618      	mov	r0, r3
 8005598:	f7fd fede 	bl	8003358 <HAL_InitTick>

  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	40023c00 	.word	0x40023c00
 80055ac:	40023800 	.word	0x40023800
 80055b0:	0800bb74 	.word	0x0800bb74
 80055b4:	20000030 	.word	0x20000030
 80055b8:	20000034 	.word	0x20000034

080055bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055c0:	b090      	sub	sp, #64	; 0x40
 80055c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	637b      	str	r3, [r7, #52]	; 0x34
 80055c8:	2300      	movs	r3, #0
 80055ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055cc:	2300      	movs	r3, #0
 80055ce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80055d0:	2300      	movs	r3, #0
 80055d2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055d4:	4b59      	ldr	r3, [pc, #356]	; (800573c <HAL_RCC_GetSysClockFreq+0x180>)
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f003 030c 	and.w	r3, r3, #12
 80055dc:	2b08      	cmp	r3, #8
 80055de:	d00d      	beq.n	80055fc <HAL_RCC_GetSysClockFreq+0x40>
 80055e0:	2b08      	cmp	r3, #8
 80055e2:	f200 80a1 	bhi.w	8005728 <HAL_RCC_GetSysClockFreq+0x16c>
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d002      	beq.n	80055f0 <HAL_RCC_GetSysClockFreq+0x34>
 80055ea:	2b04      	cmp	r3, #4
 80055ec:	d003      	beq.n	80055f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80055ee:	e09b      	b.n	8005728 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80055f0:	4b53      	ldr	r3, [pc, #332]	; (8005740 <HAL_RCC_GetSysClockFreq+0x184>)
 80055f2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80055f4:	e09b      	b.n	800572e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80055f6:	4b53      	ldr	r3, [pc, #332]	; (8005744 <HAL_RCC_GetSysClockFreq+0x188>)
 80055f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80055fa:	e098      	b.n	800572e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055fc:	4b4f      	ldr	r3, [pc, #316]	; (800573c <HAL_RCC_GetSysClockFreq+0x180>)
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005604:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005606:	4b4d      	ldr	r3, [pc, #308]	; (800573c <HAL_RCC_GetSysClockFreq+0x180>)
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d028      	beq.n	8005664 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005612:	4b4a      	ldr	r3, [pc, #296]	; (800573c <HAL_RCC_GetSysClockFreq+0x180>)
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	099b      	lsrs	r3, r3, #6
 8005618:	2200      	movs	r2, #0
 800561a:	623b      	str	r3, [r7, #32]
 800561c:	627a      	str	r2, [r7, #36]	; 0x24
 800561e:	6a3b      	ldr	r3, [r7, #32]
 8005620:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005624:	2100      	movs	r1, #0
 8005626:	4b47      	ldr	r3, [pc, #284]	; (8005744 <HAL_RCC_GetSysClockFreq+0x188>)
 8005628:	fb03 f201 	mul.w	r2, r3, r1
 800562c:	2300      	movs	r3, #0
 800562e:	fb00 f303 	mul.w	r3, r0, r3
 8005632:	4413      	add	r3, r2
 8005634:	4a43      	ldr	r2, [pc, #268]	; (8005744 <HAL_RCC_GetSysClockFreq+0x188>)
 8005636:	fba0 1202 	umull	r1, r2, r0, r2
 800563a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800563c:	460a      	mov	r2, r1
 800563e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005640:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005642:	4413      	add	r3, r2
 8005644:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005648:	2200      	movs	r2, #0
 800564a:	61bb      	str	r3, [r7, #24]
 800564c:	61fa      	str	r2, [r7, #28]
 800564e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005652:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005656:	f7fb fb27 	bl	8000ca8 <__aeabi_uldivmod>
 800565a:	4602      	mov	r2, r0
 800565c:	460b      	mov	r3, r1
 800565e:	4613      	mov	r3, r2
 8005660:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005662:	e053      	b.n	800570c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005664:	4b35      	ldr	r3, [pc, #212]	; (800573c <HAL_RCC_GetSysClockFreq+0x180>)
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	099b      	lsrs	r3, r3, #6
 800566a:	2200      	movs	r2, #0
 800566c:	613b      	str	r3, [r7, #16]
 800566e:	617a      	str	r2, [r7, #20]
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005676:	f04f 0b00 	mov.w	fp, #0
 800567a:	4652      	mov	r2, sl
 800567c:	465b      	mov	r3, fp
 800567e:	f04f 0000 	mov.w	r0, #0
 8005682:	f04f 0100 	mov.w	r1, #0
 8005686:	0159      	lsls	r1, r3, #5
 8005688:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800568c:	0150      	lsls	r0, r2, #5
 800568e:	4602      	mov	r2, r0
 8005690:	460b      	mov	r3, r1
 8005692:	ebb2 080a 	subs.w	r8, r2, sl
 8005696:	eb63 090b 	sbc.w	r9, r3, fp
 800569a:	f04f 0200 	mov.w	r2, #0
 800569e:	f04f 0300 	mov.w	r3, #0
 80056a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80056a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80056aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80056ae:	ebb2 0408 	subs.w	r4, r2, r8
 80056b2:	eb63 0509 	sbc.w	r5, r3, r9
 80056b6:	f04f 0200 	mov.w	r2, #0
 80056ba:	f04f 0300 	mov.w	r3, #0
 80056be:	00eb      	lsls	r3, r5, #3
 80056c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056c4:	00e2      	lsls	r2, r4, #3
 80056c6:	4614      	mov	r4, r2
 80056c8:	461d      	mov	r5, r3
 80056ca:	eb14 030a 	adds.w	r3, r4, sl
 80056ce:	603b      	str	r3, [r7, #0]
 80056d0:	eb45 030b 	adc.w	r3, r5, fp
 80056d4:	607b      	str	r3, [r7, #4]
 80056d6:	f04f 0200 	mov.w	r2, #0
 80056da:	f04f 0300 	mov.w	r3, #0
 80056de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056e2:	4629      	mov	r1, r5
 80056e4:	028b      	lsls	r3, r1, #10
 80056e6:	4621      	mov	r1, r4
 80056e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056ec:	4621      	mov	r1, r4
 80056ee:	028a      	lsls	r2, r1, #10
 80056f0:	4610      	mov	r0, r2
 80056f2:	4619      	mov	r1, r3
 80056f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f6:	2200      	movs	r2, #0
 80056f8:	60bb      	str	r3, [r7, #8]
 80056fa:	60fa      	str	r2, [r7, #12]
 80056fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005700:	f7fb fad2 	bl	8000ca8 <__aeabi_uldivmod>
 8005704:	4602      	mov	r2, r0
 8005706:	460b      	mov	r3, r1
 8005708:	4613      	mov	r3, r2
 800570a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800570c:	4b0b      	ldr	r3, [pc, #44]	; (800573c <HAL_RCC_GetSysClockFreq+0x180>)
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	0c1b      	lsrs	r3, r3, #16
 8005712:	f003 0303 	and.w	r3, r3, #3
 8005716:	3301      	adds	r3, #1
 8005718:	005b      	lsls	r3, r3, #1
 800571a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800571c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800571e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005720:	fbb2 f3f3 	udiv	r3, r2, r3
 8005724:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005726:	e002      	b.n	800572e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005728:	4b05      	ldr	r3, [pc, #20]	; (8005740 <HAL_RCC_GetSysClockFreq+0x184>)
 800572a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800572c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800572e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005730:	4618      	mov	r0, r3
 8005732:	3740      	adds	r7, #64	; 0x40
 8005734:	46bd      	mov	sp, r7
 8005736:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800573a:	bf00      	nop
 800573c:	40023800 	.word	0x40023800
 8005740:	00f42400 	.word	0x00f42400
 8005744:	017d7840 	.word	0x017d7840

08005748 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005748:	b480      	push	{r7}
 800574a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800574c:	4b03      	ldr	r3, [pc, #12]	; (800575c <HAL_RCC_GetHCLKFreq+0x14>)
 800574e:	681b      	ldr	r3, [r3, #0]
}
 8005750:	4618      	mov	r0, r3
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	20000030 	.word	0x20000030

08005760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005764:	f7ff fff0 	bl	8005748 <HAL_RCC_GetHCLKFreq>
 8005768:	4602      	mov	r2, r0
 800576a:	4b05      	ldr	r3, [pc, #20]	; (8005780 <HAL_RCC_GetPCLK1Freq+0x20>)
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	0a9b      	lsrs	r3, r3, #10
 8005770:	f003 0307 	and.w	r3, r3, #7
 8005774:	4903      	ldr	r1, [pc, #12]	; (8005784 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005776:	5ccb      	ldrb	r3, [r1, r3]
 8005778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800577c:	4618      	mov	r0, r3
 800577e:	bd80      	pop	{r7, pc}
 8005780:	40023800 	.word	0x40023800
 8005784:	0800bb84 	.word	0x0800bb84

08005788 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800578c:	f7ff ffdc 	bl	8005748 <HAL_RCC_GetHCLKFreq>
 8005790:	4602      	mov	r2, r0
 8005792:	4b05      	ldr	r3, [pc, #20]	; (80057a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	0b5b      	lsrs	r3, r3, #13
 8005798:	f003 0307 	and.w	r3, r3, #7
 800579c:	4903      	ldr	r1, [pc, #12]	; (80057ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800579e:	5ccb      	ldrb	r3, [r1, r3]
 80057a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	40023800 	.word	0x40023800
 80057ac:	0800bb84 	.word	0x0800bb84

080057b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057b8:	2300      	movs	r3, #0
 80057ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80057bc:	2300      	movs	r3, #0
 80057be:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10b      	bne.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d105      	bne.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d075      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80057e4:	4b91      	ldr	r3, [pc, #580]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80057ea:	f7fd fdf9 	bl	80033e0 <HAL_GetTick>
 80057ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057f0:	e008      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80057f2:	f7fd fdf5 	bl	80033e0 <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d901      	bls.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e189      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005804:	4b8a      	ldr	r3, [pc, #552]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1f0      	bne.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b00      	cmp	r3, #0
 800581a:	d009      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	019a      	lsls	r2, r3, #6
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	071b      	lsls	r3, r3, #28
 8005828:	4981      	ldr	r1, [pc, #516]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800582a:	4313      	orrs	r3, r2
 800582c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0302 	and.w	r3, r3, #2
 8005838:	2b00      	cmp	r3, #0
 800583a:	d01f      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800583c:	4b7c      	ldr	r3, [pc, #496]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800583e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005842:	0f1b      	lsrs	r3, r3, #28
 8005844:	f003 0307 	and.w	r3, r3, #7
 8005848:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	019a      	lsls	r2, r3, #6
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	061b      	lsls	r3, r3, #24
 8005856:	431a      	orrs	r2, r3
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	071b      	lsls	r3, r3, #28
 800585c:	4974      	ldr	r1, [pc, #464]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800585e:	4313      	orrs	r3, r2
 8005860:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005864:	4b72      	ldr	r3, [pc, #456]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005866:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800586a:	f023 021f 	bic.w	r2, r3, #31
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	69db      	ldr	r3, [r3, #28]
 8005872:	3b01      	subs	r3, #1
 8005874:	496e      	ldr	r1, [pc, #440]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005876:	4313      	orrs	r3, r2
 8005878:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00d      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	019a      	lsls	r2, r3, #6
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	061b      	lsls	r3, r3, #24
 8005894:	431a      	orrs	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	071b      	lsls	r3, r3, #28
 800589c:	4964      	ldr	r1, [pc, #400]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80058a4:	4b61      	ldr	r3, [pc, #388]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80058a6:	2201      	movs	r2, #1
 80058a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058aa:	f7fd fd99 	bl	80033e0 <HAL_GetTick>
 80058ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80058b0:	e008      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80058b2:	f7fd fd95 	bl	80033e0 <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d901      	bls.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e129      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80058c4:	4b5a      	ldr	r3, [pc, #360]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d0f0      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0304 	and.w	r3, r3, #4
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d105      	bne.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d079      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80058e8:	4b52      	ldr	r3, [pc, #328]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058ee:	f7fd fd77 	bl	80033e0 <HAL_GetTick>
 80058f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80058f4:	e008      	b.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80058f6:	f7fd fd73 	bl	80033e0 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b02      	cmp	r3, #2
 8005902:	d901      	bls.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e107      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005908:	4b49      	ldr	r3, [pc, #292]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005910:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005914:	d0ef      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0304 	and.w	r3, r3, #4
 800591e:	2b00      	cmp	r3, #0
 8005920:	d020      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005922:	4b43      	ldr	r3, [pc, #268]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005928:	0f1b      	lsrs	r3, r3, #28
 800592a:	f003 0307 	and.w	r3, r3, #7
 800592e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	019a      	lsls	r2, r3, #6
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	061b      	lsls	r3, r3, #24
 800593c:	431a      	orrs	r2, r3
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	071b      	lsls	r3, r3, #28
 8005942:	493b      	ldr	r1, [pc, #236]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005944:	4313      	orrs	r3, r2
 8005946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800594a:	4b39      	ldr	r3, [pc, #228]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800594c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005950:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a1b      	ldr	r3, [r3, #32]
 8005958:	3b01      	subs	r3, #1
 800595a:	021b      	lsls	r3, r3, #8
 800595c:	4934      	ldr	r1, [pc, #208]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800595e:	4313      	orrs	r3, r2
 8005960:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0308 	and.w	r3, r3, #8
 800596c:	2b00      	cmp	r3, #0
 800596e:	d01e      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005970:	4b2f      	ldr	r3, [pc, #188]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005976:	0e1b      	lsrs	r3, r3, #24
 8005978:	f003 030f 	and.w	r3, r3, #15
 800597c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	019a      	lsls	r2, r3, #6
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	061b      	lsls	r3, r3, #24
 8005988:	431a      	orrs	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	071b      	lsls	r3, r3, #28
 8005990:	4927      	ldr	r1, [pc, #156]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005992:	4313      	orrs	r3, r2
 8005994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005998:	4b25      	ldr	r3, [pc, #148]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800599a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800599e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a6:	4922      	ldr	r1, [pc, #136]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80059ae:	4b21      	ldr	r3, [pc, #132]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80059b0:	2201      	movs	r2, #1
 80059b2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80059b4:	f7fd fd14 	bl	80033e0 <HAL_GetTick>
 80059b8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80059ba:	e008      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80059bc:	f7fd fd10 	bl	80033e0 <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d901      	bls.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e0a4      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80059ce:	4b18      	ldr	r3, [pc, #96]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059da:	d1ef      	bne.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0320 	and.w	r3, r3, #32
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f000 808b 	beq.w	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80059ea:	2300      	movs	r3, #0
 80059ec:	60fb      	str	r3, [r7, #12]
 80059ee:	4b10      	ldr	r3, [pc, #64]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f2:	4a0f      	ldr	r2, [pc, #60]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059f8:	6413      	str	r3, [r2, #64]	; 0x40
 80059fa:	4b0d      	ldr	r3, [pc, #52]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a02:	60fb      	str	r3, [r7, #12]
 8005a04:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005a06:	4b0c      	ldr	r3, [pc, #48]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a0b      	ldr	r2, [pc, #44]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a10:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a12:	f7fd fce5 	bl	80033e0 <HAL_GetTick>
 8005a16:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005a18:	e010      	b.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005a1a:	f7fd fce1 	bl	80033e0 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d909      	bls.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e075      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005a2c:	42470068 	.word	0x42470068
 8005a30:	40023800 	.word	0x40023800
 8005a34:	42470070 	.word	0x42470070
 8005a38:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005a3c:	4b38      	ldr	r3, [pc, #224]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d0e8      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a48:	4b36      	ldr	r3, [pc, #216]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a50:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d02f      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d028      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a66:	4b2f      	ldr	r3, [pc, #188]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a6e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a70:	4b2d      	ldr	r3, [pc, #180]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005a72:	2201      	movs	r2, #1
 8005a74:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a76:	4b2c      	ldr	r3, [pc, #176]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005a78:	2200      	movs	r2, #0
 8005a7a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005a7c:	4a29      	ldr	r2, [pc, #164]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005a82:	4b28      	ldr	r3, [pc, #160]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a86:	f003 0301 	and.w	r3, r3, #1
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d114      	bne.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005a8e:	f7fd fca7 	bl	80033e0 <HAL_GetTick>
 8005a92:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a94:	e00a      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a96:	f7fd fca3 	bl	80033e0 <HAL_GetTick>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d901      	bls.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e035      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aac:	4b1d      	ldr	r3, [pc, #116]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab0:	f003 0302 	and.w	r3, r3, #2
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d0ee      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005abc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ac0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ac4:	d10d      	bne.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005ac6:	4b17      	ldr	r3, [pc, #92]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ada:	4912      	ldr	r1, [pc, #72]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	608b      	str	r3, [r1, #8]
 8005ae0:	e005      	b.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005ae2:	4b10      	ldr	r3, [pc, #64]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	4a0f      	ldr	r2, [pc, #60]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ae8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005aec:	6093      	str	r3, [r2, #8]
 8005aee:	4b0d      	ldr	r3, [pc, #52]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005af0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005afa:	490a      	ldr	r1, [pc, #40]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0310 	and.w	r3, r3, #16
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d004      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005b12:	4b06      	ldr	r3, [pc, #24]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005b14:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3718      	adds	r7, #24
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	40007000 	.word	0x40007000
 8005b24:	40023800 	.word	0x40023800
 8005b28:	42470e40 	.word	0x42470e40
 8005b2c:	424711e0 	.word	0x424711e0

08005b30 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e066      	b.n	8005c14 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	7f5b      	ldrb	r3, [r3, #29]
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d105      	bne.n	8005b5c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7fd f82c 	bl	8002bb4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	22ca      	movs	r2, #202	; 0xca
 8005b68:	625a      	str	r2, [r3, #36]	; 0x24
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2253      	movs	r2, #83	; 0x53
 8005b70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f998 	bl	8005ea8 <RTC_EnterInitMode>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005b7c:	7bfb      	ldrb	r3, [r7, #15]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d12c      	bne.n	8005bdc <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	6812      	ldr	r2, [r2, #0]
 8005b8c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005b90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b94:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6899      	ldr	r1, [r3, #8]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	431a      	orrs	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	431a      	orrs	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	68d2      	ldr	r2, [r2, #12]
 8005bbc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6919      	ldr	r1, [r3, #16]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	041a      	lsls	r2, r3, #16
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f99f 	bl	8005f16 <RTC_ExitInitMode>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005bdc:	7bfb      	ldrb	r3, [r7, #15]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d113      	bne.n	8005c0a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005bf0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	699a      	ldr	r2, [r3, #24]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	430a      	orrs	r2, r1
 8005c02:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	22ff      	movs	r2, #255	; 0xff
 8005c10:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3710      	adds	r7, #16
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005c1c:	b590      	push	{r4, r7, lr}
 8005c1e:	b087      	sub	sp, #28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	7f1b      	ldrb	r3, [r3, #28]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d101      	bne.n	8005c38 <HAL_RTC_SetTime+0x1c>
 8005c34:	2302      	movs	r3, #2
 8005c36:	e087      	b.n	8005d48 <HAL_RTC_SetTime+0x12c>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2202      	movs	r2, #2
 8005c42:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d126      	bne.n	8005c98 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d102      	bne.n	8005c5e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f000 f97c 	bl	8005f60 <RTC_ByteToBcd2>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	785b      	ldrb	r3, [r3, #1]
 8005c70:	4618      	mov	r0, r3
 8005c72:	f000 f975 	bl	8005f60 <RTC_ByteToBcd2>
 8005c76:	4603      	mov	r3, r0
 8005c78:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c7a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	789b      	ldrb	r3, [r3, #2]
 8005c80:	4618      	mov	r0, r3
 8005c82:	f000 f96d 	bl	8005f60 <RTC_ByteToBcd2>
 8005c86:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005c88:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	78db      	ldrb	r3, [r3, #3]
 8005c90:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c92:	4313      	orrs	r3, r2
 8005c94:	617b      	str	r3, [r7, #20]
 8005c96:	e018      	b.n	8005cca <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d102      	bne.n	8005cac <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	785b      	ldrb	r3, [r3, #1]
 8005cb6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005cb8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005cbe:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	78db      	ldrb	r3, [r3, #3]
 8005cc4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	22ca      	movs	r2, #202	; 0xca
 8005cd0:	625a      	str	r2, [r3, #36]	; 0x24
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2253      	movs	r2, #83	; 0x53
 8005cd8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f000 f8e4 	bl	8005ea8 <RTC_EnterInitMode>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005ce4:	7cfb      	ldrb	r3, [r7, #19]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d120      	bne.n	8005d2c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005cf4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005cf8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	689a      	ldr	r2, [r3, #8]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005d08:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6899      	ldr	r1, [r3, #8]
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	68da      	ldr	r2, [r3, #12]
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f000 f8f7 	bl	8005f16 <RTC_ExitInitMode>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005d2c:	7cfb      	ldrb	r3, [r7, #19]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d102      	bne.n	8005d38 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2201      	movs	r2, #1
 8005d36:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	22ff      	movs	r2, #255	; 0xff
 8005d3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	771a      	strb	r2, [r3, #28]

  return status;
 8005d46:	7cfb      	ldrb	r3, [r7, #19]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	371c      	adds	r7, #28
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd90      	pop	{r4, r7, pc}

08005d50 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005d50:	b590      	push	{r4, r7, lr}
 8005d52:	b087      	sub	sp, #28
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	7f1b      	ldrb	r3, [r3, #28]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d101      	bne.n	8005d6c <HAL_RTC_SetDate+0x1c>
 8005d68:	2302      	movs	r3, #2
 8005d6a:	e071      	b.n	8005e50 <HAL_RTC_SetDate+0x100>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2202      	movs	r2, #2
 8005d76:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10e      	bne.n	8005d9c <HAL_RTC_SetDate+0x4c>
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	785b      	ldrb	r3, [r3, #1]
 8005d82:	f003 0310 	and.w	r3, r3, #16
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d008      	beq.n	8005d9c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	785b      	ldrb	r3, [r3, #1]
 8005d8e:	f023 0310 	bic.w	r3, r3, #16
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	330a      	adds	r3, #10
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d11c      	bne.n	8005ddc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	78db      	ldrb	r3, [r3, #3]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f000 f8da 	bl	8005f60 <RTC_ByteToBcd2>
 8005dac:	4603      	mov	r3, r0
 8005dae:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	785b      	ldrb	r3, [r3, #1]
 8005db4:	4618      	mov	r0, r3
 8005db6:	f000 f8d3 	bl	8005f60 <RTC_ByteToBcd2>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005dbe:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	789b      	ldrb	r3, [r3, #2]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f000 f8cb 	bl	8005f60 <RTC_ByteToBcd2>
 8005dca:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005dcc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	617b      	str	r3, [r7, #20]
 8005dda:	e00e      	b.n	8005dfa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	78db      	ldrb	r3, [r3, #3]
 8005de0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	785b      	ldrb	r3, [r3, #1]
 8005de6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005de8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005dee:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005df6:	4313      	orrs	r3, r2
 8005df8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	22ca      	movs	r2, #202	; 0xca
 8005e00:	625a      	str	r2, [r3, #36]	; 0x24
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2253      	movs	r2, #83	; 0x53
 8005e08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f000 f84c 	bl	8005ea8 <RTC_EnterInitMode>
 8005e10:	4603      	mov	r3, r0
 8005e12:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005e14:	7cfb      	ldrb	r3, [r7, #19]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10c      	bne.n	8005e34 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005e24:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005e28:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f000 f873 	bl	8005f16 <RTC_ExitInitMode>
 8005e30:	4603      	mov	r3, r0
 8005e32:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005e34:	7cfb      	ldrb	r3, [r7, #19]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d102      	bne.n	8005e40 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	22ff      	movs	r2, #255	; 0xff
 8005e46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	771a      	strb	r2, [r3, #28]

  return status;
 8005e4e:	7cfb      	ldrb	r3, [r7, #19]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	371c      	adds	r7, #28
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd90      	pop	{r4, r7, pc}

08005e58 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e60:	2300      	movs	r3, #0
 8005e62:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68da      	ldr	r2, [r3, #12]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e72:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e74:	f7fd fab4 	bl	80033e0 <HAL_GetTick>
 8005e78:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e7a:	e009      	b.n	8005e90 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e7c:	f7fd fab0 	bl	80033e0 <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e8a:	d901      	bls.n	8005e90 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e007      	b.n	8005ea0 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	f003 0320 	and.w	r3, r3, #32
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d0ee      	beq.n	8005e7c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3710      	adds	r7, #16
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d122      	bne.n	8005f0c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68da      	ldr	r2, [r3, #12]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ed4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ed6:	f7fd fa83 	bl	80033e0 <HAL_GetTick>
 8005eda:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005edc:	e00c      	b.n	8005ef8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ede:	f7fd fa7f 	bl	80033e0 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005eec:	d904      	bls.n	8005ef8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2204      	movs	r2, #4
 8005ef2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d102      	bne.n	8005f0c <RTC_EnterInitMode+0x64>
 8005f06:	7bfb      	ldrb	r3, [r7, #15]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d1e8      	bne.n	8005ede <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b084      	sub	sp, #16
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68da      	ldr	r2, [r3, #12]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f30:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f003 0320 	and.w	r3, r3, #32
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10a      	bne.n	8005f56 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f7ff ff89 	bl	8005e58 <HAL_RTC_WaitForSynchro>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d004      	beq.n	8005f56 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2204      	movs	r2, #4
 8005f50:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3710      	adds	r7, #16
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	4603      	mov	r3, r0
 8005f68:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005f6e:	e005      	b.n	8005f7c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005f70:	7bfb      	ldrb	r3, [r7, #15]
 8005f72:	3301      	adds	r3, #1
 8005f74:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005f76:	79fb      	ldrb	r3, [r7, #7]
 8005f78:	3b0a      	subs	r3, #10
 8005f7a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005f7c:	79fb      	ldrb	r3, [r7, #7]
 8005f7e:	2b09      	cmp	r3, #9
 8005f80:	d8f6      	bhi.n	8005f70 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005f82:	7bfb      	ldrb	r3, [r7, #15]
 8005f84:	011b      	lsls	r3, r3, #4
 8005f86:	b2da      	uxtb	r2, r3
 8005f88:	79fb      	ldrb	r3, [r7, #7]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	b2db      	uxtb	r3, r3
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3714      	adds	r7, #20
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr

08005f9a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b082      	sub	sp, #8
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d101      	bne.n	8005fac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e03f      	b.n	800602c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d106      	bne.n	8005fc6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f7fd f81d 	bl	8003000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2224      	movs	r2, #36	; 0x24
 8005fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68da      	ldr	r2, [r3, #12]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fdc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f9ca 	bl	8006378 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	691a      	ldr	r2, [r3, #16]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ff2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	695a      	ldr	r2, [r3, #20]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006002:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68da      	ldr	r2, [r3, #12]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006012:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2220      	movs	r2, #32
 800601e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2220      	movs	r2, #32
 8006026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b08a      	sub	sp, #40	; 0x28
 8006038:	af02      	add	r7, sp, #8
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	603b      	str	r3, [r7, #0]
 8006040:	4613      	mov	r3, r2
 8006042:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006044:	2300      	movs	r3, #0
 8006046:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800604e:	b2db      	uxtb	r3, r3
 8006050:	2b20      	cmp	r3, #32
 8006052:	d17c      	bne.n	800614e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d002      	beq.n	8006060 <HAL_UART_Transmit+0x2c>
 800605a:	88fb      	ldrh	r3, [r7, #6]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d101      	bne.n	8006064 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e075      	b.n	8006150 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800606a:	2b01      	cmp	r3, #1
 800606c:	d101      	bne.n	8006072 <HAL_UART_Transmit+0x3e>
 800606e:	2302      	movs	r3, #2
 8006070:	e06e      	b.n	8006150 <HAL_UART_Transmit+0x11c>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2221      	movs	r2, #33	; 0x21
 8006084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006088:	f7fd f9aa 	bl	80033e0 <HAL_GetTick>
 800608c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	88fa      	ldrh	r2, [r7, #6]
 8006092:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	88fa      	ldrh	r2, [r7, #6]
 8006098:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060a2:	d108      	bne.n	80060b6 <HAL_UART_Transmit+0x82>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d104      	bne.n	80060b6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80060ac:	2300      	movs	r3, #0
 80060ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	61bb      	str	r3, [r7, #24]
 80060b4:	e003      	b.n	80060be <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060ba:	2300      	movs	r3, #0
 80060bc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80060c6:	e02a      	b.n	800611e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	9300      	str	r3, [sp, #0]
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	2200      	movs	r2, #0
 80060d0:	2180      	movs	r1, #128	; 0x80
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f000 f8e2 	bl	800629c <UART_WaitOnFlagUntilTimeout>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e036      	b.n	8006150 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10b      	bne.n	8006100 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	881b      	ldrh	r3, [r3, #0]
 80060ec:	461a      	mov	r2, r3
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060f6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	3302      	adds	r3, #2
 80060fc:	61bb      	str	r3, [r7, #24]
 80060fe:	e007      	b.n	8006110 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	781a      	ldrb	r2, [r3, #0]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	3301      	adds	r3, #1
 800610e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006114:	b29b      	uxth	r3, r3
 8006116:	3b01      	subs	r3, #1
 8006118:	b29a      	uxth	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006122:	b29b      	uxth	r3, r3
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1cf      	bne.n	80060c8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	2200      	movs	r2, #0
 8006130:	2140      	movs	r1, #64	; 0x40
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f000 f8b2 	bl	800629c <UART_WaitOnFlagUntilTimeout>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d001      	beq.n	8006142 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e006      	b.n	8006150 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2220      	movs	r2, #32
 8006146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800614a:	2300      	movs	r3, #0
 800614c:	e000      	b.n	8006150 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800614e:	2302      	movs	r3, #2
  }
}
 8006150:	4618      	mov	r0, r3
 8006152:	3720      	adds	r7, #32
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b08a      	sub	sp, #40	; 0x28
 800615c:	af02      	add	r7, sp, #8
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	603b      	str	r3, [r7, #0]
 8006164:	4613      	mov	r3, r2
 8006166:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006168:	2300      	movs	r3, #0
 800616a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006172:	b2db      	uxtb	r3, r3
 8006174:	2b20      	cmp	r3, #32
 8006176:	f040 808c 	bne.w	8006292 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d002      	beq.n	8006186 <HAL_UART_Receive+0x2e>
 8006180:	88fb      	ldrh	r3, [r7, #6]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d101      	bne.n	800618a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e084      	b.n	8006294 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006190:	2b01      	cmp	r3, #1
 8006192:	d101      	bne.n	8006198 <HAL_UART_Receive+0x40>
 8006194:	2302      	movs	r3, #2
 8006196:	e07d      	b.n	8006294 <HAL_UART_Receive+0x13c>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2222      	movs	r2, #34	; 0x22
 80061aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061b4:	f7fd f914 	bl	80033e0 <HAL_GetTick>
 80061b8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	88fa      	ldrh	r2, [r7, #6]
 80061be:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	88fa      	ldrh	r2, [r7, #6]
 80061c4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ce:	d108      	bne.n	80061e2 <HAL_UART_Receive+0x8a>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d104      	bne.n	80061e2 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80061d8:	2300      	movs	r3, #0
 80061da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	61bb      	str	r3, [r7, #24]
 80061e0:	e003      	b.n	80061ea <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061e6:	2300      	movs	r3, #0
 80061e8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80061f2:	e043      	b.n	800627c <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	2200      	movs	r2, #0
 80061fc:	2120      	movs	r1, #32
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f000 f84c 	bl	800629c <UART_WaitOnFlagUntilTimeout>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d001      	beq.n	800620e <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e042      	b.n	8006294 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10c      	bne.n	800622e <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	b29b      	uxth	r3, r3
 800621c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006220:	b29a      	uxth	r2, r3
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	3302      	adds	r3, #2
 800622a:	61bb      	str	r3, [r7, #24]
 800622c:	e01f      	b.n	800626e <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006236:	d007      	beq.n	8006248 <HAL_UART_Receive+0xf0>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10a      	bne.n	8006256 <HAL_UART_Receive+0xfe>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d106      	bne.n	8006256 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	b2da      	uxtb	r2, r3
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	701a      	strb	r2, [r3, #0]
 8006254:	e008      	b.n	8006268 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	b2db      	uxtb	r3, r3
 800625e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006262:	b2da      	uxtb	r2, r3
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	3301      	adds	r3, #1
 800626c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006272:	b29b      	uxth	r3, r3
 8006274:	3b01      	subs	r3, #1
 8006276:	b29a      	uxth	r2, r3
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006280:	b29b      	uxth	r3, r3
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1b6      	bne.n	80061f4 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2220      	movs	r2, #32
 800628a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800628e:	2300      	movs	r3, #0
 8006290:	e000      	b.n	8006294 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006292:	2302      	movs	r3, #2
  }
}
 8006294:	4618      	mov	r0, r3
 8006296:	3720      	adds	r7, #32
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b090      	sub	sp, #64	; 0x40
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	603b      	str	r3, [r7, #0]
 80062a8:	4613      	mov	r3, r2
 80062aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062ac:	e050      	b.n	8006350 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062b4:	d04c      	beq.n	8006350 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80062b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d007      	beq.n	80062cc <UART_WaitOnFlagUntilTimeout+0x30>
 80062bc:	f7fd f890 	bl	80033e0 <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d241      	bcs.n	8006350 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	330c      	adds	r3, #12
 80062d2:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d6:	e853 3f00 	ldrex	r3, [r3]
 80062da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	330c      	adds	r3, #12
 80062ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80062ec:	637a      	str	r2, [r7, #52]	; 0x34
 80062ee:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062f4:	e841 2300 	strex	r3, r2, [r1]
 80062f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80062fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d1e5      	bne.n	80062cc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	3314      	adds	r3, #20
 8006306:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	e853 3f00 	ldrex	r3, [r3]
 800630e:	613b      	str	r3, [r7, #16]
   return(result);
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	f023 0301 	bic.w	r3, r3, #1
 8006316:	63bb      	str	r3, [r7, #56]	; 0x38
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	3314      	adds	r3, #20
 800631e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006320:	623a      	str	r2, [r7, #32]
 8006322:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006324:	69f9      	ldr	r1, [r7, #28]
 8006326:	6a3a      	ldr	r2, [r7, #32]
 8006328:	e841 2300 	strex	r3, r2, [r1]
 800632c:	61bb      	str	r3, [r7, #24]
   return(result);
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1e5      	bne.n	8006300 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2220      	movs	r2, #32
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2220      	movs	r2, #32
 8006340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e00f      	b.n	8006370 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	4013      	ands	r3, r2
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	429a      	cmp	r2, r3
 800635e:	bf0c      	ite	eq
 8006360:	2301      	moveq	r3, #1
 8006362:	2300      	movne	r3, #0
 8006364:	b2db      	uxtb	r3, r3
 8006366:	461a      	mov	r2, r3
 8006368:	79fb      	ldrb	r3, [r7, #7]
 800636a:	429a      	cmp	r2, r3
 800636c:	d09f      	beq.n	80062ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3740      	adds	r7, #64	; 0x40
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800637c:	b0c0      	sub	sp, #256	; 0x100
 800637e:	af00      	add	r7, sp, #0
 8006380:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006394:	68d9      	ldr	r1, [r3, #12]
 8006396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	ea40 0301 	orr.w	r3, r0, r1
 80063a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80063a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063a6:	689a      	ldr	r2, [r3, #8]
 80063a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	431a      	orrs	r2, r3
 80063b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	431a      	orrs	r2, r3
 80063b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063bc:	69db      	ldr	r3, [r3, #28]
 80063be:	4313      	orrs	r3, r2
 80063c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80063c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80063d0:	f021 010c 	bic.w	r1, r1, #12
 80063d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80063de:	430b      	orrs	r3, r1
 80063e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80063ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063f2:	6999      	ldr	r1, [r3, #24]
 80063f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	ea40 0301 	orr.w	r3, r0, r1
 80063fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	4b8f      	ldr	r3, [pc, #572]	; (8006644 <UART_SetConfig+0x2cc>)
 8006408:	429a      	cmp	r2, r3
 800640a:	d005      	beq.n	8006418 <UART_SetConfig+0xa0>
 800640c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	4b8d      	ldr	r3, [pc, #564]	; (8006648 <UART_SetConfig+0x2d0>)
 8006414:	429a      	cmp	r2, r3
 8006416:	d104      	bne.n	8006422 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006418:	f7ff f9b6 	bl	8005788 <HAL_RCC_GetPCLK2Freq>
 800641c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006420:	e003      	b.n	800642a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006422:	f7ff f99d 	bl	8005760 <HAL_RCC_GetPCLK1Freq>
 8006426:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800642a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800642e:	69db      	ldr	r3, [r3, #28]
 8006430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006434:	f040 810c 	bne.w	8006650 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006438:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800643c:	2200      	movs	r2, #0
 800643e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006442:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006446:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800644a:	4622      	mov	r2, r4
 800644c:	462b      	mov	r3, r5
 800644e:	1891      	adds	r1, r2, r2
 8006450:	65b9      	str	r1, [r7, #88]	; 0x58
 8006452:	415b      	adcs	r3, r3
 8006454:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006456:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800645a:	4621      	mov	r1, r4
 800645c:	eb12 0801 	adds.w	r8, r2, r1
 8006460:	4629      	mov	r1, r5
 8006462:	eb43 0901 	adc.w	r9, r3, r1
 8006466:	f04f 0200 	mov.w	r2, #0
 800646a:	f04f 0300 	mov.w	r3, #0
 800646e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006472:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006476:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800647a:	4690      	mov	r8, r2
 800647c:	4699      	mov	r9, r3
 800647e:	4623      	mov	r3, r4
 8006480:	eb18 0303 	adds.w	r3, r8, r3
 8006484:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006488:	462b      	mov	r3, r5
 800648a:	eb49 0303 	adc.w	r3, r9, r3
 800648e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800649e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80064a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80064a6:	460b      	mov	r3, r1
 80064a8:	18db      	adds	r3, r3, r3
 80064aa:	653b      	str	r3, [r7, #80]	; 0x50
 80064ac:	4613      	mov	r3, r2
 80064ae:	eb42 0303 	adc.w	r3, r2, r3
 80064b2:	657b      	str	r3, [r7, #84]	; 0x54
 80064b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80064b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80064bc:	f7fa fbf4 	bl	8000ca8 <__aeabi_uldivmod>
 80064c0:	4602      	mov	r2, r0
 80064c2:	460b      	mov	r3, r1
 80064c4:	4b61      	ldr	r3, [pc, #388]	; (800664c <UART_SetConfig+0x2d4>)
 80064c6:	fba3 2302 	umull	r2, r3, r3, r2
 80064ca:	095b      	lsrs	r3, r3, #5
 80064cc:	011c      	lsls	r4, r3, #4
 80064ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064d2:	2200      	movs	r2, #0
 80064d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80064dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80064e0:	4642      	mov	r2, r8
 80064e2:	464b      	mov	r3, r9
 80064e4:	1891      	adds	r1, r2, r2
 80064e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80064e8:	415b      	adcs	r3, r3
 80064ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80064f0:	4641      	mov	r1, r8
 80064f2:	eb12 0a01 	adds.w	sl, r2, r1
 80064f6:	4649      	mov	r1, r9
 80064f8:	eb43 0b01 	adc.w	fp, r3, r1
 80064fc:	f04f 0200 	mov.w	r2, #0
 8006500:	f04f 0300 	mov.w	r3, #0
 8006504:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006508:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800650c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006510:	4692      	mov	sl, r2
 8006512:	469b      	mov	fp, r3
 8006514:	4643      	mov	r3, r8
 8006516:	eb1a 0303 	adds.w	r3, sl, r3
 800651a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800651e:	464b      	mov	r3, r9
 8006520:	eb4b 0303 	adc.w	r3, fp, r3
 8006524:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006534:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006538:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800653c:	460b      	mov	r3, r1
 800653e:	18db      	adds	r3, r3, r3
 8006540:	643b      	str	r3, [r7, #64]	; 0x40
 8006542:	4613      	mov	r3, r2
 8006544:	eb42 0303 	adc.w	r3, r2, r3
 8006548:	647b      	str	r3, [r7, #68]	; 0x44
 800654a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800654e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006552:	f7fa fba9 	bl	8000ca8 <__aeabi_uldivmod>
 8006556:	4602      	mov	r2, r0
 8006558:	460b      	mov	r3, r1
 800655a:	4611      	mov	r1, r2
 800655c:	4b3b      	ldr	r3, [pc, #236]	; (800664c <UART_SetConfig+0x2d4>)
 800655e:	fba3 2301 	umull	r2, r3, r3, r1
 8006562:	095b      	lsrs	r3, r3, #5
 8006564:	2264      	movs	r2, #100	; 0x64
 8006566:	fb02 f303 	mul.w	r3, r2, r3
 800656a:	1acb      	subs	r3, r1, r3
 800656c:	00db      	lsls	r3, r3, #3
 800656e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006572:	4b36      	ldr	r3, [pc, #216]	; (800664c <UART_SetConfig+0x2d4>)
 8006574:	fba3 2302 	umull	r2, r3, r3, r2
 8006578:	095b      	lsrs	r3, r3, #5
 800657a:	005b      	lsls	r3, r3, #1
 800657c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006580:	441c      	add	r4, r3
 8006582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006586:	2200      	movs	r2, #0
 8006588:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800658c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006590:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006594:	4642      	mov	r2, r8
 8006596:	464b      	mov	r3, r9
 8006598:	1891      	adds	r1, r2, r2
 800659a:	63b9      	str	r1, [r7, #56]	; 0x38
 800659c:	415b      	adcs	r3, r3
 800659e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80065a4:	4641      	mov	r1, r8
 80065a6:	1851      	adds	r1, r2, r1
 80065a8:	6339      	str	r1, [r7, #48]	; 0x30
 80065aa:	4649      	mov	r1, r9
 80065ac:	414b      	adcs	r3, r1
 80065ae:	637b      	str	r3, [r7, #52]	; 0x34
 80065b0:	f04f 0200 	mov.w	r2, #0
 80065b4:	f04f 0300 	mov.w	r3, #0
 80065b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80065bc:	4659      	mov	r1, fp
 80065be:	00cb      	lsls	r3, r1, #3
 80065c0:	4651      	mov	r1, sl
 80065c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065c6:	4651      	mov	r1, sl
 80065c8:	00ca      	lsls	r2, r1, #3
 80065ca:	4610      	mov	r0, r2
 80065cc:	4619      	mov	r1, r3
 80065ce:	4603      	mov	r3, r0
 80065d0:	4642      	mov	r2, r8
 80065d2:	189b      	adds	r3, r3, r2
 80065d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065d8:	464b      	mov	r3, r9
 80065da:	460a      	mov	r2, r1
 80065dc:	eb42 0303 	adc.w	r3, r2, r3
 80065e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80065e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80065f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80065f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80065f8:	460b      	mov	r3, r1
 80065fa:	18db      	adds	r3, r3, r3
 80065fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80065fe:	4613      	mov	r3, r2
 8006600:	eb42 0303 	adc.w	r3, r2, r3
 8006604:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006606:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800660a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800660e:	f7fa fb4b 	bl	8000ca8 <__aeabi_uldivmod>
 8006612:	4602      	mov	r2, r0
 8006614:	460b      	mov	r3, r1
 8006616:	4b0d      	ldr	r3, [pc, #52]	; (800664c <UART_SetConfig+0x2d4>)
 8006618:	fba3 1302 	umull	r1, r3, r3, r2
 800661c:	095b      	lsrs	r3, r3, #5
 800661e:	2164      	movs	r1, #100	; 0x64
 8006620:	fb01 f303 	mul.w	r3, r1, r3
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	00db      	lsls	r3, r3, #3
 8006628:	3332      	adds	r3, #50	; 0x32
 800662a:	4a08      	ldr	r2, [pc, #32]	; (800664c <UART_SetConfig+0x2d4>)
 800662c:	fba2 2303 	umull	r2, r3, r2, r3
 8006630:	095b      	lsrs	r3, r3, #5
 8006632:	f003 0207 	and.w	r2, r3, #7
 8006636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4422      	add	r2, r4
 800663e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006640:	e105      	b.n	800684e <UART_SetConfig+0x4d6>
 8006642:	bf00      	nop
 8006644:	40011000 	.word	0x40011000
 8006648:	40011400 	.word	0x40011400
 800664c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006650:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006654:	2200      	movs	r2, #0
 8006656:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800665a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800665e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006662:	4642      	mov	r2, r8
 8006664:	464b      	mov	r3, r9
 8006666:	1891      	adds	r1, r2, r2
 8006668:	6239      	str	r1, [r7, #32]
 800666a:	415b      	adcs	r3, r3
 800666c:	627b      	str	r3, [r7, #36]	; 0x24
 800666e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006672:	4641      	mov	r1, r8
 8006674:	1854      	adds	r4, r2, r1
 8006676:	4649      	mov	r1, r9
 8006678:	eb43 0501 	adc.w	r5, r3, r1
 800667c:	f04f 0200 	mov.w	r2, #0
 8006680:	f04f 0300 	mov.w	r3, #0
 8006684:	00eb      	lsls	r3, r5, #3
 8006686:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800668a:	00e2      	lsls	r2, r4, #3
 800668c:	4614      	mov	r4, r2
 800668e:	461d      	mov	r5, r3
 8006690:	4643      	mov	r3, r8
 8006692:	18e3      	adds	r3, r4, r3
 8006694:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006698:	464b      	mov	r3, r9
 800669a:	eb45 0303 	adc.w	r3, r5, r3
 800669e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80066a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80066ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80066b2:	f04f 0200 	mov.w	r2, #0
 80066b6:	f04f 0300 	mov.w	r3, #0
 80066ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80066be:	4629      	mov	r1, r5
 80066c0:	008b      	lsls	r3, r1, #2
 80066c2:	4621      	mov	r1, r4
 80066c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066c8:	4621      	mov	r1, r4
 80066ca:	008a      	lsls	r2, r1, #2
 80066cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80066d0:	f7fa faea 	bl	8000ca8 <__aeabi_uldivmod>
 80066d4:	4602      	mov	r2, r0
 80066d6:	460b      	mov	r3, r1
 80066d8:	4b60      	ldr	r3, [pc, #384]	; (800685c <UART_SetConfig+0x4e4>)
 80066da:	fba3 2302 	umull	r2, r3, r3, r2
 80066de:	095b      	lsrs	r3, r3, #5
 80066e0:	011c      	lsls	r4, r3, #4
 80066e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066e6:	2200      	movs	r2, #0
 80066e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80066ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80066f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80066f4:	4642      	mov	r2, r8
 80066f6:	464b      	mov	r3, r9
 80066f8:	1891      	adds	r1, r2, r2
 80066fa:	61b9      	str	r1, [r7, #24]
 80066fc:	415b      	adcs	r3, r3
 80066fe:	61fb      	str	r3, [r7, #28]
 8006700:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006704:	4641      	mov	r1, r8
 8006706:	1851      	adds	r1, r2, r1
 8006708:	6139      	str	r1, [r7, #16]
 800670a:	4649      	mov	r1, r9
 800670c:	414b      	adcs	r3, r1
 800670e:	617b      	str	r3, [r7, #20]
 8006710:	f04f 0200 	mov.w	r2, #0
 8006714:	f04f 0300 	mov.w	r3, #0
 8006718:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800671c:	4659      	mov	r1, fp
 800671e:	00cb      	lsls	r3, r1, #3
 8006720:	4651      	mov	r1, sl
 8006722:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006726:	4651      	mov	r1, sl
 8006728:	00ca      	lsls	r2, r1, #3
 800672a:	4610      	mov	r0, r2
 800672c:	4619      	mov	r1, r3
 800672e:	4603      	mov	r3, r0
 8006730:	4642      	mov	r2, r8
 8006732:	189b      	adds	r3, r3, r2
 8006734:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006738:	464b      	mov	r3, r9
 800673a:	460a      	mov	r2, r1
 800673c:	eb42 0303 	adc.w	r3, r2, r3
 8006740:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	67bb      	str	r3, [r7, #120]	; 0x78
 800674e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006750:	f04f 0200 	mov.w	r2, #0
 8006754:	f04f 0300 	mov.w	r3, #0
 8006758:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800675c:	4649      	mov	r1, r9
 800675e:	008b      	lsls	r3, r1, #2
 8006760:	4641      	mov	r1, r8
 8006762:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006766:	4641      	mov	r1, r8
 8006768:	008a      	lsls	r2, r1, #2
 800676a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800676e:	f7fa fa9b 	bl	8000ca8 <__aeabi_uldivmod>
 8006772:	4602      	mov	r2, r0
 8006774:	460b      	mov	r3, r1
 8006776:	4b39      	ldr	r3, [pc, #228]	; (800685c <UART_SetConfig+0x4e4>)
 8006778:	fba3 1302 	umull	r1, r3, r3, r2
 800677c:	095b      	lsrs	r3, r3, #5
 800677e:	2164      	movs	r1, #100	; 0x64
 8006780:	fb01 f303 	mul.w	r3, r1, r3
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	011b      	lsls	r3, r3, #4
 8006788:	3332      	adds	r3, #50	; 0x32
 800678a:	4a34      	ldr	r2, [pc, #208]	; (800685c <UART_SetConfig+0x4e4>)
 800678c:	fba2 2303 	umull	r2, r3, r2, r3
 8006790:	095b      	lsrs	r3, r3, #5
 8006792:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006796:	441c      	add	r4, r3
 8006798:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800679c:	2200      	movs	r2, #0
 800679e:	673b      	str	r3, [r7, #112]	; 0x70
 80067a0:	677a      	str	r2, [r7, #116]	; 0x74
 80067a2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80067a6:	4642      	mov	r2, r8
 80067a8:	464b      	mov	r3, r9
 80067aa:	1891      	adds	r1, r2, r2
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	415b      	adcs	r3, r3
 80067b0:	60fb      	str	r3, [r7, #12]
 80067b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80067b6:	4641      	mov	r1, r8
 80067b8:	1851      	adds	r1, r2, r1
 80067ba:	6039      	str	r1, [r7, #0]
 80067bc:	4649      	mov	r1, r9
 80067be:	414b      	adcs	r3, r1
 80067c0:	607b      	str	r3, [r7, #4]
 80067c2:	f04f 0200 	mov.w	r2, #0
 80067c6:	f04f 0300 	mov.w	r3, #0
 80067ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80067ce:	4659      	mov	r1, fp
 80067d0:	00cb      	lsls	r3, r1, #3
 80067d2:	4651      	mov	r1, sl
 80067d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067d8:	4651      	mov	r1, sl
 80067da:	00ca      	lsls	r2, r1, #3
 80067dc:	4610      	mov	r0, r2
 80067de:	4619      	mov	r1, r3
 80067e0:	4603      	mov	r3, r0
 80067e2:	4642      	mov	r2, r8
 80067e4:	189b      	adds	r3, r3, r2
 80067e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80067e8:	464b      	mov	r3, r9
 80067ea:	460a      	mov	r2, r1
 80067ec:	eb42 0303 	adc.w	r3, r2, r3
 80067f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	663b      	str	r3, [r7, #96]	; 0x60
 80067fc:	667a      	str	r2, [r7, #100]	; 0x64
 80067fe:	f04f 0200 	mov.w	r2, #0
 8006802:	f04f 0300 	mov.w	r3, #0
 8006806:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800680a:	4649      	mov	r1, r9
 800680c:	008b      	lsls	r3, r1, #2
 800680e:	4641      	mov	r1, r8
 8006810:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006814:	4641      	mov	r1, r8
 8006816:	008a      	lsls	r2, r1, #2
 8006818:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800681c:	f7fa fa44 	bl	8000ca8 <__aeabi_uldivmod>
 8006820:	4602      	mov	r2, r0
 8006822:	460b      	mov	r3, r1
 8006824:	4b0d      	ldr	r3, [pc, #52]	; (800685c <UART_SetConfig+0x4e4>)
 8006826:	fba3 1302 	umull	r1, r3, r3, r2
 800682a:	095b      	lsrs	r3, r3, #5
 800682c:	2164      	movs	r1, #100	; 0x64
 800682e:	fb01 f303 	mul.w	r3, r1, r3
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	011b      	lsls	r3, r3, #4
 8006836:	3332      	adds	r3, #50	; 0x32
 8006838:	4a08      	ldr	r2, [pc, #32]	; (800685c <UART_SetConfig+0x4e4>)
 800683a:	fba2 2303 	umull	r2, r3, r2, r3
 800683e:	095b      	lsrs	r3, r3, #5
 8006840:	f003 020f 	and.w	r2, r3, #15
 8006844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4422      	add	r2, r4
 800684c:	609a      	str	r2, [r3, #8]
}
 800684e:	bf00      	nop
 8006850:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006854:	46bd      	mov	sp, r7
 8006856:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800685a:	bf00      	nop
 800685c:	51eb851f 	.word	0x51eb851f

08006860 <atoi>:
 8006860:	220a      	movs	r2, #10
 8006862:	2100      	movs	r1, #0
 8006864:	f001 bebc 	b.w	80085e0 <strtol>

08006868 <__errno>:
 8006868:	4b01      	ldr	r3, [pc, #4]	; (8006870 <__errno+0x8>)
 800686a:	6818      	ldr	r0, [r3, #0]
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	2000003c 	.word	0x2000003c

08006874 <__libc_init_array>:
 8006874:	b570      	push	{r4, r5, r6, lr}
 8006876:	4d0d      	ldr	r5, [pc, #52]	; (80068ac <__libc_init_array+0x38>)
 8006878:	4c0d      	ldr	r4, [pc, #52]	; (80068b0 <__libc_init_array+0x3c>)
 800687a:	1b64      	subs	r4, r4, r5
 800687c:	10a4      	asrs	r4, r4, #2
 800687e:	2600      	movs	r6, #0
 8006880:	42a6      	cmp	r6, r4
 8006882:	d109      	bne.n	8006898 <__libc_init_array+0x24>
 8006884:	4d0b      	ldr	r5, [pc, #44]	; (80068b4 <__libc_init_array+0x40>)
 8006886:	4c0c      	ldr	r4, [pc, #48]	; (80068b8 <__libc_init_array+0x44>)
 8006888:	f004 fd70 	bl	800b36c <_init>
 800688c:	1b64      	subs	r4, r4, r5
 800688e:	10a4      	asrs	r4, r4, #2
 8006890:	2600      	movs	r6, #0
 8006892:	42a6      	cmp	r6, r4
 8006894:	d105      	bne.n	80068a2 <__libc_init_array+0x2e>
 8006896:	bd70      	pop	{r4, r5, r6, pc}
 8006898:	f855 3b04 	ldr.w	r3, [r5], #4
 800689c:	4798      	blx	r3
 800689e:	3601      	adds	r6, #1
 80068a0:	e7ee      	b.n	8006880 <__libc_init_array+0xc>
 80068a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80068a6:	4798      	blx	r3
 80068a8:	3601      	adds	r6, #1
 80068aa:	e7f2      	b.n	8006892 <__libc_init_array+0x1e>
 80068ac:	0800c03c 	.word	0x0800c03c
 80068b0:	0800c03c 	.word	0x0800c03c
 80068b4:	0800c03c 	.word	0x0800c03c
 80068b8:	0800c040 	.word	0x0800c040

080068bc <memcpy>:
 80068bc:	440a      	add	r2, r1
 80068be:	4291      	cmp	r1, r2
 80068c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80068c4:	d100      	bne.n	80068c8 <memcpy+0xc>
 80068c6:	4770      	bx	lr
 80068c8:	b510      	push	{r4, lr}
 80068ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068d2:	4291      	cmp	r1, r2
 80068d4:	d1f9      	bne.n	80068ca <memcpy+0xe>
 80068d6:	bd10      	pop	{r4, pc}

080068d8 <memset>:
 80068d8:	4402      	add	r2, r0
 80068da:	4603      	mov	r3, r0
 80068dc:	4293      	cmp	r3, r2
 80068de:	d100      	bne.n	80068e2 <memset+0xa>
 80068e0:	4770      	bx	lr
 80068e2:	f803 1b01 	strb.w	r1, [r3], #1
 80068e6:	e7f9      	b.n	80068dc <memset+0x4>

080068e8 <__cvt>:
 80068e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068ec:	ec55 4b10 	vmov	r4, r5, d0
 80068f0:	2d00      	cmp	r5, #0
 80068f2:	460e      	mov	r6, r1
 80068f4:	4619      	mov	r1, r3
 80068f6:	462b      	mov	r3, r5
 80068f8:	bfbb      	ittet	lt
 80068fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80068fe:	461d      	movlt	r5, r3
 8006900:	2300      	movge	r3, #0
 8006902:	232d      	movlt	r3, #45	; 0x2d
 8006904:	700b      	strb	r3, [r1, #0]
 8006906:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006908:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800690c:	4691      	mov	r9, r2
 800690e:	f023 0820 	bic.w	r8, r3, #32
 8006912:	bfbc      	itt	lt
 8006914:	4622      	movlt	r2, r4
 8006916:	4614      	movlt	r4, r2
 8006918:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800691c:	d005      	beq.n	800692a <__cvt+0x42>
 800691e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006922:	d100      	bne.n	8006926 <__cvt+0x3e>
 8006924:	3601      	adds	r6, #1
 8006926:	2102      	movs	r1, #2
 8006928:	e000      	b.n	800692c <__cvt+0x44>
 800692a:	2103      	movs	r1, #3
 800692c:	ab03      	add	r3, sp, #12
 800692e:	9301      	str	r3, [sp, #4]
 8006930:	ab02      	add	r3, sp, #8
 8006932:	9300      	str	r3, [sp, #0]
 8006934:	ec45 4b10 	vmov	d0, r4, r5
 8006938:	4653      	mov	r3, sl
 800693a:	4632      	mov	r2, r6
 800693c:	f001 ffc8 	bl	80088d0 <_dtoa_r>
 8006940:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006944:	4607      	mov	r7, r0
 8006946:	d102      	bne.n	800694e <__cvt+0x66>
 8006948:	f019 0f01 	tst.w	r9, #1
 800694c:	d022      	beq.n	8006994 <__cvt+0xac>
 800694e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006952:	eb07 0906 	add.w	r9, r7, r6
 8006956:	d110      	bne.n	800697a <__cvt+0x92>
 8006958:	783b      	ldrb	r3, [r7, #0]
 800695a:	2b30      	cmp	r3, #48	; 0x30
 800695c:	d10a      	bne.n	8006974 <__cvt+0x8c>
 800695e:	2200      	movs	r2, #0
 8006960:	2300      	movs	r3, #0
 8006962:	4620      	mov	r0, r4
 8006964:	4629      	mov	r1, r5
 8006966:	f7fa f8bf 	bl	8000ae8 <__aeabi_dcmpeq>
 800696a:	b918      	cbnz	r0, 8006974 <__cvt+0x8c>
 800696c:	f1c6 0601 	rsb	r6, r6, #1
 8006970:	f8ca 6000 	str.w	r6, [sl]
 8006974:	f8da 3000 	ldr.w	r3, [sl]
 8006978:	4499      	add	r9, r3
 800697a:	2200      	movs	r2, #0
 800697c:	2300      	movs	r3, #0
 800697e:	4620      	mov	r0, r4
 8006980:	4629      	mov	r1, r5
 8006982:	f7fa f8b1 	bl	8000ae8 <__aeabi_dcmpeq>
 8006986:	b108      	cbz	r0, 800698c <__cvt+0xa4>
 8006988:	f8cd 900c 	str.w	r9, [sp, #12]
 800698c:	2230      	movs	r2, #48	; 0x30
 800698e:	9b03      	ldr	r3, [sp, #12]
 8006990:	454b      	cmp	r3, r9
 8006992:	d307      	bcc.n	80069a4 <__cvt+0xbc>
 8006994:	9b03      	ldr	r3, [sp, #12]
 8006996:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006998:	1bdb      	subs	r3, r3, r7
 800699a:	4638      	mov	r0, r7
 800699c:	6013      	str	r3, [r2, #0]
 800699e:	b004      	add	sp, #16
 80069a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069a4:	1c59      	adds	r1, r3, #1
 80069a6:	9103      	str	r1, [sp, #12]
 80069a8:	701a      	strb	r2, [r3, #0]
 80069aa:	e7f0      	b.n	800698e <__cvt+0xa6>

080069ac <__exponent>:
 80069ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069ae:	4603      	mov	r3, r0
 80069b0:	2900      	cmp	r1, #0
 80069b2:	bfb8      	it	lt
 80069b4:	4249      	neglt	r1, r1
 80069b6:	f803 2b02 	strb.w	r2, [r3], #2
 80069ba:	bfb4      	ite	lt
 80069bc:	222d      	movlt	r2, #45	; 0x2d
 80069be:	222b      	movge	r2, #43	; 0x2b
 80069c0:	2909      	cmp	r1, #9
 80069c2:	7042      	strb	r2, [r0, #1]
 80069c4:	dd2a      	ble.n	8006a1c <__exponent+0x70>
 80069c6:	f10d 0407 	add.w	r4, sp, #7
 80069ca:	46a4      	mov	ip, r4
 80069cc:	270a      	movs	r7, #10
 80069ce:	46a6      	mov	lr, r4
 80069d0:	460a      	mov	r2, r1
 80069d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80069d6:	fb07 1516 	mls	r5, r7, r6, r1
 80069da:	3530      	adds	r5, #48	; 0x30
 80069dc:	2a63      	cmp	r2, #99	; 0x63
 80069de:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80069e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80069e6:	4631      	mov	r1, r6
 80069e8:	dcf1      	bgt.n	80069ce <__exponent+0x22>
 80069ea:	3130      	adds	r1, #48	; 0x30
 80069ec:	f1ae 0502 	sub.w	r5, lr, #2
 80069f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80069f4:	1c44      	adds	r4, r0, #1
 80069f6:	4629      	mov	r1, r5
 80069f8:	4561      	cmp	r1, ip
 80069fa:	d30a      	bcc.n	8006a12 <__exponent+0x66>
 80069fc:	f10d 0209 	add.w	r2, sp, #9
 8006a00:	eba2 020e 	sub.w	r2, r2, lr
 8006a04:	4565      	cmp	r5, ip
 8006a06:	bf88      	it	hi
 8006a08:	2200      	movhi	r2, #0
 8006a0a:	4413      	add	r3, r2
 8006a0c:	1a18      	subs	r0, r3, r0
 8006a0e:	b003      	add	sp, #12
 8006a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a16:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006a1a:	e7ed      	b.n	80069f8 <__exponent+0x4c>
 8006a1c:	2330      	movs	r3, #48	; 0x30
 8006a1e:	3130      	adds	r1, #48	; 0x30
 8006a20:	7083      	strb	r3, [r0, #2]
 8006a22:	70c1      	strb	r1, [r0, #3]
 8006a24:	1d03      	adds	r3, r0, #4
 8006a26:	e7f1      	b.n	8006a0c <__exponent+0x60>

08006a28 <_printf_float>:
 8006a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a2c:	ed2d 8b02 	vpush	{d8}
 8006a30:	b08d      	sub	sp, #52	; 0x34
 8006a32:	460c      	mov	r4, r1
 8006a34:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006a38:	4616      	mov	r6, r2
 8006a3a:	461f      	mov	r7, r3
 8006a3c:	4605      	mov	r5, r0
 8006a3e:	f003 fa5b 	bl	8009ef8 <_localeconv_r>
 8006a42:	f8d0 a000 	ldr.w	sl, [r0]
 8006a46:	4650      	mov	r0, sl
 8006a48:	f7f9 fbd2 	bl	80001f0 <strlen>
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	930a      	str	r3, [sp, #40]	; 0x28
 8006a50:	6823      	ldr	r3, [r4, #0]
 8006a52:	9305      	str	r3, [sp, #20]
 8006a54:	f8d8 3000 	ldr.w	r3, [r8]
 8006a58:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006a5c:	3307      	adds	r3, #7
 8006a5e:	f023 0307 	bic.w	r3, r3, #7
 8006a62:	f103 0208 	add.w	r2, r3, #8
 8006a66:	f8c8 2000 	str.w	r2, [r8]
 8006a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006a72:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006a76:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006a7a:	9307      	str	r3, [sp, #28]
 8006a7c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006a80:	ee08 0a10 	vmov	s16, r0
 8006a84:	4b9f      	ldr	r3, [pc, #636]	; (8006d04 <_printf_float+0x2dc>)
 8006a86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a8e:	f7fa f85d 	bl	8000b4c <__aeabi_dcmpun>
 8006a92:	bb88      	cbnz	r0, 8006af8 <_printf_float+0xd0>
 8006a94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a98:	4b9a      	ldr	r3, [pc, #616]	; (8006d04 <_printf_float+0x2dc>)
 8006a9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a9e:	f7fa f837 	bl	8000b10 <__aeabi_dcmple>
 8006aa2:	bb48      	cbnz	r0, 8006af8 <_printf_float+0xd0>
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	4640      	mov	r0, r8
 8006aaa:	4649      	mov	r1, r9
 8006aac:	f7fa f826 	bl	8000afc <__aeabi_dcmplt>
 8006ab0:	b110      	cbz	r0, 8006ab8 <_printf_float+0x90>
 8006ab2:	232d      	movs	r3, #45	; 0x2d
 8006ab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ab8:	4b93      	ldr	r3, [pc, #588]	; (8006d08 <_printf_float+0x2e0>)
 8006aba:	4894      	ldr	r0, [pc, #592]	; (8006d0c <_printf_float+0x2e4>)
 8006abc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006ac0:	bf94      	ite	ls
 8006ac2:	4698      	movls	r8, r3
 8006ac4:	4680      	movhi	r8, r0
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	6123      	str	r3, [r4, #16]
 8006aca:	9b05      	ldr	r3, [sp, #20]
 8006acc:	f023 0204 	bic.w	r2, r3, #4
 8006ad0:	6022      	str	r2, [r4, #0]
 8006ad2:	f04f 0900 	mov.w	r9, #0
 8006ad6:	9700      	str	r7, [sp, #0]
 8006ad8:	4633      	mov	r3, r6
 8006ada:	aa0b      	add	r2, sp, #44	; 0x2c
 8006adc:	4621      	mov	r1, r4
 8006ade:	4628      	mov	r0, r5
 8006ae0:	f000 f9d8 	bl	8006e94 <_printf_common>
 8006ae4:	3001      	adds	r0, #1
 8006ae6:	f040 8090 	bne.w	8006c0a <_printf_float+0x1e2>
 8006aea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006aee:	b00d      	add	sp, #52	; 0x34
 8006af0:	ecbd 8b02 	vpop	{d8}
 8006af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006af8:	4642      	mov	r2, r8
 8006afa:	464b      	mov	r3, r9
 8006afc:	4640      	mov	r0, r8
 8006afe:	4649      	mov	r1, r9
 8006b00:	f7fa f824 	bl	8000b4c <__aeabi_dcmpun>
 8006b04:	b140      	cbz	r0, 8006b18 <_printf_float+0xf0>
 8006b06:	464b      	mov	r3, r9
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	bfbc      	itt	lt
 8006b0c:	232d      	movlt	r3, #45	; 0x2d
 8006b0e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006b12:	487f      	ldr	r0, [pc, #508]	; (8006d10 <_printf_float+0x2e8>)
 8006b14:	4b7f      	ldr	r3, [pc, #508]	; (8006d14 <_printf_float+0x2ec>)
 8006b16:	e7d1      	b.n	8006abc <_printf_float+0x94>
 8006b18:	6863      	ldr	r3, [r4, #4]
 8006b1a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006b1e:	9206      	str	r2, [sp, #24]
 8006b20:	1c5a      	adds	r2, r3, #1
 8006b22:	d13f      	bne.n	8006ba4 <_printf_float+0x17c>
 8006b24:	2306      	movs	r3, #6
 8006b26:	6063      	str	r3, [r4, #4]
 8006b28:	9b05      	ldr	r3, [sp, #20]
 8006b2a:	6861      	ldr	r1, [r4, #4]
 8006b2c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006b30:	2300      	movs	r3, #0
 8006b32:	9303      	str	r3, [sp, #12]
 8006b34:	ab0a      	add	r3, sp, #40	; 0x28
 8006b36:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006b3a:	ab09      	add	r3, sp, #36	; 0x24
 8006b3c:	ec49 8b10 	vmov	d0, r8, r9
 8006b40:	9300      	str	r3, [sp, #0]
 8006b42:	6022      	str	r2, [r4, #0]
 8006b44:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006b48:	4628      	mov	r0, r5
 8006b4a:	f7ff fecd 	bl	80068e8 <__cvt>
 8006b4e:	9b06      	ldr	r3, [sp, #24]
 8006b50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b52:	2b47      	cmp	r3, #71	; 0x47
 8006b54:	4680      	mov	r8, r0
 8006b56:	d108      	bne.n	8006b6a <_printf_float+0x142>
 8006b58:	1cc8      	adds	r0, r1, #3
 8006b5a:	db02      	blt.n	8006b62 <_printf_float+0x13a>
 8006b5c:	6863      	ldr	r3, [r4, #4]
 8006b5e:	4299      	cmp	r1, r3
 8006b60:	dd41      	ble.n	8006be6 <_printf_float+0x1be>
 8006b62:	f1ab 0b02 	sub.w	fp, fp, #2
 8006b66:	fa5f fb8b 	uxtb.w	fp, fp
 8006b6a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006b6e:	d820      	bhi.n	8006bb2 <_printf_float+0x18a>
 8006b70:	3901      	subs	r1, #1
 8006b72:	465a      	mov	r2, fp
 8006b74:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006b78:	9109      	str	r1, [sp, #36]	; 0x24
 8006b7a:	f7ff ff17 	bl	80069ac <__exponent>
 8006b7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b80:	1813      	adds	r3, r2, r0
 8006b82:	2a01      	cmp	r2, #1
 8006b84:	4681      	mov	r9, r0
 8006b86:	6123      	str	r3, [r4, #16]
 8006b88:	dc02      	bgt.n	8006b90 <_printf_float+0x168>
 8006b8a:	6822      	ldr	r2, [r4, #0]
 8006b8c:	07d2      	lsls	r2, r2, #31
 8006b8e:	d501      	bpl.n	8006b94 <_printf_float+0x16c>
 8006b90:	3301      	adds	r3, #1
 8006b92:	6123      	str	r3, [r4, #16]
 8006b94:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d09c      	beq.n	8006ad6 <_printf_float+0xae>
 8006b9c:	232d      	movs	r3, #45	; 0x2d
 8006b9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ba2:	e798      	b.n	8006ad6 <_printf_float+0xae>
 8006ba4:	9a06      	ldr	r2, [sp, #24]
 8006ba6:	2a47      	cmp	r2, #71	; 0x47
 8006ba8:	d1be      	bne.n	8006b28 <_printf_float+0x100>
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d1bc      	bne.n	8006b28 <_printf_float+0x100>
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e7b9      	b.n	8006b26 <_printf_float+0xfe>
 8006bb2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006bb6:	d118      	bne.n	8006bea <_printf_float+0x1c2>
 8006bb8:	2900      	cmp	r1, #0
 8006bba:	6863      	ldr	r3, [r4, #4]
 8006bbc:	dd0b      	ble.n	8006bd6 <_printf_float+0x1ae>
 8006bbe:	6121      	str	r1, [r4, #16]
 8006bc0:	b913      	cbnz	r3, 8006bc8 <_printf_float+0x1a0>
 8006bc2:	6822      	ldr	r2, [r4, #0]
 8006bc4:	07d0      	lsls	r0, r2, #31
 8006bc6:	d502      	bpl.n	8006bce <_printf_float+0x1a6>
 8006bc8:	3301      	adds	r3, #1
 8006bca:	440b      	add	r3, r1
 8006bcc:	6123      	str	r3, [r4, #16]
 8006bce:	65a1      	str	r1, [r4, #88]	; 0x58
 8006bd0:	f04f 0900 	mov.w	r9, #0
 8006bd4:	e7de      	b.n	8006b94 <_printf_float+0x16c>
 8006bd6:	b913      	cbnz	r3, 8006bde <_printf_float+0x1b6>
 8006bd8:	6822      	ldr	r2, [r4, #0]
 8006bda:	07d2      	lsls	r2, r2, #31
 8006bdc:	d501      	bpl.n	8006be2 <_printf_float+0x1ba>
 8006bde:	3302      	adds	r3, #2
 8006be0:	e7f4      	b.n	8006bcc <_printf_float+0x1a4>
 8006be2:	2301      	movs	r3, #1
 8006be4:	e7f2      	b.n	8006bcc <_printf_float+0x1a4>
 8006be6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006bea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bec:	4299      	cmp	r1, r3
 8006bee:	db05      	blt.n	8006bfc <_printf_float+0x1d4>
 8006bf0:	6823      	ldr	r3, [r4, #0]
 8006bf2:	6121      	str	r1, [r4, #16]
 8006bf4:	07d8      	lsls	r0, r3, #31
 8006bf6:	d5ea      	bpl.n	8006bce <_printf_float+0x1a6>
 8006bf8:	1c4b      	adds	r3, r1, #1
 8006bfa:	e7e7      	b.n	8006bcc <_printf_float+0x1a4>
 8006bfc:	2900      	cmp	r1, #0
 8006bfe:	bfd4      	ite	le
 8006c00:	f1c1 0202 	rsble	r2, r1, #2
 8006c04:	2201      	movgt	r2, #1
 8006c06:	4413      	add	r3, r2
 8006c08:	e7e0      	b.n	8006bcc <_printf_float+0x1a4>
 8006c0a:	6823      	ldr	r3, [r4, #0]
 8006c0c:	055a      	lsls	r2, r3, #21
 8006c0e:	d407      	bmi.n	8006c20 <_printf_float+0x1f8>
 8006c10:	6923      	ldr	r3, [r4, #16]
 8006c12:	4642      	mov	r2, r8
 8006c14:	4631      	mov	r1, r6
 8006c16:	4628      	mov	r0, r5
 8006c18:	47b8      	blx	r7
 8006c1a:	3001      	adds	r0, #1
 8006c1c:	d12c      	bne.n	8006c78 <_printf_float+0x250>
 8006c1e:	e764      	b.n	8006aea <_printf_float+0xc2>
 8006c20:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006c24:	f240 80e0 	bls.w	8006de8 <_printf_float+0x3c0>
 8006c28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	2300      	movs	r3, #0
 8006c30:	f7f9 ff5a 	bl	8000ae8 <__aeabi_dcmpeq>
 8006c34:	2800      	cmp	r0, #0
 8006c36:	d034      	beq.n	8006ca2 <_printf_float+0x27a>
 8006c38:	4a37      	ldr	r2, [pc, #220]	; (8006d18 <_printf_float+0x2f0>)
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	4631      	mov	r1, r6
 8006c3e:	4628      	mov	r0, r5
 8006c40:	47b8      	blx	r7
 8006c42:	3001      	adds	r0, #1
 8006c44:	f43f af51 	beq.w	8006aea <_printf_float+0xc2>
 8006c48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	db02      	blt.n	8006c56 <_printf_float+0x22e>
 8006c50:	6823      	ldr	r3, [r4, #0]
 8006c52:	07d8      	lsls	r0, r3, #31
 8006c54:	d510      	bpl.n	8006c78 <_printf_float+0x250>
 8006c56:	ee18 3a10 	vmov	r3, s16
 8006c5a:	4652      	mov	r2, sl
 8006c5c:	4631      	mov	r1, r6
 8006c5e:	4628      	mov	r0, r5
 8006c60:	47b8      	blx	r7
 8006c62:	3001      	adds	r0, #1
 8006c64:	f43f af41 	beq.w	8006aea <_printf_float+0xc2>
 8006c68:	f04f 0800 	mov.w	r8, #0
 8006c6c:	f104 091a 	add.w	r9, r4, #26
 8006c70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c72:	3b01      	subs	r3, #1
 8006c74:	4543      	cmp	r3, r8
 8006c76:	dc09      	bgt.n	8006c8c <_printf_float+0x264>
 8006c78:	6823      	ldr	r3, [r4, #0]
 8006c7a:	079b      	lsls	r3, r3, #30
 8006c7c:	f100 8105 	bmi.w	8006e8a <_printf_float+0x462>
 8006c80:	68e0      	ldr	r0, [r4, #12]
 8006c82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c84:	4298      	cmp	r0, r3
 8006c86:	bfb8      	it	lt
 8006c88:	4618      	movlt	r0, r3
 8006c8a:	e730      	b.n	8006aee <_printf_float+0xc6>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	464a      	mov	r2, r9
 8006c90:	4631      	mov	r1, r6
 8006c92:	4628      	mov	r0, r5
 8006c94:	47b8      	blx	r7
 8006c96:	3001      	adds	r0, #1
 8006c98:	f43f af27 	beq.w	8006aea <_printf_float+0xc2>
 8006c9c:	f108 0801 	add.w	r8, r8, #1
 8006ca0:	e7e6      	b.n	8006c70 <_printf_float+0x248>
 8006ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	dc39      	bgt.n	8006d1c <_printf_float+0x2f4>
 8006ca8:	4a1b      	ldr	r2, [pc, #108]	; (8006d18 <_printf_float+0x2f0>)
 8006caa:	2301      	movs	r3, #1
 8006cac:	4631      	mov	r1, r6
 8006cae:	4628      	mov	r0, r5
 8006cb0:	47b8      	blx	r7
 8006cb2:	3001      	adds	r0, #1
 8006cb4:	f43f af19 	beq.w	8006aea <_printf_float+0xc2>
 8006cb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	d102      	bne.n	8006cc6 <_printf_float+0x29e>
 8006cc0:	6823      	ldr	r3, [r4, #0]
 8006cc2:	07d9      	lsls	r1, r3, #31
 8006cc4:	d5d8      	bpl.n	8006c78 <_printf_float+0x250>
 8006cc6:	ee18 3a10 	vmov	r3, s16
 8006cca:	4652      	mov	r2, sl
 8006ccc:	4631      	mov	r1, r6
 8006cce:	4628      	mov	r0, r5
 8006cd0:	47b8      	blx	r7
 8006cd2:	3001      	adds	r0, #1
 8006cd4:	f43f af09 	beq.w	8006aea <_printf_float+0xc2>
 8006cd8:	f04f 0900 	mov.w	r9, #0
 8006cdc:	f104 0a1a 	add.w	sl, r4, #26
 8006ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ce2:	425b      	negs	r3, r3
 8006ce4:	454b      	cmp	r3, r9
 8006ce6:	dc01      	bgt.n	8006cec <_printf_float+0x2c4>
 8006ce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cea:	e792      	b.n	8006c12 <_printf_float+0x1ea>
 8006cec:	2301      	movs	r3, #1
 8006cee:	4652      	mov	r2, sl
 8006cf0:	4631      	mov	r1, r6
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	47b8      	blx	r7
 8006cf6:	3001      	adds	r0, #1
 8006cf8:	f43f aef7 	beq.w	8006aea <_printf_float+0xc2>
 8006cfc:	f109 0901 	add.w	r9, r9, #1
 8006d00:	e7ee      	b.n	8006ce0 <_printf_float+0x2b8>
 8006d02:	bf00      	nop
 8006d04:	7fefffff 	.word	0x7fefffff
 8006d08:	0800bc94 	.word	0x0800bc94
 8006d0c:	0800bc98 	.word	0x0800bc98
 8006d10:	0800bca0 	.word	0x0800bca0
 8006d14:	0800bc9c 	.word	0x0800bc9c
 8006d18:	0800bca4 	.word	0x0800bca4
 8006d1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d20:	429a      	cmp	r2, r3
 8006d22:	bfa8      	it	ge
 8006d24:	461a      	movge	r2, r3
 8006d26:	2a00      	cmp	r2, #0
 8006d28:	4691      	mov	r9, r2
 8006d2a:	dc37      	bgt.n	8006d9c <_printf_float+0x374>
 8006d2c:	f04f 0b00 	mov.w	fp, #0
 8006d30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d34:	f104 021a 	add.w	r2, r4, #26
 8006d38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d3a:	9305      	str	r3, [sp, #20]
 8006d3c:	eba3 0309 	sub.w	r3, r3, r9
 8006d40:	455b      	cmp	r3, fp
 8006d42:	dc33      	bgt.n	8006dac <_printf_float+0x384>
 8006d44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	db3b      	blt.n	8006dc4 <_printf_float+0x39c>
 8006d4c:	6823      	ldr	r3, [r4, #0]
 8006d4e:	07da      	lsls	r2, r3, #31
 8006d50:	d438      	bmi.n	8006dc4 <_printf_float+0x39c>
 8006d52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d54:	9a05      	ldr	r2, [sp, #20]
 8006d56:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d58:	1a9a      	subs	r2, r3, r2
 8006d5a:	eba3 0901 	sub.w	r9, r3, r1
 8006d5e:	4591      	cmp	r9, r2
 8006d60:	bfa8      	it	ge
 8006d62:	4691      	movge	r9, r2
 8006d64:	f1b9 0f00 	cmp.w	r9, #0
 8006d68:	dc35      	bgt.n	8006dd6 <_printf_float+0x3ae>
 8006d6a:	f04f 0800 	mov.w	r8, #0
 8006d6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d72:	f104 0a1a 	add.w	sl, r4, #26
 8006d76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d7a:	1a9b      	subs	r3, r3, r2
 8006d7c:	eba3 0309 	sub.w	r3, r3, r9
 8006d80:	4543      	cmp	r3, r8
 8006d82:	f77f af79 	ble.w	8006c78 <_printf_float+0x250>
 8006d86:	2301      	movs	r3, #1
 8006d88:	4652      	mov	r2, sl
 8006d8a:	4631      	mov	r1, r6
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	47b8      	blx	r7
 8006d90:	3001      	adds	r0, #1
 8006d92:	f43f aeaa 	beq.w	8006aea <_printf_float+0xc2>
 8006d96:	f108 0801 	add.w	r8, r8, #1
 8006d9a:	e7ec      	b.n	8006d76 <_printf_float+0x34e>
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	4631      	mov	r1, r6
 8006da0:	4642      	mov	r2, r8
 8006da2:	4628      	mov	r0, r5
 8006da4:	47b8      	blx	r7
 8006da6:	3001      	adds	r0, #1
 8006da8:	d1c0      	bne.n	8006d2c <_printf_float+0x304>
 8006daa:	e69e      	b.n	8006aea <_printf_float+0xc2>
 8006dac:	2301      	movs	r3, #1
 8006dae:	4631      	mov	r1, r6
 8006db0:	4628      	mov	r0, r5
 8006db2:	9205      	str	r2, [sp, #20]
 8006db4:	47b8      	blx	r7
 8006db6:	3001      	adds	r0, #1
 8006db8:	f43f ae97 	beq.w	8006aea <_printf_float+0xc2>
 8006dbc:	9a05      	ldr	r2, [sp, #20]
 8006dbe:	f10b 0b01 	add.w	fp, fp, #1
 8006dc2:	e7b9      	b.n	8006d38 <_printf_float+0x310>
 8006dc4:	ee18 3a10 	vmov	r3, s16
 8006dc8:	4652      	mov	r2, sl
 8006dca:	4631      	mov	r1, r6
 8006dcc:	4628      	mov	r0, r5
 8006dce:	47b8      	blx	r7
 8006dd0:	3001      	adds	r0, #1
 8006dd2:	d1be      	bne.n	8006d52 <_printf_float+0x32a>
 8006dd4:	e689      	b.n	8006aea <_printf_float+0xc2>
 8006dd6:	9a05      	ldr	r2, [sp, #20]
 8006dd8:	464b      	mov	r3, r9
 8006dda:	4442      	add	r2, r8
 8006ddc:	4631      	mov	r1, r6
 8006dde:	4628      	mov	r0, r5
 8006de0:	47b8      	blx	r7
 8006de2:	3001      	adds	r0, #1
 8006de4:	d1c1      	bne.n	8006d6a <_printf_float+0x342>
 8006de6:	e680      	b.n	8006aea <_printf_float+0xc2>
 8006de8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006dea:	2a01      	cmp	r2, #1
 8006dec:	dc01      	bgt.n	8006df2 <_printf_float+0x3ca>
 8006dee:	07db      	lsls	r3, r3, #31
 8006df0:	d538      	bpl.n	8006e64 <_printf_float+0x43c>
 8006df2:	2301      	movs	r3, #1
 8006df4:	4642      	mov	r2, r8
 8006df6:	4631      	mov	r1, r6
 8006df8:	4628      	mov	r0, r5
 8006dfa:	47b8      	blx	r7
 8006dfc:	3001      	adds	r0, #1
 8006dfe:	f43f ae74 	beq.w	8006aea <_printf_float+0xc2>
 8006e02:	ee18 3a10 	vmov	r3, s16
 8006e06:	4652      	mov	r2, sl
 8006e08:	4631      	mov	r1, r6
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	47b8      	blx	r7
 8006e0e:	3001      	adds	r0, #1
 8006e10:	f43f ae6b 	beq.w	8006aea <_printf_float+0xc2>
 8006e14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e18:	2200      	movs	r2, #0
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	f7f9 fe64 	bl	8000ae8 <__aeabi_dcmpeq>
 8006e20:	b9d8      	cbnz	r0, 8006e5a <_printf_float+0x432>
 8006e22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e24:	f108 0201 	add.w	r2, r8, #1
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	4631      	mov	r1, r6
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	47b8      	blx	r7
 8006e30:	3001      	adds	r0, #1
 8006e32:	d10e      	bne.n	8006e52 <_printf_float+0x42a>
 8006e34:	e659      	b.n	8006aea <_printf_float+0xc2>
 8006e36:	2301      	movs	r3, #1
 8006e38:	4652      	mov	r2, sl
 8006e3a:	4631      	mov	r1, r6
 8006e3c:	4628      	mov	r0, r5
 8006e3e:	47b8      	blx	r7
 8006e40:	3001      	adds	r0, #1
 8006e42:	f43f ae52 	beq.w	8006aea <_printf_float+0xc2>
 8006e46:	f108 0801 	add.w	r8, r8, #1
 8006e4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	4543      	cmp	r3, r8
 8006e50:	dcf1      	bgt.n	8006e36 <_printf_float+0x40e>
 8006e52:	464b      	mov	r3, r9
 8006e54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006e58:	e6dc      	b.n	8006c14 <_printf_float+0x1ec>
 8006e5a:	f04f 0800 	mov.w	r8, #0
 8006e5e:	f104 0a1a 	add.w	sl, r4, #26
 8006e62:	e7f2      	b.n	8006e4a <_printf_float+0x422>
 8006e64:	2301      	movs	r3, #1
 8006e66:	4642      	mov	r2, r8
 8006e68:	e7df      	b.n	8006e2a <_printf_float+0x402>
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	464a      	mov	r2, r9
 8006e6e:	4631      	mov	r1, r6
 8006e70:	4628      	mov	r0, r5
 8006e72:	47b8      	blx	r7
 8006e74:	3001      	adds	r0, #1
 8006e76:	f43f ae38 	beq.w	8006aea <_printf_float+0xc2>
 8006e7a:	f108 0801 	add.w	r8, r8, #1
 8006e7e:	68e3      	ldr	r3, [r4, #12]
 8006e80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e82:	1a5b      	subs	r3, r3, r1
 8006e84:	4543      	cmp	r3, r8
 8006e86:	dcf0      	bgt.n	8006e6a <_printf_float+0x442>
 8006e88:	e6fa      	b.n	8006c80 <_printf_float+0x258>
 8006e8a:	f04f 0800 	mov.w	r8, #0
 8006e8e:	f104 0919 	add.w	r9, r4, #25
 8006e92:	e7f4      	b.n	8006e7e <_printf_float+0x456>

08006e94 <_printf_common>:
 8006e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e98:	4616      	mov	r6, r2
 8006e9a:	4699      	mov	r9, r3
 8006e9c:	688a      	ldr	r2, [r1, #8]
 8006e9e:	690b      	ldr	r3, [r1, #16]
 8006ea0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	bfb8      	it	lt
 8006ea8:	4613      	movlt	r3, r2
 8006eaa:	6033      	str	r3, [r6, #0]
 8006eac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006eb0:	4607      	mov	r7, r0
 8006eb2:	460c      	mov	r4, r1
 8006eb4:	b10a      	cbz	r2, 8006eba <_printf_common+0x26>
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	6033      	str	r3, [r6, #0]
 8006eba:	6823      	ldr	r3, [r4, #0]
 8006ebc:	0699      	lsls	r1, r3, #26
 8006ebe:	bf42      	ittt	mi
 8006ec0:	6833      	ldrmi	r3, [r6, #0]
 8006ec2:	3302      	addmi	r3, #2
 8006ec4:	6033      	strmi	r3, [r6, #0]
 8006ec6:	6825      	ldr	r5, [r4, #0]
 8006ec8:	f015 0506 	ands.w	r5, r5, #6
 8006ecc:	d106      	bne.n	8006edc <_printf_common+0x48>
 8006ece:	f104 0a19 	add.w	sl, r4, #25
 8006ed2:	68e3      	ldr	r3, [r4, #12]
 8006ed4:	6832      	ldr	r2, [r6, #0]
 8006ed6:	1a9b      	subs	r3, r3, r2
 8006ed8:	42ab      	cmp	r3, r5
 8006eda:	dc26      	bgt.n	8006f2a <_printf_common+0x96>
 8006edc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ee0:	1e13      	subs	r3, r2, #0
 8006ee2:	6822      	ldr	r2, [r4, #0]
 8006ee4:	bf18      	it	ne
 8006ee6:	2301      	movne	r3, #1
 8006ee8:	0692      	lsls	r2, r2, #26
 8006eea:	d42b      	bmi.n	8006f44 <_printf_common+0xb0>
 8006eec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ef0:	4649      	mov	r1, r9
 8006ef2:	4638      	mov	r0, r7
 8006ef4:	47c0      	blx	r8
 8006ef6:	3001      	adds	r0, #1
 8006ef8:	d01e      	beq.n	8006f38 <_printf_common+0xa4>
 8006efa:	6823      	ldr	r3, [r4, #0]
 8006efc:	68e5      	ldr	r5, [r4, #12]
 8006efe:	6832      	ldr	r2, [r6, #0]
 8006f00:	f003 0306 	and.w	r3, r3, #6
 8006f04:	2b04      	cmp	r3, #4
 8006f06:	bf08      	it	eq
 8006f08:	1aad      	subeq	r5, r5, r2
 8006f0a:	68a3      	ldr	r3, [r4, #8]
 8006f0c:	6922      	ldr	r2, [r4, #16]
 8006f0e:	bf0c      	ite	eq
 8006f10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f14:	2500      	movne	r5, #0
 8006f16:	4293      	cmp	r3, r2
 8006f18:	bfc4      	itt	gt
 8006f1a:	1a9b      	subgt	r3, r3, r2
 8006f1c:	18ed      	addgt	r5, r5, r3
 8006f1e:	2600      	movs	r6, #0
 8006f20:	341a      	adds	r4, #26
 8006f22:	42b5      	cmp	r5, r6
 8006f24:	d11a      	bne.n	8006f5c <_printf_common+0xc8>
 8006f26:	2000      	movs	r0, #0
 8006f28:	e008      	b.n	8006f3c <_printf_common+0xa8>
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	4652      	mov	r2, sl
 8006f2e:	4649      	mov	r1, r9
 8006f30:	4638      	mov	r0, r7
 8006f32:	47c0      	blx	r8
 8006f34:	3001      	adds	r0, #1
 8006f36:	d103      	bne.n	8006f40 <_printf_common+0xac>
 8006f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f40:	3501      	adds	r5, #1
 8006f42:	e7c6      	b.n	8006ed2 <_printf_common+0x3e>
 8006f44:	18e1      	adds	r1, r4, r3
 8006f46:	1c5a      	adds	r2, r3, #1
 8006f48:	2030      	movs	r0, #48	; 0x30
 8006f4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f4e:	4422      	add	r2, r4
 8006f50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f58:	3302      	adds	r3, #2
 8006f5a:	e7c7      	b.n	8006eec <_printf_common+0x58>
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	4622      	mov	r2, r4
 8006f60:	4649      	mov	r1, r9
 8006f62:	4638      	mov	r0, r7
 8006f64:	47c0      	blx	r8
 8006f66:	3001      	adds	r0, #1
 8006f68:	d0e6      	beq.n	8006f38 <_printf_common+0xa4>
 8006f6a:	3601      	adds	r6, #1
 8006f6c:	e7d9      	b.n	8006f22 <_printf_common+0x8e>
	...

08006f70 <_printf_i>:
 8006f70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f74:	7e0f      	ldrb	r7, [r1, #24]
 8006f76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f78:	2f78      	cmp	r7, #120	; 0x78
 8006f7a:	4691      	mov	r9, r2
 8006f7c:	4680      	mov	r8, r0
 8006f7e:	460c      	mov	r4, r1
 8006f80:	469a      	mov	sl, r3
 8006f82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006f86:	d807      	bhi.n	8006f98 <_printf_i+0x28>
 8006f88:	2f62      	cmp	r7, #98	; 0x62
 8006f8a:	d80a      	bhi.n	8006fa2 <_printf_i+0x32>
 8006f8c:	2f00      	cmp	r7, #0
 8006f8e:	f000 80d8 	beq.w	8007142 <_printf_i+0x1d2>
 8006f92:	2f58      	cmp	r7, #88	; 0x58
 8006f94:	f000 80a3 	beq.w	80070de <_printf_i+0x16e>
 8006f98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006fa0:	e03a      	b.n	8007018 <_printf_i+0xa8>
 8006fa2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006fa6:	2b15      	cmp	r3, #21
 8006fa8:	d8f6      	bhi.n	8006f98 <_printf_i+0x28>
 8006faa:	a101      	add	r1, pc, #4	; (adr r1, 8006fb0 <_printf_i+0x40>)
 8006fac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fb0:	08007009 	.word	0x08007009
 8006fb4:	0800701d 	.word	0x0800701d
 8006fb8:	08006f99 	.word	0x08006f99
 8006fbc:	08006f99 	.word	0x08006f99
 8006fc0:	08006f99 	.word	0x08006f99
 8006fc4:	08006f99 	.word	0x08006f99
 8006fc8:	0800701d 	.word	0x0800701d
 8006fcc:	08006f99 	.word	0x08006f99
 8006fd0:	08006f99 	.word	0x08006f99
 8006fd4:	08006f99 	.word	0x08006f99
 8006fd8:	08006f99 	.word	0x08006f99
 8006fdc:	08007129 	.word	0x08007129
 8006fe0:	0800704d 	.word	0x0800704d
 8006fe4:	0800710b 	.word	0x0800710b
 8006fe8:	08006f99 	.word	0x08006f99
 8006fec:	08006f99 	.word	0x08006f99
 8006ff0:	0800714b 	.word	0x0800714b
 8006ff4:	08006f99 	.word	0x08006f99
 8006ff8:	0800704d 	.word	0x0800704d
 8006ffc:	08006f99 	.word	0x08006f99
 8007000:	08006f99 	.word	0x08006f99
 8007004:	08007113 	.word	0x08007113
 8007008:	682b      	ldr	r3, [r5, #0]
 800700a:	1d1a      	adds	r2, r3, #4
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	602a      	str	r2, [r5, #0]
 8007010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007014:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007018:	2301      	movs	r3, #1
 800701a:	e0a3      	b.n	8007164 <_printf_i+0x1f4>
 800701c:	6820      	ldr	r0, [r4, #0]
 800701e:	6829      	ldr	r1, [r5, #0]
 8007020:	0606      	lsls	r6, r0, #24
 8007022:	f101 0304 	add.w	r3, r1, #4
 8007026:	d50a      	bpl.n	800703e <_printf_i+0xce>
 8007028:	680e      	ldr	r6, [r1, #0]
 800702a:	602b      	str	r3, [r5, #0]
 800702c:	2e00      	cmp	r6, #0
 800702e:	da03      	bge.n	8007038 <_printf_i+0xc8>
 8007030:	232d      	movs	r3, #45	; 0x2d
 8007032:	4276      	negs	r6, r6
 8007034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007038:	485e      	ldr	r0, [pc, #376]	; (80071b4 <_printf_i+0x244>)
 800703a:	230a      	movs	r3, #10
 800703c:	e019      	b.n	8007072 <_printf_i+0x102>
 800703e:	680e      	ldr	r6, [r1, #0]
 8007040:	602b      	str	r3, [r5, #0]
 8007042:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007046:	bf18      	it	ne
 8007048:	b236      	sxthne	r6, r6
 800704a:	e7ef      	b.n	800702c <_printf_i+0xbc>
 800704c:	682b      	ldr	r3, [r5, #0]
 800704e:	6820      	ldr	r0, [r4, #0]
 8007050:	1d19      	adds	r1, r3, #4
 8007052:	6029      	str	r1, [r5, #0]
 8007054:	0601      	lsls	r1, r0, #24
 8007056:	d501      	bpl.n	800705c <_printf_i+0xec>
 8007058:	681e      	ldr	r6, [r3, #0]
 800705a:	e002      	b.n	8007062 <_printf_i+0xf2>
 800705c:	0646      	lsls	r6, r0, #25
 800705e:	d5fb      	bpl.n	8007058 <_printf_i+0xe8>
 8007060:	881e      	ldrh	r6, [r3, #0]
 8007062:	4854      	ldr	r0, [pc, #336]	; (80071b4 <_printf_i+0x244>)
 8007064:	2f6f      	cmp	r7, #111	; 0x6f
 8007066:	bf0c      	ite	eq
 8007068:	2308      	moveq	r3, #8
 800706a:	230a      	movne	r3, #10
 800706c:	2100      	movs	r1, #0
 800706e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007072:	6865      	ldr	r5, [r4, #4]
 8007074:	60a5      	str	r5, [r4, #8]
 8007076:	2d00      	cmp	r5, #0
 8007078:	bfa2      	ittt	ge
 800707a:	6821      	ldrge	r1, [r4, #0]
 800707c:	f021 0104 	bicge.w	r1, r1, #4
 8007080:	6021      	strge	r1, [r4, #0]
 8007082:	b90e      	cbnz	r6, 8007088 <_printf_i+0x118>
 8007084:	2d00      	cmp	r5, #0
 8007086:	d04d      	beq.n	8007124 <_printf_i+0x1b4>
 8007088:	4615      	mov	r5, r2
 800708a:	fbb6 f1f3 	udiv	r1, r6, r3
 800708e:	fb03 6711 	mls	r7, r3, r1, r6
 8007092:	5dc7      	ldrb	r7, [r0, r7]
 8007094:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007098:	4637      	mov	r7, r6
 800709a:	42bb      	cmp	r3, r7
 800709c:	460e      	mov	r6, r1
 800709e:	d9f4      	bls.n	800708a <_printf_i+0x11a>
 80070a0:	2b08      	cmp	r3, #8
 80070a2:	d10b      	bne.n	80070bc <_printf_i+0x14c>
 80070a4:	6823      	ldr	r3, [r4, #0]
 80070a6:	07de      	lsls	r6, r3, #31
 80070a8:	d508      	bpl.n	80070bc <_printf_i+0x14c>
 80070aa:	6923      	ldr	r3, [r4, #16]
 80070ac:	6861      	ldr	r1, [r4, #4]
 80070ae:	4299      	cmp	r1, r3
 80070b0:	bfde      	ittt	le
 80070b2:	2330      	movle	r3, #48	; 0x30
 80070b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80070b8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80070bc:	1b52      	subs	r2, r2, r5
 80070be:	6122      	str	r2, [r4, #16]
 80070c0:	f8cd a000 	str.w	sl, [sp]
 80070c4:	464b      	mov	r3, r9
 80070c6:	aa03      	add	r2, sp, #12
 80070c8:	4621      	mov	r1, r4
 80070ca:	4640      	mov	r0, r8
 80070cc:	f7ff fee2 	bl	8006e94 <_printf_common>
 80070d0:	3001      	adds	r0, #1
 80070d2:	d14c      	bne.n	800716e <_printf_i+0x1fe>
 80070d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070d8:	b004      	add	sp, #16
 80070da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070de:	4835      	ldr	r0, [pc, #212]	; (80071b4 <_printf_i+0x244>)
 80070e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80070e4:	6829      	ldr	r1, [r5, #0]
 80070e6:	6823      	ldr	r3, [r4, #0]
 80070e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80070ec:	6029      	str	r1, [r5, #0]
 80070ee:	061d      	lsls	r5, r3, #24
 80070f0:	d514      	bpl.n	800711c <_printf_i+0x1ac>
 80070f2:	07df      	lsls	r7, r3, #31
 80070f4:	bf44      	itt	mi
 80070f6:	f043 0320 	orrmi.w	r3, r3, #32
 80070fa:	6023      	strmi	r3, [r4, #0]
 80070fc:	b91e      	cbnz	r6, 8007106 <_printf_i+0x196>
 80070fe:	6823      	ldr	r3, [r4, #0]
 8007100:	f023 0320 	bic.w	r3, r3, #32
 8007104:	6023      	str	r3, [r4, #0]
 8007106:	2310      	movs	r3, #16
 8007108:	e7b0      	b.n	800706c <_printf_i+0xfc>
 800710a:	6823      	ldr	r3, [r4, #0]
 800710c:	f043 0320 	orr.w	r3, r3, #32
 8007110:	6023      	str	r3, [r4, #0]
 8007112:	2378      	movs	r3, #120	; 0x78
 8007114:	4828      	ldr	r0, [pc, #160]	; (80071b8 <_printf_i+0x248>)
 8007116:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800711a:	e7e3      	b.n	80070e4 <_printf_i+0x174>
 800711c:	0659      	lsls	r1, r3, #25
 800711e:	bf48      	it	mi
 8007120:	b2b6      	uxthmi	r6, r6
 8007122:	e7e6      	b.n	80070f2 <_printf_i+0x182>
 8007124:	4615      	mov	r5, r2
 8007126:	e7bb      	b.n	80070a0 <_printf_i+0x130>
 8007128:	682b      	ldr	r3, [r5, #0]
 800712a:	6826      	ldr	r6, [r4, #0]
 800712c:	6961      	ldr	r1, [r4, #20]
 800712e:	1d18      	adds	r0, r3, #4
 8007130:	6028      	str	r0, [r5, #0]
 8007132:	0635      	lsls	r5, r6, #24
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	d501      	bpl.n	800713c <_printf_i+0x1cc>
 8007138:	6019      	str	r1, [r3, #0]
 800713a:	e002      	b.n	8007142 <_printf_i+0x1d2>
 800713c:	0670      	lsls	r0, r6, #25
 800713e:	d5fb      	bpl.n	8007138 <_printf_i+0x1c8>
 8007140:	8019      	strh	r1, [r3, #0]
 8007142:	2300      	movs	r3, #0
 8007144:	6123      	str	r3, [r4, #16]
 8007146:	4615      	mov	r5, r2
 8007148:	e7ba      	b.n	80070c0 <_printf_i+0x150>
 800714a:	682b      	ldr	r3, [r5, #0]
 800714c:	1d1a      	adds	r2, r3, #4
 800714e:	602a      	str	r2, [r5, #0]
 8007150:	681d      	ldr	r5, [r3, #0]
 8007152:	6862      	ldr	r2, [r4, #4]
 8007154:	2100      	movs	r1, #0
 8007156:	4628      	mov	r0, r5
 8007158:	f7f9 f852 	bl	8000200 <memchr>
 800715c:	b108      	cbz	r0, 8007162 <_printf_i+0x1f2>
 800715e:	1b40      	subs	r0, r0, r5
 8007160:	6060      	str	r0, [r4, #4]
 8007162:	6863      	ldr	r3, [r4, #4]
 8007164:	6123      	str	r3, [r4, #16]
 8007166:	2300      	movs	r3, #0
 8007168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800716c:	e7a8      	b.n	80070c0 <_printf_i+0x150>
 800716e:	6923      	ldr	r3, [r4, #16]
 8007170:	462a      	mov	r2, r5
 8007172:	4649      	mov	r1, r9
 8007174:	4640      	mov	r0, r8
 8007176:	47d0      	blx	sl
 8007178:	3001      	adds	r0, #1
 800717a:	d0ab      	beq.n	80070d4 <_printf_i+0x164>
 800717c:	6823      	ldr	r3, [r4, #0]
 800717e:	079b      	lsls	r3, r3, #30
 8007180:	d413      	bmi.n	80071aa <_printf_i+0x23a>
 8007182:	68e0      	ldr	r0, [r4, #12]
 8007184:	9b03      	ldr	r3, [sp, #12]
 8007186:	4298      	cmp	r0, r3
 8007188:	bfb8      	it	lt
 800718a:	4618      	movlt	r0, r3
 800718c:	e7a4      	b.n	80070d8 <_printf_i+0x168>
 800718e:	2301      	movs	r3, #1
 8007190:	4632      	mov	r2, r6
 8007192:	4649      	mov	r1, r9
 8007194:	4640      	mov	r0, r8
 8007196:	47d0      	blx	sl
 8007198:	3001      	adds	r0, #1
 800719a:	d09b      	beq.n	80070d4 <_printf_i+0x164>
 800719c:	3501      	adds	r5, #1
 800719e:	68e3      	ldr	r3, [r4, #12]
 80071a0:	9903      	ldr	r1, [sp, #12]
 80071a2:	1a5b      	subs	r3, r3, r1
 80071a4:	42ab      	cmp	r3, r5
 80071a6:	dcf2      	bgt.n	800718e <_printf_i+0x21e>
 80071a8:	e7eb      	b.n	8007182 <_printf_i+0x212>
 80071aa:	2500      	movs	r5, #0
 80071ac:	f104 0619 	add.w	r6, r4, #25
 80071b0:	e7f5      	b.n	800719e <_printf_i+0x22e>
 80071b2:	bf00      	nop
 80071b4:	0800bca6 	.word	0x0800bca6
 80071b8:	0800bcb7 	.word	0x0800bcb7

080071bc <_scanf_float>:
 80071bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c0:	b087      	sub	sp, #28
 80071c2:	4617      	mov	r7, r2
 80071c4:	9303      	str	r3, [sp, #12]
 80071c6:	688b      	ldr	r3, [r1, #8]
 80071c8:	1e5a      	subs	r2, r3, #1
 80071ca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80071ce:	bf83      	ittte	hi
 80071d0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80071d4:	195b      	addhi	r3, r3, r5
 80071d6:	9302      	strhi	r3, [sp, #8]
 80071d8:	2300      	movls	r3, #0
 80071da:	bf86      	itte	hi
 80071dc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80071e0:	608b      	strhi	r3, [r1, #8]
 80071e2:	9302      	strls	r3, [sp, #8]
 80071e4:	680b      	ldr	r3, [r1, #0]
 80071e6:	468b      	mov	fp, r1
 80071e8:	2500      	movs	r5, #0
 80071ea:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80071ee:	f84b 3b1c 	str.w	r3, [fp], #28
 80071f2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80071f6:	4680      	mov	r8, r0
 80071f8:	460c      	mov	r4, r1
 80071fa:	465e      	mov	r6, fp
 80071fc:	46aa      	mov	sl, r5
 80071fe:	46a9      	mov	r9, r5
 8007200:	9501      	str	r5, [sp, #4]
 8007202:	68a2      	ldr	r2, [r4, #8]
 8007204:	b152      	cbz	r2, 800721c <_scanf_float+0x60>
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	2b4e      	cmp	r3, #78	; 0x4e
 800720c:	d864      	bhi.n	80072d8 <_scanf_float+0x11c>
 800720e:	2b40      	cmp	r3, #64	; 0x40
 8007210:	d83c      	bhi.n	800728c <_scanf_float+0xd0>
 8007212:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007216:	b2c8      	uxtb	r0, r1
 8007218:	280e      	cmp	r0, #14
 800721a:	d93a      	bls.n	8007292 <_scanf_float+0xd6>
 800721c:	f1b9 0f00 	cmp.w	r9, #0
 8007220:	d003      	beq.n	800722a <_scanf_float+0x6e>
 8007222:	6823      	ldr	r3, [r4, #0]
 8007224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007228:	6023      	str	r3, [r4, #0]
 800722a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800722e:	f1ba 0f01 	cmp.w	sl, #1
 8007232:	f200 8113 	bhi.w	800745c <_scanf_float+0x2a0>
 8007236:	455e      	cmp	r6, fp
 8007238:	f200 8105 	bhi.w	8007446 <_scanf_float+0x28a>
 800723c:	2501      	movs	r5, #1
 800723e:	4628      	mov	r0, r5
 8007240:	b007      	add	sp, #28
 8007242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007246:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800724a:	2a0d      	cmp	r2, #13
 800724c:	d8e6      	bhi.n	800721c <_scanf_float+0x60>
 800724e:	a101      	add	r1, pc, #4	; (adr r1, 8007254 <_scanf_float+0x98>)
 8007250:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007254:	08007393 	.word	0x08007393
 8007258:	0800721d 	.word	0x0800721d
 800725c:	0800721d 	.word	0x0800721d
 8007260:	0800721d 	.word	0x0800721d
 8007264:	080073f3 	.word	0x080073f3
 8007268:	080073cb 	.word	0x080073cb
 800726c:	0800721d 	.word	0x0800721d
 8007270:	0800721d 	.word	0x0800721d
 8007274:	080073a1 	.word	0x080073a1
 8007278:	0800721d 	.word	0x0800721d
 800727c:	0800721d 	.word	0x0800721d
 8007280:	0800721d 	.word	0x0800721d
 8007284:	0800721d 	.word	0x0800721d
 8007288:	08007359 	.word	0x08007359
 800728c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007290:	e7db      	b.n	800724a <_scanf_float+0x8e>
 8007292:	290e      	cmp	r1, #14
 8007294:	d8c2      	bhi.n	800721c <_scanf_float+0x60>
 8007296:	a001      	add	r0, pc, #4	; (adr r0, 800729c <_scanf_float+0xe0>)
 8007298:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800729c:	0800734b 	.word	0x0800734b
 80072a0:	0800721d 	.word	0x0800721d
 80072a4:	0800734b 	.word	0x0800734b
 80072a8:	080073df 	.word	0x080073df
 80072ac:	0800721d 	.word	0x0800721d
 80072b0:	080072f9 	.word	0x080072f9
 80072b4:	08007335 	.word	0x08007335
 80072b8:	08007335 	.word	0x08007335
 80072bc:	08007335 	.word	0x08007335
 80072c0:	08007335 	.word	0x08007335
 80072c4:	08007335 	.word	0x08007335
 80072c8:	08007335 	.word	0x08007335
 80072cc:	08007335 	.word	0x08007335
 80072d0:	08007335 	.word	0x08007335
 80072d4:	08007335 	.word	0x08007335
 80072d8:	2b6e      	cmp	r3, #110	; 0x6e
 80072da:	d809      	bhi.n	80072f0 <_scanf_float+0x134>
 80072dc:	2b60      	cmp	r3, #96	; 0x60
 80072de:	d8b2      	bhi.n	8007246 <_scanf_float+0x8a>
 80072e0:	2b54      	cmp	r3, #84	; 0x54
 80072e2:	d077      	beq.n	80073d4 <_scanf_float+0x218>
 80072e4:	2b59      	cmp	r3, #89	; 0x59
 80072e6:	d199      	bne.n	800721c <_scanf_float+0x60>
 80072e8:	2d07      	cmp	r5, #7
 80072ea:	d197      	bne.n	800721c <_scanf_float+0x60>
 80072ec:	2508      	movs	r5, #8
 80072ee:	e029      	b.n	8007344 <_scanf_float+0x188>
 80072f0:	2b74      	cmp	r3, #116	; 0x74
 80072f2:	d06f      	beq.n	80073d4 <_scanf_float+0x218>
 80072f4:	2b79      	cmp	r3, #121	; 0x79
 80072f6:	e7f6      	b.n	80072e6 <_scanf_float+0x12a>
 80072f8:	6821      	ldr	r1, [r4, #0]
 80072fa:	05c8      	lsls	r0, r1, #23
 80072fc:	d51a      	bpl.n	8007334 <_scanf_float+0x178>
 80072fe:	9b02      	ldr	r3, [sp, #8]
 8007300:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007304:	6021      	str	r1, [r4, #0]
 8007306:	f109 0901 	add.w	r9, r9, #1
 800730a:	b11b      	cbz	r3, 8007314 <_scanf_float+0x158>
 800730c:	3b01      	subs	r3, #1
 800730e:	3201      	adds	r2, #1
 8007310:	9302      	str	r3, [sp, #8]
 8007312:	60a2      	str	r2, [r4, #8]
 8007314:	68a3      	ldr	r3, [r4, #8]
 8007316:	3b01      	subs	r3, #1
 8007318:	60a3      	str	r3, [r4, #8]
 800731a:	6923      	ldr	r3, [r4, #16]
 800731c:	3301      	adds	r3, #1
 800731e:	6123      	str	r3, [r4, #16]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	3b01      	subs	r3, #1
 8007324:	2b00      	cmp	r3, #0
 8007326:	607b      	str	r3, [r7, #4]
 8007328:	f340 8084 	ble.w	8007434 <_scanf_float+0x278>
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	3301      	adds	r3, #1
 8007330:	603b      	str	r3, [r7, #0]
 8007332:	e766      	b.n	8007202 <_scanf_float+0x46>
 8007334:	eb1a 0f05 	cmn.w	sl, r5
 8007338:	f47f af70 	bne.w	800721c <_scanf_float+0x60>
 800733c:	6822      	ldr	r2, [r4, #0]
 800733e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007342:	6022      	str	r2, [r4, #0]
 8007344:	f806 3b01 	strb.w	r3, [r6], #1
 8007348:	e7e4      	b.n	8007314 <_scanf_float+0x158>
 800734a:	6822      	ldr	r2, [r4, #0]
 800734c:	0610      	lsls	r0, r2, #24
 800734e:	f57f af65 	bpl.w	800721c <_scanf_float+0x60>
 8007352:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007356:	e7f4      	b.n	8007342 <_scanf_float+0x186>
 8007358:	f1ba 0f00 	cmp.w	sl, #0
 800735c:	d10e      	bne.n	800737c <_scanf_float+0x1c0>
 800735e:	f1b9 0f00 	cmp.w	r9, #0
 8007362:	d10e      	bne.n	8007382 <_scanf_float+0x1c6>
 8007364:	6822      	ldr	r2, [r4, #0]
 8007366:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800736a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800736e:	d108      	bne.n	8007382 <_scanf_float+0x1c6>
 8007370:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007374:	6022      	str	r2, [r4, #0]
 8007376:	f04f 0a01 	mov.w	sl, #1
 800737a:	e7e3      	b.n	8007344 <_scanf_float+0x188>
 800737c:	f1ba 0f02 	cmp.w	sl, #2
 8007380:	d055      	beq.n	800742e <_scanf_float+0x272>
 8007382:	2d01      	cmp	r5, #1
 8007384:	d002      	beq.n	800738c <_scanf_float+0x1d0>
 8007386:	2d04      	cmp	r5, #4
 8007388:	f47f af48 	bne.w	800721c <_scanf_float+0x60>
 800738c:	3501      	adds	r5, #1
 800738e:	b2ed      	uxtb	r5, r5
 8007390:	e7d8      	b.n	8007344 <_scanf_float+0x188>
 8007392:	f1ba 0f01 	cmp.w	sl, #1
 8007396:	f47f af41 	bne.w	800721c <_scanf_float+0x60>
 800739a:	f04f 0a02 	mov.w	sl, #2
 800739e:	e7d1      	b.n	8007344 <_scanf_float+0x188>
 80073a0:	b97d      	cbnz	r5, 80073c2 <_scanf_float+0x206>
 80073a2:	f1b9 0f00 	cmp.w	r9, #0
 80073a6:	f47f af3c 	bne.w	8007222 <_scanf_float+0x66>
 80073aa:	6822      	ldr	r2, [r4, #0]
 80073ac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80073b0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80073b4:	f47f af39 	bne.w	800722a <_scanf_float+0x6e>
 80073b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80073bc:	6022      	str	r2, [r4, #0]
 80073be:	2501      	movs	r5, #1
 80073c0:	e7c0      	b.n	8007344 <_scanf_float+0x188>
 80073c2:	2d03      	cmp	r5, #3
 80073c4:	d0e2      	beq.n	800738c <_scanf_float+0x1d0>
 80073c6:	2d05      	cmp	r5, #5
 80073c8:	e7de      	b.n	8007388 <_scanf_float+0x1cc>
 80073ca:	2d02      	cmp	r5, #2
 80073cc:	f47f af26 	bne.w	800721c <_scanf_float+0x60>
 80073d0:	2503      	movs	r5, #3
 80073d2:	e7b7      	b.n	8007344 <_scanf_float+0x188>
 80073d4:	2d06      	cmp	r5, #6
 80073d6:	f47f af21 	bne.w	800721c <_scanf_float+0x60>
 80073da:	2507      	movs	r5, #7
 80073dc:	e7b2      	b.n	8007344 <_scanf_float+0x188>
 80073de:	6822      	ldr	r2, [r4, #0]
 80073e0:	0591      	lsls	r1, r2, #22
 80073e2:	f57f af1b 	bpl.w	800721c <_scanf_float+0x60>
 80073e6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80073ea:	6022      	str	r2, [r4, #0]
 80073ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80073f0:	e7a8      	b.n	8007344 <_scanf_float+0x188>
 80073f2:	6822      	ldr	r2, [r4, #0]
 80073f4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80073f8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80073fc:	d006      	beq.n	800740c <_scanf_float+0x250>
 80073fe:	0550      	lsls	r0, r2, #21
 8007400:	f57f af0c 	bpl.w	800721c <_scanf_float+0x60>
 8007404:	f1b9 0f00 	cmp.w	r9, #0
 8007408:	f43f af0f 	beq.w	800722a <_scanf_float+0x6e>
 800740c:	0591      	lsls	r1, r2, #22
 800740e:	bf58      	it	pl
 8007410:	9901      	ldrpl	r1, [sp, #4]
 8007412:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007416:	bf58      	it	pl
 8007418:	eba9 0101 	subpl.w	r1, r9, r1
 800741c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007420:	bf58      	it	pl
 8007422:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007426:	6022      	str	r2, [r4, #0]
 8007428:	f04f 0900 	mov.w	r9, #0
 800742c:	e78a      	b.n	8007344 <_scanf_float+0x188>
 800742e:	f04f 0a03 	mov.w	sl, #3
 8007432:	e787      	b.n	8007344 <_scanf_float+0x188>
 8007434:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007438:	4639      	mov	r1, r7
 800743a:	4640      	mov	r0, r8
 800743c:	4798      	blx	r3
 800743e:	2800      	cmp	r0, #0
 8007440:	f43f aedf 	beq.w	8007202 <_scanf_float+0x46>
 8007444:	e6ea      	b.n	800721c <_scanf_float+0x60>
 8007446:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800744a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800744e:	463a      	mov	r2, r7
 8007450:	4640      	mov	r0, r8
 8007452:	4798      	blx	r3
 8007454:	6923      	ldr	r3, [r4, #16]
 8007456:	3b01      	subs	r3, #1
 8007458:	6123      	str	r3, [r4, #16]
 800745a:	e6ec      	b.n	8007236 <_scanf_float+0x7a>
 800745c:	1e6b      	subs	r3, r5, #1
 800745e:	2b06      	cmp	r3, #6
 8007460:	d825      	bhi.n	80074ae <_scanf_float+0x2f2>
 8007462:	2d02      	cmp	r5, #2
 8007464:	d836      	bhi.n	80074d4 <_scanf_float+0x318>
 8007466:	455e      	cmp	r6, fp
 8007468:	f67f aee8 	bls.w	800723c <_scanf_float+0x80>
 800746c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007470:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007474:	463a      	mov	r2, r7
 8007476:	4640      	mov	r0, r8
 8007478:	4798      	blx	r3
 800747a:	6923      	ldr	r3, [r4, #16]
 800747c:	3b01      	subs	r3, #1
 800747e:	6123      	str	r3, [r4, #16]
 8007480:	e7f1      	b.n	8007466 <_scanf_float+0x2aa>
 8007482:	9802      	ldr	r0, [sp, #8]
 8007484:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007488:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800748c:	9002      	str	r0, [sp, #8]
 800748e:	463a      	mov	r2, r7
 8007490:	4640      	mov	r0, r8
 8007492:	4798      	blx	r3
 8007494:	6923      	ldr	r3, [r4, #16]
 8007496:	3b01      	subs	r3, #1
 8007498:	6123      	str	r3, [r4, #16]
 800749a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800749e:	fa5f fa8a 	uxtb.w	sl, sl
 80074a2:	f1ba 0f02 	cmp.w	sl, #2
 80074a6:	d1ec      	bne.n	8007482 <_scanf_float+0x2c6>
 80074a8:	3d03      	subs	r5, #3
 80074aa:	b2ed      	uxtb	r5, r5
 80074ac:	1b76      	subs	r6, r6, r5
 80074ae:	6823      	ldr	r3, [r4, #0]
 80074b0:	05da      	lsls	r2, r3, #23
 80074b2:	d52f      	bpl.n	8007514 <_scanf_float+0x358>
 80074b4:	055b      	lsls	r3, r3, #21
 80074b6:	d510      	bpl.n	80074da <_scanf_float+0x31e>
 80074b8:	455e      	cmp	r6, fp
 80074ba:	f67f aebf 	bls.w	800723c <_scanf_float+0x80>
 80074be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80074c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80074c6:	463a      	mov	r2, r7
 80074c8:	4640      	mov	r0, r8
 80074ca:	4798      	blx	r3
 80074cc:	6923      	ldr	r3, [r4, #16]
 80074ce:	3b01      	subs	r3, #1
 80074d0:	6123      	str	r3, [r4, #16]
 80074d2:	e7f1      	b.n	80074b8 <_scanf_float+0x2fc>
 80074d4:	46aa      	mov	sl, r5
 80074d6:	9602      	str	r6, [sp, #8]
 80074d8:	e7df      	b.n	800749a <_scanf_float+0x2de>
 80074da:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80074de:	6923      	ldr	r3, [r4, #16]
 80074e0:	2965      	cmp	r1, #101	; 0x65
 80074e2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80074e6:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80074ea:	6123      	str	r3, [r4, #16]
 80074ec:	d00c      	beq.n	8007508 <_scanf_float+0x34c>
 80074ee:	2945      	cmp	r1, #69	; 0x45
 80074f0:	d00a      	beq.n	8007508 <_scanf_float+0x34c>
 80074f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80074f6:	463a      	mov	r2, r7
 80074f8:	4640      	mov	r0, r8
 80074fa:	4798      	blx	r3
 80074fc:	6923      	ldr	r3, [r4, #16]
 80074fe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007502:	3b01      	subs	r3, #1
 8007504:	1eb5      	subs	r5, r6, #2
 8007506:	6123      	str	r3, [r4, #16]
 8007508:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800750c:	463a      	mov	r2, r7
 800750e:	4640      	mov	r0, r8
 8007510:	4798      	blx	r3
 8007512:	462e      	mov	r6, r5
 8007514:	6825      	ldr	r5, [r4, #0]
 8007516:	f015 0510 	ands.w	r5, r5, #16
 800751a:	d159      	bne.n	80075d0 <_scanf_float+0x414>
 800751c:	7035      	strb	r5, [r6, #0]
 800751e:	6823      	ldr	r3, [r4, #0]
 8007520:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007528:	d11b      	bne.n	8007562 <_scanf_float+0x3a6>
 800752a:	9b01      	ldr	r3, [sp, #4]
 800752c:	454b      	cmp	r3, r9
 800752e:	eba3 0209 	sub.w	r2, r3, r9
 8007532:	d123      	bne.n	800757c <_scanf_float+0x3c0>
 8007534:	2200      	movs	r2, #0
 8007536:	4659      	mov	r1, fp
 8007538:	4640      	mov	r0, r8
 800753a:	f000 ffc7 	bl	80084cc <_strtod_r>
 800753e:	6822      	ldr	r2, [r4, #0]
 8007540:	9b03      	ldr	r3, [sp, #12]
 8007542:	f012 0f02 	tst.w	r2, #2
 8007546:	ec57 6b10 	vmov	r6, r7, d0
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	d021      	beq.n	8007592 <_scanf_float+0x3d6>
 800754e:	9903      	ldr	r1, [sp, #12]
 8007550:	1d1a      	adds	r2, r3, #4
 8007552:	600a      	str	r2, [r1, #0]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	e9c3 6700 	strd	r6, r7, [r3]
 800755a:	68e3      	ldr	r3, [r4, #12]
 800755c:	3301      	adds	r3, #1
 800755e:	60e3      	str	r3, [r4, #12]
 8007560:	e66d      	b.n	800723e <_scanf_float+0x82>
 8007562:	9b04      	ldr	r3, [sp, #16]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d0e5      	beq.n	8007534 <_scanf_float+0x378>
 8007568:	9905      	ldr	r1, [sp, #20]
 800756a:	230a      	movs	r3, #10
 800756c:	462a      	mov	r2, r5
 800756e:	3101      	adds	r1, #1
 8007570:	4640      	mov	r0, r8
 8007572:	f001 f833 	bl	80085dc <_strtol_r>
 8007576:	9b04      	ldr	r3, [sp, #16]
 8007578:	9e05      	ldr	r6, [sp, #20]
 800757a:	1ac2      	subs	r2, r0, r3
 800757c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007580:	429e      	cmp	r6, r3
 8007582:	bf28      	it	cs
 8007584:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007588:	4912      	ldr	r1, [pc, #72]	; (80075d4 <_scanf_float+0x418>)
 800758a:	4630      	mov	r0, r6
 800758c:	f000 f8d6 	bl	800773c <siprintf>
 8007590:	e7d0      	b.n	8007534 <_scanf_float+0x378>
 8007592:	9903      	ldr	r1, [sp, #12]
 8007594:	f012 0f04 	tst.w	r2, #4
 8007598:	f103 0204 	add.w	r2, r3, #4
 800759c:	600a      	str	r2, [r1, #0]
 800759e:	d1d9      	bne.n	8007554 <_scanf_float+0x398>
 80075a0:	f8d3 8000 	ldr.w	r8, [r3]
 80075a4:	ee10 2a10 	vmov	r2, s0
 80075a8:	ee10 0a10 	vmov	r0, s0
 80075ac:	463b      	mov	r3, r7
 80075ae:	4639      	mov	r1, r7
 80075b0:	f7f9 facc 	bl	8000b4c <__aeabi_dcmpun>
 80075b4:	b128      	cbz	r0, 80075c2 <_scanf_float+0x406>
 80075b6:	4808      	ldr	r0, [pc, #32]	; (80075d8 <_scanf_float+0x41c>)
 80075b8:	f000 f886 	bl	80076c8 <nanf>
 80075bc:	ed88 0a00 	vstr	s0, [r8]
 80075c0:	e7cb      	b.n	800755a <_scanf_float+0x39e>
 80075c2:	4630      	mov	r0, r6
 80075c4:	4639      	mov	r1, r7
 80075c6:	f7f9 fb1f 	bl	8000c08 <__aeabi_d2f>
 80075ca:	f8c8 0000 	str.w	r0, [r8]
 80075ce:	e7c4      	b.n	800755a <_scanf_float+0x39e>
 80075d0:	2500      	movs	r5, #0
 80075d2:	e634      	b.n	800723e <_scanf_float+0x82>
 80075d4:	0800bcc8 	.word	0x0800bcc8
 80075d8:	0800c030 	.word	0x0800c030

080075dc <_puts_r>:
 80075dc:	b570      	push	{r4, r5, r6, lr}
 80075de:	460e      	mov	r6, r1
 80075e0:	4605      	mov	r5, r0
 80075e2:	b118      	cbz	r0, 80075ec <_puts_r+0x10>
 80075e4:	6983      	ldr	r3, [r0, #24]
 80075e6:	b90b      	cbnz	r3, 80075ec <_puts_r+0x10>
 80075e8:	f002 f87a 	bl	80096e0 <__sinit>
 80075ec:	69ab      	ldr	r3, [r5, #24]
 80075ee:	68ac      	ldr	r4, [r5, #8]
 80075f0:	b913      	cbnz	r3, 80075f8 <_puts_r+0x1c>
 80075f2:	4628      	mov	r0, r5
 80075f4:	f002 f874 	bl	80096e0 <__sinit>
 80075f8:	4b2c      	ldr	r3, [pc, #176]	; (80076ac <_puts_r+0xd0>)
 80075fa:	429c      	cmp	r4, r3
 80075fc:	d120      	bne.n	8007640 <_puts_r+0x64>
 80075fe:	686c      	ldr	r4, [r5, #4]
 8007600:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007602:	07db      	lsls	r3, r3, #31
 8007604:	d405      	bmi.n	8007612 <_puts_r+0x36>
 8007606:	89a3      	ldrh	r3, [r4, #12]
 8007608:	0598      	lsls	r0, r3, #22
 800760a:	d402      	bmi.n	8007612 <_puts_r+0x36>
 800760c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800760e:	f002 fc78 	bl	8009f02 <__retarget_lock_acquire_recursive>
 8007612:	89a3      	ldrh	r3, [r4, #12]
 8007614:	0719      	lsls	r1, r3, #28
 8007616:	d51d      	bpl.n	8007654 <_puts_r+0x78>
 8007618:	6923      	ldr	r3, [r4, #16]
 800761a:	b1db      	cbz	r3, 8007654 <_puts_r+0x78>
 800761c:	3e01      	subs	r6, #1
 800761e:	68a3      	ldr	r3, [r4, #8]
 8007620:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007624:	3b01      	subs	r3, #1
 8007626:	60a3      	str	r3, [r4, #8]
 8007628:	bb39      	cbnz	r1, 800767a <_puts_r+0x9e>
 800762a:	2b00      	cmp	r3, #0
 800762c:	da38      	bge.n	80076a0 <_puts_r+0xc4>
 800762e:	4622      	mov	r2, r4
 8007630:	210a      	movs	r1, #10
 8007632:	4628      	mov	r0, r5
 8007634:	f000 ffde 	bl	80085f4 <__swbuf_r>
 8007638:	3001      	adds	r0, #1
 800763a:	d011      	beq.n	8007660 <_puts_r+0x84>
 800763c:	250a      	movs	r5, #10
 800763e:	e011      	b.n	8007664 <_puts_r+0x88>
 8007640:	4b1b      	ldr	r3, [pc, #108]	; (80076b0 <_puts_r+0xd4>)
 8007642:	429c      	cmp	r4, r3
 8007644:	d101      	bne.n	800764a <_puts_r+0x6e>
 8007646:	68ac      	ldr	r4, [r5, #8]
 8007648:	e7da      	b.n	8007600 <_puts_r+0x24>
 800764a:	4b1a      	ldr	r3, [pc, #104]	; (80076b4 <_puts_r+0xd8>)
 800764c:	429c      	cmp	r4, r3
 800764e:	bf08      	it	eq
 8007650:	68ec      	ldreq	r4, [r5, #12]
 8007652:	e7d5      	b.n	8007600 <_puts_r+0x24>
 8007654:	4621      	mov	r1, r4
 8007656:	4628      	mov	r0, r5
 8007658:	f001 f830 	bl	80086bc <__swsetup_r>
 800765c:	2800      	cmp	r0, #0
 800765e:	d0dd      	beq.n	800761c <_puts_r+0x40>
 8007660:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007664:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007666:	07da      	lsls	r2, r3, #31
 8007668:	d405      	bmi.n	8007676 <_puts_r+0x9a>
 800766a:	89a3      	ldrh	r3, [r4, #12]
 800766c:	059b      	lsls	r3, r3, #22
 800766e:	d402      	bmi.n	8007676 <_puts_r+0x9a>
 8007670:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007672:	f002 fc47 	bl	8009f04 <__retarget_lock_release_recursive>
 8007676:	4628      	mov	r0, r5
 8007678:	bd70      	pop	{r4, r5, r6, pc}
 800767a:	2b00      	cmp	r3, #0
 800767c:	da04      	bge.n	8007688 <_puts_r+0xac>
 800767e:	69a2      	ldr	r2, [r4, #24]
 8007680:	429a      	cmp	r2, r3
 8007682:	dc06      	bgt.n	8007692 <_puts_r+0xb6>
 8007684:	290a      	cmp	r1, #10
 8007686:	d004      	beq.n	8007692 <_puts_r+0xb6>
 8007688:	6823      	ldr	r3, [r4, #0]
 800768a:	1c5a      	adds	r2, r3, #1
 800768c:	6022      	str	r2, [r4, #0]
 800768e:	7019      	strb	r1, [r3, #0]
 8007690:	e7c5      	b.n	800761e <_puts_r+0x42>
 8007692:	4622      	mov	r2, r4
 8007694:	4628      	mov	r0, r5
 8007696:	f000 ffad 	bl	80085f4 <__swbuf_r>
 800769a:	3001      	adds	r0, #1
 800769c:	d1bf      	bne.n	800761e <_puts_r+0x42>
 800769e:	e7df      	b.n	8007660 <_puts_r+0x84>
 80076a0:	6823      	ldr	r3, [r4, #0]
 80076a2:	250a      	movs	r5, #10
 80076a4:	1c5a      	adds	r2, r3, #1
 80076a6:	6022      	str	r2, [r4, #0]
 80076a8:	701d      	strb	r5, [r3, #0]
 80076aa:	e7db      	b.n	8007664 <_puts_r+0x88>
 80076ac:	0800bdd0 	.word	0x0800bdd0
 80076b0:	0800bdf0 	.word	0x0800bdf0
 80076b4:	0800bdb0 	.word	0x0800bdb0

080076b8 <puts>:
 80076b8:	4b02      	ldr	r3, [pc, #8]	; (80076c4 <puts+0xc>)
 80076ba:	4601      	mov	r1, r0
 80076bc:	6818      	ldr	r0, [r3, #0]
 80076be:	f7ff bf8d 	b.w	80075dc <_puts_r>
 80076c2:	bf00      	nop
 80076c4:	2000003c 	.word	0x2000003c

080076c8 <nanf>:
 80076c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80076d0 <nanf+0x8>
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	7fc00000 	.word	0x7fc00000

080076d4 <sniprintf>:
 80076d4:	b40c      	push	{r2, r3}
 80076d6:	b530      	push	{r4, r5, lr}
 80076d8:	4b17      	ldr	r3, [pc, #92]	; (8007738 <sniprintf+0x64>)
 80076da:	1e0c      	subs	r4, r1, #0
 80076dc:	681d      	ldr	r5, [r3, #0]
 80076de:	b09d      	sub	sp, #116	; 0x74
 80076e0:	da08      	bge.n	80076f4 <sniprintf+0x20>
 80076e2:	238b      	movs	r3, #139	; 0x8b
 80076e4:	602b      	str	r3, [r5, #0]
 80076e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076ea:	b01d      	add	sp, #116	; 0x74
 80076ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076f0:	b002      	add	sp, #8
 80076f2:	4770      	bx	lr
 80076f4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80076f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80076fc:	bf14      	ite	ne
 80076fe:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8007702:	4623      	moveq	r3, r4
 8007704:	9304      	str	r3, [sp, #16]
 8007706:	9307      	str	r3, [sp, #28]
 8007708:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800770c:	9002      	str	r0, [sp, #8]
 800770e:	9006      	str	r0, [sp, #24]
 8007710:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007714:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007716:	ab21      	add	r3, sp, #132	; 0x84
 8007718:	a902      	add	r1, sp, #8
 800771a:	4628      	mov	r0, r5
 800771c:	9301      	str	r3, [sp, #4]
 800771e:	f003 fa99 	bl	800ac54 <_svfiprintf_r>
 8007722:	1c43      	adds	r3, r0, #1
 8007724:	bfbc      	itt	lt
 8007726:	238b      	movlt	r3, #139	; 0x8b
 8007728:	602b      	strlt	r3, [r5, #0]
 800772a:	2c00      	cmp	r4, #0
 800772c:	d0dd      	beq.n	80076ea <sniprintf+0x16>
 800772e:	9b02      	ldr	r3, [sp, #8]
 8007730:	2200      	movs	r2, #0
 8007732:	701a      	strb	r2, [r3, #0]
 8007734:	e7d9      	b.n	80076ea <sniprintf+0x16>
 8007736:	bf00      	nop
 8007738:	2000003c 	.word	0x2000003c

0800773c <siprintf>:
 800773c:	b40e      	push	{r1, r2, r3}
 800773e:	b500      	push	{lr}
 8007740:	b09c      	sub	sp, #112	; 0x70
 8007742:	ab1d      	add	r3, sp, #116	; 0x74
 8007744:	9002      	str	r0, [sp, #8]
 8007746:	9006      	str	r0, [sp, #24]
 8007748:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800774c:	4809      	ldr	r0, [pc, #36]	; (8007774 <siprintf+0x38>)
 800774e:	9107      	str	r1, [sp, #28]
 8007750:	9104      	str	r1, [sp, #16]
 8007752:	4909      	ldr	r1, [pc, #36]	; (8007778 <siprintf+0x3c>)
 8007754:	f853 2b04 	ldr.w	r2, [r3], #4
 8007758:	9105      	str	r1, [sp, #20]
 800775a:	6800      	ldr	r0, [r0, #0]
 800775c:	9301      	str	r3, [sp, #4]
 800775e:	a902      	add	r1, sp, #8
 8007760:	f003 fa78 	bl	800ac54 <_svfiprintf_r>
 8007764:	9b02      	ldr	r3, [sp, #8]
 8007766:	2200      	movs	r2, #0
 8007768:	701a      	strb	r2, [r3, #0]
 800776a:	b01c      	add	sp, #112	; 0x70
 800776c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007770:	b003      	add	sp, #12
 8007772:	4770      	bx	lr
 8007774:	2000003c 	.word	0x2000003c
 8007778:	ffff0208 	.word	0xffff0208

0800777c <__sread>:
 800777c:	b510      	push	{r4, lr}
 800777e:	460c      	mov	r4, r1
 8007780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007784:	f003 fb66 	bl	800ae54 <_read_r>
 8007788:	2800      	cmp	r0, #0
 800778a:	bfab      	itete	ge
 800778c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800778e:	89a3      	ldrhlt	r3, [r4, #12]
 8007790:	181b      	addge	r3, r3, r0
 8007792:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007796:	bfac      	ite	ge
 8007798:	6563      	strge	r3, [r4, #84]	; 0x54
 800779a:	81a3      	strhlt	r3, [r4, #12]
 800779c:	bd10      	pop	{r4, pc}

0800779e <__swrite>:
 800779e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077a2:	461f      	mov	r7, r3
 80077a4:	898b      	ldrh	r3, [r1, #12]
 80077a6:	05db      	lsls	r3, r3, #23
 80077a8:	4605      	mov	r5, r0
 80077aa:	460c      	mov	r4, r1
 80077ac:	4616      	mov	r6, r2
 80077ae:	d505      	bpl.n	80077bc <__swrite+0x1e>
 80077b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077b4:	2302      	movs	r3, #2
 80077b6:	2200      	movs	r2, #0
 80077b8:	f002 fba6 	bl	8009f08 <_lseek_r>
 80077bc:	89a3      	ldrh	r3, [r4, #12]
 80077be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077c6:	81a3      	strh	r3, [r4, #12]
 80077c8:	4632      	mov	r2, r6
 80077ca:	463b      	mov	r3, r7
 80077cc:	4628      	mov	r0, r5
 80077ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077d2:	f000 bf61 	b.w	8008698 <_write_r>

080077d6 <__sseek>:
 80077d6:	b510      	push	{r4, lr}
 80077d8:	460c      	mov	r4, r1
 80077da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077de:	f002 fb93 	bl	8009f08 <_lseek_r>
 80077e2:	1c43      	adds	r3, r0, #1
 80077e4:	89a3      	ldrh	r3, [r4, #12]
 80077e6:	bf15      	itete	ne
 80077e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80077ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80077ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80077f2:	81a3      	strheq	r3, [r4, #12]
 80077f4:	bf18      	it	ne
 80077f6:	81a3      	strhne	r3, [r4, #12]
 80077f8:	bd10      	pop	{r4, pc}

080077fa <__sclose>:
 80077fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077fe:	f000 bfcb 	b.w	8008798 <_close_r>

08007802 <strcpy>:
 8007802:	4603      	mov	r3, r0
 8007804:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007808:	f803 2b01 	strb.w	r2, [r3], #1
 800780c:	2a00      	cmp	r2, #0
 800780e:	d1f9      	bne.n	8007804 <strcpy+0x2>
 8007810:	4770      	bx	lr

08007812 <strcspn>:
 8007812:	b570      	push	{r4, r5, r6, lr}
 8007814:	4603      	mov	r3, r0
 8007816:	461e      	mov	r6, r3
 8007818:	f813 4b01 	ldrb.w	r4, [r3], #1
 800781c:	b144      	cbz	r4, 8007830 <strcspn+0x1e>
 800781e:	1e4a      	subs	r2, r1, #1
 8007820:	e001      	b.n	8007826 <strcspn+0x14>
 8007822:	42a5      	cmp	r5, r4
 8007824:	d004      	beq.n	8007830 <strcspn+0x1e>
 8007826:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800782a:	2d00      	cmp	r5, #0
 800782c:	d1f9      	bne.n	8007822 <strcspn+0x10>
 800782e:	e7f2      	b.n	8007816 <strcspn+0x4>
 8007830:	1a30      	subs	r0, r6, r0
 8007832:	bd70      	pop	{r4, r5, r6, pc}

08007834 <strncmp>:
 8007834:	b510      	push	{r4, lr}
 8007836:	b17a      	cbz	r2, 8007858 <strncmp+0x24>
 8007838:	4603      	mov	r3, r0
 800783a:	3901      	subs	r1, #1
 800783c:	1884      	adds	r4, r0, r2
 800783e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007842:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007846:	4290      	cmp	r0, r2
 8007848:	d101      	bne.n	800784e <strncmp+0x1a>
 800784a:	42a3      	cmp	r3, r4
 800784c:	d101      	bne.n	8007852 <strncmp+0x1e>
 800784e:	1a80      	subs	r0, r0, r2
 8007850:	bd10      	pop	{r4, pc}
 8007852:	2800      	cmp	r0, #0
 8007854:	d1f3      	bne.n	800783e <strncmp+0xa>
 8007856:	e7fa      	b.n	800784e <strncmp+0x1a>
 8007858:	4610      	mov	r0, r2
 800785a:	e7f9      	b.n	8007850 <strncmp+0x1c>

0800785c <strncpy>:
 800785c:	b510      	push	{r4, lr}
 800785e:	3901      	subs	r1, #1
 8007860:	4603      	mov	r3, r0
 8007862:	b132      	cbz	r2, 8007872 <strncpy+0x16>
 8007864:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007868:	f803 4b01 	strb.w	r4, [r3], #1
 800786c:	3a01      	subs	r2, #1
 800786e:	2c00      	cmp	r4, #0
 8007870:	d1f7      	bne.n	8007862 <strncpy+0x6>
 8007872:	441a      	add	r2, r3
 8007874:	2100      	movs	r1, #0
 8007876:	4293      	cmp	r3, r2
 8007878:	d100      	bne.n	800787c <strncpy+0x20>
 800787a:	bd10      	pop	{r4, pc}
 800787c:	f803 1b01 	strb.w	r1, [r3], #1
 8007880:	e7f9      	b.n	8007876 <strncpy+0x1a>

08007882 <sulp>:
 8007882:	b570      	push	{r4, r5, r6, lr}
 8007884:	4604      	mov	r4, r0
 8007886:	460d      	mov	r5, r1
 8007888:	ec45 4b10 	vmov	d0, r4, r5
 800788c:	4616      	mov	r6, r2
 800788e:	f002 ff3f 	bl	800a710 <__ulp>
 8007892:	ec51 0b10 	vmov	r0, r1, d0
 8007896:	b17e      	cbz	r6, 80078b8 <sulp+0x36>
 8007898:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800789c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	dd09      	ble.n	80078b8 <sulp+0x36>
 80078a4:	051b      	lsls	r3, r3, #20
 80078a6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80078aa:	2400      	movs	r4, #0
 80078ac:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80078b0:	4622      	mov	r2, r4
 80078b2:	462b      	mov	r3, r5
 80078b4:	f7f8 feb0 	bl	8000618 <__aeabi_dmul>
 80078b8:	bd70      	pop	{r4, r5, r6, pc}
 80078ba:	0000      	movs	r0, r0
 80078bc:	0000      	movs	r0, r0
	...

080078c0 <_strtod_l>:
 80078c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c4:	ed2d 8b02 	vpush	{d8}
 80078c8:	b09d      	sub	sp, #116	; 0x74
 80078ca:	461f      	mov	r7, r3
 80078cc:	2300      	movs	r3, #0
 80078ce:	9318      	str	r3, [sp, #96]	; 0x60
 80078d0:	4ba2      	ldr	r3, [pc, #648]	; (8007b5c <_strtod_l+0x29c>)
 80078d2:	9213      	str	r2, [sp, #76]	; 0x4c
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	9305      	str	r3, [sp, #20]
 80078d8:	4604      	mov	r4, r0
 80078da:	4618      	mov	r0, r3
 80078dc:	4688      	mov	r8, r1
 80078de:	f7f8 fc87 	bl	80001f0 <strlen>
 80078e2:	f04f 0a00 	mov.w	sl, #0
 80078e6:	4605      	mov	r5, r0
 80078e8:	f04f 0b00 	mov.w	fp, #0
 80078ec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80078f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078f2:	781a      	ldrb	r2, [r3, #0]
 80078f4:	2a2b      	cmp	r2, #43	; 0x2b
 80078f6:	d04e      	beq.n	8007996 <_strtod_l+0xd6>
 80078f8:	d83b      	bhi.n	8007972 <_strtod_l+0xb2>
 80078fa:	2a0d      	cmp	r2, #13
 80078fc:	d834      	bhi.n	8007968 <_strtod_l+0xa8>
 80078fe:	2a08      	cmp	r2, #8
 8007900:	d834      	bhi.n	800796c <_strtod_l+0xac>
 8007902:	2a00      	cmp	r2, #0
 8007904:	d03e      	beq.n	8007984 <_strtod_l+0xc4>
 8007906:	2300      	movs	r3, #0
 8007908:	930a      	str	r3, [sp, #40]	; 0x28
 800790a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800790c:	7833      	ldrb	r3, [r6, #0]
 800790e:	2b30      	cmp	r3, #48	; 0x30
 8007910:	f040 80b0 	bne.w	8007a74 <_strtod_l+0x1b4>
 8007914:	7873      	ldrb	r3, [r6, #1]
 8007916:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800791a:	2b58      	cmp	r3, #88	; 0x58
 800791c:	d168      	bne.n	80079f0 <_strtod_l+0x130>
 800791e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007920:	9301      	str	r3, [sp, #4]
 8007922:	ab18      	add	r3, sp, #96	; 0x60
 8007924:	9702      	str	r7, [sp, #8]
 8007926:	9300      	str	r3, [sp, #0]
 8007928:	4a8d      	ldr	r2, [pc, #564]	; (8007b60 <_strtod_l+0x2a0>)
 800792a:	ab19      	add	r3, sp, #100	; 0x64
 800792c:	a917      	add	r1, sp, #92	; 0x5c
 800792e:	4620      	mov	r0, r4
 8007930:	f001 ffda 	bl	80098e8 <__gethex>
 8007934:	f010 0707 	ands.w	r7, r0, #7
 8007938:	4605      	mov	r5, r0
 800793a:	d005      	beq.n	8007948 <_strtod_l+0x88>
 800793c:	2f06      	cmp	r7, #6
 800793e:	d12c      	bne.n	800799a <_strtod_l+0xda>
 8007940:	3601      	adds	r6, #1
 8007942:	2300      	movs	r3, #0
 8007944:	9617      	str	r6, [sp, #92]	; 0x5c
 8007946:	930a      	str	r3, [sp, #40]	; 0x28
 8007948:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800794a:	2b00      	cmp	r3, #0
 800794c:	f040 8590 	bne.w	8008470 <_strtod_l+0xbb0>
 8007950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007952:	b1eb      	cbz	r3, 8007990 <_strtod_l+0xd0>
 8007954:	4652      	mov	r2, sl
 8007956:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800795a:	ec43 2b10 	vmov	d0, r2, r3
 800795e:	b01d      	add	sp, #116	; 0x74
 8007960:	ecbd 8b02 	vpop	{d8}
 8007964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007968:	2a20      	cmp	r2, #32
 800796a:	d1cc      	bne.n	8007906 <_strtod_l+0x46>
 800796c:	3301      	adds	r3, #1
 800796e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007970:	e7be      	b.n	80078f0 <_strtod_l+0x30>
 8007972:	2a2d      	cmp	r2, #45	; 0x2d
 8007974:	d1c7      	bne.n	8007906 <_strtod_l+0x46>
 8007976:	2201      	movs	r2, #1
 8007978:	920a      	str	r2, [sp, #40]	; 0x28
 800797a:	1c5a      	adds	r2, r3, #1
 800797c:	9217      	str	r2, [sp, #92]	; 0x5c
 800797e:	785b      	ldrb	r3, [r3, #1]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d1c2      	bne.n	800790a <_strtod_l+0x4a>
 8007984:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007986:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800798a:	2b00      	cmp	r3, #0
 800798c:	f040 856e 	bne.w	800846c <_strtod_l+0xbac>
 8007990:	4652      	mov	r2, sl
 8007992:	465b      	mov	r3, fp
 8007994:	e7e1      	b.n	800795a <_strtod_l+0x9a>
 8007996:	2200      	movs	r2, #0
 8007998:	e7ee      	b.n	8007978 <_strtod_l+0xb8>
 800799a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800799c:	b13a      	cbz	r2, 80079ae <_strtod_l+0xee>
 800799e:	2135      	movs	r1, #53	; 0x35
 80079a0:	a81a      	add	r0, sp, #104	; 0x68
 80079a2:	f002 ffc0 	bl	800a926 <__copybits>
 80079a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80079a8:	4620      	mov	r0, r4
 80079aa:	f002 fb7f 	bl	800a0ac <_Bfree>
 80079ae:	3f01      	subs	r7, #1
 80079b0:	2f04      	cmp	r7, #4
 80079b2:	d806      	bhi.n	80079c2 <_strtod_l+0x102>
 80079b4:	e8df f007 	tbb	[pc, r7]
 80079b8:	1714030a 	.word	0x1714030a
 80079bc:	0a          	.byte	0x0a
 80079bd:	00          	.byte	0x00
 80079be:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80079c2:	0728      	lsls	r0, r5, #28
 80079c4:	d5c0      	bpl.n	8007948 <_strtod_l+0x88>
 80079c6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80079ca:	e7bd      	b.n	8007948 <_strtod_l+0x88>
 80079cc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80079d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80079d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80079d6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80079da:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80079de:	e7f0      	b.n	80079c2 <_strtod_l+0x102>
 80079e0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007b64 <_strtod_l+0x2a4>
 80079e4:	e7ed      	b.n	80079c2 <_strtod_l+0x102>
 80079e6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80079ea:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80079ee:	e7e8      	b.n	80079c2 <_strtod_l+0x102>
 80079f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80079f2:	1c5a      	adds	r2, r3, #1
 80079f4:	9217      	str	r2, [sp, #92]	; 0x5c
 80079f6:	785b      	ldrb	r3, [r3, #1]
 80079f8:	2b30      	cmp	r3, #48	; 0x30
 80079fa:	d0f9      	beq.n	80079f0 <_strtod_l+0x130>
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d0a3      	beq.n	8007948 <_strtod_l+0x88>
 8007a00:	2301      	movs	r3, #1
 8007a02:	f04f 0900 	mov.w	r9, #0
 8007a06:	9304      	str	r3, [sp, #16]
 8007a08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a0a:	9308      	str	r3, [sp, #32]
 8007a0c:	f8cd 901c 	str.w	r9, [sp, #28]
 8007a10:	464f      	mov	r7, r9
 8007a12:	220a      	movs	r2, #10
 8007a14:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007a16:	7806      	ldrb	r6, [r0, #0]
 8007a18:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007a1c:	b2d9      	uxtb	r1, r3
 8007a1e:	2909      	cmp	r1, #9
 8007a20:	d92a      	bls.n	8007a78 <_strtod_l+0x1b8>
 8007a22:	9905      	ldr	r1, [sp, #20]
 8007a24:	462a      	mov	r2, r5
 8007a26:	f7ff ff05 	bl	8007834 <strncmp>
 8007a2a:	b398      	cbz	r0, 8007a94 <_strtod_l+0x1d4>
 8007a2c:	2000      	movs	r0, #0
 8007a2e:	4632      	mov	r2, r6
 8007a30:	463d      	mov	r5, r7
 8007a32:	9005      	str	r0, [sp, #20]
 8007a34:	4603      	mov	r3, r0
 8007a36:	2a65      	cmp	r2, #101	; 0x65
 8007a38:	d001      	beq.n	8007a3e <_strtod_l+0x17e>
 8007a3a:	2a45      	cmp	r2, #69	; 0x45
 8007a3c:	d118      	bne.n	8007a70 <_strtod_l+0x1b0>
 8007a3e:	b91d      	cbnz	r5, 8007a48 <_strtod_l+0x188>
 8007a40:	9a04      	ldr	r2, [sp, #16]
 8007a42:	4302      	orrs	r2, r0
 8007a44:	d09e      	beq.n	8007984 <_strtod_l+0xc4>
 8007a46:	2500      	movs	r5, #0
 8007a48:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007a4c:	f108 0201 	add.w	r2, r8, #1
 8007a50:	9217      	str	r2, [sp, #92]	; 0x5c
 8007a52:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007a56:	2a2b      	cmp	r2, #43	; 0x2b
 8007a58:	d075      	beq.n	8007b46 <_strtod_l+0x286>
 8007a5a:	2a2d      	cmp	r2, #45	; 0x2d
 8007a5c:	d07b      	beq.n	8007b56 <_strtod_l+0x296>
 8007a5e:	f04f 0c00 	mov.w	ip, #0
 8007a62:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007a66:	2909      	cmp	r1, #9
 8007a68:	f240 8082 	bls.w	8007b70 <_strtod_l+0x2b0>
 8007a6c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007a70:	2600      	movs	r6, #0
 8007a72:	e09d      	b.n	8007bb0 <_strtod_l+0x2f0>
 8007a74:	2300      	movs	r3, #0
 8007a76:	e7c4      	b.n	8007a02 <_strtod_l+0x142>
 8007a78:	2f08      	cmp	r7, #8
 8007a7a:	bfd8      	it	le
 8007a7c:	9907      	ldrle	r1, [sp, #28]
 8007a7e:	f100 0001 	add.w	r0, r0, #1
 8007a82:	bfda      	itte	le
 8007a84:	fb02 3301 	mlale	r3, r2, r1, r3
 8007a88:	9307      	strle	r3, [sp, #28]
 8007a8a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007a8e:	3701      	adds	r7, #1
 8007a90:	9017      	str	r0, [sp, #92]	; 0x5c
 8007a92:	e7bf      	b.n	8007a14 <_strtod_l+0x154>
 8007a94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a96:	195a      	adds	r2, r3, r5
 8007a98:	9217      	str	r2, [sp, #92]	; 0x5c
 8007a9a:	5d5a      	ldrb	r2, [r3, r5]
 8007a9c:	2f00      	cmp	r7, #0
 8007a9e:	d037      	beq.n	8007b10 <_strtod_l+0x250>
 8007aa0:	9005      	str	r0, [sp, #20]
 8007aa2:	463d      	mov	r5, r7
 8007aa4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007aa8:	2b09      	cmp	r3, #9
 8007aaa:	d912      	bls.n	8007ad2 <_strtod_l+0x212>
 8007aac:	2301      	movs	r3, #1
 8007aae:	e7c2      	b.n	8007a36 <_strtod_l+0x176>
 8007ab0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ab2:	1c5a      	adds	r2, r3, #1
 8007ab4:	9217      	str	r2, [sp, #92]	; 0x5c
 8007ab6:	785a      	ldrb	r2, [r3, #1]
 8007ab8:	3001      	adds	r0, #1
 8007aba:	2a30      	cmp	r2, #48	; 0x30
 8007abc:	d0f8      	beq.n	8007ab0 <_strtod_l+0x1f0>
 8007abe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007ac2:	2b08      	cmp	r3, #8
 8007ac4:	f200 84d9 	bhi.w	800847a <_strtod_l+0xbba>
 8007ac8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007aca:	9005      	str	r0, [sp, #20]
 8007acc:	2000      	movs	r0, #0
 8007ace:	9308      	str	r3, [sp, #32]
 8007ad0:	4605      	mov	r5, r0
 8007ad2:	3a30      	subs	r2, #48	; 0x30
 8007ad4:	f100 0301 	add.w	r3, r0, #1
 8007ad8:	d014      	beq.n	8007b04 <_strtod_l+0x244>
 8007ada:	9905      	ldr	r1, [sp, #20]
 8007adc:	4419      	add	r1, r3
 8007ade:	9105      	str	r1, [sp, #20]
 8007ae0:	462b      	mov	r3, r5
 8007ae2:	eb00 0e05 	add.w	lr, r0, r5
 8007ae6:	210a      	movs	r1, #10
 8007ae8:	4573      	cmp	r3, lr
 8007aea:	d113      	bne.n	8007b14 <_strtod_l+0x254>
 8007aec:	182b      	adds	r3, r5, r0
 8007aee:	2b08      	cmp	r3, #8
 8007af0:	f105 0501 	add.w	r5, r5, #1
 8007af4:	4405      	add	r5, r0
 8007af6:	dc1c      	bgt.n	8007b32 <_strtod_l+0x272>
 8007af8:	9907      	ldr	r1, [sp, #28]
 8007afa:	230a      	movs	r3, #10
 8007afc:	fb03 2301 	mla	r3, r3, r1, r2
 8007b00:	9307      	str	r3, [sp, #28]
 8007b02:	2300      	movs	r3, #0
 8007b04:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007b06:	1c51      	adds	r1, r2, #1
 8007b08:	9117      	str	r1, [sp, #92]	; 0x5c
 8007b0a:	7852      	ldrb	r2, [r2, #1]
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	e7c9      	b.n	8007aa4 <_strtod_l+0x1e4>
 8007b10:	4638      	mov	r0, r7
 8007b12:	e7d2      	b.n	8007aba <_strtod_l+0x1fa>
 8007b14:	2b08      	cmp	r3, #8
 8007b16:	dc04      	bgt.n	8007b22 <_strtod_l+0x262>
 8007b18:	9e07      	ldr	r6, [sp, #28]
 8007b1a:	434e      	muls	r6, r1
 8007b1c:	9607      	str	r6, [sp, #28]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	e7e2      	b.n	8007ae8 <_strtod_l+0x228>
 8007b22:	f103 0c01 	add.w	ip, r3, #1
 8007b26:	f1bc 0f10 	cmp.w	ip, #16
 8007b2a:	bfd8      	it	le
 8007b2c:	fb01 f909 	mulle.w	r9, r1, r9
 8007b30:	e7f5      	b.n	8007b1e <_strtod_l+0x25e>
 8007b32:	2d10      	cmp	r5, #16
 8007b34:	bfdc      	itt	le
 8007b36:	230a      	movle	r3, #10
 8007b38:	fb03 2909 	mlale	r9, r3, r9, r2
 8007b3c:	e7e1      	b.n	8007b02 <_strtod_l+0x242>
 8007b3e:	2300      	movs	r3, #0
 8007b40:	9305      	str	r3, [sp, #20]
 8007b42:	2301      	movs	r3, #1
 8007b44:	e77c      	b.n	8007a40 <_strtod_l+0x180>
 8007b46:	f04f 0c00 	mov.w	ip, #0
 8007b4a:	f108 0202 	add.w	r2, r8, #2
 8007b4e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007b50:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007b54:	e785      	b.n	8007a62 <_strtod_l+0x1a2>
 8007b56:	f04f 0c01 	mov.w	ip, #1
 8007b5a:	e7f6      	b.n	8007b4a <_strtod_l+0x28a>
 8007b5c:	0800be78 	.word	0x0800be78
 8007b60:	0800bcd0 	.word	0x0800bcd0
 8007b64:	7ff00000 	.word	0x7ff00000
 8007b68:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007b6a:	1c51      	adds	r1, r2, #1
 8007b6c:	9117      	str	r1, [sp, #92]	; 0x5c
 8007b6e:	7852      	ldrb	r2, [r2, #1]
 8007b70:	2a30      	cmp	r2, #48	; 0x30
 8007b72:	d0f9      	beq.n	8007b68 <_strtod_l+0x2a8>
 8007b74:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007b78:	2908      	cmp	r1, #8
 8007b7a:	f63f af79 	bhi.w	8007a70 <_strtod_l+0x1b0>
 8007b7e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007b82:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007b84:	9206      	str	r2, [sp, #24]
 8007b86:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007b88:	1c51      	adds	r1, r2, #1
 8007b8a:	9117      	str	r1, [sp, #92]	; 0x5c
 8007b8c:	7852      	ldrb	r2, [r2, #1]
 8007b8e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007b92:	2e09      	cmp	r6, #9
 8007b94:	d937      	bls.n	8007c06 <_strtod_l+0x346>
 8007b96:	9e06      	ldr	r6, [sp, #24]
 8007b98:	1b89      	subs	r1, r1, r6
 8007b9a:	2908      	cmp	r1, #8
 8007b9c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007ba0:	dc02      	bgt.n	8007ba8 <_strtod_l+0x2e8>
 8007ba2:	4576      	cmp	r6, lr
 8007ba4:	bfa8      	it	ge
 8007ba6:	4676      	movge	r6, lr
 8007ba8:	f1bc 0f00 	cmp.w	ip, #0
 8007bac:	d000      	beq.n	8007bb0 <_strtod_l+0x2f0>
 8007bae:	4276      	negs	r6, r6
 8007bb0:	2d00      	cmp	r5, #0
 8007bb2:	d14d      	bne.n	8007c50 <_strtod_l+0x390>
 8007bb4:	9904      	ldr	r1, [sp, #16]
 8007bb6:	4301      	orrs	r1, r0
 8007bb8:	f47f aec6 	bne.w	8007948 <_strtod_l+0x88>
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f47f aee1 	bne.w	8007984 <_strtod_l+0xc4>
 8007bc2:	2a69      	cmp	r2, #105	; 0x69
 8007bc4:	d027      	beq.n	8007c16 <_strtod_l+0x356>
 8007bc6:	dc24      	bgt.n	8007c12 <_strtod_l+0x352>
 8007bc8:	2a49      	cmp	r2, #73	; 0x49
 8007bca:	d024      	beq.n	8007c16 <_strtod_l+0x356>
 8007bcc:	2a4e      	cmp	r2, #78	; 0x4e
 8007bce:	f47f aed9 	bne.w	8007984 <_strtod_l+0xc4>
 8007bd2:	499f      	ldr	r1, [pc, #636]	; (8007e50 <_strtod_l+0x590>)
 8007bd4:	a817      	add	r0, sp, #92	; 0x5c
 8007bd6:	f002 f8df 	bl	8009d98 <__match>
 8007bda:	2800      	cmp	r0, #0
 8007bdc:	f43f aed2 	beq.w	8007984 <_strtod_l+0xc4>
 8007be0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	2b28      	cmp	r3, #40	; 0x28
 8007be6:	d12d      	bne.n	8007c44 <_strtod_l+0x384>
 8007be8:	499a      	ldr	r1, [pc, #616]	; (8007e54 <_strtod_l+0x594>)
 8007bea:	aa1a      	add	r2, sp, #104	; 0x68
 8007bec:	a817      	add	r0, sp, #92	; 0x5c
 8007bee:	f002 f8e7 	bl	8009dc0 <__hexnan>
 8007bf2:	2805      	cmp	r0, #5
 8007bf4:	d126      	bne.n	8007c44 <_strtod_l+0x384>
 8007bf6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007bf8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007bfc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007c00:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007c04:	e6a0      	b.n	8007948 <_strtod_l+0x88>
 8007c06:	210a      	movs	r1, #10
 8007c08:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007c0c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007c10:	e7b9      	b.n	8007b86 <_strtod_l+0x2c6>
 8007c12:	2a6e      	cmp	r2, #110	; 0x6e
 8007c14:	e7db      	b.n	8007bce <_strtod_l+0x30e>
 8007c16:	4990      	ldr	r1, [pc, #576]	; (8007e58 <_strtod_l+0x598>)
 8007c18:	a817      	add	r0, sp, #92	; 0x5c
 8007c1a:	f002 f8bd 	bl	8009d98 <__match>
 8007c1e:	2800      	cmp	r0, #0
 8007c20:	f43f aeb0 	beq.w	8007984 <_strtod_l+0xc4>
 8007c24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c26:	498d      	ldr	r1, [pc, #564]	; (8007e5c <_strtod_l+0x59c>)
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	a817      	add	r0, sp, #92	; 0x5c
 8007c2c:	9317      	str	r3, [sp, #92]	; 0x5c
 8007c2e:	f002 f8b3 	bl	8009d98 <__match>
 8007c32:	b910      	cbnz	r0, 8007c3a <_strtod_l+0x37a>
 8007c34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c36:	3301      	adds	r3, #1
 8007c38:	9317      	str	r3, [sp, #92]	; 0x5c
 8007c3a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007e6c <_strtod_l+0x5ac>
 8007c3e:	f04f 0a00 	mov.w	sl, #0
 8007c42:	e681      	b.n	8007948 <_strtod_l+0x88>
 8007c44:	4886      	ldr	r0, [pc, #536]	; (8007e60 <_strtod_l+0x5a0>)
 8007c46:	f003 f917 	bl	800ae78 <nan>
 8007c4a:	ec5b ab10 	vmov	sl, fp, d0
 8007c4e:	e67b      	b.n	8007948 <_strtod_l+0x88>
 8007c50:	9b05      	ldr	r3, [sp, #20]
 8007c52:	9807      	ldr	r0, [sp, #28]
 8007c54:	1af3      	subs	r3, r6, r3
 8007c56:	2f00      	cmp	r7, #0
 8007c58:	bf08      	it	eq
 8007c5a:	462f      	moveq	r7, r5
 8007c5c:	2d10      	cmp	r5, #16
 8007c5e:	9306      	str	r3, [sp, #24]
 8007c60:	46a8      	mov	r8, r5
 8007c62:	bfa8      	it	ge
 8007c64:	f04f 0810 	movge.w	r8, #16
 8007c68:	f7f8 fc5c 	bl	8000524 <__aeabi_ui2d>
 8007c6c:	2d09      	cmp	r5, #9
 8007c6e:	4682      	mov	sl, r0
 8007c70:	468b      	mov	fp, r1
 8007c72:	dd13      	ble.n	8007c9c <_strtod_l+0x3dc>
 8007c74:	4b7b      	ldr	r3, [pc, #492]	; (8007e64 <_strtod_l+0x5a4>)
 8007c76:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007c7a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007c7e:	f7f8 fccb 	bl	8000618 <__aeabi_dmul>
 8007c82:	4682      	mov	sl, r0
 8007c84:	4648      	mov	r0, r9
 8007c86:	468b      	mov	fp, r1
 8007c88:	f7f8 fc4c 	bl	8000524 <__aeabi_ui2d>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	460b      	mov	r3, r1
 8007c90:	4650      	mov	r0, sl
 8007c92:	4659      	mov	r1, fp
 8007c94:	f7f8 fb0a 	bl	80002ac <__adddf3>
 8007c98:	4682      	mov	sl, r0
 8007c9a:	468b      	mov	fp, r1
 8007c9c:	2d0f      	cmp	r5, #15
 8007c9e:	dc38      	bgt.n	8007d12 <_strtod_l+0x452>
 8007ca0:	9b06      	ldr	r3, [sp, #24]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	f43f ae50 	beq.w	8007948 <_strtod_l+0x88>
 8007ca8:	dd24      	ble.n	8007cf4 <_strtod_l+0x434>
 8007caa:	2b16      	cmp	r3, #22
 8007cac:	dc0b      	bgt.n	8007cc6 <_strtod_l+0x406>
 8007cae:	496d      	ldr	r1, [pc, #436]	; (8007e64 <_strtod_l+0x5a4>)
 8007cb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007cb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cb8:	4652      	mov	r2, sl
 8007cba:	465b      	mov	r3, fp
 8007cbc:	f7f8 fcac 	bl	8000618 <__aeabi_dmul>
 8007cc0:	4682      	mov	sl, r0
 8007cc2:	468b      	mov	fp, r1
 8007cc4:	e640      	b.n	8007948 <_strtod_l+0x88>
 8007cc6:	9a06      	ldr	r2, [sp, #24]
 8007cc8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	db20      	blt.n	8007d12 <_strtod_l+0x452>
 8007cd0:	4c64      	ldr	r4, [pc, #400]	; (8007e64 <_strtod_l+0x5a4>)
 8007cd2:	f1c5 050f 	rsb	r5, r5, #15
 8007cd6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007cda:	4652      	mov	r2, sl
 8007cdc:	465b      	mov	r3, fp
 8007cde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ce2:	f7f8 fc99 	bl	8000618 <__aeabi_dmul>
 8007ce6:	9b06      	ldr	r3, [sp, #24]
 8007ce8:	1b5d      	subs	r5, r3, r5
 8007cea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007cee:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007cf2:	e7e3      	b.n	8007cbc <_strtod_l+0x3fc>
 8007cf4:	9b06      	ldr	r3, [sp, #24]
 8007cf6:	3316      	adds	r3, #22
 8007cf8:	db0b      	blt.n	8007d12 <_strtod_l+0x452>
 8007cfa:	9b05      	ldr	r3, [sp, #20]
 8007cfc:	1b9e      	subs	r6, r3, r6
 8007cfe:	4b59      	ldr	r3, [pc, #356]	; (8007e64 <_strtod_l+0x5a4>)
 8007d00:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007d04:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007d08:	4650      	mov	r0, sl
 8007d0a:	4659      	mov	r1, fp
 8007d0c:	f7f8 fdae 	bl	800086c <__aeabi_ddiv>
 8007d10:	e7d6      	b.n	8007cc0 <_strtod_l+0x400>
 8007d12:	9b06      	ldr	r3, [sp, #24]
 8007d14:	eba5 0808 	sub.w	r8, r5, r8
 8007d18:	4498      	add	r8, r3
 8007d1a:	f1b8 0f00 	cmp.w	r8, #0
 8007d1e:	dd74      	ble.n	8007e0a <_strtod_l+0x54a>
 8007d20:	f018 030f 	ands.w	r3, r8, #15
 8007d24:	d00a      	beq.n	8007d3c <_strtod_l+0x47c>
 8007d26:	494f      	ldr	r1, [pc, #316]	; (8007e64 <_strtod_l+0x5a4>)
 8007d28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007d2c:	4652      	mov	r2, sl
 8007d2e:	465b      	mov	r3, fp
 8007d30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d34:	f7f8 fc70 	bl	8000618 <__aeabi_dmul>
 8007d38:	4682      	mov	sl, r0
 8007d3a:	468b      	mov	fp, r1
 8007d3c:	f038 080f 	bics.w	r8, r8, #15
 8007d40:	d04f      	beq.n	8007de2 <_strtod_l+0x522>
 8007d42:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007d46:	dd22      	ble.n	8007d8e <_strtod_l+0x4ce>
 8007d48:	2500      	movs	r5, #0
 8007d4a:	462e      	mov	r6, r5
 8007d4c:	9507      	str	r5, [sp, #28]
 8007d4e:	9505      	str	r5, [sp, #20]
 8007d50:	2322      	movs	r3, #34	; 0x22
 8007d52:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007e6c <_strtod_l+0x5ac>
 8007d56:	6023      	str	r3, [r4, #0]
 8007d58:	f04f 0a00 	mov.w	sl, #0
 8007d5c:	9b07      	ldr	r3, [sp, #28]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	f43f adf2 	beq.w	8007948 <_strtod_l+0x88>
 8007d64:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007d66:	4620      	mov	r0, r4
 8007d68:	f002 f9a0 	bl	800a0ac <_Bfree>
 8007d6c:	9905      	ldr	r1, [sp, #20]
 8007d6e:	4620      	mov	r0, r4
 8007d70:	f002 f99c 	bl	800a0ac <_Bfree>
 8007d74:	4631      	mov	r1, r6
 8007d76:	4620      	mov	r0, r4
 8007d78:	f002 f998 	bl	800a0ac <_Bfree>
 8007d7c:	9907      	ldr	r1, [sp, #28]
 8007d7e:	4620      	mov	r0, r4
 8007d80:	f002 f994 	bl	800a0ac <_Bfree>
 8007d84:	4629      	mov	r1, r5
 8007d86:	4620      	mov	r0, r4
 8007d88:	f002 f990 	bl	800a0ac <_Bfree>
 8007d8c:	e5dc      	b.n	8007948 <_strtod_l+0x88>
 8007d8e:	4b36      	ldr	r3, [pc, #216]	; (8007e68 <_strtod_l+0x5a8>)
 8007d90:	9304      	str	r3, [sp, #16]
 8007d92:	2300      	movs	r3, #0
 8007d94:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007d98:	4650      	mov	r0, sl
 8007d9a:	4659      	mov	r1, fp
 8007d9c:	4699      	mov	r9, r3
 8007d9e:	f1b8 0f01 	cmp.w	r8, #1
 8007da2:	dc21      	bgt.n	8007de8 <_strtod_l+0x528>
 8007da4:	b10b      	cbz	r3, 8007daa <_strtod_l+0x4ea>
 8007da6:	4682      	mov	sl, r0
 8007da8:	468b      	mov	fp, r1
 8007daa:	4b2f      	ldr	r3, [pc, #188]	; (8007e68 <_strtod_l+0x5a8>)
 8007dac:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007db0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007db4:	4652      	mov	r2, sl
 8007db6:	465b      	mov	r3, fp
 8007db8:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007dbc:	f7f8 fc2c 	bl	8000618 <__aeabi_dmul>
 8007dc0:	4b2a      	ldr	r3, [pc, #168]	; (8007e6c <_strtod_l+0x5ac>)
 8007dc2:	460a      	mov	r2, r1
 8007dc4:	400b      	ands	r3, r1
 8007dc6:	492a      	ldr	r1, [pc, #168]	; (8007e70 <_strtod_l+0x5b0>)
 8007dc8:	428b      	cmp	r3, r1
 8007dca:	4682      	mov	sl, r0
 8007dcc:	d8bc      	bhi.n	8007d48 <_strtod_l+0x488>
 8007dce:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007dd2:	428b      	cmp	r3, r1
 8007dd4:	bf86      	itte	hi
 8007dd6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007e74 <_strtod_l+0x5b4>
 8007dda:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8007dde:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007de2:	2300      	movs	r3, #0
 8007de4:	9304      	str	r3, [sp, #16]
 8007de6:	e084      	b.n	8007ef2 <_strtod_l+0x632>
 8007de8:	f018 0f01 	tst.w	r8, #1
 8007dec:	d005      	beq.n	8007dfa <_strtod_l+0x53a>
 8007dee:	9b04      	ldr	r3, [sp, #16]
 8007df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df4:	f7f8 fc10 	bl	8000618 <__aeabi_dmul>
 8007df8:	2301      	movs	r3, #1
 8007dfa:	9a04      	ldr	r2, [sp, #16]
 8007dfc:	3208      	adds	r2, #8
 8007dfe:	f109 0901 	add.w	r9, r9, #1
 8007e02:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007e06:	9204      	str	r2, [sp, #16]
 8007e08:	e7c9      	b.n	8007d9e <_strtod_l+0x4de>
 8007e0a:	d0ea      	beq.n	8007de2 <_strtod_l+0x522>
 8007e0c:	f1c8 0800 	rsb	r8, r8, #0
 8007e10:	f018 020f 	ands.w	r2, r8, #15
 8007e14:	d00a      	beq.n	8007e2c <_strtod_l+0x56c>
 8007e16:	4b13      	ldr	r3, [pc, #76]	; (8007e64 <_strtod_l+0x5a4>)
 8007e18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e1c:	4650      	mov	r0, sl
 8007e1e:	4659      	mov	r1, fp
 8007e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e24:	f7f8 fd22 	bl	800086c <__aeabi_ddiv>
 8007e28:	4682      	mov	sl, r0
 8007e2a:	468b      	mov	fp, r1
 8007e2c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007e30:	d0d7      	beq.n	8007de2 <_strtod_l+0x522>
 8007e32:	f1b8 0f1f 	cmp.w	r8, #31
 8007e36:	dd1f      	ble.n	8007e78 <_strtod_l+0x5b8>
 8007e38:	2500      	movs	r5, #0
 8007e3a:	462e      	mov	r6, r5
 8007e3c:	9507      	str	r5, [sp, #28]
 8007e3e:	9505      	str	r5, [sp, #20]
 8007e40:	2322      	movs	r3, #34	; 0x22
 8007e42:	f04f 0a00 	mov.w	sl, #0
 8007e46:	f04f 0b00 	mov.w	fp, #0
 8007e4a:	6023      	str	r3, [r4, #0]
 8007e4c:	e786      	b.n	8007d5c <_strtod_l+0x49c>
 8007e4e:	bf00      	nop
 8007e50:	0800bca1 	.word	0x0800bca1
 8007e54:	0800bce4 	.word	0x0800bce4
 8007e58:	0800bc99 	.word	0x0800bc99
 8007e5c:	0800bd23 	.word	0x0800bd23
 8007e60:	0800c030 	.word	0x0800c030
 8007e64:	0800bf10 	.word	0x0800bf10
 8007e68:	0800bee8 	.word	0x0800bee8
 8007e6c:	7ff00000 	.word	0x7ff00000
 8007e70:	7ca00000 	.word	0x7ca00000
 8007e74:	7fefffff 	.word	0x7fefffff
 8007e78:	f018 0310 	ands.w	r3, r8, #16
 8007e7c:	bf18      	it	ne
 8007e7e:	236a      	movne	r3, #106	; 0x6a
 8007e80:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008230 <_strtod_l+0x970>
 8007e84:	9304      	str	r3, [sp, #16]
 8007e86:	4650      	mov	r0, sl
 8007e88:	4659      	mov	r1, fp
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	f018 0f01 	tst.w	r8, #1
 8007e90:	d004      	beq.n	8007e9c <_strtod_l+0x5dc>
 8007e92:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007e96:	f7f8 fbbf 	bl	8000618 <__aeabi_dmul>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007ea0:	f109 0908 	add.w	r9, r9, #8
 8007ea4:	d1f2      	bne.n	8007e8c <_strtod_l+0x5cc>
 8007ea6:	b10b      	cbz	r3, 8007eac <_strtod_l+0x5ec>
 8007ea8:	4682      	mov	sl, r0
 8007eaa:	468b      	mov	fp, r1
 8007eac:	9b04      	ldr	r3, [sp, #16]
 8007eae:	b1c3      	cbz	r3, 8007ee2 <_strtod_l+0x622>
 8007eb0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007eb4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	4659      	mov	r1, fp
 8007ebc:	dd11      	ble.n	8007ee2 <_strtod_l+0x622>
 8007ebe:	2b1f      	cmp	r3, #31
 8007ec0:	f340 8124 	ble.w	800810c <_strtod_l+0x84c>
 8007ec4:	2b34      	cmp	r3, #52	; 0x34
 8007ec6:	bfde      	ittt	le
 8007ec8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007ecc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8007ed0:	fa03 f202 	lslle.w	r2, r3, r2
 8007ed4:	f04f 0a00 	mov.w	sl, #0
 8007ed8:	bfcc      	ite	gt
 8007eda:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007ede:	ea02 0b01 	andle.w	fp, r2, r1
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	4650      	mov	r0, sl
 8007ee8:	4659      	mov	r1, fp
 8007eea:	f7f8 fdfd 	bl	8000ae8 <__aeabi_dcmpeq>
 8007eee:	2800      	cmp	r0, #0
 8007ef0:	d1a2      	bne.n	8007e38 <_strtod_l+0x578>
 8007ef2:	9b07      	ldr	r3, [sp, #28]
 8007ef4:	9300      	str	r3, [sp, #0]
 8007ef6:	9908      	ldr	r1, [sp, #32]
 8007ef8:	462b      	mov	r3, r5
 8007efa:	463a      	mov	r2, r7
 8007efc:	4620      	mov	r0, r4
 8007efe:	f002 f93d 	bl	800a17c <__s2b>
 8007f02:	9007      	str	r0, [sp, #28]
 8007f04:	2800      	cmp	r0, #0
 8007f06:	f43f af1f 	beq.w	8007d48 <_strtod_l+0x488>
 8007f0a:	9b05      	ldr	r3, [sp, #20]
 8007f0c:	1b9e      	subs	r6, r3, r6
 8007f0e:	9b06      	ldr	r3, [sp, #24]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	bfb4      	ite	lt
 8007f14:	4633      	movlt	r3, r6
 8007f16:	2300      	movge	r3, #0
 8007f18:	930c      	str	r3, [sp, #48]	; 0x30
 8007f1a:	9b06      	ldr	r3, [sp, #24]
 8007f1c:	2500      	movs	r5, #0
 8007f1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007f22:	9312      	str	r3, [sp, #72]	; 0x48
 8007f24:	462e      	mov	r6, r5
 8007f26:	9b07      	ldr	r3, [sp, #28]
 8007f28:	4620      	mov	r0, r4
 8007f2a:	6859      	ldr	r1, [r3, #4]
 8007f2c:	f002 f87e 	bl	800a02c <_Balloc>
 8007f30:	9005      	str	r0, [sp, #20]
 8007f32:	2800      	cmp	r0, #0
 8007f34:	f43f af0c 	beq.w	8007d50 <_strtod_l+0x490>
 8007f38:	9b07      	ldr	r3, [sp, #28]
 8007f3a:	691a      	ldr	r2, [r3, #16]
 8007f3c:	3202      	adds	r2, #2
 8007f3e:	f103 010c 	add.w	r1, r3, #12
 8007f42:	0092      	lsls	r2, r2, #2
 8007f44:	300c      	adds	r0, #12
 8007f46:	f7fe fcb9 	bl	80068bc <memcpy>
 8007f4a:	ec4b ab10 	vmov	d0, sl, fp
 8007f4e:	aa1a      	add	r2, sp, #104	; 0x68
 8007f50:	a919      	add	r1, sp, #100	; 0x64
 8007f52:	4620      	mov	r0, r4
 8007f54:	f002 fc58 	bl	800a808 <__d2b>
 8007f58:	ec4b ab18 	vmov	d8, sl, fp
 8007f5c:	9018      	str	r0, [sp, #96]	; 0x60
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	f43f aef6 	beq.w	8007d50 <_strtod_l+0x490>
 8007f64:	2101      	movs	r1, #1
 8007f66:	4620      	mov	r0, r4
 8007f68:	f002 f9a2 	bl	800a2b0 <__i2b>
 8007f6c:	4606      	mov	r6, r0
 8007f6e:	2800      	cmp	r0, #0
 8007f70:	f43f aeee 	beq.w	8007d50 <_strtod_l+0x490>
 8007f74:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007f76:	9904      	ldr	r1, [sp, #16]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	bfab      	itete	ge
 8007f7c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007f7e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007f80:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007f82:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007f86:	bfac      	ite	ge
 8007f88:	eb03 0902 	addge.w	r9, r3, r2
 8007f8c:	1ad7      	sublt	r7, r2, r3
 8007f8e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007f90:	eba3 0801 	sub.w	r8, r3, r1
 8007f94:	4490      	add	r8, r2
 8007f96:	4ba1      	ldr	r3, [pc, #644]	; (800821c <_strtod_l+0x95c>)
 8007f98:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007f9c:	4598      	cmp	r8, r3
 8007f9e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007fa2:	f280 80c7 	bge.w	8008134 <_strtod_l+0x874>
 8007fa6:	eba3 0308 	sub.w	r3, r3, r8
 8007faa:	2b1f      	cmp	r3, #31
 8007fac:	eba2 0203 	sub.w	r2, r2, r3
 8007fb0:	f04f 0101 	mov.w	r1, #1
 8007fb4:	f300 80b1 	bgt.w	800811a <_strtod_l+0x85a>
 8007fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8007fbc:	930d      	str	r3, [sp, #52]	; 0x34
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	9308      	str	r3, [sp, #32]
 8007fc2:	eb09 0802 	add.w	r8, r9, r2
 8007fc6:	9b04      	ldr	r3, [sp, #16]
 8007fc8:	45c1      	cmp	r9, r8
 8007fca:	4417      	add	r7, r2
 8007fcc:	441f      	add	r7, r3
 8007fce:	464b      	mov	r3, r9
 8007fd0:	bfa8      	it	ge
 8007fd2:	4643      	movge	r3, r8
 8007fd4:	42bb      	cmp	r3, r7
 8007fd6:	bfa8      	it	ge
 8007fd8:	463b      	movge	r3, r7
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	bfc2      	ittt	gt
 8007fde:	eba8 0803 	subgt.w	r8, r8, r3
 8007fe2:	1aff      	subgt	r7, r7, r3
 8007fe4:	eba9 0903 	subgt.w	r9, r9, r3
 8007fe8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	dd17      	ble.n	800801e <_strtod_l+0x75e>
 8007fee:	4631      	mov	r1, r6
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	4620      	mov	r0, r4
 8007ff4:	f002 fa1c 	bl	800a430 <__pow5mult>
 8007ff8:	4606      	mov	r6, r0
 8007ffa:	2800      	cmp	r0, #0
 8007ffc:	f43f aea8 	beq.w	8007d50 <_strtod_l+0x490>
 8008000:	4601      	mov	r1, r0
 8008002:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008004:	4620      	mov	r0, r4
 8008006:	f002 f969 	bl	800a2dc <__multiply>
 800800a:	900b      	str	r0, [sp, #44]	; 0x2c
 800800c:	2800      	cmp	r0, #0
 800800e:	f43f ae9f 	beq.w	8007d50 <_strtod_l+0x490>
 8008012:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008014:	4620      	mov	r0, r4
 8008016:	f002 f849 	bl	800a0ac <_Bfree>
 800801a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800801c:	9318      	str	r3, [sp, #96]	; 0x60
 800801e:	f1b8 0f00 	cmp.w	r8, #0
 8008022:	f300 808c 	bgt.w	800813e <_strtod_l+0x87e>
 8008026:	9b06      	ldr	r3, [sp, #24]
 8008028:	2b00      	cmp	r3, #0
 800802a:	dd08      	ble.n	800803e <_strtod_l+0x77e>
 800802c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800802e:	9905      	ldr	r1, [sp, #20]
 8008030:	4620      	mov	r0, r4
 8008032:	f002 f9fd 	bl	800a430 <__pow5mult>
 8008036:	9005      	str	r0, [sp, #20]
 8008038:	2800      	cmp	r0, #0
 800803a:	f43f ae89 	beq.w	8007d50 <_strtod_l+0x490>
 800803e:	2f00      	cmp	r7, #0
 8008040:	dd08      	ble.n	8008054 <_strtod_l+0x794>
 8008042:	9905      	ldr	r1, [sp, #20]
 8008044:	463a      	mov	r2, r7
 8008046:	4620      	mov	r0, r4
 8008048:	f002 fa4c 	bl	800a4e4 <__lshift>
 800804c:	9005      	str	r0, [sp, #20]
 800804e:	2800      	cmp	r0, #0
 8008050:	f43f ae7e 	beq.w	8007d50 <_strtod_l+0x490>
 8008054:	f1b9 0f00 	cmp.w	r9, #0
 8008058:	dd08      	ble.n	800806c <_strtod_l+0x7ac>
 800805a:	4631      	mov	r1, r6
 800805c:	464a      	mov	r2, r9
 800805e:	4620      	mov	r0, r4
 8008060:	f002 fa40 	bl	800a4e4 <__lshift>
 8008064:	4606      	mov	r6, r0
 8008066:	2800      	cmp	r0, #0
 8008068:	f43f ae72 	beq.w	8007d50 <_strtod_l+0x490>
 800806c:	9a05      	ldr	r2, [sp, #20]
 800806e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008070:	4620      	mov	r0, r4
 8008072:	f002 fac3 	bl	800a5fc <__mdiff>
 8008076:	4605      	mov	r5, r0
 8008078:	2800      	cmp	r0, #0
 800807a:	f43f ae69 	beq.w	8007d50 <_strtod_l+0x490>
 800807e:	68c3      	ldr	r3, [r0, #12]
 8008080:	930b      	str	r3, [sp, #44]	; 0x2c
 8008082:	2300      	movs	r3, #0
 8008084:	60c3      	str	r3, [r0, #12]
 8008086:	4631      	mov	r1, r6
 8008088:	f002 fa9c 	bl	800a5c4 <__mcmp>
 800808c:	2800      	cmp	r0, #0
 800808e:	da60      	bge.n	8008152 <_strtod_l+0x892>
 8008090:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008092:	ea53 030a 	orrs.w	r3, r3, sl
 8008096:	f040 8082 	bne.w	800819e <_strtod_l+0x8de>
 800809a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d17d      	bne.n	800819e <_strtod_l+0x8de>
 80080a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80080a6:	0d1b      	lsrs	r3, r3, #20
 80080a8:	051b      	lsls	r3, r3, #20
 80080aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80080ae:	d976      	bls.n	800819e <_strtod_l+0x8de>
 80080b0:	696b      	ldr	r3, [r5, #20]
 80080b2:	b913      	cbnz	r3, 80080ba <_strtod_l+0x7fa>
 80080b4:	692b      	ldr	r3, [r5, #16]
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	dd71      	ble.n	800819e <_strtod_l+0x8de>
 80080ba:	4629      	mov	r1, r5
 80080bc:	2201      	movs	r2, #1
 80080be:	4620      	mov	r0, r4
 80080c0:	f002 fa10 	bl	800a4e4 <__lshift>
 80080c4:	4631      	mov	r1, r6
 80080c6:	4605      	mov	r5, r0
 80080c8:	f002 fa7c 	bl	800a5c4 <__mcmp>
 80080cc:	2800      	cmp	r0, #0
 80080ce:	dd66      	ble.n	800819e <_strtod_l+0x8de>
 80080d0:	9904      	ldr	r1, [sp, #16]
 80080d2:	4a53      	ldr	r2, [pc, #332]	; (8008220 <_strtod_l+0x960>)
 80080d4:	465b      	mov	r3, fp
 80080d6:	2900      	cmp	r1, #0
 80080d8:	f000 8081 	beq.w	80081de <_strtod_l+0x91e>
 80080dc:	ea02 010b 	and.w	r1, r2, fp
 80080e0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80080e4:	dc7b      	bgt.n	80081de <_strtod_l+0x91e>
 80080e6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80080ea:	f77f aea9 	ble.w	8007e40 <_strtod_l+0x580>
 80080ee:	4b4d      	ldr	r3, [pc, #308]	; (8008224 <_strtod_l+0x964>)
 80080f0:	4650      	mov	r0, sl
 80080f2:	4659      	mov	r1, fp
 80080f4:	2200      	movs	r2, #0
 80080f6:	f7f8 fa8f 	bl	8000618 <__aeabi_dmul>
 80080fa:	460b      	mov	r3, r1
 80080fc:	4303      	orrs	r3, r0
 80080fe:	bf08      	it	eq
 8008100:	2322      	moveq	r3, #34	; 0x22
 8008102:	4682      	mov	sl, r0
 8008104:	468b      	mov	fp, r1
 8008106:	bf08      	it	eq
 8008108:	6023      	streq	r3, [r4, #0]
 800810a:	e62b      	b.n	8007d64 <_strtod_l+0x4a4>
 800810c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008110:	fa02 f303 	lsl.w	r3, r2, r3
 8008114:	ea03 0a0a 	and.w	sl, r3, sl
 8008118:	e6e3      	b.n	8007ee2 <_strtod_l+0x622>
 800811a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800811e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008122:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008126:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800812a:	fa01 f308 	lsl.w	r3, r1, r8
 800812e:	9308      	str	r3, [sp, #32]
 8008130:	910d      	str	r1, [sp, #52]	; 0x34
 8008132:	e746      	b.n	8007fc2 <_strtod_l+0x702>
 8008134:	2300      	movs	r3, #0
 8008136:	9308      	str	r3, [sp, #32]
 8008138:	2301      	movs	r3, #1
 800813a:	930d      	str	r3, [sp, #52]	; 0x34
 800813c:	e741      	b.n	8007fc2 <_strtod_l+0x702>
 800813e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008140:	4642      	mov	r2, r8
 8008142:	4620      	mov	r0, r4
 8008144:	f002 f9ce 	bl	800a4e4 <__lshift>
 8008148:	9018      	str	r0, [sp, #96]	; 0x60
 800814a:	2800      	cmp	r0, #0
 800814c:	f47f af6b 	bne.w	8008026 <_strtod_l+0x766>
 8008150:	e5fe      	b.n	8007d50 <_strtod_l+0x490>
 8008152:	465f      	mov	r7, fp
 8008154:	d16e      	bne.n	8008234 <_strtod_l+0x974>
 8008156:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008158:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800815c:	b342      	cbz	r2, 80081b0 <_strtod_l+0x8f0>
 800815e:	4a32      	ldr	r2, [pc, #200]	; (8008228 <_strtod_l+0x968>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d128      	bne.n	80081b6 <_strtod_l+0x8f6>
 8008164:	9b04      	ldr	r3, [sp, #16]
 8008166:	4651      	mov	r1, sl
 8008168:	b1eb      	cbz	r3, 80081a6 <_strtod_l+0x8e6>
 800816a:	4b2d      	ldr	r3, [pc, #180]	; (8008220 <_strtod_l+0x960>)
 800816c:	403b      	ands	r3, r7
 800816e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008172:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008176:	d819      	bhi.n	80081ac <_strtod_l+0x8ec>
 8008178:	0d1b      	lsrs	r3, r3, #20
 800817a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800817e:	fa02 f303 	lsl.w	r3, r2, r3
 8008182:	4299      	cmp	r1, r3
 8008184:	d117      	bne.n	80081b6 <_strtod_l+0x8f6>
 8008186:	4b29      	ldr	r3, [pc, #164]	; (800822c <_strtod_l+0x96c>)
 8008188:	429f      	cmp	r7, r3
 800818a:	d102      	bne.n	8008192 <_strtod_l+0x8d2>
 800818c:	3101      	adds	r1, #1
 800818e:	f43f addf 	beq.w	8007d50 <_strtod_l+0x490>
 8008192:	4b23      	ldr	r3, [pc, #140]	; (8008220 <_strtod_l+0x960>)
 8008194:	403b      	ands	r3, r7
 8008196:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800819a:	f04f 0a00 	mov.w	sl, #0
 800819e:	9b04      	ldr	r3, [sp, #16]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d1a4      	bne.n	80080ee <_strtod_l+0x82e>
 80081a4:	e5de      	b.n	8007d64 <_strtod_l+0x4a4>
 80081a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80081aa:	e7ea      	b.n	8008182 <_strtod_l+0x8c2>
 80081ac:	4613      	mov	r3, r2
 80081ae:	e7e8      	b.n	8008182 <_strtod_l+0x8c2>
 80081b0:	ea53 030a 	orrs.w	r3, r3, sl
 80081b4:	d08c      	beq.n	80080d0 <_strtod_l+0x810>
 80081b6:	9b08      	ldr	r3, [sp, #32]
 80081b8:	b1db      	cbz	r3, 80081f2 <_strtod_l+0x932>
 80081ba:	423b      	tst	r3, r7
 80081bc:	d0ef      	beq.n	800819e <_strtod_l+0x8de>
 80081be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081c0:	9a04      	ldr	r2, [sp, #16]
 80081c2:	4650      	mov	r0, sl
 80081c4:	4659      	mov	r1, fp
 80081c6:	b1c3      	cbz	r3, 80081fa <_strtod_l+0x93a>
 80081c8:	f7ff fb5b 	bl	8007882 <sulp>
 80081cc:	4602      	mov	r2, r0
 80081ce:	460b      	mov	r3, r1
 80081d0:	ec51 0b18 	vmov	r0, r1, d8
 80081d4:	f7f8 f86a 	bl	80002ac <__adddf3>
 80081d8:	4682      	mov	sl, r0
 80081da:	468b      	mov	fp, r1
 80081dc:	e7df      	b.n	800819e <_strtod_l+0x8de>
 80081de:	4013      	ands	r3, r2
 80081e0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80081e4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80081e8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80081ec:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80081f0:	e7d5      	b.n	800819e <_strtod_l+0x8de>
 80081f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081f4:	ea13 0f0a 	tst.w	r3, sl
 80081f8:	e7e0      	b.n	80081bc <_strtod_l+0x8fc>
 80081fa:	f7ff fb42 	bl	8007882 <sulp>
 80081fe:	4602      	mov	r2, r0
 8008200:	460b      	mov	r3, r1
 8008202:	ec51 0b18 	vmov	r0, r1, d8
 8008206:	f7f8 f84f 	bl	80002a8 <__aeabi_dsub>
 800820a:	2200      	movs	r2, #0
 800820c:	2300      	movs	r3, #0
 800820e:	4682      	mov	sl, r0
 8008210:	468b      	mov	fp, r1
 8008212:	f7f8 fc69 	bl	8000ae8 <__aeabi_dcmpeq>
 8008216:	2800      	cmp	r0, #0
 8008218:	d0c1      	beq.n	800819e <_strtod_l+0x8de>
 800821a:	e611      	b.n	8007e40 <_strtod_l+0x580>
 800821c:	fffffc02 	.word	0xfffffc02
 8008220:	7ff00000 	.word	0x7ff00000
 8008224:	39500000 	.word	0x39500000
 8008228:	000fffff 	.word	0x000fffff
 800822c:	7fefffff 	.word	0x7fefffff
 8008230:	0800bcf8 	.word	0x0800bcf8
 8008234:	4631      	mov	r1, r6
 8008236:	4628      	mov	r0, r5
 8008238:	f002 fb42 	bl	800a8c0 <__ratio>
 800823c:	ec59 8b10 	vmov	r8, r9, d0
 8008240:	ee10 0a10 	vmov	r0, s0
 8008244:	2200      	movs	r2, #0
 8008246:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800824a:	4649      	mov	r1, r9
 800824c:	f7f8 fc60 	bl	8000b10 <__aeabi_dcmple>
 8008250:	2800      	cmp	r0, #0
 8008252:	d07a      	beq.n	800834a <_strtod_l+0xa8a>
 8008254:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008256:	2b00      	cmp	r3, #0
 8008258:	d04a      	beq.n	80082f0 <_strtod_l+0xa30>
 800825a:	4b95      	ldr	r3, [pc, #596]	; (80084b0 <_strtod_l+0xbf0>)
 800825c:	2200      	movs	r2, #0
 800825e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008262:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80084b0 <_strtod_l+0xbf0>
 8008266:	f04f 0800 	mov.w	r8, #0
 800826a:	4b92      	ldr	r3, [pc, #584]	; (80084b4 <_strtod_l+0xbf4>)
 800826c:	403b      	ands	r3, r7
 800826e:	930d      	str	r3, [sp, #52]	; 0x34
 8008270:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008272:	4b91      	ldr	r3, [pc, #580]	; (80084b8 <_strtod_l+0xbf8>)
 8008274:	429a      	cmp	r2, r3
 8008276:	f040 80b0 	bne.w	80083da <_strtod_l+0xb1a>
 800827a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800827e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008282:	ec4b ab10 	vmov	d0, sl, fp
 8008286:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800828a:	f002 fa41 	bl	800a710 <__ulp>
 800828e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008292:	ec53 2b10 	vmov	r2, r3, d0
 8008296:	f7f8 f9bf 	bl	8000618 <__aeabi_dmul>
 800829a:	4652      	mov	r2, sl
 800829c:	465b      	mov	r3, fp
 800829e:	f7f8 f805 	bl	80002ac <__adddf3>
 80082a2:	460b      	mov	r3, r1
 80082a4:	4983      	ldr	r1, [pc, #524]	; (80084b4 <_strtod_l+0xbf4>)
 80082a6:	4a85      	ldr	r2, [pc, #532]	; (80084bc <_strtod_l+0xbfc>)
 80082a8:	4019      	ands	r1, r3
 80082aa:	4291      	cmp	r1, r2
 80082ac:	4682      	mov	sl, r0
 80082ae:	d960      	bls.n	8008372 <_strtod_l+0xab2>
 80082b0:	ee18 3a90 	vmov	r3, s17
 80082b4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d104      	bne.n	80082c6 <_strtod_l+0xa06>
 80082bc:	ee18 3a10 	vmov	r3, s16
 80082c0:	3301      	adds	r3, #1
 80082c2:	f43f ad45 	beq.w	8007d50 <_strtod_l+0x490>
 80082c6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80084c8 <_strtod_l+0xc08>
 80082ca:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80082ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80082d0:	4620      	mov	r0, r4
 80082d2:	f001 feeb 	bl	800a0ac <_Bfree>
 80082d6:	9905      	ldr	r1, [sp, #20]
 80082d8:	4620      	mov	r0, r4
 80082da:	f001 fee7 	bl	800a0ac <_Bfree>
 80082de:	4631      	mov	r1, r6
 80082e0:	4620      	mov	r0, r4
 80082e2:	f001 fee3 	bl	800a0ac <_Bfree>
 80082e6:	4629      	mov	r1, r5
 80082e8:	4620      	mov	r0, r4
 80082ea:	f001 fedf 	bl	800a0ac <_Bfree>
 80082ee:	e61a      	b.n	8007f26 <_strtod_l+0x666>
 80082f0:	f1ba 0f00 	cmp.w	sl, #0
 80082f4:	d11b      	bne.n	800832e <_strtod_l+0xa6e>
 80082f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80082fa:	b9f3      	cbnz	r3, 800833a <_strtod_l+0xa7a>
 80082fc:	4b6c      	ldr	r3, [pc, #432]	; (80084b0 <_strtod_l+0xbf0>)
 80082fe:	2200      	movs	r2, #0
 8008300:	4640      	mov	r0, r8
 8008302:	4649      	mov	r1, r9
 8008304:	f7f8 fbfa 	bl	8000afc <__aeabi_dcmplt>
 8008308:	b9d0      	cbnz	r0, 8008340 <_strtod_l+0xa80>
 800830a:	4640      	mov	r0, r8
 800830c:	4649      	mov	r1, r9
 800830e:	4b6c      	ldr	r3, [pc, #432]	; (80084c0 <_strtod_l+0xc00>)
 8008310:	2200      	movs	r2, #0
 8008312:	f7f8 f981 	bl	8000618 <__aeabi_dmul>
 8008316:	4680      	mov	r8, r0
 8008318:	4689      	mov	r9, r1
 800831a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800831e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008322:	9315      	str	r3, [sp, #84]	; 0x54
 8008324:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008328:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800832c:	e79d      	b.n	800826a <_strtod_l+0x9aa>
 800832e:	f1ba 0f01 	cmp.w	sl, #1
 8008332:	d102      	bne.n	800833a <_strtod_l+0xa7a>
 8008334:	2f00      	cmp	r7, #0
 8008336:	f43f ad83 	beq.w	8007e40 <_strtod_l+0x580>
 800833a:	4b62      	ldr	r3, [pc, #392]	; (80084c4 <_strtod_l+0xc04>)
 800833c:	2200      	movs	r2, #0
 800833e:	e78e      	b.n	800825e <_strtod_l+0x99e>
 8008340:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80084c0 <_strtod_l+0xc00>
 8008344:	f04f 0800 	mov.w	r8, #0
 8008348:	e7e7      	b.n	800831a <_strtod_l+0xa5a>
 800834a:	4b5d      	ldr	r3, [pc, #372]	; (80084c0 <_strtod_l+0xc00>)
 800834c:	4640      	mov	r0, r8
 800834e:	4649      	mov	r1, r9
 8008350:	2200      	movs	r2, #0
 8008352:	f7f8 f961 	bl	8000618 <__aeabi_dmul>
 8008356:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008358:	4680      	mov	r8, r0
 800835a:	4689      	mov	r9, r1
 800835c:	b933      	cbnz	r3, 800836c <_strtod_l+0xaac>
 800835e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008362:	900e      	str	r0, [sp, #56]	; 0x38
 8008364:	930f      	str	r3, [sp, #60]	; 0x3c
 8008366:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800836a:	e7dd      	b.n	8008328 <_strtod_l+0xa68>
 800836c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008370:	e7f9      	b.n	8008366 <_strtod_l+0xaa6>
 8008372:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008376:	9b04      	ldr	r3, [sp, #16]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1a8      	bne.n	80082ce <_strtod_l+0xa0e>
 800837c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008380:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008382:	0d1b      	lsrs	r3, r3, #20
 8008384:	051b      	lsls	r3, r3, #20
 8008386:	429a      	cmp	r2, r3
 8008388:	d1a1      	bne.n	80082ce <_strtod_l+0xa0e>
 800838a:	4640      	mov	r0, r8
 800838c:	4649      	mov	r1, r9
 800838e:	f7f8 fca3 	bl	8000cd8 <__aeabi_d2lz>
 8008392:	f7f8 f913 	bl	80005bc <__aeabi_l2d>
 8008396:	4602      	mov	r2, r0
 8008398:	460b      	mov	r3, r1
 800839a:	4640      	mov	r0, r8
 800839c:	4649      	mov	r1, r9
 800839e:	f7f7 ff83 	bl	80002a8 <__aeabi_dsub>
 80083a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80083a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083a8:	ea43 030a 	orr.w	r3, r3, sl
 80083ac:	4313      	orrs	r3, r2
 80083ae:	4680      	mov	r8, r0
 80083b0:	4689      	mov	r9, r1
 80083b2:	d055      	beq.n	8008460 <_strtod_l+0xba0>
 80083b4:	a336      	add	r3, pc, #216	; (adr r3, 8008490 <_strtod_l+0xbd0>)
 80083b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ba:	f7f8 fb9f 	bl	8000afc <__aeabi_dcmplt>
 80083be:	2800      	cmp	r0, #0
 80083c0:	f47f acd0 	bne.w	8007d64 <_strtod_l+0x4a4>
 80083c4:	a334      	add	r3, pc, #208	; (adr r3, 8008498 <_strtod_l+0xbd8>)
 80083c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ca:	4640      	mov	r0, r8
 80083cc:	4649      	mov	r1, r9
 80083ce:	f7f8 fbb3 	bl	8000b38 <__aeabi_dcmpgt>
 80083d2:	2800      	cmp	r0, #0
 80083d4:	f43f af7b 	beq.w	80082ce <_strtod_l+0xa0e>
 80083d8:	e4c4      	b.n	8007d64 <_strtod_l+0x4a4>
 80083da:	9b04      	ldr	r3, [sp, #16]
 80083dc:	b333      	cbz	r3, 800842c <_strtod_l+0xb6c>
 80083de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083e0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80083e4:	d822      	bhi.n	800842c <_strtod_l+0xb6c>
 80083e6:	a32e      	add	r3, pc, #184	; (adr r3, 80084a0 <_strtod_l+0xbe0>)
 80083e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ec:	4640      	mov	r0, r8
 80083ee:	4649      	mov	r1, r9
 80083f0:	f7f8 fb8e 	bl	8000b10 <__aeabi_dcmple>
 80083f4:	b1a0      	cbz	r0, 8008420 <_strtod_l+0xb60>
 80083f6:	4649      	mov	r1, r9
 80083f8:	4640      	mov	r0, r8
 80083fa:	f7f8 fbe5 	bl	8000bc8 <__aeabi_d2uiz>
 80083fe:	2801      	cmp	r0, #1
 8008400:	bf38      	it	cc
 8008402:	2001      	movcc	r0, #1
 8008404:	f7f8 f88e 	bl	8000524 <__aeabi_ui2d>
 8008408:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800840a:	4680      	mov	r8, r0
 800840c:	4689      	mov	r9, r1
 800840e:	bb23      	cbnz	r3, 800845a <_strtod_l+0xb9a>
 8008410:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008414:	9010      	str	r0, [sp, #64]	; 0x40
 8008416:	9311      	str	r3, [sp, #68]	; 0x44
 8008418:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800841c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008422:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008424:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008428:	1a9b      	subs	r3, r3, r2
 800842a:	9309      	str	r3, [sp, #36]	; 0x24
 800842c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008430:	eeb0 0a48 	vmov.f32	s0, s16
 8008434:	eef0 0a68 	vmov.f32	s1, s17
 8008438:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800843c:	f002 f968 	bl	800a710 <__ulp>
 8008440:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008444:	ec53 2b10 	vmov	r2, r3, d0
 8008448:	f7f8 f8e6 	bl	8000618 <__aeabi_dmul>
 800844c:	ec53 2b18 	vmov	r2, r3, d8
 8008450:	f7f7 ff2c 	bl	80002ac <__adddf3>
 8008454:	4682      	mov	sl, r0
 8008456:	468b      	mov	fp, r1
 8008458:	e78d      	b.n	8008376 <_strtod_l+0xab6>
 800845a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800845e:	e7db      	b.n	8008418 <_strtod_l+0xb58>
 8008460:	a311      	add	r3, pc, #68	; (adr r3, 80084a8 <_strtod_l+0xbe8>)
 8008462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008466:	f7f8 fb49 	bl	8000afc <__aeabi_dcmplt>
 800846a:	e7b2      	b.n	80083d2 <_strtod_l+0xb12>
 800846c:	2300      	movs	r3, #0
 800846e:	930a      	str	r3, [sp, #40]	; 0x28
 8008470:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008472:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008474:	6013      	str	r3, [r2, #0]
 8008476:	f7ff ba6b 	b.w	8007950 <_strtod_l+0x90>
 800847a:	2a65      	cmp	r2, #101	; 0x65
 800847c:	f43f ab5f 	beq.w	8007b3e <_strtod_l+0x27e>
 8008480:	2a45      	cmp	r2, #69	; 0x45
 8008482:	f43f ab5c 	beq.w	8007b3e <_strtod_l+0x27e>
 8008486:	2301      	movs	r3, #1
 8008488:	f7ff bb94 	b.w	8007bb4 <_strtod_l+0x2f4>
 800848c:	f3af 8000 	nop.w
 8008490:	94a03595 	.word	0x94a03595
 8008494:	3fdfffff 	.word	0x3fdfffff
 8008498:	35afe535 	.word	0x35afe535
 800849c:	3fe00000 	.word	0x3fe00000
 80084a0:	ffc00000 	.word	0xffc00000
 80084a4:	41dfffff 	.word	0x41dfffff
 80084a8:	94a03595 	.word	0x94a03595
 80084ac:	3fcfffff 	.word	0x3fcfffff
 80084b0:	3ff00000 	.word	0x3ff00000
 80084b4:	7ff00000 	.word	0x7ff00000
 80084b8:	7fe00000 	.word	0x7fe00000
 80084bc:	7c9fffff 	.word	0x7c9fffff
 80084c0:	3fe00000 	.word	0x3fe00000
 80084c4:	bff00000 	.word	0xbff00000
 80084c8:	7fefffff 	.word	0x7fefffff

080084cc <_strtod_r>:
 80084cc:	4b01      	ldr	r3, [pc, #4]	; (80084d4 <_strtod_r+0x8>)
 80084ce:	f7ff b9f7 	b.w	80078c0 <_strtod_l>
 80084d2:	bf00      	nop
 80084d4:	200000a4 	.word	0x200000a4

080084d8 <_strtol_l.constprop.0>:
 80084d8:	2b01      	cmp	r3, #1
 80084da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084de:	d001      	beq.n	80084e4 <_strtol_l.constprop.0+0xc>
 80084e0:	2b24      	cmp	r3, #36	; 0x24
 80084e2:	d906      	bls.n	80084f2 <_strtol_l.constprop.0+0x1a>
 80084e4:	f7fe f9c0 	bl	8006868 <__errno>
 80084e8:	2316      	movs	r3, #22
 80084ea:	6003      	str	r3, [r0, #0]
 80084ec:	2000      	movs	r0, #0
 80084ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084f2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80085d8 <_strtol_l.constprop.0+0x100>
 80084f6:	460d      	mov	r5, r1
 80084f8:	462e      	mov	r6, r5
 80084fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80084fe:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008502:	f017 0708 	ands.w	r7, r7, #8
 8008506:	d1f7      	bne.n	80084f8 <_strtol_l.constprop.0+0x20>
 8008508:	2c2d      	cmp	r4, #45	; 0x2d
 800850a:	d132      	bne.n	8008572 <_strtol_l.constprop.0+0x9a>
 800850c:	782c      	ldrb	r4, [r5, #0]
 800850e:	2701      	movs	r7, #1
 8008510:	1cb5      	adds	r5, r6, #2
 8008512:	2b00      	cmp	r3, #0
 8008514:	d05b      	beq.n	80085ce <_strtol_l.constprop.0+0xf6>
 8008516:	2b10      	cmp	r3, #16
 8008518:	d109      	bne.n	800852e <_strtol_l.constprop.0+0x56>
 800851a:	2c30      	cmp	r4, #48	; 0x30
 800851c:	d107      	bne.n	800852e <_strtol_l.constprop.0+0x56>
 800851e:	782c      	ldrb	r4, [r5, #0]
 8008520:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008524:	2c58      	cmp	r4, #88	; 0x58
 8008526:	d14d      	bne.n	80085c4 <_strtol_l.constprop.0+0xec>
 8008528:	786c      	ldrb	r4, [r5, #1]
 800852a:	2310      	movs	r3, #16
 800852c:	3502      	adds	r5, #2
 800852e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008532:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008536:	f04f 0c00 	mov.w	ip, #0
 800853a:	fbb8 f9f3 	udiv	r9, r8, r3
 800853e:	4666      	mov	r6, ip
 8008540:	fb03 8a19 	mls	sl, r3, r9, r8
 8008544:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008548:	f1be 0f09 	cmp.w	lr, #9
 800854c:	d816      	bhi.n	800857c <_strtol_l.constprop.0+0xa4>
 800854e:	4674      	mov	r4, lr
 8008550:	42a3      	cmp	r3, r4
 8008552:	dd24      	ble.n	800859e <_strtol_l.constprop.0+0xc6>
 8008554:	f1bc 0f00 	cmp.w	ip, #0
 8008558:	db1e      	blt.n	8008598 <_strtol_l.constprop.0+0xc0>
 800855a:	45b1      	cmp	r9, r6
 800855c:	d31c      	bcc.n	8008598 <_strtol_l.constprop.0+0xc0>
 800855e:	d101      	bne.n	8008564 <_strtol_l.constprop.0+0x8c>
 8008560:	45a2      	cmp	sl, r4
 8008562:	db19      	blt.n	8008598 <_strtol_l.constprop.0+0xc0>
 8008564:	fb06 4603 	mla	r6, r6, r3, r4
 8008568:	f04f 0c01 	mov.w	ip, #1
 800856c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008570:	e7e8      	b.n	8008544 <_strtol_l.constprop.0+0x6c>
 8008572:	2c2b      	cmp	r4, #43	; 0x2b
 8008574:	bf04      	itt	eq
 8008576:	782c      	ldrbeq	r4, [r5, #0]
 8008578:	1cb5      	addeq	r5, r6, #2
 800857a:	e7ca      	b.n	8008512 <_strtol_l.constprop.0+0x3a>
 800857c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008580:	f1be 0f19 	cmp.w	lr, #25
 8008584:	d801      	bhi.n	800858a <_strtol_l.constprop.0+0xb2>
 8008586:	3c37      	subs	r4, #55	; 0x37
 8008588:	e7e2      	b.n	8008550 <_strtol_l.constprop.0+0x78>
 800858a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800858e:	f1be 0f19 	cmp.w	lr, #25
 8008592:	d804      	bhi.n	800859e <_strtol_l.constprop.0+0xc6>
 8008594:	3c57      	subs	r4, #87	; 0x57
 8008596:	e7db      	b.n	8008550 <_strtol_l.constprop.0+0x78>
 8008598:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800859c:	e7e6      	b.n	800856c <_strtol_l.constprop.0+0x94>
 800859e:	f1bc 0f00 	cmp.w	ip, #0
 80085a2:	da05      	bge.n	80085b0 <_strtol_l.constprop.0+0xd8>
 80085a4:	2322      	movs	r3, #34	; 0x22
 80085a6:	6003      	str	r3, [r0, #0]
 80085a8:	4646      	mov	r6, r8
 80085aa:	b942      	cbnz	r2, 80085be <_strtol_l.constprop.0+0xe6>
 80085ac:	4630      	mov	r0, r6
 80085ae:	e79e      	b.n	80084ee <_strtol_l.constprop.0+0x16>
 80085b0:	b107      	cbz	r7, 80085b4 <_strtol_l.constprop.0+0xdc>
 80085b2:	4276      	negs	r6, r6
 80085b4:	2a00      	cmp	r2, #0
 80085b6:	d0f9      	beq.n	80085ac <_strtol_l.constprop.0+0xd4>
 80085b8:	f1bc 0f00 	cmp.w	ip, #0
 80085bc:	d000      	beq.n	80085c0 <_strtol_l.constprop.0+0xe8>
 80085be:	1e69      	subs	r1, r5, #1
 80085c0:	6011      	str	r1, [r2, #0]
 80085c2:	e7f3      	b.n	80085ac <_strtol_l.constprop.0+0xd4>
 80085c4:	2430      	movs	r4, #48	; 0x30
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d1b1      	bne.n	800852e <_strtol_l.constprop.0+0x56>
 80085ca:	2308      	movs	r3, #8
 80085cc:	e7af      	b.n	800852e <_strtol_l.constprop.0+0x56>
 80085ce:	2c30      	cmp	r4, #48	; 0x30
 80085d0:	d0a5      	beq.n	800851e <_strtol_l.constprop.0+0x46>
 80085d2:	230a      	movs	r3, #10
 80085d4:	e7ab      	b.n	800852e <_strtol_l.constprop.0+0x56>
 80085d6:	bf00      	nop
 80085d8:	0800bb8d 	.word	0x0800bb8d

080085dc <_strtol_r>:
 80085dc:	f7ff bf7c 	b.w	80084d8 <_strtol_l.constprop.0>

080085e0 <strtol>:
 80085e0:	4613      	mov	r3, r2
 80085e2:	460a      	mov	r2, r1
 80085e4:	4601      	mov	r1, r0
 80085e6:	4802      	ldr	r0, [pc, #8]	; (80085f0 <strtol+0x10>)
 80085e8:	6800      	ldr	r0, [r0, #0]
 80085ea:	f7ff bf75 	b.w	80084d8 <_strtol_l.constprop.0>
 80085ee:	bf00      	nop
 80085f0:	2000003c 	.word	0x2000003c

080085f4 <__swbuf_r>:
 80085f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f6:	460e      	mov	r6, r1
 80085f8:	4614      	mov	r4, r2
 80085fa:	4605      	mov	r5, r0
 80085fc:	b118      	cbz	r0, 8008606 <__swbuf_r+0x12>
 80085fe:	6983      	ldr	r3, [r0, #24]
 8008600:	b90b      	cbnz	r3, 8008606 <__swbuf_r+0x12>
 8008602:	f001 f86d 	bl	80096e0 <__sinit>
 8008606:	4b21      	ldr	r3, [pc, #132]	; (800868c <__swbuf_r+0x98>)
 8008608:	429c      	cmp	r4, r3
 800860a:	d12b      	bne.n	8008664 <__swbuf_r+0x70>
 800860c:	686c      	ldr	r4, [r5, #4]
 800860e:	69a3      	ldr	r3, [r4, #24]
 8008610:	60a3      	str	r3, [r4, #8]
 8008612:	89a3      	ldrh	r3, [r4, #12]
 8008614:	071a      	lsls	r2, r3, #28
 8008616:	d52f      	bpl.n	8008678 <__swbuf_r+0x84>
 8008618:	6923      	ldr	r3, [r4, #16]
 800861a:	b36b      	cbz	r3, 8008678 <__swbuf_r+0x84>
 800861c:	6923      	ldr	r3, [r4, #16]
 800861e:	6820      	ldr	r0, [r4, #0]
 8008620:	1ac0      	subs	r0, r0, r3
 8008622:	6963      	ldr	r3, [r4, #20]
 8008624:	b2f6      	uxtb	r6, r6
 8008626:	4283      	cmp	r3, r0
 8008628:	4637      	mov	r7, r6
 800862a:	dc04      	bgt.n	8008636 <__swbuf_r+0x42>
 800862c:	4621      	mov	r1, r4
 800862e:	4628      	mov	r0, r5
 8008630:	f000 ffc2 	bl	80095b8 <_fflush_r>
 8008634:	bb30      	cbnz	r0, 8008684 <__swbuf_r+0x90>
 8008636:	68a3      	ldr	r3, [r4, #8]
 8008638:	3b01      	subs	r3, #1
 800863a:	60a3      	str	r3, [r4, #8]
 800863c:	6823      	ldr	r3, [r4, #0]
 800863e:	1c5a      	adds	r2, r3, #1
 8008640:	6022      	str	r2, [r4, #0]
 8008642:	701e      	strb	r6, [r3, #0]
 8008644:	6963      	ldr	r3, [r4, #20]
 8008646:	3001      	adds	r0, #1
 8008648:	4283      	cmp	r3, r0
 800864a:	d004      	beq.n	8008656 <__swbuf_r+0x62>
 800864c:	89a3      	ldrh	r3, [r4, #12]
 800864e:	07db      	lsls	r3, r3, #31
 8008650:	d506      	bpl.n	8008660 <__swbuf_r+0x6c>
 8008652:	2e0a      	cmp	r6, #10
 8008654:	d104      	bne.n	8008660 <__swbuf_r+0x6c>
 8008656:	4621      	mov	r1, r4
 8008658:	4628      	mov	r0, r5
 800865a:	f000 ffad 	bl	80095b8 <_fflush_r>
 800865e:	b988      	cbnz	r0, 8008684 <__swbuf_r+0x90>
 8008660:	4638      	mov	r0, r7
 8008662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008664:	4b0a      	ldr	r3, [pc, #40]	; (8008690 <__swbuf_r+0x9c>)
 8008666:	429c      	cmp	r4, r3
 8008668:	d101      	bne.n	800866e <__swbuf_r+0x7a>
 800866a:	68ac      	ldr	r4, [r5, #8]
 800866c:	e7cf      	b.n	800860e <__swbuf_r+0x1a>
 800866e:	4b09      	ldr	r3, [pc, #36]	; (8008694 <__swbuf_r+0xa0>)
 8008670:	429c      	cmp	r4, r3
 8008672:	bf08      	it	eq
 8008674:	68ec      	ldreq	r4, [r5, #12]
 8008676:	e7ca      	b.n	800860e <__swbuf_r+0x1a>
 8008678:	4621      	mov	r1, r4
 800867a:	4628      	mov	r0, r5
 800867c:	f000 f81e 	bl	80086bc <__swsetup_r>
 8008680:	2800      	cmp	r0, #0
 8008682:	d0cb      	beq.n	800861c <__swbuf_r+0x28>
 8008684:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008688:	e7ea      	b.n	8008660 <__swbuf_r+0x6c>
 800868a:	bf00      	nop
 800868c:	0800bdd0 	.word	0x0800bdd0
 8008690:	0800bdf0 	.word	0x0800bdf0
 8008694:	0800bdb0 	.word	0x0800bdb0

08008698 <_write_r>:
 8008698:	b538      	push	{r3, r4, r5, lr}
 800869a:	4d07      	ldr	r5, [pc, #28]	; (80086b8 <_write_r+0x20>)
 800869c:	4604      	mov	r4, r0
 800869e:	4608      	mov	r0, r1
 80086a0:	4611      	mov	r1, r2
 80086a2:	2200      	movs	r2, #0
 80086a4:	602a      	str	r2, [r5, #0]
 80086a6:	461a      	mov	r2, r3
 80086a8:	f7fa fb3f 	bl	8002d2a <_write>
 80086ac:	1c43      	adds	r3, r0, #1
 80086ae:	d102      	bne.n	80086b6 <_write_r+0x1e>
 80086b0:	682b      	ldr	r3, [r5, #0]
 80086b2:	b103      	cbz	r3, 80086b6 <_write_r+0x1e>
 80086b4:	6023      	str	r3, [r4, #0]
 80086b6:	bd38      	pop	{r3, r4, r5, pc}
 80086b8:	20001fac 	.word	0x20001fac

080086bc <__swsetup_r>:
 80086bc:	4b32      	ldr	r3, [pc, #200]	; (8008788 <__swsetup_r+0xcc>)
 80086be:	b570      	push	{r4, r5, r6, lr}
 80086c0:	681d      	ldr	r5, [r3, #0]
 80086c2:	4606      	mov	r6, r0
 80086c4:	460c      	mov	r4, r1
 80086c6:	b125      	cbz	r5, 80086d2 <__swsetup_r+0x16>
 80086c8:	69ab      	ldr	r3, [r5, #24]
 80086ca:	b913      	cbnz	r3, 80086d2 <__swsetup_r+0x16>
 80086cc:	4628      	mov	r0, r5
 80086ce:	f001 f807 	bl	80096e0 <__sinit>
 80086d2:	4b2e      	ldr	r3, [pc, #184]	; (800878c <__swsetup_r+0xd0>)
 80086d4:	429c      	cmp	r4, r3
 80086d6:	d10f      	bne.n	80086f8 <__swsetup_r+0x3c>
 80086d8:	686c      	ldr	r4, [r5, #4]
 80086da:	89a3      	ldrh	r3, [r4, #12]
 80086dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086e0:	0719      	lsls	r1, r3, #28
 80086e2:	d42c      	bmi.n	800873e <__swsetup_r+0x82>
 80086e4:	06dd      	lsls	r5, r3, #27
 80086e6:	d411      	bmi.n	800870c <__swsetup_r+0x50>
 80086e8:	2309      	movs	r3, #9
 80086ea:	6033      	str	r3, [r6, #0]
 80086ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80086f0:	81a3      	strh	r3, [r4, #12]
 80086f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086f6:	e03e      	b.n	8008776 <__swsetup_r+0xba>
 80086f8:	4b25      	ldr	r3, [pc, #148]	; (8008790 <__swsetup_r+0xd4>)
 80086fa:	429c      	cmp	r4, r3
 80086fc:	d101      	bne.n	8008702 <__swsetup_r+0x46>
 80086fe:	68ac      	ldr	r4, [r5, #8]
 8008700:	e7eb      	b.n	80086da <__swsetup_r+0x1e>
 8008702:	4b24      	ldr	r3, [pc, #144]	; (8008794 <__swsetup_r+0xd8>)
 8008704:	429c      	cmp	r4, r3
 8008706:	bf08      	it	eq
 8008708:	68ec      	ldreq	r4, [r5, #12]
 800870a:	e7e6      	b.n	80086da <__swsetup_r+0x1e>
 800870c:	0758      	lsls	r0, r3, #29
 800870e:	d512      	bpl.n	8008736 <__swsetup_r+0x7a>
 8008710:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008712:	b141      	cbz	r1, 8008726 <__swsetup_r+0x6a>
 8008714:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008718:	4299      	cmp	r1, r3
 800871a:	d002      	beq.n	8008722 <__swsetup_r+0x66>
 800871c:	4630      	mov	r0, r6
 800871e:	f002 f95d 	bl	800a9dc <_free_r>
 8008722:	2300      	movs	r3, #0
 8008724:	6363      	str	r3, [r4, #52]	; 0x34
 8008726:	89a3      	ldrh	r3, [r4, #12]
 8008728:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800872c:	81a3      	strh	r3, [r4, #12]
 800872e:	2300      	movs	r3, #0
 8008730:	6063      	str	r3, [r4, #4]
 8008732:	6923      	ldr	r3, [r4, #16]
 8008734:	6023      	str	r3, [r4, #0]
 8008736:	89a3      	ldrh	r3, [r4, #12]
 8008738:	f043 0308 	orr.w	r3, r3, #8
 800873c:	81a3      	strh	r3, [r4, #12]
 800873e:	6923      	ldr	r3, [r4, #16]
 8008740:	b94b      	cbnz	r3, 8008756 <__swsetup_r+0x9a>
 8008742:	89a3      	ldrh	r3, [r4, #12]
 8008744:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800874c:	d003      	beq.n	8008756 <__swsetup_r+0x9a>
 800874e:	4621      	mov	r1, r4
 8008750:	4630      	mov	r0, r6
 8008752:	f001 fc11 	bl	8009f78 <__smakebuf_r>
 8008756:	89a0      	ldrh	r0, [r4, #12]
 8008758:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800875c:	f010 0301 	ands.w	r3, r0, #1
 8008760:	d00a      	beq.n	8008778 <__swsetup_r+0xbc>
 8008762:	2300      	movs	r3, #0
 8008764:	60a3      	str	r3, [r4, #8]
 8008766:	6963      	ldr	r3, [r4, #20]
 8008768:	425b      	negs	r3, r3
 800876a:	61a3      	str	r3, [r4, #24]
 800876c:	6923      	ldr	r3, [r4, #16]
 800876e:	b943      	cbnz	r3, 8008782 <__swsetup_r+0xc6>
 8008770:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008774:	d1ba      	bne.n	80086ec <__swsetup_r+0x30>
 8008776:	bd70      	pop	{r4, r5, r6, pc}
 8008778:	0781      	lsls	r1, r0, #30
 800877a:	bf58      	it	pl
 800877c:	6963      	ldrpl	r3, [r4, #20]
 800877e:	60a3      	str	r3, [r4, #8]
 8008780:	e7f4      	b.n	800876c <__swsetup_r+0xb0>
 8008782:	2000      	movs	r0, #0
 8008784:	e7f7      	b.n	8008776 <__swsetup_r+0xba>
 8008786:	bf00      	nop
 8008788:	2000003c 	.word	0x2000003c
 800878c:	0800bdd0 	.word	0x0800bdd0
 8008790:	0800bdf0 	.word	0x0800bdf0
 8008794:	0800bdb0 	.word	0x0800bdb0

08008798 <_close_r>:
 8008798:	b538      	push	{r3, r4, r5, lr}
 800879a:	4d06      	ldr	r5, [pc, #24]	; (80087b4 <_close_r+0x1c>)
 800879c:	2300      	movs	r3, #0
 800879e:	4604      	mov	r4, r0
 80087a0:	4608      	mov	r0, r1
 80087a2:	602b      	str	r3, [r5, #0]
 80087a4:	f7fa fadd 	bl	8002d62 <_close>
 80087a8:	1c43      	adds	r3, r0, #1
 80087aa:	d102      	bne.n	80087b2 <_close_r+0x1a>
 80087ac:	682b      	ldr	r3, [r5, #0]
 80087ae:	b103      	cbz	r3, 80087b2 <_close_r+0x1a>
 80087b0:	6023      	str	r3, [r4, #0]
 80087b2:	bd38      	pop	{r3, r4, r5, pc}
 80087b4:	20001fac 	.word	0x20001fac

080087b8 <quorem>:
 80087b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087bc:	6903      	ldr	r3, [r0, #16]
 80087be:	690c      	ldr	r4, [r1, #16]
 80087c0:	42a3      	cmp	r3, r4
 80087c2:	4607      	mov	r7, r0
 80087c4:	f2c0 8081 	blt.w	80088ca <quorem+0x112>
 80087c8:	3c01      	subs	r4, #1
 80087ca:	f101 0814 	add.w	r8, r1, #20
 80087ce:	f100 0514 	add.w	r5, r0, #20
 80087d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087d6:	9301      	str	r3, [sp, #4]
 80087d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80087dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087e0:	3301      	adds	r3, #1
 80087e2:	429a      	cmp	r2, r3
 80087e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80087e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80087ec:	fbb2 f6f3 	udiv	r6, r2, r3
 80087f0:	d331      	bcc.n	8008856 <quorem+0x9e>
 80087f2:	f04f 0e00 	mov.w	lr, #0
 80087f6:	4640      	mov	r0, r8
 80087f8:	46ac      	mov	ip, r5
 80087fa:	46f2      	mov	sl, lr
 80087fc:	f850 2b04 	ldr.w	r2, [r0], #4
 8008800:	b293      	uxth	r3, r2
 8008802:	fb06 e303 	mla	r3, r6, r3, lr
 8008806:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800880a:	b29b      	uxth	r3, r3
 800880c:	ebaa 0303 	sub.w	r3, sl, r3
 8008810:	f8dc a000 	ldr.w	sl, [ip]
 8008814:	0c12      	lsrs	r2, r2, #16
 8008816:	fa13 f38a 	uxtah	r3, r3, sl
 800881a:	fb06 e202 	mla	r2, r6, r2, lr
 800881e:	9300      	str	r3, [sp, #0]
 8008820:	9b00      	ldr	r3, [sp, #0]
 8008822:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008826:	b292      	uxth	r2, r2
 8008828:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800882c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008830:	f8bd 3000 	ldrh.w	r3, [sp]
 8008834:	4581      	cmp	r9, r0
 8008836:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800883a:	f84c 3b04 	str.w	r3, [ip], #4
 800883e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008842:	d2db      	bcs.n	80087fc <quorem+0x44>
 8008844:	f855 300b 	ldr.w	r3, [r5, fp]
 8008848:	b92b      	cbnz	r3, 8008856 <quorem+0x9e>
 800884a:	9b01      	ldr	r3, [sp, #4]
 800884c:	3b04      	subs	r3, #4
 800884e:	429d      	cmp	r5, r3
 8008850:	461a      	mov	r2, r3
 8008852:	d32e      	bcc.n	80088b2 <quorem+0xfa>
 8008854:	613c      	str	r4, [r7, #16]
 8008856:	4638      	mov	r0, r7
 8008858:	f001 feb4 	bl	800a5c4 <__mcmp>
 800885c:	2800      	cmp	r0, #0
 800885e:	db24      	blt.n	80088aa <quorem+0xf2>
 8008860:	3601      	adds	r6, #1
 8008862:	4628      	mov	r0, r5
 8008864:	f04f 0c00 	mov.w	ip, #0
 8008868:	f858 2b04 	ldr.w	r2, [r8], #4
 800886c:	f8d0 e000 	ldr.w	lr, [r0]
 8008870:	b293      	uxth	r3, r2
 8008872:	ebac 0303 	sub.w	r3, ip, r3
 8008876:	0c12      	lsrs	r2, r2, #16
 8008878:	fa13 f38e 	uxtah	r3, r3, lr
 800887c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008880:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008884:	b29b      	uxth	r3, r3
 8008886:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800888a:	45c1      	cmp	r9, r8
 800888c:	f840 3b04 	str.w	r3, [r0], #4
 8008890:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008894:	d2e8      	bcs.n	8008868 <quorem+0xb0>
 8008896:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800889a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800889e:	b922      	cbnz	r2, 80088aa <quorem+0xf2>
 80088a0:	3b04      	subs	r3, #4
 80088a2:	429d      	cmp	r5, r3
 80088a4:	461a      	mov	r2, r3
 80088a6:	d30a      	bcc.n	80088be <quorem+0x106>
 80088a8:	613c      	str	r4, [r7, #16]
 80088aa:	4630      	mov	r0, r6
 80088ac:	b003      	add	sp, #12
 80088ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b2:	6812      	ldr	r2, [r2, #0]
 80088b4:	3b04      	subs	r3, #4
 80088b6:	2a00      	cmp	r2, #0
 80088b8:	d1cc      	bne.n	8008854 <quorem+0x9c>
 80088ba:	3c01      	subs	r4, #1
 80088bc:	e7c7      	b.n	800884e <quorem+0x96>
 80088be:	6812      	ldr	r2, [r2, #0]
 80088c0:	3b04      	subs	r3, #4
 80088c2:	2a00      	cmp	r2, #0
 80088c4:	d1f0      	bne.n	80088a8 <quorem+0xf0>
 80088c6:	3c01      	subs	r4, #1
 80088c8:	e7eb      	b.n	80088a2 <quorem+0xea>
 80088ca:	2000      	movs	r0, #0
 80088cc:	e7ee      	b.n	80088ac <quorem+0xf4>
	...

080088d0 <_dtoa_r>:
 80088d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d4:	ed2d 8b04 	vpush	{d8-d9}
 80088d8:	ec57 6b10 	vmov	r6, r7, d0
 80088dc:	b093      	sub	sp, #76	; 0x4c
 80088de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80088e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80088e4:	9106      	str	r1, [sp, #24]
 80088e6:	ee10 aa10 	vmov	sl, s0
 80088ea:	4604      	mov	r4, r0
 80088ec:	9209      	str	r2, [sp, #36]	; 0x24
 80088ee:	930c      	str	r3, [sp, #48]	; 0x30
 80088f0:	46bb      	mov	fp, r7
 80088f2:	b975      	cbnz	r5, 8008912 <_dtoa_r+0x42>
 80088f4:	2010      	movs	r0, #16
 80088f6:	f001 fb7f 	bl	8009ff8 <malloc>
 80088fa:	4602      	mov	r2, r0
 80088fc:	6260      	str	r0, [r4, #36]	; 0x24
 80088fe:	b920      	cbnz	r0, 800890a <_dtoa_r+0x3a>
 8008900:	4ba7      	ldr	r3, [pc, #668]	; (8008ba0 <_dtoa_r+0x2d0>)
 8008902:	21ea      	movs	r1, #234	; 0xea
 8008904:	48a7      	ldr	r0, [pc, #668]	; (8008ba4 <_dtoa_r+0x2d4>)
 8008906:	f002 fadd 	bl	800aec4 <__assert_func>
 800890a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800890e:	6005      	str	r5, [r0, #0]
 8008910:	60c5      	str	r5, [r0, #12]
 8008912:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008914:	6819      	ldr	r1, [r3, #0]
 8008916:	b151      	cbz	r1, 800892e <_dtoa_r+0x5e>
 8008918:	685a      	ldr	r2, [r3, #4]
 800891a:	604a      	str	r2, [r1, #4]
 800891c:	2301      	movs	r3, #1
 800891e:	4093      	lsls	r3, r2
 8008920:	608b      	str	r3, [r1, #8]
 8008922:	4620      	mov	r0, r4
 8008924:	f001 fbc2 	bl	800a0ac <_Bfree>
 8008928:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800892a:	2200      	movs	r2, #0
 800892c:	601a      	str	r2, [r3, #0]
 800892e:	1e3b      	subs	r3, r7, #0
 8008930:	bfaa      	itet	ge
 8008932:	2300      	movge	r3, #0
 8008934:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008938:	f8c8 3000 	strge.w	r3, [r8]
 800893c:	4b9a      	ldr	r3, [pc, #616]	; (8008ba8 <_dtoa_r+0x2d8>)
 800893e:	bfbc      	itt	lt
 8008940:	2201      	movlt	r2, #1
 8008942:	f8c8 2000 	strlt.w	r2, [r8]
 8008946:	ea33 030b 	bics.w	r3, r3, fp
 800894a:	d11b      	bne.n	8008984 <_dtoa_r+0xb4>
 800894c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800894e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008952:	6013      	str	r3, [r2, #0]
 8008954:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008958:	4333      	orrs	r3, r6
 800895a:	f000 8592 	beq.w	8009482 <_dtoa_r+0xbb2>
 800895e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008960:	b963      	cbnz	r3, 800897c <_dtoa_r+0xac>
 8008962:	4b92      	ldr	r3, [pc, #584]	; (8008bac <_dtoa_r+0x2dc>)
 8008964:	e022      	b.n	80089ac <_dtoa_r+0xdc>
 8008966:	4b92      	ldr	r3, [pc, #584]	; (8008bb0 <_dtoa_r+0x2e0>)
 8008968:	9301      	str	r3, [sp, #4]
 800896a:	3308      	adds	r3, #8
 800896c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800896e:	6013      	str	r3, [r2, #0]
 8008970:	9801      	ldr	r0, [sp, #4]
 8008972:	b013      	add	sp, #76	; 0x4c
 8008974:	ecbd 8b04 	vpop	{d8-d9}
 8008978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800897c:	4b8b      	ldr	r3, [pc, #556]	; (8008bac <_dtoa_r+0x2dc>)
 800897e:	9301      	str	r3, [sp, #4]
 8008980:	3303      	adds	r3, #3
 8008982:	e7f3      	b.n	800896c <_dtoa_r+0x9c>
 8008984:	2200      	movs	r2, #0
 8008986:	2300      	movs	r3, #0
 8008988:	4650      	mov	r0, sl
 800898a:	4659      	mov	r1, fp
 800898c:	f7f8 f8ac 	bl	8000ae8 <__aeabi_dcmpeq>
 8008990:	ec4b ab19 	vmov	d9, sl, fp
 8008994:	4680      	mov	r8, r0
 8008996:	b158      	cbz	r0, 80089b0 <_dtoa_r+0xe0>
 8008998:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800899a:	2301      	movs	r3, #1
 800899c:	6013      	str	r3, [r2, #0]
 800899e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	f000 856b 	beq.w	800947c <_dtoa_r+0xbac>
 80089a6:	4883      	ldr	r0, [pc, #524]	; (8008bb4 <_dtoa_r+0x2e4>)
 80089a8:	6018      	str	r0, [r3, #0]
 80089aa:	1e43      	subs	r3, r0, #1
 80089ac:	9301      	str	r3, [sp, #4]
 80089ae:	e7df      	b.n	8008970 <_dtoa_r+0xa0>
 80089b0:	ec4b ab10 	vmov	d0, sl, fp
 80089b4:	aa10      	add	r2, sp, #64	; 0x40
 80089b6:	a911      	add	r1, sp, #68	; 0x44
 80089b8:	4620      	mov	r0, r4
 80089ba:	f001 ff25 	bl	800a808 <__d2b>
 80089be:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80089c2:	ee08 0a10 	vmov	s16, r0
 80089c6:	2d00      	cmp	r5, #0
 80089c8:	f000 8084 	beq.w	8008ad4 <_dtoa_r+0x204>
 80089cc:	ee19 3a90 	vmov	r3, s19
 80089d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089d4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80089d8:	4656      	mov	r6, sl
 80089da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80089de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80089e2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80089e6:	4b74      	ldr	r3, [pc, #464]	; (8008bb8 <_dtoa_r+0x2e8>)
 80089e8:	2200      	movs	r2, #0
 80089ea:	4630      	mov	r0, r6
 80089ec:	4639      	mov	r1, r7
 80089ee:	f7f7 fc5b 	bl	80002a8 <__aeabi_dsub>
 80089f2:	a365      	add	r3, pc, #404	; (adr r3, 8008b88 <_dtoa_r+0x2b8>)
 80089f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f8:	f7f7 fe0e 	bl	8000618 <__aeabi_dmul>
 80089fc:	a364      	add	r3, pc, #400	; (adr r3, 8008b90 <_dtoa_r+0x2c0>)
 80089fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a02:	f7f7 fc53 	bl	80002ac <__adddf3>
 8008a06:	4606      	mov	r6, r0
 8008a08:	4628      	mov	r0, r5
 8008a0a:	460f      	mov	r7, r1
 8008a0c:	f7f7 fd9a 	bl	8000544 <__aeabi_i2d>
 8008a10:	a361      	add	r3, pc, #388	; (adr r3, 8008b98 <_dtoa_r+0x2c8>)
 8008a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a16:	f7f7 fdff 	bl	8000618 <__aeabi_dmul>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	4630      	mov	r0, r6
 8008a20:	4639      	mov	r1, r7
 8008a22:	f7f7 fc43 	bl	80002ac <__adddf3>
 8008a26:	4606      	mov	r6, r0
 8008a28:	460f      	mov	r7, r1
 8008a2a:	f7f8 f8a5 	bl	8000b78 <__aeabi_d2iz>
 8008a2e:	2200      	movs	r2, #0
 8008a30:	9000      	str	r0, [sp, #0]
 8008a32:	2300      	movs	r3, #0
 8008a34:	4630      	mov	r0, r6
 8008a36:	4639      	mov	r1, r7
 8008a38:	f7f8 f860 	bl	8000afc <__aeabi_dcmplt>
 8008a3c:	b150      	cbz	r0, 8008a54 <_dtoa_r+0x184>
 8008a3e:	9800      	ldr	r0, [sp, #0]
 8008a40:	f7f7 fd80 	bl	8000544 <__aeabi_i2d>
 8008a44:	4632      	mov	r2, r6
 8008a46:	463b      	mov	r3, r7
 8008a48:	f7f8 f84e 	bl	8000ae8 <__aeabi_dcmpeq>
 8008a4c:	b910      	cbnz	r0, 8008a54 <_dtoa_r+0x184>
 8008a4e:	9b00      	ldr	r3, [sp, #0]
 8008a50:	3b01      	subs	r3, #1
 8008a52:	9300      	str	r3, [sp, #0]
 8008a54:	9b00      	ldr	r3, [sp, #0]
 8008a56:	2b16      	cmp	r3, #22
 8008a58:	d85a      	bhi.n	8008b10 <_dtoa_r+0x240>
 8008a5a:	9a00      	ldr	r2, [sp, #0]
 8008a5c:	4b57      	ldr	r3, [pc, #348]	; (8008bbc <_dtoa_r+0x2ec>)
 8008a5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a66:	ec51 0b19 	vmov	r0, r1, d9
 8008a6a:	f7f8 f847 	bl	8000afc <__aeabi_dcmplt>
 8008a6e:	2800      	cmp	r0, #0
 8008a70:	d050      	beq.n	8008b14 <_dtoa_r+0x244>
 8008a72:	9b00      	ldr	r3, [sp, #0]
 8008a74:	3b01      	subs	r3, #1
 8008a76:	9300      	str	r3, [sp, #0]
 8008a78:	2300      	movs	r3, #0
 8008a7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a7e:	1b5d      	subs	r5, r3, r5
 8008a80:	1e6b      	subs	r3, r5, #1
 8008a82:	9305      	str	r3, [sp, #20]
 8008a84:	bf45      	ittet	mi
 8008a86:	f1c5 0301 	rsbmi	r3, r5, #1
 8008a8a:	9304      	strmi	r3, [sp, #16]
 8008a8c:	2300      	movpl	r3, #0
 8008a8e:	2300      	movmi	r3, #0
 8008a90:	bf4c      	ite	mi
 8008a92:	9305      	strmi	r3, [sp, #20]
 8008a94:	9304      	strpl	r3, [sp, #16]
 8008a96:	9b00      	ldr	r3, [sp, #0]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	db3d      	blt.n	8008b18 <_dtoa_r+0x248>
 8008a9c:	9b05      	ldr	r3, [sp, #20]
 8008a9e:	9a00      	ldr	r2, [sp, #0]
 8008aa0:	920a      	str	r2, [sp, #40]	; 0x28
 8008aa2:	4413      	add	r3, r2
 8008aa4:	9305      	str	r3, [sp, #20]
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	9307      	str	r3, [sp, #28]
 8008aaa:	9b06      	ldr	r3, [sp, #24]
 8008aac:	2b09      	cmp	r3, #9
 8008aae:	f200 8089 	bhi.w	8008bc4 <_dtoa_r+0x2f4>
 8008ab2:	2b05      	cmp	r3, #5
 8008ab4:	bfc4      	itt	gt
 8008ab6:	3b04      	subgt	r3, #4
 8008ab8:	9306      	strgt	r3, [sp, #24]
 8008aba:	9b06      	ldr	r3, [sp, #24]
 8008abc:	f1a3 0302 	sub.w	r3, r3, #2
 8008ac0:	bfcc      	ite	gt
 8008ac2:	2500      	movgt	r5, #0
 8008ac4:	2501      	movle	r5, #1
 8008ac6:	2b03      	cmp	r3, #3
 8008ac8:	f200 8087 	bhi.w	8008bda <_dtoa_r+0x30a>
 8008acc:	e8df f003 	tbb	[pc, r3]
 8008ad0:	59383a2d 	.word	0x59383a2d
 8008ad4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008ad8:	441d      	add	r5, r3
 8008ada:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008ade:	2b20      	cmp	r3, #32
 8008ae0:	bfc1      	itttt	gt
 8008ae2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008ae6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008aea:	fa0b f303 	lslgt.w	r3, fp, r3
 8008aee:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008af2:	bfda      	itte	le
 8008af4:	f1c3 0320 	rsble	r3, r3, #32
 8008af8:	fa06 f003 	lslle.w	r0, r6, r3
 8008afc:	4318      	orrgt	r0, r3
 8008afe:	f7f7 fd11 	bl	8000524 <__aeabi_ui2d>
 8008b02:	2301      	movs	r3, #1
 8008b04:	4606      	mov	r6, r0
 8008b06:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008b0a:	3d01      	subs	r5, #1
 8008b0c:	930e      	str	r3, [sp, #56]	; 0x38
 8008b0e:	e76a      	b.n	80089e6 <_dtoa_r+0x116>
 8008b10:	2301      	movs	r3, #1
 8008b12:	e7b2      	b.n	8008a7a <_dtoa_r+0x1aa>
 8008b14:	900b      	str	r0, [sp, #44]	; 0x2c
 8008b16:	e7b1      	b.n	8008a7c <_dtoa_r+0x1ac>
 8008b18:	9b04      	ldr	r3, [sp, #16]
 8008b1a:	9a00      	ldr	r2, [sp, #0]
 8008b1c:	1a9b      	subs	r3, r3, r2
 8008b1e:	9304      	str	r3, [sp, #16]
 8008b20:	4253      	negs	r3, r2
 8008b22:	9307      	str	r3, [sp, #28]
 8008b24:	2300      	movs	r3, #0
 8008b26:	930a      	str	r3, [sp, #40]	; 0x28
 8008b28:	e7bf      	b.n	8008aaa <_dtoa_r+0x1da>
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	9308      	str	r3, [sp, #32]
 8008b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	dc55      	bgt.n	8008be0 <_dtoa_r+0x310>
 8008b34:	2301      	movs	r3, #1
 8008b36:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	9209      	str	r2, [sp, #36]	; 0x24
 8008b3e:	e00c      	b.n	8008b5a <_dtoa_r+0x28a>
 8008b40:	2301      	movs	r3, #1
 8008b42:	e7f3      	b.n	8008b2c <_dtoa_r+0x25c>
 8008b44:	2300      	movs	r3, #0
 8008b46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b48:	9308      	str	r3, [sp, #32]
 8008b4a:	9b00      	ldr	r3, [sp, #0]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	9302      	str	r3, [sp, #8]
 8008b50:	3301      	adds	r3, #1
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	9303      	str	r3, [sp, #12]
 8008b56:	bfb8      	it	lt
 8008b58:	2301      	movlt	r3, #1
 8008b5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	6042      	str	r2, [r0, #4]
 8008b60:	2204      	movs	r2, #4
 8008b62:	f102 0614 	add.w	r6, r2, #20
 8008b66:	429e      	cmp	r6, r3
 8008b68:	6841      	ldr	r1, [r0, #4]
 8008b6a:	d93d      	bls.n	8008be8 <_dtoa_r+0x318>
 8008b6c:	4620      	mov	r0, r4
 8008b6e:	f001 fa5d 	bl	800a02c <_Balloc>
 8008b72:	9001      	str	r0, [sp, #4]
 8008b74:	2800      	cmp	r0, #0
 8008b76:	d13b      	bne.n	8008bf0 <_dtoa_r+0x320>
 8008b78:	4b11      	ldr	r3, [pc, #68]	; (8008bc0 <_dtoa_r+0x2f0>)
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008b80:	e6c0      	b.n	8008904 <_dtoa_r+0x34>
 8008b82:	2301      	movs	r3, #1
 8008b84:	e7df      	b.n	8008b46 <_dtoa_r+0x276>
 8008b86:	bf00      	nop
 8008b88:	636f4361 	.word	0x636f4361
 8008b8c:	3fd287a7 	.word	0x3fd287a7
 8008b90:	8b60c8b3 	.word	0x8b60c8b3
 8008b94:	3fc68a28 	.word	0x3fc68a28
 8008b98:	509f79fb 	.word	0x509f79fb
 8008b9c:	3fd34413 	.word	0x3fd34413
 8008ba0:	0800bd2d 	.word	0x0800bd2d
 8008ba4:	0800bd44 	.word	0x0800bd44
 8008ba8:	7ff00000 	.word	0x7ff00000
 8008bac:	0800bd29 	.word	0x0800bd29
 8008bb0:	0800bd20 	.word	0x0800bd20
 8008bb4:	0800bca5 	.word	0x0800bca5
 8008bb8:	3ff80000 	.word	0x3ff80000
 8008bbc:	0800bf10 	.word	0x0800bf10
 8008bc0:	0800bd9f 	.word	0x0800bd9f
 8008bc4:	2501      	movs	r5, #1
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	9306      	str	r3, [sp, #24]
 8008bca:	9508      	str	r5, [sp, #32]
 8008bcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008bd0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	2312      	movs	r3, #18
 8008bd8:	e7b0      	b.n	8008b3c <_dtoa_r+0x26c>
 8008bda:	2301      	movs	r3, #1
 8008bdc:	9308      	str	r3, [sp, #32]
 8008bde:	e7f5      	b.n	8008bcc <_dtoa_r+0x2fc>
 8008be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008be2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008be6:	e7b8      	b.n	8008b5a <_dtoa_r+0x28a>
 8008be8:	3101      	adds	r1, #1
 8008bea:	6041      	str	r1, [r0, #4]
 8008bec:	0052      	lsls	r2, r2, #1
 8008bee:	e7b8      	b.n	8008b62 <_dtoa_r+0x292>
 8008bf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bf2:	9a01      	ldr	r2, [sp, #4]
 8008bf4:	601a      	str	r2, [r3, #0]
 8008bf6:	9b03      	ldr	r3, [sp, #12]
 8008bf8:	2b0e      	cmp	r3, #14
 8008bfa:	f200 809d 	bhi.w	8008d38 <_dtoa_r+0x468>
 8008bfe:	2d00      	cmp	r5, #0
 8008c00:	f000 809a 	beq.w	8008d38 <_dtoa_r+0x468>
 8008c04:	9b00      	ldr	r3, [sp, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	dd32      	ble.n	8008c70 <_dtoa_r+0x3a0>
 8008c0a:	4ab7      	ldr	r2, [pc, #732]	; (8008ee8 <_dtoa_r+0x618>)
 8008c0c:	f003 030f 	and.w	r3, r3, #15
 8008c10:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008c14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c18:	9b00      	ldr	r3, [sp, #0]
 8008c1a:	05d8      	lsls	r0, r3, #23
 8008c1c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008c20:	d516      	bpl.n	8008c50 <_dtoa_r+0x380>
 8008c22:	4bb2      	ldr	r3, [pc, #712]	; (8008eec <_dtoa_r+0x61c>)
 8008c24:	ec51 0b19 	vmov	r0, r1, d9
 8008c28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008c2c:	f7f7 fe1e 	bl	800086c <__aeabi_ddiv>
 8008c30:	f007 070f 	and.w	r7, r7, #15
 8008c34:	4682      	mov	sl, r0
 8008c36:	468b      	mov	fp, r1
 8008c38:	2503      	movs	r5, #3
 8008c3a:	4eac      	ldr	r6, [pc, #688]	; (8008eec <_dtoa_r+0x61c>)
 8008c3c:	b957      	cbnz	r7, 8008c54 <_dtoa_r+0x384>
 8008c3e:	4642      	mov	r2, r8
 8008c40:	464b      	mov	r3, r9
 8008c42:	4650      	mov	r0, sl
 8008c44:	4659      	mov	r1, fp
 8008c46:	f7f7 fe11 	bl	800086c <__aeabi_ddiv>
 8008c4a:	4682      	mov	sl, r0
 8008c4c:	468b      	mov	fp, r1
 8008c4e:	e028      	b.n	8008ca2 <_dtoa_r+0x3d2>
 8008c50:	2502      	movs	r5, #2
 8008c52:	e7f2      	b.n	8008c3a <_dtoa_r+0x36a>
 8008c54:	07f9      	lsls	r1, r7, #31
 8008c56:	d508      	bpl.n	8008c6a <_dtoa_r+0x39a>
 8008c58:	4640      	mov	r0, r8
 8008c5a:	4649      	mov	r1, r9
 8008c5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008c60:	f7f7 fcda 	bl	8000618 <__aeabi_dmul>
 8008c64:	3501      	adds	r5, #1
 8008c66:	4680      	mov	r8, r0
 8008c68:	4689      	mov	r9, r1
 8008c6a:	107f      	asrs	r7, r7, #1
 8008c6c:	3608      	adds	r6, #8
 8008c6e:	e7e5      	b.n	8008c3c <_dtoa_r+0x36c>
 8008c70:	f000 809b 	beq.w	8008daa <_dtoa_r+0x4da>
 8008c74:	9b00      	ldr	r3, [sp, #0]
 8008c76:	4f9d      	ldr	r7, [pc, #628]	; (8008eec <_dtoa_r+0x61c>)
 8008c78:	425e      	negs	r6, r3
 8008c7a:	4b9b      	ldr	r3, [pc, #620]	; (8008ee8 <_dtoa_r+0x618>)
 8008c7c:	f006 020f 	and.w	r2, r6, #15
 8008c80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c88:	ec51 0b19 	vmov	r0, r1, d9
 8008c8c:	f7f7 fcc4 	bl	8000618 <__aeabi_dmul>
 8008c90:	1136      	asrs	r6, r6, #4
 8008c92:	4682      	mov	sl, r0
 8008c94:	468b      	mov	fp, r1
 8008c96:	2300      	movs	r3, #0
 8008c98:	2502      	movs	r5, #2
 8008c9a:	2e00      	cmp	r6, #0
 8008c9c:	d17a      	bne.n	8008d94 <_dtoa_r+0x4c4>
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d1d3      	bne.n	8008c4a <_dtoa_r+0x37a>
 8008ca2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	f000 8082 	beq.w	8008dae <_dtoa_r+0x4de>
 8008caa:	4b91      	ldr	r3, [pc, #580]	; (8008ef0 <_dtoa_r+0x620>)
 8008cac:	2200      	movs	r2, #0
 8008cae:	4650      	mov	r0, sl
 8008cb0:	4659      	mov	r1, fp
 8008cb2:	f7f7 ff23 	bl	8000afc <__aeabi_dcmplt>
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	d079      	beq.n	8008dae <_dtoa_r+0x4de>
 8008cba:	9b03      	ldr	r3, [sp, #12]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d076      	beq.n	8008dae <_dtoa_r+0x4de>
 8008cc0:	9b02      	ldr	r3, [sp, #8]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	dd36      	ble.n	8008d34 <_dtoa_r+0x464>
 8008cc6:	9b00      	ldr	r3, [sp, #0]
 8008cc8:	4650      	mov	r0, sl
 8008cca:	4659      	mov	r1, fp
 8008ccc:	1e5f      	subs	r7, r3, #1
 8008cce:	2200      	movs	r2, #0
 8008cd0:	4b88      	ldr	r3, [pc, #544]	; (8008ef4 <_dtoa_r+0x624>)
 8008cd2:	f7f7 fca1 	bl	8000618 <__aeabi_dmul>
 8008cd6:	9e02      	ldr	r6, [sp, #8]
 8008cd8:	4682      	mov	sl, r0
 8008cda:	468b      	mov	fp, r1
 8008cdc:	3501      	adds	r5, #1
 8008cde:	4628      	mov	r0, r5
 8008ce0:	f7f7 fc30 	bl	8000544 <__aeabi_i2d>
 8008ce4:	4652      	mov	r2, sl
 8008ce6:	465b      	mov	r3, fp
 8008ce8:	f7f7 fc96 	bl	8000618 <__aeabi_dmul>
 8008cec:	4b82      	ldr	r3, [pc, #520]	; (8008ef8 <_dtoa_r+0x628>)
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f7f7 fadc 	bl	80002ac <__adddf3>
 8008cf4:	46d0      	mov	r8, sl
 8008cf6:	46d9      	mov	r9, fp
 8008cf8:	4682      	mov	sl, r0
 8008cfa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008cfe:	2e00      	cmp	r6, #0
 8008d00:	d158      	bne.n	8008db4 <_dtoa_r+0x4e4>
 8008d02:	4b7e      	ldr	r3, [pc, #504]	; (8008efc <_dtoa_r+0x62c>)
 8008d04:	2200      	movs	r2, #0
 8008d06:	4640      	mov	r0, r8
 8008d08:	4649      	mov	r1, r9
 8008d0a:	f7f7 facd 	bl	80002a8 <__aeabi_dsub>
 8008d0e:	4652      	mov	r2, sl
 8008d10:	465b      	mov	r3, fp
 8008d12:	4680      	mov	r8, r0
 8008d14:	4689      	mov	r9, r1
 8008d16:	f7f7 ff0f 	bl	8000b38 <__aeabi_dcmpgt>
 8008d1a:	2800      	cmp	r0, #0
 8008d1c:	f040 8295 	bne.w	800924a <_dtoa_r+0x97a>
 8008d20:	4652      	mov	r2, sl
 8008d22:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008d26:	4640      	mov	r0, r8
 8008d28:	4649      	mov	r1, r9
 8008d2a:	f7f7 fee7 	bl	8000afc <__aeabi_dcmplt>
 8008d2e:	2800      	cmp	r0, #0
 8008d30:	f040 8289 	bne.w	8009246 <_dtoa_r+0x976>
 8008d34:	ec5b ab19 	vmov	sl, fp, d9
 8008d38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	f2c0 8148 	blt.w	8008fd0 <_dtoa_r+0x700>
 8008d40:	9a00      	ldr	r2, [sp, #0]
 8008d42:	2a0e      	cmp	r2, #14
 8008d44:	f300 8144 	bgt.w	8008fd0 <_dtoa_r+0x700>
 8008d48:	4b67      	ldr	r3, [pc, #412]	; (8008ee8 <_dtoa_r+0x618>)
 8008d4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d4e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	f280 80d5 	bge.w	8008f04 <_dtoa_r+0x634>
 8008d5a:	9b03      	ldr	r3, [sp, #12]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	f300 80d1 	bgt.w	8008f04 <_dtoa_r+0x634>
 8008d62:	f040 826f 	bne.w	8009244 <_dtoa_r+0x974>
 8008d66:	4b65      	ldr	r3, [pc, #404]	; (8008efc <_dtoa_r+0x62c>)
 8008d68:	2200      	movs	r2, #0
 8008d6a:	4640      	mov	r0, r8
 8008d6c:	4649      	mov	r1, r9
 8008d6e:	f7f7 fc53 	bl	8000618 <__aeabi_dmul>
 8008d72:	4652      	mov	r2, sl
 8008d74:	465b      	mov	r3, fp
 8008d76:	f7f7 fed5 	bl	8000b24 <__aeabi_dcmpge>
 8008d7a:	9e03      	ldr	r6, [sp, #12]
 8008d7c:	4637      	mov	r7, r6
 8008d7e:	2800      	cmp	r0, #0
 8008d80:	f040 8245 	bne.w	800920e <_dtoa_r+0x93e>
 8008d84:	9d01      	ldr	r5, [sp, #4]
 8008d86:	2331      	movs	r3, #49	; 0x31
 8008d88:	f805 3b01 	strb.w	r3, [r5], #1
 8008d8c:	9b00      	ldr	r3, [sp, #0]
 8008d8e:	3301      	adds	r3, #1
 8008d90:	9300      	str	r3, [sp, #0]
 8008d92:	e240      	b.n	8009216 <_dtoa_r+0x946>
 8008d94:	07f2      	lsls	r2, r6, #31
 8008d96:	d505      	bpl.n	8008da4 <_dtoa_r+0x4d4>
 8008d98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d9c:	f7f7 fc3c 	bl	8000618 <__aeabi_dmul>
 8008da0:	3501      	adds	r5, #1
 8008da2:	2301      	movs	r3, #1
 8008da4:	1076      	asrs	r6, r6, #1
 8008da6:	3708      	adds	r7, #8
 8008da8:	e777      	b.n	8008c9a <_dtoa_r+0x3ca>
 8008daa:	2502      	movs	r5, #2
 8008dac:	e779      	b.n	8008ca2 <_dtoa_r+0x3d2>
 8008dae:	9f00      	ldr	r7, [sp, #0]
 8008db0:	9e03      	ldr	r6, [sp, #12]
 8008db2:	e794      	b.n	8008cde <_dtoa_r+0x40e>
 8008db4:	9901      	ldr	r1, [sp, #4]
 8008db6:	4b4c      	ldr	r3, [pc, #304]	; (8008ee8 <_dtoa_r+0x618>)
 8008db8:	4431      	add	r1, r6
 8008dba:	910d      	str	r1, [sp, #52]	; 0x34
 8008dbc:	9908      	ldr	r1, [sp, #32]
 8008dbe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008dc2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008dc6:	2900      	cmp	r1, #0
 8008dc8:	d043      	beq.n	8008e52 <_dtoa_r+0x582>
 8008dca:	494d      	ldr	r1, [pc, #308]	; (8008f00 <_dtoa_r+0x630>)
 8008dcc:	2000      	movs	r0, #0
 8008dce:	f7f7 fd4d 	bl	800086c <__aeabi_ddiv>
 8008dd2:	4652      	mov	r2, sl
 8008dd4:	465b      	mov	r3, fp
 8008dd6:	f7f7 fa67 	bl	80002a8 <__aeabi_dsub>
 8008dda:	9d01      	ldr	r5, [sp, #4]
 8008ddc:	4682      	mov	sl, r0
 8008dde:	468b      	mov	fp, r1
 8008de0:	4649      	mov	r1, r9
 8008de2:	4640      	mov	r0, r8
 8008de4:	f7f7 fec8 	bl	8000b78 <__aeabi_d2iz>
 8008de8:	4606      	mov	r6, r0
 8008dea:	f7f7 fbab 	bl	8000544 <__aeabi_i2d>
 8008dee:	4602      	mov	r2, r0
 8008df0:	460b      	mov	r3, r1
 8008df2:	4640      	mov	r0, r8
 8008df4:	4649      	mov	r1, r9
 8008df6:	f7f7 fa57 	bl	80002a8 <__aeabi_dsub>
 8008dfa:	3630      	adds	r6, #48	; 0x30
 8008dfc:	f805 6b01 	strb.w	r6, [r5], #1
 8008e00:	4652      	mov	r2, sl
 8008e02:	465b      	mov	r3, fp
 8008e04:	4680      	mov	r8, r0
 8008e06:	4689      	mov	r9, r1
 8008e08:	f7f7 fe78 	bl	8000afc <__aeabi_dcmplt>
 8008e0c:	2800      	cmp	r0, #0
 8008e0e:	d163      	bne.n	8008ed8 <_dtoa_r+0x608>
 8008e10:	4642      	mov	r2, r8
 8008e12:	464b      	mov	r3, r9
 8008e14:	4936      	ldr	r1, [pc, #216]	; (8008ef0 <_dtoa_r+0x620>)
 8008e16:	2000      	movs	r0, #0
 8008e18:	f7f7 fa46 	bl	80002a8 <__aeabi_dsub>
 8008e1c:	4652      	mov	r2, sl
 8008e1e:	465b      	mov	r3, fp
 8008e20:	f7f7 fe6c 	bl	8000afc <__aeabi_dcmplt>
 8008e24:	2800      	cmp	r0, #0
 8008e26:	f040 80b5 	bne.w	8008f94 <_dtoa_r+0x6c4>
 8008e2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e2c:	429d      	cmp	r5, r3
 8008e2e:	d081      	beq.n	8008d34 <_dtoa_r+0x464>
 8008e30:	4b30      	ldr	r3, [pc, #192]	; (8008ef4 <_dtoa_r+0x624>)
 8008e32:	2200      	movs	r2, #0
 8008e34:	4650      	mov	r0, sl
 8008e36:	4659      	mov	r1, fp
 8008e38:	f7f7 fbee 	bl	8000618 <__aeabi_dmul>
 8008e3c:	4b2d      	ldr	r3, [pc, #180]	; (8008ef4 <_dtoa_r+0x624>)
 8008e3e:	4682      	mov	sl, r0
 8008e40:	468b      	mov	fp, r1
 8008e42:	4640      	mov	r0, r8
 8008e44:	4649      	mov	r1, r9
 8008e46:	2200      	movs	r2, #0
 8008e48:	f7f7 fbe6 	bl	8000618 <__aeabi_dmul>
 8008e4c:	4680      	mov	r8, r0
 8008e4e:	4689      	mov	r9, r1
 8008e50:	e7c6      	b.n	8008de0 <_dtoa_r+0x510>
 8008e52:	4650      	mov	r0, sl
 8008e54:	4659      	mov	r1, fp
 8008e56:	f7f7 fbdf 	bl	8000618 <__aeabi_dmul>
 8008e5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e5c:	9d01      	ldr	r5, [sp, #4]
 8008e5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e60:	4682      	mov	sl, r0
 8008e62:	468b      	mov	fp, r1
 8008e64:	4649      	mov	r1, r9
 8008e66:	4640      	mov	r0, r8
 8008e68:	f7f7 fe86 	bl	8000b78 <__aeabi_d2iz>
 8008e6c:	4606      	mov	r6, r0
 8008e6e:	f7f7 fb69 	bl	8000544 <__aeabi_i2d>
 8008e72:	3630      	adds	r6, #48	; 0x30
 8008e74:	4602      	mov	r2, r0
 8008e76:	460b      	mov	r3, r1
 8008e78:	4640      	mov	r0, r8
 8008e7a:	4649      	mov	r1, r9
 8008e7c:	f7f7 fa14 	bl	80002a8 <__aeabi_dsub>
 8008e80:	f805 6b01 	strb.w	r6, [r5], #1
 8008e84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e86:	429d      	cmp	r5, r3
 8008e88:	4680      	mov	r8, r0
 8008e8a:	4689      	mov	r9, r1
 8008e8c:	f04f 0200 	mov.w	r2, #0
 8008e90:	d124      	bne.n	8008edc <_dtoa_r+0x60c>
 8008e92:	4b1b      	ldr	r3, [pc, #108]	; (8008f00 <_dtoa_r+0x630>)
 8008e94:	4650      	mov	r0, sl
 8008e96:	4659      	mov	r1, fp
 8008e98:	f7f7 fa08 	bl	80002ac <__adddf3>
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	460b      	mov	r3, r1
 8008ea0:	4640      	mov	r0, r8
 8008ea2:	4649      	mov	r1, r9
 8008ea4:	f7f7 fe48 	bl	8000b38 <__aeabi_dcmpgt>
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	d173      	bne.n	8008f94 <_dtoa_r+0x6c4>
 8008eac:	4652      	mov	r2, sl
 8008eae:	465b      	mov	r3, fp
 8008eb0:	4913      	ldr	r1, [pc, #76]	; (8008f00 <_dtoa_r+0x630>)
 8008eb2:	2000      	movs	r0, #0
 8008eb4:	f7f7 f9f8 	bl	80002a8 <__aeabi_dsub>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	460b      	mov	r3, r1
 8008ebc:	4640      	mov	r0, r8
 8008ebe:	4649      	mov	r1, r9
 8008ec0:	f7f7 fe1c 	bl	8000afc <__aeabi_dcmplt>
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	f43f af35 	beq.w	8008d34 <_dtoa_r+0x464>
 8008eca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008ecc:	1e6b      	subs	r3, r5, #1
 8008ece:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ed0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008ed4:	2b30      	cmp	r3, #48	; 0x30
 8008ed6:	d0f8      	beq.n	8008eca <_dtoa_r+0x5fa>
 8008ed8:	9700      	str	r7, [sp, #0]
 8008eda:	e049      	b.n	8008f70 <_dtoa_r+0x6a0>
 8008edc:	4b05      	ldr	r3, [pc, #20]	; (8008ef4 <_dtoa_r+0x624>)
 8008ede:	f7f7 fb9b 	bl	8000618 <__aeabi_dmul>
 8008ee2:	4680      	mov	r8, r0
 8008ee4:	4689      	mov	r9, r1
 8008ee6:	e7bd      	b.n	8008e64 <_dtoa_r+0x594>
 8008ee8:	0800bf10 	.word	0x0800bf10
 8008eec:	0800bee8 	.word	0x0800bee8
 8008ef0:	3ff00000 	.word	0x3ff00000
 8008ef4:	40240000 	.word	0x40240000
 8008ef8:	401c0000 	.word	0x401c0000
 8008efc:	40140000 	.word	0x40140000
 8008f00:	3fe00000 	.word	0x3fe00000
 8008f04:	9d01      	ldr	r5, [sp, #4]
 8008f06:	4656      	mov	r6, sl
 8008f08:	465f      	mov	r7, fp
 8008f0a:	4642      	mov	r2, r8
 8008f0c:	464b      	mov	r3, r9
 8008f0e:	4630      	mov	r0, r6
 8008f10:	4639      	mov	r1, r7
 8008f12:	f7f7 fcab 	bl	800086c <__aeabi_ddiv>
 8008f16:	f7f7 fe2f 	bl	8000b78 <__aeabi_d2iz>
 8008f1a:	4682      	mov	sl, r0
 8008f1c:	f7f7 fb12 	bl	8000544 <__aeabi_i2d>
 8008f20:	4642      	mov	r2, r8
 8008f22:	464b      	mov	r3, r9
 8008f24:	f7f7 fb78 	bl	8000618 <__aeabi_dmul>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	4630      	mov	r0, r6
 8008f2e:	4639      	mov	r1, r7
 8008f30:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008f34:	f7f7 f9b8 	bl	80002a8 <__aeabi_dsub>
 8008f38:	f805 6b01 	strb.w	r6, [r5], #1
 8008f3c:	9e01      	ldr	r6, [sp, #4]
 8008f3e:	9f03      	ldr	r7, [sp, #12]
 8008f40:	1bae      	subs	r6, r5, r6
 8008f42:	42b7      	cmp	r7, r6
 8008f44:	4602      	mov	r2, r0
 8008f46:	460b      	mov	r3, r1
 8008f48:	d135      	bne.n	8008fb6 <_dtoa_r+0x6e6>
 8008f4a:	f7f7 f9af 	bl	80002ac <__adddf3>
 8008f4e:	4642      	mov	r2, r8
 8008f50:	464b      	mov	r3, r9
 8008f52:	4606      	mov	r6, r0
 8008f54:	460f      	mov	r7, r1
 8008f56:	f7f7 fdef 	bl	8000b38 <__aeabi_dcmpgt>
 8008f5a:	b9d0      	cbnz	r0, 8008f92 <_dtoa_r+0x6c2>
 8008f5c:	4642      	mov	r2, r8
 8008f5e:	464b      	mov	r3, r9
 8008f60:	4630      	mov	r0, r6
 8008f62:	4639      	mov	r1, r7
 8008f64:	f7f7 fdc0 	bl	8000ae8 <__aeabi_dcmpeq>
 8008f68:	b110      	cbz	r0, 8008f70 <_dtoa_r+0x6a0>
 8008f6a:	f01a 0f01 	tst.w	sl, #1
 8008f6e:	d110      	bne.n	8008f92 <_dtoa_r+0x6c2>
 8008f70:	4620      	mov	r0, r4
 8008f72:	ee18 1a10 	vmov	r1, s16
 8008f76:	f001 f899 	bl	800a0ac <_Bfree>
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	9800      	ldr	r0, [sp, #0]
 8008f7e:	702b      	strb	r3, [r5, #0]
 8008f80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f82:	3001      	adds	r0, #1
 8008f84:	6018      	str	r0, [r3, #0]
 8008f86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f43f acf1 	beq.w	8008970 <_dtoa_r+0xa0>
 8008f8e:	601d      	str	r5, [r3, #0]
 8008f90:	e4ee      	b.n	8008970 <_dtoa_r+0xa0>
 8008f92:	9f00      	ldr	r7, [sp, #0]
 8008f94:	462b      	mov	r3, r5
 8008f96:	461d      	mov	r5, r3
 8008f98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f9c:	2a39      	cmp	r2, #57	; 0x39
 8008f9e:	d106      	bne.n	8008fae <_dtoa_r+0x6de>
 8008fa0:	9a01      	ldr	r2, [sp, #4]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d1f7      	bne.n	8008f96 <_dtoa_r+0x6c6>
 8008fa6:	9901      	ldr	r1, [sp, #4]
 8008fa8:	2230      	movs	r2, #48	; 0x30
 8008faa:	3701      	adds	r7, #1
 8008fac:	700a      	strb	r2, [r1, #0]
 8008fae:	781a      	ldrb	r2, [r3, #0]
 8008fb0:	3201      	adds	r2, #1
 8008fb2:	701a      	strb	r2, [r3, #0]
 8008fb4:	e790      	b.n	8008ed8 <_dtoa_r+0x608>
 8008fb6:	4ba6      	ldr	r3, [pc, #664]	; (8009250 <_dtoa_r+0x980>)
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f7f7 fb2d 	bl	8000618 <__aeabi_dmul>
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	4606      	mov	r6, r0
 8008fc4:	460f      	mov	r7, r1
 8008fc6:	f7f7 fd8f 	bl	8000ae8 <__aeabi_dcmpeq>
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	d09d      	beq.n	8008f0a <_dtoa_r+0x63a>
 8008fce:	e7cf      	b.n	8008f70 <_dtoa_r+0x6a0>
 8008fd0:	9a08      	ldr	r2, [sp, #32]
 8008fd2:	2a00      	cmp	r2, #0
 8008fd4:	f000 80d7 	beq.w	8009186 <_dtoa_r+0x8b6>
 8008fd8:	9a06      	ldr	r2, [sp, #24]
 8008fda:	2a01      	cmp	r2, #1
 8008fdc:	f300 80ba 	bgt.w	8009154 <_dtoa_r+0x884>
 8008fe0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008fe2:	2a00      	cmp	r2, #0
 8008fe4:	f000 80b2 	beq.w	800914c <_dtoa_r+0x87c>
 8008fe8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008fec:	9e07      	ldr	r6, [sp, #28]
 8008fee:	9d04      	ldr	r5, [sp, #16]
 8008ff0:	9a04      	ldr	r2, [sp, #16]
 8008ff2:	441a      	add	r2, r3
 8008ff4:	9204      	str	r2, [sp, #16]
 8008ff6:	9a05      	ldr	r2, [sp, #20]
 8008ff8:	2101      	movs	r1, #1
 8008ffa:	441a      	add	r2, r3
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	9205      	str	r2, [sp, #20]
 8009000:	f001 f956 	bl	800a2b0 <__i2b>
 8009004:	4607      	mov	r7, r0
 8009006:	2d00      	cmp	r5, #0
 8009008:	dd0c      	ble.n	8009024 <_dtoa_r+0x754>
 800900a:	9b05      	ldr	r3, [sp, #20]
 800900c:	2b00      	cmp	r3, #0
 800900e:	dd09      	ble.n	8009024 <_dtoa_r+0x754>
 8009010:	42ab      	cmp	r3, r5
 8009012:	9a04      	ldr	r2, [sp, #16]
 8009014:	bfa8      	it	ge
 8009016:	462b      	movge	r3, r5
 8009018:	1ad2      	subs	r2, r2, r3
 800901a:	9204      	str	r2, [sp, #16]
 800901c:	9a05      	ldr	r2, [sp, #20]
 800901e:	1aed      	subs	r5, r5, r3
 8009020:	1ad3      	subs	r3, r2, r3
 8009022:	9305      	str	r3, [sp, #20]
 8009024:	9b07      	ldr	r3, [sp, #28]
 8009026:	b31b      	cbz	r3, 8009070 <_dtoa_r+0x7a0>
 8009028:	9b08      	ldr	r3, [sp, #32]
 800902a:	2b00      	cmp	r3, #0
 800902c:	f000 80af 	beq.w	800918e <_dtoa_r+0x8be>
 8009030:	2e00      	cmp	r6, #0
 8009032:	dd13      	ble.n	800905c <_dtoa_r+0x78c>
 8009034:	4639      	mov	r1, r7
 8009036:	4632      	mov	r2, r6
 8009038:	4620      	mov	r0, r4
 800903a:	f001 f9f9 	bl	800a430 <__pow5mult>
 800903e:	ee18 2a10 	vmov	r2, s16
 8009042:	4601      	mov	r1, r0
 8009044:	4607      	mov	r7, r0
 8009046:	4620      	mov	r0, r4
 8009048:	f001 f948 	bl	800a2dc <__multiply>
 800904c:	ee18 1a10 	vmov	r1, s16
 8009050:	4680      	mov	r8, r0
 8009052:	4620      	mov	r0, r4
 8009054:	f001 f82a 	bl	800a0ac <_Bfree>
 8009058:	ee08 8a10 	vmov	s16, r8
 800905c:	9b07      	ldr	r3, [sp, #28]
 800905e:	1b9a      	subs	r2, r3, r6
 8009060:	d006      	beq.n	8009070 <_dtoa_r+0x7a0>
 8009062:	ee18 1a10 	vmov	r1, s16
 8009066:	4620      	mov	r0, r4
 8009068:	f001 f9e2 	bl	800a430 <__pow5mult>
 800906c:	ee08 0a10 	vmov	s16, r0
 8009070:	2101      	movs	r1, #1
 8009072:	4620      	mov	r0, r4
 8009074:	f001 f91c 	bl	800a2b0 <__i2b>
 8009078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800907a:	2b00      	cmp	r3, #0
 800907c:	4606      	mov	r6, r0
 800907e:	f340 8088 	ble.w	8009192 <_dtoa_r+0x8c2>
 8009082:	461a      	mov	r2, r3
 8009084:	4601      	mov	r1, r0
 8009086:	4620      	mov	r0, r4
 8009088:	f001 f9d2 	bl	800a430 <__pow5mult>
 800908c:	9b06      	ldr	r3, [sp, #24]
 800908e:	2b01      	cmp	r3, #1
 8009090:	4606      	mov	r6, r0
 8009092:	f340 8081 	ble.w	8009198 <_dtoa_r+0x8c8>
 8009096:	f04f 0800 	mov.w	r8, #0
 800909a:	6933      	ldr	r3, [r6, #16]
 800909c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80090a0:	6918      	ldr	r0, [r3, #16]
 80090a2:	f001 f8b5 	bl	800a210 <__hi0bits>
 80090a6:	f1c0 0020 	rsb	r0, r0, #32
 80090aa:	9b05      	ldr	r3, [sp, #20]
 80090ac:	4418      	add	r0, r3
 80090ae:	f010 001f 	ands.w	r0, r0, #31
 80090b2:	f000 8092 	beq.w	80091da <_dtoa_r+0x90a>
 80090b6:	f1c0 0320 	rsb	r3, r0, #32
 80090ba:	2b04      	cmp	r3, #4
 80090bc:	f340 808a 	ble.w	80091d4 <_dtoa_r+0x904>
 80090c0:	f1c0 001c 	rsb	r0, r0, #28
 80090c4:	9b04      	ldr	r3, [sp, #16]
 80090c6:	4403      	add	r3, r0
 80090c8:	9304      	str	r3, [sp, #16]
 80090ca:	9b05      	ldr	r3, [sp, #20]
 80090cc:	4403      	add	r3, r0
 80090ce:	4405      	add	r5, r0
 80090d0:	9305      	str	r3, [sp, #20]
 80090d2:	9b04      	ldr	r3, [sp, #16]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	dd07      	ble.n	80090e8 <_dtoa_r+0x818>
 80090d8:	ee18 1a10 	vmov	r1, s16
 80090dc:	461a      	mov	r2, r3
 80090de:	4620      	mov	r0, r4
 80090e0:	f001 fa00 	bl	800a4e4 <__lshift>
 80090e4:	ee08 0a10 	vmov	s16, r0
 80090e8:	9b05      	ldr	r3, [sp, #20]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	dd05      	ble.n	80090fa <_dtoa_r+0x82a>
 80090ee:	4631      	mov	r1, r6
 80090f0:	461a      	mov	r2, r3
 80090f2:	4620      	mov	r0, r4
 80090f4:	f001 f9f6 	bl	800a4e4 <__lshift>
 80090f8:	4606      	mov	r6, r0
 80090fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d06e      	beq.n	80091de <_dtoa_r+0x90e>
 8009100:	ee18 0a10 	vmov	r0, s16
 8009104:	4631      	mov	r1, r6
 8009106:	f001 fa5d 	bl	800a5c4 <__mcmp>
 800910a:	2800      	cmp	r0, #0
 800910c:	da67      	bge.n	80091de <_dtoa_r+0x90e>
 800910e:	9b00      	ldr	r3, [sp, #0]
 8009110:	3b01      	subs	r3, #1
 8009112:	ee18 1a10 	vmov	r1, s16
 8009116:	9300      	str	r3, [sp, #0]
 8009118:	220a      	movs	r2, #10
 800911a:	2300      	movs	r3, #0
 800911c:	4620      	mov	r0, r4
 800911e:	f000 ffe7 	bl	800a0f0 <__multadd>
 8009122:	9b08      	ldr	r3, [sp, #32]
 8009124:	ee08 0a10 	vmov	s16, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	f000 81b1 	beq.w	8009490 <_dtoa_r+0xbc0>
 800912e:	2300      	movs	r3, #0
 8009130:	4639      	mov	r1, r7
 8009132:	220a      	movs	r2, #10
 8009134:	4620      	mov	r0, r4
 8009136:	f000 ffdb 	bl	800a0f0 <__multadd>
 800913a:	9b02      	ldr	r3, [sp, #8]
 800913c:	2b00      	cmp	r3, #0
 800913e:	4607      	mov	r7, r0
 8009140:	f300 808e 	bgt.w	8009260 <_dtoa_r+0x990>
 8009144:	9b06      	ldr	r3, [sp, #24]
 8009146:	2b02      	cmp	r3, #2
 8009148:	dc51      	bgt.n	80091ee <_dtoa_r+0x91e>
 800914a:	e089      	b.n	8009260 <_dtoa_r+0x990>
 800914c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800914e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009152:	e74b      	b.n	8008fec <_dtoa_r+0x71c>
 8009154:	9b03      	ldr	r3, [sp, #12]
 8009156:	1e5e      	subs	r6, r3, #1
 8009158:	9b07      	ldr	r3, [sp, #28]
 800915a:	42b3      	cmp	r3, r6
 800915c:	bfbf      	itttt	lt
 800915e:	9b07      	ldrlt	r3, [sp, #28]
 8009160:	9607      	strlt	r6, [sp, #28]
 8009162:	1af2      	sublt	r2, r6, r3
 8009164:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009166:	bfb6      	itet	lt
 8009168:	189b      	addlt	r3, r3, r2
 800916a:	1b9e      	subge	r6, r3, r6
 800916c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800916e:	9b03      	ldr	r3, [sp, #12]
 8009170:	bfb8      	it	lt
 8009172:	2600      	movlt	r6, #0
 8009174:	2b00      	cmp	r3, #0
 8009176:	bfb7      	itett	lt
 8009178:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800917c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009180:	1a9d      	sublt	r5, r3, r2
 8009182:	2300      	movlt	r3, #0
 8009184:	e734      	b.n	8008ff0 <_dtoa_r+0x720>
 8009186:	9e07      	ldr	r6, [sp, #28]
 8009188:	9d04      	ldr	r5, [sp, #16]
 800918a:	9f08      	ldr	r7, [sp, #32]
 800918c:	e73b      	b.n	8009006 <_dtoa_r+0x736>
 800918e:	9a07      	ldr	r2, [sp, #28]
 8009190:	e767      	b.n	8009062 <_dtoa_r+0x792>
 8009192:	9b06      	ldr	r3, [sp, #24]
 8009194:	2b01      	cmp	r3, #1
 8009196:	dc18      	bgt.n	80091ca <_dtoa_r+0x8fa>
 8009198:	f1ba 0f00 	cmp.w	sl, #0
 800919c:	d115      	bne.n	80091ca <_dtoa_r+0x8fa>
 800919e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80091a2:	b993      	cbnz	r3, 80091ca <_dtoa_r+0x8fa>
 80091a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80091a8:	0d1b      	lsrs	r3, r3, #20
 80091aa:	051b      	lsls	r3, r3, #20
 80091ac:	b183      	cbz	r3, 80091d0 <_dtoa_r+0x900>
 80091ae:	9b04      	ldr	r3, [sp, #16]
 80091b0:	3301      	adds	r3, #1
 80091b2:	9304      	str	r3, [sp, #16]
 80091b4:	9b05      	ldr	r3, [sp, #20]
 80091b6:	3301      	adds	r3, #1
 80091b8:	9305      	str	r3, [sp, #20]
 80091ba:	f04f 0801 	mov.w	r8, #1
 80091be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f47f af6a 	bne.w	800909a <_dtoa_r+0x7ca>
 80091c6:	2001      	movs	r0, #1
 80091c8:	e76f      	b.n	80090aa <_dtoa_r+0x7da>
 80091ca:	f04f 0800 	mov.w	r8, #0
 80091ce:	e7f6      	b.n	80091be <_dtoa_r+0x8ee>
 80091d0:	4698      	mov	r8, r3
 80091d2:	e7f4      	b.n	80091be <_dtoa_r+0x8ee>
 80091d4:	f43f af7d 	beq.w	80090d2 <_dtoa_r+0x802>
 80091d8:	4618      	mov	r0, r3
 80091da:	301c      	adds	r0, #28
 80091dc:	e772      	b.n	80090c4 <_dtoa_r+0x7f4>
 80091de:	9b03      	ldr	r3, [sp, #12]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	dc37      	bgt.n	8009254 <_dtoa_r+0x984>
 80091e4:	9b06      	ldr	r3, [sp, #24]
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	dd34      	ble.n	8009254 <_dtoa_r+0x984>
 80091ea:	9b03      	ldr	r3, [sp, #12]
 80091ec:	9302      	str	r3, [sp, #8]
 80091ee:	9b02      	ldr	r3, [sp, #8]
 80091f0:	b96b      	cbnz	r3, 800920e <_dtoa_r+0x93e>
 80091f2:	4631      	mov	r1, r6
 80091f4:	2205      	movs	r2, #5
 80091f6:	4620      	mov	r0, r4
 80091f8:	f000 ff7a 	bl	800a0f0 <__multadd>
 80091fc:	4601      	mov	r1, r0
 80091fe:	4606      	mov	r6, r0
 8009200:	ee18 0a10 	vmov	r0, s16
 8009204:	f001 f9de 	bl	800a5c4 <__mcmp>
 8009208:	2800      	cmp	r0, #0
 800920a:	f73f adbb 	bgt.w	8008d84 <_dtoa_r+0x4b4>
 800920e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009210:	9d01      	ldr	r5, [sp, #4]
 8009212:	43db      	mvns	r3, r3
 8009214:	9300      	str	r3, [sp, #0]
 8009216:	f04f 0800 	mov.w	r8, #0
 800921a:	4631      	mov	r1, r6
 800921c:	4620      	mov	r0, r4
 800921e:	f000 ff45 	bl	800a0ac <_Bfree>
 8009222:	2f00      	cmp	r7, #0
 8009224:	f43f aea4 	beq.w	8008f70 <_dtoa_r+0x6a0>
 8009228:	f1b8 0f00 	cmp.w	r8, #0
 800922c:	d005      	beq.n	800923a <_dtoa_r+0x96a>
 800922e:	45b8      	cmp	r8, r7
 8009230:	d003      	beq.n	800923a <_dtoa_r+0x96a>
 8009232:	4641      	mov	r1, r8
 8009234:	4620      	mov	r0, r4
 8009236:	f000 ff39 	bl	800a0ac <_Bfree>
 800923a:	4639      	mov	r1, r7
 800923c:	4620      	mov	r0, r4
 800923e:	f000 ff35 	bl	800a0ac <_Bfree>
 8009242:	e695      	b.n	8008f70 <_dtoa_r+0x6a0>
 8009244:	2600      	movs	r6, #0
 8009246:	4637      	mov	r7, r6
 8009248:	e7e1      	b.n	800920e <_dtoa_r+0x93e>
 800924a:	9700      	str	r7, [sp, #0]
 800924c:	4637      	mov	r7, r6
 800924e:	e599      	b.n	8008d84 <_dtoa_r+0x4b4>
 8009250:	40240000 	.word	0x40240000
 8009254:	9b08      	ldr	r3, [sp, #32]
 8009256:	2b00      	cmp	r3, #0
 8009258:	f000 80ca 	beq.w	80093f0 <_dtoa_r+0xb20>
 800925c:	9b03      	ldr	r3, [sp, #12]
 800925e:	9302      	str	r3, [sp, #8]
 8009260:	2d00      	cmp	r5, #0
 8009262:	dd05      	ble.n	8009270 <_dtoa_r+0x9a0>
 8009264:	4639      	mov	r1, r7
 8009266:	462a      	mov	r2, r5
 8009268:	4620      	mov	r0, r4
 800926a:	f001 f93b 	bl	800a4e4 <__lshift>
 800926e:	4607      	mov	r7, r0
 8009270:	f1b8 0f00 	cmp.w	r8, #0
 8009274:	d05b      	beq.n	800932e <_dtoa_r+0xa5e>
 8009276:	6879      	ldr	r1, [r7, #4]
 8009278:	4620      	mov	r0, r4
 800927a:	f000 fed7 	bl	800a02c <_Balloc>
 800927e:	4605      	mov	r5, r0
 8009280:	b928      	cbnz	r0, 800928e <_dtoa_r+0x9be>
 8009282:	4b87      	ldr	r3, [pc, #540]	; (80094a0 <_dtoa_r+0xbd0>)
 8009284:	4602      	mov	r2, r0
 8009286:	f240 21ea 	movw	r1, #746	; 0x2ea
 800928a:	f7ff bb3b 	b.w	8008904 <_dtoa_r+0x34>
 800928e:	693a      	ldr	r2, [r7, #16]
 8009290:	3202      	adds	r2, #2
 8009292:	0092      	lsls	r2, r2, #2
 8009294:	f107 010c 	add.w	r1, r7, #12
 8009298:	300c      	adds	r0, #12
 800929a:	f7fd fb0f 	bl	80068bc <memcpy>
 800929e:	2201      	movs	r2, #1
 80092a0:	4629      	mov	r1, r5
 80092a2:	4620      	mov	r0, r4
 80092a4:	f001 f91e 	bl	800a4e4 <__lshift>
 80092a8:	9b01      	ldr	r3, [sp, #4]
 80092aa:	f103 0901 	add.w	r9, r3, #1
 80092ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80092b2:	4413      	add	r3, r2
 80092b4:	9305      	str	r3, [sp, #20]
 80092b6:	f00a 0301 	and.w	r3, sl, #1
 80092ba:	46b8      	mov	r8, r7
 80092bc:	9304      	str	r3, [sp, #16]
 80092be:	4607      	mov	r7, r0
 80092c0:	4631      	mov	r1, r6
 80092c2:	ee18 0a10 	vmov	r0, s16
 80092c6:	f7ff fa77 	bl	80087b8 <quorem>
 80092ca:	4641      	mov	r1, r8
 80092cc:	9002      	str	r0, [sp, #8]
 80092ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80092d2:	ee18 0a10 	vmov	r0, s16
 80092d6:	f001 f975 	bl	800a5c4 <__mcmp>
 80092da:	463a      	mov	r2, r7
 80092dc:	9003      	str	r0, [sp, #12]
 80092de:	4631      	mov	r1, r6
 80092e0:	4620      	mov	r0, r4
 80092e2:	f001 f98b 	bl	800a5fc <__mdiff>
 80092e6:	68c2      	ldr	r2, [r0, #12]
 80092e8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80092ec:	4605      	mov	r5, r0
 80092ee:	bb02      	cbnz	r2, 8009332 <_dtoa_r+0xa62>
 80092f0:	4601      	mov	r1, r0
 80092f2:	ee18 0a10 	vmov	r0, s16
 80092f6:	f001 f965 	bl	800a5c4 <__mcmp>
 80092fa:	4602      	mov	r2, r0
 80092fc:	4629      	mov	r1, r5
 80092fe:	4620      	mov	r0, r4
 8009300:	9207      	str	r2, [sp, #28]
 8009302:	f000 fed3 	bl	800a0ac <_Bfree>
 8009306:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800930a:	ea43 0102 	orr.w	r1, r3, r2
 800930e:	9b04      	ldr	r3, [sp, #16]
 8009310:	430b      	orrs	r3, r1
 8009312:	464d      	mov	r5, r9
 8009314:	d10f      	bne.n	8009336 <_dtoa_r+0xa66>
 8009316:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800931a:	d02a      	beq.n	8009372 <_dtoa_r+0xaa2>
 800931c:	9b03      	ldr	r3, [sp, #12]
 800931e:	2b00      	cmp	r3, #0
 8009320:	dd02      	ble.n	8009328 <_dtoa_r+0xa58>
 8009322:	9b02      	ldr	r3, [sp, #8]
 8009324:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009328:	f88b a000 	strb.w	sl, [fp]
 800932c:	e775      	b.n	800921a <_dtoa_r+0x94a>
 800932e:	4638      	mov	r0, r7
 8009330:	e7ba      	b.n	80092a8 <_dtoa_r+0x9d8>
 8009332:	2201      	movs	r2, #1
 8009334:	e7e2      	b.n	80092fc <_dtoa_r+0xa2c>
 8009336:	9b03      	ldr	r3, [sp, #12]
 8009338:	2b00      	cmp	r3, #0
 800933a:	db04      	blt.n	8009346 <_dtoa_r+0xa76>
 800933c:	9906      	ldr	r1, [sp, #24]
 800933e:	430b      	orrs	r3, r1
 8009340:	9904      	ldr	r1, [sp, #16]
 8009342:	430b      	orrs	r3, r1
 8009344:	d122      	bne.n	800938c <_dtoa_r+0xabc>
 8009346:	2a00      	cmp	r2, #0
 8009348:	ddee      	ble.n	8009328 <_dtoa_r+0xa58>
 800934a:	ee18 1a10 	vmov	r1, s16
 800934e:	2201      	movs	r2, #1
 8009350:	4620      	mov	r0, r4
 8009352:	f001 f8c7 	bl	800a4e4 <__lshift>
 8009356:	4631      	mov	r1, r6
 8009358:	ee08 0a10 	vmov	s16, r0
 800935c:	f001 f932 	bl	800a5c4 <__mcmp>
 8009360:	2800      	cmp	r0, #0
 8009362:	dc03      	bgt.n	800936c <_dtoa_r+0xa9c>
 8009364:	d1e0      	bne.n	8009328 <_dtoa_r+0xa58>
 8009366:	f01a 0f01 	tst.w	sl, #1
 800936a:	d0dd      	beq.n	8009328 <_dtoa_r+0xa58>
 800936c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009370:	d1d7      	bne.n	8009322 <_dtoa_r+0xa52>
 8009372:	2339      	movs	r3, #57	; 0x39
 8009374:	f88b 3000 	strb.w	r3, [fp]
 8009378:	462b      	mov	r3, r5
 800937a:	461d      	mov	r5, r3
 800937c:	3b01      	subs	r3, #1
 800937e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009382:	2a39      	cmp	r2, #57	; 0x39
 8009384:	d071      	beq.n	800946a <_dtoa_r+0xb9a>
 8009386:	3201      	adds	r2, #1
 8009388:	701a      	strb	r2, [r3, #0]
 800938a:	e746      	b.n	800921a <_dtoa_r+0x94a>
 800938c:	2a00      	cmp	r2, #0
 800938e:	dd07      	ble.n	80093a0 <_dtoa_r+0xad0>
 8009390:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009394:	d0ed      	beq.n	8009372 <_dtoa_r+0xaa2>
 8009396:	f10a 0301 	add.w	r3, sl, #1
 800939a:	f88b 3000 	strb.w	r3, [fp]
 800939e:	e73c      	b.n	800921a <_dtoa_r+0x94a>
 80093a0:	9b05      	ldr	r3, [sp, #20]
 80093a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80093a6:	4599      	cmp	r9, r3
 80093a8:	d047      	beq.n	800943a <_dtoa_r+0xb6a>
 80093aa:	ee18 1a10 	vmov	r1, s16
 80093ae:	2300      	movs	r3, #0
 80093b0:	220a      	movs	r2, #10
 80093b2:	4620      	mov	r0, r4
 80093b4:	f000 fe9c 	bl	800a0f0 <__multadd>
 80093b8:	45b8      	cmp	r8, r7
 80093ba:	ee08 0a10 	vmov	s16, r0
 80093be:	f04f 0300 	mov.w	r3, #0
 80093c2:	f04f 020a 	mov.w	r2, #10
 80093c6:	4641      	mov	r1, r8
 80093c8:	4620      	mov	r0, r4
 80093ca:	d106      	bne.n	80093da <_dtoa_r+0xb0a>
 80093cc:	f000 fe90 	bl	800a0f0 <__multadd>
 80093d0:	4680      	mov	r8, r0
 80093d2:	4607      	mov	r7, r0
 80093d4:	f109 0901 	add.w	r9, r9, #1
 80093d8:	e772      	b.n	80092c0 <_dtoa_r+0x9f0>
 80093da:	f000 fe89 	bl	800a0f0 <__multadd>
 80093de:	4639      	mov	r1, r7
 80093e0:	4680      	mov	r8, r0
 80093e2:	2300      	movs	r3, #0
 80093e4:	220a      	movs	r2, #10
 80093e6:	4620      	mov	r0, r4
 80093e8:	f000 fe82 	bl	800a0f0 <__multadd>
 80093ec:	4607      	mov	r7, r0
 80093ee:	e7f1      	b.n	80093d4 <_dtoa_r+0xb04>
 80093f0:	9b03      	ldr	r3, [sp, #12]
 80093f2:	9302      	str	r3, [sp, #8]
 80093f4:	9d01      	ldr	r5, [sp, #4]
 80093f6:	ee18 0a10 	vmov	r0, s16
 80093fa:	4631      	mov	r1, r6
 80093fc:	f7ff f9dc 	bl	80087b8 <quorem>
 8009400:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009404:	9b01      	ldr	r3, [sp, #4]
 8009406:	f805 ab01 	strb.w	sl, [r5], #1
 800940a:	1aea      	subs	r2, r5, r3
 800940c:	9b02      	ldr	r3, [sp, #8]
 800940e:	4293      	cmp	r3, r2
 8009410:	dd09      	ble.n	8009426 <_dtoa_r+0xb56>
 8009412:	ee18 1a10 	vmov	r1, s16
 8009416:	2300      	movs	r3, #0
 8009418:	220a      	movs	r2, #10
 800941a:	4620      	mov	r0, r4
 800941c:	f000 fe68 	bl	800a0f0 <__multadd>
 8009420:	ee08 0a10 	vmov	s16, r0
 8009424:	e7e7      	b.n	80093f6 <_dtoa_r+0xb26>
 8009426:	9b02      	ldr	r3, [sp, #8]
 8009428:	2b00      	cmp	r3, #0
 800942a:	bfc8      	it	gt
 800942c:	461d      	movgt	r5, r3
 800942e:	9b01      	ldr	r3, [sp, #4]
 8009430:	bfd8      	it	le
 8009432:	2501      	movle	r5, #1
 8009434:	441d      	add	r5, r3
 8009436:	f04f 0800 	mov.w	r8, #0
 800943a:	ee18 1a10 	vmov	r1, s16
 800943e:	2201      	movs	r2, #1
 8009440:	4620      	mov	r0, r4
 8009442:	f001 f84f 	bl	800a4e4 <__lshift>
 8009446:	4631      	mov	r1, r6
 8009448:	ee08 0a10 	vmov	s16, r0
 800944c:	f001 f8ba 	bl	800a5c4 <__mcmp>
 8009450:	2800      	cmp	r0, #0
 8009452:	dc91      	bgt.n	8009378 <_dtoa_r+0xaa8>
 8009454:	d102      	bne.n	800945c <_dtoa_r+0xb8c>
 8009456:	f01a 0f01 	tst.w	sl, #1
 800945a:	d18d      	bne.n	8009378 <_dtoa_r+0xaa8>
 800945c:	462b      	mov	r3, r5
 800945e:	461d      	mov	r5, r3
 8009460:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009464:	2a30      	cmp	r2, #48	; 0x30
 8009466:	d0fa      	beq.n	800945e <_dtoa_r+0xb8e>
 8009468:	e6d7      	b.n	800921a <_dtoa_r+0x94a>
 800946a:	9a01      	ldr	r2, [sp, #4]
 800946c:	429a      	cmp	r2, r3
 800946e:	d184      	bne.n	800937a <_dtoa_r+0xaaa>
 8009470:	9b00      	ldr	r3, [sp, #0]
 8009472:	3301      	adds	r3, #1
 8009474:	9300      	str	r3, [sp, #0]
 8009476:	2331      	movs	r3, #49	; 0x31
 8009478:	7013      	strb	r3, [r2, #0]
 800947a:	e6ce      	b.n	800921a <_dtoa_r+0x94a>
 800947c:	4b09      	ldr	r3, [pc, #36]	; (80094a4 <_dtoa_r+0xbd4>)
 800947e:	f7ff ba95 	b.w	80089ac <_dtoa_r+0xdc>
 8009482:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009484:	2b00      	cmp	r3, #0
 8009486:	f47f aa6e 	bne.w	8008966 <_dtoa_r+0x96>
 800948a:	4b07      	ldr	r3, [pc, #28]	; (80094a8 <_dtoa_r+0xbd8>)
 800948c:	f7ff ba8e 	b.w	80089ac <_dtoa_r+0xdc>
 8009490:	9b02      	ldr	r3, [sp, #8]
 8009492:	2b00      	cmp	r3, #0
 8009494:	dcae      	bgt.n	80093f4 <_dtoa_r+0xb24>
 8009496:	9b06      	ldr	r3, [sp, #24]
 8009498:	2b02      	cmp	r3, #2
 800949a:	f73f aea8 	bgt.w	80091ee <_dtoa_r+0x91e>
 800949e:	e7a9      	b.n	80093f4 <_dtoa_r+0xb24>
 80094a0:	0800bd9f 	.word	0x0800bd9f
 80094a4:	0800bca4 	.word	0x0800bca4
 80094a8:	0800bd20 	.word	0x0800bd20

080094ac <__sflush_r>:
 80094ac:	898a      	ldrh	r2, [r1, #12]
 80094ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094b2:	4605      	mov	r5, r0
 80094b4:	0710      	lsls	r0, r2, #28
 80094b6:	460c      	mov	r4, r1
 80094b8:	d458      	bmi.n	800956c <__sflush_r+0xc0>
 80094ba:	684b      	ldr	r3, [r1, #4]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	dc05      	bgt.n	80094cc <__sflush_r+0x20>
 80094c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	dc02      	bgt.n	80094cc <__sflush_r+0x20>
 80094c6:	2000      	movs	r0, #0
 80094c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094ce:	2e00      	cmp	r6, #0
 80094d0:	d0f9      	beq.n	80094c6 <__sflush_r+0x1a>
 80094d2:	2300      	movs	r3, #0
 80094d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80094d8:	682f      	ldr	r7, [r5, #0]
 80094da:	602b      	str	r3, [r5, #0]
 80094dc:	d032      	beq.n	8009544 <__sflush_r+0x98>
 80094de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80094e0:	89a3      	ldrh	r3, [r4, #12]
 80094e2:	075a      	lsls	r2, r3, #29
 80094e4:	d505      	bpl.n	80094f2 <__sflush_r+0x46>
 80094e6:	6863      	ldr	r3, [r4, #4]
 80094e8:	1ac0      	subs	r0, r0, r3
 80094ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80094ec:	b10b      	cbz	r3, 80094f2 <__sflush_r+0x46>
 80094ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80094f0:	1ac0      	subs	r0, r0, r3
 80094f2:	2300      	movs	r3, #0
 80094f4:	4602      	mov	r2, r0
 80094f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094f8:	6a21      	ldr	r1, [r4, #32]
 80094fa:	4628      	mov	r0, r5
 80094fc:	47b0      	blx	r6
 80094fe:	1c43      	adds	r3, r0, #1
 8009500:	89a3      	ldrh	r3, [r4, #12]
 8009502:	d106      	bne.n	8009512 <__sflush_r+0x66>
 8009504:	6829      	ldr	r1, [r5, #0]
 8009506:	291d      	cmp	r1, #29
 8009508:	d82c      	bhi.n	8009564 <__sflush_r+0xb8>
 800950a:	4a2a      	ldr	r2, [pc, #168]	; (80095b4 <__sflush_r+0x108>)
 800950c:	40ca      	lsrs	r2, r1
 800950e:	07d6      	lsls	r6, r2, #31
 8009510:	d528      	bpl.n	8009564 <__sflush_r+0xb8>
 8009512:	2200      	movs	r2, #0
 8009514:	6062      	str	r2, [r4, #4]
 8009516:	04d9      	lsls	r1, r3, #19
 8009518:	6922      	ldr	r2, [r4, #16]
 800951a:	6022      	str	r2, [r4, #0]
 800951c:	d504      	bpl.n	8009528 <__sflush_r+0x7c>
 800951e:	1c42      	adds	r2, r0, #1
 8009520:	d101      	bne.n	8009526 <__sflush_r+0x7a>
 8009522:	682b      	ldr	r3, [r5, #0]
 8009524:	b903      	cbnz	r3, 8009528 <__sflush_r+0x7c>
 8009526:	6560      	str	r0, [r4, #84]	; 0x54
 8009528:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800952a:	602f      	str	r7, [r5, #0]
 800952c:	2900      	cmp	r1, #0
 800952e:	d0ca      	beq.n	80094c6 <__sflush_r+0x1a>
 8009530:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009534:	4299      	cmp	r1, r3
 8009536:	d002      	beq.n	800953e <__sflush_r+0x92>
 8009538:	4628      	mov	r0, r5
 800953a:	f001 fa4f 	bl	800a9dc <_free_r>
 800953e:	2000      	movs	r0, #0
 8009540:	6360      	str	r0, [r4, #52]	; 0x34
 8009542:	e7c1      	b.n	80094c8 <__sflush_r+0x1c>
 8009544:	6a21      	ldr	r1, [r4, #32]
 8009546:	2301      	movs	r3, #1
 8009548:	4628      	mov	r0, r5
 800954a:	47b0      	blx	r6
 800954c:	1c41      	adds	r1, r0, #1
 800954e:	d1c7      	bne.n	80094e0 <__sflush_r+0x34>
 8009550:	682b      	ldr	r3, [r5, #0]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d0c4      	beq.n	80094e0 <__sflush_r+0x34>
 8009556:	2b1d      	cmp	r3, #29
 8009558:	d001      	beq.n	800955e <__sflush_r+0xb2>
 800955a:	2b16      	cmp	r3, #22
 800955c:	d101      	bne.n	8009562 <__sflush_r+0xb6>
 800955e:	602f      	str	r7, [r5, #0]
 8009560:	e7b1      	b.n	80094c6 <__sflush_r+0x1a>
 8009562:	89a3      	ldrh	r3, [r4, #12]
 8009564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009568:	81a3      	strh	r3, [r4, #12]
 800956a:	e7ad      	b.n	80094c8 <__sflush_r+0x1c>
 800956c:	690f      	ldr	r7, [r1, #16]
 800956e:	2f00      	cmp	r7, #0
 8009570:	d0a9      	beq.n	80094c6 <__sflush_r+0x1a>
 8009572:	0793      	lsls	r3, r2, #30
 8009574:	680e      	ldr	r6, [r1, #0]
 8009576:	bf08      	it	eq
 8009578:	694b      	ldreq	r3, [r1, #20]
 800957a:	600f      	str	r7, [r1, #0]
 800957c:	bf18      	it	ne
 800957e:	2300      	movne	r3, #0
 8009580:	eba6 0807 	sub.w	r8, r6, r7
 8009584:	608b      	str	r3, [r1, #8]
 8009586:	f1b8 0f00 	cmp.w	r8, #0
 800958a:	dd9c      	ble.n	80094c6 <__sflush_r+0x1a>
 800958c:	6a21      	ldr	r1, [r4, #32]
 800958e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009590:	4643      	mov	r3, r8
 8009592:	463a      	mov	r2, r7
 8009594:	4628      	mov	r0, r5
 8009596:	47b0      	blx	r6
 8009598:	2800      	cmp	r0, #0
 800959a:	dc06      	bgt.n	80095aa <__sflush_r+0xfe>
 800959c:	89a3      	ldrh	r3, [r4, #12]
 800959e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095a2:	81a3      	strh	r3, [r4, #12]
 80095a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095a8:	e78e      	b.n	80094c8 <__sflush_r+0x1c>
 80095aa:	4407      	add	r7, r0
 80095ac:	eba8 0800 	sub.w	r8, r8, r0
 80095b0:	e7e9      	b.n	8009586 <__sflush_r+0xda>
 80095b2:	bf00      	nop
 80095b4:	20400001 	.word	0x20400001

080095b8 <_fflush_r>:
 80095b8:	b538      	push	{r3, r4, r5, lr}
 80095ba:	690b      	ldr	r3, [r1, #16]
 80095bc:	4605      	mov	r5, r0
 80095be:	460c      	mov	r4, r1
 80095c0:	b913      	cbnz	r3, 80095c8 <_fflush_r+0x10>
 80095c2:	2500      	movs	r5, #0
 80095c4:	4628      	mov	r0, r5
 80095c6:	bd38      	pop	{r3, r4, r5, pc}
 80095c8:	b118      	cbz	r0, 80095d2 <_fflush_r+0x1a>
 80095ca:	6983      	ldr	r3, [r0, #24]
 80095cc:	b90b      	cbnz	r3, 80095d2 <_fflush_r+0x1a>
 80095ce:	f000 f887 	bl	80096e0 <__sinit>
 80095d2:	4b14      	ldr	r3, [pc, #80]	; (8009624 <_fflush_r+0x6c>)
 80095d4:	429c      	cmp	r4, r3
 80095d6:	d11b      	bne.n	8009610 <_fflush_r+0x58>
 80095d8:	686c      	ldr	r4, [r5, #4]
 80095da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d0ef      	beq.n	80095c2 <_fflush_r+0xa>
 80095e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80095e4:	07d0      	lsls	r0, r2, #31
 80095e6:	d404      	bmi.n	80095f2 <_fflush_r+0x3a>
 80095e8:	0599      	lsls	r1, r3, #22
 80095ea:	d402      	bmi.n	80095f2 <_fflush_r+0x3a>
 80095ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095ee:	f000 fc88 	bl	8009f02 <__retarget_lock_acquire_recursive>
 80095f2:	4628      	mov	r0, r5
 80095f4:	4621      	mov	r1, r4
 80095f6:	f7ff ff59 	bl	80094ac <__sflush_r>
 80095fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095fc:	07da      	lsls	r2, r3, #31
 80095fe:	4605      	mov	r5, r0
 8009600:	d4e0      	bmi.n	80095c4 <_fflush_r+0xc>
 8009602:	89a3      	ldrh	r3, [r4, #12]
 8009604:	059b      	lsls	r3, r3, #22
 8009606:	d4dd      	bmi.n	80095c4 <_fflush_r+0xc>
 8009608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800960a:	f000 fc7b 	bl	8009f04 <__retarget_lock_release_recursive>
 800960e:	e7d9      	b.n	80095c4 <_fflush_r+0xc>
 8009610:	4b05      	ldr	r3, [pc, #20]	; (8009628 <_fflush_r+0x70>)
 8009612:	429c      	cmp	r4, r3
 8009614:	d101      	bne.n	800961a <_fflush_r+0x62>
 8009616:	68ac      	ldr	r4, [r5, #8]
 8009618:	e7df      	b.n	80095da <_fflush_r+0x22>
 800961a:	4b04      	ldr	r3, [pc, #16]	; (800962c <_fflush_r+0x74>)
 800961c:	429c      	cmp	r4, r3
 800961e:	bf08      	it	eq
 8009620:	68ec      	ldreq	r4, [r5, #12]
 8009622:	e7da      	b.n	80095da <_fflush_r+0x22>
 8009624:	0800bdd0 	.word	0x0800bdd0
 8009628:	0800bdf0 	.word	0x0800bdf0
 800962c:	0800bdb0 	.word	0x0800bdb0

08009630 <std>:
 8009630:	2300      	movs	r3, #0
 8009632:	b510      	push	{r4, lr}
 8009634:	4604      	mov	r4, r0
 8009636:	e9c0 3300 	strd	r3, r3, [r0]
 800963a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800963e:	6083      	str	r3, [r0, #8]
 8009640:	8181      	strh	r1, [r0, #12]
 8009642:	6643      	str	r3, [r0, #100]	; 0x64
 8009644:	81c2      	strh	r2, [r0, #14]
 8009646:	6183      	str	r3, [r0, #24]
 8009648:	4619      	mov	r1, r3
 800964a:	2208      	movs	r2, #8
 800964c:	305c      	adds	r0, #92	; 0x5c
 800964e:	f7fd f943 	bl	80068d8 <memset>
 8009652:	4b05      	ldr	r3, [pc, #20]	; (8009668 <std+0x38>)
 8009654:	6263      	str	r3, [r4, #36]	; 0x24
 8009656:	4b05      	ldr	r3, [pc, #20]	; (800966c <std+0x3c>)
 8009658:	62a3      	str	r3, [r4, #40]	; 0x28
 800965a:	4b05      	ldr	r3, [pc, #20]	; (8009670 <std+0x40>)
 800965c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800965e:	4b05      	ldr	r3, [pc, #20]	; (8009674 <std+0x44>)
 8009660:	6224      	str	r4, [r4, #32]
 8009662:	6323      	str	r3, [r4, #48]	; 0x30
 8009664:	bd10      	pop	{r4, pc}
 8009666:	bf00      	nop
 8009668:	0800777d 	.word	0x0800777d
 800966c:	0800779f 	.word	0x0800779f
 8009670:	080077d7 	.word	0x080077d7
 8009674:	080077fb 	.word	0x080077fb

08009678 <_cleanup_r>:
 8009678:	4901      	ldr	r1, [pc, #4]	; (8009680 <_cleanup_r+0x8>)
 800967a:	f000 b8af 	b.w	80097dc <_fwalk_reent>
 800967e:	bf00      	nop
 8009680:	080095b9 	.word	0x080095b9

08009684 <__sfmoreglue>:
 8009684:	b570      	push	{r4, r5, r6, lr}
 8009686:	2268      	movs	r2, #104	; 0x68
 8009688:	1e4d      	subs	r5, r1, #1
 800968a:	4355      	muls	r5, r2
 800968c:	460e      	mov	r6, r1
 800968e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009692:	f001 fa0f 	bl	800aab4 <_malloc_r>
 8009696:	4604      	mov	r4, r0
 8009698:	b140      	cbz	r0, 80096ac <__sfmoreglue+0x28>
 800969a:	2100      	movs	r1, #0
 800969c:	e9c0 1600 	strd	r1, r6, [r0]
 80096a0:	300c      	adds	r0, #12
 80096a2:	60a0      	str	r0, [r4, #8]
 80096a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80096a8:	f7fd f916 	bl	80068d8 <memset>
 80096ac:	4620      	mov	r0, r4
 80096ae:	bd70      	pop	{r4, r5, r6, pc}

080096b0 <__sfp_lock_acquire>:
 80096b0:	4801      	ldr	r0, [pc, #4]	; (80096b8 <__sfp_lock_acquire+0x8>)
 80096b2:	f000 bc26 	b.w	8009f02 <__retarget_lock_acquire_recursive>
 80096b6:	bf00      	nop
 80096b8:	20001fa1 	.word	0x20001fa1

080096bc <__sfp_lock_release>:
 80096bc:	4801      	ldr	r0, [pc, #4]	; (80096c4 <__sfp_lock_release+0x8>)
 80096be:	f000 bc21 	b.w	8009f04 <__retarget_lock_release_recursive>
 80096c2:	bf00      	nop
 80096c4:	20001fa1 	.word	0x20001fa1

080096c8 <__sinit_lock_acquire>:
 80096c8:	4801      	ldr	r0, [pc, #4]	; (80096d0 <__sinit_lock_acquire+0x8>)
 80096ca:	f000 bc1a 	b.w	8009f02 <__retarget_lock_acquire_recursive>
 80096ce:	bf00      	nop
 80096d0:	20001fa2 	.word	0x20001fa2

080096d4 <__sinit_lock_release>:
 80096d4:	4801      	ldr	r0, [pc, #4]	; (80096dc <__sinit_lock_release+0x8>)
 80096d6:	f000 bc15 	b.w	8009f04 <__retarget_lock_release_recursive>
 80096da:	bf00      	nop
 80096dc:	20001fa2 	.word	0x20001fa2

080096e0 <__sinit>:
 80096e0:	b510      	push	{r4, lr}
 80096e2:	4604      	mov	r4, r0
 80096e4:	f7ff fff0 	bl	80096c8 <__sinit_lock_acquire>
 80096e8:	69a3      	ldr	r3, [r4, #24]
 80096ea:	b11b      	cbz	r3, 80096f4 <__sinit+0x14>
 80096ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096f0:	f7ff bff0 	b.w	80096d4 <__sinit_lock_release>
 80096f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80096f8:	6523      	str	r3, [r4, #80]	; 0x50
 80096fa:	4b13      	ldr	r3, [pc, #76]	; (8009748 <__sinit+0x68>)
 80096fc:	4a13      	ldr	r2, [pc, #76]	; (800974c <__sinit+0x6c>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	62a2      	str	r2, [r4, #40]	; 0x28
 8009702:	42a3      	cmp	r3, r4
 8009704:	bf04      	itt	eq
 8009706:	2301      	moveq	r3, #1
 8009708:	61a3      	streq	r3, [r4, #24]
 800970a:	4620      	mov	r0, r4
 800970c:	f000 f820 	bl	8009750 <__sfp>
 8009710:	6060      	str	r0, [r4, #4]
 8009712:	4620      	mov	r0, r4
 8009714:	f000 f81c 	bl	8009750 <__sfp>
 8009718:	60a0      	str	r0, [r4, #8]
 800971a:	4620      	mov	r0, r4
 800971c:	f000 f818 	bl	8009750 <__sfp>
 8009720:	2200      	movs	r2, #0
 8009722:	60e0      	str	r0, [r4, #12]
 8009724:	2104      	movs	r1, #4
 8009726:	6860      	ldr	r0, [r4, #4]
 8009728:	f7ff ff82 	bl	8009630 <std>
 800972c:	68a0      	ldr	r0, [r4, #8]
 800972e:	2201      	movs	r2, #1
 8009730:	2109      	movs	r1, #9
 8009732:	f7ff ff7d 	bl	8009630 <std>
 8009736:	68e0      	ldr	r0, [r4, #12]
 8009738:	2202      	movs	r2, #2
 800973a:	2112      	movs	r1, #18
 800973c:	f7ff ff78 	bl	8009630 <std>
 8009740:	2301      	movs	r3, #1
 8009742:	61a3      	str	r3, [r4, #24]
 8009744:	e7d2      	b.n	80096ec <__sinit+0xc>
 8009746:	bf00      	nop
 8009748:	0800bc90 	.word	0x0800bc90
 800974c:	08009679 	.word	0x08009679

08009750 <__sfp>:
 8009750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009752:	4607      	mov	r7, r0
 8009754:	f7ff ffac 	bl	80096b0 <__sfp_lock_acquire>
 8009758:	4b1e      	ldr	r3, [pc, #120]	; (80097d4 <__sfp+0x84>)
 800975a:	681e      	ldr	r6, [r3, #0]
 800975c:	69b3      	ldr	r3, [r6, #24]
 800975e:	b913      	cbnz	r3, 8009766 <__sfp+0x16>
 8009760:	4630      	mov	r0, r6
 8009762:	f7ff ffbd 	bl	80096e0 <__sinit>
 8009766:	3648      	adds	r6, #72	; 0x48
 8009768:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800976c:	3b01      	subs	r3, #1
 800976e:	d503      	bpl.n	8009778 <__sfp+0x28>
 8009770:	6833      	ldr	r3, [r6, #0]
 8009772:	b30b      	cbz	r3, 80097b8 <__sfp+0x68>
 8009774:	6836      	ldr	r6, [r6, #0]
 8009776:	e7f7      	b.n	8009768 <__sfp+0x18>
 8009778:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800977c:	b9d5      	cbnz	r5, 80097b4 <__sfp+0x64>
 800977e:	4b16      	ldr	r3, [pc, #88]	; (80097d8 <__sfp+0x88>)
 8009780:	60e3      	str	r3, [r4, #12]
 8009782:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009786:	6665      	str	r5, [r4, #100]	; 0x64
 8009788:	f000 fbba 	bl	8009f00 <__retarget_lock_init_recursive>
 800978c:	f7ff ff96 	bl	80096bc <__sfp_lock_release>
 8009790:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009794:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009798:	6025      	str	r5, [r4, #0]
 800979a:	61a5      	str	r5, [r4, #24]
 800979c:	2208      	movs	r2, #8
 800979e:	4629      	mov	r1, r5
 80097a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80097a4:	f7fd f898 	bl	80068d8 <memset>
 80097a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80097ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80097b0:	4620      	mov	r0, r4
 80097b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097b4:	3468      	adds	r4, #104	; 0x68
 80097b6:	e7d9      	b.n	800976c <__sfp+0x1c>
 80097b8:	2104      	movs	r1, #4
 80097ba:	4638      	mov	r0, r7
 80097bc:	f7ff ff62 	bl	8009684 <__sfmoreglue>
 80097c0:	4604      	mov	r4, r0
 80097c2:	6030      	str	r0, [r6, #0]
 80097c4:	2800      	cmp	r0, #0
 80097c6:	d1d5      	bne.n	8009774 <__sfp+0x24>
 80097c8:	f7ff ff78 	bl	80096bc <__sfp_lock_release>
 80097cc:	230c      	movs	r3, #12
 80097ce:	603b      	str	r3, [r7, #0]
 80097d0:	e7ee      	b.n	80097b0 <__sfp+0x60>
 80097d2:	bf00      	nop
 80097d4:	0800bc90 	.word	0x0800bc90
 80097d8:	ffff0001 	.word	0xffff0001

080097dc <_fwalk_reent>:
 80097dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097e0:	4606      	mov	r6, r0
 80097e2:	4688      	mov	r8, r1
 80097e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80097e8:	2700      	movs	r7, #0
 80097ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80097ee:	f1b9 0901 	subs.w	r9, r9, #1
 80097f2:	d505      	bpl.n	8009800 <_fwalk_reent+0x24>
 80097f4:	6824      	ldr	r4, [r4, #0]
 80097f6:	2c00      	cmp	r4, #0
 80097f8:	d1f7      	bne.n	80097ea <_fwalk_reent+0xe>
 80097fa:	4638      	mov	r0, r7
 80097fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009800:	89ab      	ldrh	r3, [r5, #12]
 8009802:	2b01      	cmp	r3, #1
 8009804:	d907      	bls.n	8009816 <_fwalk_reent+0x3a>
 8009806:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800980a:	3301      	adds	r3, #1
 800980c:	d003      	beq.n	8009816 <_fwalk_reent+0x3a>
 800980e:	4629      	mov	r1, r5
 8009810:	4630      	mov	r0, r6
 8009812:	47c0      	blx	r8
 8009814:	4307      	orrs	r7, r0
 8009816:	3568      	adds	r5, #104	; 0x68
 8009818:	e7e9      	b.n	80097ee <_fwalk_reent+0x12>

0800981a <rshift>:
 800981a:	6903      	ldr	r3, [r0, #16]
 800981c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009820:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009824:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009828:	f100 0414 	add.w	r4, r0, #20
 800982c:	dd45      	ble.n	80098ba <rshift+0xa0>
 800982e:	f011 011f 	ands.w	r1, r1, #31
 8009832:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009836:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800983a:	d10c      	bne.n	8009856 <rshift+0x3c>
 800983c:	f100 0710 	add.w	r7, r0, #16
 8009840:	4629      	mov	r1, r5
 8009842:	42b1      	cmp	r1, r6
 8009844:	d334      	bcc.n	80098b0 <rshift+0x96>
 8009846:	1a9b      	subs	r3, r3, r2
 8009848:	009b      	lsls	r3, r3, #2
 800984a:	1eea      	subs	r2, r5, #3
 800984c:	4296      	cmp	r6, r2
 800984e:	bf38      	it	cc
 8009850:	2300      	movcc	r3, #0
 8009852:	4423      	add	r3, r4
 8009854:	e015      	b.n	8009882 <rshift+0x68>
 8009856:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800985a:	f1c1 0820 	rsb	r8, r1, #32
 800985e:	40cf      	lsrs	r7, r1
 8009860:	f105 0e04 	add.w	lr, r5, #4
 8009864:	46a1      	mov	r9, r4
 8009866:	4576      	cmp	r6, lr
 8009868:	46f4      	mov	ip, lr
 800986a:	d815      	bhi.n	8009898 <rshift+0x7e>
 800986c:	1a9a      	subs	r2, r3, r2
 800986e:	0092      	lsls	r2, r2, #2
 8009870:	3a04      	subs	r2, #4
 8009872:	3501      	adds	r5, #1
 8009874:	42ae      	cmp	r6, r5
 8009876:	bf38      	it	cc
 8009878:	2200      	movcc	r2, #0
 800987a:	18a3      	adds	r3, r4, r2
 800987c:	50a7      	str	r7, [r4, r2]
 800987e:	b107      	cbz	r7, 8009882 <rshift+0x68>
 8009880:	3304      	adds	r3, #4
 8009882:	1b1a      	subs	r2, r3, r4
 8009884:	42a3      	cmp	r3, r4
 8009886:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800988a:	bf08      	it	eq
 800988c:	2300      	moveq	r3, #0
 800988e:	6102      	str	r2, [r0, #16]
 8009890:	bf08      	it	eq
 8009892:	6143      	streq	r3, [r0, #20]
 8009894:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009898:	f8dc c000 	ldr.w	ip, [ip]
 800989c:	fa0c fc08 	lsl.w	ip, ip, r8
 80098a0:	ea4c 0707 	orr.w	r7, ip, r7
 80098a4:	f849 7b04 	str.w	r7, [r9], #4
 80098a8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80098ac:	40cf      	lsrs	r7, r1
 80098ae:	e7da      	b.n	8009866 <rshift+0x4c>
 80098b0:	f851 cb04 	ldr.w	ip, [r1], #4
 80098b4:	f847 cf04 	str.w	ip, [r7, #4]!
 80098b8:	e7c3      	b.n	8009842 <rshift+0x28>
 80098ba:	4623      	mov	r3, r4
 80098bc:	e7e1      	b.n	8009882 <rshift+0x68>

080098be <__hexdig_fun>:
 80098be:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80098c2:	2b09      	cmp	r3, #9
 80098c4:	d802      	bhi.n	80098cc <__hexdig_fun+0xe>
 80098c6:	3820      	subs	r0, #32
 80098c8:	b2c0      	uxtb	r0, r0
 80098ca:	4770      	bx	lr
 80098cc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80098d0:	2b05      	cmp	r3, #5
 80098d2:	d801      	bhi.n	80098d8 <__hexdig_fun+0x1a>
 80098d4:	3847      	subs	r0, #71	; 0x47
 80098d6:	e7f7      	b.n	80098c8 <__hexdig_fun+0xa>
 80098d8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80098dc:	2b05      	cmp	r3, #5
 80098de:	d801      	bhi.n	80098e4 <__hexdig_fun+0x26>
 80098e0:	3827      	subs	r0, #39	; 0x27
 80098e2:	e7f1      	b.n	80098c8 <__hexdig_fun+0xa>
 80098e4:	2000      	movs	r0, #0
 80098e6:	4770      	bx	lr

080098e8 <__gethex>:
 80098e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ec:	ed2d 8b02 	vpush	{d8}
 80098f0:	b089      	sub	sp, #36	; 0x24
 80098f2:	ee08 0a10 	vmov	s16, r0
 80098f6:	9304      	str	r3, [sp, #16]
 80098f8:	4bb4      	ldr	r3, [pc, #720]	; (8009bcc <__gethex+0x2e4>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	9301      	str	r3, [sp, #4]
 80098fe:	4618      	mov	r0, r3
 8009900:	468b      	mov	fp, r1
 8009902:	4690      	mov	r8, r2
 8009904:	f7f6 fc74 	bl	80001f0 <strlen>
 8009908:	9b01      	ldr	r3, [sp, #4]
 800990a:	f8db 2000 	ldr.w	r2, [fp]
 800990e:	4403      	add	r3, r0
 8009910:	4682      	mov	sl, r0
 8009912:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009916:	9305      	str	r3, [sp, #20]
 8009918:	1c93      	adds	r3, r2, #2
 800991a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800991e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009922:	32fe      	adds	r2, #254	; 0xfe
 8009924:	18d1      	adds	r1, r2, r3
 8009926:	461f      	mov	r7, r3
 8009928:	f813 0b01 	ldrb.w	r0, [r3], #1
 800992c:	9100      	str	r1, [sp, #0]
 800992e:	2830      	cmp	r0, #48	; 0x30
 8009930:	d0f8      	beq.n	8009924 <__gethex+0x3c>
 8009932:	f7ff ffc4 	bl	80098be <__hexdig_fun>
 8009936:	4604      	mov	r4, r0
 8009938:	2800      	cmp	r0, #0
 800993a:	d13a      	bne.n	80099b2 <__gethex+0xca>
 800993c:	9901      	ldr	r1, [sp, #4]
 800993e:	4652      	mov	r2, sl
 8009940:	4638      	mov	r0, r7
 8009942:	f7fd ff77 	bl	8007834 <strncmp>
 8009946:	4605      	mov	r5, r0
 8009948:	2800      	cmp	r0, #0
 800994a:	d168      	bne.n	8009a1e <__gethex+0x136>
 800994c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009950:	eb07 060a 	add.w	r6, r7, sl
 8009954:	f7ff ffb3 	bl	80098be <__hexdig_fun>
 8009958:	2800      	cmp	r0, #0
 800995a:	d062      	beq.n	8009a22 <__gethex+0x13a>
 800995c:	4633      	mov	r3, r6
 800995e:	7818      	ldrb	r0, [r3, #0]
 8009960:	2830      	cmp	r0, #48	; 0x30
 8009962:	461f      	mov	r7, r3
 8009964:	f103 0301 	add.w	r3, r3, #1
 8009968:	d0f9      	beq.n	800995e <__gethex+0x76>
 800996a:	f7ff ffa8 	bl	80098be <__hexdig_fun>
 800996e:	2301      	movs	r3, #1
 8009970:	fab0 f480 	clz	r4, r0
 8009974:	0964      	lsrs	r4, r4, #5
 8009976:	4635      	mov	r5, r6
 8009978:	9300      	str	r3, [sp, #0]
 800997a:	463a      	mov	r2, r7
 800997c:	4616      	mov	r6, r2
 800997e:	3201      	adds	r2, #1
 8009980:	7830      	ldrb	r0, [r6, #0]
 8009982:	f7ff ff9c 	bl	80098be <__hexdig_fun>
 8009986:	2800      	cmp	r0, #0
 8009988:	d1f8      	bne.n	800997c <__gethex+0x94>
 800998a:	9901      	ldr	r1, [sp, #4]
 800998c:	4652      	mov	r2, sl
 800998e:	4630      	mov	r0, r6
 8009990:	f7fd ff50 	bl	8007834 <strncmp>
 8009994:	b980      	cbnz	r0, 80099b8 <__gethex+0xd0>
 8009996:	b94d      	cbnz	r5, 80099ac <__gethex+0xc4>
 8009998:	eb06 050a 	add.w	r5, r6, sl
 800999c:	462a      	mov	r2, r5
 800999e:	4616      	mov	r6, r2
 80099a0:	3201      	adds	r2, #1
 80099a2:	7830      	ldrb	r0, [r6, #0]
 80099a4:	f7ff ff8b 	bl	80098be <__hexdig_fun>
 80099a8:	2800      	cmp	r0, #0
 80099aa:	d1f8      	bne.n	800999e <__gethex+0xb6>
 80099ac:	1bad      	subs	r5, r5, r6
 80099ae:	00ad      	lsls	r5, r5, #2
 80099b0:	e004      	b.n	80099bc <__gethex+0xd4>
 80099b2:	2400      	movs	r4, #0
 80099b4:	4625      	mov	r5, r4
 80099b6:	e7e0      	b.n	800997a <__gethex+0x92>
 80099b8:	2d00      	cmp	r5, #0
 80099ba:	d1f7      	bne.n	80099ac <__gethex+0xc4>
 80099bc:	7833      	ldrb	r3, [r6, #0]
 80099be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80099c2:	2b50      	cmp	r3, #80	; 0x50
 80099c4:	d13b      	bne.n	8009a3e <__gethex+0x156>
 80099c6:	7873      	ldrb	r3, [r6, #1]
 80099c8:	2b2b      	cmp	r3, #43	; 0x2b
 80099ca:	d02c      	beq.n	8009a26 <__gethex+0x13e>
 80099cc:	2b2d      	cmp	r3, #45	; 0x2d
 80099ce:	d02e      	beq.n	8009a2e <__gethex+0x146>
 80099d0:	1c71      	adds	r1, r6, #1
 80099d2:	f04f 0900 	mov.w	r9, #0
 80099d6:	7808      	ldrb	r0, [r1, #0]
 80099d8:	f7ff ff71 	bl	80098be <__hexdig_fun>
 80099dc:	1e43      	subs	r3, r0, #1
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	2b18      	cmp	r3, #24
 80099e2:	d82c      	bhi.n	8009a3e <__gethex+0x156>
 80099e4:	f1a0 0210 	sub.w	r2, r0, #16
 80099e8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80099ec:	f7ff ff67 	bl	80098be <__hexdig_fun>
 80099f0:	1e43      	subs	r3, r0, #1
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	2b18      	cmp	r3, #24
 80099f6:	d91d      	bls.n	8009a34 <__gethex+0x14c>
 80099f8:	f1b9 0f00 	cmp.w	r9, #0
 80099fc:	d000      	beq.n	8009a00 <__gethex+0x118>
 80099fe:	4252      	negs	r2, r2
 8009a00:	4415      	add	r5, r2
 8009a02:	f8cb 1000 	str.w	r1, [fp]
 8009a06:	b1e4      	cbz	r4, 8009a42 <__gethex+0x15a>
 8009a08:	9b00      	ldr	r3, [sp, #0]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	bf14      	ite	ne
 8009a0e:	2700      	movne	r7, #0
 8009a10:	2706      	moveq	r7, #6
 8009a12:	4638      	mov	r0, r7
 8009a14:	b009      	add	sp, #36	; 0x24
 8009a16:	ecbd 8b02 	vpop	{d8}
 8009a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a1e:	463e      	mov	r6, r7
 8009a20:	4625      	mov	r5, r4
 8009a22:	2401      	movs	r4, #1
 8009a24:	e7ca      	b.n	80099bc <__gethex+0xd4>
 8009a26:	f04f 0900 	mov.w	r9, #0
 8009a2a:	1cb1      	adds	r1, r6, #2
 8009a2c:	e7d3      	b.n	80099d6 <__gethex+0xee>
 8009a2e:	f04f 0901 	mov.w	r9, #1
 8009a32:	e7fa      	b.n	8009a2a <__gethex+0x142>
 8009a34:	230a      	movs	r3, #10
 8009a36:	fb03 0202 	mla	r2, r3, r2, r0
 8009a3a:	3a10      	subs	r2, #16
 8009a3c:	e7d4      	b.n	80099e8 <__gethex+0x100>
 8009a3e:	4631      	mov	r1, r6
 8009a40:	e7df      	b.n	8009a02 <__gethex+0x11a>
 8009a42:	1bf3      	subs	r3, r6, r7
 8009a44:	3b01      	subs	r3, #1
 8009a46:	4621      	mov	r1, r4
 8009a48:	2b07      	cmp	r3, #7
 8009a4a:	dc0b      	bgt.n	8009a64 <__gethex+0x17c>
 8009a4c:	ee18 0a10 	vmov	r0, s16
 8009a50:	f000 faec 	bl	800a02c <_Balloc>
 8009a54:	4604      	mov	r4, r0
 8009a56:	b940      	cbnz	r0, 8009a6a <__gethex+0x182>
 8009a58:	4b5d      	ldr	r3, [pc, #372]	; (8009bd0 <__gethex+0x2e8>)
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	21de      	movs	r1, #222	; 0xde
 8009a5e:	485d      	ldr	r0, [pc, #372]	; (8009bd4 <__gethex+0x2ec>)
 8009a60:	f001 fa30 	bl	800aec4 <__assert_func>
 8009a64:	3101      	adds	r1, #1
 8009a66:	105b      	asrs	r3, r3, #1
 8009a68:	e7ee      	b.n	8009a48 <__gethex+0x160>
 8009a6a:	f100 0914 	add.w	r9, r0, #20
 8009a6e:	f04f 0b00 	mov.w	fp, #0
 8009a72:	f1ca 0301 	rsb	r3, sl, #1
 8009a76:	f8cd 9008 	str.w	r9, [sp, #8]
 8009a7a:	f8cd b000 	str.w	fp, [sp]
 8009a7e:	9306      	str	r3, [sp, #24]
 8009a80:	42b7      	cmp	r7, r6
 8009a82:	d340      	bcc.n	8009b06 <__gethex+0x21e>
 8009a84:	9802      	ldr	r0, [sp, #8]
 8009a86:	9b00      	ldr	r3, [sp, #0]
 8009a88:	f840 3b04 	str.w	r3, [r0], #4
 8009a8c:	eba0 0009 	sub.w	r0, r0, r9
 8009a90:	1080      	asrs	r0, r0, #2
 8009a92:	0146      	lsls	r6, r0, #5
 8009a94:	6120      	str	r0, [r4, #16]
 8009a96:	4618      	mov	r0, r3
 8009a98:	f000 fbba 	bl	800a210 <__hi0bits>
 8009a9c:	1a30      	subs	r0, r6, r0
 8009a9e:	f8d8 6000 	ldr.w	r6, [r8]
 8009aa2:	42b0      	cmp	r0, r6
 8009aa4:	dd63      	ble.n	8009b6e <__gethex+0x286>
 8009aa6:	1b87      	subs	r7, r0, r6
 8009aa8:	4639      	mov	r1, r7
 8009aaa:	4620      	mov	r0, r4
 8009aac:	f000 ff5e 	bl	800a96c <__any_on>
 8009ab0:	4682      	mov	sl, r0
 8009ab2:	b1a8      	cbz	r0, 8009ae0 <__gethex+0x1f8>
 8009ab4:	1e7b      	subs	r3, r7, #1
 8009ab6:	1159      	asrs	r1, r3, #5
 8009ab8:	f003 021f 	and.w	r2, r3, #31
 8009abc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009ac0:	f04f 0a01 	mov.w	sl, #1
 8009ac4:	fa0a f202 	lsl.w	r2, sl, r2
 8009ac8:	420a      	tst	r2, r1
 8009aca:	d009      	beq.n	8009ae0 <__gethex+0x1f8>
 8009acc:	4553      	cmp	r3, sl
 8009ace:	dd05      	ble.n	8009adc <__gethex+0x1f4>
 8009ad0:	1eb9      	subs	r1, r7, #2
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	f000 ff4a 	bl	800a96c <__any_on>
 8009ad8:	2800      	cmp	r0, #0
 8009ada:	d145      	bne.n	8009b68 <__gethex+0x280>
 8009adc:	f04f 0a02 	mov.w	sl, #2
 8009ae0:	4639      	mov	r1, r7
 8009ae2:	4620      	mov	r0, r4
 8009ae4:	f7ff fe99 	bl	800981a <rshift>
 8009ae8:	443d      	add	r5, r7
 8009aea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009aee:	42ab      	cmp	r3, r5
 8009af0:	da4c      	bge.n	8009b8c <__gethex+0x2a4>
 8009af2:	ee18 0a10 	vmov	r0, s16
 8009af6:	4621      	mov	r1, r4
 8009af8:	f000 fad8 	bl	800a0ac <_Bfree>
 8009afc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009afe:	2300      	movs	r3, #0
 8009b00:	6013      	str	r3, [r2, #0]
 8009b02:	27a3      	movs	r7, #163	; 0xa3
 8009b04:	e785      	b.n	8009a12 <__gethex+0x12a>
 8009b06:	1e73      	subs	r3, r6, #1
 8009b08:	9a05      	ldr	r2, [sp, #20]
 8009b0a:	9303      	str	r3, [sp, #12]
 8009b0c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d019      	beq.n	8009b48 <__gethex+0x260>
 8009b14:	f1bb 0f20 	cmp.w	fp, #32
 8009b18:	d107      	bne.n	8009b2a <__gethex+0x242>
 8009b1a:	9b02      	ldr	r3, [sp, #8]
 8009b1c:	9a00      	ldr	r2, [sp, #0]
 8009b1e:	f843 2b04 	str.w	r2, [r3], #4
 8009b22:	9302      	str	r3, [sp, #8]
 8009b24:	2300      	movs	r3, #0
 8009b26:	9300      	str	r3, [sp, #0]
 8009b28:	469b      	mov	fp, r3
 8009b2a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009b2e:	f7ff fec6 	bl	80098be <__hexdig_fun>
 8009b32:	9b00      	ldr	r3, [sp, #0]
 8009b34:	f000 000f 	and.w	r0, r0, #15
 8009b38:	fa00 f00b 	lsl.w	r0, r0, fp
 8009b3c:	4303      	orrs	r3, r0
 8009b3e:	9300      	str	r3, [sp, #0]
 8009b40:	f10b 0b04 	add.w	fp, fp, #4
 8009b44:	9b03      	ldr	r3, [sp, #12]
 8009b46:	e00d      	b.n	8009b64 <__gethex+0x27c>
 8009b48:	9b03      	ldr	r3, [sp, #12]
 8009b4a:	9a06      	ldr	r2, [sp, #24]
 8009b4c:	4413      	add	r3, r2
 8009b4e:	42bb      	cmp	r3, r7
 8009b50:	d3e0      	bcc.n	8009b14 <__gethex+0x22c>
 8009b52:	4618      	mov	r0, r3
 8009b54:	9901      	ldr	r1, [sp, #4]
 8009b56:	9307      	str	r3, [sp, #28]
 8009b58:	4652      	mov	r2, sl
 8009b5a:	f7fd fe6b 	bl	8007834 <strncmp>
 8009b5e:	9b07      	ldr	r3, [sp, #28]
 8009b60:	2800      	cmp	r0, #0
 8009b62:	d1d7      	bne.n	8009b14 <__gethex+0x22c>
 8009b64:	461e      	mov	r6, r3
 8009b66:	e78b      	b.n	8009a80 <__gethex+0x198>
 8009b68:	f04f 0a03 	mov.w	sl, #3
 8009b6c:	e7b8      	b.n	8009ae0 <__gethex+0x1f8>
 8009b6e:	da0a      	bge.n	8009b86 <__gethex+0x29e>
 8009b70:	1a37      	subs	r7, r6, r0
 8009b72:	4621      	mov	r1, r4
 8009b74:	ee18 0a10 	vmov	r0, s16
 8009b78:	463a      	mov	r2, r7
 8009b7a:	f000 fcb3 	bl	800a4e4 <__lshift>
 8009b7e:	1bed      	subs	r5, r5, r7
 8009b80:	4604      	mov	r4, r0
 8009b82:	f100 0914 	add.w	r9, r0, #20
 8009b86:	f04f 0a00 	mov.w	sl, #0
 8009b8a:	e7ae      	b.n	8009aea <__gethex+0x202>
 8009b8c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009b90:	42a8      	cmp	r0, r5
 8009b92:	dd72      	ble.n	8009c7a <__gethex+0x392>
 8009b94:	1b45      	subs	r5, r0, r5
 8009b96:	42ae      	cmp	r6, r5
 8009b98:	dc36      	bgt.n	8009c08 <__gethex+0x320>
 8009b9a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009b9e:	2b02      	cmp	r3, #2
 8009ba0:	d02a      	beq.n	8009bf8 <__gethex+0x310>
 8009ba2:	2b03      	cmp	r3, #3
 8009ba4:	d02c      	beq.n	8009c00 <__gethex+0x318>
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d11c      	bne.n	8009be4 <__gethex+0x2fc>
 8009baa:	42ae      	cmp	r6, r5
 8009bac:	d11a      	bne.n	8009be4 <__gethex+0x2fc>
 8009bae:	2e01      	cmp	r6, #1
 8009bb0:	d112      	bne.n	8009bd8 <__gethex+0x2f0>
 8009bb2:	9a04      	ldr	r2, [sp, #16]
 8009bb4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009bb8:	6013      	str	r3, [r2, #0]
 8009bba:	2301      	movs	r3, #1
 8009bbc:	6123      	str	r3, [r4, #16]
 8009bbe:	f8c9 3000 	str.w	r3, [r9]
 8009bc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009bc4:	2762      	movs	r7, #98	; 0x62
 8009bc6:	601c      	str	r4, [r3, #0]
 8009bc8:	e723      	b.n	8009a12 <__gethex+0x12a>
 8009bca:	bf00      	nop
 8009bcc:	0800be78 	.word	0x0800be78
 8009bd0:	0800bd9f 	.word	0x0800bd9f
 8009bd4:	0800be10 	.word	0x0800be10
 8009bd8:	1e71      	subs	r1, r6, #1
 8009bda:	4620      	mov	r0, r4
 8009bdc:	f000 fec6 	bl	800a96c <__any_on>
 8009be0:	2800      	cmp	r0, #0
 8009be2:	d1e6      	bne.n	8009bb2 <__gethex+0x2ca>
 8009be4:	ee18 0a10 	vmov	r0, s16
 8009be8:	4621      	mov	r1, r4
 8009bea:	f000 fa5f 	bl	800a0ac <_Bfree>
 8009bee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	6013      	str	r3, [r2, #0]
 8009bf4:	2750      	movs	r7, #80	; 0x50
 8009bf6:	e70c      	b.n	8009a12 <__gethex+0x12a>
 8009bf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d1f2      	bne.n	8009be4 <__gethex+0x2fc>
 8009bfe:	e7d8      	b.n	8009bb2 <__gethex+0x2ca>
 8009c00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d1d5      	bne.n	8009bb2 <__gethex+0x2ca>
 8009c06:	e7ed      	b.n	8009be4 <__gethex+0x2fc>
 8009c08:	1e6f      	subs	r7, r5, #1
 8009c0a:	f1ba 0f00 	cmp.w	sl, #0
 8009c0e:	d131      	bne.n	8009c74 <__gethex+0x38c>
 8009c10:	b127      	cbz	r7, 8009c1c <__gethex+0x334>
 8009c12:	4639      	mov	r1, r7
 8009c14:	4620      	mov	r0, r4
 8009c16:	f000 fea9 	bl	800a96c <__any_on>
 8009c1a:	4682      	mov	sl, r0
 8009c1c:	117b      	asrs	r3, r7, #5
 8009c1e:	2101      	movs	r1, #1
 8009c20:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009c24:	f007 071f 	and.w	r7, r7, #31
 8009c28:	fa01 f707 	lsl.w	r7, r1, r7
 8009c2c:	421f      	tst	r7, r3
 8009c2e:	4629      	mov	r1, r5
 8009c30:	4620      	mov	r0, r4
 8009c32:	bf18      	it	ne
 8009c34:	f04a 0a02 	orrne.w	sl, sl, #2
 8009c38:	1b76      	subs	r6, r6, r5
 8009c3a:	f7ff fdee 	bl	800981a <rshift>
 8009c3e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009c42:	2702      	movs	r7, #2
 8009c44:	f1ba 0f00 	cmp.w	sl, #0
 8009c48:	d048      	beq.n	8009cdc <__gethex+0x3f4>
 8009c4a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009c4e:	2b02      	cmp	r3, #2
 8009c50:	d015      	beq.n	8009c7e <__gethex+0x396>
 8009c52:	2b03      	cmp	r3, #3
 8009c54:	d017      	beq.n	8009c86 <__gethex+0x39e>
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d109      	bne.n	8009c6e <__gethex+0x386>
 8009c5a:	f01a 0f02 	tst.w	sl, #2
 8009c5e:	d006      	beq.n	8009c6e <__gethex+0x386>
 8009c60:	f8d9 0000 	ldr.w	r0, [r9]
 8009c64:	ea4a 0a00 	orr.w	sl, sl, r0
 8009c68:	f01a 0f01 	tst.w	sl, #1
 8009c6c:	d10e      	bne.n	8009c8c <__gethex+0x3a4>
 8009c6e:	f047 0710 	orr.w	r7, r7, #16
 8009c72:	e033      	b.n	8009cdc <__gethex+0x3f4>
 8009c74:	f04f 0a01 	mov.w	sl, #1
 8009c78:	e7d0      	b.n	8009c1c <__gethex+0x334>
 8009c7a:	2701      	movs	r7, #1
 8009c7c:	e7e2      	b.n	8009c44 <__gethex+0x35c>
 8009c7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c80:	f1c3 0301 	rsb	r3, r3, #1
 8009c84:	9315      	str	r3, [sp, #84]	; 0x54
 8009c86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d0f0      	beq.n	8009c6e <__gethex+0x386>
 8009c8c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009c90:	f104 0314 	add.w	r3, r4, #20
 8009c94:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009c98:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009c9c:	f04f 0c00 	mov.w	ip, #0
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ca6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8009caa:	d01c      	beq.n	8009ce6 <__gethex+0x3fe>
 8009cac:	3201      	adds	r2, #1
 8009cae:	6002      	str	r2, [r0, #0]
 8009cb0:	2f02      	cmp	r7, #2
 8009cb2:	f104 0314 	add.w	r3, r4, #20
 8009cb6:	d13f      	bne.n	8009d38 <__gethex+0x450>
 8009cb8:	f8d8 2000 	ldr.w	r2, [r8]
 8009cbc:	3a01      	subs	r2, #1
 8009cbe:	42b2      	cmp	r2, r6
 8009cc0:	d10a      	bne.n	8009cd8 <__gethex+0x3f0>
 8009cc2:	1171      	asrs	r1, r6, #5
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009cca:	f006 061f 	and.w	r6, r6, #31
 8009cce:	fa02 f606 	lsl.w	r6, r2, r6
 8009cd2:	421e      	tst	r6, r3
 8009cd4:	bf18      	it	ne
 8009cd6:	4617      	movne	r7, r2
 8009cd8:	f047 0720 	orr.w	r7, r7, #32
 8009cdc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009cde:	601c      	str	r4, [r3, #0]
 8009ce0:	9b04      	ldr	r3, [sp, #16]
 8009ce2:	601d      	str	r5, [r3, #0]
 8009ce4:	e695      	b.n	8009a12 <__gethex+0x12a>
 8009ce6:	4299      	cmp	r1, r3
 8009ce8:	f843 cc04 	str.w	ip, [r3, #-4]
 8009cec:	d8d8      	bhi.n	8009ca0 <__gethex+0x3b8>
 8009cee:	68a3      	ldr	r3, [r4, #8]
 8009cf0:	459b      	cmp	fp, r3
 8009cf2:	db19      	blt.n	8009d28 <__gethex+0x440>
 8009cf4:	6861      	ldr	r1, [r4, #4]
 8009cf6:	ee18 0a10 	vmov	r0, s16
 8009cfa:	3101      	adds	r1, #1
 8009cfc:	f000 f996 	bl	800a02c <_Balloc>
 8009d00:	4681      	mov	r9, r0
 8009d02:	b918      	cbnz	r0, 8009d0c <__gethex+0x424>
 8009d04:	4b1a      	ldr	r3, [pc, #104]	; (8009d70 <__gethex+0x488>)
 8009d06:	4602      	mov	r2, r0
 8009d08:	2184      	movs	r1, #132	; 0x84
 8009d0a:	e6a8      	b.n	8009a5e <__gethex+0x176>
 8009d0c:	6922      	ldr	r2, [r4, #16]
 8009d0e:	3202      	adds	r2, #2
 8009d10:	f104 010c 	add.w	r1, r4, #12
 8009d14:	0092      	lsls	r2, r2, #2
 8009d16:	300c      	adds	r0, #12
 8009d18:	f7fc fdd0 	bl	80068bc <memcpy>
 8009d1c:	4621      	mov	r1, r4
 8009d1e:	ee18 0a10 	vmov	r0, s16
 8009d22:	f000 f9c3 	bl	800a0ac <_Bfree>
 8009d26:	464c      	mov	r4, r9
 8009d28:	6923      	ldr	r3, [r4, #16]
 8009d2a:	1c5a      	adds	r2, r3, #1
 8009d2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009d30:	6122      	str	r2, [r4, #16]
 8009d32:	2201      	movs	r2, #1
 8009d34:	615a      	str	r2, [r3, #20]
 8009d36:	e7bb      	b.n	8009cb0 <__gethex+0x3c8>
 8009d38:	6922      	ldr	r2, [r4, #16]
 8009d3a:	455a      	cmp	r2, fp
 8009d3c:	dd0b      	ble.n	8009d56 <__gethex+0x46e>
 8009d3e:	2101      	movs	r1, #1
 8009d40:	4620      	mov	r0, r4
 8009d42:	f7ff fd6a 	bl	800981a <rshift>
 8009d46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d4a:	3501      	adds	r5, #1
 8009d4c:	42ab      	cmp	r3, r5
 8009d4e:	f6ff aed0 	blt.w	8009af2 <__gethex+0x20a>
 8009d52:	2701      	movs	r7, #1
 8009d54:	e7c0      	b.n	8009cd8 <__gethex+0x3f0>
 8009d56:	f016 061f 	ands.w	r6, r6, #31
 8009d5a:	d0fa      	beq.n	8009d52 <__gethex+0x46a>
 8009d5c:	4453      	add	r3, sl
 8009d5e:	f1c6 0620 	rsb	r6, r6, #32
 8009d62:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009d66:	f000 fa53 	bl	800a210 <__hi0bits>
 8009d6a:	42b0      	cmp	r0, r6
 8009d6c:	dbe7      	blt.n	8009d3e <__gethex+0x456>
 8009d6e:	e7f0      	b.n	8009d52 <__gethex+0x46a>
 8009d70:	0800bd9f 	.word	0x0800bd9f

08009d74 <L_shift>:
 8009d74:	f1c2 0208 	rsb	r2, r2, #8
 8009d78:	0092      	lsls	r2, r2, #2
 8009d7a:	b570      	push	{r4, r5, r6, lr}
 8009d7c:	f1c2 0620 	rsb	r6, r2, #32
 8009d80:	6843      	ldr	r3, [r0, #4]
 8009d82:	6804      	ldr	r4, [r0, #0]
 8009d84:	fa03 f506 	lsl.w	r5, r3, r6
 8009d88:	432c      	orrs	r4, r5
 8009d8a:	40d3      	lsrs	r3, r2
 8009d8c:	6004      	str	r4, [r0, #0]
 8009d8e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009d92:	4288      	cmp	r0, r1
 8009d94:	d3f4      	bcc.n	8009d80 <L_shift+0xc>
 8009d96:	bd70      	pop	{r4, r5, r6, pc}

08009d98 <__match>:
 8009d98:	b530      	push	{r4, r5, lr}
 8009d9a:	6803      	ldr	r3, [r0, #0]
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009da2:	b914      	cbnz	r4, 8009daa <__match+0x12>
 8009da4:	6003      	str	r3, [r0, #0]
 8009da6:	2001      	movs	r0, #1
 8009da8:	bd30      	pop	{r4, r5, pc}
 8009daa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009db2:	2d19      	cmp	r5, #25
 8009db4:	bf98      	it	ls
 8009db6:	3220      	addls	r2, #32
 8009db8:	42a2      	cmp	r2, r4
 8009dba:	d0f0      	beq.n	8009d9e <__match+0x6>
 8009dbc:	2000      	movs	r0, #0
 8009dbe:	e7f3      	b.n	8009da8 <__match+0x10>

08009dc0 <__hexnan>:
 8009dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc4:	680b      	ldr	r3, [r1, #0]
 8009dc6:	115e      	asrs	r6, r3, #5
 8009dc8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009dcc:	f013 031f 	ands.w	r3, r3, #31
 8009dd0:	b087      	sub	sp, #28
 8009dd2:	bf18      	it	ne
 8009dd4:	3604      	addne	r6, #4
 8009dd6:	2500      	movs	r5, #0
 8009dd8:	1f37      	subs	r7, r6, #4
 8009dda:	4690      	mov	r8, r2
 8009ddc:	6802      	ldr	r2, [r0, #0]
 8009dde:	9301      	str	r3, [sp, #4]
 8009de0:	4682      	mov	sl, r0
 8009de2:	f846 5c04 	str.w	r5, [r6, #-4]
 8009de6:	46b9      	mov	r9, r7
 8009de8:	463c      	mov	r4, r7
 8009dea:	9502      	str	r5, [sp, #8]
 8009dec:	46ab      	mov	fp, r5
 8009dee:	7851      	ldrb	r1, [r2, #1]
 8009df0:	1c53      	adds	r3, r2, #1
 8009df2:	9303      	str	r3, [sp, #12]
 8009df4:	b341      	cbz	r1, 8009e48 <__hexnan+0x88>
 8009df6:	4608      	mov	r0, r1
 8009df8:	9205      	str	r2, [sp, #20]
 8009dfa:	9104      	str	r1, [sp, #16]
 8009dfc:	f7ff fd5f 	bl	80098be <__hexdig_fun>
 8009e00:	2800      	cmp	r0, #0
 8009e02:	d14f      	bne.n	8009ea4 <__hexnan+0xe4>
 8009e04:	9904      	ldr	r1, [sp, #16]
 8009e06:	9a05      	ldr	r2, [sp, #20]
 8009e08:	2920      	cmp	r1, #32
 8009e0a:	d818      	bhi.n	8009e3e <__hexnan+0x7e>
 8009e0c:	9b02      	ldr	r3, [sp, #8]
 8009e0e:	459b      	cmp	fp, r3
 8009e10:	dd13      	ble.n	8009e3a <__hexnan+0x7a>
 8009e12:	454c      	cmp	r4, r9
 8009e14:	d206      	bcs.n	8009e24 <__hexnan+0x64>
 8009e16:	2d07      	cmp	r5, #7
 8009e18:	dc04      	bgt.n	8009e24 <__hexnan+0x64>
 8009e1a:	462a      	mov	r2, r5
 8009e1c:	4649      	mov	r1, r9
 8009e1e:	4620      	mov	r0, r4
 8009e20:	f7ff ffa8 	bl	8009d74 <L_shift>
 8009e24:	4544      	cmp	r4, r8
 8009e26:	d950      	bls.n	8009eca <__hexnan+0x10a>
 8009e28:	2300      	movs	r3, #0
 8009e2a:	f1a4 0904 	sub.w	r9, r4, #4
 8009e2e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009e32:	f8cd b008 	str.w	fp, [sp, #8]
 8009e36:	464c      	mov	r4, r9
 8009e38:	461d      	mov	r5, r3
 8009e3a:	9a03      	ldr	r2, [sp, #12]
 8009e3c:	e7d7      	b.n	8009dee <__hexnan+0x2e>
 8009e3e:	2929      	cmp	r1, #41	; 0x29
 8009e40:	d156      	bne.n	8009ef0 <__hexnan+0x130>
 8009e42:	3202      	adds	r2, #2
 8009e44:	f8ca 2000 	str.w	r2, [sl]
 8009e48:	f1bb 0f00 	cmp.w	fp, #0
 8009e4c:	d050      	beq.n	8009ef0 <__hexnan+0x130>
 8009e4e:	454c      	cmp	r4, r9
 8009e50:	d206      	bcs.n	8009e60 <__hexnan+0xa0>
 8009e52:	2d07      	cmp	r5, #7
 8009e54:	dc04      	bgt.n	8009e60 <__hexnan+0xa0>
 8009e56:	462a      	mov	r2, r5
 8009e58:	4649      	mov	r1, r9
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	f7ff ff8a 	bl	8009d74 <L_shift>
 8009e60:	4544      	cmp	r4, r8
 8009e62:	d934      	bls.n	8009ece <__hexnan+0x10e>
 8009e64:	f1a8 0204 	sub.w	r2, r8, #4
 8009e68:	4623      	mov	r3, r4
 8009e6a:	f853 1b04 	ldr.w	r1, [r3], #4
 8009e6e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009e72:	429f      	cmp	r7, r3
 8009e74:	d2f9      	bcs.n	8009e6a <__hexnan+0xaa>
 8009e76:	1b3b      	subs	r3, r7, r4
 8009e78:	f023 0303 	bic.w	r3, r3, #3
 8009e7c:	3304      	adds	r3, #4
 8009e7e:	3401      	adds	r4, #1
 8009e80:	3e03      	subs	r6, #3
 8009e82:	42b4      	cmp	r4, r6
 8009e84:	bf88      	it	hi
 8009e86:	2304      	movhi	r3, #4
 8009e88:	4443      	add	r3, r8
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f843 2b04 	str.w	r2, [r3], #4
 8009e90:	429f      	cmp	r7, r3
 8009e92:	d2fb      	bcs.n	8009e8c <__hexnan+0xcc>
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	b91b      	cbnz	r3, 8009ea0 <__hexnan+0xe0>
 8009e98:	4547      	cmp	r7, r8
 8009e9a:	d127      	bne.n	8009eec <__hexnan+0x12c>
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	603b      	str	r3, [r7, #0]
 8009ea0:	2005      	movs	r0, #5
 8009ea2:	e026      	b.n	8009ef2 <__hexnan+0x132>
 8009ea4:	3501      	adds	r5, #1
 8009ea6:	2d08      	cmp	r5, #8
 8009ea8:	f10b 0b01 	add.w	fp, fp, #1
 8009eac:	dd06      	ble.n	8009ebc <__hexnan+0xfc>
 8009eae:	4544      	cmp	r4, r8
 8009eb0:	d9c3      	bls.n	8009e3a <__hexnan+0x7a>
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	f844 3c04 	str.w	r3, [r4, #-4]
 8009eb8:	2501      	movs	r5, #1
 8009eba:	3c04      	subs	r4, #4
 8009ebc:	6822      	ldr	r2, [r4, #0]
 8009ebe:	f000 000f 	and.w	r0, r0, #15
 8009ec2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009ec6:	6022      	str	r2, [r4, #0]
 8009ec8:	e7b7      	b.n	8009e3a <__hexnan+0x7a>
 8009eca:	2508      	movs	r5, #8
 8009ecc:	e7b5      	b.n	8009e3a <__hexnan+0x7a>
 8009ece:	9b01      	ldr	r3, [sp, #4]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d0df      	beq.n	8009e94 <__hexnan+0xd4>
 8009ed4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ed8:	f1c3 0320 	rsb	r3, r3, #32
 8009edc:	fa22 f303 	lsr.w	r3, r2, r3
 8009ee0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009ee4:	401a      	ands	r2, r3
 8009ee6:	f846 2c04 	str.w	r2, [r6, #-4]
 8009eea:	e7d3      	b.n	8009e94 <__hexnan+0xd4>
 8009eec:	3f04      	subs	r7, #4
 8009eee:	e7d1      	b.n	8009e94 <__hexnan+0xd4>
 8009ef0:	2004      	movs	r0, #4
 8009ef2:	b007      	add	sp, #28
 8009ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ef8 <_localeconv_r>:
 8009ef8:	4800      	ldr	r0, [pc, #0]	; (8009efc <_localeconv_r+0x4>)
 8009efa:	4770      	bx	lr
 8009efc:	20000194 	.word	0x20000194

08009f00 <__retarget_lock_init_recursive>:
 8009f00:	4770      	bx	lr

08009f02 <__retarget_lock_acquire_recursive>:
 8009f02:	4770      	bx	lr

08009f04 <__retarget_lock_release_recursive>:
 8009f04:	4770      	bx	lr
	...

08009f08 <_lseek_r>:
 8009f08:	b538      	push	{r3, r4, r5, lr}
 8009f0a:	4d07      	ldr	r5, [pc, #28]	; (8009f28 <_lseek_r+0x20>)
 8009f0c:	4604      	mov	r4, r0
 8009f0e:	4608      	mov	r0, r1
 8009f10:	4611      	mov	r1, r2
 8009f12:	2200      	movs	r2, #0
 8009f14:	602a      	str	r2, [r5, #0]
 8009f16:	461a      	mov	r2, r3
 8009f18:	f7f8 ff4a 	bl	8002db0 <_lseek>
 8009f1c:	1c43      	adds	r3, r0, #1
 8009f1e:	d102      	bne.n	8009f26 <_lseek_r+0x1e>
 8009f20:	682b      	ldr	r3, [r5, #0]
 8009f22:	b103      	cbz	r3, 8009f26 <_lseek_r+0x1e>
 8009f24:	6023      	str	r3, [r4, #0]
 8009f26:	bd38      	pop	{r3, r4, r5, pc}
 8009f28:	20001fac 	.word	0x20001fac

08009f2c <__swhatbuf_r>:
 8009f2c:	b570      	push	{r4, r5, r6, lr}
 8009f2e:	460e      	mov	r6, r1
 8009f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f34:	2900      	cmp	r1, #0
 8009f36:	b096      	sub	sp, #88	; 0x58
 8009f38:	4614      	mov	r4, r2
 8009f3a:	461d      	mov	r5, r3
 8009f3c:	da08      	bge.n	8009f50 <__swhatbuf_r+0x24>
 8009f3e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009f42:	2200      	movs	r2, #0
 8009f44:	602a      	str	r2, [r5, #0]
 8009f46:	061a      	lsls	r2, r3, #24
 8009f48:	d410      	bmi.n	8009f6c <__swhatbuf_r+0x40>
 8009f4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f4e:	e00e      	b.n	8009f6e <__swhatbuf_r+0x42>
 8009f50:	466a      	mov	r2, sp
 8009f52:	f000 ffe7 	bl	800af24 <_fstat_r>
 8009f56:	2800      	cmp	r0, #0
 8009f58:	dbf1      	blt.n	8009f3e <__swhatbuf_r+0x12>
 8009f5a:	9a01      	ldr	r2, [sp, #4]
 8009f5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009f60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009f64:	425a      	negs	r2, r3
 8009f66:	415a      	adcs	r2, r3
 8009f68:	602a      	str	r2, [r5, #0]
 8009f6a:	e7ee      	b.n	8009f4a <__swhatbuf_r+0x1e>
 8009f6c:	2340      	movs	r3, #64	; 0x40
 8009f6e:	2000      	movs	r0, #0
 8009f70:	6023      	str	r3, [r4, #0]
 8009f72:	b016      	add	sp, #88	; 0x58
 8009f74:	bd70      	pop	{r4, r5, r6, pc}
	...

08009f78 <__smakebuf_r>:
 8009f78:	898b      	ldrh	r3, [r1, #12]
 8009f7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f7c:	079d      	lsls	r5, r3, #30
 8009f7e:	4606      	mov	r6, r0
 8009f80:	460c      	mov	r4, r1
 8009f82:	d507      	bpl.n	8009f94 <__smakebuf_r+0x1c>
 8009f84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f88:	6023      	str	r3, [r4, #0]
 8009f8a:	6123      	str	r3, [r4, #16]
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	6163      	str	r3, [r4, #20]
 8009f90:	b002      	add	sp, #8
 8009f92:	bd70      	pop	{r4, r5, r6, pc}
 8009f94:	ab01      	add	r3, sp, #4
 8009f96:	466a      	mov	r2, sp
 8009f98:	f7ff ffc8 	bl	8009f2c <__swhatbuf_r>
 8009f9c:	9900      	ldr	r1, [sp, #0]
 8009f9e:	4605      	mov	r5, r0
 8009fa0:	4630      	mov	r0, r6
 8009fa2:	f000 fd87 	bl	800aab4 <_malloc_r>
 8009fa6:	b948      	cbnz	r0, 8009fbc <__smakebuf_r+0x44>
 8009fa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fac:	059a      	lsls	r2, r3, #22
 8009fae:	d4ef      	bmi.n	8009f90 <__smakebuf_r+0x18>
 8009fb0:	f023 0303 	bic.w	r3, r3, #3
 8009fb4:	f043 0302 	orr.w	r3, r3, #2
 8009fb8:	81a3      	strh	r3, [r4, #12]
 8009fba:	e7e3      	b.n	8009f84 <__smakebuf_r+0xc>
 8009fbc:	4b0d      	ldr	r3, [pc, #52]	; (8009ff4 <__smakebuf_r+0x7c>)
 8009fbe:	62b3      	str	r3, [r6, #40]	; 0x28
 8009fc0:	89a3      	ldrh	r3, [r4, #12]
 8009fc2:	6020      	str	r0, [r4, #0]
 8009fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fc8:	81a3      	strh	r3, [r4, #12]
 8009fca:	9b00      	ldr	r3, [sp, #0]
 8009fcc:	6163      	str	r3, [r4, #20]
 8009fce:	9b01      	ldr	r3, [sp, #4]
 8009fd0:	6120      	str	r0, [r4, #16]
 8009fd2:	b15b      	cbz	r3, 8009fec <__smakebuf_r+0x74>
 8009fd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fd8:	4630      	mov	r0, r6
 8009fda:	f000 ffb5 	bl	800af48 <_isatty_r>
 8009fde:	b128      	cbz	r0, 8009fec <__smakebuf_r+0x74>
 8009fe0:	89a3      	ldrh	r3, [r4, #12]
 8009fe2:	f023 0303 	bic.w	r3, r3, #3
 8009fe6:	f043 0301 	orr.w	r3, r3, #1
 8009fea:	81a3      	strh	r3, [r4, #12]
 8009fec:	89a0      	ldrh	r0, [r4, #12]
 8009fee:	4305      	orrs	r5, r0
 8009ff0:	81a5      	strh	r5, [r4, #12]
 8009ff2:	e7cd      	b.n	8009f90 <__smakebuf_r+0x18>
 8009ff4:	08009679 	.word	0x08009679

08009ff8 <malloc>:
 8009ff8:	4b02      	ldr	r3, [pc, #8]	; (800a004 <malloc+0xc>)
 8009ffa:	4601      	mov	r1, r0
 8009ffc:	6818      	ldr	r0, [r3, #0]
 8009ffe:	f000 bd59 	b.w	800aab4 <_malloc_r>
 800a002:	bf00      	nop
 800a004:	2000003c 	.word	0x2000003c

0800a008 <__ascii_mbtowc>:
 800a008:	b082      	sub	sp, #8
 800a00a:	b901      	cbnz	r1, 800a00e <__ascii_mbtowc+0x6>
 800a00c:	a901      	add	r1, sp, #4
 800a00e:	b142      	cbz	r2, 800a022 <__ascii_mbtowc+0x1a>
 800a010:	b14b      	cbz	r3, 800a026 <__ascii_mbtowc+0x1e>
 800a012:	7813      	ldrb	r3, [r2, #0]
 800a014:	600b      	str	r3, [r1, #0]
 800a016:	7812      	ldrb	r2, [r2, #0]
 800a018:	1e10      	subs	r0, r2, #0
 800a01a:	bf18      	it	ne
 800a01c:	2001      	movne	r0, #1
 800a01e:	b002      	add	sp, #8
 800a020:	4770      	bx	lr
 800a022:	4610      	mov	r0, r2
 800a024:	e7fb      	b.n	800a01e <__ascii_mbtowc+0x16>
 800a026:	f06f 0001 	mvn.w	r0, #1
 800a02a:	e7f8      	b.n	800a01e <__ascii_mbtowc+0x16>

0800a02c <_Balloc>:
 800a02c:	b570      	push	{r4, r5, r6, lr}
 800a02e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a030:	4604      	mov	r4, r0
 800a032:	460d      	mov	r5, r1
 800a034:	b976      	cbnz	r6, 800a054 <_Balloc+0x28>
 800a036:	2010      	movs	r0, #16
 800a038:	f7ff ffde 	bl	8009ff8 <malloc>
 800a03c:	4602      	mov	r2, r0
 800a03e:	6260      	str	r0, [r4, #36]	; 0x24
 800a040:	b920      	cbnz	r0, 800a04c <_Balloc+0x20>
 800a042:	4b18      	ldr	r3, [pc, #96]	; (800a0a4 <_Balloc+0x78>)
 800a044:	4818      	ldr	r0, [pc, #96]	; (800a0a8 <_Balloc+0x7c>)
 800a046:	2166      	movs	r1, #102	; 0x66
 800a048:	f000 ff3c 	bl	800aec4 <__assert_func>
 800a04c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a050:	6006      	str	r6, [r0, #0]
 800a052:	60c6      	str	r6, [r0, #12]
 800a054:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a056:	68f3      	ldr	r3, [r6, #12]
 800a058:	b183      	cbz	r3, 800a07c <_Balloc+0x50>
 800a05a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a05c:	68db      	ldr	r3, [r3, #12]
 800a05e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a062:	b9b8      	cbnz	r0, 800a094 <_Balloc+0x68>
 800a064:	2101      	movs	r1, #1
 800a066:	fa01 f605 	lsl.w	r6, r1, r5
 800a06a:	1d72      	adds	r2, r6, #5
 800a06c:	0092      	lsls	r2, r2, #2
 800a06e:	4620      	mov	r0, r4
 800a070:	f000 fc9d 	bl	800a9ae <_calloc_r>
 800a074:	b160      	cbz	r0, 800a090 <_Balloc+0x64>
 800a076:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a07a:	e00e      	b.n	800a09a <_Balloc+0x6e>
 800a07c:	2221      	movs	r2, #33	; 0x21
 800a07e:	2104      	movs	r1, #4
 800a080:	4620      	mov	r0, r4
 800a082:	f000 fc94 	bl	800a9ae <_calloc_r>
 800a086:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a088:	60f0      	str	r0, [r6, #12]
 800a08a:	68db      	ldr	r3, [r3, #12]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d1e4      	bne.n	800a05a <_Balloc+0x2e>
 800a090:	2000      	movs	r0, #0
 800a092:	bd70      	pop	{r4, r5, r6, pc}
 800a094:	6802      	ldr	r2, [r0, #0]
 800a096:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a09a:	2300      	movs	r3, #0
 800a09c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a0a0:	e7f7      	b.n	800a092 <_Balloc+0x66>
 800a0a2:	bf00      	nop
 800a0a4:	0800bd2d 	.word	0x0800bd2d
 800a0a8:	0800be8c 	.word	0x0800be8c

0800a0ac <_Bfree>:
 800a0ac:	b570      	push	{r4, r5, r6, lr}
 800a0ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a0b0:	4605      	mov	r5, r0
 800a0b2:	460c      	mov	r4, r1
 800a0b4:	b976      	cbnz	r6, 800a0d4 <_Bfree+0x28>
 800a0b6:	2010      	movs	r0, #16
 800a0b8:	f7ff ff9e 	bl	8009ff8 <malloc>
 800a0bc:	4602      	mov	r2, r0
 800a0be:	6268      	str	r0, [r5, #36]	; 0x24
 800a0c0:	b920      	cbnz	r0, 800a0cc <_Bfree+0x20>
 800a0c2:	4b09      	ldr	r3, [pc, #36]	; (800a0e8 <_Bfree+0x3c>)
 800a0c4:	4809      	ldr	r0, [pc, #36]	; (800a0ec <_Bfree+0x40>)
 800a0c6:	218a      	movs	r1, #138	; 0x8a
 800a0c8:	f000 fefc 	bl	800aec4 <__assert_func>
 800a0cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0d0:	6006      	str	r6, [r0, #0]
 800a0d2:	60c6      	str	r6, [r0, #12]
 800a0d4:	b13c      	cbz	r4, 800a0e6 <_Bfree+0x3a>
 800a0d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a0d8:	6862      	ldr	r2, [r4, #4]
 800a0da:	68db      	ldr	r3, [r3, #12]
 800a0dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a0e0:	6021      	str	r1, [r4, #0]
 800a0e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a0e6:	bd70      	pop	{r4, r5, r6, pc}
 800a0e8:	0800bd2d 	.word	0x0800bd2d
 800a0ec:	0800be8c 	.word	0x0800be8c

0800a0f0 <__multadd>:
 800a0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0f4:	690d      	ldr	r5, [r1, #16]
 800a0f6:	4607      	mov	r7, r0
 800a0f8:	460c      	mov	r4, r1
 800a0fa:	461e      	mov	r6, r3
 800a0fc:	f101 0c14 	add.w	ip, r1, #20
 800a100:	2000      	movs	r0, #0
 800a102:	f8dc 3000 	ldr.w	r3, [ip]
 800a106:	b299      	uxth	r1, r3
 800a108:	fb02 6101 	mla	r1, r2, r1, r6
 800a10c:	0c1e      	lsrs	r6, r3, #16
 800a10e:	0c0b      	lsrs	r3, r1, #16
 800a110:	fb02 3306 	mla	r3, r2, r6, r3
 800a114:	b289      	uxth	r1, r1
 800a116:	3001      	adds	r0, #1
 800a118:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a11c:	4285      	cmp	r5, r0
 800a11e:	f84c 1b04 	str.w	r1, [ip], #4
 800a122:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a126:	dcec      	bgt.n	800a102 <__multadd+0x12>
 800a128:	b30e      	cbz	r6, 800a16e <__multadd+0x7e>
 800a12a:	68a3      	ldr	r3, [r4, #8]
 800a12c:	42ab      	cmp	r3, r5
 800a12e:	dc19      	bgt.n	800a164 <__multadd+0x74>
 800a130:	6861      	ldr	r1, [r4, #4]
 800a132:	4638      	mov	r0, r7
 800a134:	3101      	adds	r1, #1
 800a136:	f7ff ff79 	bl	800a02c <_Balloc>
 800a13a:	4680      	mov	r8, r0
 800a13c:	b928      	cbnz	r0, 800a14a <__multadd+0x5a>
 800a13e:	4602      	mov	r2, r0
 800a140:	4b0c      	ldr	r3, [pc, #48]	; (800a174 <__multadd+0x84>)
 800a142:	480d      	ldr	r0, [pc, #52]	; (800a178 <__multadd+0x88>)
 800a144:	21b5      	movs	r1, #181	; 0xb5
 800a146:	f000 febd 	bl	800aec4 <__assert_func>
 800a14a:	6922      	ldr	r2, [r4, #16]
 800a14c:	3202      	adds	r2, #2
 800a14e:	f104 010c 	add.w	r1, r4, #12
 800a152:	0092      	lsls	r2, r2, #2
 800a154:	300c      	adds	r0, #12
 800a156:	f7fc fbb1 	bl	80068bc <memcpy>
 800a15a:	4621      	mov	r1, r4
 800a15c:	4638      	mov	r0, r7
 800a15e:	f7ff ffa5 	bl	800a0ac <_Bfree>
 800a162:	4644      	mov	r4, r8
 800a164:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a168:	3501      	adds	r5, #1
 800a16a:	615e      	str	r6, [r3, #20]
 800a16c:	6125      	str	r5, [r4, #16]
 800a16e:	4620      	mov	r0, r4
 800a170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a174:	0800bd9f 	.word	0x0800bd9f
 800a178:	0800be8c 	.word	0x0800be8c

0800a17c <__s2b>:
 800a17c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a180:	460c      	mov	r4, r1
 800a182:	4615      	mov	r5, r2
 800a184:	461f      	mov	r7, r3
 800a186:	2209      	movs	r2, #9
 800a188:	3308      	adds	r3, #8
 800a18a:	4606      	mov	r6, r0
 800a18c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a190:	2100      	movs	r1, #0
 800a192:	2201      	movs	r2, #1
 800a194:	429a      	cmp	r2, r3
 800a196:	db09      	blt.n	800a1ac <__s2b+0x30>
 800a198:	4630      	mov	r0, r6
 800a19a:	f7ff ff47 	bl	800a02c <_Balloc>
 800a19e:	b940      	cbnz	r0, 800a1b2 <__s2b+0x36>
 800a1a0:	4602      	mov	r2, r0
 800a1a2:	4b19      	ldr	r3, [pc, #100]	; (800a208 <__s2b+0x8c>)
 800a1a4:	4819      	ldr	r0, [pc, #100]	; (800a20c <__s2b+0x90>)
 800a1a6:	21ce      	movs	r1, #206	; 0xce
 800a1a8:	f000 fe8c 	bl	800aec4 <__assert_func>
 800a1ac:	0052      	lsls	r2, r2, #1
 800a1ae:	3101      	adds	r1, #1
 800a1b0:	e7f0      	b.n	800a194 <__s2b+0x18>
 800a1b2:	9b08      	ldr	r3, [sp, #32]
 800a1b4:	6143      	str	r3, [r0, #20]
 800a1b6:	2d09      	cmp	r5, #9
 800a1b8:	f04f 0301 	mov.w	r3, #1
 800a1bc:	6103      	str	r3, [r0, #16]
 800a1be:	dd16      	ble.n	800a1ee <__s2b+0x72>
 800a1c0:	f104 0909 	add.w	r9, r4, #9
 800a1c4:	46c8      	mov	r8, r9
 800a1c6:	442c      	add	r4, r5
 800a1c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a1cc:	4601      	mov	r1, r0
 800a1ce:	3b30      	subs	r3, #48	; 0x30
 800a1d0:	220a      	movs	r2, #10
 800a1d2:	4630      	mov	r0, r6
 800a1d4:	f7ff ff8c 	bl	800a0f0 <__multadd>
 800a1d8:	45a0      	cmp	r8, r4
 800a1da:	d1f5      	bne.n	800a1c8 <__s2b+0x4c>
 800a1dc:	f1a5 0408 	sub.w	r4, r5, #8
 800a1e0:	444c      	add	r4, r9
 800a1e2:	1b2d      	subs	r5, r5, r4
 800a1e4:	1963      	adds	r3, r4, r5
 800a1e6:	42bb      	cmp	r3, r7
 800a1e8:	db04      	blt.n	800a1f4 <__s2b+0x78>
 800a1ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1ee:	340a      	adds	r4, #10
 800a1f0:	2509      	movs	r5, #9
 800a1f2:	e7f6      	b.n	800a1e2 <__s2b+0x66>
 800a1f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a1f8:	4601      	mov	r1, r0
 800a1fa:	3b30      	subs	r3, #48	; 0x30
 800a1fc:	220a      	movs	r2, #10
 800a1fe:	4630      	mov	r0, r6
 800a200:	f7ff ff76 	bl	800a0f0 <__multadd>
 800a204:	e7ee      	b.n	800a1e4 <__s2b+0x68>
 800a206:	bf00      	nop
 800a208:	0800bd9f 	.word	0x0800bd9f
 800a20c:	0800be8c 	.word	0x0800be8c

0800a210 <__hi0bits>:
 800a210:	0c03      	lsrs	r3, r0, #16
 800a212:	041b      	lsls	r3, r3, #16
 800a214:	b9d3      	cbnz	r3, 800a24c <__hi0bits+0x3c>
 800a216:	0400      	lsls	r0, r0, #16
 800a218:	2310      	movs	r3, #16
 800a21a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a21e:	bf04      	itt	eq
 800a220:	0200      	lsleq	r0, r0, #8
 800a222:	3308      	addeq	r3, #8
 800a224:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a228:	bf04      	itt	eq
 800a22a:	0100      	lsleq	r0, r0, #4
 800a22c:	3304      	addeq	r3, #4
 800a22e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a232:	bf04      	itt	eq
 800a234:	0080      	lsleq	r0, r0, #2
 800a236:	3302      	addeq	r3, #2
 800a238:	2800      	cmp	r0, #0
 800a23a:	db05      	blt.n	800a248 <__hi0bits+0x38>
 800a23c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a240:	f103 0301 	add.w	r3, r3, #1
 800a244:	bf08      	it	eq
 800a246:	2320      	moveq	r3, #32
 800a248:	4618      	mov	r0, r3
 800a24a:	4770      	bx	lr
 800a24c:	2300      	movs	r3, #0
 800a24e:	e7e4      	b.n	800a21a <__hi0bits+0xa>

0800a250 <__lo0bits>:
 800a250:	6803      	ldr	r3, [r0, #0]
 800a252:	f013 0207 	ands.w	r2, r3, #7
 800a256:	4601      	mov	r1, r0
 800a258:	d00b      	beq.n	800a272 <__lo0bits+0x22>
 800a25a:	07da      	lsls	r2, r3, #31
 800a25c:	d423      	bmi.n	800a2a6 <__lo0bits+0x56>
 800a25e:	0798      	lsls	r0, r3, #30
 800a260:	bf49      	itett	mi
 800a262:	085b      	lsrmi	r3, r3, #1
 800a264:	089b      	lsrpl	r3, r3, #2
 800a266:	2001      	movmi	r0, #1
 800a268:	600b      	strmi	r3, [r1, #0]
 800a26a:	bf5c      	itt	pl
 800a26c:	600b      	strpl	r3, [r1, #0]
 800a26e:	2002      	movpl	r0, #2
 800a270:	4770      	bx	lr
 800a272:	b298      	uxth	r0, r3
 800a274:	b9a8      	cbnz	r0, 800a2a2 <__lo0bits+0x52>
 800a276:	0c1b      	lsrs	r3, r3, #16
 800a278:	2010      	movs	r0, #16
 800a27a:	b2da      	uxtb	r2, r3
 800a27c:	b90a      	cbnz	r2, 800a282 <__lo0bits+0x32>
 800a27e:	3008      	adds	r0, #8
 800a280:	0a1b      	lsrs	r3, r3, #8
 800a282:	071a      	lsls	r2, r3, #28
 800a284:	bf04      	itt	eq
 800a286:	091b      	lsreq	r3, r3, #4
 800a288:	3004      	addeq	r0, #4
 800a28a:	079a      	lsls	r2, r3, #30
 800a28c:	bf04      	itt	eq
 800a28e:	089b      	lsreq	r3, r3, #2
 800a290:	3002      	addeq	r0, #2
 800a292:	07da      	lsls	r2, r3, #31
 800a294:	d403      	bmi.n	800a29e <__lo0bits+0x4e>
 800a296:	085b      	lsrs	r3, r3, #1
 800a298:	f100 0001 	add.w	r0, r0, #1
 800a29c:	d005      	beq.n	800a2aa <__lo0bits+0x5a>
 800a29e:	600b      	str	r3, [r1, #0]
 800a2a0:	4770      	bx	lr
 800a2a2:	4610      	mov	r0, r2
 800a2a4:	e7e9      	b.n	800a27a <__lo0bits+0x2a>
 800a2a6:	2000      	movs	r0, #0
 800a2a8:	4770      	bx	lr
 800a2aa:	2020      	movs	r0, #32
 800a2ac:	4770      	bx	lr
	...

0800a2b0 <__i2b>:
 800a2b0:	b510      	push	{r4, lr}
 800a2b2:	460c      	mov	r4, r1
 800a2b4:	2101      	movs	r1, #1
 800a2b6:	f7ff feb9 	bl	800a02c <_Balloc>
 800a2ba:	4602      	mov	r2, r0
 800a2bc:	b928      	cbnz	r0, 800a2ca <__i2b+0x1a>
 800a2be:	4b05      	ldr	r3, [pc, #20]	; (800a2d4 <__i2b+0x24>)
 800a2c0:	4805      	ldr	r0, [pc, #20]	; (800a2d8 <__i2b+0x28>)
 800a2c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a2c6:	f000 fdfd 	bl	800aec4 <__assert_func>
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	6144      	str	r4, [r0, #20]
 800a2ce:	6103      	str	r3, [r0, #16]
 800a2d0:	bd10      	pop	{r4, pc}
 800a2d2:	bf00      	nop
 800a2d4:	0800bd9f 	.word	0x0800bd9f
 800a2d8:	0800be8c 	.word	0x0800be8c

0800a2dc <__multiply>:
 800a2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2e0:	4691      	mov	r9, r2
 800a2e2:	690a      	ldr	r2, [r1, #16]
 800a2e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	bfb8      	it	lt
 800a2ec:	460b      	movlt	r3, r1
 800a2ee:	460c      	mov	r4, r1
 800a2f0:	bfbc      	itt	lt
 800a2f2:	464c      	movlt	r4, r9
 800a2f4:	4699      	movlt	r9, r3
 800a2f6:	6927      	ldr	r7, [r4, #16]
 800a2f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a2fc:	68a3      	ldr	r3, [r4, #8]
 800a2fe:	6861      	ldr	r1, [r4, #4]
 800a300:	eb07 060a 	add.w	r6, r7, sl
 800a304:	42b3      	cmp	r3, r6
 800a306:	b085      	sub	sp, #20
 800a308:	bfb8      	it	lt
 800a30a:	3101      	addlt	r1, #1
 800a30c:	f7ff fe8e 	bl	800a02c <_Balloc>
 800a310:	b930      	cbnz	r0, 800a320 <__multiply+0x44>
 800a312:	4602      	mov	r2, r0
 800a314:	4b44      	ldr	r3, [pc, #272]	; (800a428 <__multiply+0x14c>)
 800a316:	4845      	ldr	r0, [pc, #276]	; (800a42c <__multiply+0x150>)
 800a318:	f240 115d 	movw	r1, #349	; 0x15d
 800a31c:	f000 fdd2 	bl	800aec4 <__assert_func>
 800a320:	f100 0514 	add.w	r5, r0, #20
 800a324:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a328:	462b      	mov	r3, r5
 800a32a:	2200      	movs	r2, #0
 800a32c:	4543      	cmp	r3, r8
 800a32e:	d321      	bcc.n	800a374 <__multiply+0x98>
 800a330:	f104 0314 	add.w	r3, r4, #20
 800a334:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a338:	f109 0314 	add.w	r3, r9, #20
 800a33c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a340:	9202      	str	r2, [sp, #8]
 800a342:	1b3a      	subs	r2, r7, r4
 800a344:	3a15      	subs	r2, #21
 800a346:	f022 0203 	bic.w	r2, r2, #3
 800a34a:	3204      	adds	r2, #4
 800a34c:	f104 0115 	add.w	r1, r4, #21
 800a350:	428f      	cmp	r7, r1
 800a352:	bf38      	it	cc
 800a354:	2204      	movcc	r2, #4
 800a356:	9201      	str	r2, [sp, #4]
 800a358:	9a02      	ldr	r2, [sp, #8]
 800a35a:	9303      	str	r3, [sp, #12]
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d80c      	bhi.n	800a37a <__multiply+0x9e>
 800a360:	2e00      	cmp	r6, #0
 800a362:	dd03      	ble.n	800a36c <__multiply+0x90>
 800a364:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d05a      	beq.n	800a422 <__multiply+0x146>
 800a36c:	6106      	str	r6, [r0, #16]
 800a36e:	b005      	add	sp, #20
 800a370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a374:	f843 2b04 	str.w	r2, [r3], #4
 800a378:	e7d8      	b.n	800a32c <__multiply+0x50>
 800a37a:	f8b3 a000 	ldrh.w	sl, [r3]
 800a37e:	f1ba 0f00 	cmp.w	sl, #0
 800a382:	d024      	beq.n	800a3ce <__multiply+0xf2>
 800a384:	f104 0e14 	add.w	lr, r4, #20
 800a388:	46a9      	mov	r9, r5
 800a38a:	f04f 0c00 	mov.w	ip, #0
 800a38e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a392:	f8d9 1000 	ldr.w	r1, [r9]
 800a396:	fa1f fb82 	uxth.w	fp, r2
 800a39a:	b289      	uxth	r1, r1
 800a39c:	fb0a 110b 	mla	r1, sl, fp, r1
 800a3a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a3a4:	f8d9 2000 	ldr.w	r2, [r9]
 800a3a8:	4461      	add	r1, ip
 800a3aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a3ae:	fb0a c20b 	mla	r2, sl, fp, ip
 800a3b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a3b6:	b289      	uxth	r1, r1
 800a3b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a3bc:	4577      	cmp	r7, lr
 800a3be:	f849 1b04 	str.w	r1, [r9], #4
 800a3c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a3c6:	d8e2      	bhi.n	800a38e <__multiply+0xb2>
 800a3c8:	9a01      	ldr	r2, [sp, #4]
 800a3ca:	f845 c002 	str.w	ip, [r5, r2]
 800a3ce:	9a03      	ldr	r2, [sp, #12]
 800a3d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a3d4:	3304      	adds	r3, #4
 800a3d6:	f1b9 0f00 	cmp.w	r9, #0
 800a3da:	d020      	beq.n	800a41e <__multiply+0x142>
 800a3dc:	6829      	ldr	r1, [r5, #0]
 800a3de:	f104 0c14 	add.w	ip, r4, #20
 800a3e2:	46ae      	mov	lr, r5
 800a3e4:	f04f 0a00 	mov.w	sl, #0
 800a3e8:	f8bc b000 	ldrh.w	fp, [ip]
 800a3ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a3f0:	fb09 220b 	mla	r2, r9, fp, r2
 800a3f4:	4492      	add	sl, r2
 800a3f6:	b289      	uxth	r1, r1
 800a3f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a3fc:	f84e 1b04 	str.w	r1, [lr], #4
 800a400:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a404:	f8be 1000 	ldrh.w	r1, [lr]
 800a408:	0c12      	lsrs	r2, r2, #16
 800a40a:	fb09 1102 	mla	r1, r9, r2, r1
 800a40e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a412:	4567      	cmp	r7, ip
 800a414:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a418:	d8e6      	bhi.n	800a3e8 <__multiply+0x10c>
 800a41a:	9a01      	ldr	r2, [sp, #4]
 800a41c:	50a9      	str	r1, [r5, r2]
 800a41e:	3504      	adds	r5, #4
 800a420:	e79a      	b.n	800a358 <__multiply+0x7c>
 800a422:	3e01      	subs	r6, #1
 800a424:	e79c      	b.n	800a360 <__multiply+0x84>
 800a426:	bf00      	nop
 800a428:	0800bd9f 	.word	0x0800bd9f
 800a42c:	0800be8c 	.word	0x0800be8c

0800a430 <__pow5mult>:
 800a430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a434:	4615      	mov	r5, r2
 800a436:	f012 0203 	ands.w	r2, r2, #3
 800a43a:	4606      	mov	r6, r0
 800a43c:	460f      	mov	r7, r1
 800a43e:	d007      	beq.n	800a450 <__pow5mult+0x20>
 800a440:	4c25      	ldr	r4, [pc, #148]	; (800a4d8 <__pow5mult+0xa8>)
 800a442:	3a01      	subs	r2, #1
 800a444:	2300      	movs	r3, #0
 800a446:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a44a:	f7ff fe51 	bl	800a0f0 <__multadd>
 800a44e:	4607      	mov	r7, r0
 800a450:	10ad      	asrs	r5, r5, #2
 800a452:	d03d      	beq.n	800a4d0 <__pow5mult+0xa0>
 800a454:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a456:	b97c      	cbnz	r4, 800a478 <__pow5mult+0x48>
 800a458:	2010      	movs	r0, #16
 800a45a:	f7ff fdcd 	bl	8009ff8 <malloc>
 800a45e:	4602      	mov	r2, r0
 800a460:	6270      	str	r0, [r6, #36]	; 0x24
 800a462:	b928      	cbnz	r0, 800a470 <__pow5mult+0x40>
 800a464:	4b1d      	ldr	r3, [pc, #116]	; (800a4dc <__pow5mult+0xac>)
 800a466:	481e      	ldr	r0, [pc, #120]	; (800a4e0 <__pow5mult+0xb0>)
 800a468:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a46c:	f000 fd2a 	bl	800aec4 <__assert_func>
 800a470:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a474:	6004      	str	r4, [r0, #0]
 800a476:	60c4      	str	r4, [r0, #12]
 800a478:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a47c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a480:	b94c      	cbnz	r4, 800a496 <__pow5mult+0x66>
 800a482:	f240 2171 	movw	r1, #625	; 0x271
 800a486:	4630      	mov	r0, r6
 800a488:	f7ff ff12 	bl	800a2b0 <__i2b>
 800a48c:	2300      	movs	r3, #0
 800a48e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a492:	4604      	mov	r4, r0
 800a494:	6003      	str	r3, [r0, #0]
 800a496:	f04f 0900 	mov.w	r9, #0
 800a49a:	07eb      	lsls	r3, r5, #31
 800a49c:	d50a      	bpl.n	800a4b4 <__pow5mult+0x84>
 800a49e:	4639      	mov	r1, r7
 800a4a0:	4622      	mov	r2, r4
 800a4a2:	4630      	mov	r0, r6
 800a4a4:	f7ff ff1a 	bl	800a2dc <__multiply>
 800a4a8:	4639      	mov	r1, r7
 800a4aa:	4680      	mov	r8, r0
 800a4ac:	4630      	mov	r0, r6
 800a4ae:	f7ff fdfd 	bl	800a0ac <_Bfree>
 800a4b2:	4647      	mov	r7, r8
 800a4b4:	106d      	asrs	r5, r5, #1
 800a4b6:	d00b      	beq.n	800a4d0 <__pow5mult+0xa0>
 800a4b8:	6820      	ldr	r0, [r4, #0]
 800a4ba:	b938      	cbnz	r0, 800a4cc <__pow5mult+0x9c>
 800a4bc:	4622      	mov	r2, r4
 800a4be:	4621      	mov	r1, r4
 800a4c0:	4630      	mov	r0, r6
 800a4c2:	f7ff ff0b 	bl	800a2dc <__multiply>
 800a4c6:	6020      	str	r0, [r4, #0]
 800a4c8:	f8c0 9000 	str.w	r9, [r0]
 800a4cc:	4604      	mov	r4, r0
 800a4ce:	e7e4      	b.n	800a49a <__pow5mult+0x6a>
 800a4d0:	4638      	mov	r0, r7
 800a4d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4d6:	bf00      	nop
 800a4d8:	0800bfd8 	.word	0x0800bfd8
 800a4dc:	0800bd2d 	.word	0x0800bd2d
 800a4e0:	0800be8c 	.word	0x0800be8c

0800a4e4 <__lshift>:
 800a4e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4e8:	460c      	mov	r4, r1
 800a4ea:	6849      	ldr	r1, [r1, #4]
 800a4ec:	6923      	ldr	r3, [r4, #16]
 800a4ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a4f2:	68a3      	ldr	r3, [r4, #8]
 800a4f4:	4607      	mov	r7, r0
 800a4f6:	4691      	mov	r9, r2
 800a4f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a4fc:	f108 0601 	add.w	r6, r8, #1
 800a500:	42b3      	cmp	r3, r6
 800a502:	db0b      	blt.n	800a51c <__lshift+0x38>
 800a504:	4638      	mov	r0, r7
 800a506:	f7ff fd91 	bl	800a02c <_Balloc>
 800a50a:	4605      	mov	r5, r0
 800a50c:	b948      	cbnz	r0, 800a522 <__lshift+0x3e>
 800a50e:	4602      	mov	r2, r0
 800a510:	4b2a      	ldr	r3, [pc, #168]	; (800a5bc <__lshift+0xd8>)
 800a512:	482b      	ldr	r0, [pc, #172]	; (800a5c0 <__lshift+0xdc>)
 800a514:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a518:	f000 fcd4 	bl	800aec4 <__assert_func>
 800a51c:	3101      	adds	r1, #1
 800a51e:	005b      	lsls	r3, r3, #1
 800a520:	e7ee      	b.n	800a500 <__lshift+0x1c>
 800a522:	2300      	movs	r3, #0
 800a524:	f100 0114 	add.w	r1, r0, #20
 800a528:	f100 0210 	add.w	r2, r0, #16
 800a52c:	4618      	mov	r0, r3
 800a52e:	4553      	cmp	r3, sl
 800a530:	db37      	blt.n	800a5a2 <__lshift+0xbe>
 800a532:	6920      	ldr	r0, [r4, #16]
 800a534:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a538:	f104 0314 	add.w	r3, r4, #20
 800a53c:	f019 091f 	ands.w	r9, r9, #31
 800a540:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a544:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a548:	d02f      	beq.n	800a5aa <__lshift+0xc6>
 800a54a:	f1c9 0e20 	rsb	lr, r9, #32
 800a54e:	468a      	mov	sl, r1
 800a550:	f04f 0c00 	mov.w	ip, #0
 800a554:	681a      	ldr	r2, [r3, #0]
 800a556:	fa02 f209 	lsl.w	r2, r2, r9
 800a55a:	ea42 020c 	orr.w	r2, r2, ip
 800a55e:	f84a 2b04 	str.w	r2, [sl], #4
 800a562:	f853 2b04 	ldr.w	r2, [r3], #4
 800a566:	4298      	cmp	r0, r3
 800a568:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a56c:	d8f2      	bhi.n	800a554 <__lshift+0x70>
 800a56e:	1b03      	subs	r3, r0, r4
 800a570:	3b15      	subs	r3, #21
 800a572:	f023 0303 	bic.w	r3, r3, #3
 800a576:	3304      	adds	r3, #4
 800a578:	f104 0215 	add.w	r2, r4, #21
 800a57c:	4290      	cmp	r0, r2
 800a57e:	bf38      	it	cc
 800a580:	2304      	movcc	r3, #4
 800a582:	f841 c003 	str.w	ip, [r1, r3]
 800a586:	f1bc 0f00 	cmp.w	ip, #0
 800a58a:	d001      	beq.n	800a590 <__lshift+0xac>
 800a58c:	f108 0602 	add.w	r6, r8, #2
 800a590:	3e01      	subs	r6, #1
 800a592:	4638      	mov	r0, r7
 800a594:	612e      	str	r6, [r5, #16]
 800a596:	4621      	mov	r1, r4
 800a598:	f7ff fd88 	bl	800a0ac <_Bfree>
 800a59c:	4628      	mov	r0, r5
 800a59e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a5a6:	3301      	adds	r3, #1
 800a5a8:	e7c1      	b.n	800a52e <__lshift+0x4a>
 800a5aa:	3904      	subs	r1, #4
 800a5ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a5b4:	4298      	cmp	r0, r3
 800a5b6:	d8f9      	bhi.n	800a5ac <__lshift+0xc8>
 800a5b8:	e7ea      	b.n	800a590 <__lshift+0xac>
 800a5ba:	bf00      	nop
 800a5bc:	0800bd9f 	.word	0x0800bd9f
 800a5c0:	0800be8c 	.word	0x0800be8c

0800a5c4 <__mcmp>:
 800a5c4:	b530      	push	{r4, r5, lr}
 800a5c6:	6902      	ldr	r2, [r0, #16]
 800a5c8:	690c      	ldr	r4, [r1, #16]
 800a5ca:	1b12      	subs	r2, r2, r4
 800a5cc:	d10e      	bne.n	800a5ec <__mcmp+0x28>
 800a5ce:	f100 0314 	add.w	r3, r0, #20
 800a5d2:	3114      	adds	r1, #20
 800a5d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a5d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a5dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a5e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a5e4:	42a5      	cmp	r5, r4
 800a5e6:	d003      	beq.n	800a5f0 <__mcmp+0x2c>
 800a5e8:	d305      	bcc.n	800a5f6 <__mcmp+0x32>
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	4610      	mov	r0, r2
 800a5ee:	bd30      	pop	{r4, r5, pc}
 800a5f0:	4283      	cmp	r3, r0
 800a5f2:	d3f3      	bcc.n	800a5dc <__mcmp+0x18>
 800a5f4:	e7fa      	b.n	800a5ec <__mcmp+0x28>
 800a5f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a5fa:	e7f7      	b.n	800a5ec <__mcmp+0x28>

0800a5fc <__mdiff>:
 800a5fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a600:	460c      	mov	r4, r1
 800a602:	4606      	mov	r6, r0
 800a604:	4611      	mov	r1, r2
 800a606:	4620      	mov	r0, r4
 800a608:	4690      	mov	r8, r2
 800a60a:	f7ff ffdb 	bl	800a5c4 <__mcmp>
 800a60e:	1e05      	subs	r5, r0, #0
 800a610:	d110      	bne.n	800a634 <__mdiff+0x38>
 800a612:	4629      	mov	r1, r5
 800a614:	4630      	mov	r0, r6
 800a616:	f7ff fd09 	bl	800a02c <_Balloc>
 800a61a:	b930      	cbnz	r0, 800a62a <__mdiff+0x2e>
 800a61c:	4b3a      	ldr	r3, [pc, #232]	; (800a708 <__mdiff+0x10c>)
 800a61e:	4602      	mov	r2, r0
 800a620:	f240 2132 	movw	r1, #562	; 0x232
 800a624:	4839      	ldr	r0, [pc, #228]	; (800a70c <__mdiff+0x110>)
 800a626:	f000 fc4d 	bl	800aec4 <__assert_func>
 800a62a:	2301      	movs	r3, #1
 800a62c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a630:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a634:	bfa4      	itt	ge
 800a636:	4643      	movge	r3, r8
 800a638:	46a0      	movge	r8, r4
 800a63a:	4630      	mov	r0, r6
 800a63c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a640:	bfa6      	itte	ge
 800a642:	461c      	movge	r4, r3
 800a644:	2500      	movge	r5, #0
 800a646:	2501      	movlt	r5, #1
 800a648:	f7ff fcf0 	bl	800a02c <_Balloc>
 800a64c:	b920      	cbnz	r0, 800a658 <__mdiff+0x5c>
 800a64e:	4b2e      	ldr	r3, [pc, #184]	; (800a708 <__mdiff+0x10c>)
 800a650:	4602      	mov	r2, r0
 800a652:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a656:	e7e5      	b.n	800a624 <__mdiff+0x28>
 800a658:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a65c:	6926      	ldr	r6, [r4, #16]
 800a65e:	60c5      	str	r5, [r0, #12]
 800a660:	f104 0914 	add.w	r9, r4, #20
 800a664:	f108 0514 	add.w	r5, r8, #20
 800a668:	f100 0e14 	add.w	lr, r0, #20
 800a66c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a670:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a674:	f108 0210 	add.w	r2, r8, #16
 800a678:	46f2      	mov	sl, lr
 800a67a:	2100      	movs	r1, #0
 800a67c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a680:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a684:	fa1f f883 	uxth.w	r8, r3
 800a688:	fa11 f18b 	uxtah	r1, r1, fp
 800a68c:	0c1b      	lsrs	r3, r3, #16
 800a68e:	eba1 0808 	sub.w	r8, r1, r8
 800a692:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a696:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a69a:	fa1f f888 	uxth.w	r8, r8
 800a69e:	1419      	asrs	r1, r3, #16
 800a6a0:	454e      	cmp	r6, r9
 800a6a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a6a6:	f84a 3b04 	str.w	r3, [sl], #4
 800a6aa:	d8e7      	bhi.n	800a67c <__mdiff+0x80>
 800a6ac:	1b33      	subs	r3, r6, r4
 800a6ae:	3b15      	subs	r3, #21
 800a6b0:	f023 0303 	bic.w	r3, r3, #3
 800a6b4:	3304      	adds	r3, #4
 800a6b6:	3415      	adds	r4, #21
 800a6b8:	42a6      	cmp	r6, r4
 800a6ba:	bf38      	it	cc
 800a6bc:	2304      	movcc	r3, #4
 800a6be:	441d      	add	r5, r3
 800a6c0:	4473      	add	r3, lr
 800a6c2:	469e      	mov	lr, r3
 800a6c4:	462e      	mov	r6, r5
 800a6c6:	4566      	cmp	r6, ip
 800a6c8:	d30e      	bcc.n	800a6e8 <__mdiff+0xec>
 800a6ca:	f10c 0203 	add.w	r2, ip, #3
 800a6ce:	1b52      	subs	r2, r2, r5
 800a6d0:	f022 0203 	bic.w	r2, r2, #3
 800a6d4:	3d03      	subs	r5, #3
 800a6d6:	45ac      	cmp	ip, r5
 800a6d8:	bf38      	it	cc
 800a6da:	2200      	movcc	r2, #0
 800a6dc:	441a      	add	r2, r3
 800a6de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a6e2:	b17b      	cbz	r3, 800a704 <__mdiff+0x108>
 800a6e4:	6107      	str	r7, [r0, #16]
 800a6e6:	e7a3      	b.n	800a630 <__mdiff+0x34>
 800a6e8:	f856 8b04 	ldr.w	r8, [r6], #4
 800a6ec:	fa11 f288 	uxtah	r2, r1, r8
 800a6f0:	1414      	asrs	r4, r2, #16
 800a6f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a6f6:	b292      	uxth	r2, r2
 800a6f8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a6fc:	f84e 2b04 	str.w	r2, [lr], #4
 800a700:	1421      	asrs	r1, r4, #16
 800a702:	e7e0      	b.n	800a6c6 <__mdiff+0xca>
 800a704:	3f01      	subs	r7, #1
 800a706:	e7ea      	b.n	800a6de <__mdiff+0xe2>
 800a708:	0800bd9f 	.word	0x0800bd9f
 800a70c:	0800be8c 	.word	0x0800be8c

0800a710 <__ulp>:
 800a710:	b082      	sub	sp, #8
 800a712:	ed8d 0b00 	vstr	d0, [sp]
 800a716:	9b01      	ldr	r3, [sp, #4]
 800a718:	4912      	ldr	r1, [pc, #72]	; (800a764 <__ulp+0x54>)
 800a71a:	4019      	ands	r1, r3
 800a71c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a720:	2900      	cmp	r1, #0
 800a722:	dd05      	ble.n	800a730 <__ulp+0x20>
 800a724:	2200      	movs	r2, #0
 800a726:	460b      	mov	r3, r1
 800a728:	ec43 2b10 	vmov	d0, r2, r3
 800a72c:	b002      	add	sp, #8
 800a72e:	4770      	bx	lr
 800a730:	4249      	negs	r1, r1
 800a732:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a736:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a73a:	f04f 0200 	mov.w	r2, #0
 800a73e:	f04f 0300 	mov.w	r3, #0
 800a742:	da04      	bge.n	800a74e <__ulp+0x3e>
 800a744:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a748:	fa41 f300 	asr.w	r3, r1, r0
 800a74c:	e7ec      	b.n	800a728 <__ulp+0x18>
 800a74e:	f1a0 0114 	sub.w	r1, r0, #20
 800a752:	291e      	cmp	r1, #30
 800a754:	bfda      	itte	le
 800a756:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a75a:	fa20 f101 	lsrle.w	r1, r0, r1
 800a75e:	2101      	movgt	r1, #1
 800a760:	460a      	mov	r2, r1
 800a762:	e7e1      	b.n	800a728 <__ulp+0x18>
 800a764:	7ff00000 	.word	0x7ff00000

0800a768 <__b2d>:
 800a768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a76a:	6905      	ldr	r5, [r0, #16]
 800a76c:	f100 0714 	add.w	r7, r0, #20
 800a770:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a774:	1f2e      	subs	r6, r5, #4
 800a776:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a77a:	4620      	mov	r0, r4
 800a77c:	f7ff fd48 	bl	800a210 <__hi0bits>
 800a780:	f1c0 0320 	rsb	r3, r0, #32
 800a784:	280a      	cmp	r0, #10
 800a786:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a804 <__b2d+0x9c>
 800a78a:	600b      	str	r3, [r1, #0]
 800a78c:	dc14      	bgt.n	800a7b8 <__b2d+0x50>
 800a78e:	f1c0 0e0b 	rsb	lr, r0, #11
 800a792:	fa24 f10e 	lsr.w	r1, r4, lr
 800a796:	42b7      	cmp	r7, r6
 800a798:	ea41 030c 	orr.w	r3, r1, ip
 800a79c:	bf34      	ite	cc
 800a79e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a7a2:	2100      	movcs	r1, #0
 800a7a4:	3015      	adds	r0, #21
 800a7a6:	fa04 f000 	lsl.w	r0, r4, r0
 800a7aa:	fa21 f10e 	lsr.w	r1, r1, lr
 800a7ae:	ea40 0201 	orr.w	r2, r0, r1
 800a7b2:	ec43 2b10 	vmov	d0, r2, r3
 800a7b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7b8:	42b7      	cmp	r7, r6
 800a7ba:	bf3a      	itte	cc
 800a7bc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a7c0:	f1a5 0608 	subcc.w	r6, r5, #8
 800a7c4:	2100      	movcs	r1, #0
 800a7c6:	380b      	subs	r0, #11
 800a7c8:	d017      	beq.n	800a7fa <__b2d+0x92>
 800a7ca:	f1c0 0c20 	rsb	ip, r0, #32
 800a7ce:	fa04 f500 	lsl.w	r5, r4, r0
 800a7d2:	42be      	cmp	r6, r7
 800a7d4:	fa21 f40c 	lsr.w	r4, r1, ip
 800a7d8:	ea45 0504 	orr.w	r5, r5, r4
 800a7dc:	bf8c      	ite	hi
 800a7de:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a7e2:	2400      	movls	r4, #0
 800a7e4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a7e8:	fa01 f000 	lsl.w	r0, r1, r0
 800a7ec:	fa24 f40c 	lsr.w	r4, r4, ip
 800a7f0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a7f4:	ea40 0204 	orr.w	r2, r0, r4
 800a7f8:	e7db      	b.n	800a7b2 <__b2d+0x4a>
 800a7fa:	ea44 030c 	orr.w	r3, r4, ip
 800a7fe:	460a      	mov	r2, r1
 800a800:	e7d7      	b.n	800a7b2 <__b2d+0x4a>
 800a802:	bf00      	nop
 800a804:	3ff00000 	.word	0x3ff00000

0800a808 <__d2b>:
 800a808:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a80c:	4689      	mov	r9, r1
 800a80e:	2101      	movs	r1, #1
 800a810:	ec57 6b10 	vmov	r6, r7, d0
 800a814:	4690      	mov	r8, r2
 800a816:	f7ff fc09 	bl	800a02c <_Balloc>
 800a81a:	4604      	mov	r4, r0
 800a81c:	b930      	cbnz	r0, 800a82c <__d2b+0x24>
 800a81e:	4602      	mov	r2, r0
 800a820:	4b25      	ldr	r3, [pc, #148]	; (800a8b8 <__d2b+0xb0>)
 800a822:	4826      	ldr	r0, [pc, #152]	; (800a8bc <__d2b+0xb4>)
 800a824:	f240 310a 	movw	r1, #778	; 0x30a
 800a828:	f000 fb4c 	bl	800aec4 <__assert_func>
 800a82c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a830:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a834:	bb35      	cbnz	r5, 800a884 <__d2b+0x7c>
 800a836:	2e00      	cmp	r6, #0
 800a838:	9301      	str	r3, [sp, #4]
 800a83a:	d028      	beq.n	800a88e <__d2b+0x86>
 800a83c:	4668      	mov	r0, sp
 800a83e:	9600      	str	r6, [sp, #0]
 800a840:	f7ff fd06 	bl	800a250 <__lo0bits>
 800a844:	9900      	ldr	r1, [sp, #0]
 800a846:	b300      	cbz	r0, 800a88a <__d2b+0x82>
 800a848:	9a01      	ldr	r2, [sp, #4]
 800a84a:	f1c0 0320 	rsb	r3, r0, #32
 800a84e:	fa02 f303 	lsl.w	r3, r2, r3
 800a852:	430b      	orrs	r3, r1
 800a854:	40c2      	lsrs	r2, r0
 800a856:	6163      	str	r3, [r4, #20]
 800a858:	9201      	str	r2, [sp, #4]
 800a85a:	9b01      	ldr	r3, [sp, #4]
 800a85c:	61a3      	str	r3, [r4, #24]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	bf14      	ite	ne
 800a862:	2202      	movne	r2, #2
 800a864:	2201      	moveq	r2, #1
 800a866:	6122      	str	r2, [r4, #16]
 800a868:	b1d5      	cbz	r5, 800a8a0 <__d2b+0x98>
 800a86a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a86e:	4405      	add	r5, r0
 800a870:	f8c9 5000 	str.w	r5, [r9]
 800a874:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a878:	f8c8 0000 	str.w	r0, [r8]
 800a87c:	4620      	mov	r0, r4
 800a87e:	b003      	add	sp, #12
 800a880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a884:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a888:	e7d5      	b.n	800a836 <__d2b+0x2e>
 800a88a:	6161      	str	r1, [r4, #20]
 800a88c:	e7e5      	b.n	800a85a <__d2b+0x52>
 800a88e:	a801      	add	r0, sp, #4
 800a890:	f7ff fcde 	bl	800a250 <__lo0bits>
 800a894:	9b01      	ldr	r3, [sp, #4]
 800a896:	6163      	str	r3, [r4, #20]
 800a898:	2201      	movs	r2, #1
 800a89a:	6122      	str	r2, [r4, #16]
 800a89c:	3020      	adds	r0, #32
 800a89e:	e7e3      	b.n	800a868 <__d2b+0x60>
 800a8a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a8a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a8a8:	f8c9 0000 	str.w	r0, [r9]
 800a8ac:	6918      	ldr	r0, [r3, #16]
 800a8ae:	f7ff fcaf 	bl	800a210 <__hi0bits>
 800a8b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a8b6:	e7df      	b.n	800a878 <__d2b+0x70>
 800a8b8:	0800bd9f 	.word	0x0800bd9f
 800a8bc:	0800be8c 	.word	0x0800be8c

0800a8c0 <__ratio>:
 800a8c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c4:	4688      	mov	r8, r1
 800a8c6:	4669      	mov	r1, sp
 800a8c8:	4681      	mov	r9, r0
 800a8ca:	f7ff ff4d 	bl	800a768 <__b2d>
 800a8ce:	a901      	add	r1, sp, #4
 800a8d0:	4640      	mov	r0, r8
 800a8d2:	ec55 4b10 	vmov	r4, r5, d0
 800a8d6:	f7ff ff47 	bl	800a768 <__b2d>
 800a8da:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a8de:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a8e2:	eba3 0c02 	sub.w	ip, r3, r2
 800a8e6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a8ea:	1a9b      	subs	r3, r3, r2
 800a8ec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a8f0:	ec51 0b10 	vmov	r0, r1, d0
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	bfd6      	itet	le
 800a8f8:	460a      	movle	r2, r1
 800a8fa:	462a      	movgt	r2, r5
 800a8fc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a900:	468b      	mov	fp, r1
 800a902:	462f      	mov	r7, r5
 800a904:	bfd4      	ite	le
 800a906:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a90a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a90e:	4620      	mov	r0, r4
 800a910:	ee10 2a10 	vmov	r2, s0
 800a914:	465b      	mov	r3, fp
 800a916:	4639      	mov	r1, r7
 800a918:	f7f5 ffa8 	bl	800086c <__aeabi_ddiv>
 800a91c:	ec41 0b10 	vmov	d0, r0, r1
 800a920:	b003      	add	sp, #12
 800a922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a926 <__copybits>:
 800a926:	3901      	subs	r1, #1
 800a928:	b570      	push	{r4, r5, r6, lr}
 800a92a:	1149      	asrs	r1, r1, #5
 800a92c:	6914      	ldr	r4, [r2, #16]
 800a92e:	3101      	adds	r1, #1
 800a930:	f102 0314 	add.w	r3, r2, #20
 800a934:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a938:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a93c:	1f05      	subs	r5, r0, #4
 800a93e:	42a3      	cmp	r3, r4
 800a940:	d30c      	bcc.n	800a95c <__copybits+0x36>
 800a942:	1aa3      	subs	r3, r4, r2
 800a944:	3b11      	subs	r3, #17
 800a946:	f023 0303 	bic.w	r3, r3, #3
 800a94a:	3211      	adds	r2, #17
 800a94c:	42a2      	cmp	r2, r4
 800a94e:	bf88      	it	hi
 800a950:	2300      	movhi	r3, #0
 800a952:	4418      	add	r0, r3
 800a954:	2300      	movs	r3, #0
 800a956:	4288      	cmp	r0, r1
 800a958:	d305      	bcc.n	800a966 <__copybits+0x40>
 800a95a:	bd70      	pop	{r4, r5, r6, pc}
 800a95c:	f853 6b04 	ldr.w	r6, [r3], #4
 800a960:	f845 6f04 	str.w	r6, [r5, #4]!
 800a964:	e7eb      	b.n	800a93e <__copybits+0x18>
 800a966:	f840 3b04 	str.w	r3, [r0], #4
 800a96a:	e7f4      	b.n	800a956 <__copybits+0x30>

0800a96c <__any_on>:
 800a96c:	f100 0214 	add.w	r2, r0, #20
 800a970:	6900      	ldr	r0, [r0, #16]
 800a972:	114b      	asrs	r3, r1, #5
 800a974:	4298      	cmp	r0, r3
 800a976:	b510      	push	{r4, lr}
 800a978:	db11      	blt.n	800a99e <__any_on+0x32>
 800a97a:	dd0a      	ble.n	800a992 <__any_on+0x26>
 800a97c:	f011 011f 	ands.w	r1, r1, #31
 800a980:	d007      	beq.n	800a992 <__any_on+0x26>
 800a982:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a986:	fa24 f001 	lsr.w	r0, r4, r1
 800a98a:	fa00 f101 	lsl.w	r1, r0, r1
 800a98e:	428c      	cmp	r4, r1
 800a990:	d10b      	bne.n	800a9aa <__any_on+0x3e>
 800a992:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a996:	4293      	cmp	r3, r2
 800a998:	d803      	bhi.n	800a9a2 <__any_on+0x36>
 800a99a:	2000      	movs	r0, #0
 800a99c:	bd10      	pop	{r4, pc}
 800a99e:	4603      	mov	r3, r0
 800a9a0:	e7f7      	b.n	800a992 <__any_on+0x26>
 800a9a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a9a6:	2900      	cmp	r1, #0
 800a9a8:	d0f5      	beq.n	800a996 <__any_on+0x2a>
 800a9aa:	2001      	movs	r0, #1
 800a9ac:	e7f6      	b.n	800a99c <__any_on+0x30>

0800a9ae <_calloc_r>:
 800a9ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9b0:	fba1 2402 	umull	r2, r4, r1, r2
 800a9b4:	b94c      	cbnz	r4, 800a9ca <_calloc_r+0x1c>
 800a9b6:	4611      	mov	r1, r2
 800a9b8:	9201      	str	r2, [sp, #4]
 800a9ba:	f000 f87b 	bl	800aab4 <_malloc_r>
 800a9be:	9a01      	ldr	r2, [sp, #4]
 800a9c0:	4605      	mov	r5, r0
 800a9c2:	b930      	cbnz	r0, 800a9d2 <_calloc_r+0x24>
 800a9c4:	4628      	mov	r0, r5
 800a9c6:	b003      	add	sp, #12
 800a9c8:	bd30      	pop	{r4, r5, pc}
 800a9ca:	220c      	movs	r2, #12
 800a9cc:	6002      	str	r2, [r0, #0]
 800a9ce:	2500      	movs	r5, #0
 800a9d0:	e7f8      	b.n	800a9c4 <_calloc_r+0x16>
 800a9d2:	4621      	mov	r1, r4
 800a9d4:	f7fb ff80 	bl	80068d8 <memset>
 800a9d8:	e7f4      	b.n	800a9c4 <_calloc_r+0x16>
	...

0800a9dc <_free_r>:
 800a9dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9de:	2900      	cmp	r1, #0
 800a9e0:	d044      	beq.n	800aa6c <_free_r+0x90>
 800a9e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9e6:	9001      	str	r0, [sp, #4]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	f1a1 0404 	sub.w	r4, r1, #4
 800a9ee:	bfb8      	it	lt
 800a9f0:	18e4      	addlt	r4, r4, r3
 800a9f2:	f000 fad3 	bl	800af9c <__malloc_lock>
 800a9f6:	4a1e      	ldr	r2, [pc, #120]	; (800aa70 <_free_r+0x94>)
 800a9f8:	9801      	ldr	r0, [sp, #4]
 800a9fa:	6813      	ldr	r3, [r2, #0]
 800a9fc:	b933      	cbnz	r3, 800aa0c <_free_r+0x30>
 800a9fe:	6063      	str	r3, [r4, #4]
 800aa00:	6014      	str	r4, [r2, #0]
 800aa02:	b003      	add	sp, #12
 800aa04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa08:	f000 bace 	b.w	800afa8 <__malloc_unlock>
 800aa0c:	42a3      	cmp	r3, r4
 800aa0e:	d908      	bls.n	800aa22 <_free_r+0x46>
 800aa10:	6825      	ldr	r5, [r4, #0]
 800aa12:	1961      	adds	r1, r4, r5
 800aa14:	428b      	cmp	r3, r1
 800aa16:	bf01      	itttt	eq
 800aa18:	6819      	ldreq	r1, [r3, #0]
 800aa1a:	685b      	ldreq	r3, [r3, #4]
 800aa1c:	1949      	addeq	r1, r1, r5
 800aa1e:	6021      	streq	r1, [r4, #0]
 800aa20:	e7ed      	b.n	800a9fe <_free_r+0x22>
 800aa22:	461a      	mov	r2, r3
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	b10b      	cbz	r3, 800aa2c <_free_r+0x50>
 800aa28:	42a3      	cmp	r3, r4
 800aa2a:	d9fa      	bls.n	800aa22 <_free_r+0x46>
 800aa2c:	6811      	ldr	r1, [r2, #0]
 800aa2e:	1855      	adds	r5, r2, r1
 800aa30:	42a5      	cmp	r5, r4
 800aa32:	d10b      	bne.n	800aa4c <_free_r+0x70>
 800aa34:	6824      	ldr	r4, [r4, #0]
 800aa36:	4421      	add	r1, r4
 800aa38:	1854      	adds	r4, r2, r1
 800aa3a:	42a3      	cmp	r3, r4
 800aa3c:	6011      	str	r1, [r2, #0]
 800aa3e:	d1e0      	bne.n	800aa02 <_free_r+0x26>
 800aa40:	681c      	ldr	r4, [r3, #0]
 800aa42:	685b      	ldr	r3, [r3, #4]
 800aa44:	6053      	str	r3, [r2, #4]
 800aa46:	4421      	add	r1, r4
 800aa48:	6011      	str	r1, [r2, #0]
 800aa4a:	e7da      	b.n	800aa02 <_free_r+0x26>
 800aa4c:	d902      	bls.n	800aa54 <_free_r+0x78>
 800aa4e:	230c      	movs	r3, #12
 800aa50:	6003      	str	r3, [r0, #0]
 800aa52:	e7d6      	b.n	800aa02 <_free_r+0x26>
 800aa54:	6825      	ldr	r5, [r4, #0]
 800aa56:	1961      	adds	r1, r4, r5
 800aa58:	428b      	cmp	r3, r1
 800aa5a:	bf04      	itt	eq
 800aa5c:	6819      	ldreq	r1, [r3, #0]
 800aa5e:	685b      	ldreq	r3, [r3, #4]
 800aa60:	6063      	str	r3, [r4, #4]
 800aa62:	bf04      	itt	eq
 800aa64:	1949      	addeq	r1, r1, r5
 800aa66:	6021      	streq	r1, [r4, #0]
 800aa68:	6054      	str	r4, [r2, #4]
 800aa6a:	e7ca      	b.n	800aa02 <_free_r+0x26>
 800aa6c:	b003      	add	sp, #12
 800aa6e:	bd30      	pop	{r4, r5, pc}
 800aa70:	20001fa4 	.word	0x20001fa4

0800aa74 <sbrk_aligned>:
 800aa74:	b570      	push	{r4, r5, r6, lr}
 800aa76:	4e0e      	ldr	r6, [pc, #56]	; (800aab0 <sbrk_aligned+0x3c>)
 800aa78:	460c      	mov	r4, r1
 800aa7a:	6831      	ldr	r1, [r6, #0]
 800aa7c:	4605      	mov	r5, r0
 800aa7e:	b911      	cbnz	r1, 800aa86 <sbrk_aligned+0x12>
 800aa80:	f000 fa02 	bl	800ae88 <_sbrk_r>
 800aa84:	6030      	str	r0, [r6, #0]
 800aa86:	4621      	mov	r1, r4
 800aa88:	4628      	mov	r0, r5
 800aa8a:	f000 f9fd 	bl	800ae88 <_sbrk_r>
 800aa8e:	1c43      	adds	r3, r0, #1
 800aa90:	d00a      	beq.n	800aaa8 <sbrk_aligned+0x34>
 800aa92:	1cc4      	adds	r4, r0, #3
 800aa94:	f024 0403 	bic.w	r4, r4, #3
 800aa98:	42a0      	cmp	r0, r4
 800aa9a:	d007      	beq.n	800aaac <sbrk_aligned+0x38>
 800aa9c:	1a21      	subs	r1, r4, r0
 800aa9e:	4628      	mov	r0, r5
 800aaa0:	f000 f9f2 	bl	800ae88 <_sbrk_r>
 800aaa4:	3001      	adds	r0, #1
 800aaa6:	d101      	bne.n	800aaac <sbrk_aligned+0x38>
 800aaa8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800aaac:	4620      	mov	r0, r4
 800aaae:	bd70      	pop	{r4, r5, r6, pc}
 800aab0:	20001fa8 	.word	0x20001fa8

0800aab4 <_malloc_r>:
 800aab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aab8:	1ccd      	adds	r5, r1, #3
 800aaba:	f025 0503 	bic.w	r5, r5, #3
 800aabe:	3508      	adds	r5, #8
 800aac0:	2d0c      	cmp	r5, #12
 800aac2:	bf38      	it	cc
 800aac4:	250c      	movcc	r5, #12
 800aac6:	2d00      	cmp	r5, #0
 800aac8:	4607      	mov	r7, r0
 800aaca:	db01      	blt.n	800aad0 <_malloc_r+0x1c>
 800aacc:	42a9      	cmp	r1, r5
 800aace:	d905      	bls.n	800aadc <_malloc_r+0x28>
 800aad0:	230c      	movs	r3, #12
 800aad2:	603b      	str	r3, [r7, #0]
 800aad4:	2600      	movs	r6, #0
 800aad6:	4630      	mov	r0, r6
 800aad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aadc:	4e2e      	ldr	r6, [pc, #184]	; (800ab98 <_malloc_r+0xe4>)
 800aade:	f000 fa5d 	bl	800af9c <__malloc_lock>
 800aae2:	6833      	ldr	r3, [r6, #0]
 800aae4:	461c      	mov	r4, r3
 800aae6:	bb34      	cbnz	r4, 800ab36 <_malloc_r+0x82>
 800aae8:	4629      	mov	r1, r5
 800aaea:	4638      	mov	r0, r7
 800aaec:	f7ff ffc2 	bl	800aa74 <sbrk_aligned>
 800aaf0:	1c43      	adds	r3, r0, #1
 800aaf2:	4604      	mov	r4, r0
 800aaf4:	d14d      	bne.n	800ab92 <_malloc_r+0xde>
 800aaf6:	6834      	ldr	r4, [r6, #0]
 800aaf8:	4626      	mov	r6, r4
 800aafa:	2e00      	cmp	r6, #0
 800aafc:	d140      	bne.n	800ab80 <_malloc_r+0xcc>
 800aafe:	6823      	ldr	r3, [r4, #0]
 800ab00:	4631      	mov	r1, r6
 800ab02:	4638      	mov	r0, r7
 800ab04:	eb04 0803 	add.w	r8, r4, r3
 800ab08:	f000 f9be 	bl	800ae88 <_sbrk_r>
 800ab0c:	4580      	cmp	r8, r0
 800ab0e:	d13a      	bne.n	800ab86 <_malloc_r+0xd2>
 800ab10:	6821      	ldr	r1, [r4, #0]
 800ab12:	3503      	adds	r5, #3
 800ab14:	1a6d      	subs	r5, r5, r1
 800ab16:	f025 0503 	bic.w	r5, r5, #3
 800ab1a:	3508      	adds	r5, #8
 800ab1c:	2d0c      	cmp	r5, #12
 800ab1e:	bf38      	it	cc
 800ab20:	250c      	movcc	r5, #12
 800ab22:	4629      	mov	r1, r5
 800ab24:	4638      	mov	r0, r7
 800ab26:	f7ff ffa5 	bl	800aa74 <sbrk_aligned>
 800ab2a:	3001      	adds	r0, #1
 800ab2c:	d02b      	beq.n	800ab86 <_malloc_r+0xd2>
 800ab2e:	6823      	ldr	r3, [r4, #0]
 800ab30:	442b      	add	r3, r5
 800ab32:	6023      	str	r3, [r4, #0]
 800ab34:	e00e      	b.n	800ab54 <_malloc_r+0xa0>
 800ab36:	6822      	ldr	r2, [r4, #0]
 800ab38:	1b52      	subs	r2, r2, r5
 800ab3a:	d41e      	bmi.n	800ab7a <_malloc_r+0xc6>
 800ab3c:	2a0b      	cmp	r2, #11
 800ab3e:	d916      	bls.n	800ab6e <_malloc_r+0xba>
 800ab40:	1961      	adds	r1, r4, r5
 800ab42:	42a3      	cmp	r3, r4
 800ab44:	6025      	str	r5, [r4, #0]
 800ab46:	bf18      	it	ne
 800ab48:	6059      	strne	r1, [r3, #4]
 800ab4a:	6863      	ldr	r3, [r4, #4]
 800ab4c:	bf08      	it	eq
 800ab4e:	6031      	streq	r1, [r6, #0]
 800ab50:	5162      	str	r2, [r4, r5]
 800ab52:	604b      	str	r3, [r1, #4]
 800ab54:	4638      	mov	r0, r7
 800ab56:	f104 060b 	add.w	r6, r4, #11
 800ab5a:	f000 fa25 	bl	800afa8 <__malloc_unlock>
 800ab5e:	f026 0607 	bic.w	r6, r6, #7
 800ab62:	1d23      	adds	r3, r4, #4
 800ab64:	1af2      	subs	r2, r6, r3
 800ab66:	d0b6      	beq.n	800aad6 <_malloc_r+0x22>
 800ab68:	1b9b      	subs	r3, r3, r6
 800ab6a:	50a3      	str	r3, [r4, r2]
 800ab6c:	e7b3      	b.n	800aad6 <_malloc_r+0x22>
 800ab6e:	6862      	ldr	r2, [r4, #4]
 800ab70:	42a3      	cmp	r3, r4
 800ab72:	bf0c      	ite	eq
 800ab74:	6032      	streq	r2, [r6, #0]
 800ab76:	605a      	strne	r2, [r3, #4]
 800ab78:	e7ec      	b.n	800ab54 <_malloc_r+0xa0>
 800ab7a:	4623      	mov	r3, r4
 800ab7c:	6864      	ldr	r4, [r4, #4]
 800ab7e:	e7b2      	b.n	800aae6 <_malloc_r+0x32>
 800ab80:	4634      	mov	r4, r6
 800ab82:	6876      	ldr	r6, [r6, #4]
 800ab84:	e7b9      	b.n	800aafa <_malloc_r+0x46>
 800ab86:	230c      	movs	r3, #12
 800ab88:	603b      	str	r3, [r7, #0]
 800ab8a:	4638      	mov	r0, r7
 800ab8c:	f000 fa0c 	bl	800afa8 <__malloc_unlock>
 800ab90:	e7a1      	b.n	800aad6 <_malloc_r+0x22>
 800ab92:	6025      	str	r5, [r4, #0]
 800ab94:	e7de      	b.n	800ab54 <_malloc_r+0xa0>
 800ab96:	bf00      	nop
 800ab98:	20001fa4 	.word	0x20001fa4

0800ab9c <__ssputs_r>:
 800ab9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aba0:	688e      	ldr	r6, [r1, #8]
 800aba2:	429e      	cmp	r6, r3
 800aba4:	4682      	mov	sl, r0
 800aba6:	460c      	mov	r4, r1
 800aba8:	4690      	mov	r8, r2
 800abaa:	461f      	mov	r7, r3
 800abac:	d838      	bhi.n	800ac20 <__ssputs_r+0x84>
 800abae:	898a      	ldrh	r2, [r1, #12]
 800abb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800abb4:	d032      	beq.n	800ac1c <__ssputs_r+0x80>
 800abb6:	6825      	ldr	r5, [r4, #0]
 800abb8:	6909      	ldr	r1, [r1, #16]
 800abba:	eba5 0901 	sub.w	r9, r5, r1
 800abbe:	6965      	ldr	r5, [r4, #20]
 800abc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800abc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800abc8:	3301      	adds	r3, #1
 800abca:	444b      	add	r3, r9
 800abcc:	106d      	asrs	r5, r5, #1
 800abce:	429d      	cmp	r5, r3
 800abd0:	bf38      	it	cc
 800abd2:	461d      	movcc	r5, r3
 800abd4:	0553      	lsls	r3, r2, #21
 800abd6:	d531      	bpl.n	800ac3c <__ssputs_r+0xa0>
 800abd8:	4629      	mov	r1, r5
 800abda:	f7ff ff6b 	bl	800aab4 <_malloc_r>
 800abde:	4606      	mov	r6, r0
 800abe0:	b950      	cbnz	r0, 800abf8 <__ssputs_r+0x5c>
 800abe2:	230c      	movs	r3, #12
 800abe4:	f8ca 3000 	str.w	r3, [sl]
 800abe8:	89a3      	ldrh	r3, [r4, #12]
 800abea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abee:	81a3      	strh	r3, [r4, #12]
 800abf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abf8:	6921      	ldr	r1, [r4, #16]
 800abfa:	464a      	mov	r2, r9
 800abfc:	f7fb fe5e 	bl	80068bc <memcpy>
 800ac00:	89a3      	ldrh	r3, [r4, #12]
 800ac02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ac06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac0a:	81a3      	strh	r3, [r4, #12]
 800ac0c:	6126      	str	r6, [r4, #16]
 800ac0e:	6165      	str	r5, [r4, #20]
 800ac10:	444e      	add	r6, r9
 800ac12:	eba5 0509 	sub.w	r5, r5, r9
 800ac16:	6026      	str	r6, [r4, #0]
 800ac18:	60a5      	str	r5, [r4, #8]
 800ac1a:	463e      	mov	r6, r7
 800ac1c:	42be      	cmp	r6, r7
 800ac1e:	d900      	bls.n	800ac22 <__ssputs_r+0x86>
 800ac20:	463e      	mov	r6, r7
 800ac22:	6820      	ldr	r0, [r4, #0]
 800ac24:	4632      	mov	r2, r6
 800ac26:	4641      	mov	r1, r8
 800ac28:	f000 f99e 	bl	800af68 <memmove>
 800ac2c:	68a3      	ldr	r3, [r4, #8]
 800ac2e:	1b9b      	subs	r3, r3, r6
 800ac30:	60a3      	str	r3, [r4, #8]
 800ac32:	6823      	ldr	r3, [r4, #0]
 800ac34:	4433      	add	r3, r6
 800ac36:	6023      	str	r3, [r4, #0]
 800ac38:	2000      	movs	r0, #0
 800ac3a:	e7db      	b.n	800abf4 <__ssputs_r+0x58>
 800ac3c:	462a      	mov	r2, r5
 800ac3e:	f000 f9b9 	bl	800afb4 <_realloc_r>
 800ac42:	4606      	mov	r6, r0
 800ac44:	2800      	cmp	r0, #0
 800ac46:	d1e1      	bne.n	800ac0c <__ssputs_r+0x70>
 800ac48:	6921      	ldr	r1, [r4, #16]
 800ac4a:	4650      	mov	r0, sl
 800ac4c:	f7ff fec6 	bl	800a9dc <_free_r>
 800ac50:	e7c7      	b.n	800abe2 <__ssputs_r+0x46>
	...

0800ac54 <_svfiprintf_r>:
 800ac54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac58:	4698      	mov	r8, r3
 800ac5a:	898b      	ldrh	r3, [r1, #12]
 800ac5c:	061b      	lsls	r3, r3, #24
 800ac5e:	b09d      	sub	sp, #116	; 0x74
 800ac60:	4607      	mov	r7, r0
 800ac62:	460d      	mov	r5, r1
 800ac64:	4614      	mov	r4, r2
 800ac66:	d50e      	bpl.n	800ac86 <_svfiprintf_r+0x32>
 800ac68:	690b      	ldr	r3, [r1, #16]
 800ac6a:	b963      	cbnz	r3, 800ac86 <_svfiprintf_r+0x32>
 800ac6c:	2140      	movs	r1, #64	; 0x40
 800ac6e:	f7ff ff21 	bl	800aab4 <_malloc_r>
 800ac72:	6028      	str	r0, [r5, #0]
 800ac74:	6128      	str	r0, [r5, #16]
 800ac76:	b920      	cbnz	r0, 800ac82 <_svfiprintf_r+0x2e>
 800ac78:	230c      	movs	r3, #12
 800ac7a:	603b      	str	r3, [r7, #0]
 800ac7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac80:	e0d1      	b.n	800ae26 <_svfiprintf_r+0x1d2>
 800ac82:	2340      	movs	r3, #64	; 0x40
 800ac84:	616b      	str	r3, [r5, #20]
 800ac86:	2300      	movs	r3, #0
 800ac88:	9309      	str	r3, [sp, #36]	; 0x24
 800ac8a:	2320      	movs	r3, #32
 800ac8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac90:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac94:	2330      	movs	r3, #48	; 0x30
 800ac96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ae40 <_svfiprintf_r+0x1ec>
 800ac9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac9e:	f04f 0901 	mov.w	r9, #1
 800aca2:	4623      	mov	r3, r4
 800aca4:	469a      	mov	sl, r3
 800aca6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acaa:	b10a      	cbz	r2, 800acb0 <_svfiprintf_r+0x5c>
 800acac:	2a25      	cmp	r2, #37	; 0x25
 800acae:	d1f9      	bne.n	800aca4 <_svfiprintf_r+0x50>
 800acb0:	ebba 0b04 	subs.w	fp, sl, r4
 800acb4:	d00b      	beq.n	800acce <_svfiprintf_r+0x7a>
 800acb6:	465b      	mov	r3, fp
 800acb8:	4622      	mov	r2, r4
 800acba:	4629      	mov	r1, r5
 800acbc:	4638      	mov	r0, r7
 800acbe:	f7ff ff6d 	bl	800ab9c <__ssputs_r>
 800acc2:	3001      	adds	r0, #1
 800acc4:	f000 80aa 	beq.w	800ae1c <_svfiprintf_r+0x1c8>
 800acc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acca:	445a      	add	r2, fp
 800accc:	9209      	str	r2, [sp, #36]	; 0x24
 800acce:	f89a 3000 	ldrb.w	r3, [sl]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	f000 80a2 	beq.w	800ae1c <_svfiprintf_r+0x1c8>
 800acd8:	2300      	movs	r3, #0
 800acda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800acde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ace2:	f10a 0a01 	add.w	sl, sl, #1
 800ace6:	9304      	str	r3, [sp, #16]
 800ace8:	9307      	str	r3, [sp, #28]
 800acea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800acee:	931a      	str	r3, [sp, #104]	; 0x68
 800acf0:	4654      	mov	r4, sl
 800acf2:	2205      	movs	r2, #5
 800acf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acf8:	4851      	ldr	r0, [pc, #324]	; (800ae40 <_svfiprintf_r+0x1ec>)
 800acfa:	f7f5 fa81 	bl	8000200 <memchr>
 800acfe:	9a04      	ldr	r2, [sp, #16]
 800ad00:	b9d8      	cbnz	r0, 800ad3a <_svfiprintf_r+0xe6>
 800ad02:	06d0      	lsls	r0, r2, #27
 800ad04:	bf44      	itt	mi
 800ad06:	2320      	movmi	r3, #32
 800ad08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad0c:	0711      	lsls	r1, r2, #28
 800ad0e:	bf44      	itt	mi
 800ad10:	232b      	movmi	r3, #43	; 0x2b
 800ad12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad16:	f89a 3000 	ldrb.w	r3, [sl]
 800ad1a:	2b2a      	cmp	r3, #42	; 0x2a
 800ad1c:	d015      	beq.n	800ad4a <_svfiprintf_r+0xf6>
 800ad1e:	9a07      	ldr	r2, [sp, #28]
 800ad20:	4654      	mov	r4, sl
 800ad22:	2000      	movs	r0, #0
 800ad24:	f04f 0c0a 	mov.w	ip, #10
 800ad28:	4621      	mov	r1, r4
 800ad2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad2e:	3b30      	subs	r3, #48	; 0x30
 800ad30:	2b09      	cmp	r3, #9
 800ad32:	d94e      	bls.n	800add2 <_svfiprintf_r+0x17e>
 800ad34:	b1b0      	cbz	r0, 800ad64 <_svfiprintf_r+0x110>
 800ad36:	9207      	str	r2, [sp, #28]
 800ad38:	e014      	b.n	800ad64 <_svfiprintf_r+0x110>
 800ad3a:	eba0 0308 	sub.w	r3, r0, r8
 800ad3e:	fa09 f303 	lsl.w	r3, r9, r3
 800ad42:	4313      	orrs	r3, r2
 800ad44:	9304      	str	r3, [sp, #16]
 800ad46:	46a2      	mov	sl, r4
 800ad48:	e7d2      	b.n	800acf0 <_svfiprintf_r+0x9c>
 800ad4a:	9b03      	ldr	r3, [sp, #12]
 800ad4c:	1d19      	adds	r1, r3, #4
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	9103      	str	r1, [sp, #12]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	bfbb      	ittet	lt
 800ad56:	425b      	neglt	r3, r3
 800ad58:	f042 0202 	orrlt.w	r2, r2, #2
 800ad5c:	9307      	strge	r3, [sp, #28]
 800ad5e:	9307      	strlt	r3, [sp, #28]
 800ad60:	bfb8      	it	lt
 800ad62:	9204      	strlt	r2, [sp, #16]
 800ad64:	7823      	ldrb	r3, [r4, #0]
 800ad66:	2b2e      	cmp	r3, #46	; 0x2e
 800ad68:	d10c      	bne.n	800ad84 <_svfiprintf_r+0x130>
 800ad6a:	7863      	ldrb	r3, [r4, #1]
 800ad6c:	2b2a      	cmp	r3, #42	; 0x2a
 800ad6e:	d135      	bne.n	800addc <_svfiprintf_r+0x188>
 800ad70:	9b03      	ldr	r3, [sp, #12]
 800ad72:	1d1a      	adds	r2, r3, #4
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	9203      	str	r2, [sp, #12]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	bfb8      	it	lt
 800ad7c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ad80:	3402      	adds	r4, #2
 800ad82:	9305      	str	r3, [sp, #20]
 800ad84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ae50 <_svfiprintf_r+0x1fc>
 800ad88:	7821      	ldrb	r1, [r4, #0]
 800ad8a:	2203      	movs	r2, #3
 800ad8c:	4650      	mov	r0, sl
 800ad8e:	f7f5 fa37 	bl	8000200 <memchr>
 800ad92:	b140      	cbz	r0, 800ada6 <_svfiprintf_r+0x152>
 800ad94:	2340      	movs	r3, #64	; 0x40
 800ad96:	eba0 000a 	sub.w	r0, r0, sl
 800ad9a:	fa03 f000 	lsl.w	r0, r3, r0
 800ad9e:	9b04      	ldr	r3, [sp, #16]
 800ada0:	4303      	orrs	r3, r0
 800ada2:	3401      	adds	r4, #1
 800ada4:	9304      	str	r3, [sp, #16]
 800ada6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adaa:	4826      	ldr	r0, [pc, #152]	; (800ae44 <_svfiprintf_r+0x1f0>)
 800adac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800adb0:	2206      	movs	r2, #6
 800adb2:	f7f5 fa25 	bl	8000200 <memchr>
 800adb6:	2800      	cmp	r0, #0
 800adb8:	d038      	beq.n	800ae2c <_svfiprintf_r+0x1d8>
 800adba:	4b23      	ldr	r3, [pc, #140]	; (800ae48 <_svfiprintf_r+0x1f4>)
 800adbc:	bb1b      	cbnz	r3, 800ae06 <_svfiprintf_r+0x1b2>
 800adbe:	9b03      	ldr	r3, [sp, #12]
 800adc0:	3307      	adds	r3, #7
 800adc2:	f023 0307 	bic.w	r3, r3, #7
 800adc6:	3308      	adds	r3, #8
 800adc8:	9303      	str	r3, [sp, #12]
 800adca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adcc:	4433      	add	r3, r6
 800adce:	9309      	str	r3, [sp, #36]	; 0x24
 800add0:	e767      	b.n	800aca2 <_svfiprintf_r+0x4e>
 800add2:	fb0c 3202 	mla	r2, ip, r2, r3
 800add6:	460c      	mov	r4, r1
 800add8:	2001      	movs	r0, #1
 800adda:	e7a5      	b.n	800ad28 <_svfiprintf_r+0xd4>
 800addc:	2300      	movs	r3, #0
 800adde:	3401      	adds	r4, #1
 800ade0:	9305      	str	r3, [sp, #20]
 800ade2:	4619      	mov	r1, r3
 800ade4:	f04f 0c0a 	mov.w	ip, #10
 800ade8:	4620      	mov	r0, r4
 800adea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adee:	3a30      	subs	r2, #48	; 0x30
 800adf0:	2a09      	cmp	r2, #9
 800adf2:	d903      	bls.n	800adfc <_svfiprintf_r+0x1a8>
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d0c5      	beq.n	800ad84 <_svfiprintf_r+0x130>
 800adf8:	9105      	str	r1, [sp, #20]
 800adfa:	e7c3      	b.n	800ad84 <_svfiprintf_r+0x130>
 800adfc:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae00:	4604      	mov	r4, r0
 800ae02:	2301      	movs	r3, #1
 800ae04:	e7f0      	b.n	800ade8 <_svfiprintf_r+0x194>
 800ae06:	ab03      	add	r3, sp, #12
 800ae08:	9300      	str	r3, [sp, #0]
 800ae0a:	462a      	mov	r2, r5
 800ae0c:	4b0f      	ldr	r3, [pc, #60]	; (800ae4c <_svfiprintf_r+0x1f8>)
 800ae0e:	a904      	add	r1, sp, #16
 800ae10:	4638      	mov	r0, r7
 800ae12:	f7fb fe09 	bl	8006a28 <_printf_float>
 800ae16:	1c42      	adds	r2, r0, #1
 800ae18:	4606      	mov	r6, r0
 800ae1a:	d1d6      	bne.n	800adca <_svfiprintf_r+0x176>
 800ae1c:	89ab      	ldrh	r3, [r5, #12]
 800ae1e:	065b      	lsls	r3, r3, #25
 800ae20:	f53f af2c 	bmi.w	800ac7c <_svfiprintf_r+0x28>
 800ae24:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae26:	b01d      	add	sp, #116	; 0x74
 800ae28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae2c:	ab03      	add	r3, sp, #12
 800ae2e:	9300      	str	r3, [sp, #0]
 800ae30:	462a      	mov	r2, r5
 800ae32:	4b06      	ldr	r3, [pc, #24]	; (800ae4c <_svfiprintf_r+0x1f8>)
 800ae34:	a904      	add	r1, sp, #16
 800ae36:	4638      	mov	r0, r7
 800ae38:	f7fc f89a 	bl	8006f70 <_printf_i>
 800ae3c:	e7eb      	b.n	800ae16 <_svfiprintf_r+0x1c2>
 800ae3e:	bf00      	nop
 800ae40:	0800bfe4 	.word	0x0800bfe4
 800ae44:	0800bfee 	.word	0x0800bfee
 800ae48:	08006a29 	.word	0x08006a29
 800ae4c:	0800ab9d 	.word	0x0800ab9d
 800ae50:	0800bfea 	.word	0x0800bfea

0800ae54 <_read_r>:
 800ae54:	b538      	push	{r3, r4, r5, lr}
 800ae56:	4d07      	ldr	r5, [pc, #28]	; (800ae74 <_read_r+0x20>)
 800ae58:	4604      	mov	r4, r0
 800ae5a:	4608      	mov	r0, r1
 800ae5c:	4611      	mov	r1, r2
 800ae5e:	2200      	movs	r2, #0
 800ae60:	602a      	str	r2, [r5, #0]
 800ae62:	461a      	mov	r2, r3
 800ae64:	f7f7 ff44 	bl	8002cf0 <_read>
 800ae68:	1c43      	adds	r3, r0, #1
 800ae6a:	d102      	bne.n	800ae72 <_read_r+0x1e>
 800ae6c:	682b      	ldr	r3, [r5, #0]
 800ae6e:	b103      	cbz	r3, 800ae72 <_read_r+0x1e>
 800ae70:	6023      	str	r3, [r4, #0]
 800ae72:	bd38      	pop	{r3, r4, r5, pc}
 800ae74:	20001fac 	.word	0x20001fac

0800ae78 <nan>:
 800ae78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ae80 <nan+0x8>
 800ae7c:	4770      	bx	lr
 800ae7e:	bf00      	nop
 800ae80:	00000000 	.word	0x00000000
 800ae84:	7ff80000 	.word	0x7ff80000

0800ae88 <_sbrk_r>:
 800ae88:	b538      	push	{r3, r4, r5, lr}
 800ae8a:	4d06      	ldr	r5, [pc, #24]	; (800aea4 <_sbrk_r+0x1c>)
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	4604      	mov	r4, r0
 800ae90:	4608      	mov	r0, r1
 800ae92:	602b      	str	r3, [r5, #0]
 800ae94:	f7f7 ff9a 	bl	8002dcc <_sbrk>
 800ae98:	1c43      	adds	r3, r0, #1
 800ae9a:	d102      	bne.n	800aea2 <_sbrk_r+0x1a>
 800ae9c:	682b      	ldr	r3, [r5, #0]
 800ae9e:	b103      	cbz	r3, 800aea2 <_sbrk_r+0x1a>
 800aea0:	6023      	str	r3, [r4, #0]
 800aea2:	bd38      	pop	{r3, r4, r5, pc}
 800aea4:	20001fac 	.word	0x20001fac

0800aea8 <__ascii_wctomb>:
 800aea8:	b149      	cbz	r1, 800aebe <__ascii_wctomb+0x16>
 800aeaa:	2aff      	cmp	r2, #255	; 0xff
 800aeac:	bf85      	ittet	hi
 800aeae:	238a      	movhi	r3, #138	; 0x8a
 800aeb0:	6003      	strhi	r3, [r0, #0]
 800aeb2:	700a      	strbls	r2, [r1, #0]
 800aeb4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800aeb8:	bf98      	it	ls
 800aeba:	2001      	movls	r0, #1
 800aebc:	4770      	bx	lr
 800aebe:	4608      	mov	r0, r1
 800aec0:	4770      	bx	lr
	...

0800aec4 <__assert_func>:
 800aec4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aec6:	4614      	mov	r4, r2
 800aec8:	461a      	mov	r2, r3
 800aeca:	4b09      	ldr	r3, [pc, #36]	; (800aef0 <__assert_func+0x2c>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4605      	mov	r5, r0
 800aed0:	68d8      	ldr	r0, [r3, #12]
 800aed2:	b14c      	cbz	r4, 800aee8 <__assert_func+0x24>
 800aed4:	4b07      	ldr	r3, [pc, #28]	; (800aef4 <__assert_func+0x30>)
 800aed6:	9100      	str	r1, [sp, #0]
 800aed8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aedc:	4906      	ldr	r1, [pc, #24]	; (800aef8 <__assert_func+0x34>)
 800aede:	462b      	mov	r3, r5
 800aee0:	f000 f80e 	bl	800af00 <fiprintf>
 800aee4:	f000 f9ee 	bl	800b2c4 <abort>
 800aee8:	4b04      	ldr	r3, [pc, #16]	; (800aefc <__assert_func+0x38>)
 800aeea:	461c      	mov	r4, r3
 800aeec:	e7f3      	b.n	800aed6 <__assert_func+0x12>
 800aeee:	bf00      	nop
 800aef0:	2000003c 	.word	0x2000003c
 800aef4:	0800bff5 	.word	0x0800bff5
 800aef8:	0800c002 	.word	0x0800c002
 800aefc:	0800c030 	.word	0x0800c030

0800af00 <fiprintf>:
 800af00:	b40e      	push	{r1, r2, r3}
 800af02:	b503      	push	{r0, r1, lr}
 800af04:	4601      	mov	r1, r0
 800af06:	ab03      	add	r3, sp, #12
 800af08:	4805      	ldr	r0, [pc, #20]	; (800af20 <fiprintf+0x20>)
 800af0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800af0e:	6800      	ldr	r0, [r0, #0]
 800af10:	9301      	str	r3, [sp, #4]
 800af12:	f000 f8a7 	bl	800b064 <_vfiprintf_r>
 800af16:	b002      	add	sp, #8
 800af18:	f85d eb04 	ldr.w	lr, [sp], #4
 800af1c:	b003      	add	sp, #12
 800af1e:	4770      	bx	lr
 800af20:	2000003c 	.word	0x2000003c

0800af24 <_fstat_r>:
 800af24:	b538      	push	{r3, r4, r5, lr}
 800af26:	4d07      	ldr	r5, [pc, #28]	; (800af44 <_fstat_r+0x20>)
 800af28:	2300      	movs	r3, #0
 800af2a:	4604      	mov	r4, r0
 800af2c:	4608      	mov	r0, r1
 800af2e:	4611      	mov	r1, r2
 800af30:	602b      	str	r3, [r5, #0]
 800af32:	f7f7 ff22 	bl	8002d7a <_fstat>
 800af36:	1c43      	adds	r3, r0, #1
 800af38:	d102      	bne.n	800af40 <_fstat_r+0x1c>
 800af3a:	682b      	ldr	r3, [r5, #0]
 800af3c:	b103      	cbz	r3, 800af40 <_fstat_r+0x1c>
 800af3e:	6023      	str	r3, [r4, #0]
 800af40:	bd38      	pop	{r3, r4, r5, pc}
 800af42:	bf00      	nop
 800af44:	20001fac 	.word	0x20001fac

0800af48 <_isatty_r>:
 800af48:	b538      	push	{r3, r4, r5, lr}
 800af4a:	4d06      	ldr	r5, [pc, #24]	; (800af64 <_isatty_r+0x1c>)
 800af4c:	2300      	movs	r3, #0
 800af4e:	4604      	mov	r4, r0
 800af50:	4608      	mov	r0, r1
 800af52:	602b      	str	r3, [r5, #0]
 800af54:	f7f7 ff21 	bl	8002d9a <_isatty>
 800af58:	1c43      	adds	r3, r0, #1
 800af5a:	d102      	bne.n	800af62 <_isatty_r+0x1a>
 800af5c:	682b      	ldr	r3, [r5, #0]
 800af5e:	b103      	cbz	r3, 800af62 <_isatty_r+0x1a>
 800af60:	6023      	str	r3, [r4, #0]
 800af62:	bd38      	pop	{r3, r4, r5, pc}
 800af64:	20001fac 	.word	0x20001fac

0800af68 <memmove>:
 800af68:	4288      	cmp	r0, r1
 800af6a:	b510      	push	{r4, lr}
 800af6c:	eb01 0402 	add.w	r4, r1, r2
 800af70:	d902      	bls.n	800af78 <memmove+0x10>
 800af72:	4284      	cmp	r4, r0
 800af74:	4623      	mov	r3, r4
 800af76:	d807      	bhi.n	800af88 <memmove+0x20>
 800af78:	1e43      	subs	r3, r0, #1
 800af7a:	42a1      	cmp	r1, r4
 800af7c:	d008      	beq.n	800af90 <memmove+0x28>
 800af7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af82:	f803 2f01 	strb.w	r2, [r3, #1]!
 800af86:	e7f8      	b.n	800af7a <memmove+0x12>
 800af88:	4402      	add	r2, r0
 800af8a:	4601      	mov	r1, r0
 800af8c:	428a      	cmp	r2, r1
 800af8e:	d100      	bne.n	800af92 <memmove+0x2a>
 800af90:	bd10      	pop	{r4, pc}
 800af92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af9a:	e7f7      	b.n	800af8c <memmove+0x24>

0800af9c <__malloc_lock>:
 800af9c:	4801      	ldr	r0, [pc, #4]	; (800afa4 <__malloc_lock+0x8>)
 800af9e:	f7fe bfb0 	b.w	8009f02 <__retarget_lock_acquire_recursive>
 800afa2:	bf00      	nop
 800afa4:	20001fa0 	.word	0x20001fa0

0800afa8 <__malloc_unlock>:
 800afa8:	4801      	ldr	r0, [pc, #4]	; (800afb0 <__malloc_unlock+0x8>)
 800afaa:	f7fe bfab 	b.w	8009f04 <__retarget_lock_release_recursive>
 800afae:	bf00      	nop
 800afb0:	20001fa0 	.word	0x20001fa0

0800afb4 <_realloc_r>:
 800afb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afb8:	4680      	mov	r8, r0
 800afba:	4614      	mov	r4, r2
 800afbc:	460e      	mov	r6, r1
 800afbe:	b921      	cbnz	r1, 800afca <_realloc_r+0x16>
 800afc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afc4:	4611      	mov	r1, r2
 800afc6:	f7ff bd75 	b.w	800aab4 <_malloc_r>
 800afca:	b92a      	cbnz	r2, 800afd8 <_realloc_r+0x24>
 800afcc:	f7ff fd06 	bl	800a9dc <_free_r>
 800afd0:	4625      	mov	r5, r4
 800afd2:	4628      	mov	r0, r5
 800afd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afd8:	f000 f97b 	bl	800b2d2 <_malloc_usable_size_r>
 800afdc:	4284      	cmp	r4, r0
 800afde:	4607      	mov	r7, r0
 800afe0:	d802      	bhi.n	800afe8 <_realloc_r+0x34>
 800afe2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800afe6:	d812      	bhi.n	800b00e <_realloc_r+0x5a>
 800afe8:	4621      	mov	r1, r4
 800afea:	4640      	mov	r0, r8
 800afec:	f7ff fd62 	bl	800aab4 <_malloc_r>
 800aff0:	4605      	mov	r5, r0
 800aff2:	2800      	cmp	r0, #0
 800aff4:	d0ed      	beq.n	800afd2 <_realloc_r+0x1e>
 800aff6:	42bc      	cmp	r4, r7
 800aff8:	4622      	mov	r2, r4
 800affa:	4631      	mov	r1, r6
 800affc:	bf28      	it	cs
 800affe:	463a      	movcs	r2, r7
 800b000:	f7fb fc5c 	bl	80068bc <memcpy>
 800b004:	4631      	mov	r1, r6
 800b006:	4640      	mov	r0, r8
 800b008:	f7ff fce8 	bl	800a9dc <_free_r>
 800b00c:	e7e1      	b.n	800afd2 <_realloc_r+0x1e>
 800b00e:	4635      	mov	r5, r6
 800b010:	e7df      	b.n	800afd2 <_realloc_r+0x1e>

0800b012 <__sfputc_r>:
 800b012:	6893      	ldr	r3, [r2, #8]
 800b014:	3b01      	subs	r3, #1
 800b016:	2b00      	cmp	r3, #0
 800b018:	b410      	push	{r4}
 800b01a:	6093      	str	r3, [r2, #8]
 800b01c:	da08      	bge.n	800b030 <__sfputc_r+0x1e>
 800b01e:	6994      	ldr	r4, [r2, #24]
 800b020:	42a3      	cmp	r3, r4
 800b022:	db01      	blt.n	800b028 <__sfputc_r+0x16>
 800b024:	290a      	cmp	r1, #10
 800b026:	d103      	bne.n	800b030 <__sfputc_r+0x1e>
 800b028:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b02c:	f7fd bae2 	b.w	80085f4 <__swbuf_r>
 800b030:	6813      	ldr	r3, [r2, #0]
 800b032:	1c58      	adds	r0, r3, #1
 800b034:	6010      	str	r0, [r2, #0]
 800b036:	7019      	strb	r1, [r3, #0]
 800b038:	4608      	mov	r0, r1
 800b03a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b03e:	4770      	bx	lr

0800b040 <__sfputs_r>:
 800b040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b042:	4606      	mov	r6, r0
 800b044:	460f      	mov	r7, r1
 800b046:	4614      	mov	r4, r2
 800b048:	18d5      	adds	r5, r2, r3
 800b04a:	42ac      	cmp	r4, r5
 800b04c:	d101      	bne.n	800b052 <__sfputs_r+0x12>
 800b04e:	2000      	movs	r0, #0
 800b050:	e007      	b.n	800b062 <__sfputs_r+0x22>
 800b052:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b056:	463a      	mov	r2, r7
 800b058:	4630      	mov	r0, r6
 800b05a:	f7ff ffda 	bl	800b012 <__sfputc_r>
 800b05e:	1c43      	adds	r3, r0, #1
 800b060:	d1f3      	bne.n	800b04a <__sfputs_r+0xa>
 800b062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b064 <_vfiprintf_r>:
 800b064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b068:	460d      	mov	r5, r1
 800b06a:	b09d      	sub	sp, #116	; 0x74
 800b06c:	4614      	mov	r4, r2
 800b06e:	4698      	mov	r8, r3
 800b070:	4606      	mov	r6, r0
 800b072:	b118      	cbz	r0, 800b07c <_vfiprintf_r+0x18>
 800b074:	6983      	ldr	r3, [r0, #24]
 800b076:	b90b      	cbnz	r3, 800b07c <_vfiprintf_r+0x18>
 800b078:	f7fe fb32 	bl	80096e0 <__sinit>
 800b07c:	4b89      	ldr	r3, [pc, #548]	; (800b2a4 <_vfiprintf_r+0x240>)
 800b07e:	429d      	cmp	r5, r3
 800b080:	d11b      	bne.n	800b0ba <_vfiprintf_r+0x56>
 800b082:	6875      	ldr	r5, [r6, #4]
 800b084:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b086:	07d9      	lsls	r1, r3, #31
 800b088:	d405      	bmi.n	800b096 <_vfiprintf_r+0x32>
 800b08a:	89ab      	ldrh	r3, [r5, #12]
 800b08c:	059a      	lsls	r2, r3, #22
 800b08e:	d402      	bmi.n	800b096 <_vfiprintf_r+0x32>
 800b090:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b092:	f7fe ff36 	bl	8009f02 <__retarget_lock_acquire_recursive>
 800b096:	89ab      	ldrh	r3, [r5, #12]
 800b098:	071b      	lsls	r3, r3, #28
 800b09a:	d501      	bpl.n	800b0a0 <_vfiprintf_r+0x3c>
 800b09c:	692b      	ldr	r3, [r5, #16]
 800b09e:	b9eb      	cbnz	r3, 800b0dc <_vfiprintf_r+0x78>
 800b0a0:	4629      	mov	r1, r5
 800b0a2:	4630      	mov	r0, r6
 800b0a4:	f7fd fb0a 	bl	80086bc <__swsetup_r>
 800b0a8:	b1c0      	cbz	r0, 800b0dc <_vfiprintf_r+0x78>
 800b0aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0ac:	07dc      	lsls	r4, r3, #31
 800b0ae:	d50e      	bpl.n	800b0ce <_vfiprintf_r+0x6a>
 800b0b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b0b4:	b01d      	add	sp, #116	; 0x74
 800b0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ba:	4b7b      	ldr	r3, [pc, #492]	; (800b2a8 <_vfiprintf_r+0x244>)
 800b0bc:	429d      	cmp	r5, r3
 800b0be:	d101      	bne.n	800b0c4 <_vfiprintf_r+0x60>
 800b0c0:	68b5      	ldr	r5, [r6, #8]
 800b0c2:	e7df      	b.n	800b084 <_vfiprintf_r+0x20>
 800b0c4:	4b79      	ldr	r3, [pc, #484]	; (800b2ac <_vfiprintf_r+0x248>)
 800b0c6:	429d      	cmp	r5, r3
 800b0c8:	bf08      	it	eq
 800b0ca:	68f5      	ldreq	r5, [r6, #12]
 800b0cc:	e7da      	b.n	800b084 <_vfiprintf_r+0x20>
 800b0ce:	89ab      	ldrh	r3, [r5, #12]
 800b0d0:	0598      	lsls	r0, r3, #22
 800b0d2:	d4ed      	bmi.n	800b0b0 <_vfiprintf_r+0x4c>
 800b0d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0d6:	f7fe ff15 	bl	8009f04 <__retarget_lock_release_recursive>
 800b0da:	e7e9      	b.n	800b0b0 <_vfiprintf_r+0x4c>
 800b0dc:	2300      	movs	r3, #0
 800b0de:	9309      	str	r3, [sp, #36]	; 0x24
 800b0e0:	2320      	movs	r3, #32
 800b0e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b0e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0ea:	2330      	movs	r3, #48	; 0x30
 800b0ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b2b0 <_vfiprintf_r+0x24c>
 800b0f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b0f4:	f04f 0901 	mov.w	r9, #1
 800b0f8:	4623      	mov	r3, r4
 800b0fa:	469a      	mov	sl, r3
 800b0fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b100:	b10a      	cbz	r2, 800b106 <_vfiprintf_r+0xa2>
 800b102:	2a25      	cmp	r2, #37	; 0x25
 800b104:	d1f9      	bne.n	800b0fa <_vfiprintf_r+0x96>
 800b106:	ebba 0b04 	subs.w	fp, sl, r4
 800b10a:	d00b      	beq.n	800b124 <_vfiprintf_r+0xc0>
 800b10c:	465b      	mov	r3, fp
 800b10e:	4622      	mov	r2, r4
 800b110:	4629      	mov	r1, r5
 800b112:	4630      	mov	r0, r6
 800b114:	f7ff ff94 	bl	800b040 <__sfputs_r>
 800b118:	3001      	adds	r0, #1
 800b11a:	f000 80aa 	beq.w	800b272 <_vfiprintf_r+0x20e>
 800b11e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b120:	445a      	add	r2, fp
 800b122:	9209      	str	r2, [sp, #36]	; 0x24
 800b124:	f89a 3000 	ldrb.w	r3, [sl]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	f000 80a2 	beq.w	800b272 <_vfiprintf_r+0x20e>
 800b12e:	2300      	movs	r3, #0
 800b130:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b134:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b138:	f10a 0a01 	add.w	sl, sl, #1
 800b13c:	9304      	str	r3, [sp, #16]
 800b13e:	9307      	str	r3, [sp, #28]
 800b140:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b144:	931a      	str	r3, [sp, #104]	; 0x68
 800b146:	4654      	mov	r4, sl
 800b148:	2205      	movs	r2, #5
 800b14a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b14e:	4858      	ldr	r0, [pc, #352]	; (800b2b0 <_vfiprintf_r+0x24c>)
 800b150:	f7f5 f856 	bl	8000200 <memchr>
 800b154:	9a04      	ldr	r2, [sp, #16]
 800b156:	b9d8      	cbnz	r0, 800b190 <_vfiprintf_r+0x12c>
 800b158:	06d1      	lsls	r1, r2, #27
 800b15a:	bf44      	itt	mi
 800b15c:	2320      	movmi	r3, #32
 800b15e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b162:	0713      	lsls	r3, r2, #28
 800b164:	bf44      	itt	mi
 800b166:	232b      	movmi	r3, #43	; 0x2b
 800b168:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b16c:	f89a 3000 	ldrb.w	r3, [sl]
 800b170:	2b2a      	cmp	r3, #42	; 0x2a
 800b172:	d015      	beq.n	800b1a0 <_vfiprintf_r+0x13c>
 800b174:	9a07      	ldr	r2, [sp, #28]
 800b176:	4654      	mov	r4, sl
 800b178:	2000      	movs	r0, #0
 800b17a:	f04f 0c0a 	mov.w	ip, #10
 800b17e:	4621      	mov	r1, r4
 800b180:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b184:	3b30      	subs	r3, #48	; 0x30
 800b186:	2b09      	cmp	r3, #9
 800b188:	d94e      	bls.n	800b228 <_vfiprintf_r+0x1c4>
 800b18a:	b1b0      	cbz	r0, 800b1ba <_vfiprintf_r+0x156>
 800b18c:	9207      	str	r2, [sp, #28]
 800b18e:	e014      	b.n	800b1ba <_vfiprintf_r+0x156>
 800b190:	eba0 0308 	sub.w	r3, r0, r8
 800b194:	fa09 f303 	lsl.w	r3, r9, r3
 800b198:	4313      	orrs	r3, r2
 800b19a:	9304      	str	r3, [sp, #16]
 800b19c:	46a2      	mov	sl, r4
 800b19e:	e7d2      	b.n	800b146 <_vfiprintf_r+0xe2>
 800b1a0:	9b03      	ldr	r3, [sp, #12]
 800b1a2:	1d19      	adds	r1, r3, #4
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	9103      	str	r1, [sp, #12]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	bfbb      	ittet	lt
 800b1ac:	425b      	neglt	r3, r3
 800b1ae:	f042 0202 	orrlt.w	r2, r2, #2
 800b1b2:	9307      	strge	r3, [sp, #28]
 800b1b4:	9307      	strlt	r3, [sp, #28]
 800b1b6:	bfb8      	it	lt
 800b1b8:	9204      	strlt	r2, [sp, #16]
 800b1ba:	7823      	ldrb	r3, [r4, #0]
 800b1bc:	2b2e      	cmp	r3, #46	; 0x2e
 800b1be:	d10c      	bne.n	800b1da <_vfiprintf_r+0x176>
 800b1c0:	7863      	ldrb	r3, [r4, #1]
 800b1c2:	2b2a      	cmp	r3, #42	; 0x2a
 800b1c4:	d135      	bne.n	800b232 <_vfiprintf_r+0x1ce>
 800b1c6:	9b03      	ldr	r3, [sp, #12]
 800b1c8:	1d1a      	adds	r2, r3, #4
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	9203      	str	r2, [sp, #12]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	bfb8      	it	lt
 800b1d2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b1d6:	3402      	adds	r4, #2
 800b1d8:	9305      	str	r3, [sp, #20]
 800b1da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b2c0 <_vfiprintf_r+0x25c>
 800b1de:	7821      	ldrb	r1, [r4, #0]
 800b1e0:	2203      	movs	r2, #3
 800b1e2:	4650      	mov	r0, sl
 800b1e4:	f7f5 f80c 	bl	8000200 <memchr>
 800b1e8:	b140      	cbz	r0, 800b1fc <_vfiprintf_r+0x198>
 800b1ea:	2340      	movs	r3, #64	; 0x40
 800b1ec:	eba0 000a 	sub.w	r0, r0, sl
 800b1f0:	fa03 f000 	lsl.w	r0, r3, r0
 800b1f4:	9b04      	ldr	r3, [sp, #16]
 800b1f6:	4303      	orrs	r3, r0
 800b1f8:	3401      	adds	r4, #1
 800b1fa:	9304      	str	r3, [sp, #16]
 800b1fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b200:	482c      	ldr	r0, [pc, #176]	; (800b2b4 <_vfiprintf_r+0x250>)
 800b202:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b206:	2206      	movs	r2, #6
 800b208:	f7f4 fffa 	bl	8000200 <memchr>
 800b20c:	2800      	cmp	r0, #0
 800b20e:	d03f      	beq.n	800b290 <_vfiprintf_r+0x22c>
 800b210:	4b29      	ldr	r3, [pc, #164]	; (800b2b8 <_vfiprintf_r+0x254>)
 800b212:	bb1b      	cbnz	r3, 800b25c <_vfiprintf_r+0x1f8>
 800b214:	9b03      	ldr	r3, [sp, #12]
 800b216:	3307      	adds	r3, #7
 800b218:	f023 0307 	bic.w	r3, r3, #7
 800b21c:	3308      	adds	r3, #8
 800b21e:	9303      	str	r3, [sp, #12]
 800b220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b222:	443b      	add	r3, r7
 800b224:	9309      	str	r3, [sp, #36]	; 0x24
 800b226:	e767      	b.n	800b0f8 <_vfiprintf_r+0x94>
 800b228:	fb0c 3202 	mla	r2, ip, r2, r3
 800b22c:	460c      	mov	r4, r1
 800b22e:	2001      	movs	r0, #1
 800b230:	e7a5      	b.n	800b17e <_vfiprintf_r+0x11a>
 800b232:	2300      	movs	r3, #0
 800b234:	3401      	adds	r4, #1
 800b236:	9305      	str	r3, [sp, #20]
 800b238:	4619      	mov	r1, r3
 800b23a:	f04f 0c0a 	mov.w	ip, #10
 800b23e:	4620      	mov	r0, r4
 800b240:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b244:	3a30      	subs	r2, #48	; 0x30
 800b246:	2a09      	cmp	r2, #9
 800b248:	d903      	bls.n	800b252 <_vfiprintf_r+0x1ee>
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d0c5      	beq.n	800b1da <_vfiprintf_r+0x176>
 800b24e:	9105      	str	r1, [sp, #20]
 800b250:	e7c3      	b.n	800b1da <_vfiprintf_r+0x176>
 800b252:	fb0c 2101 	mla	r1, ip, r1, r2
 800b256:	4604      	mov	r4, r0
 800b258:	2301      	movs	r3, #1
 800b25a:	e7f0      	b.n	800b23e <_vfiprintf_r+0x1da>
 800b25c:	ab03      	add	r3, sp, #12
 800b25e:	9300      	str	r3, [sp, #0]
 800b260:	462a      	mov	r2, r5
 800b262:	4b16      	ldr	r3, [pc, #88]	; (800b2bc <_vfiprintf_r+0x258>)
 800b264:	a904      	add	r1, sp, #16
 800b266:	4630      	mov	r0, r6
 800b268:	f7fb fbde 	bl	8006a28 <_printf_float>
 800b26c:	4607      	mov	r7, r0
 800b26e:	1c78      	adds	r0, r7, #1
 800b270:	d1d6      	bne.n	800b220 <_vfiprintf_r+0x1bc>
 800b272:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b274:	07d9      	lsls	r1, r3, #31
 800b276:	d405      	bmi.n	800b284 <_vfiprintf_r+0x220>
 800b278:	89ab      	ldrh	r3, [r5, #12]
 800b27a:	059a      	lsls	r2, r3, #22
 800b27c:	d402      	bmi.n	800b284 <_vfiprintf_r+0x220>
 800b27e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b280:	f7fe fe40 	bl	8009f04 <__retarget_lock_release_recursive>
 800b284:	89ab      	ldrh	r3, [r5, #12]
 800b286:	065b      	lsls	r3, r3, #25
 800b288:	f53f af12 	bmi.w	800b0b0 <_vfiprintf_r+0x4c>
 800b28c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b28e:	e711      	b.n	800b0b4 <_vfiprintf_r+0x50>
 800b290:	ab03      	add	r3, sp, #12
 800b292:	9300      	str	r3, [sp, #0]
 800b294:	462a      	mov	r2, r5
 800b296:	4b09      	ldr	r3, [pc, #36]	; (800b2bc <_vfiprintf_r+0x258>)
 800b298:	a904      	add	r1, sp, #16
 800b29a:	4630      	mov	r0, r6
 800b29c:	f7fb fe68 	bl	8006f70 <_printf_i>
 800b2a0:	e7e4      	b.n	800b26c <_vfiprintf_r+0x208>
 800b2a2:	bf00      	nop
 800b2a4:	0800bdd0 	.word	0x0800bdd0
 800b2a8:	0800bdf0 	.word	0x0800bdf0
 800b2ac:	0800bdb0 	.word	0x0800bdb0
 800b2b0:	0800bfe4 	.word	0x0800bfe4
 800b2b4:	0800bfee 	.word	0x0800bfee
 800b2b8:	08006a29 	.word	0x08006a29
 800b2bc:	0800b041 	.word	0x0800b041
 800b2c0:	0800bfea 	.word	0x0800bfea

0800b2c4 <abort>:
 800b2c4:	b508      	push	{r3, lr}
 800b2c6:	2006      	movs	r0, #6
 800b2c8:	f000 f834 	bl	800b334 <raise>
 800b2cc:	2001      	movs	r0, #1
 800b2ce:	f7f7 fd05 	bl	8002cdc <_exit>

0800b2d2 <_malloc_usable_size_r>:
 800b2d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2d6:	1f18      	subs	r0, r3, #4
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	bfbc      	itt	lt
 800b2dc:	580b      	ldrlt	r3, [r1, r0]
 800b2de:	18c0      	addlt	r0, r0, r3
 800b2e0:	4770      	bx	lr

0800b2e2 <_raise_r>:
 800b2e2:	291f      	cmp	r1, #31
 800b2e4:	b538      	push	{r3, r4, r5, lr}
 800b2e6:	4604      	mov	r4, r0
 800b2e8:	460d      	mov	r5, r1
 800b2ea:	d904      	bls.n	800b2f6 <_raise_r+0x14>
 800b2ec:	2316      	movs	r3, #22
 800b2ee:	6003      	str	r3, [r0, #0]
 800b2f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b2f4:	bd38      	pop	{r3, r4, r5, pc}
 800b2f6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b2f8:	b112      	cbz	r2, 800b300 <_raise_r+0x1e>
 800b2fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b2fe:	b94b      	cbnz	r3, 800b314 <_raise_r+0x32>
 800b300:	4620      	mov	r0, r4
 800b302:	f000 f831 	bl	800b368 <_getpid_r>
 800b306:	462a      	mov	r2, r5
 800b308:	4601      	mov	r1, r0
 800b30a:	4620      	mov	r0, r4
 800b30c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b310:	f000 b818 	b.w	800b344 <_kill_r>
 800b314:	2b01      	cmp	r3, #1
 800b316:	d00a      	beq.n	800b32e <_raise_r+0x4c>
 800b318:	1c59      	adds	r1, r3, #1
 800b31a:	d103      	bne.n	800b324 <_raise_r+0x42>
 800b31c:	2316      	movs	r3, #22
 800b31e:	6003      	str	r3, [r0, #0]
 800b320:	2001      	movs	r0, #1
 800b322:	e7e7      	b.n	800b2f4 <_raise_r+0x12>
 800b324:	2400      	movs	r4, #0
 800b326:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b32a:	4628      	mov	r0, r5
 800b32c:	4798      	blx	r3
 800b32e:	2000      	movs	r0, #0
 800b330:	e7e0      	b.n	800b2f4 <_raise_r+0x12>
	...

0800b334 <raise>:
 800b334:	4b02      	ldr	r3, [pc, #8]	; (800b340 <raise+0xc>)
 800b336:	4601      	mov	r1, r0
 800b338:	6818      	ldr	r0, [r3, #0]
 800b33a:	f7ff bfd2 	b.w	800b2e2 <_raise_r>
 800b33e:	bf00      	nop
 800b340:	2000003c 	.word	0x2000003c

0800b344 <_kill_r>:
 800b344:	b538      	push	{r3, r4, r5, lr}
 800b346:	4d07      	ldr	r5, [pc, #28]	; (800b364 <_kill_r+0x20>)
 800b348:	2300      	movs	r3, #0
 800b34a:	4604      	mov	r4, r0
 800b34c:	4608      	mov	r0, r1
 800b34e:	4611      	mov	r1, r2
 800b350:	602b      	str	r3, [r5, #0]
 800b352:	f7f7 fcb3 	bl	8002cbc <_kill>
 800b356:	1c43      	adds	r3, r0, #1
 800b358:	d102      	bne.n	800b360 <_kill_r+0x1c>
 800b35a:	682b      	ldr	r3, [r5, #0]
 800b35c:	b103      	cbz	r3, 800b360 <_kill_r+0x1c>
 800b35e:	6023      	str	r3, [r4, #0]
 800b360:	bd38      	pop	{r3, r4, r5, pc}
 800b362:	bf00      	nop
 800b364:	20001fac 	.word	0x20001fac

0800b368 <_getpid_r>:
 800b368:	f7f7 bca0 	b.w	8002cac <_getpid>

0800b36c <_init>:
 800b36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b36e:	bf00      	nop
 800b370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b372:	bc08      	pop	{r3}
 800b374:	469e      	mov	lr, r3
 800b376:	4770      	bx	lr

0800b378 <_fini>:
 800b378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b37a:	bf00      	nop
 800b37c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b37e:	bc08      	pop	{r3}
 800b380:	469e      	mov	lr, r3
 800b382:	4770      	bx	lr
