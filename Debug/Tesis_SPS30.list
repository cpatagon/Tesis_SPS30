
Tesis_SPS30.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009374  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c4  08009528  08009528  00019528  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bec  08009bec  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009bec  08009bec  00019bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bf4  08009bf4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bf4  08009bf4  00019bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bf8  08009bf8  00019bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009bfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          00000114  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002f8  200002f8  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cbb2  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000241a  00000000  00000000  0002cdc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a00  00000000  00000000  0002f1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000900  00000000  00000000  0002fbe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024393  00000000  00000000  000304e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f15f  00000000  00000000  00054873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9bdd  00000000  00000000  000639d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013d5af  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003cd0  00000000  00000000  0013d600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800950c 	.word	0x0800950c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	0800950c 	.word	0x0800950c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <SHDLC_LoadMyVector>:
 * @param DataFrameSize El tamaño total del arreglo DataFrame para evitar
 *        desbordamientos de búfer.
 * @return void
 */

void SHDLC_LoadMyVector(Shdlc_FrameMiso * frame, const uint8_t * DataFrame, size_t DataFrameSize) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
    if (frame == NULL || DataFrame == NULL || DataFrameSize < 5) {
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d005      	beq.n	8001036 <SHDLC_LoadMyVector+0x1e>
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d002      	beq.n	8001036 <SHDLC_LoadMyVector+0x1e>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b04      	cmp	r3, #4
 8001034:	d803      	bhi.n	800103e <SHDLC_LoadMyVector+0x26>
        // Validación básica para asegurarnos de que los parámetros son válidos y DataFrame tiene el
        // tamaño mínimo esperado.
        printf("Datos no válidos para cargar en myVector.\n");
 8001036:	4811      	ldr	r0, [pc, #68]	; (800107c <SHDLC_LoadMyVector+0x64>)
 8001038:	f004 fc46 	bl	80058c8 <puts>
        return;
 800103c:	e01b      	b.n	8001076 <SHDLC_LoadMyVector+0x5e>
    }

    uint8_t dataLength = DataFrame[4]; // Longitud de los datos útiles.
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	791b      	ldrb	r3, [r3, #4]
 8001042:	75fb      	strb	r3, [r7, #23]

    if (dataLength > FRAME_DATA_VECTOR_SIZE_MISO || (4 + dataLength) > DataFrameSize) {
 8001044:	7dfb      	ldrb	r3, [r7, #23]
 8001046:	2b3c      	cmp	r3, #60	; 0x3c
 8001048:	d805      	bhi.n	8001056 <SHDLC_LoadMyVector+0x3e>
 800104a:	7dfb      	ldrb	r3, [r7, #23]
 800104c:	3304      	adds	r3, #4
 800104e:	461a      	mov	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4293      	cmp	r3, r2
 8001054:	d203      	bcs.n	800105e <SHDLC_LoadMyVector+0x46>
        // Asegúrate de que la longitud de los datos no excede el tamaño de myVector ni los límites
        // de DataFrame.
        printf("Longitud de los datos excede el tamaño permitido de myVector o los límites de "
 8001056:	480a      	ldr	r0, [pc, #40]	; (8001080 <SHDLC_LoadMyVector+0x68>)
 8001058:	f004 fc36 	bl	80058c8 <puts>
               "DataFrame.\n");
        return;
 800105c:	e00b      	b.n	8001076 <SHDLC_LoadMyVector+0x5e>
    }

    // Copiar los datos útiles desde DataFrame a myVector en la estructura Shdlc_FrameMiso.
    memcpy(frame->myVector, &DataFrame[5], dataLength + 1);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	1cd8      	adds	r0, r3, #3
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	1d59      	adds	r1, r3, #5
 8001066:	7dfb      	ldrb	r3, [r7, #23]
 8001068:	3301      	adds	r3, #1
 800106a:	461a      	mov	r2, r3
 800106c:	f003 fd2e 	bl	8004acc <memcpy>

    // Actualizar el campo 'lon' con la longitud de los datos copiados.
    frame->lon = dataLength;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	7dfa      	ldrb	r2, [r7, #23]
 8001074:	709a      	strb	r2, [r3, #2]

    // Asume que podrías querer también inicializar otros campos aquí.
}
 8001076:	3718      	adds	r7, #24
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	08009528 	.word	0x08009528
 8001080:	08009554 	.word	0x08009554

08001084 <SHDLC_CalculateDataSize>:
 * @param inputSize Tamaño del arreglo de entrada.
 * @return int La longitud de los datos contenidos entre los dos delimitadores,
 *         o -1 si los delimitadores no se encuentran en la secuencia correcta.
 */

int SHDLC_CalculateDataSize(const uint8_t * input, size_t inputSize) {
 8001084:	b480      	push	{r7}
 8001086:	b089      	sub	sp, #36	; 0x24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
    int start = -1;
 800108e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001092:	61fb      	str	r3, [r7, #28]
    int end = -1;
 8001094:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001098:	61bb      	str	r3, [r7, #24]

    // Buscar el primer delimitador 0xE7.
    for (size_t i = 0; i < inputSize; ++i) {
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	e00c      	b.n	80010ba <SHDLC_CalculateDataSize+0x36>
        if (input[i] == 0x7E) {
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	4413      	add	r3, r2
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b7e      	cmp	r3, #126	; 0x7e
 80010aa:	d103      	bne.n	80010b4 <SHDLC_CalculateDataSize+0x30>
            start = i + 1; // Comenzar después del primer 0xE7
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	3301      	adds	r3, #1
 80010b0:	61fb      	str	r3, [r7, #28]
            break;
 80010b2:	e006      	b.n	80010c2 <SHDLC_CalculateDataSize+0x3e>
    for (size_t i = 0; i < inputSize; ++i) {
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	3301      	adds	r3, #1
 80010b8:	617b      	str	r3, [r7, #20]
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d3ee      	bcc.n	80010a0 <SHDLC_CalculateDataSize+0x1c>
        }
    }

    // Buscar el segundo delimitador 0xE7.
    for (size_t i = start; i < inputSize; ++i) {
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	e00b      	b.n	80010e0 <SHDLC_CalculateDataSize+0x5c>
        if (input[i] == 0x7E) {
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4413      	add	r3, r2
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b7e      	cmp	r3, #126	; 0x7e
 80010d2:	d102      	bne.n	80010da <SHDLC_CalculateDataSize+0x56>
            end = i;
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	61bb      	str	r3, [r7, #24]
            break;
 80010d8:	e006      	b.n	80010e8 <SHDLC_CalculateDataSize+0x64>
    for (size_t i = start; i < inputSize; ++i) {
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	3301      	adds	r3, #1
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d3ef      	bcc.n	80010c8 <SHDLC_CalculateDataSize+0x44>
        }
    }

    // Verificar si se encontraron ambos delimitadores.
    if (start == -1 || end == -1 || start >= end) {
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010ee:	d007      	beq.n	8001100 <SHDLC_CalculateDataSize+0x7c>
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010f6:	d003      	beq.n	8001100 <SHDLC_CalculateDataSize+0x7c>
 80010f8:	69fa      	ldr	r2, [r7, #28]
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	db02      	blt.n	8001106 <SHDLC_CalculateDataSize+0x82>
        return -1; // No se encontró la secuencia válida.
 8001100:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001104:	e004      	b.n	8001110 <SHDLC_CalculateDataSize+0x8c>
    }

    // Calcular la longitud de los datos a copiar y asegurarse de que no
    // exceda el buffer de salida.
    size_t dataLength = end - start;
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	60fb      	str	r3, [r7, #12]
    return dataLength;
 800110e:	68fb      	ldr	r3, [r7, #12]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3724      	adds	r7, #36	; 0x24
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <SHDLC_revertByteStuffing>:
 * @param stuffedSize Tamaño del arreglo de bytes con byte-stuffing.
 * @param originalData Puntero al arreglo de bytes donde se almacenarán los datos revertidos.
 * @return El tamaño del arreglo de bytes revertido.
 */
size_t SHDLC_revertByteStuffing(const uint8_t * stuffedData, size_t stuffedSize,
                                uint8_t * originalData) {
 800111c:	b480      	push	{r7}
 800111e:	b087      	sub	sp, #28
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
    size_t originalIndex = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < stuffedSize; ++i) {
 800112c:	2300      	movs	r3, #0
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	e04e      	b.n	80011d0 <SHDLC_revertByteStuffing+0xb4>
        if (stuffedData[i] == 0x7D) { // Detecta el indicador de byte-stuffing
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4413      	add	r3, r2
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b7d      	cmp	r3, #125	; 0x7d
 800113c:	d137      	bne.n	80011ae <SHDLC_revertByteStuffing+0x92>
            i++;                      // Avanza al siguiente byte para determinar el valor real
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	3301      	adds	r3, #1
 8001142:	613b      	str	r3, [r7, #16]
            if (i < stuffedSize) {
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	429a      	cmp	r2, r3
 800114a:	d23b      	bcs.n	80011c4 <SHDLC_revertByteStuffing+0xa8>
                switch (stuffedData[i]) {
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	4413      	add	r3, r2
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b5e      	cmp	r3, #94	; 0x5e
 8001156:	d00a      	beq.n	800116e <SHDLC_revertByteStuffing+0x52>
 8001158:	2b5e      	cmp	r3, #94	; 0x5e
 800115a:	dc35      	bgt.n	80011c8 <SHDLC_revertByteStuffing+0xac>
 800115c:	2b5d      	cmp	r3, #93	; 0x5d
 800115e:	d00e      	beq.n	800117e <SHDLC_revertByteStuffing+0x62>
 8001160:	2b5d      	cmp	r3, #93	; 0x5d
 8001162:	dc31      	bgt.n	80011c8 <SHDLC_revertByteStuffing+0xac>
 8001164:	2b31      	cmp	r3, #49	; 0x31
 8001166:	d012      	beq.n	800118e <SHDLC_revertByteStuffing+0x72>
 8001168:	2b33      	cmp	r3, #51	; 0x33
 800116a:	d018      	beq.n	800119e <SHDLC_revertByteStuffing+0x82>
                    break;
                default:
                    // Trata el caso en que el byte siguiente a 0x7D no es uno esperado
                    // Esto podría indicar un error o una situación inesperada.
                    // Se podría manejar de manera especial si es necesario.
                    break;
 800116c:	e02c      	b.n	80011c8 <SHDLC_revertByteStuffing+0xac>
                    originalData[originalIndex++] = 0x7E;
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	1c5a      	adds	r2, r3, #1
 8001172:	617a      	str	r2, [r7, #20]
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	227e      	movs	r2, #126	; 0x7e
 800117a:	701a      	strb	r2, [r3, #0]
                    break;
 800117c:	e025      	b.n	80011ca <SHDLC_revertByteStuffing+0xae>
                    originalData[originalIndex++] = 0x7D;
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	1c5a      	adds	r2, r3, #1
 8001182:	617a      	str	r2, [r7, #20]
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	4413      	add	r3, r2
 8001188:	227d      	movs	r2, #125	; 0x7d
 800118a:	701a      	strb	r2, [r3, #0]
                    break;
 800118c:	e01d      	b.n	80011ca <SHDLC_revertByteStuffing+0xae>
                    originalData[originalIndex++] = 0x11;
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	1c5a      	adds	r2, r3, #1
 8001192:	617a      	str	r2, [r7, #20]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	4413      	add	r3, r2
 8001198:	2211      	movs	r2, #17
 800119a:	701a      	strb	r2, [r3, #0]
                    break;
 800119c:	e015      	b.n	80011ca <SHDLC_revertByteStuffing+0xae>
                    originalData[originalIndex++] = 0x13;
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	1c5a      	adds	r2, r3, #1
 80011a2:	617a      	str	r2, [r7, #20]
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	4413      	add	r3, r2
 80011a8:	2213      	movs	r2, #19
 80011aa:	701a      	strb	r2, [r3, #0]
                    break;
 80011ac:	e00d      	b.n	80011ca <SHDLC_revertByteStuffing+0xae>
                }
            }
        } else {
            // Si no es un byte-stuffing, simplemente copia el byte
            originalData[originalIndex++] = stuffedData[i];
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	441a      	add	r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	1c59      	adds	r1, r3, #1
 80011b8:	6179      	str	r1, [r7, #20]
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	440b      	add	r3, r1
 80011be:	7812      	ldrb	r2, [r2, #0]
 80011c0:	701a      	strb	r2, [r3, #0]
 80011c2:	e002      	b.n	80011ca <SHDLC_revertByteStuffing+0xae>
            }
 80011c4:	bf00      	nop
 80011c6:	e000      	b.n	80011ca <SHDLC_revertByteStuffing+0xae>
                    break;
 80011c8:	bf00      	nop
    for (size_t i = 0; i < stuffedSize; ++i) {
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	3301      	adds	r3, #1
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d3ac      	bcc.n	8001132 <SHDLC_revertByteStuffing+0x16>
        }
    }

    return originalIndex; // Retorna el tamaño del arreglo revertido
 80011d8:	697b      	ldr	r3, [r7, #20]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	371c      	adds	r7, #28
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <SHDLC_bytesToFloat>:

// Función para convertir 4 bytes en big-endian a un valor float IEEE754
float SHDLC_bytesToFloat(uint8_t * bytes) {
 80011e6:	b480      	push	{r7}
 80011e8:	b087      	sub	sp, #28
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
    float value;
    uint8_t reversedBytes[sizeof(value)];

    // Revertir el orden de los bytes para big-endian
    for (int i = 0; i < sizeof(value); i++) {
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]
 80011f2:	e00e      	b.n	8001212 <SHDLC_bytesToFloat+0x2c>
        reversedBytes[i] = bytes[sizeof(value) - i - 1];
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f1c3 0303 	rsb	r3, r3, #3
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	7819      	ldrb	r1, [r3, #0]
 8001200:	f107 020c 	add.w	r2, r7, #12
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	4413      	add	r3, r2
 8001208:	460a      	mov	r2, r1
 800120a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < sizeof(value); i++) {
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	3301      	adds	r3, #1
 8001210:	617b      	str	r3, [r7, #20]
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	2b03      	cmp	r3, #3
 8001216:	d9ed      	bls.n	80011f4 <SHDLC_bytesToFloat+0xe>
 8001218:	68fb      	ldr	r3, [r7, #12]
    }

    // Copiar los bytes revertidos en la variable float
    memcpy(&value, reversedBytes, sizeof(value));
 800121a:	613b      	str	r3, [r7, #16]

    return value;
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	ee07 3a90 	vmov	s15, r3
}
 8001222:	eeb0 0a67 	vmov.f32	s0, s15
 8001226:	371c      	adds	r7, #28
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <SHDLC_llenarConcentraciones>:

// Función para llenar la estructura con los datos de concentración
void SHDLC_llenarConcentraciones(ConcentracionesPM * concentraciones, uint8_t * data) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
    concentraciones->pm1_0 = SHDLC_bytesToFloat(&data[0]);
 800123a:	6838      	ldr	r0, [r7, #0]
 800123c:	f7ff ffd3 	bl	80011e6 <SHDLC_bytesToFloat>
 8001240:	eef0 7a40 	vmov.f32	s15, s0
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	edc3 7a00 	vstr	s15, [r3]
    concentraciones->pm2_5 = SHDLC_bytesToFloat(&data[4]);
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	3304      	adds	r3, #4
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ffc9 	bl	80011e6 <SHDLC_bytesToFloat>
 8001254:	eef0 7a40 	vmov.f32	s15, s0
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	edc3 7a01 	vstr	s15, [r3, #4]
    concentraciones->pm4_0 = SHDLC_bytesToFloat(&data[8]);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	3308      	adds	r3, #8
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ffbf 	bl	80011e6 <SHDLC_bytesToFloat>
 8001268:	eef0 7a40 	vmov.f32	s15, s0
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	edc3 7a02 	vstr	s15, [r3, #8]
    concentraciones->pm10 = SHDLC_bytesToFloat(&data[12]);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	330c      	adds	r3, #12
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ffb5 	bl	80011e6 <SHDLC_bytesToFloat>
 800127c:	eef0 7a40 	vmov.f32	s15, s0
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <sps30_send_command>:
#define DELAY_STOP_MEASUREMENT      0

#define CLEAR_VAR                   0

// Implementación de las funciones del objeto SPS30
void sps30_send_command(SPS30 *self, const uint8_t *command, uint16_t commandSize) {
 800128e:	b580      	push	{r7, lr}
 8001290:	b084      	sub	sp, #16
 8001292:	af00      	add	r7, sp, #0
 8001294:	60f8      	str	r0, [r7, #12]
 8001296:	60b9      	str	r1, [r7, #8]
 8001298:	4613      	mov	r3, r2
 800129a:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit(self->huart, command, commandSize, 100);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6818      	ldr	r0, [r3, #0]
 80012a0:	88fa      	ldrh	r2, [r7, #6]
 80012a2:	2364      	movs	r3, #100	; 0x64
 80012a4:	68b9      	ldr	r1, [r7, #8]
 80012a6:	f002 fb7f 	bl	80039a8 <HAL_UART_Transmit>
}
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <sps30_receive_async>:

void sps30_receive_async(SPS30 *self, uint8_t *dataBuffer, uint16_t bufferSize) {
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b084      	sub	sp, #16
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	60f8      	str	r0, [r7, #12]
 80012ba:	60b9      	str	r1, [r7, #8]
 80012bc:	4613      	mov	r3, r2
 80012be:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Receive(self->huart, dataBuffer, bufferSize, 100);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	6818      	ldr	r0, [r3, #0]
 80012c4:	88fa      	ldrh	r2, [r7, #6]
 80012c6:	2364      	movs	r3, #100	; 0x64
 80012c8:	68b9      	ldr	r1, [r7, #8]
 80012ca:	f002 fbff 	bl	8003acc <HAL_UART_Receive>
}
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <sps30_send_receive>:

void sps30_send_receive(SPS30 *self, const uint8_t *command, uint16_t commandSize, uint8_t *dataBuffer, uint16_t bufferSize) {
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b084      	sub	sp, #16
 80012da:	af00      	add	r7, sp, #0
 80012dc:	60f8      	str	r0, [r7, #12]
 80012de:	60b9      	str	r1, [r7, #8]
 80012e0:	603b      	str	r3, [r7, #0]
 80012e2:	4613      	mov	r3, r2
 80012e4:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit(self->huart, command, commandSize, 100);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	6818      	ldr	r0, [r3, #0]
 80012ea:	88fa      	ldrh	r2, [r7, #6]
 80012ec:	2364      	movs	r3, #100	; 0x64
 80012ee:	68b9      	ldr	r1, [r7, #8]
 80012f0:	f002 fb5a 	bl	80039a8 <HAL_UART_Transmit>
    HAL_UART_Receive(self->huart, dataBuffer, bufferSize, 100);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	6818      	ldr	r0, [r3, #0]
 80012f8:	8b3a      	ldrh	r2, [r7, #24]
 80012fa:	2364      	movs	r3, #100	; 0x64
 80012fc:	6839      	ldr	r1, [r7, #0]
 80012fe:	f002 fbe5 	bl	8003acc <HAL_UART_Receive>
}
 8001302:	bf00      	nop
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <sps30_start_measurement>:

void sps30_start_measurement(SPS30 *self) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b094      	sub	sp, #80	; 0x50
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
    uint8_t startCmd[] = SPS30_FRAME_START_MEASUREMENT; // Comando para iniciar la medición
 8001314:	4a15      	ldr	r2, [pc, #84]	; (800136c <sps30_start_measurement+0x60>)
 8001316:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800131a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800131e:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t dataBuf[BUFFER_SIZE] = {0};      // Buffer para almacenar la respuesta del sensor
 8001322:	2300      	movs	r3, #0
 8001324:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001326:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800132a:	2100      	movs	r1, #0
 800132c:	460a      	mov	r2, r1
 800132e:	801a      	strh	r2, [r3, #0]
 8001330:	460a      	mov	r2, r1
 8001332:	709a      	strb	r2, [r3, #2]
    char respuestaStr[BUFFER_SIZE_RESPONSE]; // Buffer para el mensaje de longitud de respuesta

    // Envío del comando de inicio de medición
    //uart_print(MSG_INICIO_MEDICION);               // Notifica por UART el inicio de la operación
    //uart_vector_print(sizeof(startCmd), startCmd); // Muestra el comando enviado
    self->send_command(self, startCmd, sizeof(startCmd)); // Envía el comando al sensor SPS30
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800133c:	2208      	movs	r2, #8
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	4798      	blx	r3
    HAL_Delay(DELAY_START_MEASUREMENT);            // Espera para el procesamiento del comando
 8001342:	2002      	movs	r0, #2
 8001344:	f000 ff22 	bl	800218c <HAL_Delay>

    // Recepción y procesamiento de la respuesta
    self->receive_async(self, dataBuf, sizeof(dataBuf));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001350:	2207      	movs	r2, #7
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	4798      	blx	r3
    //uart_print(MSG_RESPUESTA_INICIO_MEDICION); // Notifica la recepción de la respuesta
    //uart_vector_print(sizeof(dataBuf), dataBuf);   // Muestra la respuesta recibida

    // Cálculo y visualización de la longitud de la respuesta
    int longRespuesta = SHDLC_CalculateDataSize(dataBuf, sizeof(dataBuf)); // Calcula la longitud de los datos útiles
 8001356:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800135a:	2107      	movs	r1, #7
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fe91 	bl	8001084 <SHDLC_CalculateDataSize>
 8001362:	64f8      	str	r0, [r7, #76]	; 0x4c
    //snprintf(respuestaStr, sizeof(respuestaStr), MENSAJE_SIZE_RESPUESTA, longRespuesta);  // Formatea el mensaje de longitud
    //uart_print(respuestaStr); // Imprime la longitud de la respuesta
}
 8001364:	bf00      	nop
 8001366:	3750      	adds	r7, #80	; 0x50
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	080095b0 	.word	0x080095b0

08001370 <sps30_stop_measurement>:

void sps30_stop_measurement(SPS30 *self) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b094      	sub	sp, #80	; 0x50
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
    uint8_t stopCmd[] = SPS30_FRAME_STOP_MEASUREMENT;
 8001378:	4a13      	ldr	r2, [pc, #76]	; (80013c8 <sps30_stop_measurement+0x58>)
 800137a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800137e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001382:	6018      	str	r0, [r3, #0]
 8001384:	3304      	adds	r3, #4
 8001386:	8019      	strh	r1, [r3, #0]
    uint8_t dataBuf[BUFFER_SIZE_STOP_MEASUREMENT] = {0};
 8001388:	2300      	movs	r3, #0
 800138a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800138c:	2300      	movs	r3, #0
 800138e:	643b      	str	r3, [r7, #64]	; 0x40
    char respuestaStr[BUFFER_SIZE_RESPONSE];

    //uart_print(MSG_SOLICITAR);
    //uart_vector_print(sizeof(stopCmd), stopCmd);
    self->send_command(self, stopCmd, sizeof(stopCmd));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001398:	2206      	movs	r2, #6
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	4798      	blx	r3
    HAL_Delay(DELAY_STOP_MEASUREMENT);
 800139e:	2000      	movs	r0, #0
 80013a0:	f000 fef4 	bl	800218c <HAL_Delay>

    self->receive_async(self, dataBuf, sizeof(dataBuf));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80013ac:	2208      	movs	r2, #8
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	4798      	blx	r3
    //uart_print(MSG_RESPUESTA);
    //uart_vector_print(sizeof(dataBuf), dataBuf);

    int longRespuesta = SHDLC_CalculateDataSize(dataBuf, sizeof(dataBuf));
 80013b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013b6:	2108      	movs	r1, #8
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff fe63 	bl	8001084 <SHDLC_CalculateDataSize>
 80013be:	64f8      	str	r0, [r7, #76]	; 0x4c
    //snprintf(respuestaStr, sizeof(respuestaStr), MENSAJE_SIZE_RESPUESTA, longRespuesta);
    //uart_print(respuestaStr);
}
 80013c0:	bf00      	nop
 80013c2:	3750      	adds	r7, #80	; 0x50
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	080095b8 	.word	0x080095b8

080013cc <sps30_sleep>:

void sps30_sleep(SPS30 *self) {
 80013cc:	b590      	push	{r4, r7, lr}
 80013ce:	b097      	sub	sp, #92	; 0x5c
 80013d0:	af02      	add	r7, sp, #8
 80013d2:	6078      	str	r0, [r7, #4]
    uint8_t sleepCmd[] = SPS30_FRAME_SLEEP;
 80013d4:	4a10      	ldr	r2, [pc, #64]	; (8001418 <sps30_sleep+0x4c>)
 80013d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013de:	6018      	str	r0, [r3, #0]
 80013e0:	3304      	adds	r3, #4
 80013e2:	8019      	strh	r1, [r3, #0]
    uint8_t dataBuf[BUFFER_SIZE_SLEEP] = {0};
 80013e4:	2300      	movs	r3, #0
 80013e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013e8:	2300      	movs	r3, #0
 80013ea:	643b      	str	r3, [r7, #64]	; 0x40
    char respuestaStr[BUFFER_SIZE_RESPONSE];

    //uart_print(MSG_SOLICITAR);
    //uart_vector_print(sizeof(sleepCmd), sleepCmd);
    self->send_receive(self, sleepCmd, sizeof(sleepCmd), dataBuf, sizeof(dataBuf));
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	68dc      	ldr	r4, [r3, #12]
 80013f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013f4:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80013f8:	2208      	movs	r2, #8
 80013fa:	9200      	str	r2, [sp, #0]
 80013fc:	2206      	movs	r2, #6
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	47a0      	blx	r4
    //uart_print(MSG_RESPUESTA);
    //uart_vector_print(sizeof(dataBuf), dataBuf);

    int longRespuesta = SHDLC_CalculateDataSize(dataBuf, sizeof(dataBuf));
 8001402:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001406:	2108      	movs	r1, #8
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff fe3b 	bl	8001084 <SHDLC_CalculateDataSize>
 800140e:	64f8      	str	r0, [r7, #76]	; 0x4c
    //snprintf(respuestaStr, sizeof(respuestaStr), MENSAJE_SIZE_RESPUESTA, longRespuesta);
    //uart_print(respuestaStr);
}
 8001410:	bf00      	nop
 8001412:	3754      	adds	r7, #84	; 0x54
 8001414:	46bd      	mov	sp, r7
 8001416:	bd90      	pop	{r4, r7, pc}
 8001418:	080095c0 	.word	0x080095c0

0800141c <sps30_read_data>:

void sps30_read_data(SPS30 *self) {
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b0e1      	sub	sp, #388	; 0x184
 8001420:	af02      	add	r7, sp, #8
 8001422:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001426:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800142a:	6018      	str	r0, [r3, #0]
    uint8_t readCmd[] = SPS30_FRAME_READ_MEASUREMENT;
 800142c:	4a2f      	ldr	r2, [pc, #188]	; (80014ec <sps30_read_data+0xd0>)
 800142e:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001432:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001436:	6018      	str	r0, [r3, #0]
 8001438:	3304      	adds	r3, #4
 800143a:	8019      	strh	r1, [r3, #0]
    uint8_t dataBuf[BUFFER_SIZE_READ_DATA] = {0};
 800143c:	2300      	movs	r3, #0
 800143e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001442:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001446:	2238      	movs	r2, #56	; 0x38
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f003 fb4c 	bl	8004ae8 <memset>
    uint8_t originalData[BUFFER_SIZE_READ_DATA] = {0};
 8001450:	2300      	movs	r3, #0
 8001452:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001456:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800145a:	2238      	movs	r2, #56	; 0x38
 800145c:	2100      	movs	r1, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f003 fb42 	bl	8004ae8 <memset>
    ConcentracionesPM concentraciones;
    char respuestaStr[BUFFER_SIZE_RESPONSE];

    //uart_print(MSG_SOLICITAR);
    //uart_vector_print(sizeof(readCmd), readCmd);
    self->send_receive(self, readCmd, sizeof(readCmd), dataBuf, sizeof(dataBuf));
 8001464:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001468:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	68dc      	ldr	r4, [r3, #12]
 8001470:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001474:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8001478:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800147c:	f5a2 70ba 	sub.w	r0, r2, #372	; 0x174
 8001480:	223c      	movs	r2, #60	; 0x3c
 8001482:	9200      	str	r2, [sp, #0]
 8001484:	2206      	movs	r2, #6
 8001486:	6800      	ldr	r0, [r0, #0]
 8001488:	47a0      	blx	r4
    //uart_print(MSG_RESPUESTA);
    //uart_vector_print(sizeof(dataBuf), dataBuf);

    SHDLC_revertByteStuffing(dataBuf, sizeof(dataBuf), originalData);
 800148a:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 800148e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001492:	213c      	movs	r1, #60	; 0x3c
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fe41 	bl	800111c <SHDLC_revertByteStuffing>
    //uart_print(MSG_RESPUESTA_CON_BYTESTUFFING);
    //uart_vector_print(sizeof(originalData), originalData);

    int longRespuesta = SHDLC_CalculateDataSize(originalData, sizeof(originalData));
 800149a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800149e:	213c      	movs	r1, #60	; 0x3c
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fdef 	bl	8001084 <SHDLC_CalculateDataSize>
 80014a6:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
    //snprintf(respuestaStr, sizeof(respuestaStr), MSG_LONGITUD_RESPUESTA, longRespuesta);
    //uart_print(respuestaStr);

    Shdlc_FrameMiso Newframe = {};
 80014aa:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80014ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80014b2:	4618      	mov	r0, r3
 80014b4:	2341      	movs	r3, #65	; 0x41
 80014b6:	461a      	mov	r2, r3
 80014b8:	2100      	movs	r1, #0
 80014ba:	f003 fb15 	bl	8004ae8 <memset>
    SHDLC_LoadMyVector(&Newframe, originalData, longRespuesta);
 80014be:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80014c2:	f107 01f4 	add.w	r1, r7, #244	; 0xf4
 80014c6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff fda4 	bl	8001018 <SHDLC_LoadMyVector>
    //uart_print(MSG_DATOS_RESPUESTA);
    //uart_vector_print(Newframe.lon, Newframe.myVector);

    SHDLC_llenarConcentraciones(&concentraciones, Newframe.myVector);
 80014d0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80014d4:	1cda      	adds	r2, r3, #3
 80014d6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80014da:	4611      	mov	r1, r2
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fea7 	bl	8001230 <SHDLC_llenarConcentraciones>
    //uart_print(buffer);
    //sprintf(buffer, FORMATO_CONCENTRACION_PM4_0, concentraciones.pm4_0);
    //uart_print(buffer);
    //sprintf(buffer, FORMATO_CONCENTRACION_PM10, concentraciones.pm10);
    //uart_print(buffer);
}
 80014e2:	bf00      	nop
 80014e4:	f507 77be 	add.w	r7, r7, #380	; 0x17c
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd90      	pop	{r4, r7, pc}
 80014ec:	080095c8 	.word	0x080095c8

080014f0 <sps30_get_concentrations>:

ConcentracionesPM sps30_get_concentrations(SPS30 *self) {
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b0c3      	sub	sp, #268	; 0x10c
 80014f4:	af02      	add	r7, sp, #8
 80014f6:	6178      	str	r0, [r7, #20]
    uint8_t readCmd[] = SPS30_FRAME_READ_MEASUREMENT;
 80014f8:	4a37      	ldr	r2, [pc, #220]	; (80015d8 <sps30_get_concentrations+0xe8>)
 80014fa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80014fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001502:	6018      	str	r0, [r3, #0]
 8001504:	3304      	adds	r3, #4
 8001506:	8019      	strh	r1, [r3, #0]
    uint8_t dataBuf[BUFFER_SIZE_READ_DATA] = {0};
 8001508:	2300      	movs	r3, #0
 800150a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800150e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001512:	2238      	movs	r2, #56	; 0x38
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f003 fae6 	bl	8004ae8 <memset>
    uint8_t originalData[BUFFER_SIZE_READ_DATA] = {0};
 800151c:	2300      	movs	r3, #0
 800151e:	673b      	str	r3, [r7, #112]	; 0x70
 8001520:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001524:	2238      	movs	r2, #56	; 0x38
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f003 fadd 	bl	8004ae8 <memset>
    ConcentracionesPM concentraciones;

    self->send_receive(self, readCmd, sizeof(readCmd), dataBuf, sizeof(dataBuf));
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	68dc      	ldr	r4, [r3, #12]
 8001532:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001536:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 800153a:	223c      	movs	r2, #60	; 0x3c
 800153c:	9200      	str	r2, [sp, #0]
 800153e:	2206      	movs	r2, #6
 8001540:	6978      	ldr	r0, [r7, #20]
 8001542:	47a0      	blx	r4
    SHDLC_revertByteStuffing(dataBuf, sizeof(dataBuf), originalData);
 8001544:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8001548:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800154c:	213c      	movs	r1, #60	; 0x3c
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fde4 	bl	800111c <SHDLC_revertByteStuffing>

    Shdlc_FrameMiso Newframe = {};
 8001554:	f107 031c 	add.w	r3, r7, #28
 8001558:	2241      	movs	r2, #65	; 0x41
 800155a:	2100      	movs	r1, #0
 800155c:	4618      	mov	r0, r3
 800155e:	f003 fac3 	bl	8004ae8 <memset>
    SHDLC_LoadMyVector(&Newframe, originalData, SHDLC_CalculateDataSize(originalData, sizeof(originalData)));
 8001562:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001566:	213c      	movs	r1, #60	; 0x3c
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fd8b 	bl	8001084 <SHDLC_CalculateDataSize>
 800156e:	4603      	mov	r3, r0
 8001570:	461a      	mov	r2, r3
 8001572:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001576:	f107 031c 	add.w	r3, r7, #28
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fd4c 	bl	8001018 <SHDLC_LoadMyVector>
    SHDLC_llenarConcentraciones(&concentraciones, Newframe.myVector);
 8001580:	f107 031c 	add.w	r3, r7, #28
 8001584:	1cda      	adds	r2, r3, #3
 8001586:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800158a:	4611      	mov	r1, r2
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fe4f 	bl	8001230 <SHDLC_llenarConcentraciones>

    return concentraciones;
 8001592:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 8001596:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800159a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800159c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80015a0:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 80015a4:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 80015a8:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80015ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80015b0:	ee06 0a10 	vmov	s12, r0
 80015b4:	ee06 1a90 	vmov	s13, r1
 80015b8:	ee07 2a10 	vmov	s14, r2
 80015bc:	ee07 3a90 	vmov	s15, r3
}
 80015c0:	eeb0 0a46 	vmov.f32	s0, s12
 80015c4:	eef0 0a66 	vmov.f32	s1, s13
 80015c8:	eeb0 1a47 	vmov.f32	s2, s14
 80015cc:	eef0 1a67 	vmov.f32	s3, s15
 80015d0:	f507 7782 	add.w	r7, r7, #260	; 0x104
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd90      	pop	{r4, r7, pc}
 80015d8:	080095c8 	.word	0x080095c8

080015dc <sps30_serial_number>:

void sps30_serial_number(SPS30 *self) {
 80015dc:	b590      	push	{r4, r7, lr}
 80015de:	b09d      	sub	sp, #116	; 0x74
 80015e0:	af02      	add	r7, sp, #8
 80015e2:	6078      	str	r0, [r7, #4]
    uint8_t readCmd[] = SPS30_FRAME_SERIAL_NUMBER;
 80015e4:	4a16      	ldr	r2, [pc, #88]	; (8001640 <sps30_serial_number+0x64>)
 80015e6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015ee:	6018      	str	r0, [r3, #0]
 80015f0:	3304      	adds	r3, #4
 80015f2:	8019      	strh	r1, [r3, #0]
 80015f4:	3302      	adds	r3, #2
 80015f6:	0c0a      	lsrs	r2, r1, #16
 80015f8:	701a      	strb	r2, [r3, #0]
    uint8_t dataBuf[BUFFER_SIZE_SERIAL_NUMBER] = {0};
 80015fa:	2300      	movs	r3, #0
 80015fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
 800160c:	611a      	str	r2, [r3, #16]
 800160e:	615a      	str	r2, [r3, #20]
 8001610:	831a      	strh	r2, [r3, #24]
    char respuestaStr[BUFFER_SIZE_RESPONSE];

    //uart_print(MSG_SOLICITAR);
    //uart_vector_print(sizeof(readCmd), readCmd);
    self->send_receive(self, readCmd, sizeof(readCmd), dataBuf, sizeof(dataBuf));
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68dc      	ldr	r4, [r3, #12]
 8001616:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800161a:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800161e:	221e      	movs	r2, #30
 8001620:	9200      	str	r2, [sp, #0]
 8001622:	2207      	movs	r2, #7
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	47a0      	blx	r4
    //uart_print(MSG_RESPUESTA);
    //uart_vector_print(sizeof(dataBuf), dataBuf);

    int longRespuesta = SHDLC_CalculateDataSize(dataBuf, sizeof(dataBuf));
 8001628:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800162c:	211e      	movs	r1, #30
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fd28 	bl	8001084 <SHDLC_CalculateDataSize>
 8001634:	6678      	str	r0, [r7, #100]	; 0x64
    //snprintf(respuestaStr, sizeof(respuestaStr), MENSAJE_SIZE_RESPUESTA, longRespuesta);
    //uart_print(respuestaStr);
}
 8001636:	bf00      	nop
 8001638:	376c      	adds	r7, #108	; 0x6c
 800163a:	46bd      	mov	sp, r7
 800163c:	bd90      	pop	{r4, r7, pc}
 800163e:	bf00      	nop
 8001640:	080095d0 	.word	0x080095d0

08001644 <sps30_wake_up>:

void sps30_wake_up(SPS30 *self) {
 8001644:	b590      	push	{r4, r7, lr}
 8001646:	b097      	sub	sp, #92	; 0x5c
 8001648:	af02      	add	r7, sp, #8
 800164a:	6078      	str	r0, [r7, #4]
    uint8_t Pulse = SPS30_PULSE_WAKE_UP;
 800164c:	23ff      	movs	r3, #255	; 0xff
 800164e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    uint8_t readCmd[] = SPS30_FRAME_WAKE_UP;
 8001652:	4a17      	ldr	r2, [pc, #92]	; (80016b0 <sps30_wake_up+0x6c>)
 8001654:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001658:	e892 0003 	ldmia.w	r2, {r0, r1}
 800165c:	6018      	str	r0, [r3, #0]
 800165e:	3304      	adds	r3, #4
 8001660:	8019      	strh	r1, [r3, #0]
 8001662:	3302      	adds	r3, #2
 8001664:	0c0a      	lsrs	r2, r1, #16
 8001666:	701a      	strb	r2, [r3, #0]
    uint8_t dataBuf[BUFFER_SIZE_WAKEUP] = {0};
 8001668:	2300      	movs	r3, #0
 800166a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800166c:	2300      	movs	r3, #0
 800166e:	643b      	str	r3, [r7, #64]	; 0x40
    char respuestaStr[BUFFER_SIZE_RESPONSE];

    //uart_print(MSG_SOLICITAR);
    //uart_vector_print(sizeof(readCmd), readCmd);
    self->send_command(self, &Pulse, sizeof(Pulse));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f107 014b 	add.w	r1, r7, #75	; 0x4b
 8001678:	2201      	movs	r2, #1
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	4798      	blx	r3
    HAL_Delay(DELAY_WAKEUP);
 800167e:	2032      	movs	r0, #50	; 0x32
 8001680:	f000 fd84 	bl	800218c <HAL_Delay>
    self->send_receive(self, readCmd, sizeof(readCmd), dataBuf, sizeof(dataBuf));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68dc      	ldr	r4, [r3, #12]
 8001688:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800168c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001690:	2208      	movs	r2, #8
 8001692:	9200      	str	r2, [sp, #0]
 8001694:	2207      	movs	r2, #7
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	47a0      	blx	r4
    //uart_print(MSG_RESPUESTA);
    //uart_vector_print(sizeof(dataBuf), dataBuf);

    int longRespuesta = SHDLC_CalculateDataSize(dataBuf, sizeof(dataBuf));
 800169a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800169e:	2108      	movs	r1, #8
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fcef 	bl	8001084 <SHDLC_CalculateDataSize>
 80016a6:	64f8      	str	r0, [r7, #76]	; 0x4c
    //snprintf(respuestaStr, sizeof(respuestaStr), MENSAJE_SIZE_RESPUESTA, longRespuesta);
    //uart_print(respuestaStr);
}
 80016a8:	bf00      	nop
 80016aa:	3754      	adds	r7, #84	; 0x54
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd90      	pop	{r4, r7, pc}
 80016b0:	080095d8 	.word	0x080095d8

080016b4 <SPS30_init>:

void SPS30_init(SPS30 *self, UART_HandleTypeDef *huart) {
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
    self->huart = huart;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	601a      	str	r2, [r3, #0]
    self->send_command = sps30_send_command;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a11      	ldr	r2, [pc, #68]	; (800170c <SPS30_init+0x58>)
 80016c8:	605a      	str	r2, [r3, #4]
    self->receive_async = sps30_receive_async;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a10      	ldr	r2, [pc, #64]	; (8001710 <SPS30_init+0x5c>)
 80016ce:	609a      	str	r2, [r3, #8]
    self->send_receive = sps30_send_receive;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a10      	ldr	r2, [pc, #64]	; (8001714 <SPS30_init+0x60>)
 80016d4:	60da      	str	r2, [r3, #12]
    self->start_measurement = sps30_start_measurement;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a0f      	ldr	r2, [pc, #60]	; (8001718 <SPS30_init+0x64>)
 80016da:	611a      	str	r2, [r3, #16]
    self->stop_measurement = sps30_stop_measurement;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4a0f      	ldr	r2, [pc, #60]	; (800171c <SPS30_init+0x68>)
 80016e0:	615a      	str	r2, [r3, #20]
    self->sleep = sps30_sleep;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a0e      	ldr	r2, [pc, #56]	; (8001720 <SPS30_init+0x6c>)
 80016e6:	619a      	str	r2, [r3, #24]
    self->read_data = sps30_read_data;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a0e      	ldr	r2, [pc, #56]	; (8001724 <SPS30_init+0x70>)
 80016ec:	61da      	str	r2, [r3, #28]
    self->serial_number = sps30_serial_number;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a0d      	ldr	r2, [pc, #52]	; (8001728 <SPS30_init+0x74>)
 80016f2:	621a      	str	r2, [r3, #32]
    self->wake_up = sps30_wake_up;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a0d      	ldr	r2, [pc, #52]	; (800172c <SPS30_init+0x78>)
 80016f8:	625a      	str	r2, [r3, #36]	; 0x24
    self->get_concentrations = sps30_get_concentrations;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a0c      	ldr	r2, [pc, #48]	; (8001730 <SPS30_init+0x7c>)
 80016fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	0800128f 	.word	0x0800128f
 8001710:	080012b3 	.word	0x080012b3
 8001714:	080012d7 	.word	0x080012d7
 8001718:	0800130d 	.word	0x0800130d
 800171c:	08001371 	.word	0x08001371
 8001720:	080013cd 	.word	0x080013cd
 8001724:	0800141d 	.word	0x0800141d
 8001728:	080015dd 	.word	0x080015dd
 800172c:	08001645 	.word	0x08001645
 8001730:	080014f1 	.word	0x080014f1

08001734 <uart_print>:

#include "uart_printing.h"
#include <string.h> // Para usar memset y strlen
#include <stdio.h>  // Para usar snprintf

void uart_print(UART_Printing *self, const char *message) {
 8001734:	b590      	push	{r4, r7, lr}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(self->huart, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681c      	ldr	r4, [r3, #0]
 8001742:	6838      	ldr	r0, [r7, #0]
 8001744:	f7fe fd54 	bl	80001f0 <strlen>
 8001748:	4603      	mov	r3, r0
 800174a:	b29a      	uxth	r2, r3
 800174c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001750:	6839      	ldr	r1, [r7, #0]
 8001752:	4620      	mov	r0, r4
 8001754:	f002 f928 	bl	80039a8 <HAL_UART_Transmit>
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	bd90      	pop	{r4, r7, pc}

08001760 <uart_vector_print>:

void uart_vector_print(UART_Printing *self, uint16_t data_len, const uint8_t *data) {
 8001760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001764:	b08a      	sub	sp, #40	; 0x28
 8001766:	af00      	add	r7, sp, #0
 8001768:	60f8      	str	r0, [r7, #12]
 800176a:	460b      	mov	r3, r1
 800176c:	607a      	str	r2, [r7, #4]
 800176e:	817b      	strh	r3, [r7, #10]
 8001770:	466b      	mov	r3, sp
 8001772:	469a      	mov	sl, r3
    char buffer[data_len * 3 + 1];     // Dinamizar tamaño del buffer basado en data_len.
 8001774:	897a      	ldrh	r2, [r7, #10]
 8001776:	4613      	mov	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4413      	add	r3, r2
 800177c:	1c5e      	adds	r6, r3, #1
 800177e:	1e73      	subs	r3, r6, #1
 8001780:	61bb      	str	r3, [r7, #24]
 8001782:	4632      	mov	r2, r6
 8001784:	2300      	movs	r3, #0
 8001786:	4690      	mov	r8, r2
 8001788:	4699      	mov	r9, r3
 800178a:	f04f 0200 	mov.w	r2, #0
 800178e:	f04f 0300 	mov.w	r3, #0
 8001792:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001796:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800179a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800179e:	4632      	mov	r2, r6
 80017a0:	2300      	movs	r3, #0
 80017a2:	4614      	mov	r4, r2
 80017a4:	461d      	mov	r5, r3
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	f04f 0300 	mov.w	r3, #0
 80017ae:	00eb      	lsls	r3, r5, #3
 80017b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017b4:	00e2      	lsls	r2, r4, #3
 80017b6:	4633      	mov	r3, r6
 80017b8:	3307      	adds	r3, #7
 80017ba:	08db      	lsrs	r3, r3, #3
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	ebad 0d03 	sub.w	sp, sp, r3
 80017c2:	466b      	mov	r3, sp
 80017c4:	3300      	adds	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
    memset(buffer, 0, sizeof(buffer)); // Limpia el buffer.
 80017c8:	4633      	mov	r3, r6
 80017ca:	461a      	mov	r2, r3
 80017cc:	2100      	movs	r1, #0
 80017ce:	6978      	ldr	r0, [r7, #20]
 80017d0:	f003 f98a 	bl	8004ae8 <memset>
    char * ptr = buffer;               // Puntero para la posición actual en el buffer.
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	61fb      	str	r3, [r7, #28]
    int remaining = sizeof(buffer);    // Espacio restante en el buffer.
 80017d8:	623e      	str	r6, [r7, #32]
    for (uint16_t i = 0; i < data_len; ++i) {
 80017da:	2300      	movs	r3, #0
 80017dc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80017de:	e017      	b.n	8001810 <uart_vector_print+0xb0>
        int written = snprintf(ptr, remaining, "%02X ", data[i]);
 80017e0:	6a39      	ldr	r1, [r7, #32]
 80017e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	4413      	add	r3, r2
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	4a11      	ldr	r2, [pc, #68]	; (8001830 <uart_vector_print+0xd0>)
 80017ec:	69f8      	ldr	r0, [r7, #28]
 80017ee:	f004 f879 	bl	80058e4 <sniprintf>
 80017f2:	6138      	str	r0, [r7, #16]
        ptr += written;       // Avanza el puntero.
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	69fa      	ldr	r2, [r7, #28]
 80017f8:	4413      	add	r3, r2
 80017fa:	61fb      	str	r3, [r7, #28]
        remaining -= written; // Decrementa el espacio restante.
 80017fc:	6a3a      	ldr	r2, [r7, #32]
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	623b      	str	r3, [r7, #32]
        if (remaining <= 0)
 8001804:	6a3b      	ldr	r3, [r7, #32]
 8001806:	2b00      	cmp	r3, #0
 8001808:	dd07      	ble.n	800181a <uart_vector_print+0xba>
    for (uint16_t i = 0; i < data_len; ++i) {
 800180a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800180c:	3301      	adds	r3, #1
 800180e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001810:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001812:	897b      	ldrh	r3, [r7, #10]
 8001814:	429a      	cmp	r2, r3
 8001816:	d3e3      	bcc.n	80017e0 <uart_vector_print+0x80>
 8001818:	e000      	b.n	800181c <uart_vector_print+0xbc>
            break; // Evita desbordamiento del buffer.
 800181a:	bf00      	nop
    }
    uart_print(self, buffer); // Imprimir todos los bytes formateados.
 800181c:	6979      	ldr	r1, [r7, #20]
 800181e:	68f8      	ldr	r0, [r7, #12]
 8001820:	f7ff ff88 	bl	8001734 <uart_print>
 8001824:	46d5      	mov	sp, sl
}
 8001826:	bf00      	nop
 8001828:	3728      	adds	r7, #40	; 0x28
 800182a:	46bd      	mov	sp, r7
 800182c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001830:	080095e0 	.word	0x080095e0

08001834 <UART_Printing_init>:

void UART_Printing_init(UART_Printing *self, UART_HandleTypeDef *huart) {
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
    self->huart = huart;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	601a      	str	r2, [r3, #0]
    self->print = uart_print;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a05      	ldr	r2, [pc, #20]	; (800185c <UART_Printing_init+0x28>)
 8001848:	605a      	str	r2, [r3, #4]
    self->vector_print = uart_vector_print;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a04      	ldr	r2, [pc, #16]	; (8001860 <UART_Printing_init+0x2c>)
 800184e:	609a      	str	r2, [r3, #8]
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	08001735 	.word	0x08001735
 8001860:	08001761 	.word	0x08001761

08001864 <MX_GPIO_Init>:

/* USER CODE END 1 */

/** Pinout Configuration
 */
void MX_GPIO_Init(void) {
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <MX_GPIO_Init+0x4c>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4a0f      	ldr	r2, [pc, #60]	; (80018b0 <MX_GPIO_Init+0x4c>)
 8001874:	f043 0308 	orr.w	r3, r3, #8
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4b0d      	ldr	r3, [pc, #52]	; (80018b0 <MX_GPIO_Init+0x4c>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	603b      	str	r3, [r7, #0]
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <MX_GPIO_Init+0x4c>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a08      	ldr	r2, [pc, #32]	; (80018b0 <MX_GPIO_Init+0x4c>)
 8001890:	f043 0304 	orr.w	r3, r3, #4
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <MX_GPIO_Init+0x4c>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	603b      	str	r3, [r7, #0]
 80018a0:	683b      	ldr	r3, [r7, #0]
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800

080018b4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80018b4:	b598      	push	{r3, r4, r7, lr}
 80018b6:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80018b8:	f000 fbf6 	bl	80020a8 <HAL_Init>
    // SPS30_Init(&huart5);

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80018bc:	f000 f8b0 	bl	8001a20 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80018c0:	f7ff ffd0 	bl	8001864 <MX_GPIO_Init>
    MX_RTC_Init();
 80018c4:	f000 f914 	bl	8001af0 <MX_RTC_Init>
    MX_UART5_Init();
 80018c8:	f000 faca 	bl	8001e60 <MX_UART5_Init>
    MX_USART3_UART_Init();
 80018cc:	f000 faf2 	bl	8001eb4 <MX_USART3_UART_Init>
    /* USER CODE BEGIN 2 */

    // Inicializar el objeto SPS30 con el manejador de UART
        SPS30_init(&sps30, &huart5);
 80018d0:	4947      	ldr	r1, [pc, #284]	; (80019f0 <main+0x13c>)
 80018d2:	4848      	ldr	r0, [pc, #288]	; (80019f4 <main+0x140>)
 80018d4:	f7ff feee 	bl	80016b4 <SPS30_init>
        UART_Printing_init(&uart, &huart3);
 80018d8:	4947      	ldr	r1, [pc, #284]	; (80019f8 <main+0x144>)
 80018da:	4848      	ldr	r0, [pc, #288]	; (80019fc <main+0x148>)
 80018dc:	f7ff ffaa 	bl	8001834 <UART_Printing_init>
            (uint8_t *)"\n\n"
                       "-----------------------------------------------------------\n"
                       "*** UART port initialization successful !!! ***\n"
                       "-----------------------------------------------------------\n";

        HAL_UART_Transmit(&huart3, (uint8_t *)message, strlen((char *)message), HAL_MAX_DELAY);
 80018e0:	4b47      	ldr	r3, [pc, #284]	; (8001a00 <main+0x14c>)
 80018e2:	681c      	ldr	r4, [r3, #0]
 80018e4:	4b46      	ldr	r3, [pc, #280]	; (8001a00 <main+0x14c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7fe fc81 	bl	80001f0 <strlen>
 80018ee:	4603      	mov	r3, r0
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018f6:	4621      	mov	r1, r4
 80018f8:	483f      	ldr	r0, [pc, #252]	; (80019f8 <main+0x144>)
 80018fa:	f002 f855 	bl	80039a8 <HAL_UART_Transmit>

        uart.print(&uart, "\n*********************************************\n");
 80018fe:	4b3f      	ldr	r3, [pc, #252]	; (80019fc <main+0x148>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	4940      	ldr	r1, [pc, #256]	; (8001a04 <main+0x150>)
 8001904:	483d      	ldr	r0, [pc, #244]	; (80019fc <main+0x148>)
 8001906:	4798      	blx	r3
        uart.print(&uart, "WAKE UP :\n");
 8001908:	4b3c      	ldr	r3, [pc, #240]	; (80019fc <main+0x148>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	493e      	ldr	r1, [pc, #248]	; (8001a08 <main+0x154>)
 800190e:	483b      	ldr	r0, [pc, #236]	; (80019fc <main+0x148>)
 8001910:	4798      	blx	r3
        sps30.wake_up(&sps30);
 8001912:	4b38      	ldr	r3, [pc, #224]	; (80019f4 <main+0x140>)
 8001914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001916:	4837      	ldr	r0, [pc, #220]	; (80019f4 <main+0x140>)
 8001918:	4798      	blx	r3
        // sps30_wake_up();

        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
    	  uart.print(&uart, "\n*********************************************\n");
 800191a:	4b38      	ldr	r3, [pc, #224]	; (80019fc <main+0x148>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	4939      	ldr	r1, [pc, #228]	; (8001a04 <main+0x150>)
 8001920:	4836      	ldr	r0, [pc, #216]	; (80019fc <main+0x148>)
 8001922:	4798      	blx	r3
    	        uart.print(&uart, "START MEASUREMENT:\n");
 8001924:	4b35      	ldr	r3, [pc, #212]	; (80019fc <main+0x148>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	4938      	ldr	r1, [pc, #224]	; (8001a0c <main+0x158>)
 800192a:	4834      	ldr	r0, [pc, #208]	; (80019fc <main+0x148>)
 800192c:	4798      	blx	r3
    	        sps30.start_measurement(&sps30);
 800192e:	4b31      	ldr	r3, [pc, #196]	; (80019f4 <main+0x140>)
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	4830      	ldr	r0, [pc, #192]	; (80019f4 <main+0x140>)
 8001934:	4798      	blx	r3

    	        HAL_Delay(1500);
 8001936:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800193a:	f000 fc27 	bl	800218c <HAL_Delay>

    	        uart.print(&uart, "\n*********************************************\n");
 800193e:	4b2f      	ldr	r3, [pc, #188]	; (80019fc <main+0x148>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	4930      	ldr	r1, [pc, #192]	; (8001a04 <main+0x150>)
 8001944:	482d      	ldr	r0, [pc, #180]	; (80019fc <main+0x148>)
 8001946:	4798      	blx	r3
    	        uart.print(&uart, "READ DATA 1:\n");
 8001948:	4b2c      	ldr	r3, [pc, #176]	; (80019fc <main+0x148>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	4930      	ldr	r1, [pc, #192]	; (8001a10 <main+0x15c>)
 800194e:	482b      	ldr	r0, [pc, #172]	; (80019fc <main+0x148>)
 8001950:	4798      	blx	r3
    	        sps30.read_data(&sps30);
 8001952:	4b28      	ldr	r3, [pc, #160]	; (80019f4 <main+0x140>)
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	4827      	ldr	r0, [pc, #156]	; (80019f4 <main+0x140>)
 8001958:	4798      	blx	r3

    	        HAL_Delay(1000);
 800195a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800195e:	f000 fc15 	bl	800218c <HAL_Delay>

    	        uart.print(&uart, "\n*********************************************\n");
 8001962:	4b26      	ldr	r3, [pc, #152]	; (80019fc <main+0x148>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	4927      	ldr	r1, [pc, #156]	; (8001a04 <main+0x150>)
 8001968:	4824      	ldr	r0, [pc, #144]	; (80019fc <main+0x148>)
 800196a:	4798      	blx	r3
    	        uart.print(&uart, "SERIAL NUMBER:\n");
 800196c:	4b23      	ldr	r3, [pc, #140]	; (80019fc <main+0x148>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	4928      	ldr	r1, [pc, #160]	; (8001a14 <main+0x160>)
 8001972:	4822      	ldr	r0, [pc, #136]	; (80019fc <main+0x148>)
 8001974:	4798      	blx	r3
    	        sps30.serial_number(&sps30);
 8001976:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <main+0x140>)
 8001978:	6a1b      	ldr	r3, [r3, #32]
 800197a:	481e      	ldr	r0, [pc, #120]	; (80019f4 <main+0x140>)
 800197c:	4798      	blx	r3

    	        HAL_Delay(100);
 800197e:	2064      	movs	r0, #100	; 0x64
 8001980:	f000 fc04 	bl	800218c <HAL_Delay>

    	        uart.print(&uart, "\n*********************************************\n");
 8001984:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <main+0x148>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	491e      	ldr	r1, [pc, #120]	; (8001a04 <main+0x150>)
 800198a:	481c      	ldr	r0, [pc, #112]	; (80019fc <main+0x148>)
 800198c:	4798      	blx	r3
    	        uart.print(&uart, "STOP MEASUREMENT:\n");
 800198e:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <main+0x148>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	4921      	ldr	r1, [pc, #132]	; (8001a18 <main+0x164>)
 8001994:	4819      	ldr	r0, [pc, #100]	; (80019fc <main+0x148>)
 8001996:	4798      	blx	r3
    	        sps30.stop_measurement(&sps30);
 8001998:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <main+0x140>)
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	4815      	ldr	r0, [pc, #84]	; (80019f4 <main+0x140>)
 800199e:	4798      	blx	r3

    	        HAL_Delay(100);
 80019a0:	2064      	movs	r0, #100	; 0x64
 80019a2:	f000 fbf3 	bl	800218c <HAL_Delay>

    	        uart.print(&uart, "\n*********************************************\n");
 80019a6:	4b15      	ldr	r3, [pc, #84]	; (80019fc <main+0x148>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	4916      	ldr	r1, [pc, #88]	; (8001a04 <main+0x150>)
 80019ac:	4813      	ldr	r0, [pc, #76]	; (80019fc <main+0x148>)
 80019ae:	4798      	blx	r3
    	        uart.print(&uart, "SLEEP :\n");
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <main+0x148>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	4919      	ldr	r1, [pc, #100]	; (8001a1c <main+0x168>)
 80019b6:	4811      	ldr	r0, [pc, #68]	; (80019fc <main+0x148>)
 80019b8:	4798      	blx	r3
    	        sps30.sleep(&sps30);
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <main+0x140>)
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	480d      	ldr	r0, [pc, #52]	; (80019f4 <main+0x140>)
 80019c0:	4798      	blx	r3

    	        HAL_Delay(4000); // Espera 10 segundos antes de la próxima lectura
 80019c2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80019c6:	f000 fbe1 	bl	800218c <HAL_Delay>

    	        uart.print(&uart, "\n*********************************************\n");
 80019ca:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <main+0x148>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	490d      	ldr	r1, [pc, #52]	; (8001a04 <main+0x150>)
 80019d0:	480a      	ldr	r0, [pc, #40]	; (80019fc <main+0x148>)
 80019d2:	4798      	blx	r3
    	        uart.print(&uart, "WAKE UP :\n");
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <main+0x148>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	490b      	ldr	r1, [pc, #44]	; (8001a08 <main+0x154>)
 80019da:	4808      	ldr	r0, [pc, #32]	; (80019fc <main+0x148>)
 80019dc:	4798      	blx	r3
    	        sps30.wake_up(&sps30);
 80019de:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <main+0x140>)
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e2:	4804      	ldr	r0, [pc, #16]	; (80019f4 <main+0x140>)
 80019e4:	4798      	blx	r3


        HAL_Delay(10000); // Espera 10 segundos antes de la próxima lectura
 80019e6:	f242 7010 	movw	r0, #10000	; 0x2710
 80019ea:	f000 fbcf 	bl	800218c <HAL_Delay>
    	  uart.print(&uart, "\n*********************************************\n");
 80019ee:	e794      	b.n	800191a <main+0x66>
 80019f0:	2000025c 	.word	0x2000025c
 80019f4:	20000200 	.word	0x20000200
 80019f8:	200002a0 	.word	0x200002a0
 80019fc:	2000022c 	.word	0x2000022c
 8001a00:	20000000 	.word	0x20000000
 8001a04:	080095e8 	.word	0x080095e8
 8001a08:	08009618 	.word	0x08009618
 8001a0c:	08009624 	.word	0x08009624
 8001a10:	08009638 	.word	0x08009638
 8001a14:	08009648 	.word	0x08009648
 8001a18:	08009658 	.word	0x08009658
 8001a1c:	0800966c 	.word	0x0800966c

08001a20 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b094      	sub	sp, #80	; 0x50
 8001a24:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a26:	f107 0320 	add.w	r3, r7, #32
 8001a2a:	2230      	movs	r2, #48	; 0x30
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f003 f85a 	bl	8004ae8 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a34:	f107 030c 	add.w	r3, r7, #12
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a44:	2300      	movs	r3, #0
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	4b24      	ldr	r3, [pc, #144]	; (8001adc <SystemClock_Config+0xbc>)
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4c:	4a23      	ldr	r2, [pc, #140]	; (8001adc <SystemClock_Config+0xbc>)
 8001a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a52:	6413      	str	r3, [r2, #64]	; 0x40
 8001a54:	4b21      	ldr	r3, [pc, #132]	; (8001adc <SystemClock_Config+0xbc>)
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a60:	2300      	movs	r3, #0
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	4b1e      	ldr	r3, [pc, #120]	; (8001ae0 <SystemClock_Config+0xc0>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a6c:	4a1c      	ldr	r2, [pc, #112]	; (8001ae0 <SystemClock_Config+0xc0>)
 8001a6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a72:	6013      	str	r3, [r2, #0]
 8001a74:	4b1a      	ldr	r3, [pc, #104]	; (8001ae0 <SystemClock_Config+0xc0>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a7c:	607b      	str	r3, [r7, #4]
 8001a7e:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI;
 8001a80:	230a      	movs	r3, #10
 8001a82:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a84:	2301      	movs	r3, #1
 8001a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a88:	2310      	movs	r3, #16
 8001a8a:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001a94:	f107 0320 	add.w	r3, r7, #32
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f000 feeb 	bl	8002874 <HAL_RCC_OscConfig>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <SystemClock_Config+0x88>
        Error_Handler();
 8001aa4:	f000 f81e 	bl	8001ae4 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType =
 8001aa8:	230f      	movs	r3, #15
 8001aaa:	60fb      	str	r3, [r7, #12]
        RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001aac:	2300      	movs	r3, #0
 8001aae:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001abc:	f107 030c 	add.w	r3, r7, #12
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f001 f94e 	bl	8002d64 <HAL_RCC_ClockConfig>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <SystemClock_Config+0xb2>
        Error_Handler();
 8001ace:	f000 f809 	bl	8001ae4 <Error_Handler>
    }
}
 8001ad2:	bf00      	nop
 8001ad4:	3750      	adds	r7, #80	; 0x50
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40007000 	.word	0x40007000

08001ae4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae8:	b672      	cpsid	i
}
 8001aea:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8001aec:	e7fe      	b.n	8001aec <Error_Handler+0x8>
	...

08001af0 <MX_RTC_Init>:
/* USER CODE END 0 */

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN RTC_Init 0 */

    /* USER CODE END RTC_Init 0 */

    RTC_TimeTypeDef sTime = {0};
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 8001b04:	2300      	movs	r3, #0
 8001b06:	603b      	str	r3, [r7, #0]

    /* USER CODE END RTC_Init 1 */

    /** Initialize RTC Only
     */
    hrtc.Instance = RTC;
 8001b08:	4b24      	ldr	r3, [pc, #144]	; (8001b9c <MX_RTC_Init+0xac>)
 8001b0a:	4a25      	ldr	r2, [pc, #148]	; (8001ba0 <MX_RTC_Init+0xb0>)
 8001b0c:	601a      	str	r2, [r3, #0]
    hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b0e:	4b23      	ldr	r3, [pc, #140]	; (8001b9c <MX_RTC_Init+0xac>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	605a      	str	r2, [r3, #4]
    hrtc.Init.AsynchPrediv = 127;
 8001b14:	4b21      	ldr	r3, [pc, #132]	; (8001b9c <MX_RTC_Init+0xac>)
 8001b16:	227f      	movs	r2, #127	; 0x7f
 8001b18:	609a      	str	r2, [r3, #8]
    hrtc.Init.SynchPrediv = 255;
 8001b1a:	4b20      	ldr	r3, [pc, #128]	; (8001b9c <MX_RTC_Init+0xac>)
 8001b1c:	22ff      	movs	r2, #255	; 0xff
 8001b1e:	60da      	str	r2, [r3, #12]
    hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b20:	4b1e      	ldr	r3, [pc, #120]	; (8001b9c <MX_RTC_Init+0xac>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	611a      	str	r2, [r3, #16]
    hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b26:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <MX_RTC_Init+0xac>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	615a      	str	r2, [r3, #20]
    hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <MX_RTC_Init+0xac>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8001b32:	481a      	ldr	r0, [pc, #104]	; (8001b9c <MX_RTC_Init+0xac>)
 8001b34:	f001 fcb6 	bl	80034a4 <HAL_RTC_Init>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_RTC_Init+0x52>
        Error_Handler();
 8001b3e:	f7ff ffd1 	bl	8001ae4 <Error_Handler>

    /* USER CODE END Check_RTC_BKUP */

    /** Initialize RTC and set the Time and Date
     */
    sTime.Hours = 0x0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	713b      	strb	r3, [r7, #4]
    sTime.Minutes = 0x0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	717b      	strb	r3, [r7, #5]
    sTime.Seconds = 0x0;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	71bb      	strb	r3, [r7, #6]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8001b56:	1d3b      	adds	r3, r7, #4
 8001b58:	2201      	movs	r2, #1
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	480f      	ldr	r0, [pc, #60]	; (8001b9c <MX_RTC_Init+0xac>)
 8001b5e:	f001 fd17 	bl	8003590 <HAL_RTC_SetTime>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_RTC_Init+0x7c>
        Error_Handler();
 8001b68:	f7ff ffbc 	bl	8001ae4 <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	703b      	strb	r3, [r7, #0]
    sDate.Month = RTC_MONTH_JANUARY;
 8001b70:	2301      	movs	r3, #1
 8001b72:	707b      	strb	r3, [r7, #1]
    sDate.Date = 0x1;
 8001b74:	2301      	movs	r3, #1
 8001b76:	70bb      	strb	r3, [r7, #2]
    sDate.Year = 0x0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	70fb      	strb	r3, [r7, #3]

    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8001b7c:	463b      	mov	r3, r7
 8001b7e:	2201      	movs	r2, #1
 8001b80:	4619      	mov	r1, r3
 8001b82:	4806      	ldr	r0, [pc, #24]	; (8001b9c <MX_RTC_Init+0xac>)
 8001b84:	f001 fd9e 	bl	80036c4 <HAL_RTC_SetDate>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_RTC_Init+0xa2>
        Error_Handler();
 8001b8e:	f7ff ffa9 	bl	8001ae4 <Error_Handler>
    }
    /* USER CODE BEGIN RTC_Init 2 */

    /* USER CODE END RTC_Init 2 */
}
 8001b92:	bf00      	nop
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000238 	.word	0x20000238
 8001ba0:	40002800 	.word	0x40002800

08001ba4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef * rtcHandle) {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08e      	sub	sp, #56	; 0x38
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]

    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bac:	f107 0308 	add.w	r3, r7, #8
 8001bb0:	2230      	movs	r2, #48	; 0x30
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f002 ff97 	bl	8004ae8 <memset>
    if (rtcHandle->Instance == RTC) {
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a0c      	ldr	r2, [pc, #48]	; (8001bf0 <HAL_RTC_MspInit+0x4c>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d111      	bne.n	8001be8 <HAL_RTC_MspInit+0x44>

        /* USER CODE END RTC_MspInit 0 */

        /** Initializes the peripherals clock
         */
        PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001bc4:	2320      	movs	r3, #32
 8001bc6:	60bb      	str	r3, [r7, #8]
        PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001bc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bcc:	633b      	str	r3, [r7, #48]	; 0x30
        if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001bce:	f107 0308 	add.w	r3, r7, #8
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f001 faa6 	bl	8003124 <HAL_RCCEx_PeriphCLKConfig>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_RTC_MspInit+0x3e>
            Error_Handler();
 8001bde:	f7ff ff81 	bl	8001ae4 <Error_Handler>
        }

        /* RTC clock enable */
        __HAL_RCC_RTC_ENABLE();
 8001be2:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <HAL_RTC_MspInit+0x50>)
 8001be4:	2201      	movs	r2, #1
 8001be6:	601a      	str	r2, [r3, #0]
        /* USER CODE BEGIN RTC_MspInit 1 */

        /* USER CODE END RTC_MspInit 1 */
    }
}
 8001be8:	bf00      	nop
 8001bea:	3738      	adds	r7, #56	; 0x38
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40002800 	.word	0x40002800
 8001bf4:	42470e3c 	.word	0x42470e3c

08001bf8 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	607b      	str	r3, [r7, #4]
 8001c02:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <HAL_MspInit+0x4c>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	4a0f      	ldr	r2, [pc, #60]	; (8001c44 <HAL_MspInit+0x4c>)
 8001c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0e:	4b0d      	ldr	r3, [pc, #52]	; (8001c44 <HAL_MspInit+0x4c>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c16:	607b      	str	r3, [r7, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	603b      	str	r3, [r7, #0]
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <HAL_MspInit+0x4c>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	4a08      	ldr	r2, [pc, #32]	; (8001c44 <HAL_MspInit+0x4c>)
 8001c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c28:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_MspInit+0x4c>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c32:	603b      	str	r3, [r7, #0]
 8001c34:	683b      	ldr	r3, [r7, #0]
    /* System interrupt init*/

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	40023800 	.word	0x40023800

08001c48 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8001c4c:	e7fe      	b.n	8001c4c <NMI_Handler+0x4>

08001c4e <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1) {
 8001c52:	e7fe      	b.n	8001c52 <HardFault_Handler+0x4>

08001c54 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1) {
 8001c58:	e7fe      	b.n	8001c58 <MemManage_Handler+0x4>

08001c5a <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1) {
 8001c5e:	e7fe      	b.n	8001c5e <BusFault_Handler+0x4>

08001c60 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1) {
 8001c64:	e7fe      	b.n	8001c64 <UsageFault_Handler+0x4>

08001c66 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0

    /* USER CODE END SVCall_IRQn 0 */
    /* USER CODE BEGIN SVCall_IRQn 1 */

    /* USER CODE END SVCall_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0

    /* USER CODE END PendSV_IRQn 0 */
    /* USER CODE BEGIN PendSV_IRQn 1 */

    /* USER CODE END PendSV_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 8001c94:	f000 fa5a 	bl	800214c <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <UART5_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles UART5 global interrupt.
 */
void UART5_IRQHandler(void) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UART5_IRQn 0 */

    /* USER CODE END UART5_IRQn 0 */
    HAL_UART_IRQHandler(&huart5);
 8001ca0:	4802      	ldr	r0, [pc, #8]	; (8001cac <UART5_IRQHandler+0x10>)
 8001ca2:	f001 ffb5 	bl	8003c10 <HAL_UART_IRQHandler>
    /* USER CODE BEGIN UART5_IRQn 1 */

    /* USER CODE END UART5_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	2000025c 	.word	0x2000025c

08001cb0 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
    return 1;
 8001cb4:	2301      	movs	r3, #1
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <_kill>:

int _kill(int pid, int sig) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
    (void)pid;
    (void)sig;
    errno = EINVAL;
 8001cca:	f002 fed5 	bl	8004a78 <__errno>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2216      	movs	r2, #22
 8001cd2:	601a      	str	r2, [r3, #0]
    return -1;
 8001cd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <_exit>:

void _exit(int status) {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
    _kill(status, -1);
 8001ce8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff ffe7 	bl	8001cc0 <_kill>
    while (1) {
 8001cf2:	e7fe      	b.n	8001cf2 <_exit+0x12>

08001cf4 <_read>:
    } /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char * ptr, int len) {
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	e00a      	b.n	8001d1c <_read+0x28>
        *ptr++ = __io_getchar();
 8001d06:	f3af 8000 	nop.w
 8001d0a:	4601      	mov	r1, r0
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	1c5a      	adds	r2, r3, #1
 8001d10:	60ba      	str	r2, [r7, #8]
 8001d12:	b2ca      	uxtb	r2, r1
 8001d14:	701a      	strb	r2, [r3, #0]
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	dbf0      	blt.n	8001d06 <_read+0x12>
    }

    return len;
 8001d24:	687b      	ldr	r3, [r7, #4]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <_write>:

__attribute__((weak)) int _write(int file, char * ptr, int len) {
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b086      	sub	sp, #24
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	60f8      	str	r0, [r7, #12]
 8001d36:	60b9      	str	r1, [r7, #8]
 8001d38:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
 8001d3e:	e009      	b.n	8001d54 <_write+0x26>
        __io_putchar(*ptr++);
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	1c5a      	adds	r2, r3, #1
 8001d44:	60ba      	str	r2, [r7, #8]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f3af 8000 	nop.w
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	3301      	adds	r3, #1
 8001d52:	617b      	str	r3, [r7, #20]
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	dbf1      	blt.n	8001d40 <_write+0x12>
    }
    return len;
 8001d5c:	687b      	ldr	r3, [r7, #4]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <_close>:

int _close(int file) {
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
    (void)file;
    return -1;
 8001d6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <_fstat>:

int _fstat(int file, struct stat * st) {
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
 8001d86:	6039      	str	r1, [r7, #0]
    (void)file;
    st->st_mode = S_IFCHR;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d8e:	605a      	str	r2, [r3, #4]
    return 0;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <_isatty>:

int _isatty(int file) {
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
    (void)file;
    return 1;
 8001da6:	2301      	movs	r3, #1
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
    (void)file;
    (void)ptr;
    (void)dir;
    return 0;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void * _sbrk(ptrdiff_t incr) {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dd8:	4a14      	ldr	r2, [pc, #80]	; (8001e2c <_sbrk+0x5c>)
 8001dda:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <_sbrk+0x60>)
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	617b      	str	r3, [r7, #20]
    const uint8_t * max_heap = (uint8_t *)stack_limit;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	613b      	str	r3, [r7, #16]
    uint8_t * prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 8001de4:	4b13      	ldr	r3, [pc, #76]	; (8001e34 <_sbrk+0x64>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d102      	bne.n	8001df2 <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 8001dec:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <_sbrk+0x64>)
 8001dee:	4a12      	ldr	r2, [pc, #72]	; (8001e38 <_sbrk+0x68>)
 8001df0:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <_sbrk+0x64>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d207      	bcs.n	8001e10 <_sbrk+0x40>
        errno = ENOMEM;
 8001e00:	f002 fe3a 	bl	8004a78 <__errno>
 8001e04:	4603      	mov	r3, r0
 8001e06:	220c      	movs	r2, #12
 8001e08:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 8001e0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e0e:	e009      	b.n	8001e24 <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <_sbrk+0x64>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 8001e16:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <_sbrk+0x64>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	4a05      	ldr	r2, [pc, #20]	; (8001e34 <_sbrk+0x64>)
 8001e20:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 8001e22:	68fb      	ldr	r3, [r7, #12]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	20030000 	.word	0x20030000
 8001e30:	00000400 	.word	0x00000400
 8001e34:	20000258 	.word	0x20000258
 8001e38:	200002f8 	.word	0x200002f8

08001e3c <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8001e40:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <SystemInit+0x20>)
 8001e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e46:	4a05      	ldr	r2, [pc, #20]	; (8001e5c <SystemInit+0x20>)
 8001e48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <MX_UART5_Init>:

UART_HandleTypeDef huart5;
UART_HandleTypeDef huart3;

/* UART5 init function */
void MX_UART5_Init(void) {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
    /* USER CODE END UART5_Init 0 */

    /* USER CODE BEGIN UART5_Init 1 */

    /* USER CODE END UART5_Init 1 */
    huart5.Instance = UART5;
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <MX_UART5_Init+0x4c>)
 8001e66:	4a12      	ldr	r2, [pc, #72]	; (8001eb0 <MX_UART5_Init+0x50>)
 8001e68:	601a      	str	r2, [r3, #0]
    huart5.Init.BaudRate = 115200;
 8001e6a:	4b10      	ldr	r3, [pc, #64]	; (8001eac <MX_UART5_Init+0x4c>)
 8001e6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e70:	605a      	str	r2, [r3, #4]
    huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001e72:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <MX_UART5_Init+0x4c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	609a      	str	r2, [r3, #8]
    huart5.Init.StopBits = UART_STOPBITS_1;
 8001e78:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <MX_UART5_Init+0x4c>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	60da      	str	r2, [r3, #12]
    huart5.Init.Parity = UART_PARITY_NONE;
 8001e7e:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <MX_UART5_Init+0x4c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	611a      	str	r2, [r3, #16]
    huart5.Init.Mode = UART_MODE_TX_RX;
 8001e84:	4b09      	ldr	r3, [pc, #36]	; (8001eac <MX_UART5_Init+0x4c>)
 8001e86:	220c      	movs	r2, #12
 8001e88:	615a      	str	r2, [r3, #20]
    huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e8a:	4b08      	ldr	r3, [pc, #32]	; (8001eac <MX_UART5_Init+0x4c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	619a      	str	r2, [r3, #24]
    huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <MX_UART5_Init+0x4c>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart5) != HAL_OK) {
 8001e96:	4805      	ldr	r0, [pc, #20]	; (8001eac <MX_UART5_Init+0x4c>)
 8001e98:	f001 fd39 	bl	800390e <HAL_UART_Init>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_UART5_Init+0x46>
        Error_Handler();
 8001ea2:	f7ff fe1f 	bl	8001ae4 <Error_Handler>
    }
    /* USER CODE BEGIN UART5_Init 2 */

    /* USER CODE END UART5_Init 2 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	2000025c 	.word	0x2000025c
 8001eb0:	40005000 	.word	0x40005000

08001eb4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void) {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
    /* USER CODE END USART3_Init 0 */

    /* USER CODE BEGIN USART3_Init 1 */

    /* USER CODE END USART3_Init 1 */
    huart3.Instance = USART3;
 8001eb8:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <MX_USART3_UART_Init+0x4c>)
 8001eba:	4a12      	ldr	r2, [pc, #72]	; (8001f04 <MX_USART3_UART_Init+0x50>)
 8001ebc:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate = 115200;
 8001ebe:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <MX_USART3_UART_Init+0x4c>)
 8001ec0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ec4:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <MX_USART3_UART_Init+0x4c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits = UART_STOPBITS_1;
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <MX_USART3_UART_Init+0x4c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity = UART_PARITY_NONE;
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <MX_USART3_UART_Init+0x4c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	611a      	str	r2, [r3, #16]
    huart3.Init.Mode = UART_MODE_TX_RX;
 8001ed8:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <MX_USART3_UART_Init+0x4c>)
 8001eda:	220c      	movs	r2, #12
 8001edc:	615a      	str	r2, [r3, #20]
    huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ede:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <MX_USART3_UART_Init+0x4c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	619a      	str	r2, [r3, #24]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <MX_USART3_UART_Init+0x4c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001eea:	4805      	ldr	r0, [pc, #20]	; (8001f00 <MX_USART3_UART_Init+0x4c>)
 8001eec:	f001 fd0f 	bl	800390e <HAL_UART_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_USART3_UART_Init+0x46>
        Error_Handler();
 8001ef6:	f7ff fdf5 	bl	8001ae4 <Error_Handler>
    }
    /* USER CODE BEGIN USART3_Init 2 */

    /* USER CODE END USART3_Init 2 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	200002a0 	.word	0x200002a0
 8001f04:	40004800 	.word	0x40004800

08001f08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef * uartHandle) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08c      	sub	sp, #48	; 0x30
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 031c 	add.w	r3, r7, #28
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
    if (uartHandle->Instance == UART5) {
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a46      	ldr	r2, [pc, #280]	; (8002040 <HAL_UART_MspInit+0x138>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d153      	bne.n	8001fd2 <HAL_UART_MspInit+0xca>
        /* USER CODE BEGIN UART5_MspInit 0 */

        /* USER CODE END UART5_MspInit 0 */
        /* UART5 clock enable */
        __HAL_RCC_UART5_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61bb      	str	r3, [r7, #24]
 8001f2e:	4b45      	ldr	r3, [pc, #276]	; (8002044 <HAL_UART_MspInit+0x13c>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	4a44      	ldr	r2, [pc, #272]	; (8002044 <HAL_UART_MspInit+0x13c>)
 8001f34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f38:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3a:	4b42      	ldr	r3, [pc, #264]	; (8002044 <HAL_UART_MspInit+0x13c>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f42:	61bb      	str	r3, [r7, #24]
 8001f44:	69bb      	ldr	r3, [r7, #24]

        __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	4b3e      	ldr	r3, [pc, #248]	; (8002044 <HAL_UART_MspInit+0x13c>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	4a3d      	ldr	r2, [pc, #244]	; (8002044 <HAL_UART_MspInit+0x13c>)
 8001f50:	f043 0304 	orr.w	r3, r3, #4
 8001f54:	6313      	str	r3, [r2, #48]	; 0x30
 8001f56:	4b3b      	ldr	r3, [pc, #236]	; (8002044 <HAL_UART_MspInit+0x13c>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	f003 0304 	and.w	r3, r3, #4
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	697b      	ldr	r3, [r7, #20]
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	4b37      	ldr	r3, [pc, #220]	; (8002044 <HAL_UART_MspInit+0x13c>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	4a36      	ldr	r2, [pc, #216]	; (8002044 <HAL_UART_MspInit+0x13c>)
 8001f6c:	f043 0308 	orr.w	r3, r3, #8
 8001f70:	6313      	str	r3, [r2, #48]	; 0x30
 8001f72:	4b34      	ldr	r3, [pc, #208]	; (8002044 <HAL_UART_MspInit+0x13c>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	f003 0308 	and.w	r3, r3, #8
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]
        /**UART5 GPIO Configuration
        PC12     ------> UART5_TX
        PD2     ------> UART5_RX
        */
        GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f82:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f84:	2302      	movs	r3, #2
 8001f86:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	627b      	str	r3, [r7, #36]	; 0x24
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	62bb      	str	r3, [r7, #40]	; 0x28
        GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001f90:	2308      	movs	r3, #8
 8001f92:	62fb      	str	r3, [r7, #44]	; 0x2c
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f94:	f107 031c 	add.w	r3, r7, #28
 8001f98:	4619      	mov	r1, r3
 8001f9a:	482b      	ldr	r0, [pc, #172]	; (8002048 <HAL_UART_MspInit+0x140>)
 8001f9c:	f000 fabe 	bl	800251c <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fa0:	2304      	movs	r3, #4
 8001fa2:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fac:	2303      	movs	r3, #3
 8001fae:	62bb      	str	r3, [r7, #40]	; 0x28
        GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001fb0:	2308      	movs	r3, #8
 8001fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fb4:	f107 031c 	add.w	r3, r7, #28
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4824      	ldr	r0, [pc, #144]	; (800204c <HAL_UART_MspInit+0x144>)
 8001fbc:	f000 faae 	bl	800251c <HAL_GPIO_Init>

        /* UART5 interrupt Init */
        HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	2035      	movs	r0, #53	; 0x35
 8001fc6:	f000 f9e0 	bl	800238a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001fca:	2035      	movs	r0, #53	; 0x35
 8001fcc:	f000 f9f9 	bl	80023c2 <HAL_NVIC_EnableIRQ>

        /* USER CODE BEGIN USART3_MspInit 1 */

        /* USER CODE END USART3_MspInit 1 */
    }
}
 8001fd0:	e031      	b.n	8002036 <HAL_UART_MspInit+0x12e>
    } else if (uartHandle->Instance == USART3) {
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a1e      	ldr	r2, [pc, #120]	; (8002050 <HAL_UART_MspInit+0x148>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d12c      	bne.n	8002036 <HAL_UART_MspInit+0x12e>
        __HAL_RCC_USART3_CLK_ENABLE();
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	4b18      	ldr	r3, [pc, #96]	; (8002044 <HAL_UART_MspInit+0x13c>)
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe4:	4a17      	ldr	r2, [pc, #92]	; (8002044 <HAL_UART_MspInit+0x13c>)
 8001fe6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fea:	6413      	str	r3, [r2, #64]	; 0x40
 8001fec:	4b15      	ldr	r3, [pc, #84]	; (8002044 <HAL_UART_MspInit+0x13c>)
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60bb      	str	r3, [r7, #8]
 8001ffc:	4b11      	ldr	r3, [pc, #68]	; (8002044 <HAL_UART_MspInit+0x13c>)
 8001ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002000:	4a10      	ldr	r2, [pc, #64]	; (8002044 <HAL_UART_MspInit+0x13c>)
 8002002:	f043 0308 	orr.w	r3, r3, #8
 8002006:	6313      	str	r3, [r2, #48]	; 0x30
 8002008:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <HAL_UART_MspInit+0x13c>)
 800200a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200c:	f003 0308 	and.w	r3, r3, #8
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	68bb      	ldr	r3, [r7, #8]
        GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8002014:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002018:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201a:	2302      	movs	r3, #2
 800201c:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002022:	2303      	movs	r3, #3
 8002024:	62bb      	str	r3, [r7, #40]	; 0x28
        GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002026:	2307      	movs	r3, #7
 8002028:	62fb      	str	r3, [r7, #44]	; 0x2c
        HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800202a:	f107 031c 	add.w	r3, r7, #28
 800202e:	4619      	mov	r1, r3
 8002030:	4806      	ldr	r0, [pc, #24]	; (800204c <HAL_UART_MspInit+0x144>)
 8002032:	f000 fa73 	bl	800251c <HAL_GPIO_Init>
}
 8002036:	bf00      	nop
 8002038:	3730      	adds	r7, #48	; 0x30
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40005000 	.word	0x40005000
 8002044:	40023800 	.word	0x40023800
 8002048:	40020800 	.word	0x40020800
 800204c:	40020c00 	.word	0x40020c00
 8002050:	40004800 	.word	0x40004800

08002054 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack       /* set stack pointer */
 8002054:	f8df d034 	ldr.w	sp, [pc, #52]	; 800208c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002058:	480d      	ldr	r0, [pc, #52]	; (8002090 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800205a:	490e      	ldr	r1, [pc, #56]	; (8002094 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800205c:	4a0e      	ldr	r2, [pc, #56]	; (8002098 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800205e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002060:	e002      	b.n	8002068 <LoopCopyDataInit>

08002062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002066:	3304      	adds	r3, #4

08002068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800206a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800206c:	d3f9      	bcc.n	8002062 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800206e:	4a0b      	ldr	r2, [pc, #44]	; (800209c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002070:	4c0b      	ldr	r4, [pc, #44]	; (80020a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002074:	e001      	b.n	800207a <LoopFillZerobss>

08002076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002078:	3204      	adds	r2, #4

0800207a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800207a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800207c:	d3fb      	bcc.n	8002076 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800207e:	f7ff fedd 	bl	8001e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002082:	f002 fcff 	bl	8004a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002086:	f7ff fc15 	bl	80018b4 <main>
  bx  lr
 800208a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800208c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002094:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002098:	08009bfc 	.word	0x08009bfc
  ldr r2, =_sbss
 800209c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80020a0:	200002f8 	.word	0x200002f8

080020a4 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020a4:	e7fe      	b.n	80020a4 <ADC_IRQHandler>
	...

080020a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020ac:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <HAL_Init+0x40>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a0d      	ldr	r2, [pc, #52]	; (80020e8 <HAL_Init+0x40>)
 80020b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020b8:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <HAL_Init+0x40>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a0a      	ldr	r2, [pc, #40]	; (80020e8 <HAL_Init+0x40>)
 80020be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020c4:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <HAL_Init+0x40>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a07      	ldr	r2, [pc, #28]	; (80020e8 <HAL_Init+0x40>)
 80020ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020d0:	2003      	movs	r0, #3
 80020d2:	f000 f94f 	bl	8002374 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020d6:	200f      	movs	r0, #15
 80020d8:	f000 f808 	bl	80020ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020dc:	f7ff fd8c 	bl	8001bf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40023c00 	.word	0x40023c00

080020ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020f4:	4b12      	ldr	r3, [pc, #72]	; (8002140 <HAL_InitTick+0x54>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	4b12      	ldr	r3, [pc, #72]	; (8002144 <HAL_InitTick+0x58>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	4619      	mov	r1, r3
 80020fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002102:	fbb3 f3f1 	udiv	r3, r3, r1
 8002106:	fbb2 f3f3 	udiv	r3, r2, r3
 800210a:	4618      	mov	r0, r3
 800210c:	f000 f967 	bl	80023de <HAL_SYSTICK_Config>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e00e      	b.n	8002138 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b0f      	cmp	r3, #15
 800211e:	d80a      	bhi.n	8002136 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002120:	2200      	movs	r2, #0
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002128:	f000 f92f 	bl	800238a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800212c:	4a06      	ldr	r2, [pc, #24]	; (8002148 <HAL_InitTick+0x5c>)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002132:	2300      	movs	r3, #0
 8002134:	e000      	b.n	8002138 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
}
 8002138:	4618      	mov	r0, r3
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	20000004 	.word	0x20000004
 8002144:	2000000c 	.word	0x2000000c
 8002148:	20000008 	.word	0x20000008

0800214c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002150:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_IncTick+0x20>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	461a      	mov	r2, r3
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_IncTick+0x24>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4413      	add	r3, r2
 800215c:	4a04      	ldr	r2, [pc, #16]	; (8002170 <HAL_IncTick+0x24>)
 800215e:	6013      	str	r3, [r2, #0]
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	2000000c 	.word	0x2000000c
 8002170:	200002e4 	.word	0x200002e4

08002174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  return uwTick;
 8002178:	4b03      	ldr	r3, [pc, #12]	; (8002188 <HAL_GetTick+0x14>)
 800217a:	681b      	ldr	r3, [r3, #0]
}
 800217c:	4618      	mov	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	200002e4 	.word	0x200002e4

0800218c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002194:	f7ff ffee 	bl	8002174 <HAL_GetTick>
 8002198:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021a4:	d005      	beq.n	80021b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021a6:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <HAL_Delay+0x44>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4413      	add	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021b2:	bf00      	nop
 80021b4:	f7ff ffde 	bl	8002174 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d8f7      	bhi.n	80021b4 <HAL_Delay+0x28>
  {
  }
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	2000000c 	.word	0x2000000c

080021d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021e4:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <__NVIC_SetPriorityGrouping+0x44>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021f0:	4013      	ands	r3, r2
 80021f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002206:	4a04      	ldr	r2, [pc, #16]	; (8002218 <__NVIC_SetPriorityGrouping+0x44>)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	60d3      	str	r3, [r2, #12]
}
 800220c:	bf00      	nop
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002220:	4b04      	ldr	r3, [pc, #16]	; (8002234 <__NVIC_GetPriorityGrouping+0x18>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	0a1b      	lsrs	r3, r3, #8
 8002226:	f003 0307 	and.w	r3, r3, #7
}
 800222a:	4618      	mov	r0, r3
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002246:	2b00      	cmp	r3, #0
 8002248:	db0b      	blt.n	8002262 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800224a:	79fb      	ldrb	r3, [r7, #7]
 800224c:	f003 021f 	and.w	r2, r3, #31
 8002250:	4907      	ldr	r1, [pc, #28]	; (8002270 <__NVIC_EnableIRQ+0x38>)
 8002252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002256:	095b      	lsrs	r3, r3, #5
 8002258:	2001      	movs	r0, #1
 800225a:	fa00 f202 	lsl.w	r2, r0, r2
 800225e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	e000e100 	.word	0xe000e100

08002274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	6039      	str	r1, [r7, #0]
 800227e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002284:	2b00      	cmp	r3, #0
 8002286:	db0a      	blt.n	800229e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	b2da      	uxtb	r2, r3
 800228c:	490c      	ldr	r1, [pc, #48]	; (80022c0 <__NVIC_SetPriority+0x4c>)
 800228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002292:	0112      	lsls	r2, r2, #4
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	440b      	add	r3, r1
 8002298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800229c:	e00a      	b.n	80022b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	4908      	ldr	r1, [pc, #32]	; (80022c4 <__NVIC_SetPriority+0x50>)
 80022a4:	79fb      	ldrb	r3, [r7, #7]
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	3b04      	subs	r3, #4
 80022ac:	0112      	lsls	r2, r2, #4
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	440b      	add	r3, r1
 80022b2:	761a      	strb	r2, [r3, #24]
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	e000e100 	.word	0xe000e100
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b089      	sub	sp, #36	; 0x24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f1c3 0307 	rsb	r3, r3, #7
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	bf28      	it	cs
 80022e6:	2304      	movcs	r3, #4
 80022e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	3304      	adds	r3, #4
 80022ee:	2b06      	cmp	r3, #6
 80022f0:	d902      	bls.n	80022f8 <NVIC_EncodePriority+0x30>
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	3b03      	subs	r3, #3
 80022f6:	e000      	b.n	80022fa <NVIC_EncodePriority+0x32>
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43da      	mvns	r2, r3
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	401a      	ands	r2, r3
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002310:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	fa01 f303 	lsl.w	r3, r1, r3
 800231a:	43d9      	mvns	r1, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002320:	4313      	orrs	r3, r2
         );
}
 8002322:	4618      	mov	r0, r3
 8002324:	3724      	adds	r7, #36	; 0x24
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
	...

08002330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3b01      	subs	r3, #1
 800233c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002340:	d301      	bcc.n	8002346 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002342:	2301      	movs	r3, #1
 8002344:	e00f      	b.n	8002366 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002346:	4a0a      	ldr	r2, [pc, #40]	; (8002370 <SysTick_Config+0x40>)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3b01      	subs	r3, #1
 800234c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800234e:	210f      	movs	r1, #15
 8002350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002354:	f7ff ff8e 	bl	8002274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002358:	4b05      	ldr	r3, [pc, #20]	; (8002370 <SysTick_Config+0x40>)
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800235e:	4b04      	ldr	r3, [pc, #16]	; (8002370 <SysTick_Config+0x40>)
 8002360:	2207      	movs	r2, #7
 8002362:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	e000e010 	.word	0xe000e010

08002374 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7ff ff29 	bl	80021d4 <__NVIC_SetPriorityGrouping>
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800238a:	b580      	push	{r7, lr}
 800238c:	b086      	sub	sp, #24
 800238e:	af00      	add	r7, sp, #0
 8002390:	4603      	mov	r3, r0
 8002392:	60b9      	str	r1, [r7, #8]
 8002394:	607a      	str	r2, [r7, #4]
 8002396:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800239c:	f7ff ff3e 	bl	800221c <__NVIC_GetPriorityGrouping>
 80023a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	68b9      	ldr	r1, [r7, #8]
 80023a6:	6978      	ldr	r0, [r7, #20]
 80023a8:	f7ff ff8e 	bl	80022c8 <NVIC_EncodePriority>
 80023ac:	4602      	mov	r2, r0
 80023ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023b2:	4611      	mov	r1, r2
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff ff5d 	bl	8002274 <__NVIC_SetPriority>
}
 80023ba:	bf00      	nop
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	4603      	mov	r3, r0
 80023ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff ff31 	bl	8002238 <__NVIC_EnableIRQ>
}
 80023d6:	bf00      	nop
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b082      	sub	sp, #8
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7ff ffa2 	bl	8002330 <SysTick_Config>
 80023ec:	4603      	mov	r3, r0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b084      	sub	sp, #16
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002402:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002404:	f7ff feb6 	bl	8002174 <HAL_GetTick>
 8002408:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d008      	beq.n	8002428 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2280      	movs	r2, #128	; 0x80
 800241a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e052      	b.n	80024ce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0216 	bic.w	r2, r2, #22
 8002436:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	695a      	ldr	r2, [r3, #20]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002446:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	2b00      	cmp	r3, #0
 800244e:	d103      	bne.n	8002458 <HAL_DMA_Abort+0x62>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002454:	2b00      	cmp	r3, #0
 8002456:	d007      	beq.n	8002468 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0208 	bic.w	r2, r2, #8
 8002466:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 0201 	bic.w	r2, r2, #1
 8002476:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002478:	e013      	b.n	80024a2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800247a:	f7ff fe7b 	bl	8002174 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b05      	cmp	r3, #5
 8002486:	d90c      	bls.n	80024a2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2220      	movs	r2, #32
 800248c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2203      	movs	r2, #3
 8002492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e015      	b.n	80024ce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1e4      	bne.n	800247a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b4:	223f      	movs	r2, #63	; 0x3f
 80024b6:	409a      	lsls	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d004      	beq.n	80024f4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2280      	movs	r2, #128	; 0x80
 80024ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e00c      	b.n	800250e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2205      	movs	r2, #5
 80024f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 0201 	bic.w	r2, r2, #1
 800250a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
	...

0800251c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800251c:	b480      	push	{r7}
 800251e:	b089      	sub	sp, #36	; 0x24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800252a:	2300      	movs	r3, #0
 800252c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800252e:	2300      	movs	r3, #0
 8002530:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002532:	2300      	movs	r3, #0
 8002534:	61fb      	str	r3, [r7, #28]
 8002536:	e177      	b.n	8002828 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002538:	2201      	movs	r2, #1
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	4013      	ands	r3, r2
 800254a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	429a      	cmp	r2, r3
 8002552:	f040 8166 	bne.w	8002822 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	2b01      	cmp	r3, #1
 8002560:	d005      	beq.n	800256e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800256a:	2b02      	cmp	r3, #2
 800256c:	d130      	bne.n	80025d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	2203      	movs	r2, #3
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43db      	mvns	r3, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4013      	ands	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4313      	orrs	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025a4:	2201      	movs	r2, #1
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	091b      	lsrs	r3, r3, #4
 80025ba:	f003 0201 	and.w	r2, r3, #1
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	2b03      	cmp	r3, #3
 80025da:	d017      	beq.n	800260c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	2203      	movs	r2, #3
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	43db      	mvns	r3, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4013      	ands	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d123      	bne.n	8002660 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	08da      	lsrs	r2, r3, #3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3208      	adds	r2, #8
 8002620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002624:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	220f      	movs	r2, #15
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	691a      	ldr	r2, [r3, #16]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	08da      	lsrs	r2, r3, #3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3208      	adds	r2, #8
 800265a:	69b9      	ldr	r1, [r7, #24]
 800265c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	2203      	movs	r2, #3
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 0203 	and.w	r2, r3, #3
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 80c0 	beq.w	8002822 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	4b66      	ldr	r3, [pc, #408]	; (8002840 <HAL_GPIO_Init+0x324>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026aa:	4a65      	ldr	r2, [pc, #404]	; (8002840 <HAL_GPIO_Init+0x324>)
 80026ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026b0:	6453      	str	r3, [r2, #68]	; 0x44
 80026b2:	4b63      	ldr	r3, [pc, #396]	; (8002840 <HAL_GPIO_Init+0x324>)
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026be:	4a61      	ldr	r2, [pc, #388]	; (8002844 <HAL_GPIO_Init+0x328>)
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	089b      	lsrs	r3, r3, #2
 80026c4:	3302      	adds	r3, #2
 80026c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	220f      	movs	r2, #15
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43db      	mvns	r3, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4013      	ands	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a58      	ldr	r2, [pc, #352]	; (8002848 <HAL_GPIO_Init+0x32c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d037      	beq.n	800275a <HAL_GPIO_Init+0x23e>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a57      	ldr	r2, [pc, #348]	; (800284c <HAL_GPIO_Init+0x330>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d031      	beq.n	8002756 <HAL_GPIO_Init+0x23a>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a56      	ldr	r2, [pc, #344]	; (8002850 <HAL_GPIO_Init+0x334>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d02b      	beq.n	8002752 <HAL_GPIO_Init+0x236>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a55      	ldr	r2, [pc, #340]	; (8002854 <HAL_GPIO_Init+0x338>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d025      	beq.n	800274e <HAL_GPIO_Init+0x232>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a54      	ldr	r2, [pc, #336]	; (8002858 <HAL_GPIO_Init+0x33c>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d01f      	beq.n	800274a <HAL_GPIO_Init+0x22e>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a53      	ldr	r2, [pc, #332]	; (800285c <HAL_GPIO_Init+0x340>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d019      	beq.n	8002746 <HAL_GPIO_Init+0x22a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a52      	ldr	r2, [pc, #328]	; (8002860 <HAL_GPIO_Init+0x344>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d013      	beq.n	8002742 <HAL_GPIO_Init+0x226>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a51      	ldr	r2, [pc, #324]	; (8002864 <HAL_GPIO_Init+0x348>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d00d      	beq.n	800273e <HAL_GPIO_Init+0x222>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a50      	ldr	r2, [pc, #320]	; (8002868 <HAL_GPIO_Init+0x34c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d007      	beq.n	800273a <HAL_GPIO_Init+0x21e>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a4f      	ldr	r2, [pc, #316]	; (800286c <HAL_GPIO_Init+0x350>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d101      	bne.n	8002736 <HAL_GPIO_Init+0x21a>
 8002732:	2309      	movs	r3, #9
 8002734:	e012      	b.n	800275c <HAL_GPIO_Init+0x240>
 8002736:	230a      	movs	r3, #10
 8002738:	e010      	b.n	800275c <HAL_GPIO_Init+0x240>
 800273a:	2308      	movs	r3, #8
 800273c:	e00e      	b.n	800275c <HAL_GPIO_Init+0x240>
 800273e:	2307      	movs	r3, #7
 8002740:	e00c      	b.n	800275c <HAL_GPIO_Init+0x240>
 8002742:	2306      	movs	r3, #6
 8002744:	e00a      	b.n	800275c <HAL_GPIO_Init+0x240>
 8002746:	2305      	movs	r3, #5
 8002748:	e008      	b.n	800275c <HAL_GPIO_Init+0x240>
 800274a:	2304      	movs	r3, #4
 800274c:	e006      	b.n	800275c <HAL_GPIO_Init+0x240>
 800274e:	2303      	movs	r3, #3
 8002750:	e004      	b.n	800275c <HAL_GPIO_Init+0x240>
 8002752:	2302      	movs	r3, #2
 8002754:	e002      	b.n	800275c <HAL_GPIO_Init+0x240>
 8002756:	2301      	movs	r3, #1
 8002758:	e000      	b.n	800275c <HAL_GPIO_Init+0x240>
 800275a:	2300      	movs	r3, #0
 800275c:	69fa      	ldr	r2, [r7, #28]
 800275e:	f002 0203 	and.w	r2, r2, #3
 8002762:	0092      	lsls	r2, r2, #2
 8002764:	4093      	lsls	r3, r2
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4313      	orrs	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800276c:	4935      	ldr	r1, [pc, #212]	; (8002844 <HAL_GPIO_Init+0x328>)
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	089b      	lsrs	r3, r3, #2
 8002772:	3302      	adds	r3, #2
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800277a:	4b3d      	ldr	r3, [pc, #244]	; (8002870 <HAL_GPIO_Init+0x354>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	43db      	mvns	r3, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4013      	ands	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800279e:	4a34      	ldr	r2, [pc, #208]	; (8002870 <HAL_GPIO_Init+0x354>)
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027a4:	4b32      	ldr	r3, [pc, #200]	; (8002870 <HAL_GPIO_Init+0x354>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	43db      	mvns	r3, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4013      	ands	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027c8:	4a29      	ldr	r2, [pc, #164]	; (8002870 <HAL_GPIO_Init+0x354>)
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027ce:	4b28      	ldr	r3, [pc, #160]	; (8002870 <HAL_GPIO_Init+0x354>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	43db      	mvns	r3, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4013      	ands	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027f2:	4a1f      	ldr	r2, [pc, #124]	; (8002870 <HAL_GPIO_Init+0x354>)
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027f8:	4b1d      	ldr	r3, [pc, #116]	; (8002870 <HAL_GPIO_Init+0x354>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	4313      	orrs	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800281c:	4a14      	ldr	r2, [pc, #80]	; (8002870 <HAL_GPIO_Init+0x354>)
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3301      	adds	r3, #1
 8002826:	61fb      	str	r3, [r7, #28]
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	2b0f      	cmp	r3, #15
 800282c:	f67f ae84 	bls.w	8002538 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002830:	bf00      	nop
 8002832:	bf00      	nop
 8002834:	3724      	adds	r7, #36	; 0x24
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	40023800 	.word	0x40023800
 8002844:	40013800 	.word	0x40013800
 8002848:	40020000 	.word	0x40020000
 800284c:	40020400 	.word	0x40020400
 8002850:	40020800 	.word	0x40020800
 8002854:	40020c00 	.word	0x40020c00
 8002858:	40021000 	.word	0x40021000
 800285c:	40021400 	.word	0x40021400
 8002860:	40021800 	.word	0x40021800
 8002864:	40021c00 	.word	0x40021c00
 8002868:	40022000 	.word	0x40022000
 800286c:	40022400 	.word	0x40022400
 8002870:	40013c00 	.word	0x40013c00

08002874 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e267      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d075      	beq.n	800297e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002892:	4b88      	ldr	r3, [pc, #544]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 030c 	and.w	r3, r3, #12
 800289a:	2b04      	cmp	r3, #4
 800289c:	d00c      	beq.n	80028b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800289e:	4b85      	ldr	r3, [pc, #532]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	d112      	bne.n	80028d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028aa:	4b82      	ldr	r3, [pc, #520]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028b6:	d10b      	bne.n	80028d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b8:	4b7e      	ldr	r3, [pc, #504]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d05b      	beq.n	800297c <HAL_RCC_OscConfig+0x108>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d157      	bne.n	800297c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e242      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d8:	d106      	bne.n	80028e8 <HAL_RCC_OscConfig+0x74>
 80028da:	4b76      	ldr	r3, [pc, #472]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a75      	ldr	r2, [pc, #468]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	e01d      	b.n	8002924 <HAL_RCC_OscConfig+0xb0>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028f0:	d10c      	bne.n	800290c <HAL_RCC_OscConfig+0x98>
 80028f2:	4b70      	ldr	r3, [pc, #448]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a6f      	ldr	r2, [pc, #444]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	4b6d      	ldr	r3, [pc, #436]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a6c      	ldr	r2, [pc, #432]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	e00b      	b.n	8002924 <HAL_RCC_OscConfig+0xb0>
 800290c:	4b69      	ldr	r3, [pc, #420]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a68      	ldr	r2, [pc, #416]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	4b66      	ldr	r3, [pc, #408]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a65      	ldr	r2, [pc, #404]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 800291e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d013      	beq.n	8002954 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292c:	f7ff fc22 	bl	8002174 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002934:	f7ff fc1e 	bl	8002174 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b64      	cmp	r3, #100	; 0x64
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e207      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002946:	4b5b      	ldr	r3, [pc, #364]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0xc0>
 8002952:	e014      	b.n	800297e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7ff fc0e 	bl	8002174 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800295c:	f7ff fc0a 	bl	8002174 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b64      	cmp	r3, #100	; 0x64
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e1f3      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800296e:	4b51      	ldr	r3, [pc, #324]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f0      	bne.n	800295c <HAL_RCC_OscConfig+0xe8>
 800297a:	e000      	b.n	800297e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800297c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d063      	beq.n	8002a52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800298a:	4b4a      	ldr	r3, [pc, #296]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 030c 	and.w	r3, r3, #12
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00b      	beq.n	80029ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002996:	4b47      	ldr	r3, [pc, #284]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d11c      	bne.n	80029dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029a2:	4b44      	ldr	r3, [pc, #272]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d116      	bne.n	80029dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ae:	4b41      	ldr	r3, [pc, #260]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d005      	beq.n	80029c6 <HAL_RCC_OscConfig+0x152>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d001      	beq.n	80029c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e1c7      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c6:	4b3b      	ldr	r3, [pc, #236]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	4937      	ldr	r1, [pc, #220]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029da:	e03a      	b.n	8002a52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d020      	beq.n	8002a26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029e4:	4b34      	ldr	r3, [pc, #208]	; (8002ab8 <HAL_RCC_OscConfig+0x244>)
 80029e6:	2201      	movs	r2, #1
 80029e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ea:	f7ff fbc3 	bl	8002174 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029f2:	f7ff fbbf 	bl	8002174 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e1a8      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a04:	4b2b      	ldr	r3, [pc, #172]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0f0      	beq.n	80029f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a10:	4b28      	ldr	r3, [pc, #160]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4925      	ldr	r1, [pc, #148]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	600b      	str	r3, [r1, #0]
 8002a24:	e015      	b.n	8002a52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a26:	4b24      	ldr	r3, [pc, #144]	; (8002ab8 <HAL_RCC_OscConfig+0x244>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2c:	f7ff fba2 	bl	8002174 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a34:	f7ff fb9e 	bl	8002174 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e187      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a46:	4b1b      	ldr	r3, [pc, #108]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d036      	beq.n	8002acc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d016      	beq.n	8002a94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a66:	4b15      	ldr	r3, [pc, #84]	; (8002abc <HAL_RCC_OscConfig+0x248>)
 8002a68:	2201      	movs	r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6c:	f7ff fb82 	bl	8002174 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a74:	f7ff fb7e 	bl	8002174 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e167      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a86:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0f0      	beq.n	8002a74 <HAL_RCC_OscConfig+0x200>
 8002a92:	e01b      	b.n	8002acc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a94:	4b09      	ldr	r3, [pc, #36]	; (8002abc <HAL_RCC_OscConfig+0x248>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a9a:	f7ff fb6b 	bl	8002174 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa0:	e00e      	b.n	8002ac0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aa2:	f7ff fb67 	bl	8002174 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d907      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e150      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	42470000 	.word	0x42470000
 8002abc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac0:	4b88      	ldr	r3, [pc, #544]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1ea      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 8097 	beq.w	8002c08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ada:	2300      	movs	r3, #0
 8002adc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ade:	4b81      	ldr	r3, [pc, #516]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10f      	bne.n	8002b0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	4b7d      	ldr	r3, [pc, #500]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	4a7c      	ldr	r2, [pc, #496]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af8:	6413      	str	r3, [r2, #64]	; 0x40
 8002afa:	4b7a      	ldr	r3, [pc, #488]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b02:	60bb      	str	r3, [r7, #8]
 8002b04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b06:	2301      	movs	r3, #1
 8002b08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0a:	4b77      	ldr	r3, [pc, #476]	; (8002ce8 <HAL_RCC_OscConfig+0x474>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d118      	bne.n	8002b48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b16:	4b74      	ldr	r3, [pc, #464]	; (8002ce8 <HAL_RCC_OscConfig+0x474>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a73      	ldr	r2, [pc, #460]	; (8002ce8 <HAL_RCC_OscConfig+0x474>)
 8002b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b22:	f7ff fb27 	bl	8002174 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b2a:	f7ff fb23 	bl	8002174 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e10c      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3c:	4b6a      	ldr	r3, [pc, #424]	; (8002ce8 <HAL_RCC_OscConfig+0x474>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0f0      	beq.n	8002b2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d106      	bne.n	8002b5e <HAL_RCC_OscConfig+0x2ea>
 8002b50:	4b64      	ldr	r3, [pc, #400]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b54:	4a63      	ldr	r2, [pc, #396]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b5c:	e01c      	b.n	8002b98 <HAL_RCC_OscConfig+0x324>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2b05      	cmp	r3, #5
 8002b64:	d10c      	bne.n	8002b80 <HAL_RCC_OscConfig+0x30c>
 8002b66:	4b5f      	ldr	r3, [pc, #380]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6a:	4a5e      	ldr	r2, [pc, #376]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b6c:	f043 0304 	orr.w	r3, r3, #4
 8002b70:	6713      	str	r3, [r2, #112]	; 0x70
 8002b72:	4b5c      	ldr	r3, [pc, #368]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b76:	4a5b      	ldr	r2, [pc, #364]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b7e:	e00b      	b.n	8002b98 <HAL_RCC_OscConfig+0x324>
 8002b80:	4b58      	ldr	r3, [pc, #352]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b84:	4a57      	ldr	r2, [pc, #348]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b86:	f023 0301 	bic.w	r3, r3, #1
 8002b8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b8c:	4b55      	ldr	r3, [pc, #340]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b90:	4a54      	ldr	r2, [pc, #336]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b92:	f023 0304 	bic.w	r3, r3, #4
 8002b96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d015      	beq.n	8002bcc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba0:	f7ff fae8 	bl	8002174 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba6:	e00a      	b.n	8002bbe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ba8:	f7ff fae4 	bl	8002174 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e0cb      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bbe:	4b49      	ldr	r3, [pc, #292]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0ee      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x334>
 8002bca:	e014      	b.n	8002bf6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bcc:	f7ff fad2 	bl	8002174 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd2:	e00a      	b.n	8002bea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd4:	f7ff face 	bl	8002174 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e0b5      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bea:	4b3e      	ldr	r3, [pc, #248]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1ee      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bf6:	7dfb      	ldrb	r3, [r7, #23]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d105      	bne.n	8002c08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bfc:	4b39      	ldr	r3, [pc, #228]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	4a38      	ldr	r2, [pc, #224]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002c02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 80a1 	beq.w	8002d54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c12:	4b34      	ldr	r3, [pc, #208]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 030c 	and.w	r3, r3, #12
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d05c      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d141      	bne.n	8002caa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c26:	4b31      	ldr	r3, [pc, #196]	; (8002cec <HAL_RCC_OscConfig+0x478>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2c:	f7ff faa2 	bl	8002174 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c34:	f7ff fa9e 	bl	8002174 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e087      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c46:	4b27      	ldr	r3, [pc, #156]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f0      	bne.n	8002c34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69da      	ldr	r2, [r3, #28]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	019b      	lsls	r3, r3, #6
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c68:	085b      	lsrs	r3, r3, #1
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	041b      	lsls	r3, r3, #16
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c74:	061b      	lsls	r3, r3, #24
 8002c76:	491b      	ldr	r1, [pc, #108]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c7c:	4b1b      	ldr	r3, [pc, #108]	; (8002cec <HAL_RCC_OscConfig+0x478>)
 8002c7e:	2201      	movs	r2, #1
 8002c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c82:	f7ff fa77 	bl	8002174 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c8a:	f7ff fa73 	bl	8002174 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e05c      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c9c:	4b11      	ldr	r3, [pc, #68]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0f0      	beq.n	8002c8a <HAL_RCC_OscConfig+0x416>
 8002ca8:	e054      	b.n	8002d54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002caa:	4b10      	ldr	r3, [pc, #64]	; (8002cec <HAL_RCC_OscConfig+0x478>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb0:	f7ff fa60 	bl	8002174 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cb8:	f7ff fa5c 	bl	8002174 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e045      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cca:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x444>
 8002cd6:	e03d      	b.n	8002d54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d107      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e038      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	40007000 	.word	0x40007000
 8002cec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cf0:	4b1b      	ldr	r3, [pc, #108]	; (8002d60 <HAL_RCC_OscConfig+0x4ec>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d028      	beq.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d121      	bne.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d11a      	bne.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d20:	4013      	ands	r3, r2
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d111      	bne.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d36:	085b      	lsrs	r3, r3, #1
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d107      	bne.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d001      	beq.n	8002d54 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e000      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3718      	adds	r7, #24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40023800 	.word	0x40023800

08002d64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e0cc      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d78:	4b68      	ldr	r3, [pc, #416]	; (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 030f 	and.w	r3, r3, #15
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d90c      	bls.n	8002da0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d86:	4b65      	ldr	r3, [pc, #404]	; (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8e:	4b63      	ldr	r3, [pc, #396]	; (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d001      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e0b8      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d020      	beq.n	8002dee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d005      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002db8:	4b59      	ldr	r3, [pc, #356]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	4a58      	ldr	r2, [pc, #352]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0308 	and.w	r3, r3, #8
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dd0:	4b53      	ldr	r3, [pc, #332]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	4a52      	ldr	r2, [pc, #328]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ddc:	4b50      	ldr	r3, [pc, #320]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	494d      	ldr	r1, [pc, #308]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d044      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d107      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e02:	4b47      	ldr	r3, [pc, #284]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d119      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e07f      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d003      	beq.n	8002e22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e1e:	2b03      	cmp	r3, #3
 8002e20:	d107      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e22:	4b3f      	ldr	r3, [pc, #252]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d109      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e06f      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e32:	4b3b      	ldr	r3, [pc, #236]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e067      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e42:	4b37      	ldr	r3, [pc, #220]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f023 0203 	bic.w	r2, r3, #3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	4934      	ldr	r1, [pc, #208]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e54:	f7ff f98e 	bl	8002174 <HAL_GetTick>
 8002e58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5a:	e00a      	b.n	8002e72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e5c:	f7ff f98a 	bl	8002174 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e04f      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e72:	4b2b      	ldr	r3, [pc, #172]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 020c 	and.w	r2, r3, #12
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d1eb      	bne.n	8002e5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e84:	4b25      	ldr	r3, [pc, #148]	; (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 030f 	and.w	r3, r3, #15
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d20c      	bcs.n	8002eac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e92:	4b22      	ldr	r3, [pc, #136]	; (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9a:	4b20      	ldr	r3, [pc, #128]	; (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d001      	beq.n	8002eac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e032      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d008      	beq.n	8002eca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eb8:	4b19      	ldr	r3, [pc, #100]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	4916      	ldr	r1, [pc, #88]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d009      	beq.n	8002eea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ed6:	4b12      	ldr	r3, [pc, #72]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	490e      	ldr	r1, [pc, #56]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002eea:	f000 f821 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	091b      	lsrs	r3, r3, #4
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	490a      	ldr	r1, [pc, #40]	; (8002f24 <HAL_RCC_ClockConfig+0x1c0>)
 8002efc:	5ccb      	ldrb	r3, [r1, r3]
 8002efe:	fa22 f303 	lsr.w	r3, r2, r3
 8002f02:	4a09      	ldr	r2, [pc, #36]	; (8002f28 <HAL_RCC_ClockConfig+0x1c4>)
 8002f04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f06:	4b09      	ldr	r3, [pc, #36]	; (8002f2c <HAL_RCC_ClockConfig+0x1c8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff f8ee 	bl	80020ec <HAL_InitTick>

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40023c00 	.word	0x40023c00
 8002f20:	40023800 	.word	0x40023800
 8002f24:	08009724 	.word	0x08009724
 8002f28:	20000004 	.word	0x20000004
 8002f2c:	20000008 	.word	0x20000008

08002f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f34:	b090      	sub	sp, #64	; 0x40
 8002f36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	637b      	str	r3, [r7, #52]	; 0x34
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f40:	2300      	movs	r3, #0
 8002f42:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f48:	4b59      	ldr	r3, [pc, #356]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 030c 	and.w	r3, r3, #12
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d00d      	beq.n	8002f70 <HAL_RCC_GetSysClockFreq+0x40>
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	f200 80a1 	bhi.w	800309c <HAL_RCC_GetSysClockFreq+0x16c>
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0x34>
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d003      	beq.n	8002f6a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f62:	e09b      	b.n	800309c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f64:	4b53      	ldr	r3, [pc, #332]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f66:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002f68:	e09b      	b.n	80030a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f6a:	4b53      	ldr	r3, [pc, #332]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f6c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f6e:	e098      	b.n	80030a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f70:	4b4f      	ldr	r3, [pc, #316]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f78:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f7a:	4b4d      	ldr	r3, [pc, #308]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d028      	beq.n	8002fd8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f86:	4b4a      	ldr	r3, [pc, #296]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	099b      	lsrs	r3, r3, #6
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	623b      	str	r3, [r7, #32]
 8002f90:	627a      	str	r2, [r7, #36]	; 0x24
 8002f92:	6a3b      	ldr	r3, [r7, #32]
 8002f94:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f98:	2100      	movs	r1, #0
 8002f9a:	4b47      	ldr	r3, [pc, #284]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f9c:	fb03 f201 	mul.w	r2, r3, r1
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	fb00 f303 	mul.w	r3, r0, r3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	4a43      	ldr	r2, [pc, #268]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002faa:	fba0 1202 	umull	r1, r2, r0, r2
 8002fae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fb0:	460a      	mov	r2, r1
 8002fb2:	62ba      	str	r2, [r7, #40]	; 0x28
 8002fb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fb6:	4413      	add	r3, r2
 8002fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	61bb      	str	r3, [r7, #24]
 8002fc0:	61fa      	str	r2, [r7, #28]
 8002fc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fc6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002fca:	f7fd fe6d 	bl	8000ca8 <__aeabi_uldivmod>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fd6:	e053      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fd8:	4b35      	ldr	r3, [pc, #212]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	099b      	lsrs	r3, r3, #6
 8002fde:	2200      	movs	r2, #0
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	617a      	str	r2, [r7, #20]
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002fea:	f04f 0b00 	mov.w	fp, #0
 8002fee:	4652      	mov	r2, sl
 8002ff0:	465b      	mov	r3, fp
 8002ff2:	f04f 0000 	mov.w	r0, #0
 8002ff6:	f04f 0100 	mov.w	r1, #0
 8002ffa:	0159      	lsls	r1, r3, #5
 8002ffc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003000:	0150      	lsls	r0, r2, #5
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	ebb2 080a 	subs.w	r8, r2, sl
 800300a:	eb63 090b 	sbc.w	r9, r3, fp
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	f04f 0300 	mov.w	r3, #0
 8003016:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800301a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800301e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003022:	ebb2 0408 	subs.w	r4, r2, r8
 8003026:	eb63 0509 	sbc.w	r5, r3, r9
 800302a:	f04f 0200 	mov.w	r2, #0
 800302e:	f04f 0300 	mov.w	r3, #0
 8003032:	00eb      	lsls	r3, r5, #3
 8003034:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003038:	00e2      	lsls	r2, r4, #3
 800303a:	4614      	mov	r4, r2
 800303c:	461d      	mov	r5, r3
 800303e:	eb14 030a 	adds.w	r3, r4, sl
 8003042:	603b      	str	r3, [r7, #0]
 8003044:	eb45 030b 	adc.w	r3, r5, fp
 8003048:	607b      	str	r3, [r7, #4]
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003056:	4629      	mov	r1, r5
 8003058:	028b      	lsls	r3, r1, #10
 800305a:	4621      	mov	r1, r4
 800305c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003060:	4621      	mov	r1, r4
 8003062:	028a      	lsls	r2, r1, #10
 8003064:	4610      	mov	r0, r2
 8003066:	4619      	mov	r1, r3
 8003068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800306a:	2200      	movs	r2, #0
 800306c:	60bb      	str	r3, [r7, #8]
 800306e:	60fa      	str	r2, [r7, #12]
 8003070:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003074:	f7fd fe18 	bl	8000ca8 <__aeabi_uldivmod>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4613      	mov	r3, r2
 800307e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003080:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	0c1b      	lsrs	r3, r3, #16
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	3301      	adds	r3, #1
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003090:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003094:	fbb2 f3f3 	udiv	r3, r2, r3
 8003098:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800309a:	e002      	b.n	80030a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800309c:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800309e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3740      	adds	r7, #64	; 0x40
 80030a8:	46bd      	mov	sp, r7
 80030aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ae:	bf00      	nop
 80030b0:	40023800 	.word	0x40023800
 80030b4:	00f42400 	.word	0x00f42400
 80030b8:	017d7840 	.word	0x017d7840

080030bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c0:	4b03      	ldr	r3, [pc, #12]	; (80030d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030c2:	681b      	ldr	r3, [r3, #0]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	20000004 	.word	0x20000004

080030d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030d8:	f7ff fff0 	bl	80030bc <HAL_RCC_GetHCLKFreq>
 80030dc:	4602      	mov	r2, r0
 80030de:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	0a9b      	lsrs	r3, r3, #10
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	4903      	ldr	r1, [pc, #12]	; (80030f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ea:	5ccb      	ldrb	r3, [r1, r3]
 80030ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40023800 	.word	0x40023800
 80030f8:	08009734 	.word	0x08009734

080030fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003100:	f7ff ffdc 	bl	80030bc <HAL_RCC_GetHCLKFreq>
 8003104:	4602      	mov	r2, r0
 8003106:	4b05      	ldr	r3, [pc, #20]	; (800311c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	0b5b      	lsrs	r3, r3, #13
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	4903      	ldr	r1, [pc, #12]	; (8003120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003112:	5ccb      	ldrb	r3, [r1, r3]
 8003114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003118:	4618      	mov	r0, r3
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40023800 	.word	0x40023800
 8003120:	08009734 	.word	0x08009734

08003124 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800312c:	2300      	movs	r3, #0
 800312e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003130:	2300      	movs	r3, #0
 8003132:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10b      	bne.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003148:	2b00      	cmp	r3, #0
 800314a:	d105      	bne.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003154:	2b00      	cmp	r3, #0
 8003156:	d075      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003158:	4b91      	ldr	r3, [pc, #580]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800315a:	2200      	movs	r2, #0
 800315c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800315e:	f7ff f809 	bl	8002174 <HAL_GetTick>
 8003162:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003164:	e008      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003166:	f7ff f805 	bl	8002174 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d901      	bls.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e189      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003178:	4b8a      	ldr	r3, [pc, #552]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1f0      	bne.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d009      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	019a      	lsls	r2, r3, #6
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	071b      	lsls	r3, r3, #28
 800319c:	4981      	ldr	r1, [pc, #516]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d01f      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031b0:	4b7c      	ldr	r3, [pc, #496]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80031b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031b6:	0f1b      	lsrs	r3, r3, #28
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	019a      	lsls	r2, r3, #6
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	061b      	lsls	r3, r3, #24
 80031ca:	431a      	orrs	r2, r3
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	071b      	lsls	r3, r3, #28
 80031d0:	4974      	ldr	r1, [pc, #464]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80031d8:	4b72      	ldr	r3, [pc, #456]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80031da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031de:	f023 021f 	bic.w	r2, r3, #31
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	3b01      	subs	r3, #1
 80031e8:	496e      	ldr	r1, [pc, #440]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00d      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	019a      	lsls	r2, r3, #6
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	061b      	lsls	r3, r3, #24
 8003208:	431a      	orrs	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	071b      	lsls	r3, r3, #28
 8003210:	4964      	ldr	r1, [pc, #400]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003212:	4313      	orrs	r3, r2
 8003214:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003218:	4b61      	ldr	r3, [pc, #388]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800321a:	2201      	movs	r2, #1
 800321c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800321e:	f7fe ffa9 	bl	8002174 <HAL_GetTick>
 8003222:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003224:	e008      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003226:	f7fe ffa5 	bl	8002174 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e129      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003238:	4b5a      	ldr	r3, [pc, #360]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0f0      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	d105      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003258:	2b00      	cmp	r3, #0
 800325a:	d079      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800325c:	4b52      	ldr	r3, [pc, #328]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003262:	f7fe ff87 	bl	8002174 <HAL_GetTick>
 8003266:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003268:	e008      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800326a:	f7fe ff83 	bl	8002174 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e107      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800327c:	4b49      	ldr	r3, [pc, #292]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003284:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003288:	d0ef      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0304 	and.w	r3, r3, #4
 8003292:	2b00      	cmp	r3, #0
 8003294:	d020      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003296:	4b43      	ldr	r3, [pc, #268]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329c:	0f1b      	lsrs	r3, r3, #28
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	019a      	lsls	r2, r3, #6
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	061b      	lsls	r3, r3, #24
 80032b0:	431a      	orrs	r2, r3
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	071b      	lsls	r3, r3, #28
 80032b6:	493b      	ldr	r1, [pc, #236]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80032be:	4b39      	ldr	r3, [pc, #228]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80032c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032c4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	3b01      	subs	r3, #1
 80032ce:	021b      	lsls	r3, r3, #8
 80032d0:	4934      	ldr	r1, [pc, #208]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d01e      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032e4:	4b2f      	ldr	r3, [pc, #188]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80032e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ea:	0e1b      	lsrs	r3, r3, #24
 80032ec:	f003 030f 	and.w	r3, r3, #15
 80032f0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	019a      	lsls	r2, r3, #6
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	061b      	lsls	r3, r3, #24
 80032fc:	431a      	orrs	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	071b      	lsls	r3, r3, #28
 8003304:	4927      	ldr	r1, [pc, #156]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003306:	4313      	orrs	r3, r2
 8003308:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800330c:	4b25      	ldr	r3, [pc, #148]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800330e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003312:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	4922      	ldr	r1, [pc, #136]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800331c:	4313      	orrs	r3, r2
 800331e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003322:	4b21      	ldr	r3, [pc, #132]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003324:	2201      	movs	r2, #1
 8003326:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003328:	f7fe ff24 	bl	8002174 <HAL_GetTick>
 800332c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800332e:	e008      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003330:	f7fe ff20 	bl	8002174 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e0a4      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003342:	4b18      	ldr	r3, [pc, #96]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800334a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800334e:	d1ef      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0320 	and.w	r3, r3, #32
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 808b 	beq.w	8003474 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800335e:	2300      	movs	r3, #0
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	4b10      	ldr	r3, [pc, #64]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	4a0f      	ldr	r2, [pc, #60]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800336c:	6413      	str	r3, [r2, #64]	; 0x40
 800336e:	4b0d      	ldr	r3, [pc, #52]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800337a:	4b0c      	ldr	r3, [pc, #48]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a0b      	ldr	r2, [pc, #44]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003384:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003386:	f7fe fef5 	bl	8002174 <HAL_GetTick>
 800338a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800338c:	e010      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800338e:	f7fe fef1 	bl	8002174 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d909      	bls.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e075      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x368>
 80033a0:	42470068 	.word	0x42470068
 80033a4:	40023800 	.word	0x40023800
 80033a8:	42470070 	.word	0x42470070
 80033ac:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80033b0:	4b38      	ldr	r3, [pc, #224]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0e8      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033bc:	4b36      	ldr	r3, [pc, #216]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80033be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033c4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d02f      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d028      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033da:	4b2f      	ldr	r3, [pc, #188]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80033dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033e4:	4b2d      	ldr	r3, [pc, #180]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80033e6:	2201      	movs	r2, #1
 80033e8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033ea:	4b2c      	ldr	r3, [pc, #176]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80033f0:	4a29      	ldr	r2, [pc, #164]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80033f6:	4b28      	ldr	r3, [pc, #160]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80033f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d114      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003402:	f7fe feb7 	bl	8002174 <HAL_GetTick>
 8003406:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003408:	e00a      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800340a:	f7fe feb3 	bl	8002174 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	f241 3288 	movw	r2, #5000	; 0x1388
 8003418:	4293      	cmp	r3, r2
 800341a:	d901      	bls.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e035      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003420:	4b1d      	ldr	r3, [pc, #116]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0ee      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003430:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003434:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003438:	d10d      	bne.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800343a:	4b17      	ldr	r3, [pc, #92]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003446:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800344a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800344e:	4912      	ldr	r1, [pc, #72]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003450:	4313      	orrs	r3, r2
 8003452:	608b      	str	r3, [r1, #8]
 8003454:	e005      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003456:	4b10      	ldr	r3, [pc, #64]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	4a0f      	ldr	r2, [pc, #60]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800345c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003460:	6093      	str	r3, [r2, #8]
 8003462:	4b0d      	ldr	r3, [pc, #52]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003464:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800346e:	490a      	ldr	r1, [pc, #40]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003470:	4313      	orrs	r3, r2
 8003472:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0310 	and.w	r3, r3, #16
 800347c:	2b00      	cmp	r3, #0
 800347e:	d004      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003486:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8003488:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40007000 	.word	0x40007000
 8003498:	40023800 	.word	0x40023800
 800349c:	42470e40 	.word	0x42470e40
 80034a0:	424711e0 	.word	0x424711e0

080034a4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e066      	b.n	8003588 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	7f5b      	ldrb	r3, [r3, #29]
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d105      	bne.n	80034d0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7fe fb6a 	bl	8001ba4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2202      	movs	r2, #2
 80034d4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	22ca      	movs	r2, #202	; 0xca
 80034dc:	625a      	str	r2, [r3, #36]	; 0x24
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2253      	movs	r2, #83	; 0x53
 80034e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f998 	bl	800381c <RTC_EnterInitMode>
 80034ec:	4603      	mov	r3, r0
 80034ee:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d12c      	bne.n	8003550 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6812      	ldr	r2, [r2, #0]
 8003500:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003504:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003508:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6899      	ldr	r1, [r3, #8]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	431a      	orrs	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	68d2      	ldr	r2, [r2, #12]
 8003530:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6919      	ldr	r1, [r3, #16]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	041a      	lsls	r2, r3, #16
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f99f 	bl	800388a <RTC_ExitInitMode>
 800354c:	4603      	mov	r3, r0
 800354e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003550:	7bfb      	ldrb	r3, [r7, #15]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d113      	bne.n	800357e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003564:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	699a      	ldr	r2, [r3, #24]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	22ff      	movs	r2, #255	; 0xff
 8003584:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003586:	7bfb      	ldrb	r3, [r7, #15]
}
 8003588:	4618      	mov	r0, r3
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003590:	b590      	push	{r4, r7, lr}
 8003592:	b087      	sub	sp, #28
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	7f1b      	ldrb	r3, [r3, #28]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <HAL_RTC_SetTime+0x1c>
 80035a8:	2302      	movs	r3, #2
 80035aa:	e087      	b.n	80036bc <HAL_RTC_SetTime+0x12c>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2201      	movs	r2, #1
 80035b0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2202      	movs	r2, #2
 80035b6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d126      	bne.n	800360c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d102      	bne.n	80035d2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2200      	movs	r2, #0
 80035d0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 f97c 	bl	80038d4 <RTC_ByteToBcd2>
 80035dc:	4603      	mov	r3, r0
 80035de:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	785b      	ldrb	r3, [r3, #1]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f000 f975 	bl	80038d4 <RTC_ByteToBcd2>
 80035ea:	4603      	mov	r3, r0
 80035ec:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80035ee:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	789b      	ldrb	r3, [r3, #2]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 f96d 	bl	80038d4 <RTC_ByteToBcd2>
 80035fa:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80035fc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	78db      	ldrb	r3, [r3, #3]
 8003604:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003606:	4313      	orrs	r3, r2
 8003608:	617b      	str	r3, [r7, #20]
 800360a:	e018      	b.n	800363e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003616:	2b00      	cmp	r3, #0
 8003618:	d102      	bne.n	8003620 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	2200      	movs	r2, #0
 800361e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	785b      	ldrb	r3, [r3, #1]
 800362a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800362c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003632:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	78db      	ldrb	r3, [r3, #3]
 8003638:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800363a:	4313      	orrs	r3, r2
 800363c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	22ca      	movs	r2, #202	; 0xca
 8003644:	625a      	str	r2, [r3, #36]	; 0x24
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2253      	movs	r2, #83	; 0x53
 800364c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 f8e4 	bl	800381c <RTC_EnterInitMode>
 8003654:	4603      	mov	r3, r0
 8003656:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003658:	7cfb      	ldrb	r3, [r7, #19]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d120      	bne.n	80036a0 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003668:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800366c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800367c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6899      	ldr	r1, [r3, #8]
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	68da      	ldr	r2, [r3, #12]
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	431a      	orrs	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f000 f8f7 	bl	800388a <RTC_ExitInitMode>
 800369c:	4603      	mov	r3, r0
 800369e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80036a0:	7cfb      	ldrb	r3, [r7, #19]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d102      	bne.n	80036ac <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2201      	movs	r2, #1
 80036aa:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	22ff      	movs	r2, #255	; 0xff
 80036b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	771a      	strb	r2, [r3, #28]

  return status;
 80036ba:	7cfb      	ldrb	r3, [r7, #19]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	371c      	adds	r7, #28
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd90      	pop	{r4, r7, pc}

080036c4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80036c4:	b590      	push	{r4, r7, lr}
 80036c6:	b087      	sub	sp, #28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	7f1b      	ldrb	r3, [r3, #28]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d101      	bne.n	80036e0 <HAL_RTC_SetDate+0x1c>
 80036dc:	2302      	movs	r3, #2
 80036de:	e071      	b.n	80037c4 <HAL_RTC_SetDate+0x100>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2201      	movs	r2, #1
 80036e4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2202      	movs	r2, #2
 80036ea:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10e      	bne.n	8003710 <HAL_RTC_SetDate+0x4c>
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	785b      	ldrb	r3, [r3, #1]
 80036f6:	f003 0310 	and.w	r3, r3, #16
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d008      	beq.n	8003710 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	785b      	ldrb	r3, [r3, #1]
 8003702:	f023 0310 	bic.w	r3, r3, #16
 8003706:	b2db      	uxtb	r3, r3
 8003708:	330a      	adds	r3, #10
 800370a:	b2da      	uxtb	r2, r3
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d11c      	bne.n	8003750 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	78db      	ldrb	r3, [r3, #3]
 800371a:	4618      	mov	r0, r3
 800371c:	f000 f8da 	bl	80038d4 <RTC_ByteToBcd2>
 8003720:	4603      	mov	r3, r0
 8003722:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	785b      	ldrb	r3, [r3, #1]
 8003728:	4618      	mov	r0, r3
 800372a:	f000 f8d3 	bl	80038d4 <RTC_ByteToBcd2>
 800372e:	4603      	mov	r3, r0
 8003730:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003732:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	789b      	ldrb	r3, [r3, #2]
 8003738:	4618      	mov	r0, r3
 800373a:	f000 f8cb 	bl	80038d4 <RTC_ByteToBcd2>
 800373e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003740:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800374a:	4313      	orrs	r3, r2
 800374c:	617b      	str	r3, [r7, #20]
 800374e:	e00e      	b.n	800376e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	78db      	ldrb	r3, [r3, #3]
 8003754:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	785b      	ldrb	r3, [r3, #1]
 800375a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800375c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003762:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800376a:	4313      	orrs	r3, r2
 800376c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	22ca      	movs	r2, #202	; 0xca
 8003774:	625a      	str	r2, [r3, #36]	; 0x24
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2253      	movs	r2, #83	; 0x53
 800377c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 f84c 	bl	800381c <RTC_EnterInitMode>
 8003784:	4603      	mov	r3, r0
 8003786:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003788:	7cfb      	ldrb	r3, [r7, #19]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10c      	bne.n	80037a8 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003798:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800379c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 f873 	bl	800388a <RTC_ExitInitMode>
 80037a4:	4603      	mov	r3, r0
 80037a6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80037a8:	7cfb      	ldrb	r3, [r7, #19]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d102      	bne.n	80037b4 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2201      	movs	r2, #1
 80037b2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	22ff      	movs	r2, #255	; 0xff
 80037ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	771a      	strb	r2, [r3, #28]

  return status;
 80037c2:	7cfb      	ldrb	r3, [r7, #19]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	371c      	adds	r7, #28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd90      	pop	{r4, r7, pc}

080037cc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037e6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037e8:	f7fe fcc4 	bl	8002174 <HAL_GetTick>
 80037ec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80037ee:	e009      	b.n	8003804 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80037f0:	f7fe fcc0 	bl	8002174 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037fe:	d901      	bls.n	8003804 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e007      	b.n	8003814 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f003 0320 	and.w	r3, r3, #32
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0ee      	beq.n	80037f0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003824:	2300      	movs	r3, #0
 8003826:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003828:	2300      	movs	r3, #0
 800382a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003836:	2b00      	cmp	r3, #0
 8003838:	d122      	bne.n	8003880 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003848:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800384a:	f7fe fc93 	bl	8002174 <HAL_GetTick>
 800384e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003850:	e00c      	b.n	800386c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003852:	f7fe fc8f 	bl	8002174 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003860:	d904      	bls.n	800386c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2204      	movs	r2, #4
 8003866:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003876:	2b00      	cmp	r3, #0
 8003878:	d102      	bne.n	8003880 <RTC_EnterInitMode+0x64>
 800387a:	7bfb      	ldrb	r3, [r7, #15]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d1e8      	bne.n	8003852 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003880:	7bfb      	ldrb	r3, [r7, #15]
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b084      	sub	sp, #16
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003892:	2300      	movs	r3, #0
 8003894:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68da      	ldr	r2, [r3, #12]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038a4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f003 0320 	and.w	r3, r3, #32
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10a      	bne.n	80038ca <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7ff ff89 	bl	80037cc <HAL_RTC_WaitForSynchro>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d004      	beq.n	80038ca <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2204      	movs	r2, #4
 80038c4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80038ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	4603      	mov	r3, r0
 80038dc:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80038de:	2300      	movs	r3, #0
 80038e0:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80038e2:	e005      	b.n	80038f0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
 80038e6:	3301      	adds	r3, #1
 80038e8:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80038ea:	79fb      	ldrb	r3, [r7, #7]
 80038ec:	3b0a      	subs	r3, #10
 80038ee:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80038f0:	79fb      	ldrb	r3, [r7, #7]
 80038f2:	2b09      	cmp	r3, #9
 80038f4:	d8f6      	bhi.n	80038e4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80038f6:	7bfb      	ldrb	r3, [r7, #15]
 80038f8:	011b      	lsls	r3, r3, #4
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	79fb      	ldrb	r3, [r7, #7]
 80038fe:	4313      	orrs	r3, r2
 8003900:	b2db      	uxtb	r3, r3
}
 8003902:	4618      	mov	r0, r3
 8003904:	3714      	adds	r7, #20
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b082      	sub	sp, #8
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e03f      	b.n	80039a0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d106      	bne.n	800393a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7fe fae7 	bl	8001f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2224      	movs	r2, #36	; 0x24
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68da      	ldr	r2, [r3, #12]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003950:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 fe1c 	bl	8004590 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	691a      	ldr	r2, [r3, #16]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003966:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695a      	ldr	r2, [r3, #20]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003976:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68da      	ldr	r2, [r3, #12]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003986:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2220      	movs	r2, #32
 8003992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2220      	movs	r2, #32
 800399a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b08a      	sub	sp, #40	; 0x28
 80039ac:	af02      	add	r7, sp, #8
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	603b      	str	r3, [r7, #0]
 80039b4:	4613      	mov	r3, r2
 80039b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b20      	cmp	r3, #32
 80039c6:	d17c      	bne.n	8003ac2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <HAL_UART_Transmit+0x2c>
 80039ce:	88fb      	ldrh	r3, [r7, #6]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d101      	bne.n	80039d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e075      	b.n	8003ac4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d101      	bne.n	80039e6 <HAL_UART_Transmit+0x3e>
 80039e2:	2302      	movs	r3, #2
 80039e4:	e06e      	b.n	8003ac4 <HAL_UART_Transmit+0x11c>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2221      	movs	r2, #33	; 0x21
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039fc:	f7fe fbba 	bl	8002174 <HAL_GetTick>
 8003a00:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	88fa      	ldrh	r2, [r7, #6]
 8003a06:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	88fa      	ldrh	r2, [r7, #6]
 8003a0c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a16:	d108      	bne.n	8003a2a <HAL_UART_Transmit+0x82>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d104      	bne.n	8003a2a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a20:	2300      	movs	r3, #0
 8003a22:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	61bb      	str	r3, [r7, #24]
 8003a28:	e003      	b.n	8003a32 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003a3a:	e02a      	b.n	8003a92 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	2200      	movs	r2, #0
 8003a44:	2180      	movs	r1, #128	; 0x80
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 fb9a 	bl	8004180 <UART_WaitOnFlagUntilTimeout>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e036      	b.n	8003ac4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10b      	bne.n	8003a74 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	881b      	ldrh	r3, [r3, #0]
 8003a60:	461a      	mov	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a6a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	3302      	adds	r3, #2
 8003a70:	61bb      	str	r3, [r7, #24]
 8003a72:	e007      	b.n	8003a84 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	781a      	ldrb	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	3301      	adds	r3, #1
 8003a82:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1cf      	bne.n	8003a3c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	2140      	movs	r1, #64	; 0x40
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 fb6a 	bl	8004180 <UART_WaitOnFlagUntilTimeout>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e006      	b.n	8003ac4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	e000      	b.n	8003ac4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ac2:	2302      	movs	r3, #2
  }
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3720      	adds	r7, #32
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b08a      	sub	sp, #40	; 0x28
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	603b      	str	r3, [r7, #0]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b20      	cmp	r3, #32
 8003aea:	f040 808c 	bne.w	8003c06 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d002      	beq.n	8003afa <HAL_UART_Receive+0x2e>
 8003af4:	88fb      	ldrh	r3, [r7, #6]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e084      	b.n	8003c08 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d101      	bne.n	8003b0c <HAL_UART_Receive+0x40>
 8003b08:	2302      	movs	r3, #2
 8003b0a:	e07d      	b.n	8003c08 <HAL_UART_Receive+0x13c>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2222      	movs	r2, #34	; 0x22
 8003b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b28:	f7fe fb24 	bl	8002174 <HAL_GetTick>
 8003b2c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	88fa      	ldrh	r2, [r7, #6]
 8003b32:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	88fa      	ldrh	r2, [r7, #6]
 8003b38:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b42:	d108      	bne.n	8003b56 <HAL_UART_Receive+0x8a>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d104      	bne.n	8003b56 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	61bb      	str	r3, [r7, #24]
 8003b54:	e003      	b.n	8003b5e <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003b66:	e043      	b.n	8003bf0 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	2120      	movs	r1, #32
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f000 fb04 	bl	8004180 <UART_WaitOnFlagUntilTimeout>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e042      	b.n	8003c08 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d10c      	bne.n	8003ba2 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	3302      	adds	r3, #2
 8003b9e:	61bb      	str	r3, [r7, #24]
 8003ba0:	e01f      	b.n	8003be2 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003baa:	d007      	beq.n	8003bbc <HAL_UART_Receive+0xf0>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10a      	bne.n	8003bca <HAL_UART_Receive+0xfe>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d106      	bne.n	8003bca <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	701a      	strb	r2, [r3, #0]
 8003bc8:	e008      	b.n	8003bdc <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	3301      	adds	r3, #1
 8003be0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1b6      	bne.n	8003b68 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003c02:	2300      	movs	r3, #0
 8003c04:	e000      	b.n	8003c08 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003c06:	2302      	movs	r3, #2
  }
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3720      	adds	r7, #32
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b0ba      	sub	sp, #232	; 0xe8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003c4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10f      	bne.n	8003c76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c5a:	f003 0320 	and.w	r3, r3, #32
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d009      	beq.n	8003c76 <HAL_UART_IRQHandler+0x66>
 8003c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c66:	f003 0320 	and.w	r3, r3, #32
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 fbd3 	bl	800441a <UART_Receive_IT>
      return;
 8003c74:	e256      	b.n	8004124 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 80de 	beq.w	8003e3c <HAL_UART_IRQHandler+0x22c>
 8003c80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d106      	bne.n	8003c9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c90:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 80d1 	beq.w	8003e3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00b      	beq.n	8003cbe <HAL_UART_IRQHandler+0xae>
 8003ca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d005      	beq.n	8003cbe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	f043 0201 	orr.w	r2, r3, #1
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00b      	beq.n	8003ce2 <HAL_UART_IRQHandler+0xd2>
 8003cca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d005      	beq.n	8003ce2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	f043 0202 	orr.w	r2, r3, #2
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00b      	beq.n	8003d06 <HAL_UART_IRQHandler+0xf6>
 8003cee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d005      	beq.n	8003d06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	f043 0204 	orr.w	r2, r3, #4
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d011      	beq.n	8003d36 <HAL_UART_IRQHandler+0x126>
 8003d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d16:	f003 0320 	and.w	r3, r3, #32
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d105      	bne.n	8003d2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d005      	beq.n	8003d36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	f043 0208 	orr.w	r2, r3, #8
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 81ed 	beq.w	800411a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d44:	f003 0320 	and.w	r3, r3, #32
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d008      	beq.n	8003d5e <HAL_UART_IRQHandler+0x14e>
 8003d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d50:	f003 0320 	and.w	r3, r3, #32
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d002      	beq.n	8003d5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 fb5e 	bl	800441a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d68:	2b40      	cmp	r3, #64	; 0x40
 8003d6a:	bf0c      	ite	eq
 8003d6c:	2301      	moveq	r3, #1
 8003d6e:	2300      	movne	r3, #0
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d103      	bne.n	8003d8a <HAL_UART_IRQHandler+0x17a>
 8003d82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d04f      	beq.n	8003e2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 fa66 	bl	800425c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9a:	2b40      	cmp	r3, #64	; 0x40
 8003d9c:	d141      	bne.n	8003e22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3314      	adds	r3, #20
 8003da4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003dac:	e853 3f00 	ldrex	r3, [r3]
 8003db0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003db4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003db8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3314      	adds	r3, #20
 8003dc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003dca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003dce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003dd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003dda:	e841 2300 	strex	r3, r2, [r1]
 8003dde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003de2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1d9      	bne.n	8003d9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d013      	beq.n	8003e1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df6:	4a7d      	ldr	r2, [pc, #500]	; (8003fec <HAL_UART_IRQHandler+0x3dc>)
 8003df8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fe fb69 	bl	80024d6 <HAL_DMA_Abort_IT>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d016      	beq.n	8003e38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e14:	4610      	mov	r0, r2
 8003e16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e18:	e00e      	b.n	8003e38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f99a 	bl	8004154 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e20:	e00a      	b.n	8003e38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f996 	bl	8004154 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e28:	e006      	b.n	8003e38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f992 	bl	8004154 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003e36:	e170      	b.n	800411a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e38:	bf00      	nop
    return;
 8003e3a:	e16e      	b.n	800411a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	f040 814a 	bne.w	80040da <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e4a:	f003 0310 	and.w	r3, r3, #16
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f000 8143 	beq.w	80040da <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e58:	f003 0310 	and.w	r3, r3, #16
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 813c 	beq.w	80040da <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e62:	2300      	movs	r3, #0
 8003e64:	60bb      	str	r3, [r7, #8]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	60bb      	str	r3, [r7, #8]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	60bb      	str	r3, [r7, #8]
 8003e76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e82:	2b40      	cmp	r3, #64	; 0x40
 8003e84:	f040 80b4 	bne.w	8003ff0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 8140 	beq.w	800411e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ea2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	f080 8139 	bcs.w	800411e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003eb2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ebe:	f000 8088 	beq.w	8003fd2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	330c      	adds	r3, #12
 8003ec8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ecc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ed0:	e853 3f00 	ldrex	r3, [r3]
 8003ed4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ed8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003edc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ee0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	330c      	adds	r3, #12
 8003eea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003eee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ef2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003efa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003efe:	e841 2300 	strex	r3, r2, [r1]
 8003f02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1d9      	bne.n	8003ec2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	3314      	adds	r3, #20
 8003f14:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f18:	e853 3f00 	ldrex	r3, [r3]
 8003f1c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f20:	f023 0301 	bic.w	r3, r3, #1
 8003f24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	3314      	adds	r3, #20
 8003f2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f32:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f36:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f38:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f3e:	e841 2300 	strex	r3, r2, [r1]
 8003f42:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1e1      	bne.n	8003f0e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	3314      	adds	r3, #20
 8003f50:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f54:	e853 3f00 	ldrex	r3, [r3]
 8003f58:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	3314      	adds	r3, #20
 8003f6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f70:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f72:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f74:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f76:	e841 2300 	strex	r3, r2, [r1]
 8003f7a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1e3      	bne.n	8003f4a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2220      	movs	r2, #32
 8003f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	330c      	adds	r3, #12
 8003f96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f9a:	e853 3f00 	ldrex	r3, [r3]
 8003f9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003fa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fa2:	f023 0310 	bic.w	r3, r3, #16
 8003fa6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	330c      	adds	r3, #12
 8003fb0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003fb4:	65ba      	str	r2, [r7, #88]	; 0x58
 8003fb6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003fba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fbc:	e841 2300 	strex	r3, r2, [r1]
 8003fc0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003fc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1e3      	bne.n	8003f90 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7fe fa12 	bl	80023f6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f8c0 	bl	8004168 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fe8:	e099      	b.n	800411e <HAL_UART_IRQHandler+0x50e>
 8003fea:	bf00      	nop
 8003fec:	08004323 	.word	0x08004323
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004004:	b29b      	uxth	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	f000 808b 	beq.w	8004122 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800400c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 8086 	beq.w	8004122 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	330c      	adds	r3, #12
 800401c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004020:	e853 3f00 	ldrex	r3, [r3]
 8004024:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004028:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800402c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	330c      	adds	r3, #12
 8004036:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800403a:	647a      	str	r2, [r7, #68]	; 0x44
 800403c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004040:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004042:	e841 2300 	strex	r3, r2, [r1]
 8004046:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1e3      	bne.n	8004016 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	3314      	adds	r3, #20
 8004054:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004058:	e853 3f00 	ldrex	r3, [r3]
 800405c:	623b      	str	r3, [r7, #32]
   return(result);
 800405e:	6a3b      	ldr	r3, [r7, #32]
 8004060:	f023 0301 	bic.w	r3, r3, #1
 8004064:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3314      	adds	r3, #20
 800406e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004072:	633a      	str	r2, [r7, #48]	; 0x30
 8004074:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004076:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800407a:	e841 2300 	strex	r3, r2, [r1]
 800407e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1e3      	bne.n	800404e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2220      	movs	r2, #32
 800408a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	330c      	adds	r3, #12
 800409a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	e853 3f00 	ldrex	r3, [r3]
 80040a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f023 0310 	bic.w	r3, r3, #16
 80040aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	330c      	adds	r3, #12
 80040b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80040b8:	61fa      	str	r2, [r7, #28]
 80040ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040bc:	69b9      	ldr	r1, [r7, #24]
 80040be:	69fa      	ldr	r2, [r7, #28]
 80040c0:	e841 2300 	strex	r3, r2, [r1]
 80040c4:	617b      	str	r3, [r7, #20]
   return(result);
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1e3      	bne.n	8004094 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040d0:	4619      	mov	r1, r3
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f848 	bl	8004168 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040d8:	e023      	b.n	8004122 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d009      	beq.n	80040fa <HAL_UART_IRQHandler+0x4ea>
 80040e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f929 	bl	800434a <UART_Transmit_IT>
    return;
 80040f8:	e014      	b.n	8004124 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00e      	beq.n	8004124 <HAL_UART_IRQHandler+0x514>
 8004106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800410a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410e:	2b00      	cmp	r3, #0
 8004110:	d008      	beq.n	8004124 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f969 	bl	80043ea <UART_EndTransmit_IT>
    return;
 8004118:	e004      	b.n	8004124 <HAL_UART_IRQHandler+0x514>
    return;
 800411a:	bf00      	nop
 800411c:	e002      	b.n	8004124 <HAL_UART_IRQHandler+0x514>
      return;
 800411e:	bf00      	nop
 8004120:	e000      	b.n	8004124 <HAL_UART_IRQHandler+0x514>
      return;
 8004122:	bf00      	nop
  }
}
 8004124:	37e8      	adds	r7, #232	; 0xe8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop

0800412c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	460b      	mov	r3, r1
 8004172:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b090      	sub	sp, #64	; 0x40
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	603b      	str	r3, [r7, #0]
 800418c:	4613      	mov	r3, r2
 800418e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004190:	e050      	b.n	8004234 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004194:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004198:	d04c      	beq.n	8004234 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800419a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800419c:	2b00      	cmp	r3, #0
 800419e:	d007      	beq.n	80041b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80041a0:	f7fd ffe8 	bl	8002174 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d241      	bcs.n	8004234 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	330c      	adds	r3, #12
 80041b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ba:	e853 3f00 	ldrex	r3, [r3]
 80041be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	330c      	adds	r3, #12
 80041ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041d0:	637a      	str	r2, [r7, #52]	; 0x34
 80041d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041d8:	e841 2300 	strex	r3, r2, [r1]
 80041dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1e5      	bne.n	80041b0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	3314      	adds	r3, #20
 80041ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	e853 3f00 	ldrex	r3, [r3]
 80041f2:	613b      	str	r3, [r7, #16]
   return(result);
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f023 0301 	bic.w	r3, r3, #1
 80041fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3314      	adds	r3, #20
 8004202:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004204:	623a      	str	r2, [r7, #32]
 8004206:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004208:	69f9      	ldr	r1, [r7, #28]
 800420a:	6a3a      	ldr	r2, [r7, #32]
 800420c:	e841 2300 	strex	r3, r2, [r1]
 8004210:	61bb      	str	r3, [r7, #24]
   return(result);
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1e5      	bne.n	80041e4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2220      	movs	r2, #32
 800421c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2220      	movs	r2, #32
 8004224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e00f      	b.n	8004254 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	4013      	ands	r3, r2
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	429a      	cmp	r2, r3
 8004242:	bf0c      	ite	eq
 8004244:	2301      	moveq	r3, #1
 8004246:	2300      	movne	r3, #0
 8004248:	b2db      	uxtb	r3, r3
 800424a:	461a      	mov	r2, r3
 800424c:	79fb      	ldrb	r3, [r7, #7]
 800424e:	429a      	cmp	r2, r3
 8004250:	d09f      	beq.n	8004192 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3740      	adds	r7, #64	; 0x40
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800425c:	b480      	push	{r7}
 800425e:	b095      	sub	sp, #84	; 0x54
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	330c      	adds	r3, #12
 800426a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800426e:	e853 3f00 	ldrex	r3, [r3]
 8004272:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004276:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800427a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	330c      	adds	r3, #12
 8004282:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004284:	643a      	str	r2, [r7, #64]	; 0x40
 8004286:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004288:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800428a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800428c:	e841 2300 	strex	r3, r2, [r1]
 8004290:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1e5      	bne.n	8004264 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	3314      	adds	r3, #20
 800429e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	e853 3f00 	ldrex	r3, [r3]
 80042a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	f023 0301 	bic.w	r3, r3, #1
 80042ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3314      	adds	r3, #20
 80042b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042c0:	e841 2300 	strex	r3, r2, [r1]
 80042c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1e5      	bne.n	8004298 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d119      	bne.n	8004308 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	330c      	adds	r3, #12
 80042da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	e853 3f00 	ldrex	r3, [r3]
 80042e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	f023 0310 	bic.w	r3, r3, #16
 80042ea:	647b      	str	r3, [r7, #68]	; 0x44
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	330c      	adds	r3, #12
 80042f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042f4:	61ba      	str	r2, [r7, #24]
 80042f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f8:	6979      	ldr	r1, [r7, #20]
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	e841 2300 	strex	r3, r2, [r1]
 8004300:	613b      	str	r3, [r7, #16]
   return(result);
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1e5      	bne.n	80042d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2220      	movs	r2, #32
 800430c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004316:	bf00      	nop
 8004318:	3754      	adds	r7, #84	; 0x54
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b084      	sub	sp, #16
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f7ff ff09 	bl	8004154 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004342:	bf00      	nop
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800434a:	b480      	push	{r7}
 800434c:	b085      	sub	sp, #20
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b21      	cmp	r3, #33	; 0x21
 800435c:	d13e      	bne.n	80043dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004366:	d114      	bne.n	8004392 <UART_Transmit_IT+0x48>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d110      	bne.n	8004392 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	881b      	ldrh	r3, [r3, #0]
 800437a:	461a      	mov	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004384:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	1c9a      	adds	r2, r3, #2
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	621a      	str	r2, [r3, #32]
 8004390:	e008      	b.n	80043a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	1c59      	adds	r1, r3, #1
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6211      	str	r1, [r2, #32]
 800439c:	781a      	ldrb	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	3b01      	subs	r3, #1
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	4619      	mov	r1, r3
 80043b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10f      	bne.n	80043d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68da      	ldr	r2, [r3, #12]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043d8:	2300      	movs	r3, #0
 80043da:	e000      	b.n	80043de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043dc:	2302      	movs	r3, #2
  }
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3714      	adds	r7, #20
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b082      	sub	sp, #8
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68da      	ldr	r2, [r3, #12]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004400:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2220      	movs	r2, #32
 8004406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7ff fe8e 	bl	800412c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b08c      	sub	sp, #48	; 0x30
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b22      	cmp	r3, #34	; 0x22
 800442c:	f040 80ab 	bne.w	8004586 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004438:	d117      	bne.n	800446a <UART_Receive_IT+0x50>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d113      	bne.n	800446a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004442:	2300      	movs	r3, #0
 8004444:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	b29b      	uxth	r3, r3
 8004454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004458:	b29a      	uxth	r2, r3
 800445a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004462:	1c9a      	adds	r2, r3, #2
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	629a      	str	r2, [r3, #40]	; 0x28
 8004468:	e026      	b.n	80044b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004470:	2300      	movs	r3, #0
 8004472:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800447c:	d007      	beq.n	800448e <UART_Receive_IT+0x74>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10a      	bne.n	800449c <UART_Receive_IT+0x82>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d106      	bne.n	800449c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	b2da      	uxtb	r2, r3
 8004496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004498:	701a      	strb	r2, [r3, #0]
 800449a:	e008      	b.n	80044ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044bc:	b29b      	uxth	r3, r3
 80044be:	3b01      	subs	r3, #1
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	4619      	mov	r1, r3
 80044c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d15a      	bne.n	8004582 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68da      	ldr	r2, [r3, #12]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 0220 	bic.w	r2, r2, #32
 80044da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695a      	ldr	r2, [r3, #20]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 0201 	bic.w	r2, r2, #1
 80044fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2220      	movs	r2, #32
 8004500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004508:	2b01      	cmp	r3, #1
 800450a:	d135      	bne.n	8004578 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	330c      	adds	r3, #12
 8004518:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	e853 3f00 	ldrex	r3, [r3]
 8004520:	613b      	str	r3, [r7, #16]
   return(result);
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f023 0310 	bic.w	r3, r3, #16
 8004528:	627b      	str	r3, [r7, #36]	; 0x24
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	330c      	adds	r3, #12
 8004530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004532:	623a      	str	r2, [r7, #32]
 8004534:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004536:	69f9      	ldr	r1, [r7, #28]
 8004538:	6a3a      	ldr	r2, [r7, #32]
 800453a:	e841 2300 	strex	r3, r2, [r1]
 800453e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1e5      	bne.n	8004512 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0310 	and.w	r3, r3, #16
 8004550:	2b10      	cmp	r3, #16
 8004552:	d10a      	bne.n	800456a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004554:	2300      	movs	r3, #0
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800456e:	4619      	mov	r1, r3
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f7ff fdf9 	bl	8004168 <HAL_UARTEx_RxEventCallback>
 8004576:	e002      	b.n	800457e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f7ff fde1 	bl	8004140 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800457e:	2300      	movs	r3, #0
 8004580:	e002      	b.n	8004588 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004582:	2300      	movs	r3, #0
 8004584:	e000      	b.n	8004588 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004586:	2302      	movs	r3, #2
  }
}
 8004588:	4618      	mov	r0, r3
 800458a:	3730      	adds	r7, #48	; 0x30
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004594:	b0c0      	sub	sp, #256	; 0x100
 8004596:	af00      	add	r7, sp, #0
 8004598:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800459c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80045a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ac:	68d9      	ldr	r1, [r3, #12]
 80045ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	ea40 0301 	orr.w	r3, r0, r1
 80045b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045be:	689a      	ldr	r2, [r3, #8]
 80045c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	431a      	orrs	r2, r3
 80045c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	431a      	orrs	r2, r3
 80045d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80045e8:	f021 010c 	bic.w	r1, r1, #12
 80045ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045f6:	430b      	orrs	r3, r1
 80045f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800460a:	6999      	ldr	r1, [r3, #24]
 800460c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	ea40 0301 	orr.w	r3, r0, r1
 8004616:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	4b8f      	ldr	r3, [pc, #572]	; (800485c <UART_SetConfig+0x2cc>)
 8004620:	429a      	cmp	r2, r3
 8004622:	d005      	beq.n	8004630 <UART_SetConfig+0xa0>
 8004624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	4b8d      	ldr	r3, [pc, #564]	; (8004860 <UART_SetConfig+0x2d0>)
 800462c:	429a      	cmp	r2, r3
 800462e:	d104      	bne.n	800463a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004630:	f7fe fd64 	bl	80030fc <HAL_RCC_GetPCLK2Freq>
 8004634:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004638:	e003      	b.n	8004642 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800463a:	f7fe fd4b 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 800463e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004646:	69db      	ldr	r3, [r3, #28]
 8004648:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800464c:	f040 810c 	bne.w	8004868 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004650:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004654:	2200      	movs	r2, #0
 8004656:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800465a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800465e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004662:	4622      	mov	r2, r4
 8004664:	462b      	mov	r3, r5
 8004666:	1891      	adds	r1, r2, r2
 8004668:	65b9      	str	r1, [r7, #88]	; 0x58
 800466a:	415b      	adcs	r3, r3
 800466c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800466e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004672:	4621      	mov	r1, r4
 8004674:	eb12 0801 	adds.w	r8, r2, r1
 8004678:	4629      	mov	r1, r5
 800467a:	eb43 0901 	adc.w	r9, r3, r1
 800467e:	f04f 0200 	mov.w	r2, #0
 8004682:	f04f 0300 	mov.w	r3, #0
 8004686:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800468a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800468e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004692:	4690      	mov	r8, r2
 8004694:	4699      	mov	r9, r3
 8004696:	4623      	mov	r3, r4
 8004698:	eb18 0303 	adds.w	r3, r8, r3
 800469c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80046a0:	462b      	mov	r3, r5
 80046a2:	eb49 0303 	adc.w	r3, r9, r3
 80046a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80046aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80046b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80046ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80046be:	460b      	mov	r3, r1
 80046c0:	18db      	adds	r3, r3, r3
 80046c2:	653b      	str	r3, [r7, #80]	; 0x50
 80046c4:	4613      	mov	r3, r2
 80046c6:	eb42 0303 	adc.w	r3, r2, r3
 80046ca:	657b      	str	r3, [r7, #84]	; 0x54
 80046cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80046d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80046d4:	f7fc fae8 	bl	8000ca8 <__aeabi_uldivmod>
 80046d8:	4602      	mov	r2, r0
 80046da:	460b      	mov	r3, r1
 80046dc:	4b61      	ldr	r3, [pc, #388]	; (8004864 <UART_SetConfig+0x2d4>)
 80046de:	fba3 2302 	umull	r2, r3, r3, r2
 80046e2:	095b      	lsrs	r3, r3, #5
 80046e4:	011c      	lsls	r4, r3, #4
 80046e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046ea:	2200      	movs	r2, #0
 80046ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80046f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80046f8:	4642      	mov	r2, r8
 80046fa:	464b      	mov	r3, r9
 80046fc:	1891      	adds	r1, r2, r2
 80046fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8004700:	415b      	adcs	r3, r3
 8004702:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004704:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004708:	4641      	mov	r1, r8
 800470a:	eb12 0a01 	adds.w	sl, r2, r1
 800470e:	4649      	mov	r1, r9
 8004710:	eb43 0b01 	adc.w	fp, r3, r1
 8004714:	f04f 0200 	mov.w	r2, #0
 8004718:	f04f 0300 	mov.w	r3, #0
 800471c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004720:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004724:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004728:	4692      	mov	sl, r2
 800472a:	469b      	mov	fp, r3
 800472c:	4643      	mov	r3, r8
 800472e:	eb1a 0303 	adds.w	r3, sl, r3
 8004732:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004736:	464b      	mov	r3, r9
 8004738:	eb4b 0303 	adc.w	r3, fp, r3
 800473c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800474c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004750:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004754:	460b      	mov	r3, r1
 8004756:	18db      	adds	r3, r3, r3
 8004758:	643b      	str	r3, [r7, #64]	; 0x40
 800475a:	4613      	mov	r3, r2
 800475c:	eb42 0303 	adc.w	r3, r2, r3
 8004760:	647b      	str	r3, [r7, #68]	; 0x44
 8004762:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004766:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800476a:	f7fc fa9d 	bl	8000ca8 <__aeabi_uldivmod>
 800476e:	4602      	mov	r2, r0
 8004770:	460b      	mov	r3, r1
 8004772:	4611      	mov	r1, r2
 8004774:	4b3b      	ldr	r3, [pc, #236]	; (8004864 <UART_SetConfig+0x2d4>)
 8004776:	fba3 2301 	umull	r2, r3, r3, r1
 800477a:	095b      	lsrs	r3, r3, #5
 800477c:	2264      	movs	r2, #100	; 0x64
 800477e:	fb02 f303 	mul.w	r3, r2, r3
 8004782:	1acb      	subs	r3, r1, r3
 8004784:	00db      	lsls	r3, r3, #3
 8004786:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800478a:	4b36      	ldr	r3, [pc, #216]	; (8004864 <UART_SetConfig+0x2d4>)
 800478c:	fba3 2302 	umull	r2, r3, r3, r2
 8004790:	095b      	lsrs	r3, r3, #5
 8004792:	005b      	lsls	r3, r3, #1
 8004794:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004798:	441c      	add	r4, r3
 800479a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800479e:	2200      	movs	r2, #0
 80047a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80047a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80047ac:	4642      	mov	r2, r8
 80047ae:	464b      	mov	r3, r9
 80047b0:	1891      	adds	r1, r2, r2
 80047b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80047b4:	415b      	adcs	r3, r3
 80047b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80047bc:	4641      	mov	r1, r8
 80047be:	1851      	adds	r1, r2, r1
 80047c0:	6339      	str	r1, [r7, #48]	; 0x30
 80047c2:	4649      	mov	r1, r9
 80047c4:	414b      	adcs	r3, r1
 80047c6:	637b      	str	r3, [r7, #52]	; 0x34
 80047c8:	f04f 0200 	mov.w	r2, #0
 80047cc:	f04f 0300 	mov.w	r3, #0
 80047d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80047d4:	4659      	mov	r1, fp
 80047d6:	00cb      	lsls	r3, r1, #3
 80047d8:	4651      	mov	r1, sl
 80047da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047de:	4651      	mov	r1, sl
 80047e0:	00ca      	lsls	r2, r1, #3
 80047e2:	4610      	mov	r0, r2
 80047e4:	4619      	mov	r1, r3
 80047e6:	4603      	mov	r3, r0
 80047e8:	4642      	mov	r2, r8
 80047ea:	189b      	adds	r3, r3, r2
 80047ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047f0:	464b      	mov	r3, r9
 80047f2:	460a      	mov	r2, r1
 80047f4:	eb42 0303 	adc.w	r3, r2, r3
 80047f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004808:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800480c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004810:	460b      	mov	r3, r1
 8004812:	18db      	adds	r3, r3, r3
 8004814:	62bb      	str	r3, [r7, #40]	; 0x28
 8004816:	4613      	mov	r3, r2
 8004818:	eb42 0303 	adc.w	r3, r2, r3
 800481c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800481e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004822:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004826:	f7fc fa3f 	bl	8000ca8 <__aeabi_uldivmod>
 800482a:	4602      	mov	r2, r0
 800482c:	460b      	mov	r3, r1
 800482e:	4b0d      	ldr	r3, [pc, #52]	; (8004864 <UART_SetConfig+0x2d4>)
 8004830:	fba3 1302 	umull	r1, r3, r3, r2
 8004834:	095b      	lsrs	r3, r3, #5
 8004836:	2164      	movs	r1, #100	; 0x64
 8004838:	fb01 f303 	mul.w	r3, r1, r3
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	00db      	lsls	r3, r3, #3
 8004840:	3332      	adds	r3, #50	; 0x32
 8004842:	4a08      	ldr	r2, [pc, #32]	; (8004864 <UART_SetConfig+0x2d4>)
 8004844:	fba2 2303 	umull	r2, r3, r2, r3
 8004848:	095b      	lsrs	r3, r3, #5
 800484a:	f003 0207 	and.w	r2, r3, #7
 800484e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4422      	add	r2, r4
 8004856:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004858:	e105      	b.n	8004a66 <UART_SetConfig+0x4d6>
 800485a:	bf00      	nop
 800485c:	40011000 	.word	0x40011000
 8004860:	40011400 	.word	0x40011400
 8004864:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004868:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800486c:	2200      	movs	r2, #0
 800486e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004872:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004876:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800487a:	4642      	mov	r2, r8
 800487c:	464b      	mov	r3, r9
 800487e:	1891      	adds	r1, r2, r2
 8004880:	6239      	str	r1, [r7, #32]
 8004882:	415b      	adcs	r3, r3
 8004884:	627b      	str	r3, [r7, #36]	; 0x24
 8004886:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800488a:	4641      	mov	r1, r8
 800488c:	1854      	adds	r4, r2, r1
 800488e:	4649      	mov	r1, r9
 8004890:	eb43 0501 	adc.w	r5, r3, r1
 8004894:	f04f 0200 	mov.w	r2, #0
 8004898:	f04f 0300 	mov.w	r3, #0
 800489c:	00eb      	lsls	r3, r5, #3
 800489e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048a2:	00e2      	lsls	r2, r4, #3
 80048a4:	4614      	mov	r4, r2
 80048a6:	461d      	mov	r5, r3
 80048a8:	4643      	mov	r3, r8
 80048aa:	18e3      	adds	r3, r4, r3
 80048ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80048b0:	464b      	mov	r3, r9
 80048b2:	eb45 0303 	adc.w	r3, r5, r3
 80048b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80048ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80048c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80048ca:	f04f 0200 	mov.w	r2, #0
 80048ce:	f04f 0300 	mov.w	r3, #0
 80048d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80048d6:	4629      	mov	r1, r5
 80048d8:	008b      	lsls	r3, r1, #2
 80048da:	4621      	mov	r1, r4
 80048dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048e0:	4621      	mov	r1, r4
 80048e2:	008a      	lsls	r2, r1, #2
 80048e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80048e8:	f7fc f9de 	bl	8000ca8 <__aeabi_uldivmod>
 80048ec:	4602      	mov	r2, r0
 80048ee:	460b      	mov	r3, r1
 80048f0:	4b60      	ldr	r3, [pc, #384]	; (8004a74 <UART_SetConfig+0x4e4>)
 80048f2:	fba3 2302 	umull	r2, r3, r3, r2
 80048f6:	095b      	lsrs	r3, r3, #5
 80048f8:	011c      	lsls	r4, r3, #4
 80048fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048fe:	2200      	movs	r2, #0
 8004900:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004904:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004908:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800490c:	4642      	mov	r2, r8
 800490e:	464b      	mov	r3, r9
 8004910:	1891      	adds	r1, r2, r2
 8004912:	61b9      	str	r1, [r7, #24]
 8004914:	415b      	adcs	r3, r3
 8004916:	61fb      	str	r3, [r7, #28]
 8004918:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800491c:	4641      	mov	r1, r8
 800491e:	1851      	adds	r1, r2, r1
 8004920:	6139      	str	r1, [r7, #16]
 8004922:	4649      	mov	r1, r9
 8004924:	414b      	adcs	r3, r1
 8004926:	617b      	str	r3, [r7, #20]
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	f04f 0300 	mov.w	r3, #0
 8004930:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004934:	4659      	mov	r1, fp
 8004936:	00cb      	lsls	r3, r1, #3
 8004938:	4651      	mov	r1, sl
 800493a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800493e:	4651      	mov	r1, sl
 8004940:	00ca      	lsls	r2, r1, #3
 8004942:	4610      	mov	r0, r2
 8004944:	4619      	mov	r1, r3
 8004946:	4603      	mov	r3, r0
 8004948:	4642      	mov	r2, r8
 800494a:	189b      	adds	r3, r3, r2
 800494c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004950:	464b      	mov	r3, r9
 8004952:	460a      	mov	r2, r1
 8004954:	eb42 0303 	adc.w	r3, r2, r3
 8004958:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800495c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	67bb      	str	r3, [r7, #120]	; 0x78
 8004966:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004968:	f04f 0200 	mov.w	r2, #0
 800496c:	f04f 0300 	mov.w	r3, #0
 8004970:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004974:	4649      	mov	r1, r9
 8004976:	008b      	lsls	r3, r1, #2
 8004978:	4641      	mov	r1, r8
 800497a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800497e:	4641      	mov	r1, r8
 8004980:	008a      	lsls	r2, r1, #2
 8004982:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004986:	f7fc f98f 	bl	8000ca8 <__aeabi_uldivmod>
 800498a:	4602      	mov	r2, r0
 800498c:	460b      	mov	r3, r1
 800498e:	4b39      	ldr	r3, [pc, #228]	; (8004a74 <UART_SetConfig+0x4e4>)
 8004990:	fba3 1302 	umull	r1, r3, r3, r2
 8004994:	095b      	lsrs	r3, r3, #5
 8004996:	2164      	movs	r1, #100	; 0x64
 8004998:	fb01 f303 	mul.w	r3, r1, r3
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	011b      	lsls	r3, r3, #4
 80049a0:	3332      	adds	r3, #50	; 0x32
 80049a2:	4a34      	ldr	r2, [pc, #208]	; (8004a74 <UART_SetConfig+0x4e4>)
 80049a4:	fba2 2303 	umull	r2, r3, r2, r3
 80049a8:	095b      	lsrs	r3, r3, #5
 80049aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049ae:	441c      	add	r4, r3
 80049b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049b4:	2200      	movs	r2, #0
 80049b6:	673b      	str	r3, [r7, #112]	; 0x70
 80049b8:	677a      	str	r2, [r7, #116]	; 0x74
 80049ba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80049be:	4642      	mov	r2, r8
 80049c0:	464b      	mov	r3, r9
 80049c2:	1891      	adds	r1, r2, r2
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	415b      	adcs	r3, r3
 80049c8:	60fb      	str	r3, [r7, #12]
 80049ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049ce:	4641      	mov	r1, r8
 80049d0:	1851      	adds	r1, r2, r1
 80049d2:	6039      	str	r1, [r7, #0]
 80049d4:	4649      	mov	r1, r9
 80049d6:	414b      	adcs	r3, r1
 80049d8:	607b      	str	r3, [r7, #4]
 80049da:	f04f 0200 	mov.w	r2, #0
 80049de:	f04f 0300 	mov.w	r3, #0
 80049e2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049e6:	4659      	mov	r1, fp
 80049e8:	00cb      	lsls	r3, r1, #3
 80049ea:	4651      	mov	r1, sl
 80049ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049f0:	4651      	mov	r1, sl
 80049f2:	00ca      	lsls	r2, r1, #3
 80049f4:	4610      	mov	r0, r2
 80049f6:	4619      	mov	r1, r3
 80049f8:	4603      	mov	r3, r0
 80049fa:	4642      	mov	r2, r8
 80049fc:	189b      	adds	r3, r3, r2
 80049fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a00:	464b      	mov	r3, r9
 8004a02:	460a      	mov	r2, r1
 8004a04:	eb42 0303 	adc.w	r3, r2, r3
 8004a08:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	663b      	str	r3, [r7, #96]	; 0x60
 8004a14:	667a      	str	r2, [r7, #100]	; 0x64
 8004a16:	f04f 0200 	mov.w	r2, #0
 8004a1a:	f04f 0300 	mov.w	r3, #0
 8004a1e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004a22:	4649      	mov	r1, r9
 8004a24:	008b      	lsls	r3, r1, #2
 8004a26:	4641      	mov	r1, r8
 8004a28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a2c:	4641      	mov	r1, r8
 8004a2e:	008a      	lsls	r2, r1, #2
 8004a30:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004a34:	f7fc f938 	bl	8000ca8 <__aeabi_uldivmod>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	4b0d      	ldr	r3, [pc, #52]	; (8004a74 <UART_SetConfig+0x4e4>)
 8004a3e:	fba3 1302 	umull	r1, r3, r3, r2
 8004a42:	095b      	lsrs	r3, r3, #5
 8004a44:	2164      	movs	r1, #100	; 0x64
 8004a46:	fb01 f303 	mul.w	r3, r1, r3
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	011b      	lsls	r3, r3, #4
 8004a4e:	3332      	adds	r3, #50	; 0x32
 8004a50:	4a08      	ldr	r2, [pc, #32]	; (8004a74 <UART_SetConfig+0x4e4>)
 8004a52:	fba2 2303 	umull	r2, r3, r2, r3
 8004a56:	095b      	lsrs	r3, r3, #5
 8004a58:	f003 020f 	and.w	r2, r3, #15
 8004a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4422      	add	r2, r4
 8004a64:	609a      	str	r2, [r3, #8]
}
 8004a66:	bf00      	nop
 8004a68:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a72:	bf00      	nop
 8004a74:	51eb851f 	.word	0x51eb851f

08004a78 <__errno>:
 8004a78:	4b01      	ldr	r3, [pc, #4]	; (8004a80 <__errno+0x8>)
 8004a7a:	6818      	ldr	r0, [r3, #0]
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	20000010 	.word	0x20000010

08004a84 <__libc_init_array>:
 8004a84:	b570      	push	{r4, r5, r6, lr}
 8004a86:	4d0d      	ldr	r5, [pc, #52]	; (8004abc <__libc_init_array+0x38>)
 8004a88:	4c0d      	ldr	r4, [pc, #52]	; (8004ac0 <__libc_init_array+0x3c>)
 8004a8a:	1b64      	subs	r4, r4, r5
 8004a8c:	10a4      	asrs	r4, r4, #2
 8004a8e:	2600      	movs	r6, #0
 8004a90:	42a6      	cmp	r6, r4
 8004a92:	d109      	bne.n	8004aa8 <__libc_init_array+0x24>
 8004a94:	4d0b      	ldr	r5, [pc, #44]	; (8004ac4 <__libc_init_array+0x40>)
 8004a96:	4c0c      	ldr	r4, [pc, #48]	; (8004ac8 <__libc_init_array+0x44>)
 8004a98:	f004 fd38 	bl	800950c <_init>
 8004a9c:	1b64      	subs	r4, r4, r5
 8004a9e:	10a4      	asrs	r4, r4, #2
 8004aa0:	2600      	movs	r6, #0
 8004aa2:	42a6      	cmp	r6, r4
 8004aa4:	d105      	bne.n	8004ab2 <__libc_init_array+0x2e>
 8004aa6:	bd70      	pop	{r4, r5, r6, pc}
 8004aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aac:	4798      	blx	r3
 8004aae:	3601      	adds	r6, #1
 8004ab0:	e7ee      	b.n	8004a90 <__libc_init_array+0xc>
 8004ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ab6:	4798      	blx	r3
 8004ab8:	3601      	adds	r6, #1
 8004aba:	e7f2      	b.n	8004aa2 <__libc_init_array+0x1e>
 8004abc:	08009bf4 	.word	0x08009bf4
 8004ac0:	08009bf4 	.word	0x08009bf4
 8004ac4:	08009bf4 	.word	0x08009bf4
 8004ac8:	08009bf8 	.word	0x08009bf8

08004acc <memcpy>:
 8004acc:	440a      	add	r2, r1
 8004ace:	4291      	cmp	r1, r2
 8004ad0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004ad4:	d100      	bne.n	8004ad8 <memcpy+0xc>
 8004ad6:	4770      	bx	lr
 8004ad8:	b510      	push	{r4, lr}
 8004ada:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ade:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ae2:	4291      	cmp	r1, r2
 8004ae4:	d1f9      	bne.n	8004ada <memcpy+0xe>
 8004ae6:	bd10      	pop	{r4, pc}

08004ae8 <memset>:
 8004ae8:	4402      	add	r2, r0
 8004aea:	4603      	mov	r3, r0
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d100      	bne.n	8004af2 <memset+0xa>
 8004af0:	4770      	bx	lr
 8004af2:	f803 1b01 	strb.w	r1, [r3], #1
 8004af6:	e7f9      	b.n	8004aec <memset+0x4>

08004af8 <__cvt>:
 8004af8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004afc:	ec55 4b10 	vmov	r4, r5, d0
 8004b00:	2d00      	cmp	r5, #0
 8004b02:	460e      	mov	r6, r1
 8004b04:	4619      	mov	r1, r3
 8004b06:	462b      	mov	r3, r5
 8004b08:	bfbb      	ittet	lt
 8004b0a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004b0e:	461d      	movlt	r5, r3
 8004b10:	2300      	movge	r3, #0
 8004b12:	232d      	movlt	r3, #45	; 0x2d
 8004b14:	700b      	strb	r3, [r1, #0]
 8004b16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b18:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004b1c:	4691      	mov	r9, r2
 8004b1e:	f023 0820 	bic.w	r8, r3, #32
 8004b22:	bfbc      	itt	lt
 8004b24:	4622      	movlt	r2, r4
 8004b26:	4614      	movlt	r4, r2
 8004b28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004b2c:	d005      	beq.n	8004b3a <__cvt+0x42>
 8004b2e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004b32:	d100      	bne.n	8004b36 <__cvt+0x3e>
 8004b34:	3601      	adds	r6, #1
 8004b36:	2102      	movs	r1, #2
 8004b38:	e000      	b.n	8004b3c <__cvt+0x44>
 8004b3a:	2103      	movs	r1, #3
 8004b3c:	ab03      	add	r3, sp, #12
 8004b3e:	9301      	str	r3, [sp, #4]
 8004b40:	ab02      	add	r3, sp, #8
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	ec45 4b10 	vmov	d0, r4, r5
 8004b48:	4653      	mov	r3, sl
 8004b4a:	4632      	mov	r2, r6
 8004b4c:	f001 ff18 	bl	8006980 <_dtoa_r>
 8004b50:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004b54:	4607      	mov	r7, r0
 8004b56:	d102      	bne.n	8004b5e <__cvt+0x66>
 8004b58:	f019 0f01 	tst.w	r9, #1
 8004b5c:	d022      	beq.n	8004ba4 <__cvt+0xac>
 8004b5e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004b62:	eb07 0906 	add.w	r9, r7, r6
 8004b66:	d110      	bne.n	8004b8a <__cvt+0x92>
 8004b68:	783b      	ldrb	r3, [r7, #0]
 8004b6a:	2b30      	cmp	r3, #48	; 0x30
 8004b6c:	d10a      	bne.n	8004b84 <__cvt+0x8c>
 8004b6e:	2200      	movs	r2, #0
 8004b70:	2300      	movs	r3, #0
 8004b72:	4620      	mov	r0, r4
 8004b74:	4629      	mov	r1, r5
 8004b76:	f7fb ffb7 	bl	8000ae8 <__aeabi_dcmpeq>
 8004b7a:	b918      	cbnz	r0, 8004b84 <__cvt+0x8c>
 8004b7c:	f1c6 0601 	rsb	r6, r6, #1
 8004b80:	f8ca 6000 	str.w	r6, [sl]
 8004b84:	f8da 3000 	ldr.w	r3, [sl]
 8004b88:	4499      	add	r9, r3
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	4620      	mov	r0, r4
 8004b90:	4629      	mov	r1, r5
 8004b92:	f7fb ffa9 	bl	8000ae8 <__aeabi_dcmpeq>
 8004b96:	b108      	cbz	r0, 8004b9c <__cvt+0xa4>
 8004b98:	f8cd 900c 	str.w	r9, [sp, #12]
 8004b9c:	2230      	movs	r2, #48	; 0x30
 8004b9e:	9b03      	ldr	r3, [sp, #12]
 8004ba0:	454b      	cmp	r3, r9
 8004ba2:	d307      	bcc.n	8004bb4 <__cvt+0xbc>
 8004ba4:	9b03      	ldr	r3, [sp, #12]
 8004ba6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ba8:	1bdb      	subs	r3, r3, r7
 8004baa:	4638      	mov	r0, r7
 8004bac:	6013      	str	r3, [r2, #0]
 8004bae:	b004      	add	sp, #16
 8004bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bb4:	1c59      	adds	r1, r3, #1
 8004bb6:	9103      	str	r1, [sp, #12]
 8004bb8:	701a      	strb	r2, [r3, #0]
 8004bba:	e7f0      	b.n	8004b9e <__cvt+0xa6>

08004bbc <__exponent>:
 8004bbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2900      	cmp	r1, #0
 8004bc2:	bfb8      	it	lt
 8004bc4:	4249      	neglt	r1, r1
 8004bc6:	f803 2b02 	strb.w	r2, [r3], #2
 8004bca:	bfb4      	ite	lt
 8004bcc:	222d      	movlt	r2, #45	; 0x2d
 8004bce:	222b      	movge	r2, #43	; 0x2b
 8004bd0:	2909      	cmp	r1, #9
 8004bd2:	7042      	strb	r2, [r0, #1]
 8004bd4:	dd2a      	ble.n	8004c2c <__exponent+0x70>
 8004bd6:	f10d 0407 	add.w	r4, sp, #7
 8004bda:	46a4      	mov	ip, r4
 8004bdc:	270a      	movs	r7, #10
 8004bde:	46a6      	mov	lr, r4
 8004be0:	460a      	mov	r2, r1
 8004be2:	fb91 f6f7 	sdiv	r6, r1, r7
 8004be6:	fb07 1516 	mls	r5, r7, r6, r1
 8004bea:	3530      	adds	r5, #48	; 0x30
 8004bec:	2a63      	cmp	r2, #99	; 0x63
 8004bee:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004bf2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004bf6:	4631      	mov	r1, r6
 8004bf8:	dcf1      	bgt.n	8004bde <__exponent+0x22>
 8004bfa:	3130      	adds	r1, #48	; 0x30
 8004bfc:	f1ae 0502 	sub.w	r5, lr, #2
 8004c00:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004c04:	1c44      	adds	r4, r0, #1
 8004c06:	4629      	mov	r1, r5
 8004c08:	4561      	cmp	r1, ip
 8004c0a:	d30a      	bcc.n	8004c22 <__exponent+0x66>
 8004c0c:	f10d 0209 	add.w	r2, sp, #9
 8004c10:	eba2 020e 	sub.w	r2, r2, lr
 8004c14:	4565      	cmp	r5, ip
 8004c16:	bf88      	it	hi
 8004c18:	2200      	movhi	r2, #0
 8004c1a:	4413      	add	r3, r2
 8004c1c:	1a18      	subs	r0, r3, r0
 8004c1e:	b003      	add	sp, #12
 8004c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c26:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004c2a:	e7ed      	b.n	8004c08 <__exponent+0x4c>
 8004c2c:	2330      	movs	r3, #48	; 0x30
 8004c2e:	3130      	adds	r1, #48	; 0x30
 8004c30:	7083      	strb	r3, [r0, #2]
 8004c32:	70c1      	strb	r1, [r0, #3]
 8004c34:	1d03      	adds	r3, r0, #4
 8004c36:	e7f1      	b.n	8004c1c <__exponent+0x60>

08004c38 <_printf_float>:
 8004c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c3c:	ed2d 8b02 	vpush	{d8}
 8004c40:	b08d      	sub	sp, #52	; 0x34
 8004c42:	460c      	mov	r4, r1
 8004c44:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004c48:	4616      	mov	r6, r2
 8004c4a:	461f      	mov	r7, r3
 8004c4c:	4605      	mov	r5, r0
 8004c4e:	f003 f9ab 	bl	8007fa8 <_localeconv_r>
 8004c52:	f8d0 a000 	ldr.w	sl, [r0]
 8004c56:	4650      	mov	r0, sl
 8004c58:	f7fb faca 	bl	80001f0 <strlen>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	930a      	str	r3, [sp, #40]	; 0x28
 8004c60:	6823      	ldr	r3, [r4, #0]
 8004c62:	9305      	str	r3, [sp, #20]
 8004c64:	f8d8 3000 	ldr.w	r3, [r8]
 8004c68:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004c6c:	3307      	adds	r3, #7
 8004c6e:	f023 0307 	bic.w	r3, r3, #7
 8004c72:	f103 0208 	add.w	r2, r3, #8
 8004c76:	f8c8 2000 	str.w	r2, [r8]
 8004c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004c82:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004c86:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004c8a:	9307      	str	r3, [sp, #28]
 8004c8c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004c90:	ee08 0a10 	vmov	s16, r0
 8004c94:	4b9f      	ldr	r3, [pc, #636]	; (8004f14 <_printf_float+0x2dc>)
 8004c96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c9e:	f7fb ff55 	bl	8000b4c <__aeabi_dcmpun>
 8004ca2:	bb88      	cbnz	r0, 8004d08 <_printf_float+0xd0>
 8004ca4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ca8:	4b9a      	ldr	r3, [pc, #616]	; (8004f14 <_printf_float+0x2dc>)
 8004caa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004cae:	f7fb ff2f 	bl	8000b10 <__aeabi_dcmple>
 8004cb2:	bb48      	cbnz	r0, 8004d08 <_printf_float+0xd0>
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	4640      	mov	r0, r8
 8004cba:	4649      	mov	r1, r9
 8004cbc:	f7fb ff1e 	bl	8000afc <__aeabi_dcmplt>
 8004cc0:	b110      	cbz	r0, 8004cc8 <_printf_float+0x90>
 8004cc2:	232d      	movs	r3, #45	; 0x2d
 8004cc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cc8:	4b93      	ldr	r3, [pc, #588]	; (8004f18 <_printf_float+0x2e0>)
 8004cca:	4894      	ldr	r0, [pc, #592]	; (8004f1c <_printf_float+0x2e4>)
 8004ccc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004cd0:	bf94      	ite	ls
 8004cd2:	4698      	movls	r8, r3
 8004cd4:	4680      	movhi	r8, r0
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	6123      	str	r3, [r4, #16]
 8004cda:	9b05      	ldr	r3, [sp, #20]
 8004cdc:	f023 0204 	bic.w	r2, r3, #4
 8004ce0:	6022      	str	r2, [r4, #0]
 8004ce2:	f04f 0900 	mov.w	r9, #0
 8004ce6:	9700      	str	r7, [sp, #0]
 8004ce8:	4633      	mov	r3, r6
 8004cea:	aa0b      	add	r2, sp, #44	; 0x2c
 8004cec:	4621      	mov	r1, r4
 8004cee:	4628      	mov	r0, r5
 8004cf0:	f000 f9d8 	bl	80050a4 <_printf_common>
 8004cf4:	3001      	adds	r0, #1
 8004cf6:	f040 8090 	bne.w	8004e1a <_printf_float+0x1e2>
 8004cfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cfe:	b00d      	add	sp, #52	; 0x34
 8004d00:	ecbd 8b02 	vpop	{d8}
 8004d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d08:	4642      	mov	r2, r8
 8004d0a:	464b      	mov	r3, r9
 8004d0c:	4640      	mov	r0, r8
 8004d0e:	4649      	mov	r1, r9
 8004d10:	f7fb ff1c 	bl	8000b4c <__aeabi_dcmpun>
 8004d14:	b140      	cbz	r0, 8004d28 <_printf_float+0xf0>
 8004d16:	464b      	mov	r3, r9
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	bfbc      	itt	lt
 8004d1c:	232d      	movlt	r3, #45	; 0x2d
 8004d1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004d22:	487f      	ldr	r0, [pc, #508]	; (8004f20 <_printf_float+0x2e8>)
 8004d24:	4b7f      	ldr	r3, [pc, #508]	; (8004f24 <_printf_float+0x2ec>)
 8004d26:	e7d1      	b.n	8004ccc <_printf_float+0x94>
 8004d28:	6863      	ldr	r3, [r4, #4]
 8004d2a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004d2e:	9206      	str	r2, [sp, #24]
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	d13f      	bne.n	8004db4 <_printf_float+0x17c>
 8004d34:	2306      	movs	r3, #6
 8004d36:	6063      	str	r3, [r4, #4]
 8004d38:	9b05      	ldr	r3, [sp, #20]
 8004d3a:	6861      	ldr	r1, [r4, #4]
 8004d3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004d40:	2300      	movs	r3, #0
 8004d42:	9303      	str	r3, [sp, #12]
 8004d44:	ab0a      	add	r3, sp, #40	; 0x28
 8004d46:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004d4a:	ab09      	add	r3, sp, #36	; 0x24
 8004d4c:	ec49 8b10 	vmov	d0, r8, r9
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	6022      	str	r2, [r4, #0]
 8004d54:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004d58:	4628      	mov	r0, r5
 8004d5a:	f7ff fecd 	bl	8004af8 <__cvt>
 8004d5e:	9b06      	ldr	r3, [sp, #24]
 8004d60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d62:	2b47      	cmp	r3, #71	; 0x47
 8004d64:	4680      	mov	r8, r0
 8004d66:	d108      	bne.n	8004d7a <_printf_float+0x142>
 8004d68:	1cc8      	adds	r0, r1, #3
 8004d6a:	db02      	blt.n	8004d72 <_printf_float+0x13a>
 8004d6c:	6863      	ldr	r3, [r4, #4]
 8004d6e:	4299      	cmp	r1, r3
 8004d70:	dd41      	ble.n	8004df6 <_printf_float+0x1be>
 8004d72:	f1ab 0b02 	sub.w	fp, fp, #2
 8004d76:	fa5f fb8b 	uxtb.w	fp, fp
 8004d7a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004d7e:	d820      	bhi.n	8004dc2 <_printf_float+0x18a>
 8004d80:	3901      	subs	r1, #1
 8004d82:	465a      	mov	r2, fp
 8004d84:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004d88:	9109      	str	r1, [sp, #36]	; 0x24
 8004d8a:	f7ff ff17 	bl	8004bbc <__exponent>
 8004d8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d90:	1813      	adds	r3, r2, r0
 8004d92:	2a01      	cmp	r2, #1
 8004d94:	4681      	mov	r9, r0
 8004d96:	6123      	str	r3, [r4, #16]
 8004d98:	dc02      	bgt.n	8004da0 <_printf_float+0x168>
 8004d9a:	6822      	ldr	r2, [r4, #0]
 8004d9c:	07d2      	lsls	r2, r2, #31
 8004d9e:	d501      	bpl.n	8004da4 <_printf_float+0x16c>
 8004da0:	3301      	adds	r3, #1
 8004da2:	6123      	str	r3, [r4, #16]
 8004da4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d09c      	beq.n	8004ce6 <_printf_float+0xae>
 8004dac:	232d      	movs	r3, #45	; 0x2d
 8004dae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004db2:	e798      	b.n	8004ce6 <_printf_float+0xae>
 8004db4:	9a06      	ldr	r2, [sp, #24]
 8004db6:	2a47      	cmp	r2, #71	; 0x47
 8004db8:	d1be      	bne.n	8004d38 <_printf_float+0x100>
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1bc      	bne.n	8004d38 <_printf_float+0x100>
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e7b9      	b.n	8004d36 <_printf_float+0xfe>
 8004dc2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004dc6:	d118      	bne.n	8004dfa <_printf_float+0x1c2>
 8004dc8:	2900      	cmp	r1, #0
 8004dca:	6863      	ldr	r3, [r4, #4]
 8004dcc:	dd0b      	ble.n	8004de6 <_printf_float+0x1ae>
 8004dce:	6121      	str	r1, [r4, #16]
 8004dd0:	b913      	cbnz	r3, 8004dd8 <_printf_float+0x1a0>
 8004dd2:	6822      	ldr	r2, [r4, #0]
 8004dd4:	07d0      	lsls	r0, r2, #31
 8004dd6:	d502      	bpl.n	8004dde <_printf_float+0x1a6>
 8004dd8:	3301      	adds	r3, #1
 8004dda:	440b      	add	r3, r1
 8004ddc:	6123      	str	r3, [r4, #16]
 8004dde:	65a1      	str	r1, [r4, #88]	; 0x58
 8004de0:	f04f 0900 	mov.w	r9, #0
 8004de4:	e7de      	b.n	8004da4 <_printf_float+0x16c>
 8004de6:	b913      	cbnz	r3, 8004dee <_printf_float+0x1b6>
 8004de8:	6822      	ldr	r2, [r4, #0]
 8004dea:	07d2      	lsls	r2, r2, #31
 8004dec:	d501      	bpl.n	8004df2 <_printf_float+0x1ba>
 8004dee:	3302      	adds	r3, #2
 8004df0:	e7f4      	b.n	8004ddc <_printf_float+0x1a4>
 8004df2:	2301      	movs	r3, #1
 8004df4:	e7f2      	b.n	8004ddc <_printf_float+0x1a4>
 8004df6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dfc:	4299      	cmp	r1, r3
 8004dfe:	db05      	blt.n	8004e0c <_printf_float+0x1d4>
 8004e00:	6823      	ldr	r3, [r4, #0]
 8004e02:	6121      	str	r1, [r4, #16]
 8004e04:	07d8      	lsls	r0, r3, #31
 8004e06:	d5ea      	bpl.n	8004dde <_printf_float+0x1a6>
 8004e08:	1c4b      	adds	r3, r1, #1
 8004e0a:	e7e7      	b.n	8004ddc <_printf_float+0x1a4>
 8004e0c:	2900      	cmp	r1, #0
 8004e0e:	bfd4      	ite	le
 8004e10:	f1c1 0202 	rsble	r2, r1, #2
 8004e14:	2201      	movgt	r2, #1
 8004e16:	4413      	add	r3, r2
 8004e18:	e7e0      	b.n	8004ddc <_printf_float+0x1a4>
 8004e1a:	6823      	ldr	r3, [r4, #0]
 8004e1c:	055a      	lsls	r2, r3, #21
 8004e1e:	d407      	bmi.n	8004e30 <_printf_float+0x1f8>
 8004e20:	6923      	ldr	r3, [r4, #16]
 8004e22:	4642      	mov	r2, r8
 8004e24:	4631      	mov	r1, r6
 8004e26:	4628      	mov	r0, r5
 8004e28:	47b8      	blx	r7
 8004e2a:	3001      	adds	r0, #1
 8004e2c:	d12c      	bne.n	8004e88 <_printf_float+0x250>
 8004e2e:	e764      	b.n	8004cfa <_printf_float+0xc2>
 8004e30:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004e34:	f240 80e0 	bls.w	8004ff8 <_printf_float+0x3c0>
 8004e38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	2300      	movs	r3, #0
 8004e40:	f7fb fe52 	bl	8000ae8 <__aeabi_dcmpeq>
 8004e44:	2800      	cmp	r0, #0
 8004e46:	d034      	beq.n	8004eb2 <_printf_float+0x27a>
 8004e48:	4a37      	ldr	r2, [pc, #220]	; (8004f28 <_printf_float+0x2f0>)
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	4631      	mov	r1, r6
 8004e4e:	4628      	mov	r0, r5
 8004e50:	47b8      	blx	r7
 8004e52:	3001      	adds	r0, #1
 8004e54:	f43f af51 	beq.w	8004cfa <_printf_float+0xc2>
 8004e58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	db02      	blt.n	8004e66 <_printf_float+0x22e>
 8004e60:	6823      	ldr	r3, [r4, #0]
 8004e62:	07d8      	lsls	r0, r3, #31
 8004e64:	d510      	bpl.n	8004e88 <_printf_float+0x250>
 8004e66:	ee18 3a10 	vmov	r3, s16
 8004e6a:	4652      	mov	r2, sl
 8004e6c:	4631      	mov	r1, r6
 8004e6e:	4628      	mov	r0, r5
 8004e70:	47b8      	blx	r7
 8004e72:	3001      	adds	r0, #1
 8004e74:	f43f af41 	beq.w	8004cfa <_printf_float+0xc2>
 8004e78:	f04f 0800 	mov.w	r8, #0
 8004e7c:	f104 091a 	add.w	r9, r4, #26
 8004e80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e82:	3b01      	subs	r3, #1
 8004e84:	4543      	cmp	r3, r8
 8004e86:	dc09      	bgt.n	8004e9c <_printf_float+0x264>
 8004e88:	6823      	ldr	r3, [r4, #0]
 8004e8a:	079b      	lsls	r3, r3, #30
 8004e8c:	f100 8105 	bmi.w	800509a <_printf_float+0x462>
 8004e90:	68e0      	ldr	r0, [r4, #12]
 8004e92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e94:	4298      	cmp	r0, r3
 8004e96:	bfb8      	it	lt
 8004e98:	4618      	movlt	r0, r3
 8004e9a:	e730      	b.n	8004cfe <_printf_float+0xc6>
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	464a      	mov	r2, r9
 8004ea0:	4631      	mov	r1, r6
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	47b8      	blx	r7
 8004ea6:	3001      	adds	r0, #1
 8004ea8:	f43f af27 	beq.w	8004cfa <_printf_float+0xc2>
 8004eac:	f108 0801 	add.w	r8, r8, #1
 8004eb0:	e7e6      	b.n	8004e80 <_printf_float+0x248>
 8004eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	dc39      	bgt.n	8004f2c <_printf_float+0x2f4>
 8004eb8:	4a1b      	ldr	r2, [pc, #108]	; (8004f28 <_printf_float+0x2f0>)
 8004eba:	2301      	movs	r3, #1
 8004ebc:	4631      	mov	r1, r6
 8004ebe:	4628      	mov	r0, r5
 8004ec0:	47b8      	blx	r7
 8004ec2:	3001      	adds	r0, #1
 8004ec4:	f43f af19 	beq.w	8004cfa <_printf_float+0xc2>
 8004ec8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	d102      	bne.n	8004ed6 <_printf_float+0x29e>
 8004ed0:	6823      	ldr	r3, [r4, #0]
 8004ed2:	07d9      	lsls	r1, r3, #31
 8004ed4:	d5d8      	bpl.n	8004e88 <_printf_float+0x250>
 8004ed6:	ee18 3a10 	vmov	r3, s16
 8004eda:	4652      	mov	r2, sl
 8004edc:	4631      	mov	r1, r6
 8004ede:	4628      	mov	r0, r5
 8004ee0:	47b8      	blx	r7
 8004ee2:	3001      	adds	r0, #1
 8004ee4:	f43f af09 	beq.w	8004cfa <_printf_float+0xc2>
 8004ee8:	f04f 0900 	mov.w	r9, #0
 8004eec:	f104 0a1a 	add.w	sl, r4, #26
 8004ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ef2:	425b      	negs	r3, r3
 8004ef4:	454b      	cmp	r3, r9
 8004ef6:	dc01      	bgt.n	8004efc <_printf_float+0x2c4>
 8004ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004efa:	e792      	b.n	8004e22 <_printf_float+0x1ea>
 8004efc:	2301      	movs	r3, #1
 8004efe:	4652      	mov	r2, sl
 8004f00:	4631      	mov	r1, r6
 8004f02:	4628      	mov	r0, r5
 8004f04:	47b8      	blx	r7
 8004f06:	3001      	adds	r0, #1
 8004f08:	f43f aef7 	beq.w	8004cfa <_printf_float+0xc2>
 8004f0c:	f109 0901 	add.w	r9, r9, #1
 8004f10:	e7ee      	b.n	8004ef0 <_printf_float+0x2b8>
 8004f12:	bf00      	nop
 8004f14:	7fefffff 	.word	0x7fefffff
 8004f18:	08009740 	.word	0x08009740
 8004f1c:	08009744 	.word	0x08009744
 8004f20:	0800974c 	.word	0x0800974c
 8004f24:	08009748 	.word	0x08009748
 8004f28:	08009750 	.word	0x08009750
 8004f2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f30:	429a      	cmp	r2, r3
 8004f32:	bfa8      	it	ge
 8004f34:	461a      	movge	r2, r3
 8004f36:	2a00      	cmp	r2, #0
 8004f38:	4691      	mov	r9, r2
 8004f3a:	dc37      	bgt.n	8004fac <_printf_float+0x374>
 8004f3c:	f04f 0b00 	mov.w	fp, #0
 8004f40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f44:	f104 021a 	add.w	r2, r4, #26
 8004f48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f4a:	9305      	str	r3, [sp, #20]
 8004f4c:	eba3 0309 	sub.w	r3, r3, r9
 8004f50:	455b      	cmp	r3, fp
 8004f52:	dc33      	bgt.n	8004fbc <_printf_float+0x384>
 8004f54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	db3b      	blt.n	8004fd4 <_printf_float+0x39c>
 8004f5c:	6823      	ldr	r3, [r4, #0]
 8004f5e:	07da      	lsls	r2, r3, #31
 8004f60:	d438      	bmi.n	8004fd4 <_printf_float+0x39c>
 8004f62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f64:	9a05      	ldr	r2, [sp, #20]
 8004f66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f68:	1a9a      	subs	r2, r3, r2
 8004f6a:	eba3 0901 	sub.w	r9, r3, r1
 8004f6e:	4591      	cmp	r9, r2
 8004f70:	bfa8      	it	ge
 8004f72:	4691      	movge	r9, r2
 8004f74:	f1b9 0f00 	cmp.w	r9, #0
 8004f78:	dc35      	bgt.n	8004fe6 <_printf_float+0x3ae>
 8004f7a:	f04f 0800 	mov.w	r8, #0
 8004f7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f82:	f104 0a1a 	add.w	sl, r4, #26
 8004f86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f8a:	1a9b      	subs	r3, r3, r2
 8004f8c:	eba3 0309 	sub.w	r3, r3, r9
 8004f90:	4543      	cmp	r3, r8
 8004f92:	f77f af79 	ble.w	8004e88 <_printf_float+0x250>
 8004f96:	2301      	movs	r3, #1
 8004f98:	4652      	mov	r2, sl
 8004f9a:	4631      	mov	r1, r6
 8004f9c:	4628      	mov	r0, r5
 8004f9e:	47b8      	blx	r7
 8004fa0:	3001      	adds	r0, #1
 8004fa2:	f43f aeaa 	beq.w	8004cfa <_printf_float+0xc2>
 8004fa6:	f108 0801 	add.w	r8, r8, #1
 8004faa:	e7ec      	b.n	8004f86 <_printf_float+0x34e>
 8004fac:	4613      	mov	r3, r2
 8004fae:	4631      	mov	r1, r6
 8004fb0:	4642      	mov	r2, r8
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	47b8      	blx	r7
 8004fb6:	3001      	adds	r0, #1
 8004fb8:	d1c0      	bne.n	8004f3c <_printf_float+0x304>
 8004fba:	e69e      	b.n	8004cfa <_printf_float+0xc2>
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	4631      	mov	r1, r6
 8004fc0:	4628      	mov	r0, r5
 8004fc2:	9205      	str	r2, [sp, #20]
 8004fc4:	47b8      	blx	r7
 8004fc6:	3001      	adds	r0, #1
 8004fc8:	f43f ae97 	beq.w	8004cfa <_printf_float+0xc2>
 8004fcc:	9a05      	ldr	r2, [sp, #20]
 8004fce:	f10b 0b01 	add.w	fp, fp, #1
 8004fd2:	e7b9      	b.n	8004f48 <_printf_float+0x310>
 8004fd4:	ee18 3a10 	vmov	r3, s16
 8004fd8:	4652      	mov	r2, sl
 8004fda:	4631      	mov	r1, r6
 8004fdc:	4628      	mov	r0, r5
 8004fde:	47b8      	blx	r7
 8004fe0:	3001      	adds	r0, #1
 8004fe2:	d1be      	bne.n	8004f62 <_printf_float+0x32a>
 8004fe4:	e689      	b.n	8004cfa <_printf_float+0xc2>
 8004fe6:	9a05      	ldr	r2, [sp, #20]
 8004fe8:	464b      	mov	r3, r9
 8004fea:	4442      	add	r2, r8
 8004fec:	4631      	mov	r1, r6
 8004fee:	4628      	mov	r0, r5
 8004ff0:	47b8      	blx	r7
 8004ff2:	3001      	adds	r0, #1
 8004ff4:	d1c1      	bne.n	8004f7a <_printf_float+0x342>
 8004ff6:	e680      	b.n	8004cfa <_printf_float+0xc2>
 8004ff8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ffa:	2a01      	cmp	r2, #1
 8004ffc:	dc01      	bgt.n	8005002 <_printf_float+0x3ca>
 8004ffe:	07db      	lsls	r3, r3, #31
 8005000:	d538      	bpl.n	8005074 <_printf_float+0x43c>
 8005002:	2301      	movs	r3, #1
 8005004:	4642      	mov	r2, r8
 8005006:	4631      	mov	r1, r6
 8005008:	4628      	mov	r0, r5
 800500a:	47b8      	blx	r7
 800500c:	3001      	adds	r0, #1
 800500e:	f43f ae74 	beq.w	8004cfa <_printf_float+0xc2>
 8005012:	ee18 3a10 	vmov	r3, s16
 8005016:	4652      	mov	r2, sl
 8005018:	4631      	mov	r1, r6
 800501a:	4628      	mov	r0, r5
 800501c:	47b8      	blx	r7
 800501e:	3001      	adds	r0, #1
 8005020:	f43f ae6b 	beq.w	8004cfa <_printf_float+0xc2>
 8005024:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005028:	2200      	movs	r2, #0
 800502a:	2300      	movs	r3, #0
 800502c:	f7fb fd5c 	bl	8000ae8 <__aeabi_dcmpeq>
 8005030:	b9d8      	cbnz	r0, 800506a <_printf_float+0x432>
 8005032:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005034:	f108 0201 	add.w	r2, r8, #1
 8005038:	3b01      	subs	r3, #1
 800503a:	4631      	mov	r1, r6
 800503c:	4628      	mov	r0, r5
 800503e:	47b8      	blx	r7
 8005040:	3001      	adds	r0, #1
 8005042:	d10e      	bne.n	8005062 <_printf_float+0x42a>
 8005044:	e659      	b.n	8004cfa <_printf_float+0xc2>
 8005046:	2301      	movs	r3, #1
 8005048:	4652      	mov	r2, sl
 800504a:	4631      	mov	r1, r6
 800504c:	4628      	mov	r0, r5
 800504e:	47b8      	blx	r7
 8005050:	3001      	adds	r0, #1
 8005052:	f43f ae52 	beq.w	8004cfa <_printf_float+0xc2>
 8005056:	f108 0801 	add.w	r8, r8, #1
 800505a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800505c:	3b01      	subs	r3, #1
 800505e:	4543      	cmp	r3, r8
 8005060:	dcf1      	bgt.n	8005046 <_printf_float+0x40e>
 8005062:	464b      	mov	r3, r9
 8005064:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005068:	e6dc      	b.n	8004e24 <_printf_float+0x1ec>
 800506a:	f04f 0800 	mov.w	r8, #0
 800506e:	f104 0a1a 	add.w	sl, r4, #26
 8005072:	e7f2      	b.n	800505a <_printf_float+0x422>
 8005074:	2301      	movs	r3, #1
 8005076:	4642      	mov	r2, r8
 8005078:	e7df      	b.n	800503a <_printf_float+0x402>
 800507a:	2301      	movs	r3, #1
 800507c:	464a      	mov	r2, r9
 800507e:	4631      	mov	r1, r6
 8005080:	4628      	mov	r0, r5
 8005082:	47b8      	blx	r7
 8005084:	3001      	adds	r0, #1
 8005086:	f43f ae38 	beq.w	8004cfa <_printf_float+0xc2>
 800508a:	f108 0801 	add.w	r8, r8, #1
 800508e:	68e3      	ldr	r3, [r4, #12]
 8005090:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005092:	1a5b      	subs	r3, r3, r1
 8005094:	4543      	cmp	r3, r8
 8005096:	dcf0      	bgt.n	800507a <_printf_float+0x442>
 8005098:	e6fa      	b.n	8004e90 <_printf_float+0x258>
 800509a:	f04f 0800 	mov.w	r8, #0
 800509e:	f104 0919 	add.w	r9, r4, #25
 80050a2:	e7f4      	b.n	800508e <_printf_float+0x456>

080050a4 <_printf_common>:
 80050a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050a8:	4616      	mov	r6, r2
 80050aa:	4699      	mov	r9, r3
 80050ac:	688a      	ldr	r2, [r1, #8]
 80050ae:	690b      	ldr	r3, [r1, #16]
 80050b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050b4:	4293      	cmp	r3, r2
 80050b6:	bfb8      	it	lt
 80050b8:	4613      	movlt	r3, r2
 80050ba:	6033      	str	r3, [r6, #0]
 80050bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050c0:	4607      	mov	r7, r0
 80050c2:	460c      	mov	r4, r1
 80050c4:	b10a      	cbz	r2, 80050ca <_printf_common+0x26>
 80050c6:	3301      	adds	r3, #1
 80050c8:	6033      	str	r3, [r6, #0]
 80050ca:	6823      	ldr	r3, [r4, #0]
 80050cc:	0699      	lsls	r1, r3, #26
 80050ce:	bf42      	ittt	mi
 80050d0:	6833      	ldrmi	r3, [r6, #0]
 80050d2:	3302      	addmi	r3, #2
 80050d4:	6033      	strmi	r3, [r6, #0]
 80050d6:	6825      	ldr	r5, [r4, #0]
 80050d8:	f015 0506 	ands.w	r5, r5, #6
 80050dc:	d106      	bne.n	80050ec <_printf_common+0x48>
 80050de:	f104 0a19 	add.w	sl, r4, #25
 80050e2:	68e3      	ldr	r3, [r4, #12]
 80050e4:	6832      	ldr	r2, [r6, #0]
 80050e6:	1a9b      	subs	r3, r3, r2
 80050e8:	42ab      	cmp	r3, r5
 80050ea:	dc26      	bgt.n	800513a <_printf_common+0x96>
 80050ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050f0:	1e13      	subs	r3, r2, #0
 80050f2:	6822      	ldr	r2, [r4, #0]
 80050f4:	bf18      	it	ne
 80050f6:	2301      	movne	r3, #1
 80050f8:	0692      	lsls	r2, r2, #26
 80050fa:	d42b      	bmi.n	8005154 <_printf_common+0xb0>
 80050fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005100:	4649      	mov	r1, r9
 8005102:	4638      	mov	r0, r7
 8005104:	47c0      	blx	r8
 8005106:	3001      	adds	r0, #1
 8005108:	d01e      	beq.n	8005148 <_printf_common+0xa4>
 800510a:	6823      	ldr	r3, [r4, #0]
 800510c:	68e5      	ldr	r5, [r4, #12]
 800510e:	6832      	ldr	r2, [r6, #0]
 8005110:	f003 0306 	and.w	r3, r3, #6
 8005114:	2b04      	cmp	r3, #4
 8005116:	bf08      	it	eq
 8005118:	1aad      	subeq	r5, r5, r2
 800511a:	68a3      	ldr	r3, [r4, #8]
 800511c:	6922      	ldr	r2, [r4, #16]
 800511e:	bf0c      	ite	eq
 8005120:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005124:	2500      	movne	r5, #0
 8005126:	4293      	cmp	r3, r2
 8005128:	bfc4      	itt	gt
 800512a:	1a9b      	subgt	r3, r3, r2
 800512c:	18ed      	addgt	r5, r5, r3
 800512e:	2600      	movs	r6, #0
 8005130:	341a      	adds	r4, #26
 8005132:	42b5      	cmp	r5, r6
 8005134:	d11a      	bne.n	800516c <_printf_common+0xc8>
 8005136:	2000      	movs	r0, #0
 8005138:	e008      	b.n	800514c <_printf_common+0xa8>
 800513a:	2301      	movs	r3, #1
 800513c:	4652      	mov	r2, sl
 800513e:	4649      	mov	r1, r9
 8005140:	4638      	mov	r0, r7
 8005142:	47c0      	blx	r8
 8005144:	3001      	adds	r0, #1
 8005146:	d103      	bne.n	8005150 <_printf_common+0xac>
 8005148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800514c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005150:	3501      	adds	r5, #1
 8005152:	e7c6      	b.n	80050e2 <_printf_common+0x3e>
 8005154:	18e1      	adds	r1, r4, r3
 8005156:	1c5a      	adds	r2, r3, #1
 8005158:	2030      	movs	r0, #48	; 0x30
 800515a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800515e:	4422      	add	r2, r4
 8005160:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005164:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005168:	3302      	adds	r3, #2
 800516a:	e7c7      	b.n	80050fc <_printf_common+0x58>
 800516c:	2301      	movs	r3, #1
 800516e:	4622      	mov	r2, r4
 8005170:	4649      	mov	r1, r9
 8005172:	4638      	mov	r0, r7
 8005174:	47c0      	blx	r8
 8005176:	3001      	adds	r0, #1
 8005178:	d0e6      	beq.n	8005148 <_printf_common+0xa4>
 800517a:	3601      	adds	r6, #1
 800517c:	e7d9      	b.n	8005132 <_printf_common+0x8e>
	...

08005180 <_printf_i>:
 8005180:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005184:	7e0f      	ldrb	r7, [r1, #24]
 8005186:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005188:	2f78      	cmp	r7, #120	; 0x78
 800518a:	4691      	mov	r9, r2
 800518c:	4680      	mov	r8, r0
 800518e:	460c      	mov	r4, r1
 8005190:	469a      	mov	sl, r3
 8005192:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005196:	d807      	bhi.n	80051a8 <_printf_i+0x28>
 8005198:	2f62      	cmp	r7, #98	; 0x62
 800519a:	d80a      	bhi.n	80051b2 <_printf_i+0x32>
 800519c:	2f00      	cmp	r7, #0
 800519e:	f000 80d8 	beq.w	8005352 <_printf_i+0x1d2>
 80051a2:	2f58      	cmp	r7, #88	; 0x58
 80051a4:	f000 80a3 	beq.w	80052ee <_printf_i+0x16e>
 80051a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80051b0:	e03a      	b.n	8005228 <_printf_i+0xa8>
 80051b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051b6:	2b15      	cmp	r3, #21
 80051b8:	d8f6      	bhi.n	80051a8 <_printf_i+0x28>
 80051ba:	a101      	add	r1, pc, #4	; (adr r1, 80051c0 <_printf_i+0x40>)
 80051bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051c0:	08005219 	.word	0x08005219
 80051c4:	0800522d 	.word	0x0800522d
 80051c8:	080051a9 	.word	0x080051a9
 80051cc:	080051a9 	.word	0x080051a9
 80051d0:	080051a9 	.word	0x080051a9
 80051d4:	080051a9 	.word	0x080051a9
 80051d8:	0800522d 	.word	0x0800522d
 80051dc:	080051a9 	.word	0x080051a9
 80051e0:	080051a9 	.word	0x080051a9
 80051e4:	080051a9 	.word	0x080051a9
 80051e8:	080051a9 	.word	0x080051a9
 80051ec:	08005339 	.word	0x08005339
 80051f0:	0800525d 	.word	0x0800525d
 80051f4:	0800531b 	.word	0x0800531b
 80051f8:	080051a9 	.word	0x080051a9
 80051fc:	080051a9 	.word	0x080051a9
 8005200:	0800535b 	.word	0x0800535b
 8005204:	080051a9 	.word	0x080051a9
 8005208:	0800525d 	.word	0x0800525d
 800520c:	080051a9 	.word	0x080051a9
 8005210:	080051a9 	.word	0x080051a9
 8005214:	08005323 	.word	0x08005323
 8005218:	682b      	ldr	r3, [r5, #0]
 800521a:	1d1a      	adds	r2, r3, #4
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	602a      	str	r2, [r5, #0]
 8005220:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005224:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005228:	2301      	movs	r3, #1
 800522a:	e0a3      	b.n	8005374 <_printf_i+0x1f4>
 800522c:	6820      	ldr	r0, [r4, #0]
 800522e:	6829      	ldr	r1, [r5, #0]
 8005230:	0606      	lsls	r6, r0, #24
 8005232:	f101 0304 	add.w	r3, r1, #4
 8005236:	d50a      	bpl.n	800524e <_printf_i+0xce>
 8005238:	680e      	ldr	r6, [r1, #0]
 800523a:	602b      	str	r3, [r5, #0]
 800523c:	2e00      	cmp	r6, #0
 800523e:	da03      	bge.n	8005248 <_printf_i+0xc8>
 8005240:	232d      	movs	r3, #45	; 0x2d
 8005242:	4276      	negs	r6, r6
 8005244:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005248:	485e      	ldr	r0, [pc, #376]	; (80053c4 <_printf_i+0x244>)
 800524a:	230a      	movs	r3, #10
 800524c:	e019      	b.n	8005282 <_printf_i+0x102>
 800524e:	680e      	ldr	r6, [r1, #0]
 8005250:	602b      	str	r3, [r5, #0]
 8005252:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005256:	bf18      	it	ne
 8005258:	b236      	sxthne	r6, r6
 800525a:	e7ef      	b.n	800523c <_printf_i+0xbc>
 800525c:	682b      	ldr	r3, [r5, #0]
 800525e:	6820      	ldr	r0, [r4, #0]
 8005260:	1d19      	adds	r1, r3, #4
 8005262:	6029      	str	r1, [r5, #0]
 8005264:	0601      	lsls	r1, r0, #24
 8005266:	d501      	bpl.n	800526c <_printf_i+0xec>
 8005268:	681e      	ldr	r6, [r3, #0]
 800526a:	e002      	b.n	8005272 <_printf_i+0xf2>
 800526c:	0646      	lsls	r6, r0, #25
 800526e:	d5fb      	bpl.n	8005268 <_printf_i+0xe8>
 8005270:	881e      	ldrh	r6, [r3, #0]
 8005272:	4854      	ldr	r0, [pc, #336]	; (80053c4 <_printf_i+0x244>)
 8005274:	2f6f      	cmp	r7, #111	; 0x6f
 8005276:	bf0c      	ite	eq
 8005278:	2308      	moveq	r3, #8
 800527a:	230a      	movne	r3, #10
 800527c:	2100      	movs	r1, #0
 800527e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005282:	6865      	ldr	r5, [r4, #4]
 8005284:	60a5      	str	r5, [r4, #8]
 8005286:	2d00      	cmp	r5, #0
 8005288:	bfa2      	ittt	ge
 800528a:	6821      	ldrge	r1, [r4, #0]
 800528c:	f021 0104 	bicge.w	r1, r1, #4
 8005290:	6021      	strge	r1, [r4, #0]
 8005292:	b90e      	cbnz	r6, 8005298 <_printf_i+0x118>
 8005294:	2d00      	cmp	r5, #0
 8005296:	d04d      	beq.n	8005334 <_printf_i+0x1b4>
 8005298:	4615      	mov	r5, r2
 800529a:	fbb6 f1f3 	udiv	r1, r6, r3
 800529e:	fb03 6711 	mls	r7, r3, r1, r6
 80052a2:	5dc7      	ldrb	r7, [r0, r7]
 80052a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80052a8:	4637      	mov	r7, r6
 80052aa:	42bb      	cmp	r3, r7
 80052ac:	460e      	mov	r6, r1
 80052ae:	d9f4      	bls.n	800529a <_printf_i+0x11a>
 80052b0:	2b08      	cmp	r3, #8
 80052b2:	d10b      	bne.n	80052cc <_printf_i+0x14c>
 80052b4:	6823      	ldr	r3, [r4, #0]
 80052b6:	07de      	lsls	r6, r3, #31
 80052b8:	d508      	bpl.n	80052cc <_printf_i+0x14c>
 80052ba:	6923      	ldr	r3, [r4, #16]
 80052bc:	6861      	ldr	r1, [r4, #4]
 80052be:	4299      	cmp	r1, r3
 80052c0:	bfde      	ittt	le
 80052c2:	2330      	movle	r3, #48	; 0x30
 80052c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052c8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80052cc:	1b52      	subs	r2, r2, r5
 80052ce:	6122      	str	r2, [r4, #16]
 80052d0:	f8cd a000 	str.w	sl, [sp]
 80052d4:	464b      	mov	r3, r9
 80052d6:	aa03      	add	r2, sp, #12
 80052d8:	4621      	mov	r1, r4
 80052da:	4640      	mov	r0, r8
 80052dc:	f7ff fee2 	bl	80050a4 <_printf_common>
 80052e0:	3001      	adds	r0, #1
 80052e2:	d14c      	bne.n	800537e <_printf_i+0x1fe>
 80052e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052e8:	b004      	add	sp, #16
 80052ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ee:	4835      	ldr	r0, [pc, #212]	; (80053c4 <_printf_i+0x244>)
 80052f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80052f4:	6829      	ldr	r1, [r5, #0]
 80052f6:	6823      	ldr	r3, [r4, #0]
 80052f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80052fc:	6029      	str	r1, [r5, #0]
 80052fe:	061d      	lsls	r5, r3, #24
 8005300:	d514      	bpl.n	800532c <_printf_i+0x1ac>
 8005302:	07df      	lsls	r7, r3, #31
 8005304:	bf44      	itt	mi
 8005306:	f043 0320 	orrmi.w	r3, r3, #32
 800530a:	6023      	strmi	r3, [r4, #0]
 800530c:	b91e      	cbnz	r6, 8005316 <_printf_i+0x196>
 800530e:	6823      	ldr	r3, [r4, #0]
 8005310:	f023 0320 	bic.w	r3, r3, #32
 8005314:	6023      	str	r3, [r4, #0]
 8005316:	2310      	movs	r3, #16
 8005318:	e7b0      	b.n	800527c <_printf_i+0xfc>
 800531a:	6823      	ldr	r3, [r4, #0]
 800531c:	f043 0320 	orr.w	r3, r3, #32
 8005320:	6023      	str	r3, [r4, #0]
 8005322:	2378      	movs	r3, #120	; 0x78
 8005324:	4828      	ldr	r0, [pc, #160]	; (80053c8 <_printf_i+0x248>)
 8005326:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800532a:	e7e3      	b.n	80052f4 <_printf_i+0x174>
 800532c:	0659      	lsls	r1, r3, #25
 800532e:	bf48      	it	mi
 8005330:	b2b6      	uxthmi	r6, r6
 8005332:	e7e6      	b.n	8005302 <_printf_i+0x182>
 8005334:	4615      	mov	r5, r2
 8005336:	e7bb      	b.n	80052b0 <_printf_i+0x130>
 8005338:	682b      	ldr	r3, [r5, #0]
 800533a:	6826      	ldr	r6, [r4, #0]
 800533c:	6961      	ldr	r1, [r4, #20]
 800533e:	1d18      	adds	r0, r3, #4
 8005340:	6028      	str	r0, [r5, #0]
 8005342:	0635      	lsls	r5, r6, #24
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	d501      	bpl.n	800534c <_printf_i+0x1cc>
 8005348:	6019      	str	r1, [r3, #0]
 800534a:	e002      	b.n	8005352 <_printf_i+0x1d2>
 800534c:	0670      	lsls	r0, r6, #25
 800534e:	d5fb      	bpl.n	8005348 <_printf_i+0x1c8>
 8005350:	8019      	strh	r1, [r3, #0]
 8005352:	2300      	movs	r3, #0
 8005354:	6123      	str	r3, [r4, #16]
 8005356:	4615      	mov	r5, r2
 8005358:	e7ba      	b.n	80052d0 <_printf_i+0x150>
 800535a:	682b      	ldr	r3, [r5, #0]
 800535c:	1d1a      	adds	r2, r3, #4
 800535e:	602a      	str	r2, [r5, #0]
 8005360:	681d      	ldr	r5, [r3, #0]
 8005362:	6862      	ldr	r2, [r4, #4]
 8005364:	2100      	movs	r1, #0
 8005366:	4628      	mov	r0, r5
 8005368:	f7fa ff4a 	bl	8000200 <memchr>
 800536c:	b108      	cbz	r0, 8005372 <_printf_i+0x1f2>
 800536e:	1b40      	subs	r0, r0, r5
 8005370:	6060      	str	r0, [r4, #4]
 8005372:	6863      	ldr	r3, [r4, #4]
 8005374:	6123      	str	r3, [r4, #16]
 8005376:	2300      	movs	r3, #0
 8005378:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800537c:	e7a8      	b.n	80052d0 <_printf_i+0x150>
 800537e:	6923      	ldr	r3, [r4, #16]
 8005380:	462a      	mov	r2, r5
 8005382:	4649      	mov	r1, r9
 8005384:	4640      	mov	r0, r8
 8005386:	47d0      	blx	sl
 8005388:	3001      	adds	r0, #1
 800538a:	d0ab      	beq.n	80052e4 <_printf_i+0x164>
 800538c:	6823      	ldr	r3, [r4, #0]
 800538e:	079b      	lsls	r3, r3, #30
 8005390:	d413      	bmi.n	80053ba <_printf_i+0x23a>
 8005392:	68e0      	ldr	r0, [r4, #12]
 8005394:	9b03      	ldr	r3, [sp, #12]
 8005396:	4298      	cmp	r0, r3
 8005398:	bfb8      	it	lt
 800539a:	4618      	movlt	r0, r3
 800539c:	e7a4      	b.n	80052e8 <_printf_i+0x168>
 800539e:	2301      	movs	r3, #1
 80053a0:	4632      	mov	r2, r6
 80053a2:	4649      	mov	r1, r9
 80053a4:	4640      	mov	r0, r8
 80053a6:	47d0      	blx	sl
 80053a8:	3001      	adds	r0, #1
 80053aa:	d09b      	beq.n	80052e4 <_printf_i+0x164>
 80053ac:	3501      	adds	r5, #1
 80053ae:	68e3      	ldr	r3, [r4, #12]
 80053b0:	9903      	ldr	r1, [sp, #12]
 80053b2:	1a5b      	subs	r3, r3, r1
 80053b4:	42ab      	cmp	r3, r5
 80053b6:	dcf2      	bgt.n	800539e <_printf_i+0x21e>
 80053b8:	e7eb      	b.n	8005392 <_printf_i+0x212>
 80053ba:	2500      	movs	r5, #0
 80053bc:	f104 0619 	add.w	r6, r4, #25
 80053c0:	e7f5      	b.n	80053ae <_printf_i+0x22e>
 80053c2:	bf00      	nop
 80053c4:	08009752 	.word	0x08009752
 80053c8:	08009763 	.word	0x08009763

080053cc <_scanf_float>:
 80053cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053d0:	b087      	sub	sp, #28
 80053d2:	4617      	mov	r7, r2
 80053d4:	9303      	str	r3, [sp, #12]
 80053d6:	688b      	ldr	r3, [r1, #8]
 80053d8:	1e5a      	subs	r2, r3, #1
 80053da:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80053de:	bf83      	ittte	hi
 80053e0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80053e4:	195b      	addhi	r3, r3, r5
 80053e6:	9302      	strhi	r3, [sp, #8]
 80053e8:	2300      	movls	r3, #0
 80053ea:	bf86      	itte	hi
 80053ec:	f240 135d 	movwhi	r3, #349	; 0x15d
 80053f0:	608b      	strhi	r3, [r1, #8]
 80053f2:	9302      	strls	r3, [sp, #8]
 80053f4:	680b      	ldr	r3, [r1, #0]
 80053f6:	468b      	mov	fp, r1
 80053f8:	2500      	movs	r5, #0
 80053fa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80053fe:	f84b 3b1c 	str.w	r3, [fp], #28
 8005402:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005406:	4680      	mov	r8, r0
 8005408:	460c      	mov	r4, r1
 800540a:	465e      	mov	r6, fp
 800540c:	46aa      	mov	sl, r5
 800540e:	46a9      	mov	r9, r5
 8005410:	9501      	str	r5, [sp, #4]
 8005412:	68a2      	ldr	r2, [r4, #8]
 8005414:	b152      	cbz	r2, 800542c <_scanf_float+0x60>
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	2b4e      	cmp	r3, #78	; 0x4e
 800541c:	d864      	bhi.n	80054e8 <_scanf_float+0x11c>
 800541e:	2b40      	cmp	r3, #64	; 0x40
 8005420:	d83c      	bhi.n	800549c <_scanf_float+0xd0>
 8005422:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005426:	b2c8      	uxtb	r0, r1
 8005428:	280e      	cmp	r0, #14
 800542a:	d93a      	bls.n	80054a2 <_scanf_float+0xd6>
 800542c:	f1b9 0f00 	cmp.w	r9, #0
 8005430:	d003      	beq.n	800543a <_scanf_float+0x6e>
 8005432:	6823      	ldr	r3, [r4, #0]
 8005434:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005438:	6023      	str	r3, [r4, #0]
 800543a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800543e:	f1ba 0f01 	cmp.w	sl, #1
 8005442:	f200 8113 	bhi.w	800566c <_scanf_float+0x2a0>
 8005446:	455e      	cmp	r6, fp
 8005448:	f200 8105 	bhi.w	8005656 <_scanf_float+0x28a>
 800544c:	2501      	movs	r5, #1
 800544e:	4628      	mov	r0, r5
 8005450:	b007      	add	sp, #28
 8005452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005456:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800545a:	2a0d      	cmp	r2, #13
 800545c:	d8e6      	bhi.n	800542c <_scanf_float+0x60>
 800545e:	a101      	add	r1, pc, #4	; (adr r1, 8005464 <_scanf_float+0x98>)
 8005460:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005464:	080055a3 	.word	0x080055a3
 8005468:	0800542d 	.word	0x0800542d
 800546c:	0800542d 	.word	0x0800542d
 8005470:	0800542d 	.word	0x0800542d
 8005474:	08005603 	.word	0x08005603
 8005478:	080055db 	.word	0x080055db
 800547c:	0800542d 	.word	0x0800542d
 8005480:	0800542d 	.word	0x0800542d
 8005484:	080055b1 	.word	0x080055b1
 8005488:	0800542d 	.word	0x0800542d
 800548c:	0800542d 	.word	0x0800542d
 8005490:	0800542d 	.word	0x0800542d
 8005494:	0800542d 	.word	0x0800542d
 8005498:	08005569 	.word	0x08005569
 800549c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80054a0:	e7db      	b.n	800545a <_scanf_float+0x8e>
 80054a2:	290e      	cmp	r1, #14
 80054a4:	d8c2      	bhi.n	800542c <_scanf_float+0x60>
 80054a6:	a001      	add	r0, pc, #4	; (adr r0, 80054ac <_scanf_float+0xe0>)
 80054a8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80054ac:	0800555b 	.word	0x0800555b
 80054b0:	0800542d 	.word	0x0800542d
 80054b4:	0800555b 	.word	0x0800555b
 80054b8:	080055ef 	.word	0x080055ef
 80054bc:	0800542d 	.word	0x0800542d
 80054c0:	08005509 	.word	0x08005509
 80054c4:	08005545 	.word	0x08005545
 80054c8:	08005545 	.word	0x08005545
 80054cc:	08005545 	.word	0x08005545
 80054d0:	08005545 	.word	0x08005545
 80054d4:	08005545 	.word	0x08005545
 80054d8:	08005545 	.word	0x08005545
 80054dc:	08005545 	.word	0x08005545
 80054e0:	08005545 	.word	0x08005545
 80054e4:	08005545 	.word	0x08005545
 80054e8:	2b6e      	cmp	r3, #110	; 0x6e
 80054ea:	d809      	bhi.n	8005500 <_scanf_float+0x134>
 80054ec:	2b60      	cmp	r3, #96	; 0x60
 80054ee:	d8b2      	bhi.n	8005456 <_scanf_float+0x8a>
 80054f0:	2b54      	cmp	r3, #84	; 0x54
 80054f2:	d077      	beq.n	80055e4 <_scanf_float+0x218>
 80054f4:	2b59      	cmp	r3, #89	; 0x59
 80054f6:	d199      	bne.n	800542c <_scanf_float+0x60>
 80054f8:	2d07      	cmp	r5, #7
 80054fa:	d197      	bne.n	800542c <_scanf_float+0x60>
 80054fc:	2508      	movs	r5, #8
 80054fe:	e029      	b.n	8005554 <_scanf_float+0x188>
 8005500:	2b74      	cmp	r3, #116	; 0x74
 8005502:	d06f      	beq.n	80055e4 <_scanf_float+0x218>
 8005504:	2b79      	cmp	r3, #121	; 0x79
 8005506:	e7f6      	b.n	80054f6 <_scanf_float+0x12a>
 8005508:	6821      	ldr	r1, [r4, #0]
 800550a:	05c8      	lsls	r0, r1, #23
 800550c:	d51a      	bpl.n	8005544 <_scanf_float+0x178>
 800550e:	9b02      	ldr	r3, [sp, #8]
 8005510:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005514:	6021      	str	r1, [r4, #0]
 8005516:	f109 0901 	add.w	r9, r9, #1
 800551a:	b11b      	cbz	r3, 8005524 <_scanf_float+0x158>
 800551c:	3b01      	subs	r3, #1
 800551e:	3201      	adds	r2, #1
 8005520:	9302      	str	r3, [sp, #8]
 8005522:	60a2      	str	r2, [r4, #8]
 8005524:	68a3      	ldr	r3, [r4, #8]
 8005526:	3b01      	subs	r3, #1
 8005528:	60a3      	str	r3, [r4, #8]
 800552a:	6923      	ldr	r3, [r4, #16]
 800552c:	3301      	adds	r3, #1
 800552e:	6123      	str	r3, [r4, #16]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	3b01      	subs	r3, #1
 8005534:	2b00      	cmp	r3, #0
 8005536:	607b      	str	r3, [r7, #4]
 8005538:	f340 8084 	ble.w	8005644 <_scanf_float+0x278>
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	3301      	adds	r3, #1
 8005540:	603b      	str	r3, [r7, #0]
 8005542:	e766      	b.n	8005412 <_scanf_float+0x46>
 8005544:	eb1a 0f05 	cmn.w	sl, r5
 8005548:	f47f af70 	bne.w	800542c <_scanf_float+0x60>
 800554c:	6822      	ldr	r2, [r4, #0]
 800554e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005552:	6022      	str	r2, [r4, #0]
 8005554:	f806 3b01 	strb.w	r3, [r6], #1
 8005558:	e7e4      	b.n	8005524 <_scanf_float+0x158>
 800555a:	6822      	ldr	r2, [r4, #0]
 800555c:	0610      	lsls	r0, r2, #24
 800555e:	f57f af65 	bpl.w	800542c <_scanf_float+0x60>
 8005562:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005566:	e7f4      	b.n	8005552 <_scanf_float+0x186>
 8005568:	f1ba 0f00 	cmp.w	sl, #0
 800556c:	d10e      	bne.n	800558c <_scanf_float+0x1c0>
 800556e:	f1b9 0f00 	cmp.w	r9, #0
 8005572:	d10e      	bne.n	8005592 <_scanf_float+0x1c6>
 8005574:	6822      	ldr	r2, [r4, #0]
 8005576:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800557a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800557e:	d108      	bne.n	8005592 <_scanf_float+0x1c6>
 8005580:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005584:	6022      	str	r2, [r4, #0]
 8005586:	f04f 0a01 	mov.w	sl, #1
 800558a:	e7e3      	b.n	8005554 <_scanf_float+0x188>
 800558c:	f1ba 0f02 	cmp.w	sl, #2
 8005590:	d055      	beq.n	800563e <_scanf_float+0x272>
 8005592:	2d01      	cmp	r5, #1
 8005594:	d002      	beq.n	800559c <_scanf_float+0x1d0>
 8005596:	2d04      	cmp	r5, #4
 8005598:	f47f af48 	bne.w	800542c <_scanf_float+0x60>
 800559c:	3501      	adds	r5, #1
 800559e:	b2ed      	uxtb	r5, r5
 80055a0:	e7d8      	b.n	8005554 <_scanf_float+0x188>
 80055a2:	f1ba 0f01 	cmp.w	sl, #1
 80055a6:	f47f af41 	bne.w	800542c <_scanf_float+0x60>
 80055aa:	f04f 0a02 	mov.w	sl, #2
 80055ae:	e7d1      	b.n	8005554 <_scanf_float+0x188>
 80055b0:	b97d      	cbnz	r5, 80055d2 <_scanf_float+0x206>
 80055b2:	f1b9 0f00 	cmp.w	r9, #0
 80055b6:	f47f af3c 	bne.w	8005432 <_scanf_float+0x66>
 80055ba:	6822      	ldr	r2, [r4, #0]
 80055bc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80055c0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80055c4:	f47f af39 	bne.w	800543a <_scanf_float+0x6e>
 80055c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80055cc:	6022      	str	r2, [r4, #0]
 80055ce:	2501      	movs	r5, #1
 80055d0:	e7c0      	b.n	8005554 <_scanf_float+0x188>
 80055d2:	2d03      	cmp	r5, #3
 80055d4:	d0e2      	beq.n	800559c <_scanf_float+0x1d0>
 80055d6:	2d05      	cmp	r5, #5
 80055d8:	e7de      	b.n	8005598 <_scanf_float+0x1cc>
 80055da:	2d02      	cmp	r5, #2
 80055dc:	f47f af26 	bne.w	800542c <_scanf_float+0x60>
 80055e0:	2503      	movs	r5, #3
 80055e2:	e7b7      	b.n	8005554 <_scanf_float+0x188>
 80055e4:	2d06      	cmp	r5, #6
 80055e6:	f47f af21 	bne.w	800542c <_scanf_float+0x60>
 80055ea:	2507      	movs	r5, #7
 80055ec:	e7b2      	b.n	8005554 <_scanf_float+0x188>
 80055ee:	6822      	ldr	r2, [r4, #0]
 80055f0:	0591      	lsls	r1, r2, #22
 80055f2:	f57f af1b 	bpl.w	800542c <_scanf_float+0x60>
 80055f6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80055fa:	6022      	str	r2, [r4, #0]
 80055fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8005600:	e7a8      	b.n	8005554 <_scanf_float+0x188>
 8005602:	6822      	ldr	r2, [r4, #0]
 8005604:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005608:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800560c:	d006      	beq.n	800561c <_scanf_float+0x250>
 800560e:	0550      	lsls	r0, r2, #21
 8005610:	f57f af0c 	bpl.w	800542c <_scanf_float+0x60>
 8005614:	f1b9 0f00 	cmp.w	r9, #0
 8005618:	f43f af0f 	beq.w	800543a <_scanf_float+0x6e>
 800561c:	0591      	lsls	r1, r2, #22
 800561e:	bf58      	it	pl
 8005620:	9901      	ldrpl	r1, [sp, #4]
 8005622:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005626:	bf58      	it	pl
 8005628:	eba9 0101 	subpl.w	r1, r9, r1
 800562c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005630:	bf58      	it	pl
 8005632:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005636:	6022      	str	r2, [r4, #0]
 8005638:	f04f 0900 	mov.w	r9, #0
 800563c:	e78a      	b.n	8005554 <_scanf_float+0x188>
 800563e:	f04f 0a03 	mov.w	sl, #3
 8005642:	e787      	b.n	8005554 <_scanf_float+0x188>
 8005644:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005648:	4639      	mov	r1, r7
 800564a:	4640      	mov	r0, r8
 800564c:	4798      	blx	r3
 800564e:	2800      	cmp	r0, #0
 8005650:	f43f aedf 	beq.w	8005412 <_scanf_float+0x46>
 8005654:	e6ea      	b.n	800542c <_scanf_float+0x60>
 8005656:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800565a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800565e:	463a      	mov	r2, r7
 8005660:	4640      	mov	r0, r8
 8005662:	4798      	blx	r3
 8005664:	6923      	ldr	r3, [r4, #16]
 8005666:	3b01      	subs	r3, #1
 8005668:	6123      	str	r3, [r4, #16]
 800566a:	e6ec      	b.n	8005446 <_scanf_float+0x7a>
 800566c:	1e6b      	subs	r3, r5, #1
 800566e:	2b06      	cmp	r3, #6
 8005670:	d825      	bhi.n	80056be <_scanf_float+0x2f2>
 8005672:	2d02      	cmp	r5, #2
 8005674:	d836      	bhi.n	80056e4 <_scanf_float+0x318>
 8005676:	455e      	cmp	r6, fp
 8005678:	f67f aee8 	bls.w	800544c <_scanf_float+0x80>
 800567c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005680:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005684:	463a      	mov	r2, r7
 8005686:	4640      	mov	r0, r8
 8005688:	4798      	blx	r3
 800568a:	6923      	ldr	r3, [r4, #16]
 800568c:	3b01      	subs	r3, #1
 800568e:	6123      	str	r3, [r4, #16]
 8005690:	e7f1      	b.n	8005676 <_scanf_float+0x2aa>
 8005692:	9802      	ldr	r0, [sp, #8]
 8005694:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005698:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800569c:	9002      	str	r0, [sp, #8]
 800569e:	463a      	mov	r2, r7
 80056a0:	4640      	mov	r0, r8
 80056a2:	4798      	blx	r3
 80056a4:	6923      	ldr	r3, [r4, #16]
 80056a6:	3b01      	subs	r3, #1
 80056a8:	6123      	str	r3, [r4, #16]
 80056aa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80056ae:	fa5f fa8a 	uxtb.w	sl, sl
 80056b2:	f1ba 0f02 	cmp.w	sl, #2
 80056b6:	d1ec      	bne.n	8005692 <_scanf_float+0x2c6>
 80056b8:	3d03      	subs	r5, #3
 80056ba:	b2ed      	uxtb	r5, r5
 80056bc:	1b76      	subs	r6, r6, r5
 80056be:	6823      	ldr	r3, [r4, #0]
 80056c0:	05da      	lsls	r2, r3, #23
 80056c2:	d52f      	bpl.n	8005724 <_scanf_float+0x358>
 80056c4:	055b      	lsls	r3, r3, #21
 80056c6:	d510      	bpl.n	80056ea <_scanf_float+0x31e>
 80056c8:	455e      	cmp	r6, fp
 80056ca:	f67f aebf 	bls.w	800544c <_scanf_float+0x80>
 80056ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80056d6:	463a      	mov	r2, r7
 80056d8:	4640      	mov	r0, r8
 80056da:	4798      	blx	r3
 80056dc:	6923      	ldr	r3, [r4, #16]
 80056de:	3b01      	subs	r3, #1
 80056e0:	6123      	str	r3, [r4, #16]
 80056e2:	e7f1      	b.n	80056c8 <_scanf_float+0x2fc>
 80056e4:	46aa      	mov	sl, r5
 80056e6:	9602      	str	r6, [sp, #8]
 80056e8:	e7df      	b.n	80056aa <_scanf_float+0x2de>
 80056ea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80056ee:	6923      	ldr	r3, [r4, #16]
 80056f0:	2965      	cmp	r1, #101	; 0x65
 80056f2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80056f6:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80056fa:	6123      	str	r3, [r4, #16]
 80056fc:	d00c      	beq.n	8005718 <_scanf_float+0x34c>
 80056fe:	2945      	cmp	r1, #69	; 0x45
 8005700:	d00a      	beq.n	8005718 <_scanf_float+0x34c>
 8005702:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005706:	463a      	mov	r2, r7
 8005708:	4640      	mov	r0, r8
 800570a:	4798      	blx	r3
 800570c:	6923      	ldr	r3, [r4, #16]
 800570e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005712:	3b01      	subs	r3, #1
 8005714:	1eb5      	subs	r5, r6, #2
 8005716:	6123      	str	r3, [r4, #16]
 8005718:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800571c:	463a      	mov	r2, r7
 800571e:	4640      	mov	r0, r8
 8005720:	4798      	blx	r3
 8005722:	462e      	mov	r6, r5
 8005724:	6825      	ldr	r5, [r4, #0]
 8005726:	f015 0510 	ands.w	r5, r5, #16
 800572a:	d159      	bne.n	80057e0 <_scanf_float+0x414>
 800572c:	7035      	strb	r5, [r6, #0]
 800572e:	6823      	ldr	r3, [r4, #0]
 8005730:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005738:	d11b      	bne.n	8005772 <_scanf_float+0x3a6>
 800573a:	9b01      	ldr	r3, [sp, #4]
 800573c:	454b      	cmp	r3, r9
 800573e:	eba3 0209 	sub.w	r2, r3, r9
 8005742:	d123      	bne.n	800578c <_scanf_float+0x3c0>
 8005744:	2200      	movs	r2, #0
 8005746:	4659      	mov	r1, fp
 8005748:	4640      	mov	r0, r8
 800574a:	f000 ff43 	bl	80065d4 <_strtod_r>
 800574e:	6822      	ldr	r2, [r4, #0]
 8005750:	9b03      	ldr	r3, [sp, #12]
 8005752:	f012 0f02 	tst.w	r2, #2
 8005756:	ec57 6b10 	vmov	r6, r7, d0
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	d021      	beq.n	80057a2 <_scanf_float+0x3d6>
 800575e:	9903      	ldr	r1, [sp, #12]
 8005760:	1d1a      	adds	r2, r3, #4
 8005762:	600a      	str	r2, [r1, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	e9c3 6700 	strd	r6, r7, [r3]
 800576a:	68e3      	ldr	r3, [r4, #12]
 800576c:	3301      	adds	r3, #1
 800576e:	60e3      	str	r3, [r4, #12]
 8005770:	e66d      	b.n	800544e <_scanf_float+0x82>
 8005772:	9b04      	ldr	r3, [sp, #16]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d0e5      	beq.n	8005744 <_scanf_float+0x378>
 8005778:	9905      	ldr	r1, [sp, #20]
 800577a:	230a      	movs	r3, #10
 800577c:	462a      	mov	r2, r5
 800577e:	3101      	adds	r1, #1
 8005780:	4640      	mov	r0, r8
 8005782:	f000 ffaf 	bl	80066e4 <_strtol_r>
 8005786:	9b04      	ldr	r3, [sp, #16]
 8005788:	9e05      	ldr	r6, [sp, #20]
 800578a:	1ac2      	subs	r2, r0, r3
 800578c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005790:	429e      	cmp	r6, r3
 8005792:	bf28      	it	cs
 8005794:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005798:	4912      	ldr	r1, [pc, #72]	; (80057e4 <_scanf_float+0x418>)
 800579a:	4630      	mov	r0, r6
 800579c:	f000 f8d6 	bl	800594c <siprintf>
 80057a0:	e7d0      	b.n	8005744 <_scanf_float+0x378>
 80057a2:	9903      	ldr	r1, [sp, #12]
 80057a4:	f012 0f04 	tst.w	r2, #4
 80057a8:	f103 0204 	add.w	r2, r3, #4
 80057ac:	600a      	str	r2, [r1, #0]
 80057ae:	d1d9      	bne.n	8005764 <_scanf_float+0x398>
 80057b0:	f8d3 8000 	ldr.w	r8, [r3]
 80057b4:	ee10 2a10 	vmov	r2, s0
 80057b8:	ee10 0a10 	vmov	r0, s0
 80057bc:	463b      	mov	r3, r7
 80057be:	4639      	mov	r1, r7
 80057c0:	f7fb f9c4 	bl	8000b4c <__aeabi_dcmpun>
 80057c4:	b128      	cbz	r0, 80057d2 <_scanf_float+0x406>
 80057c6:	4808      	ldr	r0, [pc, #32]	; (80057e8 <_scanf_float+0x41c>)
 80057c8:	f000 f886 	bl	80058d8 <nanf>
 80057cc:	ed88 0a00 	vstr	s0, [r8]
 80057d0:	e7cb      	b.n	800576a <_scanf_float+0x39e>
 80057d2:	4630      	mov	r0, r6
 80057d4:	4639      	mov	r1, r7
 80057d6:	f7fb fa17 	bl	8000c08 <__aeabi_d2f>
 80057da:	f8c8 0000 	str.w	r0, [r8]
 80057de:	e7c4      	b.n	800576a <_scanf_float+0x39e>
 80057e0:	2500      	movs	r5, #0
 80057e2:	e634      	b.n	800544e <_scanf_float+0x82>
 80057e4:	08009774 	.word	0x08009774
 80057e8:	08009be8 	.word	0x08009be8

080057ec <_puts_r>:
 80057ec:	b570      	push	{r4, r5, r6, lr}
 80057ee:	460e      	mov	r6, r1
 80057f0:	4605      	mov	r5, r0
 80057f2:	b118      	cbz	r0, 80057fc <_puts_r+0x10>
 80057f4:	6983      	ldr	r3, [r0, #24]
 80057f6:	b90b      	cbnz	r3, 80057fc <_puts_r+0x10>
 80057f8:	f001 ffca 	bl	8007790 <__sinit>
 80057fc:	69ab      	ldr	r3, [r5, #24]
 80057fe:	68ac      	ldr	r4, [r5, #8]
 8005800:	b913      	cbnz	r3, 8005808 <_puts_r+0x1c>
 8005802:	4628      	mov	r0, r5
 8005804:	f001 ffc4 	bl	8007790 <__sinit>
 8005808:	4b2c      	ldr	r3, [pc, #176]	; (80058bc <_puts_r+0xd0>)
 800580a:	429c      	cmp	r4, r3
 800580c:	d120      	bne.n	8005850 <_puts_r+0x64>
 800580e:	686c      	ldr	r4, [r5, #4]
 8005810:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005812:	07db      	lsls	r3, r3, #31
 8005814:	d405      	bmi.n	8005822 <_puts_r+0x36>
 8005816:	89a3      	ldrh	r3, [r4, #12]
 8005818:	0598      	lsls	r0, r3, #22
 800581a:	d402      	bmi.n	8005822 <_puts_r+0x36>
 800581c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800581e:	f002 fbc8 	bl	8007fb2 <__retarget_lock_acquire_recursive>
 8005822:	89a3      	ldrh	r3, [r4, #12]
 8005824:	0719      	lsls	r1, r3, #28
 8005826:	d51d      	bpl.n	8005864 <_puts_r+0x78>
 8005828:	6923      	ldr	r3, [r4, #16]
 800582a:	b1db      	cbz	r3, 8005864 <_puts_r+0x78>
 800582c:	3e01      	subs	r6, #1
 800582e:	68a3      	ldr	r3, [r4, #8]
 8005830:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005834:	3b01      	subs	r3, #1
 8005836:	60a3      	str	r3, [r4, #8]
 8005838:	bb39      	cbnz	r1, 800588a <_puts_r+0x9e>
 800583a:	2b00      	cmp	r3, #0
 800583c:	da38      	bge.n	80058b0 <_puts_r+0xc4>
 800583e:	4622      	mov	r2, r4
 8005840:	210a      	movs	r1, #10
 8005842:	4628      	mov	r0, r5
 8005844:	f000 ff50 	bl	80066e8 <__swbuf_r>
 8005848:	3001      	adds	r0, #1
 800584a:	d011      	beq.n	8005870 <_puts_r+0x84>
 800584c:	250a      	movs	r5, #10
 800584e:	e011      	b.n	8005874 <_puts_r+0x88>
 8005850:	4b1b      	ldr	r3, [pc, #108]	; (80058c0 <_puts_r+0xd4>)
 8005852:	429c      	cmp	r4, r3
 8005854:	d101      	bne.n	800585a <_puts_r+0x6e>
 8005856:	68ac      	ldr	r4, [r5, #8]
 8005858:	e7da      	b.n	8005810 <_puts_r+0x24>
 800585a:	4b1a      	ldr	r3, [pc, #104]	; (80058c4 <_puts_r+0xd8>)
 800585c:	429c      	cmp	r4, r3
 800585e:	bf08      	it	eq
 8005860:	68ec      	ldreq	r4, [r5, #12]
 8005862:	e7d5      	b.n	8005810 <_puts_r+0x24>
 8005864:	4621      	mov	r1, r4
 8005866:	4628      	mov	r0, r5
 8005868:	f000 ff90 	bl	800678c <__swsetup_r>
 800586c:	2800      	cmp	r0, #0
 800586e:	d0dd      	beq.n	800582c <_puts_r+0x40>
 8005870:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005874:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005876:	07da      	lsls	r2, r3, #31
 8005878:	d405      	bmi.n	8005886 <_puts_r+0x9a>
 800587a:	89a3      	ldrh	r3, [r4, #12]
 800587c:	059b      	lsls	r3, r3, #22
 800587e:	d402      	bmi.n	8005886 <_puts_r+0x9a>
 8005880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005882:	f002 fb97 	bl	8007fb4 <__retarget_lock_release_recursive>
 8005886:	4628      	mov	r0, r5
 8005888:	bd70      	pop	{r4, r5, r6, pc}
 800588a:	2b00      	cmp	r3, #0
 800588c:	da04      	bge.n	8005898 <_puts_r+0xac>
 800588e:	69a2      	ldr	r2, [r4, #24]
 8005890:	429a      	cmp	r2, r3
 8005892:	dc06      	bgt.n	80058a2 <_puts_r+0xb6>
 8005894:	290a      	cmp	r1, #10
 8005896:	d004      	beq.n	80058a2 <_puts_r+0xb6>
 8005898:	6823      	ldr	r3, [r4, #0]
 800589a:	1c5a      	adds	r2, r3, #1
 800589c:	6022      	str	r2, [r4, #0]
 800589e:	7019      	strb	r1, [r3, #0]
 80058a0:	e7c5      	b.n	800582e <_puts_r+0x42>
 80058a2:	4622      	mov	r2, r4
 80058a4:	4628      	mov	r0, r5
 80058a6:	f000 ff1f 	bl	80066e8 <__swbuf_r>
 80058aa:	3001      	adds	r0, #1
 80058ac:	d1bf      	bne.n	800582e <_puts_r+0x42>
 80058ae:	e7df      	b.n	8005870 <_puts_r+0x84>
 80058b0:	6823      	ldr	r3, [r4, #0]
 80058b2:	250a      	movs	r5, #10
 80058b4:	1c5a      	adds	r2, r3, #1
 80058b6:	6022      	str	r2, [r4, #0]
 80058b8:	701d      	strb	r5, [r3, #0]
 80058ba:	e7db      	b.n	8005874 <_puts_r+0x88>
 80058bc:	08009984 	.word	0x08009984
 80058c0:	080099a4 	.word	0x080099a4
 80058c4:	08009964 	.word	0x08009964

080058c8 <puts>:
 80058c8:	4b02      	ldr	r3, [pc, #8]	; (80058d4 <puts+0xc>)
 80058ca:	4601      	mov	r1, r0
 80058cc:	6818      	ldr	r0, [r3, #0]
 80058ce:	f7ff bf8d 	b.w	80057ec <_puts_r>
 80058d2:	bf00      	nop
 80058d4:	20000010 	.word	0x20000010

080058d8 <nanf>:
 80058d8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80058e0 <nanf+0x8>
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	7fc00000 	.word	0x7fc00000

080058e4 <sniprintf>:
 80058e4:	b40c      	push	{r2, r3}
 80058e6:	b530      	push	{r4, r5, lr}
 80058e8:	4b17      	ldr	r3, [pc, #92]	; (8005948 <sniprintf+0x64>)
 80058ea:	1e0c      	subs	r4, r1, #0
 80058ec:	681d      	ldr	r5, [r3, #0]
 80058ee:	b09d      	sub	sp, #116	; 0x74
 80058f0:	da08      	bge.n	8005904 <sniprintf+0x20>
 80058f2:	238b      	movs	r3, #139	; 0x8b
 80058f4:	602b      	str	r3, [r5, #0]
 80058f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058fa:	b01d      	add	sp, #116	; 0x74
 80058fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005900:	b002      	add	sp, #8
 8005902:	4770      	bx	lr
 8005904:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005908:	f8ad 3014 	strh.w	r3, [sp, #20]
 800590c:	bf14      	ite	ne
 800590e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005912:	4623      	moveq	r3, r4
 8005914:	9304      	str	r3, [sp, #16]
 8005916:	9307      	str	r3, [sp, #28]
 8005918:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800591c:	9002      	str	r0, [sp, #8]
 800591e:	9006      	str	r0, [sp, #24]
 8005920:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005924:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005926:	ab21      	add	r3, sp, #132	; 0x84
 8005928:	a902      	add	r1, sp, #8
 800592a:	4628      	mov	r0, r5
 800592c:	9301      	str	r3, [sp, #4]
 800592e:	f003 f9d5 	bl	8008cdc <_svfiprintf_r>
 8005932:	1c43      	adds	r3, r0, #1
 8005934:	bfbc      	itt	lt
 8005936:	238b      	movlt	r3, #139	; 0x8b
 8005938:	602b      	strlt	r3, [r5, #0]
 800593a:	2c00      	cmp	r4, #0
 800593c:	d0dd      	beq.n	80058fa <sniprintf+0x16>
 800593e:	9b02      	ldr	r3, [sp, #8]
 8005940:	2200      	movs	r2, #0
 8005942:	701a      	strb	r2, [r3, #0]
 8005944:	e7d9      	b.n	80058fa <sniprintf+0x16>
 8005946:	bf00      	nop
 8005948:	20000010 	.word	0x20000010

0800594c <siprintf>:
 800594c:	b40e      	push	{r1, r2, r3}
 800594e:	b500      	push	{lr}
 8005950:	b09c      	sub	sp, #112	; 0x70
 8005952:	ab1d      	add	r3, sp, #116	; 0x74
 8005954:	9002      	str	r0, [sp, #8]
 8005956:	9006      	str	r0, [sp, #24]
 8005958:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800595c:	4809      	ldr	r0, [pc, #36]	; (8005984 <siprintf+0x38>)
 800595e:	9107      	str	r1, [sp, #28]
 8005960:	9104      	str	r1, [sp, #16]
 8005962:	4909      	ldr	r1, [pc, #36]	; (8005988 <siprintf+0x3c>)
 8005964:	f853 2b04 	ldr.w	r2, [r3], #4
 8005968:	9105      	str	r1, [sp, #20]
 800596a:	6800      	ldr	r0, [r0, #0]
 800596c:	9301      	str	r3, [sp, #4]
 800596e:	a902      	add	r1, sp, #8
 8005970:	f003 f9b4 	bl	8008cdc <_svfiprintf_r>
 8005974:	9b02      	ldr	r3, [sp, #8]
 8005976:	2200      	movs	r2, #0
 8005978:	701a      	strb	r2, [r3, #0]
 800597a:	b01c      	add	sp, #112	; 0x70
 800597c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005980:	b003      	add	sp, #12
 8005982:	4770      	bx	lr
 8005984:	20000010 	.word	0x20000010
 8005988:	ffff0208 	.word	0xffff0208

0800598c <sulp>:
 800598c:	b570      	push	{r4, r5, r6, lr}
 800598e:	4604      	mov	r4, r0
 8005990:	460d      	mov	r5, r1
 8005992:	ec45 4b10 	vmov	d0, r4, r5
 8005996:	4616      	mov	r6, r2
 8005998:	f002 fefe 	bl	8008798 <__ulp>
 800599c:	ec51 0b10 	vmov	r0, r1, d0
 80059a0:	b17e      	cbz	r6, 80059c2 <sulp+0x36>
 80059a2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80059a6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	dd09      	ble.n	80059c2 <sulp+0x36>
 80059ae:	051b      	lsls	r3, r3, #20
 80059b0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80059b4:	2400      	movs	r4, #0
 80059b6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80059ba:	4622      	mov	r2, r4
 80059bc:	462b      	mov	r3, r5
 80059be:	f7fa fe2b 	bl	8000618 <__aeabi_dmul>
 80059c2:	bd70      	pop	{r4, r5, r6, pc}
 80059c4:	0000      	movs	r0, r0
	...

080059c8 <_strtod_l>:
 80059c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059cc:	ed2d 8b02 	vpush	{d8}
 80059d0:	b09d      	sub	sp, #116	; 0x74
 80059d2:	461f      	mov	r7, r3
 80059d4:	2300      	movs	r3, #0
 80059d6:	9318      	str	r3, [sp, #96]	; 0x60
 80059d8:	4ba2      	ldr	r3, [pc, #648]	; (8005c64 <_strtod_l+0x29c>)
 80059da:	9213      	str	r2, [sp, #76]	; 0x4c
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	9305      	str	r3, [sp, #20]
 80059e0:	4604      	mov	r4, r0
 80059e2:	4618      	mov	r0, r3
 80059e4:	4688      	mov	r8, r1
 80059e6:	f7fa fc03 	bl	80001f0 <strlen>
 80059ea:	f04f 0a00 	mov.w	sl, #0
 80059ee:	4605      	mov	r5, r0
 80059f0:	f04f 0b00 	mov.w	fp, #0
 80059f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80059f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80059fa:	781a      	ldrb	r2, [r3, #0]
 80059fc:	2a2b      	cmp	r2, #43	; 0x2b
 80059fe:	d04e      	beq.n	8005a9e <_strtod_l+0xd6>
 8005a00:	d83b      	bhi.n	8005a7a <_strtod_l+0xb2>
 8005a02:	2a0d      	cmp	r2, #13
 8005a04:	d834      	bhi.n	8005a70 <_strtod_l+0xa8>
 8005a06:	2a08      	cmp	r2, #8
 8005a08:	d834      	bhi.n	8005a74 <_strtod_l+0xac>
 8005a0a:	2a00      	cmp	r2, #0
 8005a0c:	d03e      	beq.n	8005a8c <_strtod_l+0xc4>
 8005a0e:	2300      	movs	r3, #0
 8005a10:	930a      	str	r3, [sp, #40]	; 0x28
 8005a12:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005a14:	7833      	ldrb	r3, [r6, #0]
 8005a16:	2b30      	cmp	r3, #48	; 0x30
 8005a18:	f040 80b0 	bne.w	8005b7c <_strtod_l+0x1b4>
 8005a1c:	7873      	ldrb	r3, [r6, #1]
 8005a1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005a22:	2b58      	cmp	r3, #88	; 0x58
 8005a24:	d168      	bne.n	8005af8 <_strtod_l+0x130>
 8005a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a28:	9301      	str	r3, [sp, #4]
 8005a2a:	ab18      	add	r3, sp, #96	; 0x60
 8005a2c:	9702      	str	r7, [sp, #8]
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	4a8d      	ldr	r2, [pc, #564]	; (8005c68 <_strtod_l+0x2a0>)
 8005a32:	ab19      	add	r3, sp, #100	; 0x64
 8005a34:	a917      	add	r1, sp, #92	; 0x5c
 8005a36:	4620      	mov	r0, r4
 8005a38:	f001 ffae 	bl	8007998 <__gethex>
 8005a3c:	f010 0707 	ands.w	r7, r0, #7
 8005a40:	4605      	mov	r5, r0
 8005a42:	d005      	beq.n	8005a50 <_strtod_l+0x88>
 8005a44:	2f06      	cmp	r7, #6
 8005a46:	d12c      	bne.n	8005aa2 <_strtod_l+0xda>
 8005a48:	3601      	adds	r6, #1
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	9617      	str	r6, [sp, #92]	; 0x5c
 8005a4e:	930a      	str	r3, [sp, #40]	; 0x28
 8005a50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f040 8590 	bne.w	8006578 <_strtod_l+0xbb0>
 8005a58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a5a:	b1eb      	cbz	r3, 8005a98 <_strtod_l+0xd0>
 8005a5c:	4652      	mov	r2, sl
 8005a5e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005a62:	ec43 2b10 	vmov	d0, r2, r3
 8005a66:	b01d      	add	sp, #116	; 0x74
 8005a68:	ecbd 8b02 	vpop	{d8}
 8005a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a70:	2a20      	cmp	r2, #32
 8005a72:	d1cc      	bne.n	8005a0e <_strtod_l+0x46>
 8005a74:	3301      	adds	r3, #1
 8005a76:	9317      	str	r3, [sp, #92]	; 0x5c
 8005a78:	e7be      	b.n	80059f8 <_strtod_l+0x30>
 8005a7a:	2a2d      	cmp	r2, #45	; 0x2d
 8005a7c:	d1c7      	bne.n	8005a0e <_strtod_l+0x46>
 8005a7e:	2201      	movs	r2, #1
 8005a80:	920a      	str	r2, [sp, #40]	; 0x28
 8005a82:	1c5a      	adds	r2, r3, #1
 8005a84:	9217      	str	r2, [sp, #92]	; 0x5c
 8005a86:	785b      	ldrb	r3, [r3, #1]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1c2      	bne.n	8005a12 <_strtod_l+0x4a>
 8005a8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005a8e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f040 856e 	bne.w	8006574 <_strtod_l+0xbac>
 8005a98:	4652      	mov	r2, sl
 8005a9a:	465b      	mov	r3, fp
 8005a9c:	e7e1      	b.n	8005a62 <_strtod_l+0x9a>
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	e7ee      	b.n	8005a80 <_strtod_l+0xb8>
 8005aa2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005aa4:	b13a      	cbz	r2, 8005ab6 <_strtod_l+0xee>
 8005aa6:	2135      	movs	r1, #53	; 0x35
 8005aa8:	a81a      	add	r0, sp, #104	; 0x68
 8005aaa:	f002 ff80 	bl	80089ae <__copybits>
 8005aae:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	f002 fb3f 	bl	8008134 <_Bfree>
 8005ab6:	3f01      	subs	r7, #1
 8005ab8:	2f04      	cmp	r7, #4
 8005aba:	d806      	bhi.n	8005aca <_strtod_l+0x102>
 8005abc:	e8df f007 	tbb	[pc, r7]
 8005ac0:	1714030a 	.word	0x1714030a
 8005ac4:	0a          	.byte	0x0a
 8005ac5:	00          	.byte	0x00
 8005ac6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8005aca:	0728      	lsls	r0, r5, #28
 8005acc:	d5c0      	bpl.n	8005a50 <_strtod_l+0x88>
 8005ace:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005ad2:	e7bd      	b.n	8005a50 <_strtod_l+0x88>
 8005ad4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005ad8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005ada:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005ade:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005ae2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005ae6:	e7f0      	b.n	8005aca <_strtod_l+0x102>
 8005ae8:	f8df b180 	ldr.w	fp, [pc, #384]	; 8005c6c <_strtod_l+0x2a4>
 8005aec:	e7ed      	b.n	8005aca <_strtod_l+0x102>
 8005aee:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005af2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005af6:	e7e8      	b.n	8005aca <_strtod_l+0x102>
 8005af8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005afa:	1c5a      	adds	r2, r3, #1
 8005afc:	9217      	str	r2, [sp, #92]	; 0x5c
 8005afe:	785b      	ldrb	r3, [r3, #1]
 8005b00:	2b30      	cmp	r3, #48	; 0x30
 8005b02:	d0f9      	beq.n	8005af8 <_strtod_l+0x130>
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d0a3      	beq.n	8005a50 <_strtod_l+0x88>
 8005b08:	2301      	movs	r3, #1
 8005b0a:	f04f 0900 	mov.w	r9, #0
 8005b0e:	9304      	str	r3, [sp, #16]
 8005b10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005b12:	9308      	str	r3, [sp, #32]
 8005b14:	f8cd 901c 	str.w	r9, [sp, #28]
 8005b18:	464f      	mov	r7, r9
 8005b1a:	220a      	movs	r2, #10
 8005b1c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005b1e:	7806      	ldrb	r6, [r0, #0]
 8005b20:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005b24:	b2d9      	uxtb	r1, r3
 8005b26:	2909      	cmp	r1, #9
 8005b28:	d92a      	bls.n	8005b80 <_strtod_l+0x1b8>
 8005b2a:	9905      	ldr	r1, [sp, #20]
 8005b2c:	462a      	mov	r2, r5
 8005b2e:	f003 fa32 	bl	8008f96 <strncmp>
 8005b32:	b398      	cbz	r0, 8005b9c <_strtod_l+0x1d4>
 8005b34:	2000      	movs	r0, #0
 8005b36:	4632      	mov	r2, r6
 8005b38:	463d      	mov	r5, r7
 8005b3a:	9005      	str	r0, [sp, #20]
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2a65      	cmp	r2, #101	; 0x65
 8005b40:	d001      	beq.n	8005b46 <_strtod_l+0x17e>
 8005b42:	2a45      	cmp	r2, #69	; 0x45
 8005b44:	d118      	bne.n	8005b78 <_strtod_l+0x1b0>
 8005b46:	b91d      	cbnz	r5, 8005b50 <_strtod_l+0x188>
 8005b48:	9a04      	ldr	r2, [sp, #16]
 8005b4a:	4302      	orrs	r2, r0
 8005b4c:	d09e      	beq.n	8005a8c <_strtod_l+0xc4>
 8005b4e:	2500      	movs	r5, #0
 8005b50:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005b54:	f108 0201 	add.w	r2, r8, #1
 8005b58:	9217      	str	r2, [sp, #92]	; 0x5c
 8005b5a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8005b5e:	2a2b      	cmp	r2, #43	; 0x2b
 8005b60:	d075      	beq.n	8005c4e <_strtod_l+0x286>
 8005b62:	2a2d      	cmp	r2, #45	; 0x2d
 8005b64:	d07b      	beq.n	8005c5e <_strtod_l+0x296>
 8005b66:	f04f 0c00 	mov.w	ip, #0
 8005b6a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005b6e:	2909      	cmp	r1, #9
 8005b70:	f240 8082 	bls.w	8005c78 <_strtod_l+0x2b0>
 8005b74:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005b78:	2600      	movs	r6, #0
 8005b7a:	e09d      	b.n	8005cb8 <_strtod_l+0x2f0>
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	e7c4      	b.n	8005b0a <_strtod_l+0x142>
 8005b80:	2f08      	cmp	r7, #8
 8005b82:	bfd8      	it	le
 8005b84:	9907      	ldrle	r1, [sp, #28]
 8005b86:	f100 0001 	add.w	r0, r0, #1
 8005b8a:	bfda      	itte	le
 8005b8c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005b90:	9307      	strle	r3, [sp, #28]
 8005b92:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005b96:	3701      	adds	r7, #1
 8005b98:	9017      	str	r0, [sp, #92]	; 0x5c
 8005b9a:	e7bf      	b.n	8005b1c <_strtod_l+0x154>
 8005b9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005b9e:	195a      	adds	r2, r3, r5
 8005ba0:	9217      	str	r2, [sp, #92]	; 0x5c
 8005ba2:	5d5a      	ldrb	r2, [r3, r5]
 8005ba4:	2f00      	cmp	r7, #0
 8005ba6:	d037      	beq.n	8005c18 <_strtod_l+0x250>
 8005ba8:	9005      	str	r0, [sp, #20]
 8005baa:	463d      	mov	r5, r7
 8005bac:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005bb0:	2b09      	cmp	r3, #9
 8005bb2:	d912      	bls.n	8005bda <_strtod_l+0x212>
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e7c2      	b.n	8005b3e <_strtod_l+0x176>
 8005bb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005bba:	1c5a      	adds	r2, r3, #1
 8005bbc:	9217      	str	r2, [sp, #92]	; 0x5c
 8005bbe:	785a      	ldrb	r2, [r3, #1]
 8005bc0:	3001      	adds	r0, #1
 8005bc2:	2a30      	cmp	r2, #48	; 0x30
 8005bc4:	d0f8      	beq.n	8005bb8 <_strtod_l+0x1f0>
 8005bc6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005bca:	2b08      	cmp	r3, #8
 8005bcc:	f200 84d9 	bhi.w	8006582 <_strtod_l+0xbba>
 8005bd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005bd2:	9005      	str	r0, [sp, #20]
 8005bd4:	2000      	movs	r0, #0
 8005bd6:	9308      	str	r3, [sp, #32]
 8005bd8:	4605      	mov	r5, r0
 8005bda:	3a30      	subs	r2, #48	; 0x30
 8005bdc:	f100 0301 	add.w	r3, r0, #1
 8005be0:	d014      	beq.n	8005c0c <_strtod_l+0x244>
 8005be2:	9905      	ldr	r1, [sp, #20]
 8005be4:	4419      	add	r1, r3
 8005be6:	9105      	str	r1, [sp, #20]
 8005be8:	462b      	mov	r3, r5
 8005bea:	eb00 0e05 	add.w	lr, r0, r5
 8005bee:	210a      	movs	r1, #10
 8005bf0:	4573      	cmp	r3, lr
 8005bf2:	d113      	bne.n	8005c1c <_strtod_l+0x254>
 8005bf4:	182b      	adds	r3, r5, r0
 8005bf6:	2b08      	cmp	r3, #8
 8005bf8:	f105 0501 	add.w	r5, r5, #1
 8005bfc:	4405      	add	r5, r0
 8005bfe:	dc1c      	bgt.n	8005c3a <_strtod_l+0x272>
 8005c00:	9907      	ldr	r1, [sp, #28]
 8005c02:	230a      	movs	r3, #10
 8005c04:	fb03 2301 	mla	r3, r3, r1, r2
 8005c08:	9307      	str	r3, [sp, #28]
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005c0e:	1c51      	adds	r1, r2, #1
 8005c10:	9117      	str	r1, [sp, #92]	; 0x5c
 8005c12:	7852      	ldrb	r2, [r2, #1]
 8005c14:	4618      	mov	r0, r3
 8005c16:	e7c9      	b.n	8005bac <_strtod_l+0x1e4>
 8005c18:	4638      	mov	r0, r7
 8005c1a:	e7d2      	b.n	8005bc2 <_strtod_l+0x1fa>
 8005c1c:	2b08      	cmp	r3, #8
 8005c1e:	dc04      	bgt.n	8005c2a <_strtod_l+0x262>
 8005c20:	9e07      	ldr	r6, [sp, #28]
 8005c22:	434e      	muls	r6, r1
 8005c24:	9607      	str	r6, [sp, #28]
 8005c26:	3301      	adds	r3, #1
 8005c28:	e7e2      	b.n	8005bf0 <_strtod_l+0x228>
 8005c2a:	f103 0c01 	add.w	ip, r3, #1
 8005c2e:	f1bc 0f10 	cmp.w	ip, #16
 8005c32:	bfd8      	it	le
 8005c34:	fb01 f909 	mulle.w	r9, r1, r9
 8005c38:	e7f5      	b.n	8005c26 <_strtod_l+0x25e>
 8005c3a:	2d10      	cmp	r5, #16
 8005c3c:	bfdc      	itt	le
 8005c3e:	230a      	movle	r3, #10
 8005c40:	fb03 2909 	mlale	r9, r3, r9, r2
 8005c44:	e7e1      	b.n	8005c0a <_strtod_l+0x242>
 8005c46:	2300      	movs	r3, #0
 8005c48:	9305      	str	r3, [sp, #20]
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e77c      	b.n	8005b48 <_strtod_l+0x180>
 8005c4e:	f04f 0c00 	mov.w	ip, #0
 8005c52:	f108 0202 	add.w	r2, r8, #2
 8005c56:	9217      	str	r2, [sp, #92]	; 0x5c
 8005c58:	f898 2002 	ldrb.w	r2, [r8, #2]
 8005c5c:	e785      	b.n	8005b6a <_strtod_l+0x1a2>
 8005c5e:	f04f 0c01 	mov.w	ip, #1
 8005c62:	e7f6      	b.n	8005c52 <_strtod_l+0x28a>
 8005c64:	08009a2c 	.word	0x08009a2c
 8005c68:	0800977c 	.word	0x0800977c
 8005c6c:	7ff00000 	.word	0x7ff00000
 8005c70:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005c72:	1c51      	adds	r1, r2, #1
 8005c74:	9117      	str	r1, [sp, #92]	; 0x5c
 8005c76:	7852      	ldrb	r2, [r2, #1]
 8005c78:	2a30      	cmp	r2, #48	; 0x30
 8005c7a:	d0f9      	beq.n	8005c70 <_strtod_l+0x2a8>
 8005c7c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005c80:	2908      	cmp	r1, #8
 8005c82:	f63f af79 	bhi.w	8005b78 <_strtod_l+0x1b0>
 8005c86:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005c8a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005c8c:	9206      	str	r2, [sp, #24]
 8005c8e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005c90:	1c51      	adds	r1, r2, #1
 8005c92:	9117      	str	r1, [sp, #92]	; 0x5c
 8005c94:	7852      	ldrb	r2, [r2, #1]
 8005c96:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8005c9a:	2e09      	cmp	r6, #9
 8005c9c:	d937      	bls.n	8005d0e <_strtod_l+0x346>
 8005c9e:	9e06      	ldr	r6, [sp, #24]
 8005ca0:	1b89      	subs	r1, r1, r6
 8005ca2:	2908      	cmp	r1, #8
 8005ca4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005ca8:	dc02      	bgt.n	8005cb0 <_strtod_l+0x2e8>
 8005caa:	4576      	cmp	r6, lr
 8005cac:	bfa8      	it	ge
 8005cae:	4676      	movge	r6, lr
 8005cb0:	f1bc 0f00 	cmp.w	ip, #0
 8005cb4:	d000      	beq.n	8005cb8 <_strtod_l+0x2f0>
 8005cb6:	4276      	negs	r6, r6
 8005cb8:	2d00      	cmp	r5, #0
 8005cba:	d14d      	bne.n	8005d58 <_strtod_l+0x390>
 8005cbc:	9904      	ldr	r1, [sp, #16]
 8005cbe:	4301      	orrs	r1, r0
 8005cc0:	f47f aec6 	bne.w	8005a50 <_strtod_l+0x88>
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f47f aee1 	bne.w	8005a8c <_strtod_l+0xc4>
 8005cca:	2a69      	cmp	r2, #105	; 0x69
 8005ccc:	d027      	beq.n	8005d1e <_strtod_l+0x356>
 8005cce:	dc24      	bgt.n	8005d1a <_strtod_l+0x352>
 8005cd0:	2a49      	cmp	r2, #73	; 0x49
 8005cd2:	d024      	beq.n	8005d1e <_strtod_l+0x356>
 8005cd4:	2a4e      	cmp	r2, #78	; 0x4e
 8005cd6:	f47f aed9 	bne.w	8005a8c <_strtod_l+0xc4>
 8005cda:	499f      	ldr	r1, [pc, #636]	; (8005f58 <_strtod_l+0x590>)
 8005cdc:	a817      	add	r0, sp, #92	; 0x5c
 8005cde:	f002 f8b3 	bl	8007e48 <__match>
 8005ce2:	2800      	cmp	r0, #0
 8005ce4:	f43f aed2 	beq.w	8005a8c <_strtod_l+0xc4>
 8005ce8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	2b28      	cmp	r3, #40	; 0x28
 8005cee:	d12d      	bne.n	8005d4c <_strtod_l+0x384>
 8005cf0:	499a      	ldr	r1, [pc, #616]	; (8005f5c <_strtod_l+0x594>)
 8005cf2:	aa1a      	add	r2, sp, #104	; 0x68
 8005cf4:	a817      	add	r0, sp, #92	; 0x5c
 8005cf6:	f002 f8bb 	bl	8007e70 <__hexnan>
 8005cfa:	2805      	cmp	r0, #5
 8005cfc:	d126      	bne.n	8005d4c <_strtod_l+0x384>
 8005cfe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d00:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8005d04:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005d08:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005d0c:	e6a0      	b.n	8005a50 <_strtod_l+0x88>
 8005d0e:	210a      	movs	r1, #10
 8005d10:	fb01 2e0e 	mla	lr, r1, lr, r2
 8005d14:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005d18:	e7b9      	b.n	8005c8e <_strtod_l+0x2c6>
 8005d1a:	2a6e      	cmp	r2, #110	; 0x6e
 8005d1c:	e7db      	b.n	8005cd6 <_strtod_l+0x30e>
 8005d1e:	4990      	ldr	r1, [pc, #576]	; (8005f60 <_strtod_l+0x598>)
 8005d20:	a817      	add	r0, sp, #92	; 0x5c
 8005d22:	f002 f891 	bl	8007e48 <__match>
 8005d26:	2800      	cmp	r0, #0
 8005d28:	f43f aeb0 	beq.w	8005a8c <_strtod_l+0xc4>
 8005d2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005d2e:	498d      	ldr	r1, [pc, #564]	; (8005f64 <_strtod_l+0x59c>)
 8005d30:	3b01      	subs	r3, #1
 8005d32:	a817      	add	r0, sp, #92	; 0x5c
 8005d34:	9317      	str	r3, [sp, #92]	; 0x5c
 8005d36:	f002 f887 	bl	8007e48 <__match>
 8005d3a:	b910      	cbnz	r0, 8005d42 <_strtod_l+0x37a>
 8005d3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005d3e:	3301      	adds	r3, #1
 8005d40:	9317      	str	r3, [sp, #92]	; 0x5c
 8005d42:	f8df b230 	ldr.w	fp, [pc, #560]	; 8005f74 <_strtod_l+0x5ac>
 8005d46:	f04f 0a00 	mov.w	sl, #0
 8005d4a:	e681      	b.n	8005a50 <_strtod_l+0x88>
 8005d4c:	4886      	ldr	r0, [pc, #536]	; (8005f68 <_strtod_l+0x5a0>)
 8005d4e:	f003 f8c7 	bl	8008ee0 <nan>
 8005d52:	ec5b ab10 	vmov	sl, fp, d0
 8005d56:	e67b      	b.n	8005a50 <_strtod_l+0x88>
 8005d58:	9b05      	ldr	r3, [sp, #20]
 8005d5a:	9807      	ldr	r0, [sp, #28]
 8005d5c:	1af3      	subs	r3, r6, r3
 8005d5e:	2f00      	cmp	r7, #0
 8005d60:	bf08      	it	eq
 8005d62:	462f      	moveq	r7, r5
 8005d64:	2d10      	cmp	r5, #16
 8005d66:	9306      	str	r3, [sp, #24]
 8005d68:	46a8      	mov	r8, r5
 8005d6a:	bfa8      	it	ge
 8005d6c:	f04f 0810 	movge.w	r8, #16
 8005d70:	f7fa fbd8 	bl	8000524 <__aeabi_ui2d>
 8005d74:	2d09      	cmp	r5, #9
 8005d76:	4682      	mov	sl, r0
 8005d78:	468b      	mov	fp, r1
 8005d7a:	dd13      	ble.n	8005da4 <_strtod_l+0x3dc>
 8005d7c:	4b7b      	ldr	r3, [pc, #492]	; (8005f6c <_strtod_l+0x5a4>)
 8005d7e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005d82:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005d86:	f7fa fc47 	bl	8000618 <__aeabi_dmul>
 8005d8a:	4682      	mov	sl, r0
 8005d8c:	4648      	mov	r0, r9
 8005d8e:	468b      	mov	fp, r1
 8005d90:	f7fa fbc8 	bl	8000524 <__aeabi_ui2d>
 8005d94:	4602      	mov	r2, r0
 8005d96:	460b      	mov	r3, r1
 8005d98:	4650      	mov	r0, sl
 8005d9a:	4659      	mov	r1, fp
 8005d9c:	f7fa fa86 	bl	80002ac <__adddf3>
 8005da0:	4682      	mov	sl, r0
 8005da2:	468b      	mov	fp, r1
 8005da4:	2d0f      	cmp	r5, #15
 8005da6:	dc38      	bgt.n	8005e1a <_strtod_l+0x452>
 8005da8:	9b06      	ldr	r3, [sp, #24]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f43f ae50 	beq.w	8005a50 <_strtod_l+0x88>
 8005db0:	dd24      	ble.n	8005dfc <_strtod_l+0x434>
 8005db2:	2b16      	cmp	r3, #22
 8005db4:	dc0b      	bgt.n	8005dce <_strtod_l+0x406>
 8005db6:	496d      	ldr	r1, [pc, #436]	; (8005f6c <_strtod_l+0x5a4>)
 8005db8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005dbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dc0:	4652      	mov	r2, sl
 8005dc2:	465b      	mov	r3, fp
 8005dc4:	f7fa fc28 	bl	8000618 <__aeabi_dmul>
 8005dc8:	4682      	mov	sl, r0
 8005dca:	468b      	mov	fp, r1
 8005dcc:	e640      	b.n	8005a50 <_strtod_l+0x88>
 8005dce:	9a06      	ldr	r2, [sp, #24]
 8005dd0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	db20      	blt.n	8005e1a <_strtod_l+0x452>
 8005dd8:	4c64      	ldr	r4, [pc, #400]	; (8005f6c <_strtod_l+0x5a4>)
 8005dda:	f1c5 050f 	rsb	r5, r5, #15
 8005dde:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005de2:	4652      	mov	r2, sl
 8005de4:	465b      	mov	r3, fp
 8005de6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dea:	f7fa fc15 	bl	8000618 <__aeabi_dmul>
 8005dee:	9b06      	ldr	r3, [sp, #24]
 8005df0:	1b5d      	subs	r5, r3, r5
 8005df2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005df6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005dfa:	e7e3      	b.n	8005dc4 <_strtod_l+0x3fc>
 8005dfc:	9b06      	ldr	r3, [sp, #24]
 8005dfe:	3316      	adds	r3, #22
 8005e00:	db0b      	blt.n	8005e1a <_strtod_l+0x452>
 8005e02:	9b05      	ldr	r3, [sp, #20]
 8005e04:	1b9e      	subs	r6, r3, r6
 8005e06:	4b59      	ldr	r3, [pc, #356]	; (8005f6c <_strtod_l+0x5a4>)
 8005e08:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005e0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005e10:	4650      	mov	r0, sl
 8005e12:	4659      	mov	r1, fp
 8005e14:	f7fa fd2a 	bl	800086c <__aeabi_ddiv>
 8005e18:	e7d6      	b.n	8005dc8 <_strtod_l+0x400>
 8005e1a:	9b06      	ldr	r3, [sp, #24]
 8005e1c:	eba5 0808 	sub.w	r8, r5, r8
 8005e20:	4498      	add	r8, r3
 8005e22:	f1b8 0f00 	cmp.w	r8, #0
 8005e26:	dd74      	ble.n	8005f12 <_strtod_l+0x54a>
 8005e28:	f018 030f 	ands.w	r3, r8, #15
 8005e2c:	d00a      	beq.n	8005e44 <_strtod_l+0x47c>
 8005e2e:	494f      	ldr	r1, [pc, #316]	; (8005f6c <_strtod_l+0x5a4>)
 8005e30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005e34:	4652      	mov	r2, sl
 8005e36:	465b      	mov	r3, fp
 8005e38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e3c:	f7fa fbec 	bl	8000618 <__aeabi_dmul>
 8005e40:	4682      	mov	sl, r0
 8005e42:	468b      	mov	fp, r1
 8005e44:	f038 080f 	bics.w	r8, r8, #15
 8005e48:	d04f      	beq.n	8005eea <_strtod_l+0x522>
 8005e4a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005e4e:	dd22      	ble.n	8005e96 <_strtod_l+0x4ce>
 8005e50:	2500      	movs	r5, #0
 8005e52:	462e      	mov	r6, r5
 8005e54:	9507      	str	r5, [sp, #28]
 8005e56:	9505      	str	r5, [sp, #20]
 8005e58:	2322      	movs	r3, #34	; 0x22
 8005e5a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8005f74 <_strtod_l+0x5ac>
 8005e5e:	6023      	str	r3, [r4, #0]
 8005e60:	f04f 0a00 	mov.w	sl, #0
 8005e64:	9b07      	ldr	r3, [sp, #28]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f43f adf2 	beq.w	8005a50 <_strtod_l+0x88>
 8005e6c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005e6e:	4620      	mov	r0, r4
 8005e70:	f002 f960 	bl	8008134 <_Bfree>
 8005e74:	9905      	ldr	r1, [sp, #20]
 8005e76:	4620      	mov	r0, r4
 8005e78:	f002 f95c 	bl	8008134 <_Bfree>
 8005e7c:	4631      	mov	r1, r6
 8005e7e:	4620      	mov	r0, r4
 8005e80:	f002 f958 	bl	8008134 <_Bfree>
 8005e84:	9907      	ldr	r1, [sp, #28]
 8005e86:	4620      	mov	r0, r4
 8005e88:	f002 f954 	bl	8008134 <_Bfree>
 8005e8c:	4629      	mov	r1, r5
 8005e8e:	4620      	mov	r0, r4
 8005e90:	f002 f950 	bl	8008134 <_Bfree>
 8005e94:	e5dc      	b.n	8005a50 <_strtod_l+0x88>
 8005e96:	4b36      	ldr	r3, [pc, #216]	; (8005f70 <_strtod_l+0x5a8>)
 8005e98:	9304      	str	r3, [sp, #16]
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005ea0:	4650      	mov	r0, sl
 8005ea2:	4659      	mov	r1, fp
 8005ea4:	4699      	mov	r9, r3
 8005ea6:	f1b8 0f01 	cmp.w	r8, #1
 8005eaa:	dc21      	bgt.n	8005ef0 <_strtod_l+0x528>
 8005eac:	b10b      	cbz	r3, 8005eb2 <_strtod_l+0x4ea>
 8005eae:	4682      	mov	sl, r0
 8005eb0:	468b      	mov	fp, r1
 8005eb2:	4b2f      	ldr	r3, [pc, #188]	; (8005f70 <_strtod_l+0x5a8>)
 8005eb4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005eb8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005ebc:	4652      	mov	r2, sl
 8005ebe:	465b      	mov	r3, fp
 8005ec0:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005ec4:	f7fa fba8 	bl	8000618 <__aeabi_dmul>
 8005ec8:	4b2a      	ldr	r3, [pc, #168]	; (8005f74 <_strtod_l+0x5ac>)
 8005eca:	460a      	mov	r2, r1
 8005ecc:	400b      	ands	r3, r1
 8005ece:	492a      	ldr	r1, [pc, #168]	; (8005f78 <_strtod_l+0x5b0>)
 8005ed0:	428b      	cmp	r3, r1
 8005ed2:	4682      	mov	sl, r0
 8005ed4:	d8bc      	bhi.n	8005e50 <_strtod_l+0x488>
 8005ed6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005eda:	428b      	cmp	r3, r1
 8005edc:	bf86      	itte	hi
 8005ede:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8005f7c <_strtod_l+0x5b4>
 8005ee2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8005ee6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005eea:	2300      	movs	r3, #0
 8005eec:	9304      	str	r3, [sp, #16]
 8005eee:	e084      	b.n	8005ffa <_strtod_l+0x632>
 8005ef0:	f018 0f01 	tst.w	r8, #1
 8005ef4:	d005      	beq.n	8005f02 <_strtod_l+0x53a>
 8005ef6:	9b04      	ldr	r3, [sp, #16]
 8005ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efc:	f7fa fb8c 	bl	8000618 <__aeabi_dmul>
 8005f00:	2301      	movs	r3, #1
 8005f02:	9a04      	ldr	r2, [sp, #16]
 8005f04:	3208      	adds	r2, #8
 8005f06:	f109 0901 	add.w	r9, r9, #1
 8005f0a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005f0e:	9204      	str	r2, [sp, #16]
 8005f10:	e7c9      	b.n	8005ea6 <_strtod_l+0x4de>
 8005f12:	d0ea      	beq.n	8005eea <_strtod_l+0x522>
 8005f14:	f1c8 0800 	rsb	r8, r8, #0
 8005f18:	f018 020f 	ands.w	r2, r8, #15
 8005f1c:	d00a      	beq.n	8005f34 <_strtod_l+0x56c>
 8005f1e:	4b13      	ldr	r3, [pc, #76]	; (8005f6c <_strtod_l+0x5a4>)
 8005f20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f24:	4650      	mov	r0, sl
 8005f26:	4659      	mov	r1, fp
 8005f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2c:	f7fa fc9e 	bl	800086c <__aeabi_ddiv>
 8005f30:	4682      	mov	sl, r0
 8005f32:	468b      	mov	fp, r1
 8005f34:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005f38:	d0d7      	beq.n	8005eea <_strtod_l+0x522>
 8005f3a:	f1b8 0f1f 	cmp.w	r8, #31
 8005f3e:	dd1f      	ble.n	8005f80 <_strtod_l+0x5b8>
 8005f40:	2500      	movs	r5, #0
 8005f42:	462e      	mov	r6, r5
 8005f44:	9507      	str	r5, [sp, #28]
 8005f46:	9505      	str	r5, [sp, #20]
 8005f48:	2322      	movs	r3, #34	; 0x22
 8005f4a:	f04f 0a00 	mov.w	sl, #0
 8005f4e:	f04f 0b00 	mov.w	fp, #0
 8005f52:	6023      	str	r3, [r4, #0]
 8005f54:	e786      	b.n	8005e64 <_strtod_l+0x49c>
 8005f56:	bf00      	nop
 8005f58:	0800974d 	.word	0x0800974d
 8005f5c:	08009790 	.word	0x08009790
 8005f60:	08009745 	.word	0x08009745
 8005f64:	080098d4 	.word	0x080098d4
 8005f68:	08009be8 	.word	0x08009be8
 8005f6c:	08009ac8 	.word	0x08009ac8
 8005f70:	08009aa0 	.word	0x08009aa0
 8005f74:	7ff00000 	.word	0x7ff00000
 8005f78:	7ca00000 	.word	0x7ca00000
 8005f7c:	7fefffff 	.word	0x7fefffff
 8005f80:	f018 0310 	ands.w	r3, r8, #16
 8005f84:	bf18      	it	ne
 8005f86:	236a      	movne	r3, #106	; 0x6a
 8005f88:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006338 <_strtod_l+0x970>
 8005f8c:	9304      	str	r3, [sp, #16]
 8005f8e:	4650      	mov	r0, sl
 8005f90:	4659      	mov	r1, fp
 8005f92:	2300      	movs	r3, #0
 8005f94:	f018 0f01 	tst.w	r8, #1
 8005f98:	d004      	beq.n	8005fa4 <_strtod_l+0x5dc>
 8005f9a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005f9e:	f7fa fb3b 	bl	8000618 <__aeabi_dmul>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005fa8:	f109 0908 	add.w	r9, r9, #8
 8005fac:	d1f2      	bne.n	8005f94 <_strtod_l+0x5cc>
 8005fae:	b10b      	cbz	r3, 8005fb4 <_strtod_l+0x5ec>
 8005fb0:	4682      	mov	sl, r0
 8005fb2:	468b      	mov	fp, r1
 8005fb4:	9b04      	ldr	r3, [sp, #16]
 8005fb6:	b1c3      	cbz	r3, 8005fea <_strtod_l+0x622>
 8005fb8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005fbc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	4659      	mov	r1, fp
 8005fc4:	dd11      	ble.n	8005fea <_strtod_l+0x622>
 8005fc6:	2b1f      	cmp	r3, #31
 8005fc8:	f340 8124 	ble.w	8006214 <_strtod_l+0x84c>
 8005fcc:	2b34      	cmp	r3, #52	; 0x34
 8005fce:	bfde      	ittt	le
 8005fd0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005fd4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8005fd8:	fa03 f202 	lslle.w	r2, r3, r2
 8005fdc:	f04f 0a00 	mov.w	sl, #0
 8005fe0:	bfcc      	ite	gt
 8005fe2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005fe6:	ea02 0b01 	andle.w	fp, r2, r1
 8005fea:	2200      	movs	r2, #0
 8005fec:	2300      	movs	r3, #0
 8005fee:	4650      	mov	r0, sl
 8005ff0:	4659      	mov	r1, fp
 8005ff2:	f7fa fd79 	bl	8000ae8 <__aeabi_dcmpeq>
 8005ff6:	2800      	cmp	r0, #0
 8005ff8:	d1a2      	bne.n	8005f40 <_strtod_l+0x578>
 8005ffa:	9b07      	ldr	r3, [sp, #28]
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	9908      	ldr	r1, [sp, #32]
 8006000:	462b      	mov	r3, r5
 8006002:	463a      	mov	r2, r7
 8006004:	4620      	mov	r0, r4
 8006006:	f002 f8fd 	bl	8008204 <__s2b>
 800600a:	9007      	str	r0, [sp, #28]
 800600c:	2800      	cmp	r0, #0
 800600e:	f43f af1f 	beq.w	8005e50 <_strtod_l+0x488>
 8006012:	9b05      	ldr	r3, [sp, #20]
 8006014:	1b9e      	subs	r6, r3, r6
 8006016:	9b06      	ldr	r3, [sp, #24]
 8006018:	2b00      	cmp	r3, #0
 800601a:	bfb4      	ite	lt
 800601c:	4633      	movlt	r3, r6
 800601e:	2300      	movge	r3, #0
 8006020:	930c      	str	r3, [sp, #48]	; 0x30
 8006022:	9b06      	ldr	r3, [sp, #24]
 8006024:	2500      	movs	r5, #0
 8006026:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800602a:	9312      	str	r3, [sp, #72]	; 0x48
 800602c:	462e      	mov	r6, r5
 800602e:	9b07      	ldr	r3, [sp, #28]
 8006030:	4620      	mov	r0, r4
 8006032:	6859      	ldr	r1, [r3, #4]
 8006034:	f002 f83e 	bl	80080b4 <_Balloc>
 8006038:	9005      	str	r0, [sp, #20]
 800603a:	2800      	cmp	r0, #0
 800603c:	f43f af0c 	beq.w	8005e58 <_strtod_l+0x490>
 8006040:	9b07      	ldr	r3, [sp, #28]
 8006042:	691a      	ldr	r2, [r3, #16]
 8006044:	3202      	adds	r2, #2
 8006046:	f103 010c 	add.w	r1, r3, #12
 800604a:	0092      	lsls	r2, r2, #2
 800604c:	300c      	adds	r0, #12
 800604e:	f7fe fd3d 	bl	8004acc <memcpy>
 8006052:	ec4b ab10 	vmov	d0, sl, fp
 8006056:	aa1a      	add	r2, sp, #104	; 0x68
 8006058:	a919      	add	r1, sp, #100	; 0x64
 800605a:	4620      	mov	r0, r4
 800605c:	f002 fc18 	bl	8008890 <__d2b>
 8006060:	ec4b ab18 	vmov	d8, sl, fp
 8006064:	9018      	str	r0, [sp, #96]	; 0x60
 8006066:	2800      	cmp	r0, #0
 8006068:	f43f aef6 	beq.w	8005e58 <_strtod_l+0x490>
 800606c:	2101      	movs	r1, #1
 800606e:	4620      	mov	r0, r4
 8006070:	f002 f962 	bl	8008338 <__i2b>
 8006074:	4606      	mov	r6, r0
 8006076:	2800      	cmp	r0, #0
 8006078:	f43f aeee 	beq.w	8005e58 <_strtod_l+0x490>
 800607c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800607e:	9904      	ldr	r1, [sp, #16]
 8006080:	2b00      	cmp	r3, #0
 8006082:	bfab      	itete	ge
 8006084:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006086:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006088:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800608a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800608e:	bfac      	ite	ge
 8006090:	eb03 0902 	addge.w	r9, r3, r2
 8006094:	1ad7      	sublt	r7, r2, r3
 8006096:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006098:	eba3 0801 	sub.w	r8, r3, r1
 800609c:	4490      	add	r8, r2
 800609e:	4ba1      	ldr	r3, [pc, #644]	; (8006324 <_strtod_l+0x95c>)
 80060a0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80060a4:	4598      	cmp	r8, r3
 80060a6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80060aa:	f280 80c7 	bge.w	800623c <_strtod_l+0x874>
 80060ae:	eba3 0308 	sub.w	r3, r3, r8
 80060b2:	2b1f      	cmp	r3, #31
 80060b4:	eba2 0203 	sub.w	r2, r2, r3
 80060b8:	f04f 0101 	mov.w	r1, #1
 80060bc:	f300 80b1 	bgt.w	8006222 <_strtod_l+0x85a>
 80060c0:	fa01 f303 	lsl.w	r3, r1, r3
 80060c4:	930d      	str	r3, [sp, #52]	; 0x34
 80060c6:	2300      	movs	r3, #0
 80060c8:	9308      	str	r3, [sp, #32]
 80060ca:	eb09 0802 	add.w	r8, r9, r2
 80060ce:	9b04      	ldr	r3, [sp, #16]
 80060d0:	45c1      	cmp	r9, r8
 80060d2:	4417      	add	r7, r2
 80060d4:	441f      	add	r7, r3
 80060d6:	464b      	mov	r3, r9
 80060d8:	bfa8      	it	ge
 80060da:	4643      	movge	r3, r8
 80060dc:	42bb      	cmp	r3, r7
 80060de:	bfa8      	it	ge
 80060e0:	463b      	movge	r3, r7
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	bfc2      	ittt	gt
 80060e6:	eba8 0803 	subgt.w	r8, r8, r3
 80060ea:	1aff      	subgt	r7, r7, r3
 80060ec:	eba9 0903 	subgt.w	r9, r9, r3
 80060f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	dd17      	ble.n	8006126 <_strtod_l+0x75e>
 80060f6:	4631      	mov	r1, r6
 80060f8:	461a      	mov	r2, r3
 80060fa:	4620      	mov	r0, r4
 80060fc:	f002 f9dc 	bl	80084b8 <__pow5mult>
 8006100:	4606      	mov	r6, r0
 8006102:	2800      	cmp	r0, #0
 8006104:	f43f aea8 	beq.w	8005e58 <_strtod_l+0x490>
 8006108:	4601      	mov	r1, r0
 800610a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800610c:	4620      	mov	r0, r4
 800610e:	f002 f929 	bl	8008364 <__multiply>
 8006112:	900b      	str	r0, [sp, #44]	; 0x2c
 8006114:	2800      	cmp	r0, #0
 8006116:	f43f ae9f 	beq.w	8005e58 <_strtod_l+0x490>
 800611a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800611c:	4620      	mov	r0, r4
 800611e:	f002 f809 	bl	8008134 <_Bfree>
 8006122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006124:	9318      	str	r3, [sp, #96]	; 0x60
 8006126:	f1b8 0f00 	cmp.w	r8, #0
 800612a:	f300 808c 	bgt.w	8006246 <_strtod_l+0x87e>
 800612e:	9b06      	ldr	r3, [sp, #24]
 8006130:	2b00      	cmp	r3, #0
 8006132:	dd08      	ble.n	8006146 <_strtod_l+0x77e>
 8006134:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006136:	9905      	ldr	r1, [sp, #20]
 8006138:	4620      	mov	r0, r4
 800613a:	f002 f9bd 	bl	80084b8 <__pow5mult>
 800613e:	9005      	str	r0, [sp, #20]
 8006140:	2800      	cmp	r0, #0
 8006142:	f43f ae89 	beq.w	8005e58 <_strtod_l+0x490>
 8006146:	2f00      	cmp	r7, #0
 8006148:	dd08      	ble.n	800615c <_strtod_l+0x794>
 800614a:	9905      	ldr	r1, [sp, #20]
 800614c:	463a      	mov	r2, r7
 800614e:	4620      	mov	r0, r4
 8006150:	f002 fa0c 	bl	800856c <__lshift>
 8006154:	9005      	str	r0, [sp, #20]
 8006156:	2800      	cmp	r0, #0
 8006158:	f43f ae7e 	beq.w	8005e58 <_strtod_l+0x490>
 800615c:	f1b9 0f00 	cmp.w	r9, #0
 8006160:	dd08      	ble.n	8006174 <_strtod_l+0x7ac>
 8006162:	4631      	mov	r1, r6
 8006164:	464a      	mov	r2, r9
 8006166:	4620      	mov	r0, r4
 8006168:	f002 fa00 	bl	800856c <__lshift>
 800616c:	4606      	mov	r6, r0
 800616e:	2800      	cmp	r0, #0
 8006170:	f43f ae72 	beq.w	8005e58 <_strtod_l+0x490>
 8006174:	9a05      	ldr	r2, [sp, #20]
 8006176:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006178:	4620      	mov	r0, r4
 800617a:	f002 fa83 	bl	8008684 <__mdiff>
 800617e:	4605      	mov	r5, r0
 8006180:	2800      	cmp	r0, #0
 8006182:	f43f ae69 	beq.w	8005e58 <_strtod_l+0x490>
 8006186:	68c3      	ldr	r3, [r0, #12]
 8006188:	930b      	str	r3, [sp, #44]	; 0x2c
 800618a:	2300      	movs	r3, #0
 800618c:	60c3      	str	r3, [r0, #12]
 800618e:	4631      	mov	r1, r6
 8006190:	f002 fa5c 	bl	800864c <__mcmp>
 8006194:	2800      	cmp	r0, #0
 8006196:	da60      	bge.n	800625a <_strtod_l+0x892>
 8006198:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800619a:	ea53 030a 	orrs.w	r3, r3, sl
 800619e:	f040 8082 	bne.w	80062a6 <_strtod_l+0x8de>
 80061a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d17d      	bne.n	80062a6 <_strtod_l+0x8de>
 80061aa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80061ae:	0d1b      	lsrs	r3, r3, #20
 80061b0:	051b      	lsls	r3, r3, #20
 80061b2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80061b6:	d976      	bls.n	80062a6 <_strtod_l+0x8de>
 80061b8:	696b      	ldr	r3, [r5, #20]
 80061ba:	b913      	cbnz	r3, 80061c2 <_strtod_l+0x7fa>
 80061bc:	692b      	ldr	r3, [r5, #16]
 80061be:	2b01      	cmp	r3, #1
 80061c0:	dd71      	ble.n	80062a6 <_strtod_l+0x8de>
 80061c2:	4629      	mov	r1, r5
 80061c4:	2201      	movs	r2, #1
 80061c6:	4620      	mov	r0, r4
 80061c8:	f002 f9d0 	bl	800856c <__lshift>
 80061cc:	4631      	mov	r1, r6
 80061ce:	4605      	mov	r5, r0
 80061d0:	f002 fa3c 	bl	800864c <__mcmp>
 80061d4:	2800      	cmp	r0, #0
 80061d6:	dd66      	ble.n	80062a6 <_strtod_l+0x8de>
 80061d8:	9904      	ldr	r1, [sp, #16]
 80061da:	4a53      	ldr	r2, [pc, #332]	; (8006328 <_strtod_l+0x960>)
 80061dc:	465b      	mov	r3, fp
 80061de:	2900      	cmp	r1, #0
 80061e0:	f000 8081 	beq.w	80062e6 <_strtod_l+0x91e>
 80061e4:	ea02 010b 	and.w	r1, r2, fp
 80061e8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80061ec:	dc7b      	bgt.n	80062e6 <_strtod_l+0x91e>
 80061ee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80061f2:	f77f aea9 	ble.w	8005f48 <_strtod_l+0x580>
 80061f6:	4b4d      	ldr	r3, [pc, #308]	; (800632c <_strtod_l+0x964>)
 80061f8:	4650      	mov	r0, sl
 80061fa:	4659      	mov	r1, fp
 80061fc:	2200      	movs	r2, #0
 80061fe:	f7fa fa0b 	bl	8000618 <__aeabi_dmul>
 8006202:	460b      	mov	r3, r1
 8006204:	4303      	orrs	r3, r0
 8006206:	bf08      	it	eq
 8006208:	2322      	moveq	r3, #34	; 0x22
 800620a:	4682      	mov	sl, r0
 800620c:	468b      	mov	fp, r1
 800620e:	bf08      	it	eq
 8006210:	6023      	streq	r3, [r4, #0]
 8006212:	e62b      	b.n	8005e6c <_strtod_l+0x4a4>
 8006214:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006218:	fa02 f303 	lsl.w	r3, r2, r3
 800621c:	ea03 0a0a 	and.w	sl, r3, sl
 8006220:	e6e3      	b.n	8005fea <_strtod_l+0x622>
 8006222:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006226:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800622a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800622e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006232:	fa01 f308 	lsl.w	r3, r1, r8
 8006236:	9308      	str	r3, [sp, #32]
 8006238:	910d      	str	r1, [sp, #52]	; 0x34
 800623a:	e746      	b.n	80060ca <_strtod_l+0x702>
 800623c:	2300      	movs	r3, #0
 800623e:	9308      	str	r3, [sp, #32]
 8006240:	2301      	movs	r3, #1
 8006242:	930d      	str	r3, [sp, #52]	; 0x34
 8006244:	e741      	b.n	80060ca <_strtod_l+0x702>
 8006246:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006248:	4642      	mov	r2, r8
 800624a:	4620      	mov	r0, r4
 800624c:	f002 f98e 	bl	800856c <__lshift>
 8006250:	9018      	str	r0, [sp, #96]	; 0x60
 8006252:	2800      	cmp	r0, #0
 8006254:	f47f af6b 	bne.w	800612e <_strtod_l+0x766>
 8006258:	e5fe      	b.n	8005e58 <_strtod_l+0x490>
 800625a:	465f      	mov	r7, fp
 800625c:	d16e      	bne.n	800633c <_strtod_l+0x974>
 800625e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006260:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006264:	b342      	cbz	r2, 80062b8 <_strtod_l+0x8f0>
 8006266:	4a32      	ldr	r2, [pc, #200]	; (8006330 <_strtod_l+0x968>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d128      	bne.n	80062be <_strtod_l+0x8f6>
 800626c:	9b04      	ldr	r3, [sp, #16]
 800626e:	4651      	mov	r1, sl
 8006270:	b1eb      	cbz	r3, 80062ae <_strtod_l+0x8e6>
 8006272:	4b2d      	ldr	r3, [pc, #180]	; (8006328 <_strtod_l+0x960>)
 8006274:	403b      	ands	r3, r7
 8006276:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800627a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800627e:	d819      	bhi.n	80062b4 <_strtod_l+0x8ec>
 8006280:	0d1b      	lsrs	r3, r3, #20
 8006282:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006286:	fa02 f303 	lsl.w	r3, r2, r3
 800628a:	4299      	cmp	r1, r3
 800628c:	d117      	bne.n	80062be <_strtod_l+0x8f6>
 800628e:	4b29      	ldr	r3, [pc, #164]	; (8006334 <_strtod_l+0x96c>)
 8006290:	429f      	cmp	r7, r3
 8006292:	d102      	bne.n	800629a <_strtod_l+0x8d2>
 8006294:	3101      	adds	r1, #1
 8006296:	f43f addf 	beq.w	8005e58 <_strtod_l+0x490>
 800629a:	4b23      	ldr	r3, [pc, #140]	; (8006328 <_strtod_l+0x960>)
 800629c:	403b      	ands	r3, r7
 800629e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80062a2:	f04f 0a00 	mov.w	sl, #0
 80062a6:	9b04      	ldr	r3, [sp, #16]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1a4      	bne.n	80061f6 <_strtod_l+0x82e>
 80062ac:	e5de      	b.n	8005e6c <_strtod_l+0x4a4>
 80062ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062b2:	e7ea      	b.n	800628a <_strtod_l+0x8c2>
 80062b4:	4613      	mov	r3, r2
 80062b6:	e7e8      	b.n	800628a <_strtod_l+0x8c2>
 80062b8:	ea53 030a 	orrs.w	r3, r3, sl
 80062bc:	d08c      	beq.n	80061d8 <_strtod_l+0x810>
 80062be:	9b08      	ldr	r3, [sp, #32]
 80062c0:	b1db      	cbz	r3, 80062fa <_strtod_l+0x932>
 80062c2:	423b      	tst	r3, r7
 80062c4:	d0ef      	beq.n	80062a6 <_strtod_l+0x8de>
 80062c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062c8:	9a04      	ldr	r2, [sp, #16]
 80062ca:	4650      	mov	r0, sl
 80062cc:	4659      	mov	r1, fp
 80062ce:	b1c3      	cbz	r3, 8006302 <_strtod_l+0x93a>
 80062d0:	f7ff fb5c 	bl	800598c <sulp>
 80062d4:	4602      	mov	r2, r0
 80062d6:	460b      	mov	r3, r1
 80062d8:	ec51 0b18 	vmov	r0, r1, d8
 80062dc:	f7f9 ffe6 	bl	80002ac <__adddf3>
 80062e0:	4682      	mov	sl, r0
 80062e2:	468b      	mov	fp, r1
 80062e4:	e7df      	b.n	80062a6 <_strtod_l+0x8de>
 80062e6:	4013      	ands	r3, r2
 80062e8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80062ec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80062f0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80062f4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80062f8:	e7d5      	b.n	80062a6 <_strtod_l+0x8de>
 80062fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062fc:	ea13 0f0a 	tst.w	r3, sl
 8006300:	e7e0      	b.n	80062c4 <_strtod_l+0x8fc>
 8006302:	f7ff fb43 	bl	800598c <sulp>
 8006306:	4602      	mov	r2, r0
 8006308:	460b      	mov	r3, r1
 800630a:	ec51 0b18 	vmov	r0, r1, d8
 800630e:	f7f9 ffcb 	bl	80002a8 <__aeabi_dsub>
 8006312:	2200      	movs	r2, #0
 8006314:	2300      	movs	r3, #0
 8006316:	4682      	mov	sl, r0
 8006318:	468b      	mov	fp, r1
 800631a:	f7fa fbe5 	bl	8000ae8 <__aeabi_dcmpeq>
 800631e:	2800      	cmp	r0, #0
 8006320:	d0c1      	beq.n	80062a6 <_strtod_l+0x8de>
 8006322:	e611      	b.n	8005f48 <_strtod_l+0x580>
 8006324:	fffffc02 	.word	0xfffffc02
 8006328:	7ff00000 	.word	0x7ff00000
 800632c:	39500000 	.word	0x39500000
 8006330:	000fffff 	.word	0x000fffff
 8006334:	7fefffff 	.word	0x7fefffff
 8006338:	080097a8 	.word	0x080097a8
 800633c:	4631      	mov	r1, r6
 800633e:	4628      	mov	r0, r5
 8006340:	f002 fb02 	bl	8008948 <__ratio>
 8006344:	ec59 8b10 	vmov	r8, r9, d0
 8006348:	ee10 0a10 	vmov	r0, s0
 800634c:	2200      	movs	r2, #0
 800634e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006352:	4649      	mov	r1, r9
 8006354:	f7fa fbdc 	bl	8000b10 <__aeabi_dcmple>
 8006358:	2800      	cmp	r0, #0
 800635a:	d07a      	beq.n	8006452 <_strtod_l+0xa8a>
 800635c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800635e:	2b00      	cmp	r3, #0
 8006360:	d04a      	beq.n	80063f8 <_strtod_l+0xa30>
 8006362:	4b95      	ldr	r3, [pc, #596]	; (80065b8 <_strtod_l+0xbf0>)
 8006364:	2200      	movs	r2, #0
 8006366:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800636a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80065b8 <_strtod_l+0xbf0>
 800636e:	f04f 0800 	mov.w	r8, #0
 8006372:	4b92      	ldr	r3, [pc, #584]	; (80065bc <_strtod_l+0xbf4>)
 8006374:	403b      	ands	r3, r7
 8006376:	930d      	str	r3, [sp, #52]	; 0x34
 8006378:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800637a:	4b91      	ldr	r3, [pc, #580]	; (80065c0 <_strtod_l+0xbf8>)
 800637c:	429a      	cmp	r2, r3
 800637e:	f040 80b0 	bne.w	80064e2 <_strtod_l+0xb1a>
 8006382:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006386:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800638a:	ec4b ab10 	vmov	d0, sl, fp
 800638e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006392:	f002 fa01 	bl	8008798 <__ulp>
 8006396:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800639a:	ec53 2b10 	vmov	r2, r3, d0
 800639e:	f7fa f93b 	bl	8000618 <__aeabi_dmul>
 80063a2:	4652      	mov	r2, sl
 80063a4:	465b      	mov	r3, fp
 80063a6:	f7f9 ff81 	bl	80002ac <__adddf3>
 80063aa:	460b      	mov	r3, r1
 80063ac:	4983      	ldr	r1, [pc, #524]	; (80065bc <_strtod_l+0xbf4>)
 80063ae:	4a85      	ldr	r2, [pc, #532]	; (80065c4 <_strtod_l+0xbfc>)
 80063b0:	4019      	ands	r1, r3
 80063b2:	4291      	cmp	r1, r2
 80063b4:	4682      	mov	sl, r0
 80063b6:	d960      	bls.n	800647a <_strtod_l+0xab2>
 80063b8:	ee18 3a90 	vmov	r3, s17
 80063bc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d104      	bne.n	80063ce <_strtod_l+0xa06>
 80063c4:	ee18 3a10 	vmov	r3, s16
 80063c8:	3301      	adds	r3, #1
 80063ca:	f43f ad45 	beq.w	8005e58 <_strtod_l+0x490>
 80063ce:	f8df b200 	ldr.w	fp, [pc, #512]	; 80065d0 <_strtod_l+0xc08>
 80063d2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80063d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80063d8:	4620      	mov	r0, r4
 80063da:	f001 feab 	bl	8008134 <_Bfree>
 80063de:	9905      	ldr	r1, [sp, #20]
 80063e0:	4620      	mov	r0, r4
 80063e2:	f001 fea7 	bl	8008134 <_Bfree>
 80063e6:	4631      	mov	r1, r6
 80063e8:	4620      	mov	r0, r4
 80063ea:	f001 fea3 	bl	8008134 <_Bfree>
 80063ee:	4629      	mov	r1, r5
 80063f0:	4620      	mov	r0, r4
 80063f2:	f001 fe9f 	bl	8008134 <_Bfree>
 80063f6:	e61a      	b.n	800602e <_strtod_l+0x666>
 80063f8:	f1ba 0f00 	cmp.w	sl, #0
 80063fc:	d11b      	bne.n	8006436 <_strtod_l+0xa6e>
 80063fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006402:	b9f3      	cbnz	r3, 8006442 <_strtod_l+0xa7a>
 8006404:	4b6c      	ldr	r3, [pc, #432]	; (80065b8 <_strtod_l+0xbf0>)
 8006406:	2200      	movs	r2, #0
 8006408:	4640      	mov	r0, r8
 800640a:	4649      	mov	r1, r9
 800640c:	f7fa fb76 	bl	8000afc <__aeabi_dcmplt>
 8006410:	b9d0      	cbnz	r0, 8006448 <_strtod_l+0xa80>
 8006412:	4640      	mov	r0, r8
 8006414:	4649      	mov	r1, r9
 8006416:	4b6c      	ldr	r3, [pc, #432]	; (80065c8 <_strtod_l+0xc00>)
 8006418:	2200      	movs	r2, #0
 800641a:	f7fa f8fd 	bl	8000618 <__aeabi_dmul>
 800641e:	4680      	mov	r8, r0
 8006420:	4689      	mov	r9, r1
 8006422:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006426:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800642a:	9315      	str	r3, [sp, #84]	; 0x54
 800642c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006430:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006434:	e79d      	b.n	8006372 <_strtod_l+0x9aa>
 8006436:	f1ba 0f01 	cmp.w	sl, #1
 800643a:	d102      	bne.n	8006442 <_strtod_l+0xa7a>
 800643c:	2f00      	cmp	r7, #0
 800643e:	f43f ad83 	beq.w	8005f48 <_strtod_l+0x580>
 8006442:	4b62      	ldr	r3, [pc, #392]	; (80065cc <_strtod_l+0xc04>)
 8006444:	2200      	movs	r2, #0
 8006446:	e78e      	b.n	8006366 <_strtod_l+0x99e>
 8006448:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80065c8 <_strtod_l+0xc00>
 800644c:	f04f 0800 	mov.w	r8, #0
 8006450:	e7e7      	b.n	8006422 <_strtod_l+0xa5a>
 8006452:	4b5d      	ldr	r3, [pc, #372]	; (80065c8 <_strtod_l+0xc00>)
 8006454:	4640      	mov	r0, r8
 8006456:	4649      	mov	r1, r9
 8006458:	2200      	movs	r2, #0
 800645a:	f7fa f8dd 	bl	8000618 <__aeabi_dmul>
 800645e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006460:	4680      	mov	r8, r0
 8006462:	4689      	mov	r9, r1
 8006464:	b933      	cbnz	r3, 8006474 <_strtod_l+0xaac>
 8006466:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800646a:	900e      	str	r0, [sp, #56]	; 0x38
 800646c:	930f      	str	r3, [sp, #60]	; 0x3c
 800646e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006472:	e7dd      	b.n	8006430 <_strtod_l+0xa68>
 8006474:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006478:	e7f9      	b.n	800646e <_strtod_l+0xaa6>
 800647a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800647e:	9b04      	ldr	r3, [sp, #16]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1a8      	bne.n	80063d6 <_strtod_l+0xa0e>
 8006484:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006488:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800648a:	0d1b      	lsrs	r3, r3, #20
 800648c:	051b      	lsls	r3, r3, #20
 800648e:	429a      	cmp	r2, r3
 8006490:	d1a1      	bne.n	80063d6 <_strtod_l+0xa0e>
 8006492:	4640      	mov	r0, r8
 8006494:	4649      	mov	r1, r9
 8006496:	f7fa fc1f 	bl	8000cd8 <__aeabi_d2lz>
 800649a:	f7fa f88f 	bl	80005bc <__aeabi_l2d>
 800649e:	4602      	mov	r2, r0
 80064a0:	460b      	mov	r3, r1
 80064a2:	4640      	mov	r0, r8
 80064a4:	4649      	mov	r1, r9
 80064a6:	f7f9 feff 	bl	80002a8 <__aeabi_dsub>
 80064aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80064ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80064b0:	ea43 030a 	orr.w	r3, r3, sl
 80064b4:	4313      	orrs	r3, r2
 80064b6:	4680      	mov	r8, r0
 80064b8:	4689      	mov	r9, r1
 80064ba:	d055      	beq.n	8006568 <_strtod_l+0xba0>
 80064bc:	a336      	add	r3, pc, #216	; (adr r3, 8006598 <_strtod_l+0xbd0>)
 80064be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c2:	f7fa fb1b 	bl	8000afc <__aeabi_dcmplt>
 80064c6:	2800      	cmp	r0, #0
 80064c8:	f47f acd0 	bne.w	8005e6c <_strtod_l+0x4a4>
 80064cc:	a334      	add	r3, pc, #208	; (adr r3, 80065a0 <_strtod_l+0xbd8>)
 80064ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d2:	4640      	mov	r0, r8
 80064d4:	4649      	mov	r1, r9
 80064d6:	f7fa fb2f 	bl	8000b38 <__aeabi_dcmpgt>
 80064da:	2800      	cmp	r0, #0
 80064dc:	f43f af7b 	beq.w	80063d6 <_strtod_l+0xa0e>
 80064e0:	e4c4      	b.n	8005e6c <_strtod_l+0x4a4>
 80064e2:	9b04      	ldr	r3, [sp, #16]
 80064e4:	b333      	cbz	r3, 8006534 <_strtod_l+0xb6c>
 80064e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064e8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80064ec:	d822      	bhi.n	8006534 <_strtod_l+0xb6c>
 80064ee:	a32e      	add	r3, pc, #184	; (adr r3, 80065a8 <_strtod_l+0xbe0>)
 80064f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f4:	4640      	mov	r0, r8
 80064f6:	4649      	mov	r1, r9
 80064f8:	f7fa fb0a 	bl	8000b10 <__aeabi_dcmple>
 80064fc:	b1a0      	cbz	r0, 8006528 <_strtod_l+0xb60>
 80064fe:	4649      	mov	r1, r9
 8006500:	4640      	mov	r0, r8
 8006502:	f7fa fb61 	bl	8000bc8 <__aeabi_d2uiz>
 8006506:	2801      	cmp	r0, #1
 8006508:	bf38      	it	cc
 800650a:	2001      	movcc	r0, #1
 800650c:	f7fa f80a 	bl	8000524 <__aeabi_ui2d>
 8006510:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006512:	4680      	mov	r8, r0
 8006514:	4689      	mov	r9, r1
 8006516:	bb23      	cbnz	r3, 8006562 <_strtod_l+0xb9a>
 8006518:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800651c:	9010      	str	r0, [sp, #64]	; 0x40
 800651e:	9311      	str	r3, [sp, #68]	; 0x44
 8006520:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006524:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800652a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800652c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006530:	1a9b      	subs	r3, r3, r2
 8006532:	9309      	str	r3, [sp, #36]	; 0x24
 8006534:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006538:	eeb0 0a48 	vmov.f32	s0, s16
 800653c:	eef0 0a68 	vmov.f32	s1, s17
 8006540:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006544:	f002 f928 	bl	8008798 <__ulp>
 8006548:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800654c:	ec53 2b10 	vmov	r2, r3, d0
 8006550:	f7fa f862 	bl	8000618 <__aeabi_dmul>
 8006554:	ec53 2b18 	vmov	r2, r3, d8
 8006558:	f7f9 fea8 	bl	80002ac <__adddf3>
 800655c:	4682      	mov	sl, r0
 800655e:	468b      	mov	fp, r1
 8006560:	e78d      	b.n	800647e <_strtod_l+0xab6>
 8006562:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8006566:	e7db      	b.n	8006520 <_strtod_l+0xb58>
 8006568:	a311      	add	r3, pc, #68	; (adr r3, 80065b0 <_strtod_l+0xbe8>)
 800656a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656e:	f7fa fac5 	bl	8000afc <__aeabi_dcmplt>
 8006572:	e7b2      	b.n	80064da <_strtod_l+0xb12>
 8006574:	2300      	movs	r3, #0
 8006576:	930a      	str	r3, [sp, #40]	; 0x28
 8006578:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800657a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800657c:	6013      	str	r3, [r2, #0]
 800657e:	f7ff ba6b 	b.w	8005a58 <_strtod_l+0x90>
 8006582:	2a65      	cmp	r2, #101	; 0x65
 8006584:	f43f ab5f 	beq.w	8005c46 <_strtod_l+0x27e>
 8006588:	2a45      	cmp	r2, #69	; 0x45
 800658a:	f43f ab5c 	beq.w	8005c46 <_strtod_l+0x27e>
 800658e:	2301      	movs	r3, #1
 8006590:	f7ff bb94 	b.w	8005cbc <_strtod_l+0x2f4>
 8006594:	f3af 8000 	nop.w
 8006598:	94a03595 	.word	0x94a03595
 800659c:	3fdfffff 	.word	0x3fdfffff
 80065a0:	35afe535 	.word	0x35afe535
 80065a4:	3fe00000 	.word	0x3fe00000
 80065a8:	ffc00000 	.word	0xffc00000
 80065ac:	41dfffff 	.word	0x41dfffff
 80065b0:	94a03595 	.word	0x94a03595
 80065b4:	3fcfffff 	.word	0x3fcfffff
 80065b8:	3ff00000 	.word	0x3ff00000
 80065bc:	7ff00000 	.word	0x7ff00000
 80065c0:	7fe00000 	.word	0x7fe00000
 80065c4:	7c9fffff 	.word	0x7c9fffff
 80065c8:	3fe00000 	.word	0x3fe00000
 80065cc:	bff00000 	.word	0xbff00000
 80065d0:	7fefffff 	.word	0x7fefffff

080065d4 <_strtod_r>:
 80065d4:	4b01      	ldr	r3, [pc, #4]	; (80065dc <_strtod_r+0x8>)
 80065d6:	f7ff b9f7 	b.w	80059c8 <_strtod_l>
 80065da:	bf00      	nop
 80065dc:	20000078 	.word	0x20000078

080065e0 <_strtol_l.constprop.0>:
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065e6:	d001      	beq.n	80065ec <_strtol_l.constprop.0+0xc>
 80065e8:	2b24      	cmp	r3, #36	; 0x24
 80065ea:	d906      	bls.n	80065fa <_strtol_l.constprop.0+0x1a>
 80065ec:	f7fe fa44 	bl	8004a78 <__errno>
 80065f0:	2316      	movs	r3, #22
 80065f2:	6003      	str	r3, [r0, #0]
 80065f4:	2000      	movs	r0, #0
 80065f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065fa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80066e0 <_strtol_l.constprop.0+0x100>
 80065fe:	460d      	mov	r5, r1
 8006600:	462e      	mov	r6, r5
 8006602:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006606:	f814 700c 	ldrb.w	r7, [r4, ip]
 800660a:	f017 0708 	ands.w	r7, r7, #8
 800660e:	d1f7      	bne.n	8006600 <_strtol_l.constprop.0+0x20>
 8006610:	2c2d      	cmp	r4, #45	; 0x2d
 8006612:	d132      	bne.n	800667a <_strtol_l.constprop.0+0x9a>
 8006614:	782c      	ldrb	r4, [r5, #0]
 8006616:	2701      	movs	r7, #1
 8006618:	1cb5      	adds	r5, r6, #2
 800661a:	2b00      	cmp	r3, #0
 800661c:	d05b      	beq.n	80066d6 <_strtol_l.constprop.0+0xf6>
 800661e:	2b10      	cmp	r3, #16
 8006620:	d109      	bne.n	8006636 <_strtol_l.constprop.0+0x56>
 8006622:	2c30      	cmp	r4, #48	; 0x30
 8006624:	d107      	bne.n	8006636 <_strtol_l.constprop.0+0x56>
 8006626:	782c      	ldrb	r4, [r5, #0]
 8006628:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800662c:	2c58      	cmp	r4, #88	; 0x58
 800662e:	d14d      	bne.n	80066cc <_strtol_l.constprop.0+0xec>
 8006630:	786c      	ldrb	r4, [r5, #1]
 8006632:	2310      	movs	r3, #16
 8006634:	3502      	adds	r5, #2
 8006636:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800663a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800663e:	f04f 0c00 	mov.w	ip, #0
 8006642:	fbb8 f9f3 	udiv	r9, r8, r3
 8006646:	4666      	mov	r6, ip
 8006648:	fb03 8a19 	mls	sl, r3, r9, r8
 800664c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006650:	f1be 0f09 	cmp.w	lr, #9
 8006654:	d816      	bhi.n	8006684 <_strtol_l.constprop.0+0xa4>
 8006656:	4674      	mov	r4, lr
 8006658:	42a3      	cmp	r3, r4
 800665a:	dd24      	ble.n	80066a6 <_strtol_l.constprop.0+0xc6>
 800665c:	f1bc 0f00 	cmp.w	ip, #0
 8006660:	db1e      	blt.n	80066a0 <_strtol_l.constprop.0+0xc0>
 8006662:	45b1      	cmp	r9, r6
 8006664:	d31c      	bcc.n	80066a0 <_strtol_l.constprop.0+0xc0>
 8006666:	d101      	bne.n	800666c <_strtol_l.constprop.0+0x8c>
 8006668:	45a2      	cmp	sl, r4
 800666a:	db19      	blt.n	80066a0 <_strtol_l.constprop.0+0xc0>
 800666c:	fb06 4603 	mla	r6, r6, r3, r4
 8006670:	f04f 0c01 	mov.w	ip, #1
 8006674:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006678:	e7e8      	b.n	800664c <_strtol_l.constprop.0+0x6c>
 800667a:	2c2b      	cmp	r4, #43	; 0x2b
 800667c:	bf04      	itt	eq
 800667e:	782c      	ldrbeq	r4, [r5, #0]
 8006680:	1cb5      	addeq	r5, r6, #2
 8006682:	e7ca      	b.n	800661a <_strtol_l.constprop.0+0x3a>
 8006684:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006688:	f1be 0f19 	cmp.w	lr, #25
 800668c:	d801      	bhi.n	8006692 <_strtol_l.constprop.0+0xb2>
 800668e:	3c37      	subs	r4, #55	; 0x37
 8006690:	e7e2      	b.n	8006658 <_strtol_l.constprop.0+0x78>
 8006692:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006696:	f1be 0f19 	cmp.w	lr, #25
 800669a:	d804      	bhi.n	80066a6 <_strtol_l.constprop.0+0xc6>
 800669c:	3c57      	subs	r4, #87	; 0x57
 800669e:	e7db      	b.n	8006658 <_strtol_l.constprop.0+0x78>
 80066a0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80066a4:	e7e6      	b.n	8006674 <_strtol_l.constprop.0+0x94>
 80066a6:	f1bc 0f00 	cmp.w	ip, #0
 80066aa:	da05      	bge.n	80066b8 <_strtol_l.constprop.0+0xd8>
 80066ac:	2322      	movs	r3, #34	; 0x22
 80066ae:	6003      	str	r3, [r0, #0]
 80066b0:	4646      	mov	r6, r8
 80066b2:	b942      	cbnz	r2, 80066c6 <_strtol_l.constprop.0+0xe6>
 80066b4:	4630      	mov	r0, r6
 80066b6:	e79e      	b.n	80065f6 <_strtol_l.constprop.0+0x16>
 80066b8:	b107      	cbz	r7, 80066bc <_strtol_l.constprop.0+0xdc>
 80066ba:	4276      	negs	r6, r6
 80066bc:	2a00      	cmp	r2, #0
 80066be:	d0f9      	beq.n	80066b4 <_strtol_l.constprop.0+0xd4>
 80066c0:	f1bc 0f00 	cmp.w	ip, #0
 80066c4:	d000      	beq.n	80066c8 <_strtol_l.constprop.0+0xe8>
 80066c6:	1e69      	subs	r1, r5, #1
 80066c8:	6011      	str	r1, [r2, #0]
 80066ca:	e7f3      	b.n	80066b4 <_strtol_l.constprop.0+0xd4>
 80066cc:	2430      	movs	r4, #48	; 0x30
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1b1      	bne.n	8006636 <_strtol_l.constprop.0+0x56>
 80066d2:	2308      	movs	r3, #8
 80066d4:	e7af      	b.n	8006636 <_strtol_l.constprop.0+0x56>
 80066d6:	2c30      	cmp	r4, #48	; 0x30
 80066d8:	d0a5      	beq.n	8006626 <_strtol_l.constprop.0+0x46>
 80066da:	230a      	movs	r3, #10
 80066dc:	e7ab      	b.n	8006636 <_strtol_l.constprop.0+0x56>
 80066de:	bf00      	nop
 80066e0:	080097d1 	.word	0x080097d1

080066e4 <_strtol_r>:
 80066e4:	f7ff bf7c 	b.w	80065e0 <_strtol_l.constprop.0>

080066e8 <__swbuf_r>:
 80066e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ea:	460e      	mov	r6, r1
 80066ec:	4614      	mov	r4, r2
 80066ee:	4605      	mov	r5, r0
 80066f0:	b118      	cbz	r0, 80066fa <__swbuf_r+0x12>
 80066f2:	6983      	ldr	r3, [r0, #24]
 80066f4:	b90b      	cbnz	r3, 80066fa <__swbuf_r+0x12>
 80066f6:	f001 f84b 	bl	8007790 <__sinit>
 80066fa:	4b21      	ldr	r3, [pc, #132]	; (8006780 <__swbuf_r+0x98>)
 80066fc:	429c      	cmp	r4, r3
 80066fe:	d12b      	bne.n	8006758 <__swbuf_r+0x70>
 8006700:	686c      	ldr	r4, [r5, #4]
 8006702:	69a3      	ldr	r3, [r4, #24]
 8006704:	60a3      	str	r3, [r4, #8]
 8006706:	89a3      	ldrh	r3, [r4, #12]
 8006708:	071a      	lsls	r2, r3, #28
 800670a:	d52f      	bpl.n	800676c <__swbuf_r+0x84>
 800670c:	6923      	ldr	r3, [r4, #16]
 800670e:	b36b      	cbz	r3, 800676c <__swbuf_r+0x84>
 8006710:	6923      	ldr	r3, [r4, #16]
 8006712:	6820      	ldr	r0, [r4, #0]
 8006714:	1ac0      	subs	r0, r0, r3
 8006716:	6963      	ldr	r3, [r4, #20]
 8006718:	b2f6      	uxtb	r6, r6
 800671a:	4283      	cmp	r3, r0
 800671c:	4637      	mov	r7, r6
 800671e:	dc04      	bgt.n	800672a <__swbuf_r+0x42>
 8006720:	4621      	mov	r1, r4
 8006722:	4628      	mov	r0, r5
 8006724:	f000 ffa0 	bl	8007668 <_fflush_r>
 8006728:	bb30      	cbnz	r0, 8006778 <__swbuf_r+0x90>
 800672a:	68a3      	ldr	r3, [r4, #8]
 800672c:	3b01      	subs	r3, #1
 800672e:	60a3      	str	r3, [r4, #8]
 8006730:	6823      	ldr	r3, [r4, #0]
 8006732:	1c5a      	adds	r2, r3, #1
 8006734:	6022      	str	r2, [r4, #0]
 8006736:	701e      	strb	r6, [r3, #0]
 8006738:	6963      	ldr	r3, [r4, #20]
 800673a:	3001      	adds	r0, #1
 800673c:	4283      	cmp	r3, r0
 800673e:	d004      	beq.n	800674a <__swbuf_r+0x62>
 8006740:	89a3      	ldrh	r3, [r4, #12]
 8006742:	07db      	lsls	r3, r3, #31
 8006744:	d506      	bpl.n	8006754 <__swbuf_r+0x6c>
 8006746:	2e0a      	cmp	r6, #10
 8006748:	d104      	bne.n	8006754 <__swbuf_r+0x6c>
 800674a:	4621      	mov	r1, r4
 800674c:	4628      	mov	r0, r5
 800674e:	f000 ff8b 	bl	8007668 <_fflush_r>
 8006752:	b988      	cbnz	r0, 8006778 <__swbuf_r+0x90>
 8006754:	4638      	mov	r0, r7
 8006756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006758:	4b0a      	ldr	r3, [pc, #40]	; (8006784 <__swbuf_r+0x9c>)
 800675a:	429c      	cmp	r4, r3
 800675c:	d101      	bne.n	8006762 <__swbuf_r+0x7a>
 800675e:	68ac      	ldr	r4, [r5, #8]
 8006760:	e7cf      	b.n	8006702 <__swbuf_r+0x1a>
 8006762:	4b09      	ldr	r3, [pc, #36]	; (8006788 <__swbuf_r+0xa0>)
 8006764:	429c      	cmp	r4, r3
 8006766:	bf08      	it	eq
 8006768:	68ec      	ldreq	r4, [r5, #12]
 800676a:	e7ca      	b.n	8006702 <__swbuf_r+0x1a>
 800676c:	4621      	mov	r1, r4
 800676e:	4628      	mov	r0, r5
 8006770:	f000 f80c 	bl	800678c <__swsetup_r>
 8006774:	2800      	cmp	r0, #0
 8006776:	d0cb      	beq.n	8006710 <__swbuf_r+0x28>
 8006778:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800677c:	e7ea      	b.n	8006754 <__swbuf_r+0x6c>
 800677e:	bf00      	nop
 8006780:	08009984 	.word	0x08009984
 8006784:	080099a4 	.word	0x080099a4
 8006788:	08009964 	.word	0x08009964

0800678c <__swsetup_r>:
 800678c:	4b32      	ldr	r3, [pc, #200]	; (8006858 <__swsetup_r+0xcc>)
 800678e:	b570      	push	{r4, r5, r6, lr}
 8006790:	681d      	ldr	r5, [r3, #0]
 8006792:	4606      	mov	r6, r0
 8006794:	460c      	mov	r4, r1
 8006796:	b125      	cbz	r5, 80067a2 <__swsetup_r+0x16>
 8006798:	69ab      	ldr	r3, [r5, #24]
 800679a:	b913      	cbnz	r3, 80067a2 <__swsetup_r+0x16>
 800679c:	4628      	mov	r0, r5
 800679e:	f000 fff7 	bl	8007790 <__sinit>
 80067a2:	4b2e      	ldr	r3, [pc, #184]	; (800685c <__swsetup_r+0xd0>)
 80067a4:	429c      	cmp	r4, r3
 80067a6:	d10f      	bne.n	80067c8 <__swsetup_r+0x3c>
 80067a8:	686c      	ldr	r4, [r5, #4]
 80067aa:	89a3      	ldrh	r3, [r4, #12]
 80067ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067b0:	0719      	lsls	r1, r3, #28
 80067b2:	d42c      	bmi.n	800680e <__swsetup_r+0x82>
 80067b4:	06dd      	lsls	r5, r3, #27
 80067b6:	d411      	bmi.n	80067dc <__swsetup_r+0x50>
 80067b8:	2309      	movs	r3, #9
 80067ba:	6033      	str	r3, [r6, #0]
 80067bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80067c0:	81a3      	strh	r3, [r4, #12]
 80067c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067c6:	e03e      	b.n	8006846 <__swsetup_r+0xba>
 80067c8:	4b25      	ldr	r3, [pc, #148]	; (8006860 <__swsetup_r+0xd4>)
 80067ca:	429c      	cmp	r4, r3
 80067cc:	d101      	bne.n	80067d2 <__swsetup_r+0x46>
 80067ce:	68ac      	ldr	r4, [r5, #8]
 80067d0:	e7eb      	b.n	80067aa <__swsetup_r+0x1e>
 80067d2:	4b24      	ldr	r3, [pc, #144]	; (8006864 <__swsetup_r+0xd8>)
 80067d4:	429c      	cmp	r4, r3
 80067d6:	bf08      	it	eq
 80067d8:	68ec      	ldreq	r4, [r5, #12]
 80067da:	e7e6      	b.n	80067aa <__swsetup_r+0x1e>
 80067dc:	0758      	lsls	r0, r3, #29
 80067de:	d512      	bpl.n	8006806 <__swsetup_r+0x7a>
 80067e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067e2:	b141      	cbz	r1, 80067f6 <__swsetup_r+0x6a>
 80067e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067e8:	4299      	cmp	r1, r3
 80067ea:	d002      	beq.n	80067f2 <__swsetup_r+0x66>
 80067ec:	4630      	mov	r0, r6
 80067ee:	f002 f939 	bl	8008a64 <_free_r>
 80067f2:	2300      	movs	r3, #0
 80067f4:	6363      	str	r3, [r4, #52]	; 0x34
 80067f6:	89a3      	ldrh	r3, [r4, #12]
 80067f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80067fc:	81a3      	strh	r3, [r4, #12]
 80067fe:	2300      	movs	r3, #0
 8006800:	6063      	str	r3, [r4, #4]
 8006802:	6923      	ldr	r3, [r4, #16]
 8006804:	6023      	str	r3, [r4, #0]
 8006806:	89a3      	ldrh	r3, [r4, #12]
 8006808:	f043 0308 	orr.w	r3, r3, #8
 800680c:	81a3      	strh	r3, [r4, #12]
 800680e:	6923      	ldr	r3, [r4, #16]
 8006810:	b94b      	cbnz	r3, 8006826 <__swsetup_r+0x9a>
 8006812:	89a3      	ldrh	r3, [r4, #12]
 8006814:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800681c:	d003      	beq.n	8006826 <__swsetup_r+0x9a>
 800681e:	4621      	mov	r1, r4
 8006820:	4630      	mov	r0, r6
 8006822:	f001 fbed 	bl	8008000 <__smakebuf_r>
 8006826:	89a0      	ldrh	r0, [r4, #12]
 8006828:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800682c:	f010 0301 	ands.w	r3, r0, #1
 8006830:	d00a      	beq.n	8006848 <__swsetup_r+0xbc>
 8006832:	2300      	movs	r3, #0
 8006834:	60a3      	str	r3, [r4, #8]
 8006836:	6963      	ldr	r3, [r4, #20]
 8006838:	425b      	negs	r3, r3
 800683a:	61a3      	str	r3, [r4, #24]
 800683c:	6923      	ldr	r3, [r4, #16]
 800683e:	b943      	cbnz	r3, 8006852 <__swsetup_r+0xc6>
 8006840:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006844:	d1ba      	bne.n	80067bc <__swsetup_r+0x30>
 8006846:	bd70      	pop	{r4, r5, r6, pc}
 8006848:	0781      	lsls	r1, r0, #30
 800684a:	bf58      	it	pl
 800684c:	6963      	ldrpl	r3, [r4, #20]
 800684e:	60a3      	str	r3, [r4, #8]
 8006850:	e7f4      	b.n	800683c <__swsetup_r+0xb0>
 8006852:	2000      	movs	r0, #0
 8006854:	e7f7      	b.n	8006846 <__swsetup_r+0xba>
 8006856:	bf00      	nop
 8006858:	20000010 	.word	0x20000010
 800685c:	08009984 	.word	0x08009984
 8006860:	080099a4 	.word	0x080099a4
 8006864:	08009964 	.word	0x08009964

08006868 <quorem>:
 8006868:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800686c:	6903      	ldr	r3, [r0, #16]
 800686e:	690c      	ldr	r4, [r1, #16]
 8006870:	42a3      	cmp	r3, r4
 8006872:	4607      	mov	r7, r0
 8006874:	f2c0 8081 	blt.w	800697a <quorem+0x112>
 8006878:	3c01      	subs	r4, #1
 800687a:	f101 0814 	add.w	r8, r1, #20
 800687e:	f100 0514 	add.w	r5, r0, #20
 8006882:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006886:	9301      	str	r3, [sp, #4]
 8006888:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800688c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006890:	3301      	adds	r3, #1
 8006892:	429a      	cmp	r2, r3
 8006894:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006898:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800689c:	fbb2 f6f3 	udiv	r6, r2, r3
 80068a0:	d331      	bcc.n	8006906 <quorem+0x9e>
 80068a2:	f04f 0e00 	mov.w	lr, #0
 80068a6:	4640      	mov	r0, r8
 80068a8:	46ac      	mov	ip, r5
 80068aa:	46f2      	mov	sl, lr
 80068ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80068b0:	b293      	uxth	r3, r2
 80068b2:	fb06 e303 	mla	r3, r6, r3, lr
 80068b6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	ebaa 0303 	sub.w	r3, sl, r3
 80068c0:	f8dc a000 	ldr.w	sl, [ip]
 80068c4:	0c12      	lsrs	r2, r2, #16
 80068c6:	fa13 f38a 	uxtah	r3, r3, sl
 80068ca:	fb06 e202 	mla	r2, r6, r2, lr
 80068ce:	9300      	str	r3, [sp, #0]
 80068d0:	9b00      	ldr	r3, [sp, #0]
 80068d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80068d6:	b292      	uxth	r2, r2
 80068d8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80068dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068e0:	f8bd 3000 	ldrh.w	r3, [sp]
 80068e4:	4581      	cmp	r9, r0
 80068e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068ea:	f84c 3b04 	str.w	r3, [ip], #4
 80068ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80068f2:	d2db      	bcs.n	80068ac <quorem+0x44>
 80068f4:	f855 300b 	ldr.w	r3, [r5, fp]
 80068f8:	b92b      	cbnz	r3, 8006906 <quorem+0x9e>
 80068fa:	9b01      	ldr	r3, [sp, #4]
 80068fc:	3b04      	subs	r3, #4
 80068fe:	429d      	cmp	r5, r3
 8006900:	461a      	mov	r2, r3
 8006902:	d32e      	bcc.n	8006962 <quorem+0xfa>
 8006904:	613c      	str	r4, [r7, #16]
 8006906:	4638      	mov	r0, r7
 8006908:	f001 fea0 	bl	800864c <__mcmp>
 800690c:	2800      	cmp	r0, #0
 800690e:	db24      	blt.n	800695a <quorem+0xf2>
 8006910:	3601      	adds	r6, #1
 8006912:	4628      	mov	r0, r5
 8006914:	f04f 0c00 	mov.w	ip, #0
 8006918:	f858 2b04 	ldr.w	r2, [r8], #4
 800691c:	f8d0 e000 	ldr.w	lr, [r0]
 8006920:	b293      	uxth	r3, r2
 8006922:	ebac 0303 	sub.w	r3, ip, r3
 8006926:	0c12      	lsrs	r2, r2, #16
 8006928:	fa13 f38e 	uxtah	r3, r3, lr
 800692c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006930:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006934:	b29b      	uxth	r3, r3
 8006936:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800693a:	45c1      	cmp	r9, r8
 800693c:	f840 3b04 	str.w	r3, [r0], #4
 8006940:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006944:	d2e8      	bcs.n	8006918 <quorem+0xb0>
 8006946:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800694a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800694e:	b922      	cbnz	r2, 800695a <quorem+0xf2>
 8006950:	3b04      	subs	r3, #4
 8006952:	429d      	cmp	r5, r3
 8006954:	461a      	mov	r2, r3
 8006956:	d30a      	bcc.n	800696e <quorem+0x106>
 8006958:	613c      	str	r4, [r7, #16]
 800695a:	4630      	mov	r0, r6
 800695c:	b003      	add	sp, #12
 800695e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006962:	6812      	ldr	r2, [r2, #0]
 8006964:	3b04      	subs	r3, #4
 8006966:	2a00      	cmp	r2, #0
 8006968:	d1cc      	bne.n	8006904 <quorem+0x9c>
 800696a:	3c01      	subs	r4, #1
 800696c:	e7c7      	b.n	80068fe <quorem+0x96>
 800696e:	6812      	ldr	r2, [r2, #0]
 8006970:	3b04      	subs	r3, #4
 8006972:	2a00      	cmp	r2, #0
 8006974:	d1f0      	bne.n	8006958 <quorem+0xf0>
 8006976:	3c01      	subs	r4, #1
 8006978:	e7eb      	b.n	8006952 <quorem+0xea>
 800697a:	2000      	movs	r0, #0
 800697c:	e7ee      	b.n	800695c <quorem+0xf4>
	...

08006980 <_dtoa_r>:
 8006980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006984:	ed2d 8b04 	vpush	{d8-d9}
 8006988:	ec57 6b10 	vmov	r6, r7, d0
 800698c:	b093      	sub	sp, #76	; 0x4c
 800698e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006990:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006994:	9106      	str	r1, [sp, #24]
 8006996:	ee10 aa10 	vmov	sl, s0
 800699a:	4604      	mov	r4, r0
 800699c:	9209      	str	r2, [sp, #36]	; 0x24
 800699e:	930c      	str	r3, [sp, #48]	; 0x30
 80069a0:	46bb      	mov	fp, r7
 80069a2:	b975      	cbnz	r5, 80069c2 <_dtoa_r+0x42>
 80069a4:	2010      	movs	r0, #16
 80069a6:	f001 fb6b 	bl	8008080 <malloc>
 80069aa:	4602      	mov	r2, r0
 80069ac:	6260      	str	r0, [r4, #36]	; 0x24
 80069ae:	b920      	cbnz	r0, 80069ba <_dtoa_r+0x3a>
 80069b0:	4ba7      	ldr	r3, [pc, #668]	; (8006c50 <_dtoa_r+0x2d0>)
 80069b2:	21ea      	movs	r1, #234	; 0xea
 80069b4:	48a7      	ldr	r0, [pc, #668]	; (8006c54 <_dtoa_r+0x2d4>)
 80069b6:	f002 fb21 	bl	8008ffc <__assert_func>
 80069ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80069be:	6005      	str	r5, [r0, #0]
 80069c0:	60c5      	str	r5, [r0, #12]
 80069c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069c4:	6819      	ldr	r1, [r3, #0]
 80069c6:	b151      	cbz	r1, 80069de <_dtoa_r+0x5e>
 80069c8:	685a      	ldr	r2, [r3, #4]
 80069ca:	604a      	str	r2, [r1, #4]
 80069cc:	2301      	movs	r3, #1
 80069ce:	4093      	lsls	r3, r2
 80069d0:	608b      	str	r3, [r1, #8]
 80069d2:	4620      	mov	r0, r4
 80069d4:	f001 fbae 	bl	8008134 <_Bfree>
 80069d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069da:	2200      	movs	r2, #0
 80069dc:	601a      	str	r2, [r3, #0]
 80069de:	1e3b      	subs	r3, r7, #0
 80069e0:	bfaa      	itet	ge
 80069e2:	2300      	movge	r3, #0
 80069e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80069e8:	f8c8 3000 	strge.w	r3, [r8]
 80069ec:	4b9a      	ldr	r3, [pc, #616]	; (8006c58 <_dtoa_r+0x2d8>)
 80069ee:	bfbc      	itt	lt
 80069f0:	2201      	movlt	r2, #1
 80069f2:	f8c8 2000 	strlt.w	r2, [r8]
 80069f6:	ea33 030b 	bics.w	r3, r3, fp
 80069fa:	d11b      	bne.n	8006a34 <_dtoa_r+0xb4>
 80069fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069fe:	f242 730f 	movw	r3, #9999	; 0x270f
 8006a02:	6013      	str	r3, [r2, #0]
 8006a04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a08:	4333      	orrs	r3, r6
 8006a0a:	f000 8592 	beq.w	8007532 <_dtoa_r+0xbb2>
 8006a0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a10:	b963      	cbnz	r3, 8006a2c <_dtoa_r+0xac>
 8006a12:	4b92      	ldr	r3, [pc, #584]	; (8006c5c <_dtoa_r+0x2dc>)
 8006a14:	e022      	b.n	8006a5c <_dtoa_r+0xdc>
 8006a16:	4b92      	ldr	r3, [pc, #584]	; (8006c60 <_dtoa_r+0x2e0>)
 8006a18:	9301      	str	r3, [sp, #4]
 8006a1a:	3308      	adds	r3, #8
 8006a1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006a1e:	6013      	str	r3, [r2, #0]
 8006a20:	9801      	ldr	r0, [sp, #4]
 8006a22:	b013      	add	sp, #76	; 0x4c
 8006a24:	ecbd 8b04 	vpop	{d8-d9}
 8006a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a2c:	4b8b      	ldr	r3, [pc, #556]	; (8006c5c <_dtoa_r+0x2dc>)
 8006a2e:	9301      	str	r3, [sp, #4]
 8006a30:	3303      	adds	r3, #3
 8006a32:	e7f3      	b.n	8006a1c <_dtoa_r+0x9c>
 8006a34:	2200      	movs	r2, #0
 8006a36:	2300      	movs	r3, #0
 8006a38:	4650      	mov	r0, sl
 8006a3a:	4659      	mov	r1, fp
 8006a3c:	f7fa f854 	bl	8000ae8 <__aeabi_dcmpeq>
 8006a40:	ec4b ab19 	vmov	d9, sl, fp
 8006a44:	4680      	mov	r8, r0
 8006a46:	b158      	cbz	r0, 8006a60 <_dtoa_r+0xe0>
 8006a48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	6013      	str	r3, [r2, #0]
 8006a4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 856b 	beq.w	800752c <_dtoa_r+0xbac>
 8006a56:	4883      	ldr	r0, [pc, #524]	; (8006c64 <_dtoa_r+0x2e4>)
 8006a58:	6018      	str	r0, [r3, #0]
 8006a5a:	1e43      	subs	r3, r0, #1
 8006a5c:	9301      	str	r3, [sp, #4]
 8006a5e:	e7df      	b.n	8006a20 <_dtoa_r+0xa0>
 8006a60:	ec4b ab10 	vmov	d0, sl, fp
 8006a64:	aa10      	add	r2, sp, #64	; 0x40
 8006a66:	a911      	add	r1, sp, #68	; 0x44
 8006a68:	4620      	mov	r0, r4
 8006a6a:	f001 ff11 	bl	8008890 <__d2b>
 8006a6e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006a72:	ee08 0a10 	vmov	s16, r0
 8006a76:	2d00      	cmp	r5, #0
 8006a78:	f000 8084 	beq.w	8006b84 <_dtoa_r+0x204>
 8006a7c:	ee19 3a90 	vmov	r3, s19
 8006a80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a84:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006a88:	4656      	mov	r6, sl
 8006a8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006a8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006a92:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006a96:	4b74      	ldr	r3, [pc, #464]	; (8006c68 <_dtoa_r+0x2e8>)
 8006a98:	2200      	movs	r2, #0
 8006a9a:	4630      	mov	r0, r6
 8006a9c:	4639      	mov	r1, r7
 8006a9e:	f7f9 fc03 	bl	80002a8 <__aeabi_dsub>
 8006aa2:	a365      	add	r3, pc, #404	; (adr r3, 8006c38 <_dtoa_r+0x2b8>)
 8006aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa8:	f7f9 fdb6 	bl	8000618 <__aeabi_dmul>
 8006aac:	a364      	add	r3, pc, #400	; (adr r3, 8006c40 <_dtoa_r+0x2c0>)
 8006aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab2:	f7f9 fbfb 	bl	80002ac <__adddf3>
 8006ab6:	4606      	mov	r6, r0
 8006ab8:	4628      	mov	r0, r5
 8006aba:	460f      	mov	r7, r1
 8006abc:	f7f9 fd42 	bl	8000544 <__aeabi_i2d>
 8006ac0:	a361      	add	r3, pc, #388	; (adr r3, 8006c48 <_dtoa_r+0x2c8>)
 8006ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac6:	f7f9 fda7 	bl	8000618 <__aeabi_dmul>
 8006aca:	4602      	mov	r2, r0
 8006acc:	460b      	mov	r3, r1
 8006ace:	4630      	mov	r0, r6
 8006ad0:	4639      	mov	r1, r7
 8006ad2:	f7f9 fbeb 	bl	80002ac <__adddf3>
 8006ad6:	4606      	mov	r6, r0
 8006ad8:	460f      	mov	r7, r1
 8006ada:	f7fa f84d 	bl	8000b78 <__aeabi_d2iz>
 8006ade:	2200      	movs	r2, #0
 8006ae0:	9000      	str	r0, [sp, #0]
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	4630      	mov	r0, r6
 8006ae6:	4639      	mov	r1, r7
 8006ae8:	f7fa f808 	bl	8000afc <__aeabi_dcmplt>
 8006aec:	b150      	cbz	r0, 8006b04 <_dtoa_r+0x184>
 8006aee:	9800      	ldr	r0, [sp, #0]
 8006af0:	f7f9 fd28 	bl	8000544 <__aeabi_i2d>
 8006af4:	4632      	mov	r2, r6
 8006af6:	463b      	mov	r3, r7
 8006af8:	f7f9 fff6 	bl	8000ae8 <__aeabi_dcmpeq>
 8006afc:	b910      	cbnz	r0, 8006b04 <_dtoa_r+0x184>
 8006afe:	9b00      	ldr	r3, [sp, #0]
 8006b00:	3b01      	subs	r3, #1
 8006b02:	9300      	str	r3, [sp, #0]
 8006b04:	9b00      	ldr	r3, [sp, #0]
 8006b06:	2b16      	cmp	r3, #22
 8006b08:	d85a      	bhi.n	8006bc0 <_dtoa_r+0x240>
 8006b0a:	9a00      	ldr	r2, [sp, #0]
 8006b0c:	4b57      	ldr	r3, [pc, #348]	; (8006c6c <_dtoa_r+0x2ec>)
 8006b0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b16:	ec51 0b19 	vmov	r0, r1, d9
 8006b1a:	f7f9 ffef 	bl	8000afc <__aeabi_dcmplt>
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	d050      	beq.n	8006bc4 <_dtoa_r+0x244>
 8006b22:	9b00      	ldr	r3, [sp, #0]
 8006b24:	3b01      	subs	r3, #1
 8006b26:	9300      	str	r3, [sp, #0]
 8006b28:	2300      	movs	r3, #0
 8006b2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b2e:	1b5d      	subs	r5, r3, r5
 8006b30:	1e6b      	subs	r3, r5, #1
 8006b32:	9305      	str	r3, [sp, #20]
 8006b34:	bf45      	ittet	mi
 8006b36:	f1c5 0301 	rsbmi	r3, r5, #1
 8006b3a:	9304      	strmi	r3, [sp, #16]
 8006b3c:	2300      	movpl	r3, #0
 8006b3e:	2300      	movmi	r3, #0
 8006b40:	bf4c      	ite	mi
 8006b42:	9305      	strmi	r3, [sp, #20]
 8006b44:	9304      	strpl	r3, [sp, #16]
 8006b46:	9b00      	ldr	r3, [sp, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	db3d      	blt.n	8006bc8 <_dtoa_r+0x248>
 8006b4c:	9b05      	ldr	r3, [sp, #20]
 8006b4e:	9a00      	ldr	r2, [sp, #0]
 8006b50:	920a      	str	r2, [sp, #40]	; 0x28
 8006b52:	4413      	add	r3, r2
 8006b54:	9305      	str	r3, [sp, #20]
 8006b56:	2300      	movs	r3, #0
 8006b58:	9307      	str	r3, [sp, #28]
 8006b5a:	9b06      	ldr	r3, [sp, #24]
 8006b5c:	2b09      	cmp	r3, #9
 8006b5e:	f200 8089 	bhi.w	8006c74 <_dtoa_r+0x2f4>
 8006b62:	2b05      	cmp	r3, #5
 8006b64:	bfc4      	itt	gt
 8006b66:	3b04      	subgt	r3, #4
 8006b68:	9306      	strgt	r3, [sp, #24]
 8006b6a:	9b06      	ldr	r3, [sp, #24]
 8006b6c:	f1a3 0302 	sub.w	r3, r3, #2
 8006b70:	bfcc      	ite	gt
 8006b72:	2500      	movgt	r5, #0
 8006b74:	2501      	movle	r5, #1
 8006b76:	2b03      	cmp	r3, #3
 8006b78:	f200 8087 	bhi.w	8006c8a <_dtoa_r+0x30a>
 8006b7c:	e8df f003 	tbb	[pc, r3]
 8006b80:	59383a2d 	.word	0x59383a2d
 8006b84:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006b88:	441d      	add	r5, r3
 8006b8a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006b8e:	2b20      	cmp	r3, #32
 8006b90:	bfc1      	itttt	gt
 8006b92:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006b96:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006b9a:	fa0b f303 	lslgt.w	r3, fp, r3
 8006b9e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006ba2:	bfda      	itte	le
 8006ba4:	f1c3 0320 	rsble	r3, r3, #32
 8006ba8:	fa06 f003 	lslle.w	r0, r6, r3
 8006bac:	4318      	orrgt	r0, r3
 8006bae:	f7f9 fcb9 	bl	8000524 <__aeabi_ui2d>
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	4606      	mov	r6, r0
 8006bb6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006bba:	3d01      	subs	r5, #1
 8006bbc:	930e      	str	r3, [sp, #56]	; 0x38
 8006bbe:	e76a      	b.n	8006a96 <_dtoa_r+0x116>
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e7b2      	b.n	8006b2a <_dtoa_r+0x1aa>
 8006bc4:	900b      	str	r0, [sp, #44]	; 0x2c
 8006bc6:	e7b1      	b.n	8006b2c <_dtoa_r+0x1ac>
 8006bc8:	9b04      	ldr	r3, [sp, #16]
 8006bca:	9a00      	ldr	r2, [sp, #0]
 8006bcc:	1a9b      	subs	r3, r3, r2
 8006bce:	9304      	str	r3, [sp, #16]
 8006bd0:	4253      	negs	r3, r2
 8006bd2:	9307      	str	r3, [sp, #28]
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	930a      	str	r3, [sp, #40]	; 0x28
 8006bd8:	e7bf      	b.n	8006b5a <_dtoa_r+0x1da>
 8006bda:	2300      	movs	r3, #0
 8006bdc:	9308      	str	r3, [sp, #32]
 8006bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	dc55      	bgt.n	8006c90 <_dtoa_r+0x310>
 8006be4:	2301      	movs	r3, #1
 8006be6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006bea:	461a      	mov	r2, r3
 8006bec:	9209      	str	r2, [sp, #36]	; 0x24
 8006bee:	e00c      	b.n	8006c0a <_dtoa_r+0x28a>
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e7f3      	b.n	8006bdc <_dtoa_r+0x25c>
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bf8:	9308      	str	r3, [sp, #32]
 8006bfa:	9b00      	ldr	r3, [sp, #0]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	9302      	str	r3, [sp, #8]
 8006c00:	3301      	adds	r3, #1
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	9303      	str	r3, [sp, #12]
 8006c06:	bfb8      	it	lt
 8006c08:	2301      	movlt	r3, #1
 8006c0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	6042      	str	r2, [r0, #4]
 8006c10:	2204      	movs	r2, #4
 8006c12:	f102 0614 	add.w	r6, r2, #20
 8006c16:	429e      	cmp	r6, r3
 8006c18:	6841      	ldr	r1, [r0, #4]
 8006c1a:	d93d      	bls.n	8006c98 <_dtoa_r+0x318>
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	f001 fa49 	bl	80080b4 <_Balloc>
 8006c22:	9001      	str	r0, [sp, #4]
 8006c24:	2800      	cmp	r0, #0
 8006c26:	d13b      	bne.n	8006ca0 <_dtoa_r+0x320>
 8006c28:	4b11      	ldr	r3, [pc, #68]	; (8006c70 <_dtoa_r+0x2f0>)
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006c30:	e6c0      	b.n	80069b4 <_dtoa_r+0x34>
 8006c32:	2301      	movs	r3, #1
 8006c34:	e7df      	b.n	8006bf6 <_dtoa_r+0x276>
 8006c36:	bf00      	nop
 8006c38:	636f4361 	.word	0x636f4361
 8006c3c:	3fd287a7 	.word	0x3fd287a7
 8006c40:	8b60c8b3 	.word	0x8b60c8b3
 8006c44:	3fc68a28 	.word	0x3fc68a28
 8006c48:	509f79fb 	.word	0x509f79fb
 8006c4c:	3fd34413 	.word	0x3fd34413
 8006c50:	080098de 	.word	0x080098de
 8006c54:	080098f5 	.word	0x080098f5
 8006c58:	7ff00000 	.word	0x7ff00000
 8006c5c:	080098da 	.word	0x080098da
 8006c60:	080098d1 	.word	0x080098d1
 8006c64:	08009751 	.word	0x08009751
 8006c68:	3ff80000 	.word	0x3ff80000
 8006c6c:	08009ac8 	.word	0x08009ac8
 8006c70:	08009950 	.word	0x08009950
 8006c74:	2501      	movs	r5, #1
 8006c76:	2300      	movs	r3, #0
 8006c78:	9306      	str	r3, [sp, #24]
 8006c7a:	9508      	str	r5, [sp, #32]
 8006c7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c80:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006c84:	2200      	movs	r2, #0
 8006c86:	2312      	movs	r3, #18
 8006c88:	e7b0      	b.n	8006bec <_dtoa_r+0x26c>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	9308      	str	r3, [sp, #32]
 8006c8e:	e7f5      	b.n	8006c7c <_dtoa_r+0x2fc>
 8006c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c92:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006c96:	e7b8      	b.n	8006c0a <_dtoa_r+0x28a>
 8006c98:	3101      	adds	r1, #1
 8006c9a:	6041      	str	r1, [r0, #4]
 8006c9c:	0052      	lsls	r2, r2, #1
 8006c9e:	e7b8      	b.n	8006c12 <_dtoa_r+0x292>
 8006ca0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ca2:	9a01      	ldr	r2, [sp, #4]
 8006ca4:	601a      	str	r2, [r3, #0]
 8006ca6:	9b03      	ldr	r3, [sp, #12]
 8006ca8:	2b0e      	cmp	r3, #14
 8006caa:	f200 809d 	bhi.w	8006de8 <_dtoa_r+0x468>
 8006cae:	2d00      	cmp	r5, #0
 8006cb0:	f000 809a 	beq.w	8006de8 <_dtoa_r+0x468>
 8006cb4:	9b00      	ldr	r3, [sp, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	dd32      	ble.n	8006d20 <_dtoa_r+0x3a0>
 8006cba:	4ab7      	ldr	r2, [pc, #732]	; (8006f98 <_dtoa_r+0x618>)
 8006cbc:	f003 030f 	and.w	r3, r3, #15
 8006cc0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006cc4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006cc8:	9b00      	ldr	r3, [sp, #0]
 8006cca:	05d8      	lsls	r0, r3, #23
 8006ccc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006cd0:	d516      	bpl.n	8006d00 <_dtoa_r+0x380>
 8006cd2:	4bb2      	ldr	r3, [pc, #712]	; (8006f9c <_dtoa_r+0x61c>)
 8006cd4:	ec51 0b19 	vmov	r0, r1, d9
 8006cd8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006cdc:	f7f9 fdc6 	bl	800086c <__aeabi_ddiv>
 8006ce0:	f007 070f 	and.w	r7, r7, #15
 8006ce4:	4682      	mov	sl, r0
 8006ce6:	468b      	mov	fp, r1
 8006ce8:	2503      	movs	r5, #3
 8006cea:	4eac      	ldr	r6, [pc, #688]	; (8006f9c <_dtoa_r+0x61c>)
 8006cec:	b957      	cbnz	r7, 8006d04 <_dtoa_r+0x384>
 8006cee:	4642      	mov	r2, r8
 8006cf0:	464b      	mov	r3, r9
 8006cf2:	4650      	mov	r0, sl
 8006cf4:	4659      	mov	r1, fp
 8006cf6:	f7f9 fdb9 	bl	800086c <__aeabi_ddiv>
 8006cfa:	4682      	mov	sl, r0
 8006cfc:	468b      	mov	fp, r1
 8006cfe:	e028      	b.n	8006d52 <_dtoa_r+0x3d2>
 8006d00:	2502      	movs	r5, #2
 8006d02:	e7f2      	b.n	8006cea <_dtoa_r+0x36a>
 8006d04:	07f9      	lsls	r1, r7, #31
 8006d06:	d508      	bpl.n	8006d1a <_dtoa_r+0x39a>
 8006d08:	4640      	mov	r0, r8
 8006d0a:	4649      	mov	r1, r9
 8006d0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006d10:	f7f9 fc82 	bl	8000618 <__aeabi_dmul>
 8006d14:	3501      	adds	r5, #1
 8006d16:	4680      	mov	r8, r0
 8006d18:	4689      	mov	r9, r1
 8006d1a:	107f      	asrs	r7, r7, #1
 8006d1c:	3608      	adds	r6, #8
 8006d1e:	e7e5      	b.n	8006cec <_dtoa_r+0x36c>
 8006d20:	f000 809b 	beq.w	8006e5a <_dtoa_r+0x4da>
 8006d24:	9b00      	ldr	r3, [sp, #0]
 8006d26:	4f9d      	ldr	r7, [pc, #628]	; (8006f9c <_dtoa_r+0x61c>)
 8006d28:	425e      	negs	r6, r3
 8006d2a:	4b9b      	ldr	r3, [pc, #620]	; (8006f98 <_dtoa_r+0x618>)
 8006d2c:	f006 020f 	and.w	r2, r6, #15
 8006d30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d38:	ec51 0b19 	vmov	r0, r1, d9
 8006d3c:	f7f9 fc6c 	bl	8000618 <__aeabi_dmul>
 8006d40:	1136      	asrs	r6, r6, #4
 8006d42:	4682      	mov	sl, r0
 8006d44:	468b      	mov	fp, r1
 8006d46:	2300      	movs	r3, #0
 8006d48:	2502      	movs	r5, #2
 8006d4a:	2e00      	cmp	r6, #0
 8006d4c:	d17a      	bne.n	8006e44 <_dtoa_r+0x4c4>
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1d3      	bne.n	8006cfa <_dtoa_r+0x37a>
 8006d52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f000 8082 	beq.w	8006e5e <_dtoa_r+0x4de>
 8006d5a:	4b91      	ldr	r3, [pc, #580]	; (8006fa0 <_dtoa_r+0x620>)
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	4650      	mov	r0, sl
 8006d60:	4659      	mov	r1, fp
 8006d62:	f7f9 fecb 	bl	8000afc <__aeabi_dcmplt>
 8006d66:	2800      	cmp	r0, #0
 8006d68:	d079      	beq.n	8006e5e <_dtoa_r+0x4de>
 8006d6a:	9b03      	ldr	r3, [sp, #12]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d076      	beq.n	8006e5e <_dtoa_r+0x4de>
 8006d70:	9b02      	ldr	r3, [sp, #8]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	dd36      	ble.n	8006de4 <_dtoa_r+0x464>
 8006d76:	9b00      	ldr	r3, [sp, #0]
 8006d78:	4650      	mov	r0, sl
 8006d7a:	4659      	mov	r1, fp
 8006d7c:	1e5f      	subs	r7, r3, #1
 8006d7e:	2200      	movs	r2, #0
 8006d80:	4b88      	ldr	r3, [pc, #544]	; (8006fa4 <_dtoa_r+0x624>)
 8006d82:	f7f9 fc49 	bl	8000618 <__aeabi_dmul>
 8006d86:	9e02      	ldr	r6, [sp, #8]
 8006d88:	4682      	mov	sl, r0
 8006d8a:	468b      	mov	fp, r1
 8006d8c:	3501      	adds	r5, #1
 8006d8e:	4628      	mov	r0, r5
 8006d90:	f7f9 fbd8 	bl	8000544 <__aeabi_i2d>
 8006d94:	4652      	mov	r2, sl
 8006d96:	465b      	mov	r3, fp
 8006d98:	f7f9 fc3e 	bl	8000618 <__aeabi_dmul>
 8006d9c:	4b82      	ldr	r3, [pc, #520]	; (8006fa8 <_dtoa_r+0x628>)
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f7f9 fa84 	bl	80002ac <__adddf3>
 8006da4:	46d0      	mov	r8, sl
 8006da6:	46d9      	mov	r9, fp
 8006da8:	4682      	mov	sl, r0
 8006daa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006dae:	2e00      	cmp	r6, #0
 8006db0:	d158      	bne.n	8006e64 <_dtoa_r+0x4e4>
 8006db2:	4b7e      	ldr	r3, [pc, #504]	; (8006fac <_dtoa_r+0x62c>)
 8006db4:	2200      	movs	r2, #0
 8006db6:	4640      	mov	r0, r8
 8006db8:	4649      	mov	r1, r9
 8006dba:	f7f9 fa75 	bl	80002a8 <__aeabi_dsub>
 8006dbe:	4652      	mov	r2, sl
 8006dc0:	465b      	mov	r3, fp
 8006dc2:	4680      	mov	r8, r0
 8006dc4:	4689      	mov	r9, r1
 8006dc6:	f7f9 feb7 	bl	8000b38 <__aeabi_dcmpgt>
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	f040 8295 	bne.w	80072fa <_dtoa_r+0x97a>
 8006dd0:	4652      	mov	r2, sl
 8006dd2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006dd6:	4640      	mov	r0, r8
 8006dd8:	4649      	mov	r1, r9
 8006dda:	f7f9 fe8f 	bl	8000afc <__aeabi_dcmplt>
 8006dde:	2800      	cmp	r0, #0
 8006de0:	f040 8289 	bne.w	80072f6 <_dtoa_r+0x976>
 8006de4:	ec5b ab19 	vmov	sl, fp, d9
 8006de8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f2c0 8148 	blt.w	8007080 <_dtoa_r+0x700>
 8006df0:	9a00      	ldr	r2, [sp, #0]
 8006df2:	2a0e      	cmp	r2, #14
 8006df4:	f300 8144 	bgt.w	8007080 <_dtoa_r+0x700>
 8006df8:	4b67      	ldr	r3, [pc, #412]	; (8006f98 <_dtoa_r+0x618>)
 8006dfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dfe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f280 80d5 	bge.w	8006fb4 <_dtoa_r+0x634>
 8006e0a:	9b03      	ldr	r3, [sp, #12]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f300 80d1 	bgt.w	8006fb4 <_dtoa_r+0x634>
 8006e12:	f040 826f 	bne.w	80072f4 <_dtoa_r+0x974>
 8006e16:	4b65      	ldr	r3, [pc, #404]	; (8006fac <_dtoa_r+0x62c>)
 8006e18:	2200      	movs	r2, #0
 8006e1a:	4640      	mov	r0, r8
 8006e1c:	4649      	mov	r1, r9
 8006e1e:	f7f9 fbfb 	bl	8000618 <__aeabi_dmul>
 8006e22:	4652      	mov	r2, sl
 8006e24:	465b      	mov	r3, fp
 8006e26:	f7f9 fe7d 	bl	8000b24 <__aeabi_dcmpge>
 8006e2a:	9e03      	ldr	r6, [sp, #12]
 8006e2c:	4637      	mov	r7, r6
 8006e2e:	2800      	cmp	r0, #0
 8006e30:	f040 8245 	bne.w	80072be <_dtoa_r+0x93e>
 8006e34:	9d01      	ldr	r5, [sp, #4]
 8006e36:	2331      	movs	r3, #49	; 0x31
 8006e38:	f805 3b01 	strb.w	r3, [r5], #1
 8006e3c:	9b00      	ldr	r3, [sp, #0]
 8006e3e:	3301      	adds	r3, #1
 8006e40:	9300      	str	r3, [sp, #0]
 8006e42:	e240      	b.n	80072c6 <_dtoa_r+0x946>
 8006e44:	07f2      	lsls	r2, r6, #31
 8006e46:	d505      	bpl.n	8006e54 <_dtoa_r+0x4d4>
 8006e48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e4c:	f7f9 fbe4 	bl	8000618 <__aeabi_dmul>
 8006e50:	3501      	adds	r5, #1
 8006e52:	2301      	movs	r3, #1
 8006e54:	1076      	asrs	r6, r6, #1
 8006e56:	3708      	adds	r7, #8
 8006e58:	e777      	b.n	8006d4a <_dtoa_r+0x3ca>
 8006e5a:	2502      	movs	r5, #2
 8006e5c:	e779      	b.n	8006d52 <_dtoa_r+0x3d2>
 8006e5e:	9f00      	ldr	r7, [sp, #0]
 8006e60:	9e03      	ldr	r6, [sp, #12]
 8006e62:	e794      	b.n	8006d8e <_dtoa_r+0x40e>
 8006e64:	9901      	ldr	r1, [sp, #4]
 8006e66:	4b4c      	ldr	r3, [pc, #304]	; (8006f98 <_dtoa_r+0x618>)
 8006e68:	4431      	add	r1, r6
 8006e6a:	910d      	str	r1, [sp, #52]	; 0x34
 8006e6c:	9908      	ldr	r1, [sp, #32]
 8006e6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006e72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e76:	2900      	cmp	r1, #0
 8006e78:	d043      	beq.n	8006f02 <_dtoa_r+0x582>
 8006e7a:	494d      	ldr	r1, [pc, #308]	; (8006fb0 <_dtoa_r+0x630>)
 8006e7c:	2000      	movs	r0, #0
 8006e7e:	f7f9 fcf5 	bl	800086c <__aeabi_ddiv>
 8006e82:	4652      	mov	r2, sl
 8006e84:	465b      	mov	r3, fp
 8006e86:	f7f9 fa0f 	bl	80002a8 <__aeabi_dsub>
 8006e8a:	9d01      	ldr	r5, [sp, #4]
 8006e8c:	4682      	mov	sl, r0
 8006e8e:	468b      	mov	fp, r1
 8006e90:	4649      	mov	r1, r9
 8006e92:	4640      	mov	r0, r8
 8006e94:	f7f9 fe70 	bl	8000b78 <__aeabi_d2iz>
 8006e98:	4606      	mov	r6, r0
 8006e9a:	f7f9 fb53 	bl	8000544 <__aeabi_i2d>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	4640      	mov	r0, r8
 8006ea4:	4649      	mov	r1, r9
 8006ea6:	f7f9 f9ff 	bl	80002a8 <__aeabi_dsub>
 8006eaa:	3630      	adds	r6, #48	; 0x30
 8006eac:	f805 6b01 	strb.w	r6, [r5], #1
 8006eb0:	4652      	mov	r2, sl
 8006eb2:	465b      	mov	r3, fp
 8006eb4:	4680      	mov	r8, r0
 8006eb6:	4689      	mov	r9, r1
 8006eb8:	f7f9 fe20 	bl	8000afc <__aeabi_dcmplt>
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	d163      	bne.n	8006f88 <_dtoa_r+0x608>
 8006ec0:	4642      	mov	r2, r8
 8006ec2:	464b      	mov	r3, r9
 8006ec4:	4936      	ldr	r1, [pc, #216]	; (8006fa0 <_dtoa_r+0x620>)
 8006ec6:	2000      	movs	r0, #0
 8006ec8:	f7f9 f9ee 	bl	80002a8 <__aeabi_dsub>
 8006ecc:	4652      	mov	r2, sl
 8006ece:	465b      	mov	r3, fp
 8006ed0:	f7f9 fe14 	bl	8000afc <__aeabi_dcmplt>
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	f040 80b5 	bne.w	8007044 <_dtoa_r+0x6c4>
 8006eda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006edc:	429d      	cmp	r5, r3
 8006ede:	d081      	beq.n	8006de4 <_dtoa_r+0x464>
 8006ee0:	4b30      	ldr	r3, [pc, #192]	; (8006fa4 <_dtoa_r+0x624>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	4650      	mov	r0, sl
 8006ee6:	4659      	mov	r1, fp
 8006ee8:	f7f9 fb96 	bl	8000618 <__aeabi_dmul>
 8006eec:	4b2d      	ldr	r3, [pc, #180]	; (8006fa4 <_dtoa_r+0x624>)
 8006eee:	4682      	mov	sl, r0
 8006ef0:	468b      	mov	fp, r1
 8006ef2:	4640      	mov	r0, r8
 8006ef4:	4649      	mov	r1, r9
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f7f9 fb8e 	bl	8000618 <__aeabi_dmul>
 8006efc:	4680      	mov	r8, r0
 8006efe:	4689      	mov	r9, r1
 8006f00:	e7c6      	b.n	8006e90 <_dtoa_r+0x510>
 8006f02:	4650      	mov	r0, sl
 8006f04:	4659      	mov	r1, fp
 8006f06:	f7f9 fb87 	bl	8000618 <__aeabi_dmul>
 8006f0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f0c:	9d01      	ldr	r5, [sp, #4]
 8006f0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f10:	4682      	mov	sl, r0
 8006f12:	468b      	mov	fp, r1
 8006f14:	4649      	mov	r1, r9
 8006f16:	4640      	mov	r0, r8
 8006f18:	f7f9 fe2e 	bl	8000b78 <__aeabi_d2iz>
 8006f1c:	4606      	mov	r6, r0
 8006f1e:	f7f9 fb11 	bl	8000544 <__aeabi_i2d>
 8006f22:	3630      	adds	r6, #48	; 0x30
 8006f24:	4602      	mov	r2, r0
 8006f26:	460b      	mov	r3, r1
 8006f28:	4640      	mov	r0, r8
 8006f2a:	4649      	mov	r1, r9
 8006f2c:	f7f9 f9bc 	bl	80002a8 <__aeabi_dsub>
 8006f30:	f805 6b01 	strb.w	r6, [r5], #1
 8006f34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f36:	429d      	cmp	r5, r3
 8006f38:	4680      	mov	r8, r0
 8006f3a:	4689      	mov	r9, r1
 8006f3c:	f04f 0200 	mov.w	r2, #0
 8006f40:	d124      	bne.n	8006f8c <_dtoa_r+0x60c>
 8006f42:	4b1b      	ldr	r3, [pc, #108]	; (8006fb0 <_dtoa_r+0x630>)
 8006f44:	4650      	mov	r0, sl
 8006f46:	4659      	mov	r1, fp
 8006f48:	f7f9 f9b0 	bl	80002ac <__adddf3>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	460b      	mov	r3, r1
 8006f50:	4640      	mov	r0, r8
 8006f52:	4649      	mov	r1, r9
 8006f54:	f7f9 fdf0 	bl	8000b38 <__aeabi_dcmpgt>
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	d173      	bne.n	8007044 <_dtoa_r+0x6c4>
 8006f5c:	4652      	mov	r2, sl
 8006f5e:	465b      	mov	r3, fp
 8006f60:	4913      	ldr	r1, [pc, #76]	; (8006fb0 <_dtoa_r+0x630>)
 8006f62:	2000      	movs	r0, #0
 8006f64:	f7f9 f9a0 	bl	80002a8 <__aeabi_dsub>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	4640      	mov	r0, r8
 8006f6e:	4649      	mov	r1, r9
 8006f70:	f7f9 fdc4 	bl	8000afc <__aeabi_dcmplt>
 8006f74:	2800      	cmp	r0, #0
 8006f76:	f43f af35 	beq.w	8006de4 <_dtoa_r+0x464>
 8006f7a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006f7c:	1e6b      	subs	r3, r5, #1
 8006f7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f80:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006f84:	2b30      	cmp	r3, #48	; 0x30
 8006f86:	d0f8      	beq.n	8006f7a <_dtoa_r+0x5fa>
 8006f88:	9700      	str	r7, [sp, #0]
 8006f8a:	e049      	b.n	8007020 <_dtoa_r+0x6a0>
 8006f8c:	4b05      	ldr	r3, [pc, #20]	; (8006fa4 <_dtoa_r+0x624>)
 8006f8e:	f7f9 fb43 	bl	8000618 <__aeabi_dmul>
 8006f92:	4680      	mov	r8, r0
 8006f94:	4689      	mov	r9, r1
 8006f96:	e7bd      	b.n	8006f14 <_dtoa_r+0x594>
 8006f98:	08009ac8 	.word	0x08009ac8
 8006f9c:	08009aa0 	.word	0x08009aa0
 8006fa0:	3ff00000 	.word	0x3ff00000
 8006fa4:	40240000 	.word	0x40240000
 8006fa8:	401c0000 	.word	0x401c0000
 8006fac:	40140000 	.word	0x40140000
 8006fb0:	3fe00000 	.word	0x3fe00000
 8006fb4:	9d01      	ldr	r5, [sp, #4]
 8006fb6:	4656      	mov	r6, sl
 8006fb8:	465f      	mov	r7, fp
 8006fba:	4642      	mov	r2, r8
 8006fbc:	464b      	mov	r3, r9
 8006fbe:	4630      	mov	r0, r6
 8006fc0:	4639      	mov	r1, r7
 8006fc2:	f7f9 fc53 	bl	800086c <__aeabi_ddiv>
 8006fc6:	f7f9 fdd7 	bl	8000b78 <__aeabi_d2iz>
 8006fca:	4682      	mov	sl, r0
 8006fcc:	f7f9 faba 	bl	8000544 <__aeabi_i2d>
 8006fd0:	4642      	mov	r2, r8
 8006fd2:	464b      	mov	r3, r9
 8006fd4:	f7f9 fb20 	bl	8000618 <__aeabi_dmul>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	460b      	mov	r3, r1
 8006fdc:	4630      	mov	r0, r6
 8006fde:	4639      	mov	r1, r7
 8006fe0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006fe4:	f7f9 f960 	bl	80002a8 <__aeabi_dsub>
 8006fe8:	f805 6b01 	strb.w	r6, [r5], #1
 8006fec:	9e01      	ldr	r6, [sp, #4]
 8006fee:	9f03      	ldr	r7, [sp, #12]
 8006ff0:	1bae      	subs	r6, r5, r6
 8006ff2:	42b7      	cmp	r7, r6
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	d135      	bne.n	8007066 <_dtoa_r+0x6e6>
 8006ffa:	f7f9 f957 	bl	80002ac <__adddf3>
 8006ffe:	4642      	mov	r2, r8
 8007000:	464b      	mov	r3, r9
 8007002:	4606      	mov	r6, r0
 8007004:	460f      	mov	r7, r1
 8007006:	f7f9 fd97 	bl	8000b38 <__aeabi_dcmpgt>
 800700a:	b9d0      	cbnz	r0, 8007042 <_dtoa_r+0x6c2>
 800700c:	4642      	mov	r2, r8
 800700e:	464b      	mov	r3, r9
 8007010:	4630      	mov	r0, r6
 8007012:	4639      	mov	r1, r7
 8007014:	f7f9 fd68 	bl	8000ae8 <__aeabi_dcmpeq>
 8007018:	b110      	cbz	r0, 8007020 <_dtoa_r+0x6a0>
 800701a:	f01a 0f01 	tst.w	sl, #1
 800701e:	d110      	bne.n	8007042 <_dtoa_r+0x6c2>
 8007020:	4620      	mov	r0, r4
 8007022:	ee18 1a10 	vmov	r1, s16
 8007026:	f001 f885 	bl	8008134 <_Bfree>
 800702a:	2300      	movs	r3, #0
 800702c:	9800      	ldr	r0, [sp, #0]
 800702e:	702b      	strb	r3, [r5, #0]
 8007030:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007032:	3001      	adds	r0, #1
 8007034:	6018      	str	r0, [r3, #0]
 8007036:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007038:	2b00      	cmp	r3, #0
 800703a:	f43f acf1 	beq.w	8006a20 <_dtoa_r+0xa0>
 800703e:	601d      	str	r5, [r3, #0]
 8007040:	e4ee      	b.n	8006a20 <_dtoa_r+0xa0>
 8007042:	9f00      	ldr	r7, [sp, #0]
 8007044:	462b      	mov	r3, r5
 8007046:	461d      	mov	r5, r3
 8007048:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800704c:	2a39      	cmp	r2, #57	; 0x39
 800704e:	d106      	bne.n	800705e <_dtoa_r+0x6de>
 8007050:	9a01      	ldr	r2, [sp, #4]
 8007052:	429a      	cmp	r2, r3
 8007054:	d1f7      	bne.n	8007046 <_dtoa_r+0x6c6>
 8007056:	9901      	ldr	r1, [sp, #4]
 8007058:	2230      	movs	r2, #48	; 0x30
 800705a:	3701      	adds	r7, #1
 800705c:	700a      	strb	r2, [r1, #0]
 800705e:	781a      	ldrb	r2, [r3, #0]
 8007060:	3201      	adds	r2, #1
 8007062:	701a      	strb	r2, [r3, #0]
 8007064:	e790      	b.n	8006f88 <_dtoa_r+0x608>
 8007066:	4ba6      	ldr	r3, [pc, #664]	; (8007300 <_dtoa_r+0x980>)
 8007068:	2200      	movs	r2, #0
 800706a:	f7f9 fad5 	bl	8000618 <__aeabi_dmul>
 800706e:	2200      	movs	r2, #0
 8007070:	2300      	movs	r3, #0
 8007072:	4606      	mov	r6, r0
 8007074:	460f      	mov	r7, r1
 8007076:	f7f9 fd37 	bl	8000ae8 <__aeabi_dcmpeq>
 800707a:	2800      	cmp	r0, #0
 800707c:	d09d      	beq.n	8006fba <_dtoa_r+0x63a>
 800707e:	e7cf      	b.n	8007020 <_dtoa_r+0x6a0>
 8007080:	9a08      	ldr	r2, [sp, #32]
 8007082:	2a00      	cmp	r2, #0
 8007084:	f000 80d7 	beq.w	8007236 <_dtoa_r+0x8b6>
 8007088:	9a06      	ldr	r2, [sp, #24]
 800708a:	2a01      	cmp	r2, #1
 800708c:	f300 80ba 	bgt.w	8007204 <_dtoa_r+0x884>
 8007090:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007092:	2a00      	cmp	r2, #0
 8007094:	f000 80b2 	beq.w	80071fc <_dtoa_r+0x87c>
 8007098:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800709c:	9e07      	ldr	r6, [sp, #28]
 800709e:	9d04      	ldr	r5, [sp, #16]
 80070a0:	9a04      	ldr	r2, [sp, #16]
 80070a2:	441a      	add	r2, r3
 80070a4:	9204      	str	r2, [sp, #16]
 80070a6:	9a05      	ldr	r2, [sp, #20]
 80070a8:	2101      	movs	r1, #1
 80070aa:	441a      	add	r2, r3
 80070ac:	4620      	mov	r0, r4
 80070ae:	9205      	str	r2, [sp, #20]
 80070b0:	f001 f942 	bl	8008338 <__i2b>
 80070b4:	4607      	mov	r7, r0
 80070b6:	2d00      	cmp	r5, #0
 80070b8:	dd0c      	ble.n	80070d4 <_dtoa_r+0x754>
 80070ba:	9b05      	ldr	r3, [sp, #20]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	dd09      	ble.n	80070d4 <_dtoa_r+0x754>
 80070c0:	42ab      	cmp	r3, r5
 80070c2:	9a04      	ldr	r2, [sp, #16]
 80070c4:	bfa8      	it	ge
 80070c6:	462b      	movge	r3, r5
 80070c8:	1ad2      	subs	r2, r2, r3
 80070ca:	9204      	str	r2, [sp, #16]
 80070cc:	9a05      	ldr	r2, [sp, #20]
 80070ce:	1aed      	subs	r5, r5, r3
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	9305      	str	r3, [sp, #20]
 80070d4:	9b07      	ldr	r3, [sp, #28]
 80070d6:	b31b      	cbz	r3, 8007120 <_dtoa_r+0x7a0>
 80070d8:	9b08      	ldr	r3, [sp, #32]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	f000 80af 	beq.w	800723e <_dtoa_r+0x8be>
 80070e0:	2e00      	cmp	r6, #0
 80070e2:	dd13      	ble.n	800710c <_dtoa_r+0x78c>
 80070e4:	4639      	mov	r1, r7
 80070e6:	4632      	mov	r2, r6
 80070e8:	4620      	mov	r0, r4
 80070ea:	f001 f9e5 	bl	80084b8 <__pow5mult>
 80070ee:	ee18 2a10 	vmov	r2, s16
 80070f2:	4601      	mov	r1, r0
 80070f4:	4607      	mov	r7, r0
 80070f6:	4620      	mov	r0, r4
 80070f8:	f001 f934 	bl	8008364 <__multiply>
 80070fc:	ee18 1a10 	vmov	r1, s16
 8007100:	4680      	mov	r8, r0
 8007102:	4620      	mov	r0, r4
 8007104:	f001 f816 	bl	8008134 <_Bfree>
 8007108:	ee08 8a10 	vmov	s16, r8
 800710c:	9b07      	ldr	r3, [sp, #28]
 800710e:	1b9a      	subs	r2, r3, r6
 8007110:	d006      	beq.n	8007120 <_dtoa_r+0x7a0>
 8007112:	ee18 1a10 	vmov	r1, s16
 8007116:	4620      	mov	r0, r4
 8007118:	f001 f9ce 	bl	80084b8 <__pow5mult>
 800711c:	ee08 0a10 	vmov	s16, r0
 8007120:	2101      	movs	r1, #1
 8007122:	4620      	mov	r0, r4
 8007124:	f001 f908 	bl	8008338 <__i2b>
 8007128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800712a:	2b00      	cmp	r3, #0
 800712c:	4606      	mov	r6, r0
 800712e:	f340 8088 	ble.w	8007242 <_dtoa_r+0x8c2>
 8007132:	461a      	mov	r2, r3
 8007134:	4601      	mov	r1, r0
 8007136:	4620      	mov	r0, r4
 8007138:	f001 f9be 	bl	80084b8 <__pow5mult>
 800713c:	9b06      	ldr	r3, [sp, #24]
 800713e:	2b01      	cmp	r3, #1
 8007140:	4606      	mov	r6, r0
 8007142:	f340 8081 	ble.w	8007248 <_dtoa_r+0x8c8>
 8007146:	f04f 0800 	mov.w	r8, #0
 800714a:	6933      	ldr	r3, [r6, #16]
 800714c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007150:	6918      	ldr	r0, [r3, #16]
 8007152:	f001 f8a1 	bl	8008298 <__hi0bits>
 8007156:	f1c0 0020 	rsb	r0, r0, #32
 800715a:	9b05      	ldr	r3, [sp, #20]
 800715c:	4418      	add	r0, r3
 800715e:	f010 001f 	ands.w	r0, r0, #31
 8007162:	f000 8092 	beq.w	800728a <_dtoa_r+0x90a>
 8007166:	f1c0 0320 	rsb	r3, r0, #32
 800716a:	2b04      	cmp	r3, #4
 800716c:	f340 808a 	ble.w	8007284 <_dtoa_r+0x904>
 8007170:	f1c0 001c 	rsb	r0, r0, #28
 8007174:	9b04      	ldr	r3, [sp, #16]
 8007176:	4403      	add	r3, r0
 8007178:	9304      	str	r3, [sp, #16]
 800717a:	9b05      	ldr	r3, [sp, #20]
 800717c:	4403      	add	r3, r0
 800717e:	4405      	add	r5, r0
 8007180:	9305      	str	r3, [sp, #20]
 8007182:	9b04      	ldr	r3, [sp, #16]
 8007184:	2b00      	cmp	r3, #0
 8007186:	dd07      	ble.n	8007198 <_dtoa_r+0x818>
 8007188:	ee18 1a10 	vmov	r1, s16
 800718c:	461a      	mov	r2, r3
 800718e:	4620      	mov	r0, r4
 8007190:	f001 f9ec 	bl	800856c <__lshift>
 8007194:	ee08 0a10 	vmov	s16, r0
 8007198:	9b05      	ldr	r3, [sp, #20]
 800719a:	2b00      	cmp	r3, #0
 800719c:	dd05      	ble.n	80071aa <_dtoa_r+0x82a>
 800719e:	4631      	mov	r1, r6
 80071a0:	461a      	mov	r2, r3
 80071a2:	4620      	mov	r0, r4
 80071a4:	f001 f9e2 	bl	800856c <__lshift>
 80071a8:	4606      	mov	r6, r0
 80071aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d06e      	beq.n	800728e <_dtoa_r+0x90e>
 80071b0:	ee18 0a10 	vmov	r0, s16
 80071b4:	4631      	mov	r1, r6
 80071b6:	f001 fa49 	bl	800864c <__mcmp>
 80071ba:	2800      	cmp	r0, #0
 80071bc:	da67      	bge.n	800728e <_dtoa_r+0x90e>
 80071be:	9b00      	ldr	r3, [sp, #0]
 80071c0:	3b01      	subs	r3, #1
 80071c2:	ee18 1a10 	vmov	r1, s16
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	220a      	movs	r2, #10
 80071ca:	2300      	movs	r3, #0
 80071cc:	4620      	mov	r0, r4
 80071ce:	f000 ffd3 	bl	8008178 <__multadd>
 80071d2:	9b08      	ldr	r3, [sp, #32]
 80071d4:	ee08 0a10 	vmov	s16, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	f000 81b1 	beq.w	8007540 <_dtoa_r+0xbc0>
 80071de:	2300      	movs	r3, #0
 80071e0:	4639      	mov	r1, r7
 80071e2:	220a      	movs	r2, #10
 80071e4:	4620      	mov	r0, r4
 80071e6:	f000 ffc7 	bl	8008178 <__multadd>
 80071ea:	9b02      	ldr	r3, [sp, #8]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	4607      	mov	r7, r0
 80071f0:	f300 808e 	bgt.w	8007310 <_dtoa_r+0x990>
 80071f4:	9b06      	ldr	r3, [sp, #24]
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	dc51      	bgt.n	800729e <_dtoa_r+0x91e>
 80071fa:	e089      	b.n	8007310 <_dtoa_r+0x990>
 80071fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80071fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007202:	e74b      	b.n	800709c <_dtoa_r+0x71c>
 8007204:	9b03      	ldr	r3, [sp, #12]
 8007206:	1e5e      	subs	r6, r3, #1
 8007208:	9b07      	ldr	r3, [sp, #28]
 800720a:	42b3      	cmp	r3, r6
 800720c:	bfbf      	itttt	lt
 800720e:	9b07      	ldrlt	r3, [sp, #28]
 8007210:	9607      	strlt	r6, [sp, #28]
 8007212:	1af2      	sublt	r2, r6, r3
 8007214:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007216:	bfb6      	itet	lt
 8007218:	189b      	addlt	r3, r3, r2
 800721a:	1b9e      	subge	r6, r3, r6
 800721c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800721e:	9b03      	ldr	r3, [sp, #12]
 8007220:	bfb8      	it	lt
 8007222:	2600      	movlt	r6, #0
 8007224:	2b00      	cmp	r3, #0
 8007226:	bfb7      	itett	lt
 8007228:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800722c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007230:	1a9d      	sublt	r5, r3, r2
 8007232:	2300      	movlt	r3, #0
 8007234:	e734      	b.n	80070a0 <_dtoa_r+0x720>
 8007236:	9e07      	ldr	r6, [sp, #28]
 8007238:	9d04      	ldr	r5, [sp, #16]
 800723a:	9f08      	ldr	r7, [sp, #32]
 800723c:	e73b      	b.n	80070b6 <_dtoa_r+0x736>
 800723e:	9a07      	ldr	r2, [sp, #28]
 8007240:	e767      	b.n	8007112 <_dtoa_r+0x792>
 8007242:	9b06      	ldr	r3, [sp, #24]
 8007244:	2b01      	cmp	r3, #1
 8007246:	dc18      	bgt.n	800727a <_dtoa_r+0x8fa>
 8007248:	f1ba 0f00 	cmp.w	sl, #0
 800724c:	d115      	bne.n	800727a <_dtoa_r+0x8fa>
 800724e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007252:	b993      	cbnz	r3, 800727a <_dtoa_r+0x8fa>
 8007254:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007258:	0d1b      	lsrs	r3, r3, #20
 800725a:	051b      	lsls	r3, r3, #20
 800725c:	b183      	cbz	r3, 8007280 <_dtoa_r+0x900>
 800725e:	9b04      	ldr	r3, [sp, #16]
 8007260:	3301      	adds	r3, #1
 8007262:	9304      	str	r3, [sp, #16]
 8007264:	9b05      	ldr	r3, [sp, #20]
 8007266:	3301      	adds	r3, #1
 8007268:	9305      	str	r3, [sp, #20]
 800726a:	f04f 0801 	mov.w	r8, #1
 800726e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007270:	2b00      	cmp	r3, #0
 8007272:	f47f af6a 	bne.w	800714a <_dtoa_r+0x7ca>
 8007276:	2001      	movs	r0, #1
 8007278:	e76f      	b.n	800715a <_dtoa_r+0x7da>
 800727a:	f04f 0800 	mov.w	r8, #0
 800727e:	e7f6      	b.n	800726e <_dtoa_r+0x8ee>
 8007280:	4698      	mov	r8, r3
 8007282:	e7f4      	b.n	800726e <_dtoa_r+0x8ee>
 8007284:	f43f af7d 	beq.w	8007182 <_dtoa_r+0x802>
 8007288:	4618      	mov	r0, r3
 800728a:	301c      	adds	r0, #28
 800728c:	e772      	b.n	8007174 <_dtoa_r+0x7f4>
 800728e:	9b03      	ldr	r3, [sp, #12]
 8007290:	2b00      	cmp	r3, #0
 8007292:	dc37      	bgt.n	8007304 <_dtoa_r+0x984>
 8007294:	9b06      	ldr	r3, [sp, #24]
 8007296:	2b02      	cmp	r3, #2
 8007298:	dd34      	ble.n	8007304 <_dtoa_r+0x984>
 800729a:	9b03      	ldr	r3, [sp, #12]
 800729c:	9302      	str	r3, [sp, #8]
 800729e:	9b02      	ldr	r3, [sp, #8]
 80072a0:	b96b      	cbnz	r3, 80072be <_dtoa_r+0x93e>
 80072a2:	4631      	mov	r1, r6
 80072a4:	2205      	movs	r2, #5
 80072a6:	4620      	mov	r0, r4
 80072a8:	f000 ff66 	bl	8008178 <__multadd>
 80072ac:	4601      	mov	r1, r0
 80072ae:	4606      	mov	r6, r0
 80072b0:	ee18 0a10 	vmov	r0, s16
 80072b4:	f001 f9ca 	bl	800864c <__mcmp>
 80072b8:	2800      	cmp	r0, #0
 80072ba:	f73f adbb 	bgt.w	8006e34 <_dtoa_r+0x4b4>
 80072be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072c0:	9d01      	ldr	r5, [sp, #4]
 80072c2:	43db      	mvns	r3, r3
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	f04f 0800 	mov.w	r8, #0
 80072ca:	4631      	mov	r1, r6
 80072cc:	4620      	mov	r0, r4
 80072ce:	f000 ff31 	bl	8008134 <_Bfree>
 80072d2:	2f00      	cmp	r7, #0
 80072d4:	f43f aea4 	beq.w	8007020 <_dtoa_r+0x6a0>
 80072d8:	f1b8 0f00 	cmp.w	r8, #0
 80072dc:	d005      	beq.n	80072ea <_dtoa_r+0x96a>
 80072de:	45b8      	cmp	r8, r7
 80072e0:	d003      	beq.n	80072ea <_dtoa_r+0x96a>
 80072e2:	4641      	mov	r1, r8
 80072e4:	4620      	mov	r0, r4
 80072e6:	f000 ff25 	bl	8008134 <_Bfree>
 80072ea:	4639      	mov	r1, r7
 80072ec:	4620      	mov	r0, r4
 80072ee:	f000 ff21 	bl	8008134 <_Bfree>
 80072f2:	e695      	b.n	8007020 <_dtoa_r+0x6a0>
 80072f4:	2600      	movs	r6, #0
 80072f6:	4637      	mov	r7, r6
 80072f8:	e7e1      	b.n	80072be <_dtoa_r+0x93e>
 80072fa:	9700      	str	r7, [sp, #0]
 80072fc:	4637      	mov	r7, r6
 80072fe:	e599      	b.n	8006e34 <_dtoa_r+0x4b4>
 8007300:	40240000 	.word	0x40240000
 8007304:	9b08      	ldr	r3, [sp, #32]
 8007306:	2b00      	cmp	r3, #0
 8007308:	f000 80ca 	beq.w	80074a0 <_dtoa_r+0xb20>
 800730c:	9b03      	ldr	r3, [sp, #12]
 800730e:	9302      	str	r3, [sp, #8]
 8007310:	2d00      	cmp	r5, #0
 8007312:	dd05      	ble.n	8007320 <_dtoa_r+0x9a0>
 8007314:	4639      	mov	r1, r7
 8007316:	462a      	mov	r2, r5
 8007318:	4620      	mov	r0, r4
 800731a:	f001 f927 	bl	800856c <__lshift>
 800731e:	4607      	mov	r7, r0
 8007320:	f1b8 0f00 	cmp.w	r8, #0
 8007324:	d05b      	beq.n	80073de <_dtoa_r+0xa5e>
 8007326:	6879      	ldr	r1, [r7, #4]
 8007328:	4620      	mov	r0, r4
 800732a:	f000 fec3 	bl	80080b4 <_Balloc>
 800732e:	4605      	mov	r5, r0
 8007330:	b928      	cbnz	r0, 800733e <_dtoa_r+0x9be>
 8007332:	4b87      	ldr	r3, [pc, #540]	; (8007550 <_dtoa_r+0xbd0>)
 8007334:	4602      	mov	r2, r0
 8007336:	f240 21ea 	movw	r1, #746	; 0x2ea
 800733a:	f7ff bb3b 	b.w	80069b4 <_dtoa_r+0x34>
 800733e:	693a      	ldr	r2, [r7, #16]
 8007340:	3202      	adds	r2, #2
 8007342:	0092      	lsls	r2, r2, #2
 8007344:	f107 010c 	add.w	r1, r7, #12
 8007348:	300c      	adds	r0, #12
 800734a:	f7fd fbbf 	bl	8004acc <memcpy>
 800734e:	2201      	movs	r2, #1
 8007350:	4629      	mov	r1, r5
 8007352:	4620      	mov	r0, r4
 8007354:	f001 f90a 	bl	800856c <__lshift>
 8007358:	9b01      	ldr	r3, [sp, #4]
 800735a:	f103 0901 	add.w	r9, r3, #1
 800735e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007362:	4413      	add	r3, r2
 8007364:	9305      	str	r3, [sp, #20]
 8007366:	f00a 0301 	and.w	r3, sl, #1
 800736a:	46b8      	mov	r8, r7
 800736c:	9304      	str	r3, [sp, #16]
 800736e:	4607      	mov	r7, r0
 8007370:	4631      	mov	r1, r6
 8007372:	ee18 0a10 	vmov	r0, s16
 8007376:	f7ff fa77 	bl	8006868 <quorem>
 800737a:	4641      	mov	r1, r8
 800737c:	9002      	str	r0, [sp, #8]
 800737e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007382:	ee18 0a10 	vmov	r0, s16
 8007386:	f001 f961 	bl	800864c <__mcmp>
 800738a:	463a      	mov	r2, r7
 800738c:	9003      	str	r0, [sp, #12]
 800738e:	4631      	mov	r1, r6
 8007390:	4620      	mov	r0, r4
 8007392:	f001 f977 	bl	8008684 <__mdiff>
 8007396:	68c2      	ldr	r2, [r0, #12]
 8007398:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800739c:	4605      	mov	r5, r0
 800739e:	bb02      	cbnz	r2, 80073e2 <_dtoa_r+0xa62>
 80073a0:	4601      	mov	r1, r0
 80073a2:	ee18 0a10 	vmov	r0, s16
 80073a6:	f001 f951 	bl	800864c <__mcmp>
 80073aa:	4602      	mov	r2, r0
 80073ac:	4629      	mov	r1, r5
 80073ae:	4620      	mov	r0, r4
 80073b0:	9207      	str	r2, [sp, #28]
 80073b2:	f000 febf 	bl	8008134 <_Bfree>
 80073b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80073ba:	ea43 0102 	orr.w	r1, r3, r2
 80073be:	9b04      	ldr	r3, [sp, #16]
 80073c0:	430b      	orrs	r3, r1
 80073c2:	464d      	mov	r5, r9
 80073c4:	d10f      	bne.n	80073e6 <_dtoa_r+0xa66>
 80073c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80073ca:	d02a      	beq.n	8007422 <_dtoa_r+0xaa2>
 80073cc:	9b03      	ldr	r3, [sp, #12]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	dd02      	ble.n	80073d8 <_dtoa_r+0xa58>
 80073d2:	9b02      	ldr	r3, [sp, #8]
 80073d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80073d8:	f88b a000 	strb.w	sl, [fp]
 80073dc:	e775      	b.n	80072ca <_dtoa_r+0x94a>
 80073de:	4638      	mov	r0, r7
 80073e0:	e7ba      	b.n	8007358 <_dtoa_r+0x9d8>
 80073e2:	2201      	movs	r2, #1
 80073e4:	e7e2      	b.n	80073ac <_dtoa_r+0xa2c>
 80073e6:	9b03      	ldr	r3, [sp, #12]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	db04      	blt.n	80073f6 <_dtoa_r+0xa76>
 80073ec:	9906      	ldr	r1, [sp, #24]
 80073ee:	430b      	orrs	r3, r1
 80073f0:	9904      	ldr	r1, [sp, #16]
 80073f2:	430b      	orrs	r3, r1
 80073f4:	d122      	bne.n	800743c <_dtoa_r+0xabc>
 80073f6:	2a00      	cmp	r2, #0
 80073f8:	ddee      	ble.n	80073d8 <_dtoa_r+0xa58>
 80073fa:	ee18 1a10 	vmov	r1, s16
 80073fe:	2201      	movs	r2, #1
 8007400:	4620      	mov	r0, r4
 8007402:	f001 f8b3 	bl	800856c <__lshift>
 8007406:	4631      	mov	r1, r6
 8007408:	ee08 0a10 	vmov	s16, r0
 800740c:	f001 f91e 	bl	800864c <__mcmp>
 8007410:	2800      	cmp	r0, #0
 8007412:	dc03      	bgt.n	800741c <_dtoa_r+0xa9c>
 8007414:	d1e0      	bne.n	80073d8 <_dtoa_r+0xa58>
 8007416:	f01a 0f01 	tst.w	sl, #1
 800741a:	d0dd      	beq.n	80073d8 <_dtoa_r+0xa58>
 800741c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007420:	d1d7      	bne.n	80073d2 <_dtoa_r+0xa52>
 8007422:	2339      	movs	r3, #57	; 0x39
 8007424:	f88b 3000 	strb.w	r3, [fp]
 8007428:	462b      	mov	r3, r5
 800742a:	461d      	mov	r5, r3
 800742c:	3b01      	subs	r3, #1
 800742e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007432:	2a39      	cmp	r2, #57	; 0x39
 8007434:	d071      	beq.n	800751a <_dtoa_r+0xb9a>
 8007436:	3201      	adds	r2, #1
 8007438:	701a      	strb	r2, [r3, #0]
 800743a:	e746      	b.n	80072ca <_dtoa_r+0x94a>
 800743c:	2a00      	cmp	r2, #0
 800743e:	dd07      	ble.n	8007450 <_dtoa_r+0xad0>
 8007440:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007444:	d0ed      	beq.n	8007422 <_dtoa_r+0xaa2>
 8007446:	f10a 0301 	add.w	r3, sl, #1
 800744a:	f88b 3000 	strb.w	r3, [fp]
 800744e:	e73c      	b.n	80072ca <_dtoa_r+0x94a>
 8007450:	9b05      	ldr	r3, [sp, #20]
 8007452:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007456:	4599      	cmp	r9, r3
 8007458:	d047      	beq.n	80074ea <_dtoa_r+0xb6a>
 800745a:	ee18 1a10 	vmov	r1, s16
 800745e:	2300      	movs	r3, #0
 8007460:	220a      	movs	r2, #10
 8007462:	4620      	mov	r0, r4
 8007464:	f000 fe88 	bl	8008178 <__multadd>
 8007468:	45b8      	cmp	r8, r7
 800746a:	ee08 0a10 	vmov	s16, r0
 800746e:	f04f 0300 	mov.w	r3, #0
 8007472:	f04f 020a 	mov.w	r2, #10
 8007476:	4641      	mov	r1, r8
 8007478:	4620      	mov	r0, r4
 800747a:	d106      	bne.n	800748a <_dtoa_r+0xb0a>
 800747c:	f000 fe7c 	bl	8008178 <__multadd>
 8007480:	4680      	mov	r8, r0
 8007482:	4607      	mov	r7, r0
 8007484:	f109 0901 	add.w	r9, r9, #1
 8007488:	e772      	b.n	8007370 <_dtoa_r+0x9f0>
 800748a:	f000 fe75 	bl	8008178 <__multadd>
 800748e:	4639      	mov	r1, r7
 8007490:	4680      	mov	r8, r0
 8007492:	2300      	movs	r3, #0
 8007494:	220a      	movs	r2, #10
 8007496:	4620      	mov	r0, r4
 8007498:	f000 fe6e 	bl	8008178 <__multadd>
 800749c:	4607      	mov	r7, r0
 800749e:	e7f1      	b.n	8007484 <_dtoa_r+0xb04>
 80074a0:	9b03      	ldr	r3, [sp, #12]
 80074a2:	9302      	str	r3, [sp, #8]
 80074a4:	9d01      	ldr	r5, [sp, #4]
 80074a6:	ee18 0a10 	vmov	r0, s16
 80074aa:	4631      	mov	r1, r6
 80074ac:	f7ff f9dc 	bl	8006868 <quorem>
 80074b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80074b4:	9b01      	ldr	r3, [sp, #4]
 80074b6:	f805 ab01 	strb.w	sl, [r5], #1
 80074ba:	1aea      	subs	r2, r5, r3
 80074bc:	9b02      	ldr	r3, [sp, #8]
 80074be:	4293      	cmp	r3, r2
 80074c0:	dd09      	ble.n	80074d6 <_dtoa_r+0xb56>
 80074c2:	ee18 1a10 	vmov	r1, s16
 80074c6:	2300      	movs	r3, #0
 80074c8:	220a      	movs	r2, #10
 80074ca:	4620      	mov	r0, r4
 80074cc:	f000 fe54 	bl	8008178 <__multadd>
 80074d0:	ee08 0a10 	vmov	s16, r0
 80074d4:	e7e7      	b.n	80074a6 <_dtoa_r+0xb26>
 80074d6:	9b02      	ldr	r3, [sp, #8]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	bfc8      	it	gt
 80074dc:	461d      	movgt	r5, r3
 80074de:	9b01      	ldr	r3, [sp, #4]
 80074e0:	bfd8      	it	le
 80074e2:	2501      	movle	r5, #1
 80074e4:	441d      	add	r5, r3
 80074e6:	f04f 0800 	mov.w	r8, #0
 80074ea:	ee18 1a10 	vmov	r1, s16
 80074ee:	2201      	movs	r2, #1
 80074f0:	4620      	mov	r0, r4
 80074f2:	f001 f83b 	bl	800856c <__lshift>
 80074f6:	4631      	mov	r1, r6
 80074f8:	ee08 0a10 	vmov	s16, r0
 80074fc:	f001 f8a6 	bl	800864c <__mcmp>
 8007500:	2800      	cmp	r0, #0
 8007502:	dc91      	bgt.n	8007428 <_dtoa_r+0xaa8>
 8007504:	d102      	bne.n	800750c <_dtoa_r+0xb8c>
 8007506:	f01a 0f01 	tst.w	sl, #1
 800750a:	d18d      	bne.n	8007428 <_dtoa_r+0xaa8>
 800750c:	462b      	mov	r3, r5
 800750e:	461d      	mov	r5, r3
 8007510:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007514:	2a30      	cmp	r2, #48	; 0x30
 8007516:	d0fa      	beq.n	800750e <_dtoa_r+0xb8e>
 8007518:	e6d7      	b.n	80072ca <_dtoa_r+0x94a>
 800751a:	9a01      	ldr	r2, [sp, #4]
 800751c:	429a      	cmp	r2, r3
 800751e:	d184      	bne.n	800742a <_dtoa_r+0xaaa>
 8007520:	9b00      	ldr	r3, [sp, #0]
 8007522:	3301      	adds	r3, #1
 8007524:	9300      	str	r3, [sp, #0]
 8007526:	2331      	movs	r3, #49	; 0x31
 8007528:	7013      	strb	r3, [r2, #0]
 800752a:	e6ce      	b.n	80072ca <_dtoa_r+0x94a>
 800752c:	4b09      	ldr	r3, [pc, #36]	; (8007554 <_dtoa_r+0xbd4>)
 800752e:	f7ff ba95 	b.w	8006a5c <_dtoa_r+0xdc>
 8007532:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007534:	2b00      	cmp	r3, #0
 8007536:	f47f aa6e 	bne.w	8006a16 <_dtoa_r+0x96>
 800753a:	4b07      	ldr	r3, [pc, #28]	; (8007558 <_dtoa_r+0xbd8>)
 800753c:	f7ff ba8e 	b.w	8006a5c <_dtoa_r+0xdc>
 8007540:	9b02      	ldr	r3, [sp, #8]
 8007542:	2b00      	cmp	r3, #0
 8007544:	dcae      	bgt.n	80074a4 <_dtoa_r+0xb24>
 8007546:	9b06      	ldr	r3, [sp, #24]
 8007548:	2b02      	cmp	r3, #2
 800754a:	f73f aea8 	bgt.w	800729e <_dtoa_r+0x91e>
 800754e:	e7a9      	b.n	80074a4 <_dtoa_r+0xb24>
 8007550:	08009950 	.word	0x08009950
 8007554:	08009750 	.word	0x08009750
 8007558:	080098d1 	.word	0x080098d1

0800755c <__sflush_r>:
 800755c:	898a      	ldrh	r2, [r1, #12]
 800755e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007562:	4605      	mov	r5, r0
 8007564:	0710      	lsls	r0, r2, #28
 8007566:	460c      	mov	r4, r1
 8007568:	d458      	bmi.n	800761c <__sflush_r+0xc0>
 800756a:	684b      	ldr	r3, [r1, #4]
 800756c:	2b00      	cmp	r3, #0
 800756e:	dc05      	bgt.n	800757c <__sflush_r+0x20>
 8007570:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007572:	2b00      	cmp	r3, #0
 8007574:	dc02      	bgt.n	800757c <__sflush_r+0x20>
 8007576:	2000      	movs	r0, #0
 8007578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800757c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800757e:	2e00      	cmp	r6, #0
 8007580:	d0f9      	beq.n	8007576 <__sflush_r+0x1a>
 8007582:	2300      	movs	r3, #0
 8007584:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007588:	682f      	ldr	r7, [r5, #0]
 800758a:	602b      	str	r3, [r5, #0]
 800758c:	d032      	beq.n	80075f4 <__sflush_r+0x98>
 800758e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007590:	89a3      	ldrh	r3, [r4, #12]
 8007592:	075a      	lsls	r2, r3, #29
 8007594:	d505      	bpl.n	80075a2 <__sflush_r+0x46>
 8007596:	6863      	ldr	r3, [r4, #4]
 8007598:	1ac0      	subs	r0, r0, r3
 800759a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800759c:	b10b      	cbz	r3, 80075a2 <__sflush_r+0x46>
 800759e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075a0:	1ac0      	subs	r0, r0, r3
 80075a2:	2300      	movs	r3, #0
 80075a4:	4602      	mov	r2, r0
 80075a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075a8:	6a21      	ldr	r1, [r4, #32]
 80075aa:	4628      	mov	r0, r5
 80075ac:	47b0      	blx	r6
 80075ae:	1c43      	adds	r3, r0, #1
 80075b0:	89a3      	ldrh	r3, [r4, #12]
 80075b2:	d106      	bne.n	80075c2 <__sflush_r+0x66>
 80075b4:	6829      	ldr	r1, [r5, #0]
 80075b6:	291d      	cmp	r1, #29
 80075b8:	d82c      	bhi.n	8007614 <__sflush_r+0xb8>
 80075ba:	4a2a      	ldr	r2, [pc, #168]	; (8007664 <__sflush_r+0x108>)
 80075bc:	40ca      	lsrs	r2, r1
 80075be:	07d6      	lsls	r6, r2, #31
 80075c0:	d528      	bpl.n	8007614 <__sflush_r+0xb8>
 80075c2:	2200      	movs	r2, #0
 80075c4:	6062      	str	r2, [r4, #4]
 80075c6:	04d9      	lsls	r1, r3, #19
 80075c8:	6922      	ldr	r2, [r4, #16]
 80075ca:	6022      	str	r2, [r4, #0]
 80075cc:	d504      	bpl.n	80075d8 <__sflush_r+0x7c>
 80075ce:	1c42      	adds	r2, r0, #1
 80075d0:	d101      	bne.n	80075d6 <__sflush_r+0x7a>
 80075d2:	682b      	ldr	r3, [r5, #0]
 80075d4:	b903      	cbnz	r3, 80075d8 <__sflush_r+0x7c>
 80075d6:	6560      	str	r0, [r4, #84]	; 0x54
 80075d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075da:	602f      	str	r7, [r5, #0]
 80075dc:	2900      	cmp	r1, #0
 80075de:	d0ca      	beq.n	8007576 <__sflush_r+0x1a>
 80075e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075e4:	4299      	cmp	r1, r3
 80075e6:	d002      	beq.n	80075ee <__sflush_r+0x92>
 80075e8:	4628      	mov	r0, r5
 80075ea:	f001 fa3b 	bl	8008a64 <_free_r>
 80075ee:	2000      	movs	r0, #0
 80075f0:	6360      	str	r0, [r4, #52]	; 0x34
 80075f2:	e7c1      	b.n	8007578 <__sflush_r+0x1c>
 80075f4:	6a21      	ldr	r1, [r4, #32]
 80075f6:	2301      	movs	r3, #1
 80075f8:	4628      	mov	r0, r5
 80075fa:	47b0      	blx	r6
 80075fc:	1c41      	adds	r1, r0, #1
 80075fe:	d1c7      	bne.n	8007590 <__sflush_r+0x34>
 8007600:	682b      	ldr	r3, [r5, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d0c4      	beq.n	8007590 <__sflush_r+0x34>
 8007606:	2b1d      	cmp	r3, #29
 8007608:	d001      	beq.n	800760e <__sflush_r+0xb2>
 800760a:	2b16      	cmp	r3, #22
 800760c:	d101      	bne.n	8007612 <__sflush_r+0xb6>
 800760e:	602f      	str	r7, [r5, #0]
 8007610:	e7b1      	b.n	8007576 <__sflush_r+0x1a>
 8007612:	89a3      	ldrh	r3, [r4, #12]
 8007614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007618:	81a3      	strh	r3, [r4, #12]
 800761a:	e7ad      	b.n	8007578 <__sflush_r+0x1c>
 800761c:	690f      	ldr	r7, [r1, #16]
 800761e:	2f00      	cmp	r7, #0
 8007620:	d0a9      	beq.n	8007576 <__sflush_r+0x1a>
 8007622:	0793      	lsls	r3, r2, #30
 8007624:	680e      	ldr	r6, [r1, #0]
 8007626:	bf08      	it	eq
 8007628:	694b      	ldreq	r3, [r1, #20]
 800762a:	600f      	str	r7, [r1, #0]
 800762c:	bf18      	it	ne
 800762e:	2300      	movne	r3, #0
 8007630:	eba6 0807 	sub.w	r8, r6, r7
 8007634:	608b      	str	r3, [r1, #8]
 8007636:	f1b8 0f00 	cmp.w	r8, #0
 800763a:	dd9c      	ble.n	8007576 <__sflush_r+0x1a>
 800763c:	6a21      	ldr	r1, [r4, #32]
 800763e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007640:	4643      	mov	r3, r8
 8007642:	463a      	mov	r2, r7
 8007644:	4628      	mov	r0, r5
 8007646:	47b0      	blx	r6
 8007648:	2800      	cmp	r0, #0
 800764a:	dc06      	bgt.n	800765a <__sflush_r+0xfe>
 800764c:	89a3      	ldrh	r3, [r4, #12]
 800764e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007652:	81a3      	strh	r3, [r4, #12]
 8007654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007658:	e78e      	b.n	8007578 <__sflush_r+0x1c>
 800765a:	4407      	add	r7, r0
 800765c:	eba8 0800 	sub.w	r8, r8, r0
 8007660:	e7e9      	b.n	8007636 <__sflush_r+0xda>
 8007662:	bf00      	nop
 8007664:	20400001 	.word	0x20400001

08007668 <_fflush_r>:
 8007668:	b538      	push	{r3, r4, r5, lr}
 800766a:	690b      	ldr	r3, [r1, #16]
 800766c:	4605      	mov	r5, r0
 800766e:	460c      	mov	r4, r1
 8007670:	b913      	cbnz	r3, 8007678 <_fflush_r+0x10>
 8007672:	2500      	movs	r5, #0
 8007674:	4628      	mov	r0, r5
 8007676:	bd38      	pop	{r3, r4, r5, pc}
 8007678:	b118      	cbz	r0, 8007682 <_fflush_r+0x1a>
 800767a:	6983      	ldr	r3, [r0, #24]
 800767c:	b90b      	cbnz	r3, 8007682 <_fflush_r+0x1a>
 800767e:	f000 f887 	bl	8007790 <__sinit>
 8007682:	4b14      	ldr	r3, [pc, #80]	; (80076d4 <_fflush_r+0x6c>)
 8007684:	429c      	cmp	r4, r3
 8007686:	d11b      	bne.n	80076c0 <_fflush_r+0x58>
 8007688:	686c      	ldr	r4, [r5, #4]
 800768a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d0ef      	beq.n	8007672 <_fflush_r+0xa>
 8007692:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007694:	07d0      	lsls	r0, r2, #31
 8007696:	d404      	bmi.n	80076a2 <_fflush_r+0x3a>
 8007698:	0599      	lsls	r1, r3, #22
 800769a:	d402      	bmi.n	80076a2 <_fflush_r+0x3a>
 800769c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800769e:	f000 fc88 	bl	8007fb2 <__retarget_lock_acquire_recursive>
 80076a2:	4628      	mov	r0, r5
 80076a4:	4621      	mov	r1, r4
 80076a6:	f7ff ff59 	bl	800755c <__sflush_r>
 80076aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076ac:	07da      	lsls	r2, r3, #31
 80076ae:	4605      	mov	r5, r0
 80076b0:	d4e0      	bmi.n	8007674 <_fflush_r+0xc>
 80076b2:	89a3      	ldrh	r3, [r4, #12]
 80076b4:	059b      	lsls	r3, r3, #22
 80076b6:	d4dd      	bmi.n	8007674 <_fflush_r+0xc>
 80076b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076ba:	f000 fc7b 	bl	8007fb4 <__retarget_lock_release_recursive>
 80076be:	e7d9      	b.n	8007674 <_fflush_r+0xc>
 80076c0:	4b05      	ldr	r3, [pc, #20]	; (80076d8 <_fflush_r+0x70>)
 80076c2:	429c      	cmp	r4, r3
 80076c4:	d101      	bne.n	80076ca <_fflush_r+0x62>
 80076c6:	68ac      	ldr	r4, [r5, #8]
 80076c8:	e7df      	b.n	800768a <_fflush_r+0x22>
 80076ca:	4b04      	ldr	r3, [pc, #16]	; (80076dc <_fflush_r+0x74>)
 80076cc:	429c      	cmp	r4, r3
 80076ce:	bf08      	it	eq
 80076d0:	68ec      	ldreq	r4, [r5, #12]
 80076d2:	e7da      	b.n	800768a <_fflush_r+0x22>
 80076d4:	08009984 	.word	0x08009984
 80076d8:	080099a4 	.word	0x080099a4
 80076dc:	08009964 	.word	0x08009964

080076e0 <std>:
 80076e0:	2300      	movs	r3, #0
 80076e2:	b510      	push	{r4, lr}
 80076e4:	4604      	mov	r4, r0
 80076e6:	e9c0 3300 	strd	r3, r3, [r0]
 80076ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076ee:	6083      	str	r3, [r0, #8]
 80076f0:	8181      	strh	r1, [r0, #12]
 80076f2:	6643      	str	r3, [r0, #100]	; 0x64
 80076f4:	81c2      	strh	r2, [r0, #14]
 80076f6:	6183      	str	r3, [r0, #24]
 80076f8:	4619      	mov	r1, r3
 80076fa:	2208      	movs	r2, #8
 80076fc:	305c      	adds	r0, #92	; 0x5c
 80076fe:	f7fd f9f3 	bl	8004ae8 <memset>
 8007702:	4b05      	ldr	r3, [pc, #20]	; (8007718 <std+0x38>)
 8007704:	6263      	str	r3, [r4, #36]	; 0x24
 8007706:	4b05      	ldr	r3, [pc, #20]	; (800771c <std+0x3c>)
 8007708:	62a3      	str	r3, [r4, #40]	; 0x28
 800770a:	4b05      	ldr	r3, [pc, #20]	; (8007720 <std+0x40>)
 800770c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800770e:	4b05      	ldr	r3, [pc, #20]	; (8007724 <std+0x44>)
 8007710:	6224      	str	r4, [r4, #32]
 8007712:	6323      	str	r3, [r4, #48]	; 0x30
 8007714:	bd10      	pop	{r4, pc}
 8007716:	bf00      	nop
 8007718:	08008f11 	.word	0x08008f11
 800771c:	08008f33 	.word	0x08008f33
 8007720:	08008f6b 	.word	0x08008f6b
 8007724:	08008f8f 	.word	0x08008f8f

08007728 <_cleanup_r>:
 8007728:	4901      	ldr	r1, [pc, #4]	; (8007730 <_cleanup_r+0x8>)
 800772a:	f000 b8af 	b.w	800788c <_fwalk_reent>
 800772e:	bf00      	nop
 8007730:	08007669 	.word	0x08007669

08007734 <__sfmoreglue>:
 8007734:	b570      	push	{r4, r5, r6, lr}
 8007736:	2268      	movs	r2, #104	; 0x68
 8007738:	1e4d      	subs	r5, r1, #1
 800773a:	4355      	muls	r5, r2
 800773c:	460e      	mov	r6, r1
 800773e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007742:	f001 f9fb 	bl	8008b3c <_malloc_r>
 8007746:	4604      	mov	r4, r0
 8007748:	b140      	cbz	r0, 800775c <__sfmoreglue+0x28>
 800774a:	2100      	movs	r1, #0
 800774c:	e9c0 1600 	strd	r1, r6, [r0]
 8007750:	300c      	adds	r0, #12
 8007752:	60a0      	str	r0, [r4, #8]
 8007754:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007758:	f7fd f9c6 	bl	8004ae8 <memset>
 800775c:	4620      	mov	r0, r4
 800775e:	bd70      	pop	{r4, r5, r6, pc}

08007760 <__sfp_lock_acquire>:
 8007760:	4801      	ldr	r0, [pc, #4]	; (8007768 <__sfp_lock_acquire+0x8>)
 8007762:	f000 bc26 	b.w	8007fb2 <__retarget_lock_acquire_recursive>
 8007766:	bf00      	nop
 8007768:	200002e9 	.word	0x200002e9

0800776c <__sfp_lock_release>:
 800776c:	4801      	ldr	r0, [pc, #4]	; (8007774 <__sfp_lock_release+0x8>)
 800776e:	f000 bc21 	b.w	8007fb4 <__retarget_lock_release_recursive>
 8007772:	bf00      	nop
 8007774:	200002e9 	.word	0x200002e9

08007778 <__sinit_lock_acquire>:
 8007778:	4801      	ldr	r0, [pc, #4]	; (8007780 <__sinit_lock_acquire+0x8>)
 800777a:	f000 bc1a 	b.w	8007fb2 <__retarget_lock_acquire_recursive>
 800777e:	bf00      	nop
 8007780:	200002ea 	.word	0x200002ea

08007784 <__sinit_lock_release>:
 8007784:	4801      	ldr	r0, [pc, #4]	; (800778c <__sinit_lock_release+0x8>)
 8007786:	f000 bc15 	b.w	8007fb4 <__retarget_lock_release_recursive>
 800778a:	bf00      	nop
 800778c:	200002ea 	.word	0x200002ea

08007790 <__sinit>:
 8007790:	b510      	push	{r4, lr}
 8007792:	4604      	mov	r4, r0
 8007794:	f7ff fff0 	bl	8007778 <__sinit_lock_acquire>
 8007798:	69a3      	ldr	r3, [r4, #24]
 800779a:	b11b      	cbz	r3, 80077a4 <__sinit+0x14>
 800779c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077a0:	f7ff bff0 	b.w	8007784 <__sinit_lock_release>
 80077a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80077a8:	6523      	str	r3, [r4, #80]	; 0x50
 80077aa:	4b13      	ldr	r3, [pc, #76]	; (80077f8 <__sinit+0x68>)
 80077ac:	4a13      	ldr	r2, [pc, #76]	; (80077fc <__sinit+0x6c>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80077b2:	42a3      	cmp	r3, r4
 80077b4:	bf04      	itt	eq
 80077b6:	2301      	moveq	r3, #1
 80077b8:	61a3      	streq	r3, [r4, #24]
 80077ba:	4620      	mov	r0, r4
 80077bc:	f000 f820 	bl	8007800 <__sfp>
 80077c0:	6060      	str	r0, [r4, #4]
 80077c2:	4620      	mov	r0, r4
 80077c4:	f000 f81c 	bl	8007800 <__sfp>
 80077c8:	60a0      	str	r0, [r4, #8]
 80077ca:	4620      	mov	r0, r4
 80077cc:	f000 f818 	bl	8007800 <__sfp>
 80077d0:	2200      	movs	r2, #0
 80077d2:	60e0      	str	r0, [r4, #12]
 80077d4:	2104      	movs	r1, #4
 80077d6:	6860      	ldr	r0, [r4, #4]
 80077d8:	f7ff ff82 	bl	80076e0 <std>
 80077dc:	68a0      	ldr	r0, [r4, #8]
 80077de:	2201      	movs	r2, #1
 80077e0:	2109      	movs	r1, #9
 80077e2:	f7ff ff7d 	bl	80076e0 <std>
 80077e6:	68e0      	ldr	r0, [r4, #12]
 80077e8:	2202      	movs	r2, #2
 80077ea:	2112      	movs	r1, #18
 80077ec:	f7ff ff78 	bl	80076e0 <std>
 80077f0:	2301      	movs	r3, #1
 80077f2:	61a3      	str	r3, [r4, #24]
 80077f4:	e7d2      	b.n	800779c <__sinit+0xc>
 80077f6:	bf00      	nop
 80077f8:	0800973c 	.word	0x0800973c
 80077fc:	08007729 	.word	0x08007729

08007800 <__sfp>:
 8007800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007802:	4607      	mov	r7, r0
 8007804:	f7ff ffac 	bl	8007760 <__sfp_lock_acquire>
 8007808:	4b1e      	ldr	r3, [pc, #120]	; (8007884 <__sfp+0x84>)
 800780a:	681e      	ldr	r6, [r3, #0]
 800780c:	69b3      	ldr	r3, [r6, #24]
 800780e:	b913      	cbnz	r3, 8007816 <__sfp+0x16>
 8007810:	4630      	mov	r0, r6
 8007812:	f7ff ffbd 	bl	8007790 <__sinit>
 8007816:	3648      	adds	r6, #72	; 0x48
 8007818:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800781c:	3b01      	subs	r3, #1
 800781e:	d503      	bpl.n	8007828 <__sfp+0x28>
 8007820:	6833      	ldr	r3, [r6, #0]
 8007822:	b30b      	cbz	r3, 8007868 <__sfp+0x68>
 8007824:	6836      	ldr	r6, [r6, #0]
 8007826:	e7f7      	b.n	8007818 <__sfp+0x18>
 8007828:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800782c:	b9d5      	cbnz	r5, 8007864 <__sfp+0x64>
 800782e:	4b16      	ldr	r3, [pc, #88]	; (8007888 <__sfp+0x88>)
 8007830:	60e3      	str	r3, [r4, #12]
 8007832:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007836:	6665      	str	r5, [r4, #100]	; 0x64
 8007838:	f000 fbba 	bl	8007fb0 <__retarget_lock_init_recursive>
 800783c:	f7ff ff96 	bl	800776c <__sfp_lock_release>
 8007840:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007844:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007848:	6025      	str	r5, [r4, #0]
 800784a:	61a5      	str	r5, [r4, #24]
 800784c:	2208      	movs	r2, #8
 800784e:	4629      	mov	r1, r5
 8007850:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007854:	f7fd f948 	bl	8004ae8 <memset>
 8007858:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800785c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007860:	4620      	mov	r0, r4
 8007862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007864:	3468      	adds	r4, #104	; 0x68
 8007866:	e7d9      	b.n	800781c <__sfp+0x1c>
 8007868:	2104      	movs	r1, #4
 800786a:	4638      	mov	r0, r7
 800786c:	f7ff ff62 	bl	8007734 <__sfmoreglue>
 8007870:	4604      	mov	r4, r0
 8007872:	6030      	str	r0, [r6, #0]
 8007874:	2800      	cmp	r0, #0
 8007876:	d1d5      	bne.n	8007824 <__sfp+0x24>
 8007878:	f7ff ff78 	bl	800776c <__sfp_lock_release>
 800787c:	230c      	movs	r3, #12
 800787e:	603b      	str	r3, [r7, #0]
 8007880:	e7ee      	b.n	8007860 <__sfp+0x60>
 8007882:	bf00      	nop
 8007884:	0800973c 	.word	0x0800973c
 8007888:	ffff0001 	.word	0xffff0001

0800788c <_fwalk_reent>:
 800788c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007890:	4606      	mov	r6, r0
 8007892:	4688      	mov	r8, r1
 8007894:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007898:	2700      	movs	r7, #0
 800789a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800789e:	f1b9 0901 	subs.w	r9, r9, #1
 80078a2:	d505      	bpl.n	80078b0 <_fwalk_reent+0x24>
 80078a4:	6824      	ldr	r4, [r4, #0]
 80078a6:	2c00      	cmp	r4, #0
 80078a8:	d1f7      	bne.n	800789a <_fwalk_reent+0xe>
 80078aa:	4638      	mov	r0, r7
 80078ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078b0:	89ab      	ldrh	r3, [r5, #12]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d907      	bls.n	80078c6 <_fwalk_reent+0x3a>
 80078b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078ba:	3301      	adds	r3, #1
 80078bc:	d003      	beq.n	80078c6 <_fwalk_reent+0x3a>
 80078be:	4629      	mov	r1, r5
 80078c0:	4630      	mov	r0, r6
 80078c2:	47c0      	blx	r8
 80078c4:	4307      	orrs	r7, r0
 80078c6:	3568      	adds	r5, #104	; 0x68
 80078c8:	e7e9      	b.n	800789e <_fwalk_reent+0x12>

080078ca <rshift>:
 80078ca:	6903      	ldr	r3, [r0, #16]
 80078cc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80078d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80078d4:	ea4f 1261 	mov.w	r2, r1, asr #5
 80078d8:	f100 0414 	add.w	r4, r0, #20
 80078dc:	dd45      	ble.n	800796a <rshift+0xa0>
 80078de:	f011 011f 	ands.w	r1, r1, #31
 80078e2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80078e6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80078ea:	d10c      	bne.n	8007906 <rshift+0x3c>
 80078ec:	f100 0710 	add.w	r7, r0, #16
 80078f0:	4629      	mov	r1, r5
 80078f2:	42b1      	cmp	r1, r6
 80078f4:	d334      	bcc.n	8007960 <rshift+0x96>
 80078f6:	1a9b      	subs	r3, r3, r2
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	1eea      	subs	r2, r5, #3
 80078fc:	4296      	cmp	r6, r2
 80078fe:	bf38      	it	cc
 8007900:	2300      	movcc	r3, #0
 8007902:	4423      	add	r3, r4
 8007904:	e015      	b.n	8007932 <rshift+0x68>
 8007906:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800790a:	f1c1 0820 	rsb	r8, r1, #32
 800790e:	40cf      	lsrs	r7, r1
 8007910:	f105 0e04 	add.w	lr, r5, #4
 8007914:	46a1      	mov	r9, r4
 8007916:	4576      	cmp	r6, lr
 8007918:	46f4      	mov	ip, lr
 800791a:	d815      	bhi.n	8007948 <rshift+0x7e>
 800791c:	1a9a      	subs	r2, r3, r2
 800791e:	0092      	lsls	r2, r2, #2
 8007920:	3a04      	subs	r2, #4
 8007922:	3501      	adds	r5, #1
 8007924:	42ae      	cmp	r6, r5
 8007926:	bf38      	it	cc
 8007928:	2200      	movcc	r2, #0
 800792a:	18a3      	adds	r3, r4, r2
 800792c:	50a7      	str	r7, [r4, r2]
 800792e:	b107      	cbz	r7, 8007932 <rshift+0x68>
 8007930:	3304      	adds	r3, #4
 8007932:	1b1a      	subs	r2, r3, r4
 8007934:	42a3      	cmp	r3, r4
 8007936:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800793a:	bf08      	it	eq
 800793c:	2300      	moveq	r3, #0
 800793e:	6102      	str	r2, [r0, #16]
 8007940:	bf08      	it	eq
 8007942:	6143      	streq	r3, [r0, #20]
 8007944:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007948:	f8dc c000 	ldr.w	ip, [ip]
 800794c:	fa0c fc08 	lsl.w	ip, ip, r8
 8007950:	ea4c 0707 	orr.w	r7, ip, r7
 8007954:	f849 7b04 	str.w	r7, [r9], #4
 8007958:	f85e 7b04 	ldr.w	r7, [lr], #4
 800795c:	40cf      	lsrs	r7, r1
 800795e:	e7da      	b.n	8007916 <rshift+0x4c>
 8007960:	f851 cb04 	ldr.w	ip, [r1], #4
 8007964:	f847 cf04 	str.w	ip, [r7, #4]!
 8007968:	e7c3      	b.n	80078f2 <rshift+0x28>
 800796a:	4623      	mov	r3, r4
 800796c:	e7e1      	b.n	8007932 <rshift+0x68>

0800796e <__hexdig_fun>:
 800796e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007972:	2b09      	cmp	r3, #9
 8007974:	d802      	bhi.n	800797c <__hexdig_fun+0xe>
 8007976:	3820      	subs	r0, #32
 8007978:	b2c0      	uxtb	r0, r0
 800797a:	4770      	bx	lr
 800797c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007980:	2b05      	cmp	r3, #5
 8007982:	d801      	bhi.n	8007988 <__hexdig_fun+0x1a>
 8007984:	3847      	subs	r0, #71	; 0x47
 8007986:	e7f7      	b.n	8007978 <__hexdig_fun+0xa>
 8007988:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800798c:	2b05      	cmp	r3, #5
 800798e:	d801      	bhi.n	8007994 <__hexdig_fun+0x26>
 8007990:	3827      	subs	r0, #39	; 0x27
 8007992:	e7f1      	b.n	8007978 <__hexdig_fun+0xa>
 8007994:	2000      	movs	r0, #0
 8007996:	4770      	bx	lr

08007998 <__gethex>:
 8007998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800799c:	ed2d 8b02 	vpush	{d8}
 80079a0:	b089      	sub	sp, #36	; 0x24
 80079a2:	ee08 0a10 	vmov	s16, r0
 80079a6:	9304      	str	r3, [sp, #16]
 80079a8:	4bb4      	ldr	r3, [pc, #720]	; (8007c7c <__gethex+0x2e4>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	9301      	str	r3, [sp, #4]
 80079ae:	4618      	mov	r0, r3
 80079b0:	468b      	mov	fp, r1
 80079b2:	4690      	mov	r8, r2
 80079b4:	f7f8 fc1c 	bl	80001f0 <strlen>
 80079b8:	9b01      	ldr	r3, [sp, #4]
 80079ba:	f8db 2000 	ldr.w	r2, [fp]
 80079be:	4403      	add	r3, r0
 80079c0:	4682      	mov	sl, r0
 80079c2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80079c6:	9305      	str	r3, [sp, #20]
 80079c8:	1c93      	adds	r3, r2, #2
 80079ca:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80079ce:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80079d2:	32fe      	adds	r2, #254	; 0xfe
 80079d4:	18d1      	adds	r1, r2, r3
 80079d6:	461f      	mov	r7, r3
 80079d8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80079dc:	9100      	str	r1, [sp, #0]
 80079de:	2830      	cmp	r0, #48	; 0x30
 80079e0:	d0f8      	beq.n	80079d4 <__gethex+0x3c>
 80079e2:	f7ff ffc4 	bl	800796e <__hexdig_fun>
 80079e6:	4604      	mov	r4, r0
 80079e8:	2800      	cmp	r0, #0
 80079ea:	d13a      	bne.n	8007a62 <__gethex+0xca>
 80079ec:	9901      	ldr	r1, [sp, #4]
 80079ee:	4652      	mov	r2, sl
 80079f0:	4638      	mov	r0, r7
 80079f2:	f001 fad0 	bl	8008f96 <strncmp>
 80079f6:	4605      	mov	r5, r0
 80079f8:	2800      	cmp	r0, #0
 80079fa:	d168      	bne.n	8007ace <__gethex+0x136>
 80079fc:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007a00:	eb07 060a 	add.w	r6, r7, sl
 8007a04:	f7ff ffb3 	bl	800796e <__hexdig_fun>
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	d062      	beq.n	8007ad2 <__gethex+0x13a>
 8007a0c:	4633      	mov	r3, r6
 8007a0e:	7818      	ldrb	r0, [r3, #0]
 8007a10:	2830      	cmp	r0, #48	; 0x30
 8007a12:	461f      	mov	r7, r3
 8007a14:	f103 0301 	add.w	r3, r3, #1
 8007a18:	d0f9      	beq.n	8007a0e <__gethex+0x76>
 8007a1a:	f7ff ffa8 	bl	800796e <__hexdig_fun>
 8007a1e:	2301      	movs	r3, #1
 8007a20:	fab0 f480 	clz	r4, r0
 8007a24:	0964      	lsrs	r4, r4, #5
 8007a26:	4635      	mov	r5, r6
 8007a28:	9300      	str	r3, [sp, #0]
 8007a2a:	463a      	mov	r2, r7
 8007a2c:	4616      	mov	r6, r2
 8007a2e:	3201      	adds	r2, #1
 8007a30:	7830      	ldrb	r0, [r6, #0]
 8007a32:	f7ff ff9c 	bl	800796e <__hexdig_fun>
 8007a36:	2800      	cmp	r0, #0
 8007a38:	d1f8      	bne.n	8007a2c <__gethex+0x94>
 8007a3a:	9901      	ldr	r1, [sp, #4]
 8007a3c:	4652      	mov	r2, sl
 8007a3e:	4630      	mov	r0, r6
 8007a40:	f001 faa9 	bl	8008f96 <strncmp>
 8007a44:	b980      	cbnz	r0, 8007a68 <__gethex+0xd0>
 8007a46:	b94d      	cbnz	r5, 8007a5c <__gethex+0xc4>
 8007a48:	eb06 050a 	add.w	r5, r6, sl
 8007a4c:	462a      	mov	r2, r5
 8007a4e:	4616      	mov	r6, r2
 8007a50:	3201      	adds	r2, #1
 8007a52:	7830      	ldrb	r0, [r6, #0]
 8007a54:	f7ff ff8b 	bl	800796e <__hexdig_fun>
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	d1f8      	bne.n	8007a4e <__gethex+0xb6>
 8007a5c:	1bad      	subs	r5, r5, r6
 8007a5e:	00ad      	lsls	r5, r5, #2
 8007a60:	e004      	b.n	8007a6c <__gethex+0xd4>
 8007a62:	2400      	movs	r4, #0
 8007a64:	4625      	mov	r5, r4
 8007a66:	e7e0      	b.n	8007a2a <__gethex+0x92>
 8007a68:	2d00      	cmp	r5, #0
 8007a6a:	d1f7      	bne.n	8007a5c <__gethex+0xc4>
 8007a6c:	7833      	ldrb	r3, [r6, #0]
 8007a6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007a72:	2b50      	cmp	r3, #80	; 0x50
 8007a74:	d13b      	bne.n	8007aee <__gethex+0x156>
 8007a76:	7873      	ldrb	r3, [r6, #1]
 8007a78:	2b2b      	cmp	r3, #43	; 0x2b
 8007a7a:	d02c      	beq.n	8007ad6 <__gethex+0x13e>
 8007a7c:	2b2d      	cmp	r3, #45	; 0x2d
 8007a7e:	d02e      	beq.n	8007ade <__gethex+0x146>
 8007a80:	1c71      	adds	r1, r6, #1
 8007a82:	f04f 0900 	mov.w	r9, #0
 8007a86:	7808      	ldrb	r0, [r1, #0]
 8007a88:	f7ff ff71 	bl	800796e <__hexdig_fun>
 8007a8c:	1e43      	subs	r3, r0, #1
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	2b18      	cmp	r3, #24
 8007a92:	d82c      	bhi.n	8007aee <__gethex+0x156>
 8007a94:	f1a0 0210 	sub.w	r2, r0, #16
 8007a98:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007a9c:	f7ff ff67 	bl	800796e <__hexdig_fun>
 8007aa0:	1e43      	subs	r3, r0, #1
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	2b18      	cmp	r3, #24
 8007aa6:	d91d      	bls.n	8007ae4 <__gethex+0x14c>
 8007aa8:	f1b9 0f00 	cmp.w	r9, #0
 8007aac:	d000      	beq.n	8007ab0 <__gethex+0x118>
 8007aae:	4252      	negs	r2, r2
 8007ab0:	4415      	add	r5, r2
 8007ab2:	f8cb 1000 	str.w	r1, [fp]
 8007ab6:	b1e4      	cbz	r4, 8007af2 <__gethex+0x15a>
 8007ab8:	9b00      	ldr	r3, [sp, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	bf14      	ite	ne
 8007abe:	2700      	movne	r7, #0
 8007ac0:	2706      	moveq	r7, #6
 8007ac2:	4638      	mov	r0, r7
 8007ac4:	b009      	add	sp, #36	; 0x24
 8007ac6:	ecbd 8b02 	vpop	{d8}
 8007aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ace:	463e      	mov	r6, r7
 8007ad0:	4625      	mov	r5, r4
 8007ad2:	2401      	movs	r4, #1
 8007ad4:	e7ca      	b.n	8007a6c <__gethex+0xd4>
 8007ad6:	f04f 0900 	mov.w	r9, #0
 8007ada:	1cb1      	adds	r1, r6, #2
 8007adc:	e7d3      	b.n	8007a86 <__gethex+0xee>
 8007ade:	f04f 0901 	mov.w	r9, #1
 8007ae2:	e7fa      	b.n	8007ada <__gethex+0x142>
 8007ae4:	230a      	movs	r3, #10
 8007ae6:	fb03 0202 	mla	r2, r3, r2, r0
 8007aea:	3a10      	subs	r2, #16
 8007aec:	e7d4      	b.n	8007a98 <__gethex+0x100>
 8007aee:	4631      	mov	r1, r6
 8007af0:	e7df      	b.n	8007ab2 <__gethex+0x11a>
 8007af2:	1bf3      	subs	r3, r6, r7
 8007af4:	3b01      	subs	r3, #1
 8007af6:	4621      	mov	r1, r4
 8007af8:	2b07      	cmp	r3, #7
 8007afa:	dc0b      	bgt.n	8007b14 <__gethex+0x17c>
 8007afc:	ee18 0a10 	vmov	r0, s16
 8007b00:	f000 fad8 	bl	80080b4 <_Balloc>
 8007b04:	4604      	mov	r4, r0
 8007b06:	b940      	cbnz	r0, 8007b1a <__gethex+0x182>
 8007b08:	4b5d      	ldr	r3, [pc, #372]	; (8007c80 <__gethex+0x2e8>)
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	21de      	movs	r1, #222	; 0xde
 8007b0e:	485d      	ldr	r0, [pc, #372]	; (8007c84 <__gethex+0x2ec>)
 8007b10:	f001 fa74 	bl	8008ffc <__assert_func>
 8007b14:	3101      	adds	r1, #1
 8007b16:	105b      	asrs	r3, r3, #1
 8007b18:	e7ee      	b.n	8007af8 <__gethex+0x160>
 8007b1a:	f100 0914 	add.w	r9, r0, #20
 8007b1e:	f04f 0b00 	mov.w	fp, #0
 8007b22:	f1ca 0301 	rsb	r3, sl, #1
 8007b26:	f8cd 9008 	str.w	r9, [sp, #8]
 8007b2a:	f8cd b000 	str.w	fp, [sp]
 8007b2e:	9306      	str	r3, [sp, #24]
 8007b30:	42b7      	cmp	r7, r6
 8007b32:	d340      	bcc.n	8007bb6 <__gethex+0x21e>
 8007b34:	9802      	ldr	r0, [sp, #8]
 8007b36:	9b00      	ldr	r3, [sp, #0]
 8007b38:	f840 3b04 	str.w	r3, [r0], #4
 8007b3c:	eba0 0009 	sub.w	r0, r0, r9
 8007b40:	1080      	asrs	r0, r0, #2
 8007b42:	0146      	lsls	r6, r0, #5
 8007b44:	6120      	str	r0, [r4, #16]
 8007b46:	4618      	mov	r0, r3
 8007b48:	f000 fba6 	bl	8008298 <__hi0bits>
 8007b4c:	1a30      	subs	r0, r6, r0
 8007b4e:	f8d8 6000 	ldr.w	r6, [r8]
 8007b52:	42b0      	cmp	r0, r6
 8007b54:	dd63      	ble.n	8007c1e <__gethex+0x286>
 8007b56:	1b87      	subs	r7, r0, r6
 8007b58:	4639      	mov	r1, r7
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	f000 ff4a 	bl	80089f4 <__any_on>
 8007b60:	4682      	mov	sl, r0
 8007b62:	b1a8      	cbz	r0, 8007b90 <__gethex+0x1f8>
 8007b64:	1e7b      	subs	r3, r7, #1
 8007b66:	1159      	asrs	r1, r3, #5
 8007b68:	f003 021f 	and.w	r2, r3, #31
 8007b6c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007b70:	f04f 0a01 	mov.w	sl, #1
 8007b74:	fa0a f202 	lsl.w	r2, sl, r2
 8007b78:	420a      	tst	r2, r1
 8007b7a:	d009      	beq.n	8007b90 <__gethex+0x1f8>
 8007b7c:	4553      	cmp	r3, sl
 8007b7e:	dd05      	ble.n	8007b8c <__gethex+0x1f4>
 8007b80:	1eb9      	subs	r1, r7, #2
 8007b82:	4620      	mov	r0, r4
 8007b84:	f000 ff36 	bl	80089f4 <__any_on>
 8007b88:	2800      	cmp	r0, #0
 8007b8a:	d145      	bne.n	8007c18 <__gethex+0x280>
 8007b8c:	f04f 0a02 	mov.w	sl, #2
 8007b90:	4639      	mov	r1, r7
 8007b92:	4620      	mov	r0, r4
 8007b94:	f7ff fe99 	bl	80078ca <rshift>
 8007b98:	443d      	add	r5, r7
 8007b9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007b9e:	42ab      	cmp	r3, r5
 8007ba0:	da4c      	bge.n	8007c3c <__gethex+0x2a4>
 8007ba2:	ee18 0a10 	vmov	r0, s16
 8007ba6:	4621      	mov	r1, r4
 8007ba8:	f000 fac4 	bl	8008134 <_Bfree>
 8007bac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007bae:	2300      	movs	r3, #0
 8007bb0:	6013      	str	r3, [r2, #0]
 8007bb2:	27a3      	movs	r7, #163	; 0xa3
 8007bb4:	e785      	b.n	8007ac2 <__gethex+0x12a>
 8007bb6:	1e73      	subs	r3, r6, #1
 8007bb8:	9a05      	ldr	r2, [sp, #20]
 8007bba:	9303      	str	r3, [sp, #12]
 8007bbc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d019      	beq.n	8007bf8 <__gethex+0x260>
 8007bc4:	f1bb 0f20 	cmp.w	fp, #32
 8007bc8:	d107      	bne.n	8007bda <__gethex+0x242>
 8007bca:	9b02      	ldr	r3, [sp, #8]
 8007bcc:	9a00      	ldr	r2, [sp, #0]
 8007bce:	f843 2b04 	str.w	r2, [r3], #4
 8007bd2:	9302      	str	r3, [sp, #8]
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	9300      	str	r3, [sp, #0]
 8007bd8:	469b      	mov	fp, r3
 8007bda:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007bde:	f7ff fec6 	bl	800796e <__hexdig_fun>
 8007be2:	9b00      	ldr	r3, [sp, #0]
 8007be4:	f000 000f 	and.w	r0, r0, #15
 8007be8:	fa00 f00b 	lsl.w	r0, r0, fp
 8007bec:	4303      	orrs	r3, r0
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	f10b 0b04 	add.w	fp, fp, #4
 8007bf4:	9b03      	ldr	r3, [sp, #12]
 8007bf6:	e00d      	b.n	8007c14 <__gethex+0x27c>
 8007bf8:	9b03      	ldr	r3, [sp, #12]
 8007bfa:	9a06      	ldr	r2, [sp, #24]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	42bb      	cmp	r3, r7
 8007c00:	d3e0      	bcc.n	8007bc4 <__gethex+0x22c>
 8007c02:	4618      	mov	r0, r3
 8007c04:	9901      	ldr	r1, [sp, #4]
 8007c06:	9307      	str	r3, [sp, #28]
 8007c08:	4652      	mov	r2, sl
 8007c0a:	f001 f9c4 	bl	8008f96 <strncmp>
 8007c0e:	9b07      	ldr	r3, [sp, #28]
 8007c10:	2800      	cmp	r0, #0
 8007c12:	d1d7      	bne.n	8007bc4 <__gethex+0x22c>
 8007c14:	461e      	mov	r6, r3
 8007c16:	e78b      	b.n	8007b30 <__gethex+0x198>
 8007c18:	f04f 0a03 	mov.w	sl, #3
 8007c1c:	e7b8      	b.n	8007b90 <__gethex+0x1f8>
 8007c1e:	da0a      	bge.n	8007c36 <__gethex+0x29e>
 8007c20:	1a37      	subs	r7, r6, r0
 8007c22:	4621      	mov	r1, r4
 8007c24:	ee18 0a10 	vmov	r0, s16
 8007c28:	463a      	mov	r2, r7
 8007c2a:	f000 fc9f 	bl	800856c <__lshift>
 8007c2e:	1bed      	subs	r5, r5, r7
 8007c30:	4604      	mov	r4, r0
 8007c32:	f100 0914 	add.w	r9, r0, #20
 8007c36:	f04f 0a00 	mov.w	sl, #0
 8007c3a:	e7ae      	b.n	8007b9a <__gethex+0x202>
 8007c3c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007c40:	42a8      	cmp	r0, r5
 8007c42:	dd72      	ble.n	8007d2a <__gethex+0x392>
 8007c44:	1b45      	subs	r5, r0, r5
 8007c46:	42ae      	cmp	r6, r5
 8007c48:	dc36      	bgt.n	8007cb8 <__gethex+0x320>
 8007c4a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007c4e:	2b02      	cmp	r3, #2
 8007c50:	d02a      	beq.n	8007ca8 <__gethex+0x310>
 8007c52:	2b03      	cmp	r3, #3
 8007c54:	d02c      	beq.n	8007cb0 <__gethex+0x318>
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d11c      	bne.n	8007c94 <__gethex+0x2fc>
 8007c5a:	42ae      	cmp	r6, r5
 8007c5c:	d11a      	bne.n	8007c94 <__gethex+0x2fc>
 8007c5e:	2e01      	cmp	r6, #1
 8007c60:	d112      	bne.n	8007c88 <__gethex+0x2f0>
 8007c62:	9a04      	ldr	r2, [sp, #16]
 8007c64:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007c68:	6013      	str	r3, [r2, #0]
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	6123      	str	r3, [r4, #16]
 8007c6e:	f8c9 3000 	str.w	r3, [r9]
 8007c72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007c74:	2762      	movs	r7, #98	; 0x62
 8007c76:	601c      	str	r4, [r3, #0]
 8007c78:	e723      	b.n	8007ac2 <__gethex+0x12a>
 8007c7a:	bf00      	nop
 8007c7c:	08009a2c 	.word	0x08009a2c
 8007c80:	08009950 	.word	0x08009950
 8007c84:	080099c4 	.word	0x080099c4
 8007c88:	1e71      	subs	r1, r6, #1
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	f000 feb2 	bl	80089f4 <__any_on>
 8007c90:	2800      	cmp	r0, #0
 8007c92:	d1e6      	bne.n	8007c62 <__gethex+0x2ca>
 8007c94:	ee18 0a10 	vmov	r0, s16
 8007c98:	4621      	mov	r1, r4
 8007c9a:	f000 fa4b 	bl	8008134 <_Bfree>
 8007c9e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	6013      	str	r3, [r2, #0]
 8007ca4:	2750      	movs	r7, #80	; 0x50
 8007ca6:	e70c      	b.n	8007ac2 <__gethex+0x12a>
 8007ca8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d1f2      	bne.n	8007c94 <__gethex+0x2fc>
 8007cae:	e7d8      	b.n	8007c62 <__gethex+0x2ca>
 8007cb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1d5      	bne.n	8007c62 <__gethex+0x2ca>
 8007cb6:	e7ed      	b.n	8007c94 <__gethex+0x2fc>
 8007cb8:	1e6f      	subs	r7, r5, #1
 8007cba:	f1ba 0f00 	cmp.w	sl, #0
 8007cbe:	d131      	bne.n	8007d24 <__gethex+0x38c>
 8007cc0:	b127      	cbz	r7, 8007ccc <__gethex+0x334>
 8007cc2:	4639      	mov	r1, r7
 8007cc4:	4620      	mov	r0, r4
 8007cc6:	f000 fe95 	bl	80089f4 <__any_on>
 8007cca:	4682      	mov	sl, r0
 8007ccc:	117b      	asrs	r3, r7, #5
 8007cce:	2101      	movs	r1, #1
 8007cd0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007cd4:	f007 071f 	and.w	r7, r7, #31
 8007cd8:	fa01 f707 	lsl.w	r7, r1, r7
 8007cdc:	421f      	tst	r7, r3
 8007cde:	4629      	mov	r1, r5
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	bf18      	it	ne
 8007ce4:	f04a 0a02 	orrne.w	sl, sl, #2
 8007ce8:	1b76      	subs	r6, r6, r5
 8007cea:	f7ff fdee 	bl	80078ca <rshift>
 8007cee:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007cf2:	2702      	movs	r7, #2
 8007cf4:	f1ba 0f00 	cmp.w	sl, #0
 8007cf8:	d048      	beq.n	8007d8c <__gethex+0x3f4>
 8007cfa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007cfe:	2b02      	cmp	r3, #2
 8007d00:	d015      	beq.n	8007d2e <__gethex+0x396>
 8007d02:	2b03      	cmp	r3, #3
 8007d04:	d017      	beq.n	8007d36 <__gethex+0x39e>
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d109      	bne.n	8007d1e <__gethex+0x386>
 8007d0a:	f01a 0f02 	tst.w	sl, #2
 8007d0e:	d006      	beq.n	8007d1e <__gethex+0x386>
 8007d10:	f8d9 0000 	ldr.w	r0, [r9]
 8007d14:	ea4a 0a00 	orr.w	sl, sl, r0
 8007d18:	f01a 0f01 	tst.w	sl, #1
 8007d1c:	d10e      	bne.n	8007d3c <__gethex+0x3a4>
 8007d1e:	f047 0710 	orr.w	r7, r7, #16
 8007d22:	e033      	b.n	8007d8c <__gethex+0x3f4>
 8007d24:	f04f 0a01 	mov.w	sl, #1
 8007d28:	e7d0      	b.n	8007ccc <__gethex+0x334>
 8007d2a:	2701      	movs	r7, #1
 8007d2c:	e7e2      	b.n	8007cf4 <__gethex+0x35c>
 8007d2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d30:	f1c3 0301 	rsb	r3, r3, #1
 8007d34:	9315      	str	r3, [sp, #84]	; 0x54
 8007d36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d0f0      	beq.n	8007d1e <__gethex+0x386>
 8007d3c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007d40:	f104 0314 	add.w	r3, r4, #20
 8007d44:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007d48:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007d4c:	f04f 0c00 	mov.w	ip, #0
 8007d50:	4618      	mov	r0, r3
 8007d52:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d56:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8007d5a:	d01c      	beq.n	8007d96 <__gethex+0x3fe>
 8007d5c:	3201      	adds	r2, #1
 8007d5e:	6002      	str	r2, [r0, #0]
 8007d60:	2f02      	cmp	r7, #2
 8007d62:	f104 0314 	add.w	r3, r4, #20
 8007d66:	d13f      	bne.n	8007de8 <__gethex+0x450>
 8007d68:	f8d8 2000 	ldr.w	r2, [r8]
 8007d6c:	3a01      	subs	r2, #1
 8007d6e:	42b2      	cmp	r2, r6
 8007d70:	d10a      	bne.n	8007d88 <__gethex+0x3f0>
 8007d72:	1171      	asrs	r1, r6, #5
 8007d74:	2201      	movs	r2, #1
 8007d76:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007d7a:	f006 061f 	and.w	r6, r6, #31
 8007d7e:	fa02 f606 	lsl.w	r6, r2, r6
 8007d82:	421e      	tst	r6, r3
 8007d84:	bf18      	it	ne
 8007d86:	4617      	movne	r7, r2
 8007d88:	f047 0720 	orr.w	r7, r7, #32
 8007d8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d8e:	601c      	str	r4, [r3, #0]
 8007d90:	9b04      	ldr	r3, [sp, #16]
 8007d92:	601d      	str	r5, [r3, #0]
 8007d94:	e695      	b.n	8007ac2 <__gethex+0x12a>
 8007d96:	4299      	cmp	r1, r3
 8007d98:	f843 cc04 	str.w	ip, [r3, #-4]
 8007d9c:	d8d8      	bhi.n	8007d50 <__gethex+0x3b8>
 8007d9e:	68a3      	ldr	r3, [r4, #8]
 8007da0:	459b      	cmp	fp, r3
 8007da2:	db19      	blt.n	8007dd8 <__gethex+0x440>
 8007da4:	6861      	ldr	r1, [r4, #4]
 8007da6:	ee18 0a10 	vmov	r0, s16
 8007daa:	3101      	adds	r1, #1
 8007dac:	f000 f982 	bl	80080b4 <_Balloc>
 8007db0:	4681      	mov	r9, r0
 8007db2:	b918      	cbnz	r0, 8007dbc <__gethex+0x424>
 8007db4:	4b1a      	ldr	r3, [pc, #104]	; (8007e20 <__gethex+0x488>)
 8007db6:	4602      	mov	r2, r0
 8007db8:	2184      	movs	r1, #132	; 0x84
 8007dba:	e6a8      	b.n	8007b0e <__gethex+0x176>
 8007dbc:	6922      	ldr	r2, [r4, #16]
 8007dbe:	3202      	adds	r2, #2
 8007dc0:	f104 010c 	add.w	r1, r4, #12
 8007dc4:	0092      	lsls	r2, r2, #2
 8007dc6:	300c      	adds	r0, #12
 8007dc8:	f7fc fe80 	bl	8004acc <memcpy>
 8007dcc:	4621      	mov	r1, r4
 8007dce:	ee18 0a10 	vmov	r0, s16
 8007dd2:	f000 f9af 	bl	8008134 <_Bfree>
 8007dd6:	464c      	mov	r4, r9
 8007dd8:	6923      	ldr	r3, [r4, #16]
 8007dda:	1c5a      	adds	r2, r3, #1
 8007ddc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007de0:	6122      	str	r2, [r4, #16]
 8007de2:	2201      	movs	r2, #1
 8007de4:	615a      	str	r2, [r3, #20]
 8007de6:	e7bb      	b.n	8007d60 <__gethex+0x3c8>
 8007de8:	6922      	ldr	r2, [r4, #16]
 8007dea:	455a      	cmp	r2, fp
 8007dec:	dd0b      	ble.n	8007e06 <__gethex+0x46e>
 8007dee:	2101      	movs	r1, #1
 8007df0:	4620      	mov	r0, r4
 8007df2:	f7ff fd6a 	bl	80078ca <rshift>
 8007df6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007dfa:	3501      	adds	r5, #1
 8007dfc:	42ab      	cmp	r3, r5
 8007dfe:	f6ff aed0 	blt.w	8007ba2 <__gethex+0x20a>
 8007e02:	2701      	movs	r7, #1
 8007e04:	e7c0      	b.n	8007d88 <__gethex+0x3f0>
 8007e06:	f016 061f 	ands.w	r6, r6, #31
 8007e0a:	d0fa      	beq.n	8007e02 <__gethex+0x46a>
 8007e0c:	4453      	add	r3, sl
 8007e0e:	f1c6 0620 	rsb	r6, r6, #32
 8007e12:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007e16:	f000 fa3f 	bl	8008298 <__hi0bits>
 8007e1a:	42b0      	cmp	r0, r6
 8007e1c:	dbe7      	blt.n	8007dee <__gethex+0x456>
 8007e1e:	e7f0      	b.n	8007e02 <__gethex+0x46a>
 8007e20:	08009950 	.word	0x08009950

08007e24 <L_shift>:
 8007e24:	f1c2 0208 	rsb	r2, r2, #8
 8007e28:	0092      	lsls	r2, r2, #2
 8007e2a:	b570      	push	{r4, r5, r6, lr}
 8007e2c:	f1c2 0620 	rsb	r6, r2, #32
 8007e30:	6843      	ldr	r3, [r0, #4]
 8007e32:	6804      	ldr	r4, [r0, #0]
 8007e34:	fa03 f506 	lsl.w	r5, r3, r6
 8007e38:	432c      	orrs	r4, r5
 8007e3a:	40d3      	lsrs	r3, r2
 8007e3c:	6004      	str	r4, [r0, #0]
 8007e3e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007e42:	4288      	cmp	r0, r1
 8007e44:	d3f4      	bcc.n	8007e30 <L_shift+0xc>
 8007e46:	bd70      	pop	{r4, r5, r6, pc}

08007e48 <__match>:
 8007e48:	b530      	push	{r4, r5, lr}
 8007e4a:	6803      	ldr	r3, [r0, #0]
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e52:	b914      	cbnz	r4, 8007e5a <__match+0x12>
 8007e54:	6003      	str	r3, [r0, #0]
 8007e56:	2001      	movs	r0, #1
 8007e58:	bd30      	pop	{r4, r5, pc}
 8007e5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e5e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007e62:	2d19      	cmp	r5, #25
 8007e64:	bf98      	it	ls
 8007e66:	3220      	addls	r2, #32
 8007e68:	42a2      	cmp	r2, r4
 8007e6a:	d0f0      	beq.n	8007e4e <__match+0x6>
 8007e6c:	2000      	movs	r0, #0
 8007e6e:	e7f3      	b.n	8007e58 <__match+0x10>

08007e70 <__hexnan>:
 8007e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e74:	680b      	ldr	r3, [r1, #0]
 8007e76:	115e      	asrs	r6, r3, #5
 8007e78:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007e7c:	f013 031f 	ands.w	r3, r3, #31
 8007e80:	b087      	sub	sp, #28
 8007e82:	bf18      	it	ne
 8007e84:	3604      	addne	r6, #4
 8007e86:	2500      	movs	r5, #0
 8007e88:	1f37      	subs	r7, r6, #4
 8007e8a:	4690      	mov	r8, r2
 8007e8c:	6802      	ldr	r2, [r0, #0]
 8007e8e:	9301      	str	r3, [sp, #4]
 8007e90:	4682      	mov	sl, r0
 8007e92:	f846 5c04 	str.w	r5, [r6, #-4]
 8007e96:	46b9      	mov	r9, r7
 8007e98:	463c      	mov	r4, r7
 8007e9a:	9502      	str	r5, [sp, #8]
 8007e9c:	46ab      	mov	fp, r5
 8007e9e:	7851      	ldrb	r1, [r2, #1]
 8007ea0:	1c53      	adds	r3, r2, #1
 8007ea2:	9303      	str	r3, [sp, #12]
 8007ea4:	b341      	cbz	r1, 8007ef8 <__hexnan+0x88>
 8007ea6:	4608      	mov	r0, r1
 8007ea8:	9205      	str	r2, [sp, #20]
 8007eaa:	9104      	str	r1, [sp, #16]
 8007eac:	f7ff fd5f 	bl	800796e <__hexdig_fun>
 8007eb0:	2800      	cmp	r0, #0
 8007eb2:	d14f      	bne.n	8007f54 <__hexnan+0xe4>
 8007eb4:	9904      	ldr	r1, [sp, #16]
 8007eb6:	9a05      	ldr	r2, [sp, #20]
 8007eb8:	2920      	cmp	r1, #32
 8007eba:	d818      	bhi.n	8007eee <__hexnan+0x7e>
 8007ebc:	9b02      	ldr	r3, [sp, #8]
 8007ebe:	459b      	cmp	fp, r3
 8007ec0:	dd13      	ble.n	8007eea <__hexnan+0x7a>
 8007ec2:	454c      	cmp	r4, r9
 8007ec4:	d206      	bcs.n	8007ed4 <__hexnan+0x64>
 8007ec6:	2d07      	cmp	r5, #7
 8007ec8:	dc04      	bgt.n	8007ed4 <__hexnan+0x64>
 8007eca:	462a      	mov	r2, r5
 8007ecc:	4649      	mov	r1, r9
 8007ece:	4620      	mov	r0, r4
 8007ed0:	f7ff ffa8 	bl	8007e24 <L_shift>
 8007ed4:	4544      	cmp	r4, r8
 8007ed6:	d950      	bls.n	8007f7a <__hexnan+0x10a>
 8007ed8:	2300      	movs	r3, #0
 8007eda:	f1a4 0904 	sub.w	r9, r4, #4
 8007ede:	f844 3c04 	str.w	r3, [r4, #-4]
 8007ee2:	f8cd b008 	str.w	fp, [sp, #8]
 8007ee6:	464c      	mov	r4, r9
 8007ee8:	461d      	mov	r5, r3
 8007eea:	9a03      	ldr	r2, [sp, #12]
 8007eec:	e7d7      	b.n	8007e9e <__hexnan+0x2e>
 8007eee:	2929      	cmp	r1, #41	; 0x29
 8007ef0:	d156      	bne.n	8007fa0 <__hexnan+0x130>
 8007ef2:	3202      	adds	r2, #2
 8007ef4:	f8ca 2000 	str.w	r2, [sl]
 8007ef8:	f1bb 0f00 	cmp.w	fp, #0
 8007efc:	d050      	beq.n	8007fa0 <__hexnan+0x130>
 8007efe:	454c      	cmp	r4, r9
 8007f00:	d206      	bcs.n	8007f10 <__hexnan+0xa0>
 8007f02:	2d07      	cmp	r5, #7
 8007f04:	dc04      	bgt.n	8007f10 <__hexnan+0xa0>
 8007f06:	462a      	mov	r2, r5
 8007f08:	4649      	mov	r1, r9
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	f7ff ff8a 	bl	8007e24 <L_shift>
 8007f10:	4544      	cmp	r4, r8
 8007f12:	d934      	bls.n	8007f7e <__hexnan+0x10e>
 8007f14:	f1a8 0204 	sub.w	r2, r8, #4
 8007f18:	4623      	mov	r3, r4
 8007f1a:	f853 1b04 	ldr.w	r1, [r3], #4
 8007f1e:	f842 1f04 	str.w	r1, [r2, #4]!
 8007f22:	429f      	cmp	r7, r3
 8007f24:	d2f9      	bcs.n	8007f1a <__hexnan+0xaa>
 8007f26:	1b3b      	subs	r3, r7, r4
 8007f28:	f023 0303 	bic.w	r3, r3, #3
 8007f2c:	3304      	adds	r3, #4
 8007f2e:	3401      	adds	r4, #1
 8007f30:	3e03      	subs	r6, #3
 8007f32:	42b4      	cmp	r4, r6
 8007f34:	bf88      	it	hi
 8007f36:	2304      	movhi	r3, #4
 8007f38:	4443      	add	r3, r8
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f843 2b04 	str.w	r2, [r3], #4
 8007f40:	429f      	cmp	r7, r3
 8007f42:	d2fb      	bcs.n	8007f3c <__hexnan+0xcc>
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	b91b      	cbnz	r3, 8007f50 <__hexnan+0xe0>
 8007f48:	4547      	cmp	r7, r8
 8007f4a:	d127      	bne.n	8007f9c <__hexnan+0x12c>
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	603b      	str	r3, [r7, #0]
 8007f50:	2005      	movs	r0, #5
 8007f52:	e026      	b.n	8007fa2 <__hexnan+0x132>
 8007f54:	3501      	adds	r5, #1
 8007f56:	2d08      	cmp	r5, #8
 8007f58:	f10b 0b01 	add.w	fp, fp, #1
 8007f5c:	dd06      	ble.n	8007f6c <__hexnan+0xfc>
 8007f5e:	4544      	cmp	r4, r8
 8007f60:	d9c3      	bls.n	8007eea <__hexnan+0x7a>
 8007f62:	2300      	movs	r3, #0
 8007f64:	f844 3c04 	str.w	r3, [r4, #-4]
 8007f68:	2501      	movs	r5, #1
 8007f6a:	3c04      	subs	r4, #4
 8007f6c:	6822      	ldr	r2, [r4, #0]
 8007f6e:	f000 000f 	and.w	r0, r0, #15
 8007f72:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007f76:	6022      	str	r2, [r4, #0]
 8007f78:	e7b7      	b.n	8007eea <__hexnan+0x7a>
 8007f7a:	2508      	movs	r5, #8
 8007f7c:	e7b5      	b.n	8007eea <__hexnan+0x7a>
 8007f7e:	9b01      	ldr	r3, [sp, #4]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d0df      	beq.n	8007f44 <__hexnan+0xd4>
 8007f84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f88:	f1c3 0320 	rsb	r3, r3, #32
 8007f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f90:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007f94:	401a      	ands	r2, r3
 8007f96:	f846 2c04 	str.w	r2, [r6, #-4]
 8007f9a:	e7d3      	b.n	8007f44 <__hexnan+0xd4>
 8007f9c:	3f04      	subs	r7, #4
 8007f9e:	e7d1      	b.n	8007f44 <__hexnan+0xd4>
 8007fa0:	2004      	movs	r0, #4
 8007fa2:	b007      	add	sp, #28
 8007fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007fa8 <_localeconv_r>:
 8007fa8:	4800      	ldr	r0, [pc, #0]	; (8007fac <_localeconv_r+0x4>)
 8007faa:	4770      	bx	lr
 8007fac:	20000168 	.word	0x20000168

08007fb0 <__retarget_lock_init_recursive>:
 8007fb0:	4770      	bx	lr

08007fb2 <__retarget_lock_acquire_recursive>:
 8007fb2:	4770      	bx	lr

08007fb4 <__retarget_lock_release_recursive>:
 8007fb4:	4770      	bx	lr

08007fb6 <__swhatbuf_r>:
 8007fb6:	b570      	push	{r4, r5, r6, lr}
 8007fb8:	460e      	mov	r6, r1
 8007fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fbe:	2900      	cmp	r1, #0
 8007fc0:	b096      	sub	sp, #88	; 0x58
 8007fc2:	4614      	mov	r4, r2
 8007fc4:	461d      	mov	r5, r3
 8007fc6:	da08      	bge.n	8007fda <__swhatbuf_r+0x24>
 8007fc8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	602a      	str	r2, [r5, #0]
 8007fd0:	061a      	lsls	r2, r3, #24
 8007fd2:	d410      	bmi.n	8007ff6 <__swhatbuf_r+0x40>
 8007fd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fd8:	e00e      	b.n	8007ff8 <__swhatbuf_r+0x42>
 8007fda:	466a      	mov	r2, sp
 8007fdc:	f001 f84e 	bl	800907c <_fstat_r>
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	dbf1      	blt.n	8007fc8 <__swhatbuf_r+0x12>
 8007fe4:	9a01      	ldr	r2, [sp, #4]
 8007fe6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007fea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007fee:	425a      	negs	r2, r3
 8007ff0:	415a      	adcs	r2, r3
 8007ff2:	602a      	str	r2, [r5, #0]
 8007ff4:	e7ee      	b.n	8007fd4 <__swhatbuf_r+0x1e>
 8007ff6:	2340      	movs	r3, #64	; 0x40
 8007ff8:	2000      	movs	r0, #0
 8007ffa:	6023      	str	r3, [r4, #0]
 8007ffc:	b016      	add	sp, #88	; 0x58
 8007ffe:	bd70      	pop	{r4, r5, r6, pc}

08008000 <__smakebuf_r>:
 8008000:	898b      	ldrh	r3, [r1, #12]
 8008002:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008004:	079d      	lsls	r5, r3, #30
 8008006:	4606      	mov	r6, r0
 8008008:	460c      	mov	r4, r1
 800800a:	d507      	bpl.n	800801c <__smakebuf_r+0x1c>
 800800c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008010:	6023      	str	r3, [r4, #0]
 8008012:	6123      	str	r3, [r4, #16]
 8008014:	2301      	movs	r3, #1
 8008016:	6163      	str	r3, [r4, #20]
 8008018:	b002      	add	sp, #8
 800801a:	bd70      	pop	{r4, r5, r6, pc}
 800801c:	ab01      	add	r3, sp, #4
 800801e:	466a      	mov	r2, sp
 8008020:	f7ff ffc9 	bl	8007fb6 <__swhatbuf_r>
 8008024:	9900      	ldr	r1, [sp, #0]
 8008026:	4605      	mov	r5, r0
 8008028:	4630      	mov	r0, r6
 800802a:	f000 fd87 	bl	8008b3c <_malloc_r>
 800802e:	b948      	cbnz	r0, 8008044 <__smakebuf_r+0x44>
 8008030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008034:	059a      	lsls	r2, r3, #22
 8008036:	d4ef      	bmi.n	8008018 <__smakebuf_r+0x18>
 8008038:	f023 0303 	bic.w	r3, r3, #3
 800803c:	f043 0302 	orr.w	r3, r3, #2
 8008040:	81a3      	strh	r3, [r4, #12]
 8008042:	e7e3      	b.n	800800c <__smakebuf_r+0xc>
 8008044:	4b0d      	ldr	r3, [pc, #52]	; (800807c <__smakebuf_r+0x7c>)
 8008046:	62b3      	str	r3, [r6, #40]	; 0x28
 8008048:	89a3      	ldrh	r3, [r4, #12]
 800804a:	6020      	str	r0, [r4, #0]
 800804c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008050:	81a3      	strh	r3, [r4, #12]
 8008052:	9b00      	ldr	r3, [sp, #0]
 8008054:	6163      	str	r3, [r4, #20]
 8008056:	9b01      	ldr	r3, [sp, #4]
 8008058:	6120      	str	r0, [r4, #16]
 800805a:	b15b      	cbz	r3, 8008074 <__smakebuf_r+0x74>
 800805c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008060:	4630      	mov	r0, r6
 8008062:	f001 f81d 	bl	80090a0 <_isatty_r>
 8008066:	b128      	cbz	r0, 8008074 <__smakebuf_r+0x74>
 8008068:	89a3      	ldrh	r3, [r4, #12]
 800806a:	f023 0303 	bic.w	r3, r3, #3
 800806e:	f043 0301 	orr.w	r3, r3, #1
 8008072:	81a3      	strh	r3, [r4, #12]
 8008074:	89a0      	ldrh	r0, [r4, #12]
 8008076:	4305      	orrs	r5, r0
 8008078:	81a5      	strh	r5, [r4, #12]
 800807a:	e7cd      	b.n	8008018 <__smakebuf_r+0x18>
 800807c:	08007729 	.word	0x08007729

08008080 <malloc>:
 8008080:	4b02      	ldr	r3, [pc, #8]	; (800808c <malloc+0xc>)
 8008082:	4601      	mov	r1, r0
 8008084:	6818      	ldr	r0, [r3, #0]
 8008086:	f000 bd59 	b.w	8008b3c <_malloc_r>
 800808a:	bf00      	nop
 800808c:	20000010 	.word	0x20000010

08008090 <__ascii_mbtowc>:
 8008090:	b082      	sub	sp, #8
 8008092:	b901      	cbnz	r1, 8008096 <__ascii_mbtowc+0x6>
 8008094:	a901      	add	r1, sp, #4
 8008096:	b142      	cbz	r2, 80080aa <__ascii_mbtowc+0x1a>
 8008098:	b14b      	cbz	r3, 80080ae <__ascii_mbtowc+0x1e>
 800809a:	7813      	ldrb	r3, [r2, #0]
 800809c:	600b      	str	r3, [r1, #0]
 800809e:	7812      	ldrb	r2, [r2, #0]
 80080a0:	1e10      	subs	r0, r2, #0
 80080a2:	bf18      	it	ne
 80080a4:	2001      	movne	r0, #1
 80080a6:	b002      	add	sp, #8
 80080a8:	4770      	bx	lr
 80080aa:	4610      	mov	r0, r2
 80080ac:	e7fb      	b.n	80080a6 <__ascii_mbtowc+0x16>
 80080ae:	f06f 0001 	mvn.w	r0, #1
 80080b2:	e7f8      	b.n	80080a6 <__ascii_mbtowc+0x16>

080080b4 <_Balloc>:
 80080b4:	b570      	push	{r4, r5, r6, lr}
 80080b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80080b8:	4604      	mov	r4, r0
 80080ba:	460d      	mov	r5, r1
 80080bc:	b976      	cbnz	r6, 80080dc <_Balloc+0x28>
 80080be:	2010      	movs	r0, #16
 80080c0:	f7ff ffde 	bl	8008080 <malloc>
 80080c4:	4602      	mov	r2, r0
 80080c6:	6260      	str	r0, [r4, #36]	; 0x24
 80080c8:	b920      	cbnz	r0, 80080d4 <_Balloc+0x20>
 80080ca:	4b18      	ldr	r3, [pc, #96]	; (800812c <_Balloc+0x78>)
 80080cc:	4818      	ldr	r0, [pc, #96]	; (8008130 <_Balloc+0x7c>)
 80080ce:	2166      	movs	r1, #102	; 0x66
 80080d0:	f000 ff94 	bl	8008ffc <__assert_func>
 80080d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080d8:	6006      	str	r6, [r0, #0]
 80080da:	60c6      	str	r6, [r0, #12]
 80080dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80080de:	68f3      	ldr	r3, [r6, #12]
 80080e0:	b183      	cbz	r3, 8008104 <_Balloc+0x50>
 80080e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80080ea:	b9b8      	cbnz	r0, 800811c <_Balloc+0x68>
 80080ec:	2101      	movs	r1, #1
 80080ee:	fa01 f605 	lsl.w	r6, r1, r5
 80080f2:	1d72      	adds	r2, r6, #5
 80080f4:	0092      	lsls	r2, r2, #2
 80080f6:	4620      	mov	r0, r4
 80080f8:	f000 fc9d 	bl	8008a36 <_calloc_r>
 80080fc:	b160      	cbz	r0, 8008118 <_Balloc+0x64>
 80080fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008102:	e00e      	b.n	8008122 <_Balloc+0x6e>
 8008104:	2221      	movs	r2, #33	; 0x21
 8008106:	2104      	movs	r1, #4
 8008108:	4620      	mov	r0, r4
 800810a:	f000 fc94 	bl	8008a36 <_calloc_r>
 800810e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008110:	60f0      	str	r0, [r6, #12]
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d1e4      	bne.n	80080e2 <_Balloc+0x2e>
 8008118:	2000      	movs	r0, #0
 800811a:	bd70      	pop	{r4, r5, r6, pc}
 800811c:	6802      	ldr	r2, [r0, #0]
 800811e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008122:	2300      	movs	r3, #0
 8008124:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008128:	e7f7      	b.n	800811a <_Balloc+0x66>
 800812a:	bf00      	nop
 800812c:	080098de 	.word	0x080098de
 8008130:	08009a40 	.word	0x08009a40

08008134 <_Bfree>:
 8008134:	b570      	push	{r4, r5, r6, lr}
 8008136:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008138:	4605      	mov	r5, r0
 800813a:	460c      	mov	r4, r1
 800813c:	b976      	cbnz	r6, 800815c <_Bfree+0x28>
 800813e:	2010      	movs	r0, #16
 8008140:	f7ff ff9e 	bl	8008080 <malloc>
 8008144:	4602      	mov	r2, r0
 8008146:	6268      	str	r0, [r5, #36]	; 0x24
 8008148:	b920      	cbnz	r0, 8008154 <_Bfree+0x20>
 800814a:	4b09      	ldr	r3, [pc, #36]	; (8008170 <_Bfree+0x3c>)
 800814c:	4809      	ldr	r0, [pc, #36]	; (8008174 <_Bfree+0x40>)
 800814e:	218a      	movs	r1, #138	; 0x8a
 8008150:	f000 ff54 	bl	8008ffc <__assert_func>
 8008154:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008158:	6006      	str	r6, [r0, #0]
 800815a:	60c6      	str	r6, [r0, #12]
 800815c:	b13c      	cbz	r4, 800816e <_Bfree+0x3a>
 800815e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008160:	6862      	ldr	r2, [r4, #4]
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008168:	6021      	str	r1, [r4, #0]
 800816a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800816e:	bd70      	pop	{r4, r5, r6, pc}
 8008170:	080098de 	.word	0x080098de
 8008174:	08009a40 	.word	0x08009a40

08008178 <__multadd>:
 8008178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800817c:	690d      	ldr	r5, [r1, #16]
 800817e:	4607      	mov	r7, r0
 8008180:	460c      	mov	r4, r1
 8008182:	461e      	mov	r6, r3
 8008184:	f101 0c14 	add.w	ip, r1, #20
 8008188:	2000      	movs	r0, #0
 800818a:	f8dc 3000 	ldr.w	r3, [ip]
 800818e:	b299      	uxth	r1, r3
 8008190:	fb02 6101 	mla	r1, r2, r1, r6
 8008194:	0c1e      	lsrs	r6, r3, #16
 8008196:	0c0b      	lsrs	r3, r1, #16
 8008198:	fb02 3306 	mla	r3, r2, r6, r3
 800819c:	b289      	uxth	r1, r1
 800819e:	3001      	adds	r0, #1
 80081a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80081a4:	4285      	cmp	r5, r0
 80081a6:	f84c 1b04 	str.w	r1, [ip], #4
 80081aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80081ae:	dcec      	bgt.n	800818a <__multadd+0x12>
 80081b0:	b30e      	cbz	r6, 80081f6 <__multadd+0x7e>
 80081b2:	68a3      	ldr	r3, [r4, #8]
 80081b4:	42ab      	cmp	r3, r5
 80081b6:	dc19      	bgt.n	80081ec <__multadd+0x74>
 80081b8:	6861      	ldr	r1, [r4, #4]
 80081ba:	4638      	mov	r0, r7
 80081bc:	3101      	adds	r1, #1
 80081be:	f7ff ff79 	bl	80080b4 <_Balloc>
 80081c2:	4680      	mov	r8, r0
 80081c4:	b928      	cbnz	r0, 80081d2 <__multadd+0x5a>
 80081c6:	4602      	mov	r2, r0
 80081c8:	4b0c      	ldr	r3, [pc, #48]	; (80081fc <__multadd+0x84>)
 80081ca:	480d      	ldr	r0, [pc, #52]	; (8008200 <__multadd+0x88>)
 80081cc:	21b5      	movs	r1, #181	; 0xb5
 80081ce:	f000 ff15 	bl	8008ffc <__assert_func>
 80081d2:	6922      	ldr	r2, [r4, #16]
 80081d4:	3202      	adds	r2, #2
 80081d6:	f104 010c 	add.w	r1, r4, #12
 80081da:	0092      	lsls	r2, r2, #2
 80081dc:	300c      	adds	r0, #12
 80081de:	f7fc fc75 	bl	8004acc <memcpy>
 80081e2:	4621      	mov	r1, r4
 80081e4:	4638      	mov	r0, r7
 80081e6:	f7ff ffa5 	bl	8008134 <_Bfree>
 80081ea:	4644      	mov	r4, r8
 80081ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80081f0:	3501      	adds	r5, #1
 80081f2:	615e      	str	r6, [r3, #20]
 80081f4:	6125      	str	r5, [r4, #16]
 80081f6:	4620      	mov	r0, r4
 80081f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081fc:	08009950 	.word	0x08009950
 8008200:	08009a40 	.word	0x08009a40

08008204 <__s2b>:
 8008204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008208:	460c      	mov	r4, r1
 800820a:	4615      	mov	r5, r2
 800820c:	461f      	mov	r7, r3
 800820e:	2209      	movs	r2, #9
 8008210:	3308      	adds	r3, #8
 8008212:	4606      	mov	r6, r0
 8008214:	fb93 f3f2 	sdiv	r3, r3, r2
 8008218:	2100      	movs	r1, #0
 800821a:	2201      	movs	r2, #1
 800821c:	429a      	cmp	r2, r3
 800821e:	db09      	blt.n	8008234 <__s2b+0x30>
 8008220:	4630      	mov	r0, r6
 8008222:	f7ff ff47 	bl	80080b4 <_Balloc>
 8008226:	b940      	cbnz	r0, 800823a <__s2b+0x36>
 8008228:	4602      	mov	r2, r0
 800822a:	4b19      	ldr	r3, [pc, #100]	; (8008290 <__s2b+0x8c>)
 800822c:	4819      	ldr	r0, [pc, #100]	; (8008294 <__s2b+0x90>)
 800822e:	21ce      	movs	r1, #206	; 0xce
 8008230:	f000 fee4 	bl	8008ffc <__assert_func>
 8008234:	0052      	lsls	r2, r2, #1
 8008236:	3101      	adds	r1, #1
 8008238:	e7f0      	b.n	800821c <__s2b+0x18>
 800823a:	9b08      	ldr	r3, [sp, #32]
 800823c:	6143      	str	r3, [r0, #20]
 800823e:	2d09      	cmp	r5, #9
 8008240:	f04f 0301 	mov.w	r3, #1
 8008244:	6103      	str	r3, [r0, #16]
 8008246:	dd16      	ble.n	8008276 <__s2b+0x72>
 8008248:	f104 0909 	add.w	r9, r4, #9
 800824c:	46c8      	mov	r8, r9
 800824e:	442c      	add	r4, r5
 8008250:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008254:	4601      	mov	r1, r0
 8008256:	3b30      	subs	r3, #48	; 0x30
 8008258:	220a      	movs	r2, #10
 800825a:	4630      	mov	r0, r6
 800825c:	f7ff ff8c 	bl	8008178 <__multadd>
 8008260:	45a0      	cmp	r8, r4
 8008262:	d1f5      	bne.n	8008250 <__s2b+0x4c>
 8008264:	f1a5 0408 	sub.w	r4, r5, #8
 8008268:	444c      	add	r4, r9
 800826a:	1b2d      	subs	r5, r5, r4
 800826c:	1963      	adds	r3, r4, r5
 800826e:	42bb      	cmp	r3, r7
 8008270:	db04      	blt.n	800827c <__s2b+0x78>
 8008272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008276:	340a      	adds	r4, #10
 8008278:	2509      	movs	r5, #9
 800827a:	e7f6      	b.n	800826a <__s2b+0x66>
 800827c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008280:	4601      	mov	r1, r0
 8008282:	3b30      	subs	r3, #48	; 0x30
 8008284:	220a      	movs	r2, #10
 8008286:	4630      	mov	r0, r6
 8008288:	f7ff ff76 	bl	8008178 <__multadd>
 800828c:	e7ee      	b.n	800826c <__s2b+0x68>
 800828e:	bf00      	nop
 8008290:	08009950 	.word	0x08009950
 8008294:	08009a40 	.word	0x08009a40

08008298 <__hi0bits>:
 8008298:	0c03      	lsrs	r3, r0, #16
 800829a:	041b      	lsls	r3, r3, #16
 800829c:	b9d3      	cbnz	r3, 80082d4 <__hi0bits+0x3c>
 800829e:	0400      	lsls	r0, r0, #16
 80082a0:	2310      	movs	r3, #16
 80082a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80082a6:	bf04      	itt	eq
 80082a8:	0200      	lsleq	r0, r0, #8
 80082aa:	3308      	addeq	r3, #8
 80082ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80082b0:	bf04      	itt	eq
 80082b2:	0100      	lsleq	r0, r0, #4
 80082b4:	3304      	addeq	r3, #4
 80082b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80082ba:	bf04      	itt	eq
 80082bc:	0080      	lsleq	r0, r0, #2
 80082be:	3302      	addeq	r3, #2
 80082c0:	2800      	cmp	r0, #0
 80082c2:	db05      	blt.n	80082d0 <__hi0bits+0x38>
 80082c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80082c8:	f103 0301 	add.w	r3, r3, #1
 80082cc:	bf08      	it	eq
 80082ce:	2320      	moveq	r3, #32
 80082d0:	4618      	mov	r0, r3
 80082d2:	4770      	bx	lr
 80082d4:	2300      	movs	r3, #0
 80082d6:	e7e4      	b.n	80082a2 <__hi0bits+0xa>

080082d8 <__lo0bits>:
 80082d8:	6803      	ldr	r3, [r0, #0]
 80082da:	f013 0207 	ands.w	r2, r3, #7
 80082de:	4601      	mov	r1, r0
 80082e0:	d00b      	beq.n	80082fa <__lo0bits+0x22>
 80082e2:	07da      	lsls	r2, r3, #31
 80082e4:	d423      	bmi.n	800832e <__lo0bits+0x56>
 80082e6:	0798      	lsls	r0, r3, #30
 80082e8:	bf49      	itett	mi
 80082ea:	085b      	lsrmi	r3, r3, #1
 80082ec:	089b      	lsrpl	r3, r3, #2
 80082ee:	2001      	movmi	r0, #1
 80082f0:	600b      	strmi	r3, [r1, #0]
 80082f2:	bf5c      	itt	pl
 80082f4:	600b      	strpl	r3, [r1, #0]
 80082f6:	2002      	movpl	r0, #2
 80082f8:	4770      	bx	lr
 80082fa:	b298      	uxth	r0, r3
 80082fc:	b9a8      	cbnz	r0, 800832a <__lo0bits+0x52>
 80082fe:	0c1b      	lsrs	r3, r3, #16
 8008300:	2010      	movs	r0, #16
 8008302:	b2da      	uxtb	r2, r3
 8008304:	b90a      	cbnz	r2, 800830a <__lo0bits+0x32>
 8008306:	3008      	adds	r0, #8
 8008308:	0a1b      	lsrs	r3, r3, #8
 800830a:	071a      	lsls	r2, r3, #28
 800830c:	bf04      	itt	eq
 800830e:	091b      	lsreq	r3, r3, #4
 8008310:	3004      	addeq	r0, #4
 8008312:	079a      	lsls	r2, r3, #30
 8008314:	bf04      	itt	eq
 8008316:	089b      	lsreq	r3, r3, #2
 8008318:	3002      	addeq	r0, #2
 800831a:	07da      	lsls	r2, r3, #31
 800831c:	d403      	bmi.n	8008326 <__lo0bits+0x4e>
 800831e:	085b      	lsrs	r3, r3, #1
 8008320:	f100 0001 	add.w	r0, r0, #1
 8008324:	d005      	beq.n	8008332 <__lo0bits+0x5a>
 8008326:	600b      	str	r3, [r1, #0]
 8008328:	4770      	bx	lr
 800832a:	4610      	mov	r0, r2
 800832c:	e7e9      	b.n	8008302 <__lo0bits+0x2a>
 800832e:	2000      	movs	r0, #0
 8008330:	4770      	bx	lr
 8008332:	2020      	movs	r0, #32
 8008334:	4770      	bx	lr
	...

08008338 <__i2b>:
 8008338:	b510      	push	{r4, lr}
 800833a:	460c      	mov	r4, r1
 800833c:	2101      	movs	r1, #1
 800833e:	f7ff feb9 	bl	80080b4 <_Balloc>
 8008342:	4602      	mov	r2, r0
 8008344:	b928      	cbnz	r0, 8008352 <__i2b+0x1a>
 8008346:	4b05      	ldr	r3, [pc, #20]	; (800835c <__i2b+0x24>)
 8008348:	4805      	ldr	r0, [pc, #20]	; (8008360 <__i2b+0x28>)
 800834a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800834e:	f000 fe55 	bl	8008ffc <__assert_func>
 8008352:	2301      	movs	r3, #1
 8008354:	6144      	str	r4, [r0, #20]
 8008356:	6103      	str	r3, [r0, #16]
 8008358:	bd10      	pop	{r4, pc}
 800835a:	bf00      	nop
 800835c:	08009950 	.word	0x08009950
 8008360:	08009a40 	.word	0x08009a40

08008364 <__multiply>:
 8008364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008368:	4691      	mov	r9, r2
 800836a:	690a      	ldr	r2, [r1, #16]
 800836c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008370:	429a      	cmp	r2, r3
 8008372:	bfb8      	it	lt
 8008374:	460b      	movlt	r3, r1
 8008376:	460c      	mov	r4, r1
 8008378:	bfbc      	itt	lt
 800837a:	464c      	movlt	r4, r9
 800837c:	4699      	movlt	r9, r3
 800837e:	6927      	ldr	r7, [r4, #16]
 8008380:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008384:	68a3      	ldr	r3, [r4, #8]
 8008386:	6861      	ldr	r1, [r4, #4]
 8008388:	eb07 060a 	add.w	r6, r7, sl
 800838c:	42b3      	cmp	r3, r6
 800838e:	b085      	sub	sp, #20
 8008390:	bfb8      	it	lt
 8008392:	3101      	addlt	r1, #1
 8008394:	f7ff fe8e 	bl	80080b4 <_Balloc>
 8008398:	b930      	cbnz	r0, 80083a8 <__multiply+0x44>
 800839a:	4602      	mov	r2, r0
 800839c:	4b44      	ldr	r3, [pc, #272]	; (80084b0 <__multiply+0x14c>)
 800839e:	4845      	ldr	r0, [pc, #276]	; (80084b4 <__multiply+0x150>)
 80083a0:	f240 115d 	movw	r1, #349	; 0x15d
 80083a4:	f000 fe2a 	bl	8008ffc <__assert_func>
 80083a8:	f100 0514 	add.w	r5, r0, #20
 80083ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80083b0:	462b      	mov	r3, r5
 80083b2:	2200      	movs	r2, #0
 80083b4:	4543      	cmp	r3, r8
 80083b6:	d321      	bcc.n	80083fc <__multiply+0x98>
 80083b8:	f104 0314 	add.w	r3, r4, #20
 80083bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80083c0:	f109 0314 	add.w	r3, r9, #20
 80083c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80083c8:	9202      	str	r2, [sp, #8]
 80083ca:	1b3a      	subs	r2, r7, r4
 80083cc:	3a15      	subs	r2, #21
 80083ce:	f022 0203 	bic.w	r2, r2, #3
 80083d2:	3204      	adds	r2, #4
 80083d4:	f104 0115 	add.w	r1, r4, #21
 80083d8:	428f      	cmp	r7, r1
 80083da:	bf38      	it	cc
 80083dc:	2204      	movcc	r2, #4
 80083de:	9201      	str	r2, [sp, #4]
 80083e0:	9a02      	ldr	r2, [sp, #8]
 80083e2:	9303      	str	r3, [sp, #12]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d80c      	bhi.n	8008402 <__multiply+0x9e>
 80083e8:	2e00      	cmp	r6, #0
 80083ea:	dd03      	ble.n	80083f4 <__multiply+0x90>
 80083ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d05a      	beq.n	80084aa <__multiply+0x146>
 80083f4:	6106      	str	r6, [r0, #16]
 80083f6:	b005      	add	sp, #20
 80083f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083fc:	f843 2b04 	str.w	r2, [r3], #4
 8008400:	e7d8      	b.n	80083b4 <__multiply+0x50>
 8008402:	f8b3 a000 	ldrh.w	sl, [r3]
 8008406:	f1ba 0f00 	cmp.w	sl, #0
 800840a:	d024      	beq.n	8008456 <__multiply+0xf2>
 800840c:	f104 0e14 	add.w	lr, r4, #20
 8008410:	46a9      	mov	r9, r5
 8008412:	f04f 0c00 	mov.w	ip, #0
 8008416:	f85e 2b04 	ldr.w	r2, [lr], #4
 800841a:	f8d9 1000 	ldr.w	r1, [r9]
 800841e:	fa1f fb82 	uxth.w	fp, r2
 8008422:	b289      	uxth	r1, r1
 8008424:	fb0a 110b 	mla	r1, sl, fp, r1
 8008428:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800842c:	f8d9 2000 	ldr.w	r2, [r9]
 8008430:	4461      	add	r1, ip
 8008432:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008436:	fb0a c20b 	mla	r2, sl, fp, ip
 800843a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800843e:	b289      	uxth	r1, r1
 8008440:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008444:	4577      	cmp	r7, lr
 8008446:	f849 1b04 	str.w	r1, [r9], #4
 800844a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800844e:	d8e2      	bhi.n	8008416 <__multiply+0xb2>
 8008450:	9a01      	ldr	r2, [sp, #4]
 8008452:	f845 c002 	str.w	ip, [r5, r2]
 8008456:	9a03      	ldr	r2, [sp, #12]
 8008458:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800845c:	3304      	adds	r3, #4
 800845e:	f1b9 0f00 	cmp.w	r9, #0
 8008462:	d020      	beq.n	80084a6 <__multiply+0x142>
 8008464:	6829      	ldr	r1, [r5, #0]
 8008466:	f104 0c14 	add.w	ip, r4, #20
 800846a:	46ae      	mov	lr, r5
 800846c:	f04f 0a00 	mov.w	sl, #0
 8008470:	f8bc b000 	ldrh.w	fp, [ip]
 8008474:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008478:	fb09 220b 	mla	r2, r9, fp, r2
 800847c:	4492      	add	sl, r2
 800847e:	b289      	uxth	r1, r1
 8008480:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008484:	f84e 1b04 	str.w	r1, [lr], #4
 8008488:	f85c 2b04 	ldr.w	r2, [ip], #4
 800848c:	f8be 1000 	ldrh.w	r1, [lr]
 8008490:	0c12      	lsrs	r2, r2, #16
 8008492:	fb09 1102 	mla	r1, r9, r2, r1
 8008496:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800849a:	4567      	cmp	r7, ip
 800849c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80084a0:	d8e6      	bhi.n	8008470 <__multiply+0x10c>
 80084a2:	9a01      	ldr	r2, [sp, #4]
 80084a4:	50a9      	str	r1, [r5, r2]
 80084a6:	3504      	adds	r5, #4
 80084a8:	e79a      	b.n	80083e0 <__multiply+0x7c>
 80084aa:	3e01      	subs	r6, #1
 80084ac:	e79c      	b.n	80083e8 <__multiply+0x84>
 80084ae:	bf00      	nop
 80084b0:	08009950 	.word	0x08009950
 80084b4:	08009a40 	.word	0x08009a40

080084b8 <__pow5mult>:
 80084b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084bc:	4615      	mov	r5, r2
 80084be:	f012 0203 	ands.w	r2, r2, #3
 80084c2:	4606      	mov	r6, r0
 80084c4:	460f      	mov	r7, r1
 80084c6:	d007      	beq.n	80084d8 <__pow5mult+0x20>
 80084c8:	4c25      	ldr	r4, [pc, #148]	; (8008560 <__pow5mult+0xa8>)
 80084ca:	3a01      	subs	r2, #1
 80084cc:	2300      	movs	r3, #0
 80084ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80084d2:	f7ff fe51 	bl	8008178 <__multadd>
 80084d6:	4607      	mov	r7, r0
 80084d8:	10ad      	asrs	r5, r5, #2
 80084da:	d03d      	beq.n	8008558 <__pow5mult+0xa0>
 80084dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80084de:	b97c      	cbnz	r4, 8008500 <__pow5mult+0x48>
 80084e0:	2010      	movs	r0, #16
 80084e2:	f7ff fdcd 	bl	8008080 <malloc>
 80084e6:	4602      	mov	r2, r0
 80084e8:	6270      	str	r0, [r6, #36]	; 0x24
 80084ea:	b928      	cbnz	r0, 80084f8 <__pow5mult+0x40>
 80084ec:	4b1d      	ldr	r3, [pc, #116]	; (8008564 <__pow5mult+0xac>)
 80084ee:	481e      	ldr	r0, [pc, #120]	; (8008568 <__pow5mult+0xb0>)
 80084f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80084f4:	f000 fd82 	bl	8008ffc <__assert_func>
 80084f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084fc:	6004      	str	r4, [r0, #0]
 80084fe:	60c4      	str	r4, [r0, #12]
 8008500:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008504:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008508:	b94c      	cbnz	r4, 800851e <__pow5mult+0x66>
 800850a:	f240 2171 	movw	r1, #625	; 0x271
 800850e:	4630      	mov	r0, r6
 8008510:	f7ff ff12 	bl	8008338 <__i2b>
 8008514:	2300      	movs	r3, #0
 8008516:	f8c8 0008 	str.w	r0, [r8, #8]
 800851a:	4604      	mov	r4, r0
 800851c:	6003      	str	r3, [r0, #0]
 800851e:	f04f 0900 	mov.w	r9, #0
 8008522:	07eb      	lsls	r3, r5, #31
 8008524:	d50a      	bpl.n	800853c <__pow5mult+0x84>
 8008526:	4639      	mov	r1, r7
 8008528:	4622      	mov	r2, r4
 800852a:	4630      	mov	r0, r6
 800852c:	f7ff ff1a 	bl	8008364 <__multiply>
 8008530:	4639      	mov	r1, r7
 8008532:	4680      	mov	r8, r0
 8008534:	4630      	mov	r0, r6
 8008536:	f7ff fdfd 	bl	8008134 <_Bfree>
 800853a:	4647      	mov	r7, r8
 800853c:	106d      	asrs	r5, r5, #1
 800853e:	d00b      	beq.n	8008558 <__pow5mult+0xa0>
 8008540:	6820      	ldr	r0, [r4, #0]
 8008542:	b938      	cbnz	r0, 8008554 <__pow5mult+0x9c>
 8008544:	4622      	mov	r2, r4
 8008546:	4621      	mov	r1, r4
 8008548:	4630      	mov	r0, r6
 800854a:	f7ff ff0b 	bl	8008364 <__multiply>
 800854e:	6020      	str	r0, [r4, #0]
 8008550:	f8c0 9000 	str.w	r9, [r0]
 8008554:	4604      	mov	r4, r0
 8008556:	e7e4      	b.n	8008522 <__pow5mult+0x6a>
 8008558:	4638      	mov	r0, r7
 800855a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800855e:	bf00      	nop
 8008560:	08009b90 	.word	0x08009b90
 8008564:	080098de 	.word	0x080098de
 8008568:	08009a40 	.word	0x08009a40

0800856c <__lshift>:
 800856c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008570:	460c      	mov	r4, r1
 8008572:	6849      	ldr	r1, [r1, #4]
 8008574:	6923      	ldr	r3, [r4, #16]
 8008576:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800857a:	68a3      	ldr	r3, [r4, #8]
 800857c:	4607      	mov	r7, r0
 800857e:	4691      	mov	r9, r2
 8008580:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008584:	f108 0601 	add.w	r6, r8, #1
 8008588:	42b3      	cmp	r3, r6
 800858a:	db0b      	blt.n	80085a4 <__lshift+0x38>
 800858c:	4638      	mov	r0, r7
 800858e:	f7ff fd91 	bl	80080b4 <_Balloc>
 8008592:	4605      	mov	r5, r0
 8008594:	b948      	cbnz	r0, 80085aa <__lshift+0x3e>
 8008596:	4602      	mov	r2, r0
 8008598:	4b2a      	ldr	r3, [pc, #168]	; (8008644 <__lshift+0xd8>)
 800859a:	482b      	ldr	r0, [pc, #172]	; (8008648 <__lshift+0xdc>)
 800859c:	f240 11d9 	movw	r1, #473	; 0x1d9
 80085a0:	f000 fd2c 	bl	8008ffc <__assert_func>
 80085a4:	3101      	adds	r1, #1
 80085a6:	005b      	lsls	r3, r3, #1
 80085a8:	e7ee      	b.n	8008588 <__lshift+0x1c>
 80085aa:	2300      	movs	r3, #0
 80085ac:	f100 0114 	add.w	r1, r0, #20
 80085b0:	f100 0210 	add.w	r2, r0, #16
 80085b4:	4618      	mov	r0, r3
 80085b6:	4553      	cmp	r3, sl
 80085b8:	db37      	blt.n	800862a <__lshift+0xbe>
 80085ba:	6920      	ldr	r0, [r4, #16]
 80085bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80085c0:	f104 0314 	add.w	r3, r4, #20
 80085c4:	f019 091f 	ands.w	r9, r9, #31
 80085c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80085cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80085d0:	d02f      	beq.n	8008632 <__lshift+0xc6>
 80085d2:	f1c9 0e20 	rsb	lr, r9, #32
 80085d6:	468a      	mov	sl, r1
 80085d8:	f04f 0c00 	mov.w	ip, #0
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	fa02 f209 	lsl.w	r2, r2, r9
 80085e2:	ea42 020c 	orr.w	r2, r2, ip
 80085e6:	f84a 2b04 	str.w	r2, [sl], #4
 80085ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80085ee:	4298      	cmp	r0, r3
 80085f0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80085f4:	d8f2      	bhi.n	80085dc <__lshift+0x70>
 80085f6:	1b03      	subs	r3, r0, r4
 80085f8:	3b15      	subs	r3, #21
 80085fa:	f023 0303 	bic.w	r3, r3, #3
 80085fe:	3304      	adds	r3, #4
 8008600:	f104 0215 	add.w	r2, r4, #21
 8008604:	4290      	cmp	r0, r2
 8008606:	bf38      	it	cc
 8008608:	2304      	movcc	r3, #4
 800860a:	f841 c003 	str.w	ip, [r1, r3]
 800860e:	f1bc 0f00 	cmp.w	ip, #0
 8008612:	d001      	beq.n	8008618 <__lshift+0xac>
 8008614:	f108 0602 	add.w	r6, r8, #2
 8008618:	3e01      	subs	r6, #1
 800861a:	4638      	mov	r0, r7
 800861c:	612e      	str	r6, [r5, #16]
 800861e:	4621      	mov	r1, r4
 8008620:	f7ff fd88 	bl	8008134 <_Bfree>
 8008624:	4628      	mov	r0, r5
 8008626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800862a:	f842 0f04 	str.w	r0, [r2, #4]!
 800862e:	3301      	adds	r3, #1
 8008630:	e7c1      	b.n	80085b6 <__lshift+0x4a>
 8008632:	3904      	subs	r1, #4
 8008634:	f853 2b04 	ldr.w	r2, [r3], #4
 8008638:	f841 2f04 	str.w	r2, [r1, #4]!
 800863c:	4298      	cmp	r0, r3
 800863e:	d8f9      	bhi.n	8008634 <__lshift+0xc8>
 8008640:	e7ea      	b.n	8008618 <__lshift+0xac>
 8008642:	bf00      	nop
 8008644:	08009950 	.word	0x08009950
 8008648:	08009a40 	.word	0x08009a40

0800864c <__mcmp>:
 800864c:	b530      	push	{r4, r5, lr}
 800864e:	6902      	ldr	r2, [r0, #16]
 8008650:	690c      	ldr	r4, [r1, #16]
 8008652:	1b12      	subs	r2, r2, r4
 8008654:	d10e      	bne.n	8008674 <__mcmp+0x28>
 8008656:	f100 0314 	add.w	r3, r0, #20
 800865a:	3114      	adds	r1, #20
 800865c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008660:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008664:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008668:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800866c:	42a5      	cmp	r5, r4
 800866e:	d003      	beq.n	8008678 <__mcmp+0x2c>
 8008670:	d305      	bcc.n	800867e <__mcmp+0x32>
 8008672:	2201      	movs	r2, #1
 8008674:	4610      	mov	r0, r2
 8008676:	bd30      	pop	{r4, r5, pc}
 8008678:	4283      	cmp	r3, r0
 800867a:	d3f3      	bcc.n	8008664 <__mcmp+0x18>
 800867c:	e7fa      	b.n	8008674 <__mcmp+0x28>
 800867e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008682:	e7f7      	b.n	8008674 <__mcmp+0x28>

08008684 <__mdiff>:
 8008684:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008688:	460c      	mov	r4, r1
 800868a:	4606      	mov	r6, r0
 800868c:	4611      	mov	r1, r2
 800868e:	4620      	mov	r0, r4
 8008690:	4690      	mov	r8, r2
 8008692:	f7ff ffdb 	bl	800864c <__mcmp>
 8008696:	1e05      	subs	r5, r0, #0
 8008698:	d110      	bne.n	80086bc <__mdiff+0x38>
 800869a:	4629      	mov	r1, r5
 800869c:	4630      	mov	r0, r6
 800869e:	f7ff fd09 	bl	80080b4 <_Balloc>
 80086a2:	b930      	cbnz	r0, 80086b2 <__mdiff+0x2e>
 80086a4:	4b3a      	ldr	r3, [pc, #232]	; (8008790 <__mdiff+0x10c>)
 80086a6:	4602      	mov	r2, r0
 80086a8:	f240 2132 	movw	r1, #562	; 0x232
 80086ac:	4839      	ldr	r0, [pc, #228]	; (8008794 <__mdiff+0x110>)
 80086ae:	f000 fca5 	bl	8008ffc <__assert_func>
 80086b2:	2301      	movs	r3, #1
 80086b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80086b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086bc:	bfa4      	itt	ge
 80086be:	4643      	movge	r3, r8
 80086c0:	46a0      	movge	r8, r4
 80086c2:	4630      	mov	r0, r6
 80086c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80086c8:	bfa6      	itte	ge
 80086ca:	461c      	movge	r4, r3
 80086cc:	2500      	movge	r5, #0
 80086ce:	2501      	movlt	r5, #1
 80086d0:	f7ff fcf0 	bl	80080b4 <_Balloc>
 80086d4:	b920      	cbnz	r0, 80086e0 <__mdiff+0x5c>
 80086d6:	4b2e      	ldr	r3, [pc, #184]	; (8008790 <__mdiff+0x10c>)
 80086d8:	4602      	mov	r2, r0
 80086da:	f44f 7110 	mov.w	r1, #576	; 0x240
 80086de:	e7e5      	b.n	80086ac <__mdiff+0x28>
 80086e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80086e4:	6926      	ldr	r6, [r4, #16]
 80086e6:	60c5      	str	r5, [r0, #12]
 80086e8:	f104 0914 	add.w	r9, r4, #20
 80086ec:	f108 0514 	add.w	r5, r8, #20
 80086f0:	f100 0e14 	add.w	lr, r0, #20
 80086f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80086f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80086fc:	f108 0210 	add.w	r2, r8, #16
 8008700:	46f2      	mov	sl, lr
 8008702:	2100      	movs	r1, #0
 8008704:	f859 3b04 	ldr.w	r3, [r9], #4
 8008708:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800870c:	fa1f f883 	uxth.w	r8, r3
 8008710:	fa11 f18b 	uxtah	r1, r1, fp
 8008714:	0c1b      	lsrs	r3, r3, #16
 8008716:	eba1 0808 	sub.w	r8, r1, r8
 800871a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800871e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008722:	fa1f f888 	uxth.w	r8, r8
 8008726:	1419      	asrs	r1, r3, #16
 8008728:	454e      	cmp	r6, r9
 800872a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800872e:	f84a 3b04 	str.w	r3, [sl], #4
 8008732:	d8e7      	bhi.n	8008704 <__mdiff+0x80>
 8008734:	1b33      	subs	r3, r6, r4
 8008736:	3b15      	subs	r3, #21
 8008738:	f023 0303 	bic.w	r3, r3, #3
 800873c:	3304      	adds	r3, #4
 800873e:	3415      	adds	r4, #21
 8008740:	42a6      	cmp	r6, r4
 8008742:	bf38      	it	cc
 8008744:	2304      	movcc	r3, #4
 8008746:	441d      	add	r5, r3
 8008748:	4473      	add	r3, lr
 800874a:	469e      	mov	lr, r3
 800874c:	462e      	mov	r6, r5
 800874e:	4566      	cmp	r6, ip
 8008750:	d30e      	bcc.n	8008770 <__mdiff+0xec>
 8008752:	f10c 0203 	add.w	r2, ip, #3
 8008756:	1b52      	subs	r2, r2, r5
 8008758:	f022 0203 	bic.w	r2, r2, #3
 800875c:	3d03      	subs	r5, #3
 800875e:	45ac      	cmp	ip, r5
 8008760:	bf38      	it	cc
 8008762:	2200      	movcc	r2, #0
 8008764:	441a      	add	r2, r3
 8008766:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800876a:	b17b      	cbz	r3, 800878c <__mdiff+0x108>
 800876c:	6107      	str	r7, [r0, #16]
 800876e:	e7a3      	b.n	80086b8 <__mdiff+0x34>
 8008770:	f856 8b04 	ldr.w	r8, [r6], #4
 8008774:	fa11 f288 	uxtah	r2, r1, r8
 8008778:	1414      	asrs	r4, r2, #16
 800877a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800877e:	b292      	uxth	r2, r2
 8008780:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008784:	f84e 2b04 	str.w	r2, [lr], #4
 8008788:	1421      	asrs	r1, r4, #16
 800878a:	e7e0      	b.n	800874e <__mdiff+0xca>
 800878c:	3f01      	subs	r7, #1
 800878e:	e7ea      	b.n	8008766 <__mdiff+0xe2>
 8008790:	08009950 	.word	0x08009950
 8008794:	08009a40 	.word	0x08009a40

08008798 <__ulp>:
 8008798:	b082      	sub	sp, #8
 800879a:	ed8d 0b00 	vstr	d0, [sp]
 800879e:	9b01      	ldr	r3, [sp, #4]
 80087a0:	4912      	ldr	r1, [pc, #72]	; (80087ec <__ulp+0x54>)
 80087a2:	4019      	ands	r1, r3
 80087a4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80087a8:	2900      	cmp	r1, #0
 80087aa:	dd05      	ble.n	80087b8 <__ulp+0x20>
 80087ac:	2200      	movs	r2, #0
 80087ae:	460b      	mov	r3, r1
 80087b0:	ec43 2b10 	vmov	d0, r2, r3
 80087b4:	b002      	add	sp, #8
 80087b6:	4770      	bx	lr
 80087b8:	4249      	negs	r1, r1
 80087ba:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80087be:	ea4f 5021 	mov.w	r0, r1, asr #20
 80087c2:	f04f 0200 	mov.w	r2, #0
 80087c6:	f04f 0300 	mov.w	r3, #0
 80087ca:	da04      	bge.n	80087d6 <__ulp+0x3e>
 80087cc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80087d0:	fa41 f300 	asr.w	r3, r1, r0
 80087d4:	e7ec      	b.n	80087b0 <__ulp+0x18>
 80087d6:	f1a0 0114 	sub.w	r1, r0, #20
 80087da:	291e      	cmp	r1, #30
 80087dc:	bfda      	itte	le
 80087de:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80087e2:	fa20 f101 	lsrle.w	r1, r0, r1
 80087e6:	2101      	movgt	r1, #1
 80087e8:	460a      	mov	r2, r1
 80087ea:	e7e1      	b.n	80087b0 <__ulp+0x18>
 80087ec:	7ff00000 	.word	0x7ff00000

080087f0 <__b2d>:
 80087f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087f2:	6905      	ldr	r5, [r0, #16]
 80087f4:	f100 0714 	add.w	r7, r0, #20
 80087f8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80087fc:	1f2e      	subs	r6, r5, #4
 80087fe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008802:	4620      	mov	r0, r4
 8008804:	f7ff fd48 	bl	8008298 <__hi0bits>
 8008808:	f1c0 0320 	rsb	r3, r0, #32
 800880c:	280a      	cmp	r0, #10
 800880e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800888c <__b2d+0x9c>
 8008812:	600b      	str	r3, [r1, #0]
 8008814:	dc14      	bgt.n	8008840 <__b2d+0x50>
 8008816:	f1c0 0e0b 	rsb	lr, r0, #11
 800881a:	fa24 f10e 	lsr.w	r1, r4, lr
 800881e:	42b7      	cmp	r7, r6
 8008820:	ea41 030c 	orr.w	r3, r1, ip
 8008824:	bf34      	ite	cc
 8008826:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800882a:	2100      	movcs	r1, #0
 800882c:	3015      	adds	r0, #21
 800882e:	fa04 f000 	lsl.w	r0, r4, r0
 8008832:	fa21 f10e 	lsr.w	r1, r1, lr
 8008836:	ea40 0201 	orr.w	r2, r0, r1
 800883a:	ec43 2b10 	vmov	d0, r2, r3
 800883e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008840:	42b7      	cmp	r7, r6
 8008842:	bf3a      	itte	cc
 8008844:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008848:	f1a5 0608 	subcc.w	r6, r5, #8
 800884c:	2100      	movcs	r1, #0
 800884e:	380b      	subs	r0, #11
 8008850:	d017      	beq.n	8008882 <__b2d+0x92>
 8008852:	f1c0 0c20 	rsb	ip, r0, #32
 8008856:	fa04 f500 	lsl.w	r5, r4, r0
 800885a:	42be      	cmp	r6, r7
 800885c:	fa21 f40c 	lsr.w	r4, r1, ip
 8008860:	ea45 0504 	orr.w	r5, r5, r4
 8008864:	bf8c      	ite	hi
 8008866:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800886a:	2400      	movls	r4, #0
 800886c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008870:	fa01 f000 	lsl.w	r0, r1, r0
 8008874:	fa24 f40c 	lsr.w	r4, r4, ip
 8008878:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800887c:	ea40 0204 	orr.w	r2, r0, r4
 8008880:	e7db      	b.n	800883a <__b2d+0x4a>
 8008882:	ea44 030c 	orr.w	r3, r4, ip
 8008886:	460a      	mov	r2, r1
 8008888:	e7d7      	b.n	800883a <__b2d+0x4a>
 800888a:	bf00      	nop
 800888c:	3ff00000 	.word	0x3ff00000

08008890 <__d2b>:
 8008890:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008894:	4689      	mov	r9, r1
 8008896:	2101      	movs	r1, #1
 8008898:	ec57 6b10 	vmov	r6, r7, d0
 800889c:	4690      	mov	r8, r2
 800889e:	f7ff fc09 	bl	80080b4 <_Balloc>
 80088a2:	4604      	mov	r4, r0
 80088a4:	b930      	cbnz	r0, 80088b4 <__d2b+0x24>
 80088a6:	4602      	mov	r2, r0
 80088a8:	4b25      	ldr	r3, [pc, #148]	; (8008940 <__d2b+0xb0>)
 80088aa:	4826      	ldr	r0, [pc, #152]	; (8008944 <__d2b+0xb4>)
 80088ac:	f240 310a 	movw	r1, #778	; 0x30a
 80088b0:	f000 fba4 	bl	8008ffc <__assert_func>
 80088b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80088b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80088bc:	bb35      	cbnz	r5, 800890c <__d2b+0x7c>
 80088be:	2e00      	cmp	r6, #0
 80088c0:	9301      	str	r3, [sp, #4]
 80088c2:	d028      	beq.n	8008916 <__d2b+0x86>
 80088c4:	4668      	mov	r0, sp
 80088c6:	9600      	str	r6, [sp, #0]
 80088c8:	f7ff fd06 	bl	80082d8 <__lo0bits>
 80088cc:	9900      	ldr	r1, [sp, #0]
 80088ce:	b300      	cbz	r0, 8008912 <__d2b+0x82>
 80088d0:	9a01      	ldr	r2, [sp, #4]
 80088d2:	f1c0 0320 	rsb	r3, r0, #32
 80088d6:	fa02 f303 	lsl.w	r3, r2, r3
 80088da:	430b      	orrs	r3, r1
 80088dc:	40c2      	lsrs	r2, r0
 80088de:	6163      	str	r3, [r4, #20]
 80088e0:	9201      	str	r2, [sp, #4]
 80088e2:	9b01      	ldr	r3, [sp, #4]
 80088e4:	61a3      	str	r3, [r4, #24]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	bf14      	ite	ne
 80088ea:	2202      	movne	r2, #2
 80088ec:	2201      	moveq	r2, #1
 80088ee:	6122      	str	r2, [r4, #16]
 80088f0:	b1d5      	cbz	r5, 8008928 <__d2b+0x98>
 80088f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80088f6:	4405      	add	r5, r0
 80088f8:	f8c9 5000 	str.w	r5, [r9]
 80088fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008900:	f8c8 0000 	str.w	r0, [r8]
 8008904:	4620      	mov	r0, r4
 8008906:	b003      	add	sp, #12
 8008908:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800890c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008910:	e7d5      	b.n	80088be <__d2b+0x2e>
 8008912:	6161      	str	r1, [r4, #20]
 8008914:	e7e5      	b.n	80088e2 <__d2b+0x52>
 8008916:	a801      	add	r0, sp, #4
 8008918:	f7ff fcde 	bl	80082d8 <__lo0bits>
 800891c:	9b01      	ldr	r3, [sp, #4]
 800891e:	6163      	str	r3, [r4, #20]
 8008920:	2201      	movs	r2, #1
 8008922:	6122      	str	r2, [r4, #16]
 8008924:	3020      	adds	r0, #32
 8008926:	e7e3      	b.n	80088f0 <__d2b+0x60>
 8008928:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800892c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008930:	f8c9 0000 	str.w	r0, [r9]
 8008934:	6918      	ldr	r0, [r3, #16]
 8008936:	f7ff fcaf 	bl	8008298 <__hi0bits>
 800893a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800893e:	e7df      	b.n	8008900 <__d2b+0x70>
 8008940:	08009950 	.word	0x08009950
 8008944:	08009a40 	.word	0x08009a40

08008948 <__ratio>:
 8008948:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800894c:	4688      	mov	r8, r1
 800894e:	4669      	mov	r1, sp
 8008950:	4681      	mov	r9, r0
 8008952:	f7ff ff4d 	bl	80087f0 <__b2d>
 8008956:	a901      	add	r1, sp, #4
 8008958:	4640      	mov	r0, r8
 800895a:	ec55 4b10 	vmov	r4, r5, d0
 800895e:	f7ff ff47 	bl	80087f0 <__b2d>
 8008962:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008966:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800896a:	eba3 0c02 	sub.w	ip, r3, r2
 800896e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008972:	1a9b      	subs	r3, r3, r2
 8008974:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008978:	ec51 0b10 	vmov	r0, r1, d0
 800897c:	2b00      	cmp	r3, #0
 800897e:	bfd6      	itet	le
 8008980:	460a      	movle	r2, r1
 8008982:	462a      	movgt	r2, r5
 8008984:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008988:	468b      	mov	fp, r1
 800898a:	462f      	mov	r7, r5
 800898c:	bfd4      	ite	le
 800898e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008992:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008996:	4620      	mov	r0, r4
 8008998:	ee10 2a10 	vmov	r2, s0
 800899c:	465b      	mov	r3, fp
 800899e:	4639      	mov	r1, r7
 80089a0:	f7f7 ff64 	bl	800086c <__aeabi_ddiv>
 80089a4:	ec41 0b10 	vmov	d0, r0, r1
 80089a8:	b003      	add	sp, #12
 80089aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080089ae <__copybits>:
 80089ae:	3901      	subs	r1, #1
 80089b0:	b570      	push	{r4, r5, r6, lr}
 80089b2:	1149      	asrs	r1, r1, #5
 80089b4:	6914      	ldr	r4, [r2, #16]
 80089b6:	3101      	adds	r1, #1
 80089b8:	f102 0314 	add.w	r3, r2, #20
 80089bc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80089c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80089c4:	1f05      	subs	r5, r0, #4
 80089c6:	42a3      	cmp	r3, r4
 80089c8:	d30c      	bcc.n	80089e4 <__copybits+0x36>
 80089ca:	1aa3      	subs	r3, r4, r2
 80089cc:	3b11      	subs	r3, #17
 80089ce:	f023 0303 	bic.w	r3, r3, #3
 80089d2:	3211      	adds	r2, #17
 80089d4:	42a2      	cmp	r2, r4
 80089d6:	bf88      	it	hi
 80089d8:	2300      	movhi	r3, #0
 80089da:	4418      	add	r0, r3
 80089dc:	2300      	movs	r3, #0
 80089de:	4288      	cmp	r0, r1
 80089e0:	d305      	bcc.n	80089ee <__copybits+0x40>
 80089e2:	bd70      	pop	{r4, r5, r6, pc}
 80089e4:	f853 6b04 	ldr.w	r6, [r3], #4
 80089e8:	f845 6f04 	str.w	r6, [r5, #4]!
 80089ec:	e7eb      	b.n	80089c6 <__copybits+0x18>
 80089ee:	f840 3b04 	str.w	r3, [r0], #4
 80089f2:	e7f4      	b.n	80089de <__copybits+0x30>

080089f4 <__any_on>:
 80089f4:	f100 0214 	add.w	r2, r0, #20
 80089f8:	6900      	ldr	r0, [r0, #16]
 80089fa:	114b      	asrs	r3, r1, #5
 80089fc:	4298      	cmp	r0, r3
 80089fe:	b510      	push	{r4, lr}
 8008a00:	db11      	blt.n	8008a26 <__any_on+0x32>
 8008a02:	dd0a      	ble.n	8008a1a <__any_on+0x26>
 8008a04:	f011 011f 	ands.w	r1, r1, #31
 8008a08:	d007      	beq.n	8008a1a <__any_on+0x26>
 8008a0a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008a0e:	fa24 f001 	lsr.w	r0, r4, r1
 8008a12:	fa00 f101 	lsl.w	r1, r0, r1
 8008a16:	428c      	cmp	r4, r1
 8008a18:	d10b      	bne.n	8008a32 <__any_on+0x3e>
 8008a1a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d803      	bhi.n	8008a2a <__any_on+0x36>
 8008a22:	2000      	movs	r0, #0
 8008a24:	bd10      	pop	{r4, pc}
 8008a26:	4603      	mov	r3, r0
 8008a28:	e7f7      	b.n	8008a1a <__any_on+0x26>
 8008a2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008a2e:	2900      	cmp	r1, #0
 8008a30:	d0f5      	beq.n	8008a1e <__any_on+0x2a>
 8008a32:	2001      	movs	r0, #1
 8008a34:	e7f6      	b.n	8008a24 <__any_on+0x30>

08008a36 <_calloc_r>:
 8008a36:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a38:	fba1 2402 	umull	r2, r4, r1, r2
 8008a3c:	b94c      	cbnz	r4, 8008a52 <_calloc_r+0x1c>
 8008a3e:	4611      	mov	r1, r2
 8008a40:	9201      	str	r2, [sp, #4]
 8008a42:	f000 f87b 	bl	8008b3c <_malloc_r>
 8008a46:	9a01      	ldr	r2, [sp, #4]
 8008a48:	4605      	mov	r5, r0
 8008a4a:	b930      	cbnz	r0, 8008a5a <_calloc_r+0x24>
 8008a4c:	4628      	mov	r0, r5
 8008a4e:	b003      	add	sp, #12
 8008a50:	bd30      	pop	{r4, r5, pc}
 8008a52:	220c      	movs	r2, #12
 8008a54:	6002      	str	r2, [r0, #0]
 8008a56:	2500      	movs	r5, #0
 8008a58:	e7f8      	b.n	8008a4c <_calloc_r+0x16>
 8008a5a:	4621      	mov	r1, r4
 8008a5c:	f7fc f844 	bl	8004ae8 <memset>
 8008a60:	e7f4      	b.n	8008a4c <_calloc_r+0x16>
	...

08008a64 <_free_r>:
 8008a64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a66:	2900      	cmp	r1, #0
 8008a68:	d044      	beq.n	8008af4 <_free_r+0x90>
 8008a6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a6e:	9001      	str	r0, [sp, #4]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f1a1 0404 	sub.w	r4, r1, #4
 8008a76:	bfb8      	it	lt
 8008a78:	18e4      	addlt	r4, r4, r3
 8008a7a:	f000 fb4d 	bl	8009118 <__malloc_lock>
 8008a7e:	4a1e      	ldr	r2, [pc, #120]	; (8008af8 <_free_r+0x94>)
 8008a80:	9801      	ldr	r0, [sp, #4]
 8008a82:	6813      	ldr	r3, [r2, #0]
 8008a84:	b933      	cbnz	r3, 8008a94 <_free_r+0x30>
 8008a86:	6063      	str	r3, [r4, #4]
 8008a88:	6014      	str	r4, [r2, #0]
 8008a8a:	b003      	add	sp, #12
 8008a8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a90:	f000 bb48 	b.w	8009124 <__malloc_unlock>
 8008a94:	42a3      	cmp	r3, r4
 8008a96:	d908      	bls.n	8008aaa <_free_r+0x46>
 8008a98:	6825      	ldr	r5, [r4, #0]
 8008a9a:	1961      	adds	r1, r4, r5
 8008a9c:	428b      	cmp	r3, r1
 8008a9e:	bf01      	itttt	eq
 8008aa0:	6819      	ldreq	r1, [r3, #0]
 8008aa2:	685b      	ldreq	r3, [r3, #4]
 8008aa4:	1949      	addeq	r1, r1, r5
 8008aa6:	6021      	streq	r1, [r4, #0]
 8008aa8:	e7ed      	b.n	8008a86 <_free_r+0x22>
 8008aaa:	461a      	mov	r2, r3
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	b10b      	cbz	r3, 8008ab4 <_free_r+0x50>
 8008ab0:	42a3      	cmp	r3, r4
 8008ab2:	d9fa      	bls.n	8008aaa <_free_r+0x46>
 8008ab4:	6811      	ldr	r1, [r2, #0]
 8008ab6:	1855      	adds	r5, r2, r1
 8008ab8:	42a5      	cmp	r5, r4
 8008aba:	d10b      	bne.n	8008ad4 <_free_r+0x70>
 8008abc:	6824      	ldr	r4, [r4, #0]
 8008abe:	4421      	add	r1, r4
 8008ac0:	1854      	adds	r4, r2, r1
 8008ac2:	42a3      	cmp	r3, r4
 8008ac4:	6011      	str	r1, [r2, #0]
 8008ac6:	d1e0      	bne.n	8008a8a <_free_r+0x26>
 8008ac8:	681c      	ldr	r4, [r3, #0]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	6053      	str	r3, [r2, #4]
 8008ace:	4421      	add	r1, r4
 8008ad0:	6011      	str	r1, [r2, #0]
 8008ad2:	e7da      	b.n	8008a8a <_free_r+0x26>
 8008ad4:	d902      	bls.n	8008adc <_free_r+0x78>
 8008ad6:	230c      	movs	r3, #12
 8008ad8:	6003      	str	r3, [r0, #0]
 8008ada:	e7d6      	b.n	8008a8a <_free_r+0x26>
 8008adc:	6825      	ldr	r5, [r4, #0]
 8008ade:	1961      	adds	r1, r4, r5
 8008ae0:	428b      	cmp	r3, r1
 8008ae2:	bf04      	itt	eq
 8008ae4:	6819      	ldreq	r1, [r3, #0]
 8008ae6:	685b      	ldreq	r3, [r3, #4]
 8008ae8:	6063      	str	r3, [r4, #4]
 8008aea:	bf04      	itt	eq
 8008aec:	1949      	addeq	r1, r1, r5
 8008aee:	6021      	streq	r1, [r4, #0]
 8008af0:	6054      	str	r4, [r2, #4]
 8008af2:	e7ca      	b.n	8008a8a <_free_r+0x26>
 8008af4:	b003      	add	sp, #12
 8008af6:	bd30      	pop	{r4, r5, pc}
 8008af8:	200002ec 	.word	0x200002ec

08008afc <sbrk_aligned>:
 8008afc:	b570      	push	{r4, r5, r6, lr}
 8008afe:	4e0e      	ldr	r6, [pc, #56]	; (8008b38 <sbrk_aligned+0x3c>)
 8008b00:	460c      	mov	r4, r1
 8008b02:	6831      	ldr	r1, [r6, #0]
 8008b04:	4605      	mov	r5, r0
 8008b06:	b911      	cbnz	r1, 8008b0e <sbrk_aligned+0x12>
 8008b08:	f000 f9f2 	bl	8008ef0 <_sbrk_r>
 8008b0c:	6030      	str	r0, [r6, #0]
 8008b0e:	4621      	mov	r1, r4
 8008b10:	4628      	mov	r0, r5
 8008b12:	f000 f9ed 	bl	8008ef0 <_sbrk_r>
 8008b16:	1c43      	adds	r3, r0, #1
 8008b18:	d00a      	beq.n	8008b30 <sbrk_aligned+0x34>
 8008b1a:	1cc4      	adds	r4, r0, #3
 8008b1c:	f024 0403 	bic.w	r4, r4, #3
 8008b20:	42a0      	cmp	r0, r4
 8008b22:	d007      	beq.n	8008b34 <sbrk_aligned+0x38>
 8008b24:	1a21      	subs	r1, r4, r0
 8008b26:	4628      	mov	r0, r5
 8008b28:	f000 f9e2 	bl	8008ef0 <_sbrk_r>
 8008b2c:	3001      	adds	r0, #1
 8008b2e:	d101      	bne.n	8008b34 <sbrk_aligned+0x38>
 8008b30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008b34:	4620      	mov	r0, r4
 8008b36:	bd70      	pop	{r4, r5, r6, pc}
 8008b38:	200002f0 	.word	0x200002f0

08008b3c <_malloc_r>:
 8008b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b40:	1ccd      	adds	r5, r1, #3
 8008b42:	f025 0503 	bic.w	r5, r5, #3
 8008b46:	3508      	adds	r5, #8
 8008b48:	2d0c      	cmp	r5, #12
 8008b4a:	bf38      	it	cc
 8008b4c:	250c      	movcc	r5, #12
 8008b4e:	2d00      	cmp	r5, #0
 8008b50:	4607      	mov	r7, r0
 8008b52:	db01      	blt.n	8008b58 <_malloc_r+0x1c>
 8008b54:	42a9      	cmp	r1, r5
 8008b56:	d905      	bls.n	8008b64 <_malloc_r+0x28>
 8008b58:	230c      	movs	r3, #12
 8008b5a:	603b      	str	r3, [r7, #0]
 8008b5c:	2600      	movs	r6, #0
 8008b5e:	4630      	mov	r0, r6
 8008b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b64:	4e2e      	ldr	r6, [pc, #184]	; (8008c20 <_malloc_r+0xe4>)
 8008b66:	f000 fad7 	bl	8009118 <__malloc_lock>
 8008b6a:	6833      	ldr	r3, [r6, #0]
 8008b6c:	461c      	mov	r4, r3
 8008b6e:	bb34      	cbnz	r4, 8008bbe <_malloc_r+0x82>
 8008b70:	4629      	mov	r1, r5
 8008b72:	4638      	mov	r0, r7
 8008b74:	f7ff ffc2 	bl	8008afc <sbrk_aligned>
 8008b78:	1c43      	adds	r3, r0, #1
 8008b7a:	4604      	mov	r4, r0
 8008b7c:	d14d      	bne.n	8008c1a <_malloc_r+0xde>
 8008b7e:	6834      	ldr	r4, [r6, #0]
 8008b80:	4626      	mov	r6, r4
 8008b82:	2e00      	cmp	r6, #0
 8008b84:	d140      	bne.n	8008c08 <_malloc_r+0xcc>
 8008b86:	6823      	ldr	r3, [r4, #0]
 8008b88:	4631      	mov	r1, r6
 8008b8a:	4638      	mov	r0, r7
 8008b8c:	eb04 0803 	add.w	r8, r4, r3
 8008b90:	f000 f9ae 	bl	8008ef0 <_sbrk_r>
 8008b94:	4580      	cmp	r8, r0
 8008b96:	d13a      	bne.n	8008c0e <_malloc_r+0xd2>
 8008b98:	6821      	ldr	r1, [r4, #0]
 8008b9a:	3503      	adds	r5, #3
 8008b9c:	1a6d      	subs	r5, r5, r1
 8008b9e:	f025 0503 	bic.w	r5, r5, #3
 8008ba2:	3508      	adds	r5, #8
 8008ba4:	2d0c      	cmp	r5, #12
 8008ba6:	bf38      	it	cc
 8008ba8:	250c      	movcc	r5, #12
 8008baa:	4629      	mov	r1, r5
 8008bac:	4638      	mov	r0, r7
 8008bae:	f7ff ffa5 	bl	8008afc <sbrk_aligned>
 8008bb2:	3001      	adds	r0, #1
 8008bb4:	d02b      	beq.n	8008c0e <_malloc_r+0xd2>
 8008bb6:	6823      	ldr	r3, [r4, #0]
 8008bb8:	442b      	add	r3, r5
 8008bba:	6023      	str	r3, [r4, #0]
 8008bbc:	e00e      	b.n	8008bdc <_malloc_r+0xa0>
 8008bbe:	6822      	ldr	r2, [r4, #0]
 8008bc0:	1b52      	subs	r2, r2, r5
 8008bc2:	d41e      	bmi.n	8008c02 <_malloc_r+0xc6>
 8008bc4:	2a0b      	cmp	r2, #11
 8008bc6:	d916      	bls.n	8008bf6 <_malloc_r+0xba>
 8008bc8:	1961      	adds	r1, r4, r5
 8008bca:	42a3      	cmp	r3, r4
 8008bcc:	6025      	str	r5, [r4, #0]
 8008bce:	bf18      	it	ne
 8008bd0:	6059      	strne	r1, [r3, #4]
 8008bd2:	6863      	ldr	r3, [r4, #4]
 8008bd4:	bf08      	it	eq
 8008bd6:	6031      	streq	r1, [r6, #0]
 8008bd8:	5162      	str	r2, [r4, r5]
 8008bda:	604b      	str	r3, [r1, #4]
 8008bdc:	4638      	mov	r0, r7
 8008bde:	f104 060b 	add.w	r6, r4, #11
 8008be2:	f000 fa9f 	bl	8009124 <__malloc_unlock>
 8008be6:	f026 0607 	bic.w	r6, r6, #7
 8008bea:	1d23      	adds	r3, r4, #4
 8008bec:	1af2      	subs	r2, r6, r3
 8008bee:	d0b6      	beq.n	8008b5e <_malloc_r+0x22>
 8008bf0:	1b9b      	subs	r3, r3, r6
 8008bf2:	50a3      	str	r3, [r4, r2]
 8008bf4:	e7b3      	b.n	8008b5e <_malloc_r+0x22>
 8008bf6:	6862      	ldr	r2, [r4, #4]
 8008bf8:	42a3      	cmp	r3, r4
 8008bfa:	bf0c      	ite	eq
 8008bfc:	6032      	streq	r2, [r6, #0]
 8008bfe:	605a      	strne	r2, [r3, #4]
 8008c00:	e7ec      	b.n	8008bdc <_malloc_r+0xa0>
 8008c02:	4623      	mov	r3, r4
 8008c04:	6864      	ldr	r4, [r4, #4]
 8008c06:	e7b2      	b.n	8008b6e <_malloc_r+0x32>
 8008c08:	4634      	mov	r4, r6
 8008c0a:	6876      	ldr	r6, [r6, #4]
 8008c0c:	e7b9      	b.n	8008b82 <_malloc_r+0x46>
 8008c0e:	230c      	movs	r3, #12
 8008c10:	603b      	str	r3, [r7, #0]
 8008c12:	4638      	mov	r0, r7
 8008c14:	f000 fa86 	bl	8009124 <__malloc_unlock>
 8008c18:	e7a1      	b.n	8008b5e <_malloc_r+0x22>
 8008c1a:	6025      	str	r5, [r4, #0]
 8008c1c:	e7de      	b.n	8008bdc <_malloc_r+0xa0>
 8008c1e:	bf00      	nop
 8008c20:	200002ec 	.word	0x200002ec

08008c24 <__ssputs_r>:
 8008c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c28:	688e      	ldr	r6, [r1, #8]
 8008c2a:	429e      	cmp	r6, r3
 8008c2c:	4682      	mov	sl, r0
 8008c2e:	460c      	mov	r4, r1
 8008c30:	4690      	mov	r8, r2
 8008c32:	461f      	mov	r7, r3
 8008c34:	d838      	bhi.n	8008ca8 <__ssputs_r+0x84>
 8008c36:	898a      	ldrh	r2, [r1, #12]
 8008c38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c3c:	d032      	beq.n	8008ca4 <__ssputs_r+0x80>
 8008c3e:	6825      	ldr	r5, [r4, #0]
 8008c40:	6909      	ldr	r1, [r1, #16]
 8008c42:	eba5 0901 	sub.w	r9, r5, r1
 8008c46:	6965      	ldr	r5, [r4, #20]
 8008c48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c50:	3301      	adds	r3, #1
 8008c52:	444b      	add	r3, r9
 8008c54:	106d      	asrs	r5, r5, #1
 8008c56:	429d      	cmp	r5, r3
 8008c58:	bf38      	it	cc
 8008c5a:	461d      	movcc	r5, r3
 8008c5c:	0553      	lsls	r3, r2, #21
 8008c5e:	d531      	bpl.n	8008cc4 <__ssputs_r+0xa0>
 8008c60:	4629      	mov	r1, r5
 8008c62:	f7ff ff6b 	bl	8008b3c <_malloc_r>
 8008c66:	4606      	mov	r6, r0
 8008c68:	b950      	cbnz	r0, 8008c80 <__ssputs_r+0x5c>
 8008c6a:	230c      	movs	r3, #12
 8008c6c:	f8ca 3000 	str.w	r3, [sl]
 8008c70:	89a3      	ldrh	r3, [r4, #12]
 8008c72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c76:	81a3      	strh	r3, [r4, #12]
 8008c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c80:	6921      	ldr	r1, [r4, #16]
 8008c82:	464a      	mov	r2, r9
 8008c84:	f7fb ff22 	bl	8004acc <memcpy>
 8008c88:	89a3      	ldrh	r3, [r4, #12]
 8008c8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c92:	81a3      	strh	r3, [r4, #12]
 8008c94:	6126      	str	r6, [r4, #16]
 8008c96:	6165      	str	r5, [r4, #20]
 8008c98:	444e      	add	r6, r9
 8008c9a:	eba5 0509 	sub.w	r5, r5, r9
 8008c9e:	6026      	str	r6, [r4, #0]
 8008ca0:	60a5      	str	r5, [r4, #8]
 8008ca2:	463e      	mov	r6, r7
 8008ca4:	42be      	cmp	r6, r7
 8008ca6:	d900      	bls.n	8008caa <__ssputs_r+0x86>
 8008ca8:	463e      	mov	r6, r7
 8008caa:	6820      	ldr	r0, [r4, #0]
 8008cac:	4632      	mov	r2, r6
 8008cae:	4641      	mov	r1, r8
 8008cb0:	f000 fa18 	bl	80090e4 <memmove>
 8008cb4:	68a3      	ldr	r3, [r4, #8]
 8008cb6:	1b9b      	subs	r3, r3, r6
 8008cb8:	60a3      	str	r3, [r4, #8]
 8008cba:	6823      	ldr	r3, [r4, #0]
 8008cbc:	4433      	add	r3, r6
 8008cbe:	6023      	str	r3, [r4, #0]
 8008cc0:	2000      	movs	r0, #0
 8008cc2:	e7db      	b.n	8008c7c <__ssputs_r+0x58>
 8008cc4:	462a      	mov	r2, r5
 8008cc6:	f000 fa33 	bl	8009130 <_realloc_r>
 8008cca:	4606      	mov	r6, r0
 8008ccc:	2800      	cmp	r0, #0
 8008cce:	d1e1      	bne.n	8008c94 <__ssputs_r+0x70>
 8008cd0:	6921      	ldr	r1, [r4, #16]
 8008cd2:	4650      	mov	r0, sl
 8008cd4:	f7ff fec6 	bl	8008a64 <_free_r>
 8008cd8:	e7c7      	b.n	8008c6a <__ssputs_r+0x46>
	...

08008cdc <_svfiprintf_r>:
 8008cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce0:	4698      	mov	r8, r3
 8008ce2:	898b      	ldrh	r3, [r1, #12]
 8008ce4:	061b      	lsls	r3, r3, #24
 8008ce6:	b09d      	sub	sp, #116	; 0x74
 8008ce8:	4607      	mov	r7, r0
 8008cea:	460d      	mov	r5, r1
 8008cec:	4614      	mov	r4, r2
 8008cee:	d50e      	bpl.n	8008d0e <_svfiprintf_r+0x32>
 8008cf0:	690b      	ldr	r3, [r1, #16]
 8008cf2:	b963      	cbnz	r3, 8008d0e <_svfiprintf_r+0x32>
 8008cf4:	2140      	movs	r1, #64	; 0x40
 8008cf6:	f7ff ff21 	bl	8008b3c <_malloc_r>
 8008cfa:	6028      	str	r0, [r5, #0]
 8008cfc:	6128      	str	r0, [r5, #16]
 8008cfe:	b920      	cbnz	r0, 8008d0a <_svfiprintf_r+0x2e>
 8008d00:	230c      	movs	r3, #12
 8008d02:	603b      	str	r3, [r7, #0]
 8008d04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d08:	e0d1      	b.n	8008eae <_svfiprintf_r+0x1d2>
 8008d0a:	2340      	movs	r3, #64	; 0x40
 8008d0c:	616b      	str	r3, [r5, #20]
 8008d0e:	2300      	movs	r3, #0
 8008d10:	9309      	str	r3, [sp, #36]	; 0x24
 8008d12:	2320      	movs	r3, #32
 8008d14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d18:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d1c:	2330      	movs	r3, #48	; 0x30
 8008d1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008ec8 <_svfiprintf_r+0x1ec>
 8008d22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d26:	f04f 0901 	mov.w	r9, #1
 8008d2a:	4623      	mov	r3, r4
 8008d2c:	469a      	mov	sl, r3
 8008d2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d32:	b10a      	cbz	r2, 8008d38 <_svfiprintf_r+0x5c>
 8008d34:	2a25      	cmp	r2, #37	; 0x25
 8008d36:	d1f9      	bne.n	8008d2c <_svfiprintf_r+0x50>
 8008d38:	ebba 0b04 	subs.w	fp, sl, r4
 8008d3c:	d00b      	beq.n	8008d56 <_svfiprintf_r+0x7a>
 8008d3e:	465b      	mov	r3, fp
 8008d40:	4622      	mov	r2, r4
 8008d42:	4629      	mov	r1, r5
 8008d44:	4638      	mov	r0, r7
 8008d46:	f7ff ff6d 	bl	8008c24 <__ssputs_r>
 8008d4a:	3001      	adds	r0, #1
 8008d4c:	f000 80aa 	beq.w	8008ea4 <_svfiprintf_r+0x1c8>
 8008d50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d52:	445a      	add	r2, fp
 8008d54:	9209      	str	r2, [sp, #36]	; 0x24
 8008d56:	f89a 3000 	ldrb.w	r3, [sl]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	f000 80a2 	beq.w	8008ea4 <_svfiprintf_r+0x1c8>
 8008d60:	2300      	movs	r3, #0
 8008d62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d6a:	f10a 0a01 	add.w	sl, sl, #1
 8008d6e:	9304      	str	r3, [sp, #16]
 8008d70:	9307      	str	r3, [sp, #28]
 8008d72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d76:	931a      	str	r3, [sp, #104]	; 0x68
 8008d78:	4654      	mov	r4, sl
 8008d7a:	2205      	movs	r2, #5
 8008d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d80:	4851      	ldr	r0, [pc, #324]	; (8008ec8 <_svfiprintf_r+0x1ec>)
 8008d82:	f7f7 fa3d 	bl	8000200 <memchr>
 8008d86:	9a04      	ldr	r2, [sp, #16]
 8008d88:	b9d8      	cbnz	r0, 8008dc2 <_svfiprintf_r+0xe6>
 8008d8a:	06d0      	lsls	r0, r2, #27
 8008d8c:	bf44      	itt	mi
 8008d8e:	2320      	movmi	r3, #32
 8008d90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d94:	0711      	lsls	r1, r2, #28
 8008d96:	bf44      	itt	mi
 8008d98:	232b      	movmi	r3, #43	; 0x2b
 8008d9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d9e:	f89a 3000 	ldrb.w	r3, [sl]
 8008da2:	2b2a      	cmp	r3, #42	; 0x2a
 8008da4:	d015      	beq.n	8008dd2 <_svfiprintf_r+0xf6>
 8008da6:	9a07      	ldr	r2, [sp, #28]
 8008da8:	4654      	mov	r4, sl
 8008daa:	2000      	movs	r0, #0
 8008dac:	f04f 0c0a 	mov.w	ip, #10
 8008db0:	4621      	mov	r1, r4
 8008db2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008db6:	3b30      	subs	r3, #48	; 0x30
 8008db8:	2b09      	cmp	r3, #9
 8008dba:	d94e      	bls.n	8008e5a <_svfiprintf_r+0x17e>
 8008dbc:	b1b0      	cbz	r0, 8008dec <_svfiprintf_r+0x110>
 8008dbe:	9207      	str	r2, [sp, #28]
 8008dc0:	e014      	b.n	8008dec <_svfiprintf_r+0x110>
 8008dc2:	eba0 0308 	sub.w	r3, r0, r8
 8008dc6:	fa09 f303 	lsl.w	r3, r9, r3
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	9304      	str	r3, [sp, #16]
 8008dce:	46a2      	mov	sl, r4
 8008dd0:	e7d2      	b.n	8008d78 <_svfiprintf_r+0x9c>
 8008dd2:	9b03      	ldr	r3, [sp, #12]
 8008dd4:	1d19      	adds	r1, r3, #4
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	9103      	str	r1, [sp, #12]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	bfbb      	ittet	lt
 8008dde:	425b      	neglt	r3, r3
 8008de0:	f042 0202 	orrlt.w	r2, r2, #2
 8008de4:	9307      	strge	r3, [sp, #28]
 8008de6:	9307      	strlt	r3, [sp, #28]
 8008de8:	bfb8      	it	lt
 8008dea:	9204      	strlt	r2, [sp, #16]
 8008dec:	7823      	ldrb	r3, [r4, #0]
 8008dee:	2b2e      	cmp	r3, #46	; 0x2e
 8008df0:	d10c      	bne.n	8008e0c <_svfiprintf_r+0x130>
 8008df2:	7863      	ldrb	r3, [r4, #1]
 8008df4:	2b2a      	cmp	r3, #42	; 0x2a
 8008df6:	d135      	bne.n	8008e64 <_svfiprintf_r+0x188>
 8008df8:	9b03      	ldr	r3, [sp, #12]
 8008dfa:	1d1a      	adds	r2, r3, #4
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	9203      	str	r2, [sp, #12]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	bfb8      	it	lt
 8008e04:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008e08:	3402      	adds	r4, #2
 8008e0a:	9305      	str	r3, [sp, #20]
 8008e0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008ed8 <_svfiprintf_r+0x1fc>
 8008e10:	7821      	ldrb	r1, [r4, #0]
 8008e12:	2203      	movs	r2, #3
 8008e14:	4650      	mov	r0, sl
 8008e16:	f7f7 f9f3 	bl	8000200 <memchr>
 8008e1a:	b140      	cbz	r0, 8008e2e <_svfiprintf_r+0x152>
 8008e1c:	2340      	movs	r3, #64	; 0x40
 8008e1e:	eba0 000a 	sub.w	r0, r0, sl
 8008e22:	fa03 f000 	lsl.w	r0, r3, r0
 8008e26:	9b04      	ldr	r3, [sp, #16]
 8008e28:	4303      	orrs	r3, r0
 8008e2a:	3401      	adds	r4, #1
 8008e2c:	9304      	str	r3, [sp, #16]
 8008e2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e32:	4826      	ldr	r0, [pc, #152]	; (8008ecc <_svfiprintf_r+0x1f0>)
 8008e34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e38:	2206      	movs	r2, #6
 8008e3a:	f7f7 f9e1 	bl	8000200 <memchr>
 8008e3e:	2800      	cmp	r0, #0
 8008e40:	d038      	beq.n	8008eb4 <_svfiprintf_r+0x1d8>
 8008e42:	4b23      	ldr	r3, [pc, #140]	; (8008ed0 <_svfiprintf_r+0x1f4>)
 8008e44:	bb1b      	cbnz	r3, 8008e8e <_svfiprintf_r+0x1b2>
 8008e46:	9b03      	ldr	r3, [sp, #12]
 8008e48:	3307      	adds	r3, #7
 8008e4a:	f023 0307 	bic.w	r3, r3, #7
 8008e4e:	3308      	adds	r3, #8
 8008e50:	9303      	str	r3, [sp, #12]
 8008e52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e54:	4433      	add	r3, r6
 8008e56:	9309      	str	r3, [sp, #36]	; 0x24
 8008e58:	e767      	b.n	8008d2a <_svfiprintf_r+0x4e>
 8008e5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e5e:	460c      	mov	r4, r1
 8008e60:	2001      	movs	r0, #1
 8008e62:	e7a5      	b.n	8008db0 <_svfiprintf_r+0xd4>
 8008e64:	2300      	movs	r3, #0
 8008e66:	3401      	adds	r4, #1
 8008e68:	9305      	str	r3, [sp, #20]
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	f04f 0c0a 	mov.w	ip, #10
 8008e70:	4620      	mov	r0, r4
 8008e72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e76:	3a30      	subs	r2, #48	; 0x30
 8008e78:	2a09      	cmp	r2, #9
 8008e7a:	d903      	bls.n	8008e84 <_svfiprintf_r+0x1a8>
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d0c5      	beq.n	8008e0c <_svfiprintf_r+0x130>
 8008e80:	9105      	str	r1, [sp, #20]
 8008e82:	e7c3      	b.n	8008e0c <_svfiprintf_r+0x130>
 8008e84:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e88:	4604      	mov	r4, r0
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e7f0      	b.n	8008e70 <_svfiprintf_r+0x194>
 8008e8e:	ab03      	add	r3, sp, #12
 8008e90:	9300      	str	r3, [sp, #0]
 8008e92:	462a      	mov	r2, r5
 8008e94:	4b0f      	ldr	r3, [pc, #60]	; (8008ed4 <_svfiprintf_r+0x1f8>)
 8008e96:	a904      	add	r1, sp, #16
 8008e98:	4638      	mov	r0, r7
 8008e9a:	f7fb fecd 	bl	8004c38 <_printf_float>
 8008e9e:	1c42      	adds	r2, r0, #1
 8008ea0:	4606      	mov	r6, r0
 8008ea2:	d1d6      	bne.n	8008e52 <_svfiprintf_r+0x176>
 8008ea4:	89ab      	ldrh	r3, [r5, #12]
 8008ea6:	065b      	lsls	r3, r3, #25
 8008ea8:	f53f af2c 	bmi.w	8008d04 <_svfiprintf_r+0x28>
 8008eac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008eae:	b01d      	add	sp, #116	; 0x74
 8008eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eb4:	ab03      	add	r3, sp, #12
 8008eb6:	9300      	str	r3, [sp, #0]
 8008eb8:	462a      	mov	r2, r5
 8008eba:	4b06      	ldr	r3, [pc, #24]	; (8008ed4 <_svfiprintf_r+0x1f8>)
 8008ebc:	a904      	add	r1, sp, #16
 8008ebe:	4638      	mov	r0, r7
 8008ec0:	f7fc f95e 	bl	8005180 <_printf_i>
 8008ec4:	e7eb      	b.n	8008e9e <_svfiprintf_r+0x1c2>
 8008ec6:	bf00      	nop
 8008ec8:	08009b9c 	.word	0x08009b9c
 8008ecc:	08009ba6 	.word	0x08009ba6
 8008ed0:	08004c39 	.word	0x08004c39
 8008ed4:	08008c25 	.word	0x08008c25
 8008ed8:	08009ba2 	.word	0x08009ba2
 8008edc:	00000000 	.word	0x00000000

08008ee0 <nan>:
 8008ee0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008ee8 <nan+0x8>
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	00000000 	.word	0x00000000
 8008eec:	7ff80000 	.word	0x7ff80000

08008ef0 <_sbrk_r>:
 8008ef0:	b538      	push	{r3, r4, r5, lr}
 8008ef2:	4d06      	ldr	r5, [pc, #24]	; (8008f0c <_sbrk_r+0x1c>)
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	4604      	mov	r4, r0
 8008ef8:	4608      	mov	r0, r1
 8008efa:	602b      	str	r3, [r5, #0]
 8008efc:	f7f8 ff68 	bl	8001dd0 <_sbrk>
 8008f00:	1c43      	adds	r3, r0, #1
 8008f02:	d102      	bne.n	8008f0a <_sbrk_r+0x1a>
 8008f04:	682b      	ldr	r3, [r5, #0]
 8008f06:	b103      	cbz	r3, 8008f0a <_sbrk_r+0x1a>
 8008f08:	6023      	str	r3, [r4, #0]
 8008f0a:	bd38      	pop	{r3, r4, r5, pc}
 8008f0c:	200002f4 	.word	0x200002f4

08008f10 <__sread>:
 8008f10:	b510      	push	{r4, lr}
 8008f12:	460c      	mov	r4, r1
 8008f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f18:	f000 fa92 	bl	8009440 <_read_r>
 8008f1c:	2800      	cmp	r0, #0
 8008f1e:	bfab      	itete	ge
 8008f20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f22:	89a3      	ldrhlt	r3, [r4, #12]
 8008f24:	181b      	addge	r3, r3, r0
 8008f26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f2a:	bfac      	ite	ge
 8008f2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008f2e:	81a3      	strhlt	r3, [r4, #12]
 8008f30:	bd10      	pop	{r4, pc}

08008f32 <__swrite>:
 8008f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f36:	461f      	mov	r7, r3
 8008f38:	898b      	ldrh	r3, [r1, #12]
 8008f3a:	05db      	lsls	r3, r3, #23
 8008f3c:	4605      	mov	r5, r0
 8008f3e:	460c      	mov	r4, r1
 8008f40:	4616      	mov	r6, r2
 8008f42:	d505      	bpl.n	8008f50 <__swrite+0x1e>
 8008f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f48:	2302      	movs	r3, #2
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f000 f8b8 	bl	80090c0 <_lseek_r>
 8008f50:	89a3      	ldrh	r3, [r4, #12]
 8008f52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f5a:	81a3      	strh	r3, [r4, #12]
 8008f5c:	4632      	mov	r2, r6
 8008f5e:	463b      	mov	r3, r7
 8008f60:	4628      	mov	r0, r5
 8008f62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f66:	f000 b837 	b.w	8008fd8 <_write_r>

08008f6a <__sseek>:
 8008f6a:	b510      	push	{r4, lr}
 8008f6c:	460c      	mov	r4, r1
 8008f6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f72:	f000 f8a5 	bl	80090c0 <_lseek_r>
 8008f76:	1c43      	adds	r3, r0, #1
 8008f78:	89a3      	ldrh	r3, [r4, #12]
 8008f7a:	bf15      	itete	ne
 8008f7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008f7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f86:	81a3      	strheq	r3, [r4, #12]
 8008f88:	bf18      	it	ne
 8008f8a:	81a3      	strhne	r3, [r4, #12]
 8008f8c:	bd10      	pop	{r4, pc}

08008f8e <__sclose>:
 8008f8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f92:	f000 b851 	b.w	8009038 <_close_r>

08008f96 <strncmp>:
 8008f96:	b510      	push	{r4, lr}
 8008f98:	b17a      	cbz	r2, 8008fba <strncmp+0x24>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	3901      	subs	r1, #1
 8008f9e:	1884      	adds	r4, r0, r2
 8008fa0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008fa4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008fa8:	4290      	cmp	r0, r2
 8008faa:	d101      	bne.n	8008fb0 <strncmp+0x1a>
 8008fac:	42a3      	cmp	r3, r4
 8008fae:	d101      	bne.n	8008fb4 <strncmp+0x1e>
 8008fb0:	1a80      	subs	r0, r0, r2
 8008fb2:	bd10      	pop	{r4, pc}
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	d1f3      	bne.n	8008fa0 <strncmp+0xa>
 8008fb8:	e7fa      	b.n	8008fb0 <strncmp+0x1a>
 8008fba:	4610      	mov	r0, r2
 8008fbc:	e7f9      	b.n	8008fb2 <strncmp+0x1c>

08008fbe <__ascii_wctomb>:
 8008fbe:	b149      	cbz	r1, 8008fd4 <__ascii_wctomb+0x16>
 8008fc0:	2aff      	cmp	r2, #255	; 0xff
 8008fc2:	bf85      	ittet	hi
 8008fc4:	238a      	movhi	r3, #138	; 0x8a
 8008fc6:	6003      	strhi	r3, [r0, #0]
 8008fc8:	700a      	strbls	r2, [r1, #0]
 8008fca:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008fce:	bf98      	it	ls
 8008fd0:	2001      	movls	r0, #1
 8008fd2:	4770      	bx	lr
 8008fd4:	4608      	mov	r0, r1
 8008fd6:	4770      	bx	lr

08008fd8 <_write_r>:
 8008fd8:	b538      	push	{r3, r4, r5, lr}
 8008fda:	4d07      	ldr	r5, [pc, #28]	; (8008ff8 <_write_r+0x20>)
 8008fdc:	4604      	mov	r4, r0
 8008fde:	4608      	mov	r0, r1
 8008fe0:	4611      	mov	r1, r2
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	602a      	str	r2, [r5, #0]
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	f7f8 fea1 	bl	8001d2e <_write>
 8008fec:	1c43      	adds	r3, r0, #1
 8008fee:	d102      	bne.n	8008ff6 <_write_r+0x1e>
 8008ff0:	682b      	ldr	r3, [r5, #0]
 8008ff2:	b103      	cbz	r3, 8008ff6 <_write_r+0x1e>
 8008ff4:	6023      	str	r3, [r4, #0]
 8008ff6:	bd38      	pop	{r3, r4, r5, pc}
 8008ff8:	200002f4 	.word	0x200002f4

08008ffc <__assert_func>:
 8008ffc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ffe:	4614      	mov	r4, r2
 8009000:	461a      	mov	r2, r3
 8009002:	4b09      	ldr	r3, [pc, #36]	; (8009028 <__assert_func+0x2c>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4605      	mov	r5, r0
 8009008:	68d8      	ldr	r0, [r3, #12]
 800900a:	b14c      	cbz	r4, 8009020 <__assert_func+0x24>
 800900c:	4b07      	ldr	r3, [pc, #28]	; (800902c <__assert_func+0x30>)
 800900e:	9100      	str	r1, [sp, #0]
 8009010:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009014:	4906      	ldr	r1, [pc, #24]	; (8009030 <__assert_func+0x34>)
 8009016:	462b      	mov	r3, r5
 8009018:	f000 f81e 	bl	8009058 <fiprintf>
 800901c:	f000 fa22 	bl	8009464 <abort>
 8009020:	4b04      	ldr	r3, [pc, #16]	; (8009034 <__assert_func+0x38>)
 8009022:	461c      	mov	r4, r3
 8009024:	e7f3      	b.n	800900e <__assert_func+0x12>
 8009026:	bf00      	nop
 8009028:	20000010 	.word	0x20000010
 800902c:	08009bad 	.word	0x08009bad
 8009030:	08009bba 	.word	0x08009bba
 8009034:	08009be8 	.word	0x08009be8

08009038 <_close_r>:
 8009038:	b538      	push	{r3, r4, r5, lr}
 800903a:	4d06      	ldr	r5, [pc, #24]	; (8009054 <_close_r+0x1c>)
 800903c:	2300      	movs	r3, #0
 800903e:	4604      	mov	r4, r0
 8009040:	4608      	mov	r0, r1
 8009042:	602b      	str	r3, [r5, #0]
 8009044:	f7f8 fe8f 	bl	8001d66 <_close>
 8009048:	1c43      	adds	r3, r0, #1
 800904a:	d102      	bne.n	8009052 <_close_r+0x1a>
 800904c:	682b      	ldr	r3, [r5, #0]
 800904e:	b103      	cbz	r3, 8009052 <_close_r+0x1a>
 8009050:	6023      	str	r3, [r4, #0]
 8009052:	bd38      	pop	{r3, r4, r5, pc}
 8009054:	200002f4 	.word	0x200002f4

08009058 <fiprintf>:
 8009058:	b40e      	push	{r1, r2, r3}
 800905a:	b503      	push	{r0, r1, lr}
 800905c:	4601      	mov	r1, r0
 800905e:	ab03      	add	r3, sp, #12
 8009060:	4805      	ldr	r0, [pc, #20]	; (8009078 <fiprintf+0x20>)
 8009062:	f853 2b04 	ldr.w	r2, [r3], #4
 8009066:	6800      	ldr	r0, [r0, #0]
 8009068:	9301      	str	r3, [sp, #4]
 800906a:	f000 f8b9 	bl	80091e0 <_vfiprintf_r>
 800906e:	b002      	add	sp, #8
 8009070:	f85d eb04 	ldr.w	lr, [sp], #4
 8009074:	b003      	add	sp, #12
 8009076:	4770      	bx	lr
 8009078:	20000010 	.word	0x20000010

0800907c <_fstat_r>:
 800907c:	b538      	push	{r3, r4, r5, lr}
 800907e:	4d07      	ldr	r5, [pc, #28]	; (800909c <_fstat_r+0x20>)
 8009080:	2300      	movs	r3, #0
 8009082:	4604      	mov	r4, r0
 8009084:	4608      	mov	r0, r1
 8009086:	4611      	mov	r1, r2
 8009088:	602b      	str	r3, [r5, #0]
 800908a:	f7f8 fe78 	bl	8001d7e <_fstat>
 800908e:	1c43      	adds	r3, r0, #1
 8009090:	d102      	bne.n	8009098 <_fstat_r+0x1c>
 8009092:	682b      	ldr	r3, [r5, #0]
 8009094:	b103      	cbz	r3, 8009098 <_fstat_r+0x1c>
 8009096:	6023      	str	r3, [r4, #0]
 8009098:	bd38      	pop	{r3, r4, r5, pc}
 800909a:	bf00      	nop
 800909c:	200002f4 	.word	0x200002f4

080090a0 <_isatty_r>:
 80090a0:	b538      	push	{r3, r4, r5, lr}
 80090a2:	4d06      	ldr	r5, [pc, #24]	; (80090bc <_isatty_r+0x1c>)
 80090a4:	2300      	movs	r3, #0
 80090a6:	4604      	mov	r4, r0
 80090a8:	4608      	mov	r0, r1
 80090aa:	602b      	str	r3, [r5, #0]
 80090ac:	f7f8 fe77 	bl	8001d9e <_isatty>
 80090b0:	1c43      	adds	r3, r0, #1
 80090b2:	d102      	bne.n	80090ba <_isatty_r+0x1a>
 80090b4:	682b      	ldr	r3, [r5, #0]
 80090b6:	b103      	cbz	r3, 80090ba <_isatty_r+0x1a>
 80090b8:	6023      	str	r3, [r4, #0]
 80090ba:	bd38      	pop	{r3, r4, r5, pc}
 80090bc:	200002f4 	.word	0x200002f4

080090c0 <_lseek_r>:
 80090c0:	b538      	push	{r3, r4, r5, lr}
 80090c2:	4d07      	ldr	r5, [pc, #28]	; (80090e0 <_lseek_r+0x20>)
 80090c4:	4604      	mov	r4, r0
 80090c6:	4608      	mov	r0, r1
 80090c8:	4611      	mov	r1, r2
 80090ca:	2200      	movs	r2, #0
 80090cc:	602a      	str	r2, [r5, #0]
 80090ce:	461a      	mov	r2, r3
 80090d0:	f7f8 fe70 	bl	8001db4 <_lseek>
 80090d4:	1c43      	adds	r3, r0, #1
 80090d6:	d102      	bne.n	80090de <_lseek_r+0x1e>
 80090d8:	682b      	ldr	r3, [r5, #0]
 80090da:	b103      	cbz	r3, 80090de <_lseek_r+0x1e>
 80090dc:	6023      	str	r3, [r4, #0]
 80090de:	bd38      	pop	{r3, r4, r5, pc}
 80090e0:	200002f4 	.word	0x200002f4

080090e4 <memmove>:
 80090e4:	4288      	cmp	r0, r1
 80090e6:	b510      	push	{r4, lr}
 80090e8:	eb01 0402 	add.w	r4, r1, r2
 80090ec:	d902      	bls.n	80090f4 <memmove+0x10>
 80090ee:	4284      	cmp	r4, r0
 80090f0:	4623      	mov	r3, r4
 80090f2:	d807      	bhi.n	8009104 <memmove+0x20>
 80090f4:	1e43      	subs	r3, r0, #1
 80090f6:	42a1      	cmp	r1, r4
 80090f8:	d008      	beq.n	800910c <memmove+0x28>
 80090fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009102:	e7f8      	b.n	80090f6 <memmove+0x12>
 8009104:	4402      	add	r2, r0
 8009106:	4601      	mov	r1, r0
 8009108:	428a      	cmp	r2, r1
 800910a:	d100      	bne.n	800910e <memmove+0x2a>
 800910c:	bd10      	pop	{r4, pc}
 800910e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009112:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009116:	e7f7      	b.n	8009108 <memmove+0x24>

08009118 <__malloc_lock>:
 8009118:	4801      	ldr	r0, [pc, #4]	; (8009120 <__malloc_lock+0x8>)
 800911a:	f7fe bf4a 	b.w	8007fb2 <__retarget_lock_acquire_recursive>
 800911e:	bf00      	nop
 8009120:	200002e8 	.word	0x200002e8

08009124 <__malloc_unlock>:
 8009124:	4801      	ldr	r0, [pc, #4]	; (800912c <__malloc_unlock+0x8>)
 8009126:	f7fe bf45 	b.w	8007fb4 <__retarget_lock_release_recursive>
 800912a:	bf00      	nop
 800912c:	200002e8 	.word	0x200002e8

08009130 <_realloc_r>:
 8009130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009134:	4680      	mov	r8, r0
 8009136:	4614      	mov	r4, r2
 8009138:	460e      	mov	r6, r1
 800913a:	b921      	cbnz	r1, 8009146 <_realloc_r+0x16>
 800913c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009140:	4611      	mov	r1, r2
 8009142:	f7ff bcfb 	b.w	8008b3c <_malloc_r>
 8009146:	b92a      	cbnz	r2, 8009154 <_realloc_r+0x24>
 8009148:	f7ff fc8c 	bl	8008a64 <_free_r>
 800914c:	4625      	mov	r5, r4
 800914e:	4628      	mov	r0, r5
 8009150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009154:	f000 f98d 	bl	8009472 <_malloc_usable_size_r>
 8009158:	4284      	cmp	r4, r0
 800915a:	4607      	mov	r7, r0
 800915c:	d802      	bhi.n	8009164 <_realloc_r+0x34>
 800915e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009162:	d812      	bhi.n	800918a <_realloc_r+0x5a>
 8009164:	4621      	mov	r1, r4
 8009166:	4640      	mov	r0, r8
 8009168:	f7ff fce8 	bl	8008b3c <_malloc_r>
 800916c:	4605      	mov	r5, r0
 800916e:	2800      	cmp	r0, #0
 8009170:	d0ed      	beq.n	800914e <_realloc_r+0x1e>
 8009172:	42bc      	cmp	r4, r7
 8009174:	4622      	mov	r2, r4
 8009176:	4631      	mov	r1, r6
 8009178:	bf28      	it	cs
 800917a:	463a      	movcs	r2, r7
 800917c:	f7fb fca6 	bl	8004acc <memcpy>
 8009180:	4631      	mov	r1, r6
 8009182:	4640      	mov	r0, r8
 8009184:	f7ff fc6e 	bl	8008a64 <_free_r>
 8009188:	e7e1      	b.n	800914e <_realloc_r+0x1e>
 800918a:	4635      	mov	r5, r6
 800918c:	e7df      	b.n	800914e <_realloc_r+0x1e>

0800918e <__sfputc_r>:
 800918e:	6893      	ldr	r3, [r2, #8]
 8009190:	3b01      	subs	r3, #1
 8009192:	2b00      	cmp	r3, #0
 8009194:	b410      	push	{r4}
 8009196:	6093      	str	r3, [r2, #8]
 8009198:	da08      	bge.n	80091ac <__sfputc_r+0x1e>
 800919a:	6994      	ldr	r4, [r2, #24]
 800919c:	42a3      	cmp	r3, r4
 800919e:	db01      	blt.n	80091a4 <__sfputc_r+0x16>
 80091a0:	290a      	cmp	r1, #10
 80091a2:	d103      	bne.n	80091ac <__sfputc_r+0x1e>
 80091a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091a8:	f7fd ba9e 	b.w	80066e8 <__swbuf_r>
 80091ac:	6813      	ldr	r3, [r2, #0]
 80091ae:	1c58      	adds	r0, r3, #1
 80091b0:	6010      	str	r0, [r2, #0]
 80091b2:	7019      	strb	r1, [r3, #0]
 80091b4:	4608      	mov	r0, r1
 80091b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <__sfputs_r>:
 80091bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091be:	4606      	mov	r6, r0
 80091c0:	460f      	mov	r7, r1
 80091c2:	4614      	mov	r4, r2
 80091c4:	18d5      	adds	r5, r2, r3
 80091c6:	42ac      	cmp	r4, r5
 80091c8:	d101      	bne.n	80091ce <__sfputs_r+0x12>
 80091ca:	2000      	movs	r0, #0
 80091cc:	e007      	b.n	80091de <__sfputs_r+0x22>
 80091ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091d2:	463a      	mov	r2, r7
 80091d4:	4630      	mov	r0, r6
 80091d6:	f7ff ffda 	bl	800918e <__sfputc_r>
 80091da:	1c43      	adds	r3, r0, #1
 80091dc:	d1f3      	bne.n	80091c6 <__sfputs_r+0xa>
 80091de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080091e0 <_vfiprintf_r>:
 80091e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e4:	460d      	mov	r5, r1
 80091e6:	b09d      	sub	sp, #116	; 0x74
 80091e8:	4614      	mov	r4, r2
 80091ea:	4698      	mov	r8, r3
 80091ec:	4606      	mov	r6, r0
 80091ee:	b118      	cbz	r0, 80091f8 <_vfiprintf_r+0x18>
 80091f0:	6983      	ldr	r3, [r0, #24]
 80091f2:	b90b      	cbnz	r3, 80091f8 <_vfiprintf_r+0x18>
 80091f4:	f7fe facc 	bl	8007790 <__sinit>
 80091f8:	4b89      	ldr	r3, [pc, #548]	; (8009420 <_vfiprintf_r+0x240>)
 80091fa:	429d      	cmp	r5, r3
 80091fc:	d11b      	bne.n	8009236 <_vfiprintf_r+0x56>
 80091fe:	6875      	ldr	r5, [r6, #4]
 8009200:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009202:	07d9      	lsls	r1, r3, #31
 8009204:	d405      	bmi.n	8009212 <_vfiprintf_r+0x32>
 8009206:	89ab      	ldrh	r3, [r5, #12]
 8009208:	059a      	lsls	r2, r3, #22
 800920a:	d402      	bmi.n	8009212 <_vfiprintf_r+0x32>
 800920c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800920e:	f7fe fed0 	bl	8007fb2 <__retarget_lock_acquire_recursive>
 8009212:	89ab      	ldrh	r3, [r5, #12]
 8009214:	071b      	lsls	r3, r3, #28
 8009216:	d501      	bpl.n	800921c <_vfiprintf_r+0x3c>
 8009218:	692b      	ldr	r3, [r5, #16]
 800921a:	b9eb      	cbnz	r3, 8009258 <_vfiprintf_r+0x78>
 800921c:	4629      	mov	r1, r5
 800921e:	4630      	mov	r0, r6
 8009220:	f7fd fab4 	bl	800678c <__swsetup_r>
 8009224:	b1c0      	cbz	r0, 8009258 <_vfiprintf_r+0x78>
 8009226:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009228:	07dc      	lsls	r4, r3, #31
 800922a:	d50e      	bpl.n	800924a <_vfiprintf_r+0x6a>
 800922c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009230:	b01d      	add	sp, #116	; 0x74
 8009232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009236:	4b7b      	ldr	r3, [pc, #492]	; (8009424 <_vfiprintf_r+0x244>)
 8009238:	429d      	cmp	r5, r3
 800923a:	d101      	bne.n	8009240 <_vfiprintf_r+0x60>
 800923c:	68b5      	ldr	r5, [r6, #8]
 800923e:	e7df      	b.n	8009200 <_vfiprintf_r+0x20>
 8009240:	4b79      	ldr	r3, [pc, #484]	; (8009428 <_vfiprintf_r+0x248>)
 8009242:	429d      	cmp	r5, r3
 8009244:	bf08      	it	eq
 8009246:	68f5      	ldreq	r5, [r6, #12]
 8009248:	e7da      	b.n	8009200 <_vfiprintf_r+0x20>
 800924a:	89ab      	ldrh	r3, [r5, #12]
 800924c:	0598      	lsls	r0, r3, #22
 800924e:	d4ed      	bmi.n	800922c <_vfiprintf_r+0x4c>
 8009250:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009252:	f7fe feaf 	bl	8007fb4 <__retarget_lock_release_recursive>
 8009256:	e7e9      	b.n	800922c <_vfiprintf_r+0x4c>
 8009258:	2300      	movs	r3, #0
 800925a:	9309      	str	r3, [sp, #36]	; 0x24
 800925c:	2320      	movs	r3, #32
 800925e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009262:	f8cd 800c 	str.w	r8, [sp, #12]
 8009266:	2330      	movs	r3, #48	; 0x30
 8009268:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800942c <_vfiprintf_r+0x24c>
 800926c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009270:	f04f 0901 	mov.w	r9, #1
 8009274:	4623      	mov	r3, r4
 8009276:	469a      	mov	sl, r3
 8009278:	f813 2b01 	ldrb.w	r2, [r3], #1
 800927c:	b10a      	cbz	r2, 8009282 <_vfiprintf_r+0xa2>
 800927e:	2a25      	cmp	r2, #37	; 0x25
 8009280:	d1f9      	bne.n	8009276 <_vfiprintf_r+0x96>
 8009282:	ebba 0b04 	subs.w	fp, sl, r4
 8009286:	d00b      	beq.n	80092a0 <_vfiprintf_r+0xc0>
 8009288:	465b      	mov	r3, fp
 800928a:	4622      	mov	r2, r4
 800928c:	4629      	mov	r1, r5
 800928e:	4630      	mov	r0, r6
 8009290:	f7ff ff94 	bl	80091bc <__sfputs_r>
 8009294:	3001      	adds	r0, #1
 8009296:	f000 80aa 	beq.w	80093ee <_vfiprintf_r+0x20e>
 800929a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800929c:	445a      	add	r2, fp
 800929e:	9209      	str	r2, [sp, #36]	; 0x24
 80092a0:	f89a 3000 	ldrb.w	r3, [sl]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f000 80a2 	beq.w	80093ee <_vfiprintf_r+0x20e>
 80092aa:	2300      	movs	r3, #0
 80092ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80092b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092b4:	f10a 0a01 	add.w	sl, sl, #1
 80092b8:	9304      	str	r3, [sp, #16]
 80092ba:	9307      	str	r3, [sp, #28]
 80092bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092c0:	931a      	str	r3, [sp, #104]	; 0x68
 80092c2:	4654      	mov	r4, sl
 80092c4:	2205      	movs	r2, #5
 80092c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092ca:	4858      	ldr	r0, [pc, #352]	; (800942c <_vfiprintf_r+0x24c>)
 80092cc:	f7f6 ff98 	bl	8000200 <memchr>
 80092d0:	9a04      	ldr	r2, [sp, #16]
 80092d2:	b9d8      	cbnz	r0, 800930c <_vfiprintf_r+0x12c>
 80092d4:	06d1      	lsls	r1, r2, #27
 80092d6:	bf44      	itt	mi
 80092d8:	2320      	movmi	r3, #32
 80092da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092de:	0713      	lsls	r3, r2, #28
 80092e0:	bf44      	itt	mi
 80092e2:	232b      	movmi	r3, #43	; 0x2b
 80092e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092e8:	f89a 3000 	ldrb.w	r3, [sl]
 80092ec:	2b2a      	cmp	r3, #42	; 0x2a
 80092ee:	d015      	beq.n	800931c <_vfiprintf_r+0x13c>
 80092f0:	9a07      	ldr	r2, [sp, #28]
 80092f2:	4654      	mov	r4, sl
 80092f4:	2000      	movs	r0, #0
 80092f6:	f04f 0c0a 	mov.w	ip, #10
 80092fa:	4621      	mov	r1, r4
 80092fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009300:	3b30      	subs	r3, #48	; 0x30
 8009302:	2b09      	cmp	r3, #9
 8009304:	d94e      	bls.n	80093a4 <_vfiprintf_r+0x1c4>
 8009306:	b1b0      	cbz	r0, 8009336 <_vfiprintf_r+0x156>
 8009308:	9207      	str	r2, [sp, #28]
 800930a:	e014      	b.n	8009336 <_vfiprintf_r+0x156>
 800930c:	eba0 0308 	sub.w	r3, r0, r8
 8009310:	fa09 f303 	lsl.w	r3, r9, r3
 8009314:	4313      	orrs	r3, r2
 8009316:	9304      	str	r3, [sp, #16]
 8009318:	46a2      	mov	sl, r4
 800931a:	e7d2      	b.n	80092c2 <_vfiprintf_r+0xe2>
 800931c:	9b03      	ldr	r3, [sp, #12]
 800931e:	1d19      	adds	r1, r3, #4
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	9103      	str	r1, [sp, #12]
 8009324:	2b00      	cmp	r3, #0
 8009326:	bfbb      	ittet	lt
 8009328:	425b      	neglt	r3, r3
 800932a:	f042 0202 	orrlt.w	r2, r2, #2
 800932e:	9307      	strge	r3, [sp, #28]
 8009330:	9307      	strlt	r3, [sp, #28]
 8009332:	bfb8      	it	lt
 8009334:	9204      	strlt	r2, [sp, #16]
 8009336:	7823      	ldrb	r3, [r4, #0]
 8009338:	2b2e      	cmp	r3, #46	; 0x2e
 800933a:	d10c      	bne.n	8009356 <_vfiprintf_r+0x176>
 800933c:	7863      	ldrb	r3, [r4, #1]
 800933e:	2b2a      	cmp	r3, #42	; 0x2a
 8009340:	d135      	bne.n	80093ae <_vfiprintf_r+0x1ce>
 8009342:	9b03      	ldr	r3, [sp, #12]
 8009344:	1d1a      	adds	r2, r3, #4
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	9203      	str	r2, [sp, #12]
 800934a:	2b00      	cmp	r3, #0
 800934c:	bfb8      	it	lt
 800934e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009352:	3402      	adds	r4, #2
 8009354:	9305      	str	r3, [sp, #20]
 8009356:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800943c <_vfiprintf_r+0x25c>
 800935a:	7821      	ldrb	r1, [r4, #0]
 800935c:	2203      	movs	r2, #3
 800935e:	4650      	mov	r0, sl
 8009360:	f7f6 ff4e 	bl	8000200 <memchr>
 8009364:	b140      	cbz	r0, 8009378 <_vfiprintf_r+0x198>
 8009366:	2340      	movs	r3, #64	; 0x40
 8009368:	eba0 000a 	sub.w	r0, r0, sl
 800936c:	fa03 f000 	lsl.w	r0, r3, r0
 8009370:	9b04      	ldr	r3, [sp, #16]
 8009372:	4303      	orrs	r3, r0
 8009374:	3401      	adds	r4, #1
 8009376:	9304      	str	r3, [sp, #16]
 8009378:	f814 1b01 	ldrb.w	r1, [r4], #1
 800937c:	482c      	ldr	r0, [pc, #176]	; (8009430 <_vfiprintf_r+0x250>)
 800937e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009382:	2206      	movs	r2, #6
 8009384:	f7f6 ff3c 	bl	8000200 <memchr>
 8009388:	2800      	cmp	r0, #0
 800938a:	d03f      	beq.n	800940c <_vfiprintf_r+0x22c>
 800938c:	4b29      	ldr	r3, [pc, #164]	; (8009434 <_vfiprintf_r+0x254>)
 800938e:	bb1b      	cbnz	r3, 80093d8 <_vfiprintf_r+0x1f8>
 8009390:	9b03      	ldr	r3, [sp, #12]
 8009392:	3307      	adds	r3, #7
 8009394:	f023 0307 	bic.w	r3, r3, #7
 8009398:	3308      	adds	r3, #8
 800939a:	9303      	str	r3, [sp, #12]
 800939c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800939e:	443b      	add	r3, r7
 80093a0:	9309      	str	r3, [sp, #36]	; 0x24
 80093a2:	e767      	b.n	8009274 <_vfiprintf_r+0x94>
 80093a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80093a8:	460c      	mov	r4, r1
 80093aa:	2001      	movs	r0, #1
 80093ac:	e7a5      	b.n	80092fa <_vfiprintf_r+0x11a>
 80093ae:	2300      	movs	r3, #0
 80093b0:	3401      	adds	r4, #1
 80093b2:	9305      	str	r3, [sp, #20]
 80093b4:	4619      	mov	r1, r3
 80093b6:	f04f 0c0a 	mov.w	ip, #10
 80093ba:	4620      	mov	r0, r4
 80093bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093c0:	3a30      	subs	r2, #48	; 0x30
 80093c2:	2a09      	cmp	r2, #9
 80093c4:	d903      	bls.n	80093ce <_vfiprintf_r+0x1ee>
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d0c5      	beq.n	8009356 <_vfiprintf_r+0x176>
 80093ca:	9105      	str	r1, [sp, #20]
 80093cc:	e7c3      	b.n	8009356 <_vfiprintf_r+0x176>
 80093ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80093d2:	4604      	mov	r4, r0
 80093d4:	2301      	movs	r3, #1
 80093d6:	e7f0      	b.n	80093ba <_vfiprintf_r+0x1da>
 80093d8:	ab03      	add	r3, sp, #12
 80093da:	9300      	str	r3, [sp, #0]
 80093dc:	462a      	mov	r2, r5
 80093de:	4b16      	ldr	r3, [pc, #88]	; (8009438 <_vfiprintf_r+0x258>)
 80093e0:	a904      	add	r1, sp, #16
 80093e2:	4630      	mov	r0, r6
 80093e4:	f7fb fc28 	bl	8004c38 <_printf_float>
 80093e8:	4607      	mov	r7, r0
 80093ea:	1c78      	adds	r0, r7, #1
 80093ec:	d1d6      	bne.n	800939c <_vfiprintf_r+0x1bc>
 80093ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093f0:	07d9      	lsls	r1, r3, #31
 80093f2:	d405      	bmi.n	8009400 <_vfiprintf_r+0x220>
 80093f4:	89ab      	ldrh	r3, [r5, #12]
 80093f6:	059a      	lsls	r2, r3, #22
 80093f8:	d402      	bmi.n	8009400 <_vfiprintf_r+0x220>
 80093fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093fc:	f7fe fdda 	bl	8007fb4 <__retarget_lock_release_recursive>
 8009400:	89ab      	ldrh	r3, [r5, #12]
 8009402:	065b      	lsls	r3, r3, #25
 8009404:	f53f af12 	bmi.w	800922c <_vfiprintf_r+0x4c>
 8009408:	9809      	ldr	r0, [sp, #36]	; 0x24
 800940a:	e711      	b.n	8009230 <_vfiprintf_r+0x50>
 800940c:	ab03      	add	r3, sp, #12
 800940e:	9300      	str	r3, [sp, #0]
 8009410:	462a      	mov	r2, r5
 8009412:	4b09      	ldr	r3, [pc, #36]	; (8009438 <_vfiprintf_r+0x258>)
 8009414:	a904      	add	r1, sp, #16
 8009416:	4630      	mov	r0, r6
 8009418:	f7fb feb2 	bl	8005180 <_printf_i>
 800941c:	e7e4      	b.n	80093e8 <_vfiprintf_r+0x208>
 800941e:	bf00      	nop
 8009420:	08009984 	.word	0x08009984
 8009424:	080099a4 	.word	0x080099a4
 8009428:	08009964 	.word	0x08009964
 800942c:	08009b9c 	.word	0x08009b9c
 8009430:	08009ba6 	.word	0x08009ba6
 8009434:	08004c39 	.word	0x08004c39
 8009438:	080091bd 	.word	0x080091bd
 800943c:	08009ba2 	.word	0x08009ba2

08009440 <_read_r>:
 8009440:	b538      	push	{r3, r4, r5, lr}
 8009442:	4d07      	ldr	r5, [pc, #28]	; (8009460 <_read_r+0x20>)
 8009444:	4604      	mov	r4, r0
 8009446:	4608      	mov	r0, r1
 8009448:	4611      	mov	r1, r2
 800944a:	2200      	movs	r2, #0
 800944c:	602a      	str	r2, [r5, #0]
 800944e:	461a      	mov	r2, r3
 8009450:	f7f8 fc50 	bl	8001cf4 <_read>
 8009454:	1c43      	adds	r3, r0, #1
 8009456:	d102      	bne.n	800945e <_read_r+0x1e>
 8009458:	682b      	ldr	r3, [r5, #0]
 800945a:	b103      	cbz	r3, 800945e <_read_r+0x1e>
 800945c:	6023      	str	r3, [r4, #0]
 800945e:	bd38      	pop	{r3, r4, r5, pc}
 8009460:	200002f4 	.word	0x200002f4

08009464 <abort>:
 8009464:	b508      	push	{r3, lr}
 8009466:	2006      	movs	r0, #6
 8009468:	f000 f834 	bl	80094d4 <raise>
 800946c:	2001      	movs	r0, #1
 800946e:	f7f8 fc37 	bl	8001ce0 <_exit>

08009472 <_malloc_usable_size_r>:
 8009472:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009476:	1f18      	subs	r0, r3, #4
 8009478:	2b00      	cmp	r3, #0
 800947a:	bfbc      	itt	lt
 800947c:	580b      	ldrlt	r3, [r1, r0]
 800947e:	18c0      	addlt	r0, r0, r3
 8009480:	4770      	bx	lr

08009482 <_raise_r>:
 8009482:	291f      	cmp	r1, #31
 8009484:	b538      	push	{r3, r4, r5, lr}
 8009486:	4604      	mov	r4, r0
 8009488:	460d      	mov	r5, r1
 800948a:	d904      	bls.n	8009496 <_raise_r+0x14>
 800948c:	2316      	movs	r3, #22
 800948e:	6003      	str	r3, [r0, #0]
 8009490:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009494:	bd38      	pop	{r3, r4, r5, pc}
 8009496:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009498:	b112      	cbz	r2, 80094a0 <_raise_r+0x1e>
 800949a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800949e:	b94b      	cbnz	r3, 80094b4 <_raise_r+0x32>
 80094a0:	4620      	mov	r0, r4
 80094a2:	f000 f831 	bl	8009508 <_getpid_r>
 80094a6:	462a      	mov	r2, r5
 80094a8:	4601      	mov	r1, r0
 80094aa:	4620      	mov	r0, r4
 80094ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094b0:	f000 b818 	b.w	80094e4 <_kill_r>
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d00a      	beq.n	80094ce <_raise_r+0x4c>
 80094b8:	1c59      	adds	r1, r3, #1
 80094ba:	d103      	bne.n	80094c4 <_raise_r+0x42>
 80094bc:	2316      	movs	r3, #22
 80094be:	6003      	str	r3, [r0, #0]
 80094c0:	2001      	movs	r0, #1
 80094c2:	e7e7      	b.n	8009494 <_raise_r+0x12>
 80094c4:	2400      	movs	r4, #0
 80094c6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80094ca:	4628      	mov	r0, r5
 80094cc:	4798      	blx	r3
 80094ce:	2000      	movs	r0, #0
 80094d0:	e7e0      	b.n	8009494 <_raise_r+0x12>
	...

080094d4 <raise>:
 80094d4:	4b02      	ldr	r3, [pc, #8]	; (80094e0 <raise+0xc>)
 80094d6:	4601      	mov	r1, r0
 80094d8:	6818      	ldr	r0, [r3, #0]
 80094da:	f7ff bfd2 	b.w	8009482 <_raise_r>
 80094de:	bf00      	nop
 80094e0:	20000010 	.word	0x20000010

080094e4 <_kill_r>:
 80094e4:	b538      	push	{r3, r4, r5, lr}
 80094e6:	4d07      	ldr	r5, [pc, #28]	; (8009504 <_kill_r+0x20>)
 80094e8:	2300      	movs	r3, #0
 80094ea:	4604      	mov	r4, r0
 80094ec:	4608      	mov	r0, r1
 80094ee:	4611      	mov	r1, r2
 80094f0:	602b      	str	r3, [r5, #0]
 80094f2:	f7f8 fbe5 	bl	8001cc0 <_kill>
 80094f6:	1c43      	adds	r3, r0, #1
 80094f8:	d102      	bne.n	8009500 <_kill_r+0x1c>
 80094fa:	682b      	ldr	r3, [r5, #0]
 80094fc:	b103      	cbz	r3, 8009500 <_kill_r+0x1c>
 80094fe:	6023      	str	r3, [r4, #0]
 8009500:	bd38      	pop	{r3, r4, r5, pc}
 8009502:	bf00      	nop
 8009504:	200002f4 	.word	0x200002f4

08009508 <_getpid_r>:
 8009508:	f7f8 bbd2 	b.w	8001cb0 <_getpid>

0800950c <_init>:
 800950c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800950e:	bf00      	nop
 8009510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009512:	bc08      	pop	{r3}
 8009514:	469e      	mov	lr, r3
 8009516:	4770      	bx	lr

08009518 <_fini>:
 8009518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800951a:	bf00      	nop
 800951c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800951e:	bc08      	pop	{r3}
 8009520:	469e      	mov	lr, r3
 8009522:	4770      	bx	lr
