
Tesis_SPS30.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abdc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000954  0800ad90  0800ad90  0001ad90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6e4  0800b6e4  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6e4  0800b6e4  0001b6e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6ec  0800b6ec  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6ec  0800b6ec  0001b6ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6f0  0800b6f0  0001b6f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800b6f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020210  2**0
                  CONTENTS
 10 .bss          00001d94  20000210  20000210  00020210  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001fa4  20001fa4  00020210  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012a74  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000313f  00000000  00000000  00032cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e40  00000000  00000000  00035df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ce8  00000000  00000000  00036c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025ce7  00000000  00000000  00037920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000166a4  00000000  00000000  0005d607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dcba6  00000000  00000000  00073cab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00150851  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e0c  00000000  00000000  001508a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000210 	.word	0x20000210
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ad74 	.word	0x0800ad74

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000214 	.word	0x20000214
 80001ec:	0800ad74 	.word	0x0800ad74

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <buffer_circular_agregar>:
 * @brief Añade una medición al buffer circular especificado
 *
 * @param buffer Buffer donde almacenar la medición
 * @param medicion Medición a almacenar
 */
static void buffer_circular_agregar(BufferCircular* buffer, const MedicionMP* medicion) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
    uint32_t indice;

    if (buffer->cantidad < buffer->capacidad) {
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	68da      	ldr	r2, [r3, #12]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	429a      	cmp	r2, r3
 800102c:	d212      	bcs.n	8001054 <buffer_circular_agregar+0x3c>
        // El buffer aún no está lleno
        indice = (buffer->inicio + buffer->cantidad) % buffer->capacidad;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	689a      	ldr	r2, [r3, #8]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	4413      	add	r3, r2
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	6852      	ldr	r2, [r2, #4]
 800103c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001040:	fb01 f202 	mul.w	r2, r1, r2
 8001044:	1a9b      	subs	r3, r3, r2
 8001046:	60fb      	str	r3, [r7, #12]
        buffer->cantidad++;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	1c5a      	adds	r2, r3, #1
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	e00e      	b.n	8001072 <buffer_circular_agregar+0x5a>
    } else {
        // El buffer está lleno, sobrescribir el elemento más antiguo
        indice = buffer->inicio;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	60fb      	str	r3, [r7, #12]
        buffer->inicio = (buffer->inicio + 1) % buffer->capacidad;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	3301      	adds	r3, #1
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	6852      	ldr	r2, [r2, #4]
 8001064:	fbb3 f1f2 	udiv	r1, r3, r2
 8001068:	fb01 f202 	mul.w	r2, r1, r2
 800106c:	1a9a      	subs	r2, r3, r2
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	609a      	str	r2, [r3, #8]
    }

    // Copiar la medición al buffer
    memcpy(&buffer->datos[indice], medicion, sizeof(MedicionMP));
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6819      	ldr	r1, [r3, #0]
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	4613      	mov	r3, r2
 800107a:	011b      	lsls	r3, r3, #4
 800107c:	1a9b      	subs	r3, r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	440b      	add	r3, r1
 8001082:	223c      	movs	r2, #60	; 0x3c
 8001084:	6839      	ldr	r1, [r7, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f005 f94c 	bl	8006324 <memcpy>
}
 800108c:	bf00      	nop
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <data_logger_init>:

/* === Public function implementation ========================================================== */

bool data_logger_init(void) {
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
    // Inicializar buffers
    memset(buffer_alta_frec, 0, sizeof(buffer_alta_frec));
 8001098:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800109c:	2100      	movs	r1, #0
 800109e:	4812      	ldr	r0, [pc, #72]	; (80010e8 <data_logger_init+0x54>)
 80010a0:	f005 f94e 	bl	8006340 <memset>
    memset(buffer_horario, 0, sizeof(buffer_horario));
 80010a4:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 80010a8:	2100      	movs	r1, #0
 80010aa:	4810      	ldr	r0, [pc, #64]	; (80010ec <data_logger_init+0x58>)
 80010ac:	f005 f948 	bl	8006340 <memset>
    memset(buffer_diario, 0, sizeof(buffer_diario));
 80010b0:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80010b4:	2100      	movs	r1, #0
 80010b6:	480e      	ldr	r0, [pc, #56]	; (80010f0 <data_logger_init+0x5c>)
 80010b8:	f005 f942 	bl	8006340 <memset>

    buffer_alta_frecuencia.inicio = 0;
 80010bc:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <data_logger_init+0x60>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
    buffer_alta_frecuencia.cantidad = 0;
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <data_logger_init+0x60>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	60da      	str	r2, [r3, #12]

    buffer_hora.inicio = 0;
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <data_logger_init+0x64>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
    buffer_hora.cantidad = 0;
 80010ce:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <data_logger_init+0x64>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	60da      	str	r2, [r3, #12]

    buffer_dia.inicio = 0;
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <data_logger_init+0x68>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
    buffer_dia.cantidad = 0;
 80010da:	4b08      	ldr	r3, [pc, #32]	; (80010fc <data_logger_init+0x68>)
 80010dc:	2200      	movs	r2, #0
 80010de:	60da      	str	r2, [r3, #12]

    return true;
 80010e0:	2301      	movs	r3, #1
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	2000022c 	.word	0x2000022c
 80010ec:	2000103c 	.word	0x2000103c
 80010f0:	200015dc 	.word	0x200015dc
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000010 	.word	0x20000010
 80010fc:	20000020 	.word	0x20000020

08001100 <data_logger_store_measurement>:

bool data_logger_store_measurement(uint8_t sensor_id, ConcentracionesPM valores,
                                   float temperatura, float humedad) {
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b0a1      	sub	sp, #132	; 0x84
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	eeb0 6a40 	vmov.f32	s12, s0
 800110c:	eef0 6a60 	vmov.f32	s13, s1
 8001110:	eeb0 7a41 	vmov.f32	s14, s2
 8001114:	eef0 7a61 	vmov.f32	s15, s3
 8001118:	ed87 2a02 	vstr	s4, [r7, #8]
 800111c:	edc7 2a01 	vstr	s5, [r7, #4]
 8001120:	77fb      	strb	r3, [r7, #31]
 8001122:	ed87 6a03 	vstr	s12, [r7, #12]
 8001126:	edc7 6a04 	vstr	s13, [r7, #16]
 800112a:	ed87 7a05 	vstr	s14, [r7, #20]
 800112e:	edc7 7a06 	vstr	s15, [r7, #24]
    char timestamp[32];
    MedicionMP nueva_medicion;

    // Obtener timestamp actual
    time_rtc_GetFormattedDateTime(timestamp, sizeof(timestamp));
 8001132:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001136:	2120      	movs	r1, #32
 8001138:	4618      	mov	r0, r3
 800113a:	f000 ffcb 	bl	80020d4 <time_rtc_GetFormattedDateTime>

    // Completar estructura de medición
    strcpy(nueva_medicion.timestamp, timestamp);
 800113e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f006 f84b 	bl	80071e4 <strcpy>
    nueva_medicion.sensor_id = sensor_id;
 800114e:	7ffb      	ldrb	r3, [r7, #31]
 8001150:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    nueva_medicion.valores = valores;
 8001154:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800115e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    nueva_medicion.temperatura = temperatura;
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	65bb      	str	r3, [r7, #88]	; 0x58
    nueva_medicion.humedad = humedad;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	65fb      	str	r3, [r7, #92]	; 0x5c

    // Almacenar en buffer de alta frecuencia
    buffer_circular_agregar(&buffer_alta_frecuencia, &nueva_medicion);
 800116a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116e:	4619      	mov	r1, r3
 8001170:	4803      	ldr	r0, [pc, #12]	; (8001180 <data_logger_store_measurement+0x80>)
 8001172:	f7ff ff51 	bl	8001018 <buffer_circular_agregar>

    // Actualizar buffers de hora y día según corresponda
    // (implementación pendiente)

    return true;
 8001176:	2301      	movs	r3, #1
}
 8001178:	4618      	mov	r0, r3
 800117a:	3784      	adds	r7, #132	; 0x84
 800117c:	46bd      	mov	sp, r7
 800117e:	bd90      	pop	{r4, r7, pc}
 8001180:	20000000 	.word	0x20000000

08001184 <data_logger_get_average_pm25>:

float data_logger_get_average_pm25(uint8_t sensor_id, uint32_t num_mediciones) {
 8001184:	b480      	push	{r7}
 8001186:	b087      	sub	sp, #28
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	71fb      	strb	r3, [r7, #7]
    float suma = 0.0f;
 8001190:	f04f 0300 	mov.w	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
    uint32_t contador = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]

    // Limitar la cantidad de mediciones a usar
    if (num_mediciones > buffer_alta_frecuencia.cantidad) {
 800119a:	4b30      	ldr	r3, [pc, #192]	; (800125c <data_logger_get_average_pm25+0xd8>)
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d902      	bls.n	80011aa <data_logger_get_average_pm25+0x26>
        num_mediciones = buffer_alta_frecuencia.cantidad;
 80011a4:	4b2d      	ldr	r3, [pc, #180]	; (800125c <data_logger_get_average_pm25+0xd8>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	603b      	str	r3, [r7, #0]
    }

    // Si no hay mediciones, retornar 0
    if (num_mediciones == 0) {
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d102      	bne.n	80011b6 <data_logger_get_average_pm25+0x32>
        return 0.0f;
 80011b0:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8001260 <data_logger_get_average_pm25+0xdc>
 80011b4:	e04b      	b.n	800124e <data_logger_get_average_pm25+0xca>
    }

    // Calcular promedio de las últimas 'num_mediciones'
    for (uint32_t i = 0; i < num_mediciones; i++) {
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	e035      	b.n	8001228 <data_logger_get_average_pm25+0xa4>
        uint32_t indice = (buffer_alta_frecuencia.inicio +
 80011bc:	4b27      	ldr	r3, [pc, #156]	; (800125c <data_logger_get_average_pm25+0xd8>)
 80011be:	689a      	ldr	r2, [r3, #8]
                         buffer_alta_frecuencia.cantidad - i - 1) %
 80011c0:	4b26      	ldr	r3, [pc, #152]	; (800125c <data_logger_get_average_pm25+0xd8>)
 80011c2:	68db      	ldr	r3, [r3, #12]
        uint32_t indice = (buffer_alta_frecuencia.inicio +
 80011c4:	441a      	add	r2, r3
                         buffer_alta_frecuencia.cantidad - i - 1) %
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	3b01      	subs	r3, #1
                         buffer_alta_frecuencia.capacidad;
 80011cc:	4a23      	ldr	r2, [pc, #140]	; (800125c <data_logger_get_average_pm25+0xd8>)
 80011ce:	6852      	ldr	r2, [r2, #4]
        uint32_t indice = (buffer_alta_frecuencia.inicio +
 80011d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80011d4:	fb01 f202 	mul.w	r2, r1, r2
 80011d8:	1a9b      	subs	r3, r3, r2
 80011da:	60bb      	str	r3, [r7, #8]

        // Filtrar por sensor_id si es necesario
        if (sensor_id == 0 || buffer_alta_frecuencia.datos[indice].sensor_id == sensor_id) {
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d00c      	beq.n	80011fc <data_logger_get_average_pm25+0x78>
 80011e2:	4b1e      	ldr	r3, [pc, #120]	; (800125c <data_logger_get_average_pm25+0xd8>)
 80011e4:	6819      	ldr	r1, [r3, #0]
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	4613      	mov	r3, r2
 80011ea:	011b      	lsls	r3, r3, #4
 80011ec:	1a9b      	subs	r3, r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	440b      	add	r3, r1
 80011f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011f6:	79fa      	ldrb	r2, [r7, #7]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d112      	bne.n	8001222 <data_logger_get_average_pm25+0x9e>
            suma += buffer_alta_frecuencia.datos[indice].valores.pm2_5;
 80011fc:	4b17      	ldr	r3, [pc, #92]	; (800125c <data_logger_get_average_pm25+0xd8>)
 80011fe:	6819      	ldr	r1, [r3, #0]
 8001200:	68ba      	ldr	r2, [r7, #8]
 8001202:	4613      	mov	r3, r2
 8001204:	011b      	lsls	r3, r3, #4
 8001206:	1a9b      	subs	r3, r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	440b      	add	r3, r1
 800120c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001210:	ed97 7a05 	vldr	s14, [r7, #20]
 8001214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001218:	edc7 7a05 	vstr	s15, [r7, #20]
            contador++;
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	3301      	adds	r3, #1
 8001220:	613b      	str	r3, [r7, #16]
    for (uint32_t i = 0; i < num_mediciones; i++) {
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	3301      	adds	r3, #1
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fa      	ldr	r2, [r7, #12]
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	429a      	cmp	r2, r3
 800122e:	d3c5      	bcc.n	80011bc <data_logger_get_average_pm25+0x38>
        }
    }

    // Retornar promedio o 0 si no hay datos
    return (contador > 0) ? (suma / contador) : 0.0f;
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d009      	beq.n	800124a <data_logger_get_average_pm25+0xc6>
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	ee07 3a90 	vmov	s15, r3
 800123c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001240:	edd7 6a05 	vldr	s13, [r7, #20]
 8001244:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001248:	e001      	b.n	800124e <data_logger_get_average_pm25+0xca>
 800124a:	eddf 7a05 	vldr	s15, [pc, #20]	; 8001260 <data_logger_get_average_pm25+0xdc>
}
 800124e:	eeb0 0a67 	vmov.f32	s0, s15
 8001252:	371c      	adds	r7, #28
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	20000000 	.word	0x20000000
 8001260:	00000000 	.word	0x00000000

08001264 <data_logger_print_summary>:

void data_logger_print_summary(UART_Printing* uart) {
 8001264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001266:	b0cd      	sub	sp, #308	; 0x134
 8001268:	af06      	add	r7, sp, #24
 800126a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800126e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001272:	6018      	str	r0, [r3, #0]
    char buffer[256];

    // Imprimir encabezado
    snprintf(buffer, sizeof(buffer),
 8001274:	4b4a      	ldr	r3, [pc, #296]	; (80013a0 <data_logger_print_summary+0x13c>)
 8001276:	68de      	ldr	r6, [r3, #12]
 8001278:	4b49      	ldr	r3, [pc, #292]	; (80013a0 <data_logger_print_summary+0x13c>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	4a49      	ldr	r2, [pc, #292]	; (80013a4 <data_logger_print_summary+0x140>)
 800127e:	68d2      	ldr	r2, [r2, #12]
 8001280:	4948      	ldr	r1, [pc, #288]	; (80013a4 <data_logger_print_summary+0x140>)
 8001282:	6849      	ldr	r1, [r1, #4]
 8001284:	4848      	ldr	r0, [pc, #288]	; (80013a8 <data_logger_print_summary+0x144>)
 8001286:	68c0      	ldr	r0, [r0, #12]
 8001288:	4c47      	ldr	r4, [pc, #284]	; (80013a8 <data_logger_print_summary+0x144>)
 800128a:	6864      	ldr	r4, [r4, #4]
 800128c:	f107 050c 	add.w	r5, r7, #12
 8001290:	9404      	str	r4, [sp, #16]
 8001292:	9003      	str	r0, [sp, #12]
 8001294:	9102      	str	r1, [sp, #8]
 8001296:	9201      	str	r2, [sp, #4]
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	4633      	mov	r3, r6
 800129c:	4a43      	ldr	r2, [pc, #268]	; (80013ac <data_logger_print_summary+0x148>)
 800129e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012a2:	4628      	mov	r0, r5
 80012a4:	f005 ff4a 	bl	800713c <sniprintf>
            "Buffer diario: %lu/%lu muestras\n",
            buffer_alta_frecuencia.cantidad, buffer_alta_frecuencia.capacidad,
            buffer_hora.cantidad, buffer_hora.capacidad,
            buffer_dia.cantidad, buffer_dia.capacidad);

    uart->print(uart, buffer);
 80012a8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80012ac:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f107 010c 	add.w	r1, r7, #12
 80012b8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80012bc:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 80012c0:	6810      	ldr	r0, [r2, #0]
 80012c2:	4798      	blx	r3

    // Imprimir últimas mediciones si hay datos
    if (buffer_alta_frecuencia.cantidad > 0) {
 80012c4:	4b36      	ldr	r3, [pc, #216]	; (80013a0 <data_logger_print_summary+0x13c>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d064      	beq.n	8001396 <data_logger_print_summary+0x132>
        uart->print(uart, "\nÚltimas 3 mediciones:\n");
 80012cc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80012d0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80012dc:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 80012e0:	4933      	ldr	r1, [pc, #204]	; (80013b0 <data_logger_print_summary+0x14c>)
 80012e2:	6810      	ldr	r0, [r2, #0]
 80012e4:	4798      	blx	r3

        for (uint32_t i = 0; i < 3 && i < buffer_alta_frecuencia.cantidad; i++) {
 80012e6:	2300      	movs	r3, #0
 80012e8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80012ec:	e049      	b.n	8001382 <data_logger_print_summary+0x11e>
            uint32_t indice = (buffer_alta_frecuencia.inicio +
 80012ee:	4b2c      	ldr	r3, [pc, #176]	; (80013a0 <data_logger_print_summary+0x13c>)
 80012f0:	689a      	ldr	r2, [r3, #8]
                             buffer_alta_frecuencia.cantidad - i - 1) %
 80012f2:	4b2b      	ldr	r3, [pc, #172]	; (80013a0 <data_logger_print_summary+0x13c>)
 80012f4:	68db      	ldr	r3, [r3, #12]
            uint32_t indice = (buffer_alta_frecuencia.inicio +
 80012f6:	441a      	add	r2, r3
                             buffer_alta_frecuencia.cantidad - i - 1) %
 80012f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	3b01      	subs	r3, #1
                             buffer_alta_frecuencia.capacidad;
 8001300:	4a27      	ldr	r2, [pc, #156]	; (80013a0 <data_logger_print_summary+0x13c>)
 8001302:	6852      	ldr	r2, [r2, #4]
            uint32_t indice = (buffer_alta_frecuencia.inicio +
 8001304:	fbb3 f1f2 	udiv	r1, r3, r2
 8001308:	fb01 f202 	mul.w	r2, r1, r2
 800130c:	1a9b      	subs	r3, r3, r2
 800130e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

            MedicionMP* medicion = &buffer_alta_frecuencia.datos[indice];
 8001312:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <data_logger_print_summary+0x13c>)
 8001314:	6819      	ldr	r1, [r3, #0]
 8001316:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800131a:	4613      	mov	r3, r2
 800131c:	011b      	lsls	r3, r3, #4
 800131e:	1a9b      	subs	r3, r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	440b      	add	r3, r1
 8001324:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

            snprintf(buffer, sizeof(buffer),
                    "[%s] Sensor %d: PM2.5=%.2f ug/m3\n",
                    medicion->timestamp,
 8001328:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
                    medicion->sensor_id,
 800132c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001330:	f893 3020 	ldrb.w	r3, [r3, #32]
            snprintf(buffer, sizeof(buffer),
 8001334:	461d      	mov	r5, r3
                    medicion->valores.pm2_5);
 8001336:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800133a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            snprintf(buffer, sizeof(buffer),
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f913 	bl	8000568 <__aeabi_f2d>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	f107 000c 	add.w	r0, r7, #12
 800134a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800134e:	9500      	str	r5, [sp, #0]
 8001350:	4623      	mov	r3, r4
 8001352:	4a18      	ldr	r2, [pc, #96]	; (80013b4 <data_logger_print_summary+0x150>)
 8001354:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001358:	f005 fef0 	bl	800713c <sniprintf>

            uart->print(uart, buffer);
 800135c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001360:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f107 010c 	add.w	r1, r7, #12
 800136c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001370:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8001374:	6810      	ldr	r0, [r2, #0]
 8001376:	4798      	blx	r3
        for (uint32_t i = 0; i < 3 && i < buffer_alta_frecuencia.cantidad; i++) {
 8001378:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800137c:	3301      	adds	r3, #1
 800137e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001386:	2b02      	cmp	r3, #2
 8001388:	d805      	bhi.n	8001396 <data_logger_print_summary+0x132>
 800138a:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <data_logger_print_summary+0x13c>)
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001392:	429a      	cmp	r2, r3
 8001394:	d3ab      	bcc.n	80012ee <data_logger_print_summary+0x8a>
        }
    }
}
 8001396:	bf00      	nop
 8001398:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800139c:	46bd      	mov	sp, r7
 800139e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a0:	20000000 	.word	0x20000000
 80013a4:	20000010 	.word	0x20000010
 80013a8:	20000020 	.word	0x20000020
 80013ac:	0800ad90 	.word	0x0800ad90
 80013b0:	0800ae24 	.word	0x0800ae24
 80013b4:	0800ae40 	.word	0x0800ae40

080013b8 <proceso_observador>:
#include "proceso_observador.h"
#include "time_rtc.h"
#include <stdio.h>

/* === Definición de funciones ============================================================= */
bool proceso_observador(SPS30* sensor, UART_Printing* uart, uint8_t sensor_id) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08c      	sub	sp, #48	; 0x30
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	4613      	mov	r3, r2
 80013c4:	71fb      	strb	r3, [r7, #7]
    // Obtener timestamp actual
    char datetime_buffer[32];
    time_rtc_GetFormattedDateTime(datetime_buffer, sizeof(datetime_buffer));
 80013c6:	f107 0310 	add.w	r3, r7, #16
 80013ca:	2120      	movs	r1, #32
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 fe81 	bl	80020d4 <time_rtc_GetFormattedDateTime>

    return proceso_observador_with_time(sensor, uart, sensor_id, datetime_buffer);
 80013d2:	f107 0310 	add.w	r3, r7, #16
 80013d6:	79fa      	ldrb	r2, [r7, #7]
 80013d8:	68b9      	ldr	r1, [r7, #8]
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f000 f806 	bl	80013ec <proceso_observador_with_time>
 80013e0:	4603      	mov	r3, r0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3730      	adds	r7, #48	; 0x30
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <proceso_observador_with_time>:

bool proceso_observador_with_time(SPS30* sensor, UART_Printing* uart, uint8_t sensor_id, const char* datetime_str) {
 80013ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013f0:	b0ed      	sub	sp, #436	; 0x1b4
 80013f2:	af0a      	add	r7, sp, #40	; 0x28
 80013f4:	f507 74c4 	add.w	r4, r7, #392	; 0x188
 80013f8:	f5a4 74be 	sub.w	r4, r4, #380	; 0x17c
 80013fc:	6020      	str	r0, [r4, #0]
 80013fe:	f507 70c4 	add.w	r0, r7, #392	; 0x188
 8001402:	f5a0 70c0 	sub.w	r0, r0, #384	; 0x180
 8001406:	6001      	str	r1, [r0, #0]
 8001408:	4611      	mov	r1, r2
 800140a:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 800140e:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8001412:	6013      	str	r3, [r2, #0]
 8001414:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001418:	f2a3 1381 	subw	r3, r3, #385	; 0x181
 800141c:	460a      	mov	r2, r1
 800141e:	701a      	strb	r2, [r3, #0]
    int reintentos = NUM_REINT;
 8001420:	2303      	movs	r3, #3
 8001422:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184

    while (reintentos--) {
 8001426:	e0ca      	b.n	80015be <proceso_observador_with_time+0x1d2>
        sensor->start_measurement(sensor);
 8001428:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800142c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	691b      	ldr	r3, [r3, #16]
 8001434:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8001438:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800143c:	6810      	ldr	r0, [r2, #0]
 800143e:	4798      	blx	r3
        HAL_Delay(HAL_DELAY_SIGUIENTE_MEDICION);
 8001440:	f241 3088 	movw	r0, #5000	; 0x1388
 8001444:	f001 fdd6 	bl	8002ff4 <HAL_Delay>

        ConcentracionesPM pm = sensor->get_concentrations(sensor);
 8001448:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800144c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001454:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8001458:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800145c:	6810      	ldr	r0, [r2, #0]
 800145e:	4798      	blx	r3
 8001460:	eeb0 6a40 	vmov.f32	s12, s0
 8001464:	eef0 6a60 	vmov.f32	s13, s1
 8001468:	eeb0 7a41 	vmov.f32	s14, s2
 800146c:	eef0 7a61 	vmov.f32	s15, s3
 8001470:	ed87 6a45 	vstr	s12, [r7, #276]	; 0x114
 8001474:	edc7 6a46 	vstr	s13, [r7, #280]	; 0x118
 8001478:	ed87 7a47 	vstr	s14, [r7, #284]	; 0x11c
 800147c:	edc7 7a48 	vstr	s15, [r7, #288]	; 0x120
        sensor->stop_measurement(sensor);
 8001480:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001484:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8001490:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001494:	6810      	ldr	r0, [r2, #0]
 8001496:	4798      	blx	r3

        if ((pm.pm1_0 > CONC_MIN_PM && pm.pm1_0 < CONC_MAX_PM) ||
 8001498:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 800149c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a4:	dd08      	ble.n	80014b8 <proceso_observador_with_time+0xcc>
 80014a6:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 80014aa:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 800161c <proceso_observador_with_time+0x230>
 80014ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b6:	d42f      	bmi.n	8001518 <proceso_observador_with_time+0x12c>
            (pm.pm2_5 > CONC_MIN_PM && pm.pm2_5 < CONC_MAX_PM) ||
 80014b8:	edd7 7a46 	vldr	s15, [r7, #280]	; 0x118
        if ((pm.pm1_0 > CONC_MIN_PM && pm.pm1_0 < CONC_MAX_PM) ||
 80014bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c4:	dd08      	ble.n	80014d8 <proceso_observador_with_time+0xec>
            (pm.pm2_5 > CONC_MIN_PM && pm.pm2_5 < CONC_MAX_PM) ||
 80014c6:	edd7 7a46 	vldr	s15, [r7, #280]	; 0x118
 80014ca:	ed9f 7a54 	vldr	s14, [pc, #336]	; 800161c <proceso_observador_with_time+0x230>
 80014ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d6:	d41f      	bmi.n	8001518 <proceso_observador_with_time+0x12c>
            (pm.pm4_0 > CONC_MIN_PM && pm.pm4_0 < CONC_MAX_PM) ||
 80014d8:	edd7 7a47 	vldr	s15, [r7, #284]	; 0x11c
            (pm.pm2_5 > CONC_MIN_PM && pm.pm2_5 < CONC_MAX_PM) ||
 80014dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e4:	dd08      	ble.n	80014f8 <proceso_observador_with_time+0x10c>
            (pm.pm4_0 > CONC_MIN_PM && pm.pm4_0 < CONC_MAX_PM) ||
 80014e6:	edd7 7a47 	vldr	s15, [r7, #284]	; 0x11c
 80014ea:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800161c <proceso_observador_with_time+0x230>
 80014ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f6:	d40f      	bmi.n	8001518 <proceso_observador_with_time+0x12c>
            (pm.pm10  > CONC_MIN_PM && pm.pm10  < CONC_MAX_PM)) {
 80014f8:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
            (pm.pm4_0 > CONC_MIN_PM && pm.pm4_0 < CONC_MAX_PM) ||
 80014fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001504:	dd4e      	ble.n	80015a4 <proceso_observador_with_time+0x1b8>
            (pm.pm10  > CONC_MIN_PM && pm.pm10  < CONC_MAX_PM)) {
 8001506:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 800150a:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800161c <proceso_observador_with_time+0x230>
 800150e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001516:	d545      	bpl.n	80015a4 <proceso_observador_with_time+0x1b8>

            // Formatear con timestamp
            char buffer[BUFFER_SIZE_MSG_PM_FORMAT];
            snprintf(buffer, sizeof(buffer), MSG_PM_FORMAT_WITH_TIME,
 8001518:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800151c:	f2a3 1381 	subw	r3, r3, #385	; 0x181
 8001520:	781e      	ldrb	r6, [r3, #0]
                     datetime_str, sensor_id, pm.pm1_0, pm.pm2_5, pm.pm4_0, pm.pm10);
 8001522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
            snprintf(buffer, sizeof(buffer), MSG_PM_FORMAT_WITH_TIME,
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff f81e 	bl	8000568 <__aeabi_f2d>
 800152c:	4604      	mov	r4, r0
 800152e:	460d      	mov	r5, r1
                     datetime_str, sensor_id, pm.pm1_0, pm.pm2_5, pm.pm4_0, pm.pm10);
 8001530:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
            snprintf(buffer, sizeof(buffer), MSG_PM_FORMAT_WITH_TIME,
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff f817 	bl	8000568 <__aeabi_f2d>
 800153a:	4680      	mov	r8, r0
 800153c:	4689      	mov	r9, r1
                     datetime_str, sensor_id, pm.pm1_0, pm.pm2_5, pm.pm4_0, pm.pm10);
 800153e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
            snprintf(buffer, sizeof(buffer), MSG_PM_FORMAT_WITH_TIME,
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff f810 	bl	8000568 <__aeabi_f2d>
 8001548:	4682      	mov	sl, r0
 800154a:	468b      	mov	fp, r1
                     datetime_str, sensor_id, pm.pm1_0, pm.pm2_5, pm.pm4_0, pm.pm10);
 800154c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
            snprintf(buffer, sizeof(buffer), MSG_PM_FORMAT_WITH_TIME,
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff f809 	bl	8000568 <__aeabi_f2d>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	f507 71c4 	add.w	r1, r7, #392	; 0x188
 800155e:	f5a1 71c4 	sub.w	r1, r1, #392	; 0x188
 8001562:	f107 0014 	add.w	r0, r7, #20
 8001566:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800156a:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800156e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001572:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001576:	9600      	str	r6, [sp, #0]
 8001578:	680b      	ldr	r3, [r1, #0]
 800157a:	4a29      	ldr	r2, [pc, #164]	; (8001620 <proceso_observador_with_time+0x234>)
 800157c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001580:	f005 fddc 	bl	800713c <sniprintf>
            uart->print(uart, buffer);
 8001584:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001588:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f107 0114 	add.w	r1, r7, #20
 8001594:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8001598:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800159c:	6810      	ldr	r0, [r2, #0]
 800159e:	4798      	blx	r3
            return true;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e034      	b.n	800160e <proceso_observador_with_time+0x222>
        }

        uart->print(uart, MSG_ERROR_REINT);
 80015a4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80015a8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 80015b4:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80015b8:	491a      	ldr	r1, [pc, #104]	; (8001624 <proceso_observador_with_time+0x238>)
 80015ba:	6810      	ldr	r0, [r2, #0]
 80015bc:	4798      	blx	r3
    while (reintentos--) {
 80015be:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80015c2:	1e5a      	subs	r2, r3, #1
 80015c4:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f47f af2d 	bne.w	8001428 <proceso_observador_with_time+0x3c>
    }

    // Error con timestamp
    char error_msg[BUFFER_SIZE_MSG_ERROR_FALLO];
    snprintf(error_msg, sizeof(error_msg), MSG_ERROR_FALLO, datetime_str, sensor_id);
 80015ce:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80015d2:	f2a3 1381 	subw	r3, r3, #385	; 0x181
 80015d6:	781a      	ldrb	r2, [r3, #0]
 80015d8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80015dc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80015e0:	f507 7092 	add.w	r0, r7, #292	; 0x124
 80015e4:	9200      	str	r2, [sp, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a0f      	ldr	r2, [pc, #60]	; (8001628 <proceso_observador_with_time+0x23c>)
 80015ea:	2160      	movs	r1, #96	; 0x60
 80015ec:	f005 fda6 	bl	800713c <sniprintf>
    uart->print(uart, error_msg);
 80015f0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80015f4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f507 7192 	add.w	r1, r7, #292	; 0x124
 8001600:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8001604:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001608:	6810      	ldr	r0, [r2, #0]
 800160a:	4798      	blx	r3
    return false;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	f507 77c6 	add.w	r7, r7, #396	; 0x18c
 8001614:	46bd      	mov	sp, r7
 8001616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800161a:	bf00      	nop
 800161c:	447a0000 	.word	0x447a0000
 8001620:	0800ae64 	.word	0x0800ae64
 8001624:	0800aeb8 	.word	0x0800aeb8
 8001628:	0800aef0 	.word	0x0800aef0

0800162c <DS1307_Init>:
/* === Private function implementation ========================================================= */
// No private functions

/* === Public function implementation ========================================================== */

void DS1307_Init(I2C_HandleTypeDef * hi2c) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
    _ds1307_ui2c = hi2c;
 8001634:	4a04      	ldr	r2, [pc, #16]	; (8001648 <DS1307_Init+0x1c>)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6013      	str	r3, [r2, #0]
    DS1307_SetClockHalt(0);
 800163a:	2000      	movs	r0, #0
 800163c:	f000 f806 	bl	800164c <DS1307_SetClockHalt>
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20001ce4 	.word	0x20001ce4

0800164c <DS1307_SetClockHalt>:

void DS1307_SetClockHalt(uint8_t halt) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
    uint8_t ch = (halt ? 1 << 7 : 0);
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <DS1307_SetClockHalt+0x14>
 800165c:	2380      	movs	r3, #128	; 0x80
 800165e:	e000      	b.n	8001662 <DS1307_SetClockHalt+0x16>
 8001660:	2300      	movs	r3, #0
 8001662:	73fb      	strb	r3, [r7, #15]
    uint8_t currentSeconds = DS1307_GetRegByte(DS1307_REG_SECOND);
 8001664:	2000      	movs	r0, #0
 8001666:	f000 f833 	bl	80016d0 <DS1307_GetRegByte>
 800166a:	4603      	mov	r3, r0
 800166c:	73bb      	strb	r3, [r7, #14]
    DS1307_SetRegByte(DS1307_REG_SECOND, ch | (currentSeconds & 0x7F));
 800166e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001676:	b25a      	sxtb	r2, r3
 8001678:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167c:	4313      	orrs	r3, r2
 800167e:	b25b      	sxtb	r3, r3
 8001680:	b2db      	uxtb	r3, r3
 8001682:	4619      	mov	r1, r3
 8001684:	2000      	movs	r0, #0
 8001686:	f000 f805 	bl	8001694 <DS1307_SetRegByte>
}
 800168a:	bf00      	nop
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <DS1307_SetRegByte>:
 * el protocolo de comunicación I2C.
 *
 * @param regAddr Dirección del registro en el DS1307 donde escribir.
 * @param val Valor a escribir en el registro, en el rango de 0 a 255.
 */
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af02      	add	r7, sp, #8
 800169a:	4603      	mov	r3, r0
 800169c:	460a      	mov	r2, r1
 800169e:	71fb      	strb	r3, [r7, #7]
 80016a0:	4613      	mov	r3, r2
 80016a2:	71bb      	strb	r3, [r7, #6]
    uint8_t bytes[2] = {regAddr, val};
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	733b      	strb	r3, [r7, #12]
 80016a8:	79bb      	ldrb	r3, [r7, #6]
 80016aa:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 80016ac:	4b07      	ldr	r3, [pc, #28]	; (80016cc <DS1307_SetRegByte+0x38>)
 80016ae:	6818      	ldr	r0, [r3, #0]
 80016b0:	f107 020c 	add.w	r2, r7, #12
 80016b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	2302      	movs	r3, #2
 80016bc:	21d0      	movs	r1, #208	; 0xd0
 80016be:	f002 f893 	bl	80037e8 <HAL_I2C_Master_Transmit>
}
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20001ce4 	.word	0x20001ce4

080016d0 <DS1307_GetRegByte>:
 * cumplir con el protocolo I2C.
 *
 * @param regAddr Dirección del registro del DS1307 a leer.
 * @return El byte almacenado en el registro especificado, en el rango de 0 a 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af02      	add	r7, sp, #8
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 80016da:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <DS1307_GetRegByte+0x40>)
 80016dc:	6818      	ldr	r0, [r3, #0]
 80016de:	1dfa      	adds	r2, r7, #7
 80016e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	2301      	movs	r3, #1
 80016e8:	21d0      	movs	r1, #208	; 0xd0
 80016ea:	f002 f87d 	bl	80037e8 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <DS1307_GetRegByte+0x40>)
 80016f0:	6818      	ldr	r0, [r3, #0]
 80016f2:	f107 020f 	add.w	r2, r7, #15
 80016f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	2301      	movs	r3, #1
 80016fe:	21d0      	movs	r1, #208	; 0xd0
 8001700:	f002 f970 	bl	80039e4 <HAL_I2C_Master_Receive>
    return val;
 8001704:	7bfb      	ldrb	r3, [r7, #15]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20001ce4 	.word	0x20001ce4

08001714 <DS1307_GetTime>:
    return (HAL_I2C_IsDeviceReady(&hi2c2, DS1307_ADDRESS << 1, 3, 100) == HAL_OK);
}



void DS1307_GetTime(DS1307_DateTime *dt) {
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
    dt->year = 2025;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f240 72e9 	movw	r2, #2025	; 0x7e9
 8001722:	801a      	strh	r2, [r3, #0]
    dt->month = 5;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2205      	movs	r2, #5
 8001728:	709a      	strb	r2, [r3, #2]
    dt->day = 10;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	220a      	movs	r2, #10
 800172e:	70da      	strb	r2, [r3, #3]
    dt->hours = 12;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	220c      	movs	r2, #12
 8001734:	711a      	strb	r2, [r3, #4]
    dt->minutes = 34;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2222      	movs	r2, #34	; 0x22
 800173a:	715a      	strb	r2, [r3, #5]
    dt->seconds = 56;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2238      	movs	r2, #56	; 0x38
 8001740:	719a      	strb	r2, [r3, #6]
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <SHDLC_LoadMyVector>:
 * @param DataFrameSize El tamaño total del arreglo DataFrame para evitar
 *        desbordamientos de búfer.
 * @return void
 */

void SHDLC_LoadMyVector(Shdlc_FrameMiso * frame, const uint8_t * DataFrame, size_t DataFrameSize) {
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
    if (frame == NULL || DataFrame == NULL || DataFrameSize < 5) {
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d005      	beq.n	800176e <SHDLC_LoadMyVector+0x1e>
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d002      	beq.n	800176e <SHDLC_LoadMyVector+0x1e>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b04      	cmp	r3, #4
 800176c:	d803      	bhi.n	8001776 <SHDLC_LoadMyVector+0x26>
        // Validación básica para asegurarnos de que los parámetros son válidos y DataFrame tiene el
        // tamaño mínimo esperado.
        printf("Datos no válidos para cargar en myVector.\n");
 800176e:	4811      	ldr	r0, [pc, #68]	; (80017b4 <SHDLC_LoadMyVector+0x64>)
 8001770:	f005 fcd6 	bl	8007120 <puts>
        return;
 8001774:	e01b      	b.n	80017ae <SHDLC_LoadMyVector+0x5e>
    }

    uint8_t dataLength = DataFrame[4]; // Longitud de los datos útiles.
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	791b      	ldrb	r3, [r3, #4]
 800177a:	75fb      	strb	r3, [r7, #23]

    if (dataLength > FRAME_DATA_VECTOR_SIZE_MISO || (4 + dataLength) > DataFrameSize) {
 800177c:	7dfb      	ldrb	r3, [r7, #23]
 800177e:	2b3c      	cmp	r3, #60	; 0x3c
 8001780:	d805      	bhi.n	800178e <SHDLC_LoadMyVector+0x3e>
 8001782:	7dfb      	ldrb	r3, [r7, #23]
 8001784:	3304      	adds	r3, #4
 8001786:	461a      	mov	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4293      	cmp	r3, r2
 800178c:	d203      	bcs.n	8001796 <SHDLC_LoadMyVector+0x46>
        // Asegúrate de que la longitud de los datos no excede el tamaño de myVector ni los límites
        // de DataFrame.
        printf("Longitud de los datos excede el tamaño permitido de myVector o los límites de "
 800178e:	480a      	ldr	r0, [pc, #40]	; (80017b8 <SHDLC_LoadMyVector+0x68>)
 8001790:	f005 fcc6 	bl	8007120 <puts>
               "DataFrame.\n");
        return;
 8001794:	e00b      	b.n	80017ae <SHDLC_LoadMyVector+0x5e>
    }

    // Copiar los datos útiles desde DataFrame a myVector en la estructura Shdlc_FrameMiso.
    memcpy(frame->myVector, &DataFrame[5], dataLength + 1);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	1cd8      	adds	r0, r3, #3
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	1d59      	adds	r1, r3, #5
 800179e:	7dfb      	ldrb	r3, [r7, #23]
 80017a0:	3301      	adds	r3, #1
 80017a2:	461a      	mov	r2, r3
 80017a4:	f004 fdbe 	bl	8006324 <memcpy>

    // Actualizar el campo 'lon' con la longitud de los datos copiados.
    frame->lon = dataLength;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	7dfa      	ldrb	r2, [r7, #23]
 80017ac:	709a      	strb	r2, [r3, #2]

    // Asume que podrías querer también inicializar otros campos aquí.
}
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	0800af34 	.word	0x0800af34
 80017b8:	0800af60 	.word	0x0800af60

080017bc <SHDLC_CalculateDataSize>:
 * @param inputSize Tamaño del arreglo de entrada.
 * @return int La longitud de los datos contenidos entre los dos delimitadores,
 *         o -1 si los delimitadores no se encuentran en la secuencia correcta.
 */

int SHDLC_CalculateDataSize(const uint8_t * input, size_t inputSize) {
 80017bc:	b480      	push	{r7}
 80017be:	b089      	sub	sp, #36	; 0x24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
    int start = -1;
 80017c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017ca:	61fb      	str	r3, [r7, #28]
    int end = -1;
 80017cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017d0:	61bb      	str	r3, [r7, #24]

    // Buscar el primer delimitador 0xE7.
    for (size_t i = 0; i < inputSize; ++i) {
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
 80017d6:	e00c      	b.n	80017f2 <SHDLC_CalculateDataSize+0x36>
        if (input[i] == 0x7E) {
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	4413      	add	r3, r2
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b7e      	cmp	r3, #126	; 0x7e
 80017e2:	d103      	bne.n	80017ec <SHDLC_CalculateDataSize+0x30>
            start = i + 1; // Comenzar después del primer 0xE7
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	3301      	adds	r3, #1
 80017e8:	61fb      	str	r3, [r7, #28]
            break;
 80017ea:	e006      	b.n	80017fa <SHDLC_CalculateDataSize+0x3e>
    for (size_t i = 0; i < inputSize; ++i) {
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	3301      	adds	r3, #1
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d3ee      	bcc.n	80017d8 <SHDLC_CalculateDataSize+0x1c>
        }
    }

    // Buscar el segundo delimitador 0xE7.
    for (size_t i = start; i < inputSize; ++i) {
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	e00b      	b.n	8001818 <SHDLC_CalculateDataSize+0x5c>
        if (input[i] == 0x7E) {
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	4413      	add	r3, r2
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b7e      	cmp	r3, #126	; 0x7e
 800180a:	d102      	bne.n	8001812 <SHDLC_CalculateDataSize+0x56>
            end = i;
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	61bb      	str	r3, [r7, #24]
            break;
 8001810:	e006      	b.n	8001820 <SHDLC_CalculateDataSize+0x64>
    for (size_t i = start; i < inputSize; ++i) {
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	3301      	adds	r3, #1
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d3ef      	bcc.n	8001800 <SHDLC_CalculateDataSize+0x44>
        }
    }

    // Verificar si se encontraron ambos delimitadores.
    if (start == -1 || end == -1 || start >= end) {
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001826:	d007      	beq.n	8001838 <SHDLC_CalculateDataSize+0x7c>
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800182e:	d003      	beq.n	8001838 <SHDLC_CalculateDataSize+0x7c>
 8001830:	69fa      	ldr	r2, [r7, #28]
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	429a      	cmp	r2, r3
 8001836:	db02      	blt.n	800183e <SHDLC_CalculateDataSize+0x82>
        return -1; // No se encontró la secuencia válida.
 8001838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800183c:	e004      	b.n	8001848 <SHDLC_CalculateDataSize+0x8c>
    }

    // Calcular la longitud de los datos a copiar y asegurarse de que no
    // exceda el buffer de salida.
    size_t dataLength = end - start;
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	60fb      	str	r3, [r7, #12]
    return dataLength;
 8001846:	68fb      	ldr	r3, [r7, #12]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3724      	adds	r7, #36	; 0x24
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <SHDLC_revertByteStuffing>:
 * @param stuffedSize Tamaño del arreglo de bytes con byte-stuffing.
 * @param originalData Puntero al arreglo de bytes donde se almacenarán los datos revertidos.
 * @return El tamaño del arreglo de bytes revertido.
 */
size_t SHDLC_revertByteStuffing(const uint8_t * stuffedData, size_t stuffedSize,
                                uint8_t * originalData) {
 8001854:	b480      	push	{r7}
 8001856:	b087      	sub	sp, #28
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
    size_t originalIndex = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < stuffedSize; ++i) {
 8001864:	2300      	movs	r3, #0
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	e04e      	b.n	8001908 <SHDLC_revertByteStuffing+0xb4>
        if (stuffedData[i] == 0x7D) { // Detecta el indicador de byte-stuffing
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	4413      	add	r3, r2
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b7d      	cmp	r3, #125	; 0x7d
 8001874:	d137      	bne.n	80018e6 <SHDLC_revertByteStuffing+0x92>
            i++;                      // Avanza al siguiente byte para determinar el valor real
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	3301      	adds	r3, #1
 800187a:	613b      	str	r3, [r7, #16]
            if (i < stuffedSize) {
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	429a      	cmp	r2, r3
 8001882:	d23b      	bcs.n	80018fc <SHDLC_revertByteStuffing+0xa8>
                switch (stuffedData[i]) {
 8001884:	68fa      	ldr	r2, [r7, #12]
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	4413      	add	r3, r2
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b5e      	cmp	r3, #94	; 0x5e
 800188e:	d00a      	beq.n	80018a6 <SHDLC_revertByteStuffing+0x52>
 8001890:	2b5e      	cmp	r3, #94	; 0x5e
 8001892:	dc35      	bgt.n	8001900 <SHDLC_revertByteStuffing+0xac>
 8001894:	2b5d      	cmp	r3, #93	; 0x5d
 8001896:	d00e      	beq.n	80018b6 <SHDLC_revertByteStuffing+0x62>
 8001898:	2b5d      	cmp	r3, #93	; 0x5d
 800189a:	dc31      	bgt.n	8001900 <SHDLC_revertByteStuffing+0xac>
 800189c:	2b31      	cmp	r3, #49	; 0x31
 800189e:	d012      	beq.n	80018c6 <SHDLC_revertByteStuffing+0x72>
 80018a0:	2b33      	cmp	r3, #51	; 0x33
 80018a2:	d018      	beq.n	80018d6 <SHDLC_revertByteStuffing+0x82>
                    break;
                default:
                    // Trata el caso en que el byte siguiente a 0x7D no es uno esperado
                    // Esto podría indicar un error o una situación inesperada.
                    // Se podría manejar de manera especial si es necesario.
                    break;
 80018a4:	e02c      	b.n	8001900 <SHDLC_revertByteStuffing+0xac>
                    originalData[originalIndex++] = 0x7E;
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	1c5a      	adds	r2, r3, #1
 80018aa:	617a      	str	r2, [r7, #20]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	4413      	add	r3, r2
 80018b0:	227e      	movs	r2, #126	; 0x7e
 80018b2:	701a      	strb	r2, [r3, #0]
                    break;
 80018b4:	e025      	b.n	8001902 <SHDLC_revertByteStuffing+0xae>
                    originalData[originalIndex++] = 0x7D;
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	1c5a      	adds	r2, r3, #1
 80018ba:	617a      	str	r2, [r7, #20]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	4413      	add	r3, r2
 80018c0:	227d      	movs	r2, #125	; 0x7d
 80018c2:	701a      	strb	r2, [r3, #0]
                    break;
 80018c4:	e01d      	b.n	8001902 <SHDLC_revertByteStuffing+0xae>
                    originalData[originalIndex++] = 0x11;
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	1c5a      	adds	r2, r3, #1
 80018ca:	617a      	str	r2, [r7, #20]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	4413      	add	r3, r2
 80018d0:	2211      	movs	r2, #17
 80018d2:	701a      	strb	r2, [r3, #0]
                    break;
 80018d4:	e015      	b.n	8001902 <SHDLC_revertByteStuffing+0xae>
                    originalData[originalIndex++] = 0x13;
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	1c5a      	adds	r2, r3, #1
 80018da:	617a      	str	r2, [r7, #20]
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	4413      	add	r3, r2
 80018e0:	2213      	movs	r2, #19
 80018e2:	701a      	strb	r2, [r3, #0]
                    break;
 80018e4:	e00d      	b.n	8001902 <SHDLC_revertByteStuffing+0xae>
                }
            }
        } else {
            // Si no es un byte-stuffing, simplemente copia el byte
            originalData[originalIndex++] = stuffedData[i];
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	441a      	add	r2, r3
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	1c59      	adds	r1, r3, #1
 80018f0:	6179      	str	r1, [r7, #20]
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	440b      	add	r3, r1
 80018f6:	7812      	ldrb	r2, [r2, #0]
 80018f8:	701a      	strb	r2, [r3, #0]
 80018fa:	e002      	b.n	8001902 <SHDLC_revertByteStuffing+0xae>
            }
 80018fc:	bf00      	nop
 80018fe:	e000      	b.n	8001902 <SHDLC_revertByteStuffing+0xae>
                    break;
 8001900:	bf00      	nop
    for (size_t i = 0; i < stuffedSize; ++i) {
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	3301      	adds	r3, #1
 8001906:	613b      	str	r3, [r7, #16]
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	429a      	cmp	r2, r3
 800190e:	d3ac      	bcc.n	800186a <SHDLC_revertByteStuffing+0x16>
        }
    }

    return originalIndex; // Retorna el tamaño del arreglo revertido
 8001910:	697b      	ldr	r3, [r7, #20]
}
 8001912:	4618      	mov	r0, r3
 8001914:	371c      	adds	r7, #28
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <SHDLC_bytesToFloat>:

// Función para convertir 4 bytes en big-endian a un valor float IEEE754
float SHDLC_bytesToFloat(uint8_t * bytes) {
 800191e:	b480      	push	{r7}
 8001920:	b087      	sub	sp, #28
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
    float value;
    uint8_t reversedBytes[sizeof(value)];

    // Revertir el orden de los bytes para big-endian
    for (int i = 0; i < sizeof(value); i++) {
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	e00e      	b.n	800194a <SHDLC_bytesToFloat+0x2c>
        reversedBytes[i] = bytes[sizeof(value) - i - 1];
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	f1c3 0303 	rsb	r3, r3, #3
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	4413      	add	r3, r2
 8001936:	7819      	ldrb	r1, [r3, #0]
 8001938:	f107 020c 	add.w	r2, r7, #12
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	4413      	add	r3, r2
 8001940:	460a      	mov	r2, r1
 8001942:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < sizeof(value); i++) {
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	3301      	adds	r3, #1
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	2b03      	cmp	r3, #3
 800194e:	d9ed      	bls.n	800192c <SHDLC_bytesToFloat+0xe>
 8001950:	68fb      	ldr	r3, [r7, #12]
    }

    // Copiar los bytes revertidos en la variable float
    memcpy(&value, reversedBytes, sizeof(value));
 8001952:	613b      	str	r3, [r7, #16]

    return value;
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	ee07 3a90 	vmov	s15, r3
}
 800195a:	eeb0 0a67 	vmov.f32	s0, s15
 800195e:	371c      	adds	r7, #28
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <SHDLC_llenarConcentraciones>:

// Función para llenar la estructura con los datos de concentración
void SHDLC_llenarConcentraciones(ConcentracionesPM *concentraciones, uint8_t *data) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
    if (!concentraciones || !data) return;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d029      	beq.n	80019cc <SHDLC_llenarConcentraciones+0x64>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d026      	beq.n	80019cc <SHDLC_llenarConcentraciones+0x64>

    // Al menos 4 * sizeof(float) = 16 bytes
    concentraciones->pm1_0 = SHDLC_bytesToFloat(&data[0]);
 800197e:	6838      	ldr	r0, [r7, #0]
 8001980:	f7ff ffcd 	bl	800191e <SHDLC_bytesToFloat>
 8001984:	eef0 7a40 	vmov.f32	s15, s0
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	edc3 7a00 	vstr	s15, [r3]
    concentraciones->pm2_5 = SHDLC_bytesToFloat(&data[4]);
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	3304      	adds	r3, #4
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff ffc3 	bl	800191e <SHDLC_bytesToFloat>
 8001998:	eef0 7a40 	vmov.f32	s15, s0
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	edc3 7a01 	vstr	s15, [r3, #4]
    concentraciones->pm4_0 = SHDLC_bytesToFloat(&data[8]);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	3308      	adds	r3, #8
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff ffb9 	bl	800191e <SHDLC_bytesToFloat>
 80019ac:	eef0 7a40 	vmov.f32	s15, s0
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	edc3 7a02 	vstr	s15, [r3, #8]
    concentraciones->pm10  = SHDLC_bytesToFloat(&data[12]);
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	330c      	adds	r3, #12
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff ffaf 	bl	800191e <SHDLC_bytesToFloat>
 80019c0:	eef0 7a40 	vmov.f32	s15, s0
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	edc3 7a03 	vstr	s15, [r3, #12]
 80019ca:	e000      	b.n	80019ce <SHDLC_llenarConcentraciones+0x66>
    if (!concentraciones || !data) return;
 80019cc:	bf00      	nop
}
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <sps30_send_command>:
#define DELAY_STOP_MEASUREMENT      0

#define CLEAR_VAR                   0

// Implementación de las funciones del objeto SPS30
void sps30_send_command(SPS30 *self, const uint8_t *command, uint16_t commandSize) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	4613      	mov	r3, r2
 80019e0:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit(self->huart, command, commandSize, 100);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6818      	ldr	r0, [r3, #0]
 80019e6:	88fa      	ldrh	r2, [r7, #6]
 80019e8:	2364      	movs	r3, #100	; 0x64
 80019ea:	68b9      	ldr	r1, [r7, #8]
 80019ec:	f004 f859 	bl	8005aa2 <HAL_UART_Transmit>
}
 80019f0:	bf00      	nop
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <sps30_receive_async>:

void sps30_receive_async(SPS30 *self, uint8_t *dataBuffer, uint16_t bufferSize) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	4613      	mov	r3, r2
 8001a04:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Receive(self->huart, dataBuffer, bufferSize, 100);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6818      	ldr	r0, [r3, #0]
 8001a0a:	88fa      	ldrh	r2, [r7, #6]
 8001a0c:	2364      	movs	r3, #100	; 0x64
 8001a0e:	68b9      	ldr	r1, [r7, #8]
 8001a10:	f004 f8d9 	bl	8005bc6 <HAL_UART_Receive>
}
 8001a14:	bf00      	nop
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <sps30_send_receive>:

void sps30_send_receive(SPS30 *self, const uint8_t *command, uint16_t commandSize, uint8_t *dataBuffer, uint16_t bufferSize) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	603b      	str	r3, [r7, #0]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit(self->huart, command, commandSize, 100);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6818      	ldr	r0, [r3, #0]
 8001a30:	88fa      	ldrh	r2, [r7, #6]
 8001a32:	2364      	movs	r3, #100	; 0x64
 8001a34:	68b9      	ldr	r1, [r7, #8]
 8001a36:	f004 f834 	bl	8005aa2 <HAL_UART_Transmit>
    HAL_UART_Receive(self->huart, dataBuffer, bufferSize, 100);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6818      	ldr	r0, [r3, #0]
 8001a3e:	8b3a      	ldrh	r2, [r7, #24]
 8001a40:	2364      	movs	r3, #100	; 0x64
 8001a42:	6839      	ldr	r1, [r7, #0]
 8001a44:	f004 f8bf 	bl	8005bc6 <HAL_UART_Receive>
}
 8001a48:	bf00      	nop
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <sps30_start_measurement>:


void sps30_start_measurement(SPS30 *self) {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b094      	sub	sp, #80	; 0x50
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
    uint8_t startCmd[] = SPS30_FRAME_START_MEASUREMENT; // Comando para iniciar la medición
 8001a58:	4a15      	ldr	r2, [pc, #84]	; (8001ab0 <sps30_start_measurement+0x60>)
 8001a5a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a62:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t dataBuf[BUFFER_SIZE] = {0};      // Buffer para almacenar la respuesta del sensor
 8001a66:	2300      	movs	r3, #0
 8001a68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a6e:	2100      	movs	r1, #0
 8001a70:	460a      	mov	r2, r1
 8001a72:	801a      	strh	r2, [r3, #0]
 8001a74:	460a      	mov	r2, r1
 8001a76:	709a      	strb	r2, [r3, #2]
    char respuestaStr[BUFFER_SIZE_RESPONSE]; // Buffer para el mensaje de longitud de respuesta

    // Envío del comando de inicio de medición
    //uart_print(MSG_INICIO_MEDICION);               // Notifica por UART el inicio de la operación
    //uart_vector_print(sizeof(startCmd), startCmd); // Muestra el comando enviado
    self->send_command(self, startCmd, sizeof(startCmd)); // Envía el comando al sensor SPS30
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001a80:	2208      	movs	r2, #8
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	4798      	blx	r3
    HAL_Delay(DELAY_START_MEASUREMENT);            // Espera para el procesamiento del comando
 8001a86:	2002      	movs	r0, #2
 8001a88:	f001 fab4 	bl	8002ff4 <HAL_Delay>

    // Recepción y procesamiento de la respuesta
    self->receive_async(self, dataBuf, sizeof(dataBuf));
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001a94:	2207      	movs	r2, #7
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	4798      	blx	r3
    //uart_print(MSG_RESPUESTA_INICIO_MEDICION); // Notifica la recepción de la respuesta
    //uart_vector_print(sizeof(dataBuf), dataBuf);   // Muestra la respuesta recibida

    // Cálculo y visualización de la longitud de la respuesta
    int longRespuesta = SHDLC_CalculateDataSize(dataBuf, sizeof(dataBuf)); // Calcula la longitud de los datos útiles
 8001a9a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a9e:	2107      	movs	r1, #7
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fe8b 	bl	80017bc <SHDLC_CalculateDataSize>
 8001aa6:	64f8      	str	r0, [r7, #76]	; 0x4c
    //snprintf(respuestaStr, sizeof(respuestaStr), MENSAJE_SIZE_RESPUESTA, longRespuesta);  // Formatea el mensaje de longitud
    //uart_print(respuestaStr); // Imprime la longitud de la respuesta
}
 8001aa8:	bf00      	nop
 8001aaa:	3750      	adds	r7, #80	; 0x50
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	0800afbc 	.word	0x0800afbc

08001ab4 <sps30_stop_measurement>:

void sps30_stop_measurement(SPS30 *self) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b094      	sub	sp, #80	; 0x50
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
    uint8_t stopCmd[] = SPS30_FRAME_STOP_MEASUREMENT;
 8001abc:	4a13      	ldr	r2, [pc, #76]	; (8001b0c <sps30_stop_measurement+0x58>)
 8001abe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ac2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ac6:	6018      	str	r0, [r3, #0]
 8001ac8:	3304      	adds	r3, #4
 8001aca:	8019      	strh	r1, [r3, #0]
    uint8_t dataBuf[BUFFER_SIZE_STOP_MEASUREMENT] = {0};
 8001acc:	2300      	movs	r3, #0
 8001ace:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	643b      	str	r3, [r7, #64]	; 0x40
    char respuestaStr[BUFFER_SIZE_RESPONSE];

    //uart_print(MSG_SOLICITAR);
    //uart_vector_print(sizeof(stopCmd), stopCmd);
    self->send_command(self, stopCmd, sizeof(stopCmd));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001adc:	2206      	movs	r2, #6
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	4798      	blx	r3
    HAL_Delay(DELAY_STOP_MEASUREMENT);
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	f001 fa86 	bl	8002ff4 <HAL_Delay>

    self->receive_async(self, dataBuf, sizeof(dataBuf));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001af0:	2208      	movs	r2, #8
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	4798      	blx	r3
    //uart_print(MSG_RESPUESTA);
    //uart_vector_print(sizeof(dataBuf), dataBuf);

    int longRespuesta = SHDLC_CalculateDataSize(dataBuf, sizeof(dataBuf));
 8001af6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001afa:	2108      	movs	r1, #8
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fe5d 	bl	80017bc <SHDLC_CalculateDataSize>
 8001b02:	64f8      	str	r0, [r7, #76]	; 0x4c
    //snprintf(respuestaStr, sizeof(respuestaStr), MENSAJE_SIZE_RESPUESTA, longRespuesta);
    //uart_print(respuestaStr);
}
 8001b04:	bf00      	nop
 8001b06:	3750      	adds	r7, #80	; 0x50
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	0800afc4 	.word	0x0800afc4

08001b10 <sps30_sleep>:

void sps30_sleep(SPS30 *self) {
 8001b10:	b590      	push	{r4, r7, lr}
 8001b12:	b097      	sub	sp, #92	; 0x5c
 8001b14:	af02      	add	r7, sp, #8
 8001b16:	6078      	str	r0, [r7, #4]
    uint8_t sleepCmd[] = SPS30_FRAME_SLEEP;
 8001b18:	4a10      	ldr	r2, [pc, #64]	; (8001b5c <sps30_sleep+0x4c>)
 8001b1a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b22:	6018      	str	r0, [r3, #0]
 8001b24:	3304      	adds	r3, #4
 8001b26:	8019      	strh	r1, [r3, #0]
    uint8_t dataBuf[BUFFER_SIZE_SLEEP] = {0};
 8001b28:	2300      	movs	r3, #0
 8001b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	643b      	str	r3, [r7, #64]	; 0x40
    char respuestaStr[BUFFER_SIZE_RESPONSE];

    //uart_print(MSG_SOLICITAR);
    //uart_vector_print(sizeof(sleepCmd), sleepCmd);
    self->send_receive(self, sleepCmd, sizeof(sleepCmd), dataBuf, sizeof(dataBuf));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68dc      	ldr	r4, [r3, #12]
 8001b34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b38:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001b3c:	2208      	movs	r2, #8
 8001b3e:	9200      	str	r2, [sp, #0]
 8001b40:	2206      	movs	r2, #6
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	47a0      	blx	r4
    //uart_print(MSG_RESPUESTA);
    //uart_vector_print(sizeof(dataBuf), dataBuf);

    int longRespuesta = SHDLC_CalculateDataSize(dataBuf, sizeof(dataBuf));
 8001b46:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b4a:	2108      	movs	r1, #8
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fe35 	bl	80017bc <SHDLC_CalculateDataSize>
 8001b52:	64f8      	str	r0, [r7, #76]	; 0x4c
    //snprintf(respuestaStr, sizeof(respuestaStr), MENSAJE_SIZE_RESPUESTA, longRespuesta);
    //uart_print(respuestaStr);
}
 8001b54:	bf00      	nop
 8001b56:	3754      	adds	r7, #84	; 0x54
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd90      	pop	{r4, r7, pc}
 8001b5c:	0800afcc 	.word	0x0800afcc

08001b60 <sps30_read_data>:

void sps30_read_data(SPS30 *self) {
 8001b60:	b590      	push	{r4, r7, lr}
 8001b62:	b0e1      	sub	sp, #388	; 0x184
 8001b64:	af02      	add	r7, sp, #8
 8001b66:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001b6a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001b6e:	6018      	str	r0, [r3, #0]
    uint8_t readCmd[] = SPS30_FRAME_READ_MEASUREMENT;
 8001b70:	4a2f      	ldr	r2, [pc, #188]	; (8001c30 <sps30_read_data+0xd0>)
 8001b72:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001b76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b7a:	6018      	str	r0, [r3, #0]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	8019      	strh	r1, [r3, #0]
    uint8_t dataBuf[BUFFER_SIZE_READ_DATA] = {0};
 8001b80:	2300      	movs	r3, #0
 8001b82:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001b86:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001b8a:	2238      	movs	r2, #56	; 0x38
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f004 fbd6 	bl	8006340 <memset>
    uint8_t originalData[BUFFER_SIZE_READ_DATA] = {0};
 8001b94:	2300      	movs	r3, #0
 8001b96:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001b9a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001b9e:	2238      	movs	r2, #56	; 0x38
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f004 fbcc 	bl	8006340 <memset>
    ConcentracionesPM concentraciones;
    char respuestaStr[BUFFER_SIZE_RESPONSE];

    //uart_print(MSG_SOLICITAR);
    //uart_vector_print(sizeof(readCmd), readCmd);
    self->send_receive(self, readCmd, sizeof(readCmd), dataBuf, sizeof(dataBuf));
 8001ba8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001bac:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68dc      	ldr	r4, [r3, #12]
 8001bb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001bb8:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8001bbc:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8001bc0:	f5a2 70ba 	sub.w	r0, r2, #372	; 0x174
 8001bc4:	223c      	movs	r2, #60	; 0x3c
 8001bc6:	9200      	str	r2, [sp, #0]
 8001bc8:	2206      	movs	r2, #6
 8001bca:	6800      	ldr	r0, [r0, #0]
 8001bcc:	47a0      	blx	r4
    //uart_print(MSG_RESPUESTA);
    //uart_vector_print(sizeof(dataBuf), dataBuf);

    SHDLC_revertByteStuffing(dataBuf, sizeof(dataBuf), originalData);
 8001bce:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8001bd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001bd6:	213c      	movs	r1, #60	; 0x3c
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fe3b 	bl	8001854 <SHDLC_revertByteStuffing>
    //uart_print(MSG_RESPUESTA_CON_BYTESTUFFING);
    //uart_vector_print(sizeof(originalData), originalData);

    int longRespuesta = SHDLC_CalculateDataSize(originalData, sizeof(originalData));
 8001bde:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001be2:	213c      	movs	r1, #60	; 0x3c
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fde9 	bl	80017bc <SHDLC_CalculateDataSize>
 8001bea:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
    //snprintf(respuestaStr, sizeof(respuestaStr), MSG_LONGITUD_RESPUESTA, longRespuesta);
    //uart_print(respuestaStr);

    Shdlc_FrameMiso Newframe = {};
 8001bee:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001bf2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	2341      	movs	r3, #65	; 0x41
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	f004 fb9f 	bl	8006340 <memset>
    SHDLC_LoadMyVector(&Newframe, originalData, longRespuesta);
 8001c02:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001c06:	f107 01f4 	add.w	r1, r7, #244	; 0xf4
 8001c0a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fd9e 	bl	8001750 <SHDLC_LoadMyVector>
    //uart_print(MSG_DATOS_RESPUESTA);
    //uart_vector_print(Newframe.lon, Newframe.myVector);

    SHDLC_llenarConcentraciones(&concentraciones, Newframe.myVector);
 8001c14:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c18:	1cda      	adds	r2, r3, #3
 8001c1a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c1e:	4611      	mov	r1, r2
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fea1 	bl	8001968 <SHDLC_llenarConcentraciones>
    //uart_print(buffer);
    //sprintf(buffer, FORMATO_CONCENTRACION_PM4_0, concentraciones.pm4_0);
    //uart_print(buffer);
    //sprintf(buffer, FORMATO_CONCENTRACION_PM10, concentraciones.pm10);
    //uart_print(buffer);
}
 8001c26:	bf00      	nop
 8001c28:	f507 77be 	add.w	r7, r7, #380	; 0x17c
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd90      	pop	{r4, r7, pc}
 8001c30:	0800afd4 	.word	0x0800afd4

08001c34 <sps30_get_concentrations>:

ConcentracionesPM sps30_get_concentrations(SPS30 *self) {
 8001c34:	b590      	push	{r4, r7, lr}
 8001c36:	b0c3      	sub	sp, #268	; 0x10c
 8001c38:	af02      	add	r7, sp, #8
 8001c3a:	6178      	str	r0, [r7, #20]
    uint8_t readCmd[] = SPS30_FRAME_READ_MEASUREMENT;
 8001c3c:	4a37      	ldr	r2, [pc, #220]	; (8001d1c <sps30_get_concentrations+0xe8>)
 8001c3e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001c42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c46:	6018      	str	r0, [r3, #0]
 8001c48:	3304      	adds	r3, #4
 8001c4a:	8019      	strh	r1, [r3, #0]
    uint8_t dataBuf[BUFFER_SIZE_READ_DATA] = {0};
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001c52:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001c56:	2238      	movs	r2, #56	; 0x38
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f004 fb70 	bl	8006340 <memset>
    uint8_t originalData[BUFFER_SIZE_READ_DATA] = {0};
 8001c60:	2300      	movs	r3, #0
 8001c62:	673b      	str	r3, [r7, #112]	; 0x70
 8001c64:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c68:	2238      	movs	r2, #56	; 0x38
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f004 fb67 	bl	8006340 <memset>
    ConcentracionesPM concentraciones;

    self->send_receive(self, readCmd, sizeof(readCmd), dataBuf, sizeof(dataBuf));
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	68dc      	ldr	r4, [r3, #12]
 8001c76:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c7a:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8001c7e:	223c      	movs	r2, #60	; 0x3c
 8001c80:	9200      	str	r2, [sp, #0]
 8001c82:	2206      	movs	r2, #6
 8001c84:	6978      	ldr	r0, [r7, #20]
 8001c86:	47a0      	blx	r4
    SHDLC_revertByteStuffing(dataBuf, sizeof(dataBuf), originalData);
 8001c88:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8001c8c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c90:	213c      	movs	r1, #60	; 0x3c
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff fdde 	bl	8001854 <SHDLC_revertByteStuffing>

    Shdlc_FrameMiso Newframe = {};
 8001c98:	f107 031c 	add.w	r3, r7, #28
 8001c9c:	2241      	movs	r2, #65	; 0x41
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f004 fb4d 	bl	8006340 <memset>
    SHDLC_LoadMyVector(&Newframe, originalData, SHDLC_CalculateDataSize(originalData, sizeof(originalData)));
 8001ca6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001caa:	213c      	movs	r1, #60	; 0x3c
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fd85 	bl	80017bc <SHDLC_CalculateDataSize>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001cba:	f107 031c 	add.w	r3, r7, #28
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff fd46 	bl	8001750 <SHDLC_LoadMyVector>
    SHDLC_llenarConcentraciones(&concentraciones, Newframe.myVector);
 8001cc4:	f107 031c 	add.w	r3, r7, #28
 8001cc8:	1cda      	adds	r2, r3, #3
 8001cca:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001cce:	4611      	mov	r1, r2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff fe49 	bl	8001968 <SHDLC_llenarConcentraciones>

    return concentraciones;
 8001cd6:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 8001cda:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001cde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ce0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001ce4:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8001ce8:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8001cec:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8001cf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001cf4:	ee06 0a10 	vmov	s12, r0
 8001cf8:	ee06 1a90 	vmov	s13, r1
 8001cfc:	ee07 2a10 	vmov	s14, r2
 8001d00:	ee07 3a90 	vmov	s15, r3
}
 8001d04:	eeb0 0a46 	vmov.f32	s0, s12
 8001d08:	eef0 0a66 	vmov.f32	s1, s13
 8001d0c:	eeb0 1a47 	vmov.f32	s2, s14
 8001d10:	eef0 1a67 	vmov.f32	s3, s15
 8001d14:	f507 7782 	add.w	r7, r7, #260	; 0x104
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd90      	pop	{r4, r7, pc}
 8001d1c:	0800afd4 	.word	0x0800afd4

08001d20 <sps30_serial_number>:

void sps30_serial_number(SPS30 *self) {
 8001d20:	b590      	push	{r4, r7, lr}
 8001d22:	b0ad      	sub	sp, #180	; 0xb4
 8001d24:	af02      	add	r7, sp, #8
 8001d26:	6078      	str	r0, [r7, #4]
    uint8_t cmd[] = SPS30_FRAME_SERIAL_NUMBER;
 8001d28:	4a2d      	ldr	r2, [pc, #180]	; (8001de0 <sps30_serial_number+0xc0>)
 8001d2a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001d2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d32:	6018      	str	r0, [r3, #0]
 8001d34:	3304      	adds	r3, #4
 8001d36:	8019      	strh	r1, [r3, #0]
 8001d38:	3302      	adds	r3, #2
 8001d3a:	0c0a      	lsrs	r2, r1, #16
 8001d3c:	701a      	strb	r2, [r3, #0]
    uint8_t stuffed[BUFFER_SIZE_SERIAL_NUMBER] = {0};
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001d44:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
 8001d54:	615a      	str	r2, [r3, #20]
 8001d56:	831a      	strh	r2, [r3, #24]
    uint8_t original[BUFFER_SIZE_SERIAL_NUMBER] = {0};
 8001d58:	2300      	movs	r3, #0
 8001d5a:	663b      	str	r3, [r7, #96]	; 0x60
 8001d5c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
 8001d6c:	615a      	str	r2, [r3, #20]
 8001d6e:	831a      	strh	r2, [r3, #24]

    self->send_receive(self, cmd, sizeof(cmd), stuffed, sizeof(stuffed));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68dc      	ldr	r4, [r3, #12]
 8001d74:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001d78:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001d7c:	221e      	movs	r2, #30
 8001d7e:	9200      	str	r2, [sp, #0]
 8001d80:	2207      	movs	r2, #7
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	47a0      	blx	r4
    SHDLC_revertByteStuffing(stuffed, sizeof(stuffed), original);
 8001d86:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001d8a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001d8e:	211e      	movs	r1, #30
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff fd5f 	bl	8001854 <SHDLC_revertByteStuffing>

    // Extrae los 16 bytes del número de serie a partir del offset 6
    char serial[17] = {0};  // 16 caracteres + nulo
 8001d96:	2300      	movs	r3, #0
 8001d98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d9a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	609a      	str	r2, [r3, #8]
 8001da6:	731a      	strb	r2, [r3, #12]
    memcpy(serial, &original[6], 16);  // Ajustar si cambia el protocolo
 8001da8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001dac:	1d99      	adds	r1, r3, #6
 8001dae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001db2:	2210      	movs	r2, #16
 8001db4:	4618      	mov	r0, r3
 8001db6:	f004 fab5 	bl	8006324 <memcpy>

    // Imprimir de forma legible
    char mensaje[64];
    snprintf(mensaje, sizeof(mensaje), "\nSerial Number: %s\n", serial);
 8001dba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001dbe:	f107 000c 	add.w	r0, r7, #12
 8001dc2:	4a08      	ldr	r2, [pc, #32]	; (8001de4 <sps30_serial_number+0xc4>)
 8001dc4:	2140      	movs	r1, #64	; 0x40
 8001dc6:	f005 f9b9 	bl	800713c <sniprintf>
    uart.print(&uart, mensaje);
 8001dca:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <sps30_serial_number+0xc8>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f107 020c 	add.w	r2, r7, #12
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	4804      	ldr	r0, [pc, #16]	; (8001de8 <sps30_serial_number+0xc8>)
 8001dd6:	4798      	blx	r3
}
 8001dd8:	bf00      	nop
 8001dda:	37ac      	adds	r7, #172	; 0xac
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd90      	pop	{r4, r7, pc}
 8001de0:	0800aff0 	.word	0x0800aff0
 8001de4:	0800afdc 	.word	0x0800afdc
 8001de8:	20001e0c 	.word	0x20001e0c

08001dec <sps30_wake_up>:


void sps30_wake_up(SPS30 *self) {
 8001dec:	b590      	push	{r4, r7, lr}
 8001dee:	b097      	sub	sp, #92	; 0x5c
 8001df0:	af02      	add	r7, sp, #8
 8001df2:	6078      	str	r0, [r7, #4]
    uint8_t Pulse = SPS30_PULSE_WAKE_UP;
 8001df4:	23ff      	movs	r3, #255	; 0xff
 8001df6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    uint8_t readCmd[] = SPS30_FRAME_WAKE_UP;
 8001dfa:	4a17      	ldr	r2, [pc, #92]	; (8001e58 <sps30_wake_up+0x6c>)
 8001dfc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e04:	6018      	str	r0, [r3, #0]
 8001e06:	3304      	adds	r3, #4
 8001e08:	8019      	strh	r1, [r3, #0]
 8001e0a:	3302      	adds	r3, #2
 8001e0c:	0c0a      	lsrs	r2, r1, #16
 8001e0e:	701a      	strb	r2, [r3, #0]
    uint8_t dataBuf[BUFFER_SIZE_WAKEUP] = {0};
 8001e10:	2300      	movs	r3, #0
 8001e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e14:	2300      	movs	r3, #0
 8001e16:	643b      	str	r3, [r7, #64]	; 0x40
    char respuestaStr[BUFFER_SIZE_RESPONSE];

    //uart_print(MSG_SOLICITAR);
    //uart_vector_print(sizeof(readCmd), readCmd);
    self->send_command(self, &Pulse, sizeof(Pulse));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f107 014b 	add.w	r1, r7, #75	; 0x4b
 8001e20:	2201      	movs	r2, #1
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	4798      	blx	r3
    HAL_Delay(DELAY_WAKEUP);
 8001e26:	2032      	movs	r0, #50	; 0x32
 8001e28:	f001 f8e4 	bl	8002ff4 <HAL_Delay>
    self->send_receive(self, readCmd, sizeof(readCmd), dataBuf, sizeof(dataBuf));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68dc      	ldr	r4, [r3, #12]
 8001e30:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e34:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001e38:	2208      	movs	r2, #8
 8001e3a:	9200      	str	r2, [sp, #0]
 8001e3c:	2207      	movs	r2, #7
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	47a0      	blx	r4
    //uart_print(MSG_RESPUESTA);
    //uart_vector_print(sizeof(dataBuf), dataBuf);

    int longRespuesta = SHDLC_CalculateDataSize(dataBuf, sizeof(dataBuf));
 8001e42:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e46:	2108      	movs	r1, #8
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff fcb7 	bl	80017bc <SHDLC_CalculateDataSize>
 8001e4e:	64f8      	str	r0, [r7, #76]	; 0x4c
    //snprintf(respuestaStr, sizeof(respuestaStr), MENSAJE_SIZE_RESPUESTA, longRespuesta);
    //uart_print(respuestaStr);
}
 8001e50:	bf00      	nop
 8001e52:	3754      	adds	r7, #84	; 0x54
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd90      	pop	{r4, r7, pc}
 8001e58:	0800aff8 	.word	0x0800aff8

08001e5c <SPS30_init>:

void SPS30_init(SPS30 *self, UART_HandleTypeDef *huart) {
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
    self->huart = huart;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	601a      	str	r2, [r3, #0]
    self->send_command = sps30_send_command;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a11      	ldr	r2, [pc, #68]	; (8001eb4 <SPS30_init+0x58>)
 8001e70:	605a      	str	r2, [r3, #4]
    self->receive_async = sps30_receive_async;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a10      	ldr	r2, [pc, #64]	; (8001eb8 <SPS30_init+0x5c>)
 8001e76:	609a      	str	r2, [r3, #8]
    self->send_receive = sps30_send_receive;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a10      	ldr	r2, [pc, #64]	; (8001ebc <SPS30_init+0x60>)
 8001e7c:	60da      	str	r2, [r3, #12]
    self->start_measurement = sps30_start_measurement;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a0f      	ldr	r2, [pc, #60]	; (8001ec0 <SPS30_init+0x64>)
 8001e82:	611a      	str	r2, [r3, #16]
    self->stop_measurement = sps30_stop_measurement;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a0f      	ldr	r2, [pc, #60]	; (8001ec4 <SPS30_init+0x68>)
 8001e88:	615a      	str	r2, [r3, #20]
    self->sleep = sps30_sleep;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a0e      	ldr	r2, [pc, #56]	; (8001ec8 <SPS30_init+0x6c>)
 8001e8e:	619a      	str	r2, [r3, #24]
    self->read_data = sps30_read_data;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a0e      	ldr	r2, [pc, #56]	; (8001ecc <SPS30_init+0x70>)
 8001e94:	61da      	str	r2, [r3, #28]
    self->serial_number = sps30_serial_number;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a0d      	ldr	r2, [pc, #52]	; (8001ed0 <SPS30_init+0x74>)
 8001e9a:	621a      	str	r2, [r3, #32]
    self->wake_up = sps30_wake_up;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a0d      	ldr	r2, [pc, #52]	; (8001ed4 <SPS30_init+0x78>)
 8001ea0:	625a      	str	r2, [r3, #36]	; 0x24
    self->get_concentrations = sps30_get_concentrations;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a0c      	ldr	r2, [pc, #48]	; (8001ed8 <SPS30_init+0x7c>)
 8001ea6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	080019d5 	.word	0x080019d5
 8001eb8:	080019f9 	.word	0x080019f9
 8001ebc:	08001a1d 	.word	0x08001a1d
 8001ec0:	08001a51 	.word	0x08001a51
 8001ec4:	08001ab5 	.word	0x08001ab5
 8001ec8:	08001b11 	.word	0x08001b11
 8001ecc:	08001b61 	.word	0x08001b61
 8001ed0:	08001d21 	.word	0x08001d21
 8001ed4:	08001ded 	.word	0x08001ded
 8001ed8:	08001c35 	.word	0x08001c35

08001edc <inicializar_sensores_sps30>:
SensorSPS30 sensores_sps30[NUM_SENSORES_SPS30];
int sensores_disponibles = 0;

/* === Funciones ============================================================================== */

void inicializar_sensores_sps30(void) {
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
    sensores_disponibles = 0;
 8001ee0:	4b38      	ldr	r3, [pc, #224]	; (8001fc4 <inicializar_sensores_sps30+0xe8>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]

#if 1  // UART5 está habilitado
    sensores_sps30[sensores_disponibles].id   = 1;
 8001ee6:	4b37      	ldr	r3, [pc, #220]	; (8001fc4 <inicializar_sensores_sps30+0xe8>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a37      	ldr	r2, [pc, #220]	; (8001fc8 <inicializar_sensores_sps30+0xec>)
 8001eec:	2134      	movs	r1, #52	; 0x34
 8001eee:	fb01 f303 	mul.w	r3, r1, r3
 8001ef2:	4413      	add	r3, r2
 8001ef4:	332c      	adds	r3, #44	; 0x2c
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	701a      	strb	r2, [r3, #0]
    sensores_sps30[sensores_disponibles].uart = &huart5;
 8001efa:	4b32      	ldr	r3, [pc, #200]	; (8001fc4 <inicializar_sensores_sps30+0xe8>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a32      	ldr	r2, [pc, #200]	; (8001fc8 <inicializar_sensores_sps30+0xec>)
 8001f00:	2134      	movs	r1, #52	; 0x34
 8001f02:	fb01 f303 	mul.w	r3, r1, r3
 8001f06:	4413      	add	r3, r2
 8001f08:	3330      	adds	r3, #48	; 0x30
 8001f0a:	4a30      	ldr	r2, [pc, #192]	; (8001fcc <inicializar_sensores_sps30+0xf0>)
 8001f0c:	601a      	str	r2, [r3, #0]
    SPS30_init(&sensores_sps30[sensores_disponibles].sensor, &huart5);
 8001f0e:	4b2d      	ldr	r3, [pc, #180]	; (8001fc4 <inicializar_sensores_sps30+0xe8>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2234      	movs	r2, #52	; 0x34
 8001f14:	fb02 f303 	mul.w	r3, r2, r3
 8001f18:	4a2b      	ldr	r2, [pc, #172]	; (8001fc8 <inicializar_sensores_sps30+0xec>)
 8001f1a:	4413      	add	r3, r2
 8001f1c:	492b      	ldr	r1, [pc, #172]	; (8001fcc <inicializar_sensores_sps30+0xf0>)
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff ff9c 	bl	8001e5c <SPS30_init>
    sensores_disponibles++;
 8001f24:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <inicializar_sensores_sps30+0xe8>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	4a26      	ldr	r2, [pc, #152]	; (8001fc4 <inicializar_sensores_sps30+0xe8>)
 8001f2c:	6013      	str	r3, [r2, #0]
#endif

#if 1  // Habilitar cuando uses UART7
    sensores_sps30[sensores_disponibles].id   = 2;
 8001f2e:	4b25      	ldr	r3, [pc, #148]	; (8001fc4 <inicializar_sensores_sps30+0xe8>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a25      	ldr	r2, [pc, #148]	; (8001fc8 <inicializar_sensores_sps30+0xec>)
 8001f34:	2134      	movs	r1, #52	; 0x34
 8001f36:	fb01 f303 	mul.w	r3, r1, r3
 8001f3a:	4413      	add	r3, r2
 8001f3c:	332c      	adds	r3, #44	; 0x2c
 8001f3e:	2202      	movs	r2, #2
 8001f40:	701a      	strb	r2, [r3, #0]
    sensores_sps30[sensores_disponibles].uart = &huart7;
 8001f42:	4b20      	ldr	r3, [pc, #128]	; (8001fc4 <inicializar_sensores_sps30+0xe8>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a20      	ldr	r2, [pc, #128]	; (8001fc8 <inicializar_sensores_sps30+0xec>)
 8001f48:	2134      	movs	r1, #52	; 0x34
 8001f4a:	fb01 f303 	mul.w	r3, r1, r3
 8001f4e:	4413      	add	r3, r2
 8001f50:	3330      	adds	r3, #48	; 0x30
 8001f52:	4a1f      	ldr	r2, [pc, #124]	; (8001fd0 <inicializar_sensores_sps30+0xf4>)
 8001f54:	601a      	str	r2, [r3, #0]
    SPS30_init(&sensores_sps30[sensores_disponibles].sensor, &huart7);
 8001f56:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <inicializar_sensores_sps30+0xe8>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2234      	movs	r2, #52	; 0x34
 8001f5c:	fb02 f303 	mul.w	r3, r2, r3
 8001f60:	4a19      	ldr	r2, [pc, #100]	; (8001fc8 <inicializar_sensores_sps30+0xec>)
 8001f62:	4413      	add	r3, r2
 8001f64:	491a      	ldr	r1, [pc, #104]	; (8001fd0 <inicializar_sensores_sps30+0xf4>)
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff ff78 	bl	8001e5c <SPS30_init>
    sensores_disponibles++;
 8001f6c:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <inicializar_sensores_sps30+0xe8>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	3301      	adds	r3, #1
 8001f72:	4a14      	ldr	r2, [pc, #80]	; (8001fc4 <inicializar_sensores_sps30+0xe8>)
 8001f74:	6013      	str	r3, [r2, #0]
#endif

#if 1  // Habilitar cuando uses UART8
    sensores_sps30[sensores_disponibles].id   = 3;
 8001f76:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <inicializar_sensores_sps30+0xe8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a13      	ldr	r2, [pc, #76]	; (8001fc8 <inicializar_sensores_sps30+0xec>)
 8001f7c:	2134      	movs	r1, #52	; 0x34
 8001f7e:	fb01 f303 	mul.w	r3, r1, r3
 8001f82:	4413      	add	r3, r2
 8001f84:	332c      	adds	r3, #44	; 0x2c
 8001f86:	2203      	movs	r2, #3
 8001f88:	701a      	strb	r2, [r3, #0]
    sensores_sps30[sensores_disponibles].uart = &huart1;
 8001f8a:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <inicializar_sensores_sps30+0xe8>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a0e      	ldr	r2, [pc, #56]	; (8001fc8 <inicializar_sensores_sps30+0xec>)
 8001f90:	2134      	movs	r1, #52	; 0x34
 8001f92:	fb01 f303 	mul.w	r3, r1, r3
 8001f96:	4413      	add	r3, r2
 8001f98:	3330      	adds	r3, #48	; 0x30
 8001f9a:	4a0e      	ldr	r2, [pc, #56]	; (8001fd4 <inicializar_sensores_sps30+0xf8>)
 8001f9c:	601a      	str	r2, [r3, #0]
    SPS30_init(&sensores_sps30[sensores_disponibles].sensor, &huart1);
 8001f9e:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <inicializar_sensores_sps30+0xe8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2234      	movs	r2, #52	; 0x34
 8001fa4:	fb02 f303 	mul.w	r3, r2, r3
 8001fa8:	4a07      	ldr	r2, [pc, #28]	; (8001fc8 <inicializar_sensores_sps30+0xec>)
 8001faa:	4413      	add	r3, r2
 8001fac:	4909      	ldr	r1, [pc, #36]	; (8001fd4 <inicializar_sensores_sps30+0xf8>)
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff ff54 	bl	8001e5c <SPS30_init>
    sensores_disponibles++;
 8001fb4:	4b03      	ldr	r3, [pc, #12]	; (8001fc4 <inicializar_sensores_sps30+0xe8>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	4a02      	ldr	r2, [pc, #8]	; (8001fc4 <inicializar_sensores_sps30+0xe8>)
 8001fbc:	6013      	str	r3, [r2, #0]
#endif
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20001d84 	.word	0x20001d84
 8001fc8:	20001ce8 	.word	0x20001ce8
 8001fcc:	20001e3c 	.word	0x20001e3c
 8001fd0:	20001e80 	.word	0x20001e80
 8001fd4:	20001ec4 	.word	0x20001ec4

08001fd8 <rtc_external_available>:
RTC_Source active_rtc = RTC_SOURCE_INTERNAL;  // Por defecto

/**
 * @brief Verifica si el RTC externo responde por I2C
 */
static bool rtc_external_available(void) {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
    return (HAL_I2C_IsDeviceReady(&hi2c2, DS1307_ADDRESS << 1, 3, 100) == HAL_OK);
 8001fdc:	2364      	movs	r3, #100	; 0x64
 8001fde:	2203      	movs	r2, #3
 8001fe0:	21d0      	movs	r1, #208	; 0xd0
 8001fe2:	4805      	ldr	r0, [pc, #20]	; (8001ff8 <rtc_external_available+0x20>)
 8001fe4:	f001 ff24 	bl	8003e30 <HAL_I2C_IsDeviceReady>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	bf0c      	ite	eq
 8001fee:	2301      	moveq	r3, #1
 8001ff0:	2300      	movne	r3, #0
 8001ff2:	b2db      	uxtb	r3, r3
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20001d8c 	.word	0x20001d8c

08001ffc <rtc_auto_init>:

/**
 * @brief Inicializa automáticamente el RTC disponible (externo si responde, interno si no)
 */
void rtc_auto_init(void) {
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
    if (rtc_external_available()) {
 8002000:	f7ff ffea 	bl	8001fd8 <rtc_external_available>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d006      	beq.n	8002018 <rtc_auto_init+0x1c>
    	DS1307_Init(&hi2c2);
 800200a:	4807      	ldr	r0, [pc, #28]	; (8002028 <rtc_auto_init+0x2c>)
 800200c:	f7ff fb0e 	bl	800162c <DS1307_Init>
        active_rtc = RTC_SOURCE_EXTERNAL;
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <rtc_auto_init+0x30>)
 8002012:	2201      	movs	r2, #1
 8002014:	701a      	strb	r2, [r3, #0]
    } else {
        MX_RTC_Init();
        active_rtc = RTC_SOURCE_INTERNAL;
    }
}
 8002016:	e004      	b.n	8002022 <rtc_auto_init+0x26>
        MX_RTC_Init();
 8002018:	f000 fb70 	bl	80026fc <MX_RTC_Init>
        active_rtc = RTC_SOURCE_INTERNAL;
 800201c:	4b03      	ldr	r3, [pc, #12]	; (800202c <rtc_auto_init+0x30>)
 800201e:	2200      	movs	r2, #0
 8002020:	701a      	strb	r2, [r3, #0]
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20001d8c 	.word	0x20001d8c
 800202c:	20001d88 	.word	0x20001d88

08002030 <rtc_get_time>:
/**
 * @brief Obtiene fecha y hora del RTC activo en formato ISO8601
 * @param buffer Buffer donde se escribirá la cadena de fecha
 * @param len Tamaño del buffer
 */
void rtc_get_time(char *buffer, size_t len) {
 8002030:	b5b0      	push	{r4, r5, r7, lr}
 8002032:	b090      	sub	sp, #64	; 0x40
 8002034:	af06      	add	r7, sp, #24
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
    if (active_rtc == RTC_SOURCE_EXTERNAL) {
 800203a:	4b22      	ldr	r3, [pc, #136]	; (80020c4 <rtc_get_time+0x94>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d11c      	bne.n	800207c <rtc_get_time+0x4c>
        DS1307_DateTime dt;
        DS1307_GetTime(&dt);
 8002042:	f107 0320 	add.w	r3, r7, #32
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff fb64 	bl	8001714 <DS1307_GetTime>
        snprintf(buffer, len, "%04d-%02d-%02d %02d:%02d:%02d",
                 dt.year, dt.month, dt.day,
 800204c:	8c3b      	ldrh	r3, [r7, #32]
        snprintf(buffer, len, "%04d-%02d-%02d %02d:%02d:%02d",
 800204e:	461d      	mov	r5, r3
                 dt.year, dt.month, dt.day,
 8002050:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002054:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
                 dt.hours, dt.minutes, dt.seconds);
 8002058:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800205c:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8002060:	f897 4026 	ldrb.w	r4, [r7, #38]	; 0x26
        snprintf(buffer, len, "%04d-%02d-%02d %02d:%02d:%02d",
 8002064:	9404      	str	r4, [sp, #16]
 8002066:	9003      	str	r0, [sp, #12]
 8002068:	9102      	str	r1, [sp, #8]
 800206a:	9201      	str	r2, [sp, #4]
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	462b      	mov	r3, r5
 8002070:	4a15      	ldr	r2, [pc, #84]	; (80020c8 <rtc_get_time+0x98>)
 8002072:	6839      	ldr	r1, [r7, #0]
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f005 f861 	bl	800713c <sniprintf>
        HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
        snprintf(buffer, len, "20%02d-%02d-%02d %02d:%02d:%02d",
                 sDate.Year, sDate.Month, sDate.Date,
                 sTime.Hours, sTime.Minutes, sTime.Seconds);
    }
}
 800207a:	e01f      	b.n	80020bc <rtc_get_time+0x8c>
        HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800207c:	f107 030c 	add.w	r3, r7, #12
 8002080:	2200      	movs	r2, #0
 8002082:	4619      	mov	r1, r3
 8002084:	4811      	ldr	r0, [pc, #68]	; (80020cc <rtc_get_time+0x9c>)
 8002086:	f003 fad1 	bl	800562c <HAL_RTC_GetTime>
        HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800208a:	f107 0308 	add.w	r3, r7, #8
 800208e:	2200      	movs	r2, #0
 8002090:	4619      	mov	r1, r3
 8002092:	480e      	ldr	r0, [pc, #56]	; (80020cc <rtc_get_time+0x9c>)
 8002094:	f003 fbac 	bl	80057f0 <HAL_RTC_GetDate>
                 sDate.Year, sDate.Month, sDate.Date,
 8002098:	7afb      	ldrb	r3, [r7, #11]
        snprintf(buffer, len, "20%02d-%02d-%02d %02d:%02d:%02d",
 800209a:	461d      	mov	r5, r3
                 sDate.Year, sDate.Month, sDate.Date,
 800209c:	7a7b      	ldrb	r3, [r7, #9]
 800209e:	7aba      	ldrb	r2, [r7, #10]
                 sTime.Hours, sTime.Minutes, sTime.Seconds);
 80020a0:	7b39      	ldrb	r1, [r7, #12]
 80020a2:	7b78      	ldrb	r0, [r7, #13]
 80020a4:	7bbc      	ldrb	r4, [r7, #14]
        snprintf(buffer, len, "20%02d-%02d-%02d %02d:%02d:%02d",
 80020a6:	9404      	str	r4, [sp, #16]
 80020a8:	9003      	str	r0, [sp, #12]
 80020aa:	9102      	str	r1, [sp, #8]
 80020ac:	9201      	str	r2, [sp, #4]
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	462b      	mov	r3, r5
 80020b2:	4a07      	ldr	r2, [pc, #28]	; (80020d0 <rtc_get_time+0xa0>)
 80020b4:	6839      	ldr	r1, [r7, #0]
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f005 f840 	bl	800713c <sniprintf>
}
 80020bc:	bf00      	nop
 80020be:	3728      	adds	r7, #40	; 0x28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bdb0      	pop	{r4, r5, r7, pc}
 80020c4:	20001d88 	.word	0x20001d88
 80020c8:	0800b000 	.word	0x0800b000
 80020cc:	20001e18 	.word	0x20001e18
 80020d0:	0800b020 	.word	0x0800b020

080020d4 <time_rtc_GetFormattedDateTime>:
// Compatibilidad con nombres anteriores
void time_rtc_Init(void) {
    rtc_auto_init();
}

void time_rtc_GetFormattedDateTime(char *buffer, size_t len) {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
    rtc_get_time(buffer, len);
 80020de:	6839      	ldr	r1, [r7, #0]
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff ffa5 	bl	8002030 <rtc_get_time>
}
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <uart_print>:

#include "uart_printing.h"
#include <string.h> // Para usar memset y strlen
#include <stdio.h>  // Para usar snprintf

void uart_print(UART_Printing *self, const char *message) {
 80020ee:	b590      	push	{r4, r7, lr}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(self->huart, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681c      	ldr	r4, [r3, #0]
 80020fc:	6838      	ldr	r0, [r7, #0]
 80020fe:	f7fe f877 	bl	80001f0 <strlen>
 8002102:	4603      	mov	r3, r0
 8002104:	b29a      	uxth	r2, r3
 8002106:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800210a:	6839      	ldr	r1, [r7, #0]
 800210c:	4620      	mov	r0, r4
 800210e:	f003 fcc8 	bl	8005aa2 <HAL_UART_Transmit>
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	bd90      	pop	{r4, r7, pc}
	...

0800211c <uart_vector_print>:

void uart_vector_print(UART_Printing *self, uint16_t data_len, const uint8_t *data) {
 800211c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002120:	b08a      	sub	sp, #40	; 0x28
 8002122:	af00      	add	r7, sp, #0
 8002124:	60f8      	str	r0, [r7, #12]
 8002126:	460b      	mov	r3, r1
 8002128:	607a      	str	r2, [r7, #4]
 800212a:	817b      	strh	r3, [r7, #10]
 800212c:	466b      	mov	r3, sp
 800212e:	469a      	mov	sl, r3
    char buffer[data_len * 3 + 1];     // Dinamizar tamaño del buffer basado en data_len.
 8002130:	897a      	ldrh	r2, [r7, #10]
 8002132:	4613      	mov	r3, r2
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	4413      	add	r3, r2
 8002138:	1c5e      	adds	r6, r3, #1
 800213a:	1e73      	subs	r3, r6, #1
 800213c:	61bb      	str	r3, [r7, #24]
 800213e:	4632      	mov	r2, r6
 8002140:	2300      	movs	r3, #0
 8002142:	4690      	mov	r8, r2
 8002144:	4699      	mov	r9, r3
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	f04f 0300 	mov.w	r3, #0
 800214e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002152:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002156:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800215a:	4632      	mov	r2, r6
 800215c:	2300      	movs	r3, #0
 800215e:	4614      	mov	r4, r2
 8002160:	461d      	mov	r5, r3
 8002162:	f04f 0200 	mov.w	r2, #0
 8002166:	f04f 0300 	mov.w	r3, #0
 800216a:	00eb      	lsls	r3, r5, #3
 800216c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002170:	00e2      	lsls	r2, r4, #3
 8002172:	4633      	mov	r3, r6
 8002174:	3307      	adds	r3, #7
 8002176:	08db      	lsrs	r3, r3, #3
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	ebad 0d03 	sub.w	sp, sp, r3
 800217e:	466b      	mov	r3, sp
 8002180:	3300      	adds	r3, #0
 8002182:	617b      	str	r3, [r7, #20]
    memset(buffer, 0, sizeof(buffer)); // Limpia el buffer.
 8002184:	4633      	mov	r3, r6
 8002186:	461a      	mov	r2, r3
 8002188:	2100      	movs	r1, #0
 800218a:	6978      	ldr	r0, [r7, #20]
 800218c:	f004 f8d8 	bl	8006340 <memset>
    char * ptr = buffer;               // Puntero para la posición actual en el buffer.
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	61fb      	str	r3, [r7, #28]
    int remaining = sizeof(buffer);    // Espacio restante en el buffer.
 8002194:	623e      	str	r6, [r7, #32]
    for (uint16_t i = 0; i < data_len; ++i) {
 8002196:	2300      	movs	r3, #0
 8002198:	84fb      	strh	r3, [r7, #38]	; 0x26
 800219a:	e017      	b.n	80021cc <uart_vector_print+0xb0>
        int written = snprintf(ptr, remaining, "%02X ", data[i]);
 800219c:	6a39      	ldr	r1, [r7, #32]
 800219e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	4413      	add	r3, r2
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	4a11      	ldr	r2, [pc, #68]	; (80021ec <uart_vector_print+0xd0>)
 80021a8:	69f8      	ldr	r0, [r7, #28]
 80021aa:	f004 ffc7 	bl	800713c <sniprintf>
 80021ae:	6138      	str	r0, [r7, #16]
        ptr += written;       // Avanza el puntero.
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	69fa      	ldr	r2, [r7, #28]
 80021b4:	4413      	add	r3, r2
 80021b6:	61fb      	str	r3, [r7, #28]
        remaining -= written; // Decrementa el espacio restante.
 80021b8:	6a3a      	ldr	r2, [r7, #32]
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	623b      	str	r3, [r7, #32]
        if (remaining <= 0)
 80021c0:	6a3b      	ldr	r3, [r7, #32]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	dd07      	ble.n	80021d6 <uart_vector_print+0xba>
    for (uint16_t i = 0; i < data_len; ++i) {
 80021c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80021c8:	3301      	adds	r3, #1
 80021ca:	84fb      	strh	r3, [r7, #38]	; 0x26
 80021cc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80021ce:	897b      	ldrh	r3, [r7, #10]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d3e3      	bcc.n	800219c <uart_vector_print+0x80>
 80021d4:	e000      	b.n	80021d8 <uart_vector_print+0xbc>
            break; // Evita desbordamiento del buffer.
 80021d6:	bf00      	nop
    }
    uart_print(self, buffer); // Imprimir todos los bytes formateados.
 80021d8:	6979      	ldr	r1, [r7, #20]
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f7ff ff87 	bl	80020ee <uart_print>
 80021e0:	46d5      	mov	sp, sl
}
 80021e2:	bf00      	nop
 80021e4:	3728      	adds	r7, #40	; 0x28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021ec:	0800b040 	.word	0x0800b040

080021f0 <UART_Printing_init>:

void UART_Printing_init(UART_Printing *self, UART_HandleTypeDef *huart) {
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
    self->huart = huart;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	601a      	str	r2, [r3, #0]
    self->print = uart_print;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a05      	ldr	r2, [pc, #20]	; (8002218 <UART_Printing_init+0x28>)
 8002204:	605a      	str	r2, [r3, #4]
    self->vector_print = uart_vector_print;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a04      	ldr	r2, [pc, #16]	; (800221c <UART_Printing_init+0x2c>)
 800220a:	609a      	str	r2, [r3, #8]
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	080020ef 	.word	0x080020ef
 800221c:	0800211d 	.word	0x0800211d

08002220 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	4b1e      	ldr	r3, [pc, #120]	; (80022a4 <MX_GPIO_Init+0x84>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	4a1d      	ldr	r2, [pc, #116]	; (80022a4 <MX_GPIO_Init+0x84>)
 8002230:	f043 0320 	orr.w	r3, r3, #32
 8002234:	6313      	str	r3, [r2, #48]	; 0x30
 8002236:	4b1b      	ldr	r3, [pc, #108]	; (80022a4 <MX_GPIO_Init+0x84>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	f003 0320 	and.w	r3, r3, #32
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	4b17      	ldr	r3, [pc, #92]	; (80022a4 <MX_GPIO_Init+0x84>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	4a16      	ldr	r2, [pc, #88]	; (80022a4 <MX_GPIO_Init+0x84>)
 800224c:	f043 0308 	orr.w	r3, r3, #8
 8002250:	6313      	str	r3, [r2, #48]	; 0x30
 8002252:	4b14      	ldr	r3, [pc, #80]	; (80022a4 <MX_GPIO_Init+0x84>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	60bb      	str	r3, [r7, #8]
 800225c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	607b      	str	r3, [r7, #4]
 8002262:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <MX_GPIO_Init+0x84>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	4a0f      	ldr	r2, [pc, #60]	; (80022a4 <MX_GPIO_Init+0x84>)
 8002268:	f043 0304 	orr.w	r3, r3, #4
 800226c:	6313      	str	r3, [r2, #48]	; 0x30
 800226e:	4b0d      	ldr	r3, [pc, #52]	; (80022a4 <MX_GPIO_Init+0x84>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	f003 0304 	and.w	r3, r3, #4
 8002276:	607b      	str	r3, [r7, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	603b      	str	r3, [r7, #0]
 800227e:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <MX_GPIO_Init+0x84>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	4a08      	ldr	r2, [pc, #32]	; (80022a4 <MX_GPIO_Init+0x84>)
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	6313      	str	r3, [r2, #48]	; 0x30
 800228a:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <MX_GPIO_Init+0x84>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	603b      	str	r3, [r7, #0]
 8002294:	683b      	ldr	r3, [r7, #0]

}
 8002296:	bf00      	nop
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	40023800 	.word	0x40023800

080022a8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80022ac:	4b1b      	ldr	r3, [pc, #108]	; (800231c <MX_I2C2_Init+0x74>)
 80022ae:	4a1c      	ldr	r2, [pc, #112]	; (8002320 <MX_I2C2_Init+0x78>)
 80022b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80022b2:	4b1a      	ldr	r3, [pc, #104]	; (800231c <MX_I2C2_Init+0x74>)
 80022b4:	4a1b      	ldr	r2, [pc, #108]	; (8002324 <MX_I2C2_Init+0x7c>)
 80022b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022b8:	4b18      	ldr	r3, [pc, #96]	; (800231c <MX_I2C2_Init+0x74>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80022be:	4b17      	ldr	r3, [pc, #92]	; (800231c <MX_I2C2_Init+0x74>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022c4:	4b15      	ldr	r3, [pc, #84]	; (800231c <MX_I2C2_Init+0x74>)
 80022c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022ca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022cc:	4b13      	ldr	r3, [pc, #76]	; (800231c <MX_I2C2_Init+0x74>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80022d2:	4b12      	ldr	r3, [pc, #72]	; (800231c <MX_I2C2_Init+0x74>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022d8:	4b10      	ldr	r3, [pc, #64]	; (800231c <MX_I2C2_Init+0x74>)
 80022da:	2200      	movs	r2, #0
 80022dc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022de:	4b0f      	ldr	r3, [pc, #60]	; (800231c <MX_I2C2_Init+0x74>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80022e4:	480d      	ldr	r0, [pc, #52]	; (800231c <MX_I2C2_Init+0x74>)
 80022e6:	f001 f93b 	bl	8003560 <HAL_I2C_Init>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80022f0:	f000 f9fe 	bl	80026f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80022f4:	2100      	movs	r1, #0
 80022f6:	4809      	ldr	r0, [pc, #36]	; (800231c <MX_I2C2_Init+0x74>)
 80022f8:	f002 f9f5 	bl	80046e6 <HAL_I2CEx_ConfigAnalogFilter>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8002302:	f000 f9f5 	bl	80026f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002306:	2100      	movs	r1, #0
 8002308:	4804      	ldr	r0, [pc, #16]	; (800231c <MX_I2C2_Init+0x74>)
 800230a:	f002 fa28 	bl	800475e <HAL_I2CEx_ConfigDigitalFilter>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8002314:	f000 f9ec 	bl	80026f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002318:	bf00      	nop
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20001d8c 	.word	0x20001d8c
 8002320:	40005800 	.word	0x40005800
 8002324:	000186a0 	.word	0x000186a0

08002328 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08a      	sub	sp, #40	; 0x28
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002330:	f107 0314 	add.w	r3, r7, #20
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a19      	ldr	r2, [pc, #100]	; (80023ac <HAL_I2C_MspInit+0x84>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d12b      	bne.n	80023a2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	613b      	str	r3, [r7, #16]
 800234e:	4b18      	ldr	r3, [pc, #96]	; (80023b0 <HAL_I2C_MspInit+0x88>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	4a17      	ldr	r2, [pc, #92]	; (80023b0 <HAL_I2C_MspInit+0x88>)
 8002354:	f043 0320 	orr.w	r3, r3, #32
 8002358:	6313      	str	r3, [r2, #48]	; 0x30
 800235a:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <HAL_I2C_MspInit+0x88>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	f003 0320 	and.w	r3, r3, #32
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002366:	2303      	movs	r3, #3
 8002368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800236a:	2312      	movs	r3, #18
 800236c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236e:	2300      	movs	r3, #0
 8002370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002372:	2303      	movs	r3, #3
 8002374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002376:	2304      	movs	r3, #4
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800237a:	f107 0314 	add.w	r3, r7, #20
 800237e:	4619      	mov	r1, r3
 8002380:	480c      	ldr	r0, [pc, #48]	; (80023b4 <HAL_I2C_MspInit+0x8c>)
 8002382:	f000 ff41 	bl	8003208 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <HAL_I2C_MspInit+0x88>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	4a08      	ldr	r2, [pc, #32]	; (80023b0 <HAL_I2C_MspInit+0x88>)
 8002390:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002394:	6413      	str	r3, [r2, #64]	; 0x40
 8002396:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <HAL_I2C_MspInit+0x88>)
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80023a2:	bf00      	nop
 80023a4:	3728      	adds	r7, #40	; 0x28
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40005800 	.word	0x40005800
 80023b0:	40023800 	.word	0x40023800
 80023b4:	40021400 	.word	0x40021400

080023b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b0b2      	sub	sp, #200	; 0xc8
 80023bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023be:	f000 fda7 	bl	8002f10 <HAL_Init>
    // SPS30_Init(&huart5);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023c2:	f000 f933 	bl	800262c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023c6:	f7ff ff2b 	bl	8002220 <MX_GPIO_Init>
  MX_RTC_Init();
 80023ca:	f000 f997 	bl	80026fc <MX_RTC_Init>
  MX_UART5_Init();
 80023ce:	f000 fb43 	bl	8002a58 <MX_UART5_Init>
  MX_USART3_UART_Init();
 80023d2:	f000 fbbf 	bl	8002b54 <MX_USART3_UART_Init>
  MX_UART7_Init();
 80023d6:	f000 fb69 	bl	8002aac <MX_UART7_Init>
  MX_USART6_UART_Init();
 80023da:	f000 fbe5 	bl	8002ba8 <MX_USART6_UART_Init>
  MX_USART1_UART_Init();
 80023de:	f000 fb8f 	bl	8002b00 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80023e2:	f7ff ff61 	bl	80022a8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* Inicializar sensores SPS30 disponibles*/
  rtc_auto_init();    // Detecta y configura el RTC correcto
 80023e6:	f7ff fe09 	bl	8001ffc <rtc_auto_init>

  //char fecha_hora[32];
  //obtener_fecha_hora(fecha_hora);
 //uart_printf("Fecha y hora actual: %s\r\n", fecha_hora);

  inicializar_sensores_sps30();
 80023ea:	f7ff fd77 	bl	8001edc <inicializar_sensores_sps30>



  /*Inicializar el objeto SPS30 con el manejador de UART*/

  SPS30_init(&sps30, &huart5);
 80023ee:	497d      	ldr	r1, [pc, #500]	; (80025e4 <main+0x22c>)
 80023f0:	487d      	ldr	r0, [pc, #500]	; (80025e8 <main+0x230>)
 80023f2:	f7ff fd33 	bl	8001e5c <SPS30_init>
  UART_Printing_init(&uart, &huart3);
 80023f6:	497d      	ldr	r1, [pc, #500]	; (80025ec <main+0x234>)
 80023f8:	487d      	ldr	r0, [pc, #500]	; (80025f0 <main+0x238>)
 80023fa:	f7ff fef9 	bl	80021f0 <UART_Printing_init>


  /* Initialize RTC */

  uart.print(&uart, "Inicializando RTC DS1307...\n");
 80023fe:	4b7c      	ldr	r3, [pc, #496]	; (80025f0 <main+0x238>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	497c      	ldr	r1, [pc, #496]	; (80025f4 <main+0x23c>)
 8002404:	487a      	ldr	r0, [pc, #488]	; (80025f0 <main+0x238>)
 8002406:	4798      	blx	r3
  //time_rtc_Init(&hi2c2);

  /* Initialization welcome message */
  uart.print(&uart, "\n\n-----------------------------------------------------------\n");
 8002408:	4b79      	ldr	r3, [pc, #484]	; (80025f0 <main+0x238>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	497a      	ldr	r1, [pc, #488]	; (80025f8 <main+0x240>)
 800240e:	4878      	ldr	r0, [pc, #480]	; (80025f0 <main+0x238>)
 8002410:	4798      	blx	r3
  uart.print(&uart, "*** Sistema de Monitoreo de Material Particulado ***\n");
 8002412:	4b77      	ldr	r3, [pc, #476]	; (80025f0 <main+0x238>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	4979      	ldr	r1, [pc, #484]	; (80025fc <main+0x244>)
 8002418:	4875      	ldr	r0, [pc, #468]	; (80025f0 <main+0x238>)
 800241a:	4798      	blx	r3
  uart.print(&uart, "-----------------------------------------------------------\n");
 800241c:	4b74      	ldr	r3, [pc, #464]	; (80025f0 <main+0x238>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	4977      	ldr	r1, [pc, #476]	; (8002600 <main+0x248>)
 8002422:	4873      	ldr	r0, [pc, #460]	; (80025f0 <main+0x238>)
 8002424:	4798      	blx	r3


  /* Initialize RTC */
  uart.print(&uart, "Inicializando RTC DS1307...\n");
 8002426:	4b72      	ldr	r3, [pc, #456]	; (80025f0 <main+0x238>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	4972      	ldr	r1, [pc, #456]	; (80025f4 <main+0x23c>)
 800242c:	4870      	ldr	r0, [pc, #448]	; (80025f0 <main+0x238>)
 800242e:	4798      	blx	r3
  //time_rtc_Init(&hi2c2);

   /*Despierta al sensor SPS30*/
   sps30.wake_up(&sps30);
 8002430:	4b6d      	ldr	r3, [pc, #436]	; (80025e8 <main+0x230>)
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	486c      	ldr	r0, [pc, #432]	; (80025e8 <main+0x230>)
 8002436:	4798      	blx	r3
   uart.print(&uart, "WAKE UP :\n");
 8002438:	4b6d      	ldr	r3, [pc, #436]	; (80025f0 <main+0x238>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	4971      	ldr	r1, [pc, #452]	; (8002604 <main+0x24c>)
 800243e:	486c      	ldr	r0, [pc, #432]	; (80025f0 <main+0x238>)
 8002440:	4798      	blx	r3


   /* Initialize data logger */
     uart.print(&uart, "Inicializando sistema de almacenamiento de datos...\n");
 8002442:	4b6b      	ldr	r3, [pc, #428]	; (80025f0 <main+0x238>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	4970      	ldr	r1, [pc, #448]	; (8002608 <main+0x250>)
 8002448:	4869      	ldr	r0, [pc, #420]	; (80025f0 <main+0x238>)
 800244a:	4798      	blx	r3
     if (!data_logger_init()) {
 800244c:	f7fe fe22 	bl	8001094 <data_logger_init>
 8002450:	4603      	mov	r3, r0
 8002452:	f083 0301 	eor.w	r3, r3, #1
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	d004      	beq.n	8002466 <main+0xae>
         uart.print(&uart, "¡Error al inicializar el sistema de almacenamiento!\n");
 800245c:	4b64      	ldr	r3, [pc, #400]	; (80025f0 <main+0x238>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	496a      	ldr	r1, [pc, #424]	; (800260c <main+0x254>)
 8002462:	4863      	ldr	r0, [pc, #396]	; (80025f0 <main+0x238>)
 8002464:	4798      	blx	r3
     }

     /* Initialize SPS30 sensors array */
     uart.print(&uart, "Inicializando sensores SPS30...\n");
 8002466:	4b62      	ldr	r3, [pc, #392]	; (80025f0 <main+0x238>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	4969      	ldr	r1, [pc, #420]	; (8002610 <main+0x258>)
 800246c:	4860      	ldr	r0, [pc, #384]	; (80025f0 <main+0x238>)
 800246e:	4798      	blx	r3
     inicializar_sensores_sps30();
 8002470:	f7ff fd34 	bl	8001edc <inicializar_sensores_sps30>

   /* Buffer de Mensajes */

   char datetime_buffer[32];
   char msg_buffer[128];
   uint32_t ciclo_contador = 0;
 8002474:	2300      	movs	r3, #0
 8002476:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {

    	  /* Get current date and time */
    	        time_rtc_GetFormattedDateTime(datetime_buffer, sizeof(datetime_buffer));
 800247a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800247e:	2120      	movs	r1, #32
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff fe27 	bl	80020d4 <time_rtc_GetFormattedDateTime>

    	        /* Format header message with timestamp and cycle counter */
    	        snprintf(msg_buffer, sizeof(msg_buffer),
 8002486:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800248a:	3301      	adds	r3, #1
 800248c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002490:	f107 0014 	add.w	r0, r7, #20
 8002494:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800249e:	4a5d      	ldr	r2, [pc, #372]	; (8002614 <main+0x25c>)
 80024a0:	2180      	movs	r1, #128	; 0x80
 80024a2:	f004 fe4b 	bl	800713c <sniprintf>
    	                "\n=== Ciclo de medición #%lu: %s ===\n",
    	                ++ciclo_contador, datetime_buffer);
    	        uart.print(&uart, msg_buffer);
 80024a6:	4b52      	ldr	r3, [pc, #328]	; (80025f0 <main+0x238>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f107 0214 	add.w	r2, r7, #20
 80024ae:	4611      	mov	r1, r2
 80024b0:	484f      	ldr	r0, [pc, #316]	; (80025f0 <main+0x238>)
 80024b2:	4798      	blx	r3

    	        /* Read all available sensors */
    	        for (int i = 0; i < sensores_disponibles; i++) {
 80024b4:	2300      	movs	r3, #0
 80024b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80024ba:	e05d      	b.n	8002578 <main+0x1c0>
    	            if (proceso_observador(&sensores_sps30[i].sensor, &uart, sensores_sps30[i].id)) {
 80024bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80024c0:	2234      	movs	r2, #52	; 0x34
 80024c2:	fb02 f303 	mul.w	r3, r2, r3
 80024c6:	4a54      	ldr	r2, [pc, #336]	; (8002618 <main+0x260>)
 80024c8:	1898      	adds	r0, r3, r2
 80024ca:	4a53      	ldr	r2, [pc, #332]	; (8002618 <main+0x260>)
 80024cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80024d0:	2134      	movs	r1, #52	; 0x34
 80024d2:	fb01 f303 	mul.w	r3, r1, r3
 80024d6:	4413      	add	r3, r2
 80024d8:	332c      	adds	r3, #44	; 0x2c
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	461a      	mov	r2, r3
 80024de:	4944      	ldr	r1, [pc, #272]	; (80025f0 <main+0x238>)
 80024e0:	f7fe ff6a 	bl	80013b8 <proceso_observador>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d041      	beq.n	800256e <main+0x1b6>
    	                /* Get the last measurement data and store it */
    	                ConcentracionesPM valores = sensores_sps30[i].sensor.get_concentrations(&sensores_sps30[i].sensor);
 80024ea:	4a4b      	ldr	r2, [pc, #300]	; (8002618 <main+0x260>)
 80024ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80024f0:	2134      	movs	r1, #52	; 0x34
 80024f2:	fb01 f303 	mul.w	r3, r1, r3
 80024f6:	4413      	add	r3, r2
 80024f8:	3328      	adds	r3, #40	; 0x28
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002500:	2134      	movs	r1, #52	; 0x34
 8002502:	fb01 f202 	mul.w	r2, r1, r2
 8002506:	4944      	ldr	r1, [pc, #272]	; (8002618 <main+0x260>)
 8002508:	440a      	add	r2, r1
 800250a:	4610      	mov	r0, r2
 800250c:	4798      	blx	r3
 800250e:	eeb0 6a40 	vmov.f32	s12, s0
 8002512:	eef0 6a60 	vmov.f32	s13, s1
 8002516:	eeb0 7a41 	vmov.f32	s14, s2
 800251a:	eef0 7a61 	vmov.f32	s15, s3
 800251e:	ed87 6a01 	vstr	s12, [r7, #4]
 8002522:	edc7 6a02 	vstr	s13, [r7, #8]
 8002526:	ed87 7a03 	vstr	s14, [r7, #12]
 800252a:	edc7 7a04 	vstr	s15, [r7, #16]
    	                data_logger_store_measurement(sensores_sps30[i].id, valores, -999.0f, -999.0f);
 800252e:	4a3a      	ldr	r2, [pc, #232]	; (8002618 <main+0x260>)
 8002530:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002534:	2134      	movs	r1, #52	; 0x34
 8002536:	fb01 f303 	mul.w	r3, r1, r3
 800253a:	4413      	add	r3, r2
 800253c:	332c      	adds	r3, #44	; 0x2c
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	ed97 6a01 	vldr	s12, [r7, #4]
 8002544:	edd7 6a02 	vldr	s13, [r7, #8]
 8002548:	ed97 7a03 	vldr	s14, [r7, #12]
 800254c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002550:	eddf 2a32 	vldr	s5, [pc, #200]	; 800261c <main+0x264>
 8002554:	ed9f 2a31 	vldr	s4, [pc, #196]	; 800261c <main+0x264>
 8002558:	eeb0 0a46 	vmov.f32	s0, s12
 800255c:	eef0 0a66 	vmov.f32	s1, s13
 8002560:	eeb0 1a47 	vmov.f32	s2, s14
 8002564:	eef0 1a67 	vmov.f32	s3, s15
 8002568:	4618      	mov	r0, r3
 800256a:	f7fe fdc9 	bl	8001100 <data_logger_store_measurement>
    	        for (int i = 0; i < sensores_disponibles; i++) {
 800256e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002572:	3301      	adds	r3, #1
 8002574:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002578:	4b29      	ldr	r3, [pc, #164]	; (8002620 <main+0x268>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002580:	429a      	cmp	r2, r3
 8002582:	db9b      	blt.n	80024bc <main+0x104>
    	            }
    	        }

    	        /* Print data summary every 10 cycles */
    	        if (ciclo_contador % 10 == 0) {
 8002584:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8002588:	4b26      	ldr	r3, [pc, #152]	; (8002624 <main+0x26c>)
 800258a:	fba3 2301 	umull	r2, r3, r3, r1
 800258e:	08da      	lsrs	r2, r3, #3
 8002590:	4613      	mov	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	1aca      	subs	r2, r1, r3
 800259a:	2a00      	cmp	r2, #0
 800259c:	d11d      	bne.n	80025da <main+0x222>
    	            data_logger_print_summary(&uart);
 800259e:	4814      	ldr	r0, [pc, #80]	; (80025f0 <main+0x238>)
 80025a0:	f7fe fe60 	bl	8001264 <data_logger_print_summary>

    	            /* Print average PM2.5 of all sensors */
    	            float pm25_avg = data_logger_get_average_pm25(0, 10);
 80025a4:	210a      	movs	r1, #10
 80025a6:	2000      	movs	r0, #0
 80025a8:	f7fe fdec 	bl	8001184 <data_logger_get_average_pm25>
 80025ac:	ed87 0a2d 	vstr	s0, [r7, #180]	; 0xb4
    	            snprintf(msg_buffer, sizeof(msg_buffer),
 80025b0:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80025b4:	f7fd ffd8 	bl	8000568 <__aeabi_f2d>
 80025b8:	4602      	mov	r2, r0
 80025ba:	460b      	mov	r3, r1
 80025bc:	f107 0014 	add.w	r0, r7, #20
 80025c0:	e9cd 2300 	strd	r2, r3, [sp]
 80025c4:	4a18      	ldr	r2, [pc, #96]	; (8002628 <main+0x270>)
 80025c6:	2180      	movs	r1, #128	; 0x80
 80025c8:	f004 fdb8 	bl	800713c <sniprintf>
    	                    "Promedio PM2.5 (últimas 10 mediciones): %.2f ug/m3\n", pm25_avg);
    	            uart.print(&uart, msg_buffer);
 80025cc:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <main+0x238>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f107 0214 	add.w	r2, r7, #20
 80025d4:	4611      	mov	r1, r2
 80025d6:	4806      	ldr	r0, [pc, #24]	; (80025f0 <main+0x238>)
 80025d8:	4798      	blx	r3

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

        HAL_Delay(10000); // Espera 10 segundos antes de la próxima lectura
 80025da:	f242 7010 	movw	r0, #10000	; 0x2710
 80025de:	f000 fd09 	bl	8002ff4 <HAL_Delay>
    	        time_rtc_GetFormattedDateTime(datetime_buffer, sizeof(datetime_buffer));
 80025e2:	e74a      	b.n	800247a <main+0xc2>
 80025e4:	20001e3c 	.word	0x20001e3c
 80025e8:	20001de0 	.word	0x20001de0
 80025ec:	20001f08 	.word	0x20001f08
 80025f0:	20001e0c 	.word	0x20001e0c
 80025f4:	0800b048 	.word	0x0800b048
 80025f8:	0800b068 	.word	0x0800b068
 80025fc:	0800b0a8 	.word	0x0800b0a8
 8002600:	0800b0e0 	.word	0x0800b0e0
 8002604:	0800b120 	.word	0x0800b120
 8002608:	0800b12c 	.word	0x0800b12c
 800260c:	0800b164 	.word	0x0800b164
 8002610:	0800b19c 	.word	0x0800b19c
 8002614:	0800b1c0 	.word	0x0800b1c0
 8002618:	20001ce8 	.word	0x20001ce8
 800261c:	c479c000 	.word	0xc479c000
 8002620:	20001d84 	.word	0x20001d84
 8002624:	cccccccd 	.word	0xcccccccd
 8002628:	0800b1e8 	.word	0x0800b1e8

0800262c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b094      	sub	sp, #80	; 0x50
 8002630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002632:	f107 0320 	add.w	r3, r7, #32
 8002636:	2230      	movs	r2, #48	; 0x30
 8002638:	2100      	movs	r1, #0
 800263a:	4618      	mov	r0, r3
 800263c:	f003 fe80 	bl	8006340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002640:	f107 030c 	add.w	r3, r7, #12
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	60da      	str	r2, [r3, #12]
 800264e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002650:	2300      	movs	r3, #0
 8002652:	60bb      	str	r3, [r7, #8]
 8002654:	4b24      	ldr	r3, [pc, #144]	; (80026e8 <SystemClock_Config+0xbc>)
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	4a23      	ldr	r2, [pc, #140]	; (80026e8 <SystemClock_Config+0xbc>)
 800265a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800265e:	6413      	str	r3, [r2, #64]	; 0x40
 8002660:	4b21      	ldr	r3, [pc, #132]	; (80026e8 <SystemClock_Config+0xbc>)
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002668:	60bb      	str	r3, [r7, #8]
 800266a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800266c:	2300      	movs	r3, #0
 800266e:	607b      	str	r3, [r7, #4]
 8002670:	4b1e      	ldr	r3, [pc, #120]	; (80026ec <SystemClock_Config+0xc0>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002678:	4a1c      	ldr	r2, [pc, #112]	; (80026ec <SystemClock_Config+0xc0>)
 800267a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800267e:	6013      	str	r3, [r2, #0]
 8002680:	4b1a      	ldr	r3, [pc, #104]	; (80026ec <SystemClock_Config+0xc0>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002688:	607b      	str	r3, [r7, #4]
 800268a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800268c:	230a      	movs	r3, #10
 800268e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002690:	2301      	movs	r3, #1
 8002692:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002694:	2310      	movs	r3, #16
 8002696:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002698:	2301      	movs	r3, #1
 800269a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800269c:	2300      	movs	r3, #0
 800269e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026a0:	f107 0320 	add.w	r3, r7, #32
 80026a4:	4618      	mov	r0, r3
 80026a6:	f002 f899 	bl	80047dc <HAL_RCC_OscConfig>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80026b0:	f000 f81e 	bl	80026f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026b4:	230f      	movs	r3, #15
 80026b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80026b8:	2300      	movs	r3, #0
 80026ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026bc:	2300      	movs	r3, #0
 80026be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026c0:	2300      	movs	r3, #0
 80026c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026c4:	2300      	movs	r3, #0
 80026c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80026c8:	f107 030c 	add.w	r3, r7, #12
 80026cc:	2100      	movs	r1, #0
 80026ce:	4618      	mov	r0, r3
 80026d0:	f002 fafc 	bl	8004ccc <HAL_RCC_ClockConfig>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80026da:	f000 f809 	bl	80026f0 <Error_Handler>
  }
}
 80026de:	bf00      	nop
 80026e0:	3750      	adds	r7, #80	; 0x50
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40023800 	.word	0x40023800
 80026ec:	40007000 	.word	0x40007000

080026f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026f4:	b672      	cpsid	i
}
 80026f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 80026f8:	e7fe      	b.n	80026f8 <Error_Handler+0x8>
	...

080026fc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002702:	1d3b      	adds	r3, r7, #4
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	605a      	str	r2, [r3, #4]
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	60da      	str	r2, [r3, #12]
 800270e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002710:	2300      	movs	r3, #0
 8002712:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002714:	4b24      	ldr	r3, [pc, #144]	; (80027a8 <MX_RTC_Init+0xac>)
 8002716:	4a25      	ldr	r2, [pc, #148]	; (80027ac <MX_RTC_Init+0xb0>)
 8002718:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800271a:	4b23      	ldr	r3, [pc, #140]	; (80027a8 <MX_RTC_Init+0xac>)
 800271c:	2200      	movs	r2, #0
 800271e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002720:	4b21      	ldr	r3, [pc, #132]	; (80027a8 <MX_RTC_Init+0xac>)
 8002722:	227f      	movs	r2, #127	; 0x7f
 8002724:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002726:	4b20      	ldr	r3, [pc, #128]	; (80027a8 <MX_RTC_Init+0xac>)
 8002728:	22ff      	movs	r2, #255	; 0xff
 800272a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800272c:	4b1e      	ldr	r3, [pc, #120]	; (80027a8 <MX_RTC_Init+0xac>)
 800272e:	2200      	movs	r2, #0
 8002730:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002732:	4b1d      	ldr	r3, [pc, #116]	; (80027a8 <MX_RTC_Init+0xac>)
 8002734:	2200      	movs	r2, #0
 8002736:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002738:	4b1b      	ldr	r3, [pc, #108]	; (80027a8 <MX_RTC_Init+0xac>)
 800273a:	2200      	movs	r2, #0
 800273c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800273e:	481a      	ldr	r0, [pc, #104]	; (80027a8 <MX_RTC_Init+0xac>)
 8002740:	f002 fe64 	bl	800540c <HAL_RTC_Init>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800274a:	f7ff ffd1 	bl	80026f0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800274e:	2300      	movs	r3, #0
 8002750:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002752:	2300      	movs	r3, #0
 8002754:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002756:	2300      	movs	r3, #0
 8002758:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800275a:	2300      	movs	r3, #0
 800275c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002762:	1d3b      	adds	r3, r7, #4
 8002764:	2201      	movs	r2, #1
 8002766:	4619      	mov	r1, r3
 8002768:	480f      	ldr	r0, [pc, #60]	; (80027a8 <MX_RTC_Init+0xac>)
 800276a:	f002 fec5 	bl	80054f8 <HAL_RTC_SetTime>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002774:	f7ff ffbc 	bl	80026f0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002778:	2301      	movs	r3, #1
 800277a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800277c:	2301      	movs	r3, #1
 800277e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002780:	2301      	movs	r3, #1
 8002782:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002784:	2300      	movs	r3, #0
 8002786:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002788:	463b      	mov	r3, r7
 800278a:	2201      	movs	r2, #1
 800278c:	4619      	mov	r1, r3
 800278e:	4806      	ldr	r0, [pc, #24]	; (80027a8 <MX_RTC_Init+0xac>)
 8002790:	f002 ffaa 	bl	80056e8 <HAL_RTC_SetDate>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800279a:	f7ff ffa9 	bl	80026f0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800279e:	bf00      	nop
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	20001e18 	.word	0x20001e18
 80027ac:	40002800 	.word	0x40002800

080027b0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08e      	sub	sp, #56	; 0x38
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027b8:	f107 0308 	add.w	r3, r7, #8
 80027bc:	2230      	movs	r2, #48	; 0x30
 80027be:	2100      	movs	r1, #0
 80027c0:	4618      	mov	r0, r3
 80027c2:	f003 fdbd 	bl	8006340 <memset>
  if(rtcHandle->Instance==RTC)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a0c      	ldr	r2, [pc, #48]	; (80027fc <HAL_RTC_MspInit+0x4c>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d111      	bne.n	80027f4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80027d0:	2320      	movs	r3, #32
 80027d2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80027d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027d8:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027da:	f107 0308 	add.w	r3, r7, #8
 80027de:	4618      	mov	r0, r3
 80027e0:	f002 fc54 	bl	800508c <HAL_RCCEx_PeriphCLKConfig>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80027ea:	f7ff ff81 	bl	80026f0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80027ee:	4b04      	ldr	r3, [pc, #16]	; (8002800 <HAL_RTC_MspInit+0x50>)
 80027f0:	2201      	movs	r2, #1
 80027f2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80027f4:	bf00      	nop
 80027f6:	3738      	adds	r7, #56	; 0x38
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40002800 	.word	0x40002800
 8002800:	42470e3c 	.word	0x42470e3c

08002804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800280a:	2300      	movs	r3, #0
 800280c:	607b      	str	r3, [r7, #4]
 800280e:	4b10      	ldr	r3, [pc, #64]	; (8002850 <HAL_MspInit+0x4c>)
 8002810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002812:	4a0f      	ldr	r2, [pc, #60]	; (8002850 <HAL_MspInit+0x4c>)
 8002814:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002818:	6453      	str	r3, [r2, #68]	; 0x44
 800281a:	4b0d      	ldr	r3, [pc, #52]	; (8002850 <HAL_MspInit+0x4c>)
 800281c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002822:	607b      	str	r3, [r7, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	603b      	str	r3, [r7, #0]
 800282a:	4b09      	ldr	r3, [pc, #36]	; (8002850 <HAL_MspInit+0x4c>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	4a08      	ldr	r2, [pc, #32]	; (8002850 <HAL_MspInit+0x4c>)
 8002830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002834:	6413      	str	r3, [r2, #64]	; 0x40
 8002836:	4b06      	ldr	r3, [pc, #24]	; (8002850 <HAL_MspInit+0x4c>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283e:	603b      	str	r3, [r7, #0]
 8002840:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	40023800 	.word	0x40023800

08002854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8002858:	e7fe      	b.n	8002858 <NMI_Handler+0x4>

0800285a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800285a:	b480      	push	{r7}
 800285c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800285e:	e7fe      	b.n	800285e <HardFault_Handler+0x4>

08002860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002864:	e7fe      	b.n	8002864 <MemManage_Handler+0x4>

08002866 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002866:	b480      	push	{r7}
 8002868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800286a:	e7fe      	b.n	800286a <BusFault_Handler+0x4>

0800286c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002870:	e7fe      	b.n	8002870 <UsageFault_Handler+0x4>

08002872 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002872:	b480      	push	{r7}
 8002874:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002884:	bf00      	nop
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800288e:	b480      	push	{r7}
 8002890:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028a0:	f000 fb88 	bl	8002fb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028a4:	bf00      	nop
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
    return 1;
 80028ac:	2301      	movs	r3, #1
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <_kill>:

int _kill(int pid, int sig) {
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
    (void)pid;
    (void)sig;
    errno = EINVAL;
 80028c2:	f003 fd05 	bl	80062d0 <__errno>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2216      	movs	r2, #22
 80028ca:	601a      	str	r2, [r3, #0]
    return -1;
 80028cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <_exit>:

void _exit(int status) {
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
    _kill(status, -1);
 80028e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f7ff ffe7 	bl	80028b8 <_kill>
    while (1) {
 80028ea:	e7fe      	b.n	80028ea <_exit+0x12>

080028ec <_read>:
    } /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char * ptr, int len) {
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	e00a      	b.n	8002914 <_read+0x28>
        *ptr++ = __io_getchar();
 80028fe:	f3af 8000 	nop.w
 8002902:	4601      	mov	r1, r0
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	1c5a      	adds	r2, r3, #1
 8002908:	60ba      	str	r2, [r7, #8]
 800290a:	b2ca      	uxtb	r2, r1
 800290c:	701a      	strb	r2, [r3, #0]
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	3301      	adds	r3, #1
 8002912:	617b      	str	r3, [r7, #20]
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	429a      	cmp	r2, r3
 800291a:	dbf0      	blt.n	80028fe <_read+0x12>
    }

    return len;
 800291c:	687b      	ldr	r3, [r7, #4]
}
 800291e:	4618      	mov	r0, r3
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <_write>:

__attribute__((weak)) int _write(int file, char * ptr, int len) {
 8002926:	b580      	push	{r7, lr}
 8002928:	b086      	sub	sp, #24
 800292a:	af00      	add	r7, sp, #0
 800292c:	60f8      	str	r0, [r7, #12]
 800292e:	60b9      	str	r1, [r7, #8]
 8002930:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002932:	2300      	movs	r3, #0
 8002934:	617b      	str	r3, [r7, #20]
 8002936:	e009      	b.n	800294c <_write+0x26>
        __io_putchar(*ptr++);
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	1c5a      	adds	r2, r3, #1
 800293c:	60ba      	str	r2, [r7, #8]
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f3af 8000 	nop.w
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	3301      	adds	r3, #1
 800294a:	617b      	str	r3, [r7, #20]
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	429a      	cmp	r2, r3
 8002952:	dbf1      	blt.n	8002938 <_write+0x12>
    }
    return len;
 8002954:	687b      	ldr	r3, [r7, #4]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <_close>:

int _close(int file) {
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
    (void)file;
    return -1;
 8002966:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800296a:	4618      	mov	r0, r3
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <_fstat>:

int _fstat(int file, struct stat * st) {
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
 800297e:	6039      	str	r1, [r7, #0]
    (void)file;
    st->st_mode = S_IFCHR;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002986:	605a      	str	r2, [r3, #4]
    return 0;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <_isatty>:

int _isatty(int file) {
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
    (void)file;
    return 1;
 800299e:	2301      	movs	r3, #1
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <_lseek>:

int _lseek(int file, int ptr, int dir) {
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
    (void)file;
    (void)ptr;
    (void)dir;
    return 0;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
	...

080029c8 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void * _sbrk(ptrdiff_t incr) {
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029d0:	4a14      	ldr	r2, [pc, #80]	; (8002a24 <_sbrk+0x5c>)
 80029d2:	4b15      	ldr	r3, [pc, #84]	; (8002a28 <_sbrk+0x60>)
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	617b      	str	r3, [r7, #20]
    const uint8_t * max_heap = (uint8_t *)stack_limit;
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	613b      	str	r3, [r7, #16]
    uint8_t * prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 80029dc:	4b13      	ldr	r3, [pc, #76]	; (8002a2c <_sbrk+0x64>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d102      	bne.n	80029ea <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 80029e4:	4b11      	ldr	r3, [pc, #68]	; (8002a2c <_sbrk+0x64>)
 80029e6:	4a12      	ldr	r2, [pc, #72]	; (8002a30 <_sbrk+0x68>)
 80029e8:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 80029ea:	4b10      	ldr	r3, [pc, #64]	; (8002a2c <_sbrk+0x64>)
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4413      	add	r3, r2
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d207      	bcs.n	8002a08 <_sbrk+0x40>
        errno = ENOMEM;
 80029f8:	f003 fc6a 	bl	80062d0 <__errno>
 80029fc:	4603      	mov	r3, r0
 80029fe:	220c      	movs	r2, #12
 8002a00:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 8002a02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a06:	e009      	b.n	8002a1c <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 8002a08:	4b08      	ldr	r3, [pc, #32]	; (8002a2c <_sbrk+0x64>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 8002a0e:	4b07      	ldr	r3, [pc, #28]	; (8002a2c <_sbrk+0x64>)
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4413      	add	r3, r2
 8002a16:	4a05      	ldr	r2, [pc, #20]	; (8002a2c <_sbrk+0x64>)
 8002a18:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	20030000 	.word	0x20030000
 8002a28:	00000400 	.word	0x00000400
 8002a2c:	20001e38 	.word	0x20001e38
 8002a30:	20001fa8 	.word	0x20001fa8

08002a34 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8002a38:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <SystemInit+0x20>)
 8002a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3e:	4a05      	ldr	r2, [pc, #20]	; (8002a54 <SystemInit+0x20>)
 8002a40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 8002a48:	bf00      	nop
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	e000ed00 	.word	0xe000ed00

08002a58 <MX_UART5_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002a5c:	4b11      	ldr	r3, [pc, #68]	; (8002aa4 <MX_UART5_Init+0x4c>)
 8002a5e:	4a12      	ldr	r2, [pc, #72]	; (8002aa8 <MX_UART5_Init+0x50>)
 8002a60:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002a62:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <MX_UART5_Init+0x4c>)
 8002a64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a68:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002a6a:	4b0e      	ldr	r3, [pc, #56]	; (8002aa4 <MX_UART5_Init+0x4c>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002a70:	4b0c      	ldr	r3, [pc, #48]	; (8002aa4 <MX_UART5_Init+0x4c>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002a76:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <MX_UART5_Init+0x4c>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002a7c:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <MX_UART5_Init+0x4c>)
 8002a7e:	220c      	movs	r2, #12
 8002a80:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a82:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <MX_UART5_Init+0x4c>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a88:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <MX_UART5_Init+0x4c>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002a8e:	4805      	ldr	r0, [pc, #20]	; (8002aa4 <MX_UART5_Init+0x4c>)
 8002a90:	f002 ffba 	bl	8005a08 <HAL_UART_Init>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002a9a:	f7ff fe29 	bl	80026f0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002a9e:	bf00      	nop
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20001e3c 	.word	0x20001e3c
 8002aa8:	40005000 	.word	0x40005000

08002aac <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002ab0:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <MX_UART7_Init+0x4c>)
 8002ab2:	4a12      	ldr	r2, [pc, #72]	; (8002afc <MX_UART7_Init+0x50>)
 8002ab4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002ab6:	4b10      	ldr	r3, [pc, #64]	; (8002af8 <MX_UART7_Init+0x4c>)
 8002ab8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002abc:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002abe:	4b0e      	ldr	r3, [pc, #56]	; (8002af8 <MX_UART7_Init+0x4c>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002ac4:	4b0c      	ldr	r3, [pc, #48]	; (8002af8 <MX_UART7_Init+0x4c>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002aca:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <MX_UART7_Init+0x4c>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002ad0:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <MX_UART7_Init+0x4c>)
 8002ad2:	220c      	movs	r2, #12
 8002ad4:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ad6:	4b08      	ldr	r3, [pc, #32]	; (8002af8 <MX_UART7_Init+0x4c>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002adc:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <MX_UART7_Init+0x4c>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002ae2:	4805      	ldr	r0, [pc, #20]	; (8002af8 <MX_UART7_Init+0x4c>)
 8002ae4:	f002 ff90 	bl	8005a08 <HAL_UART_Init>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8002aee:	f7ff fdff 	bl	80026f0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002af2:	bf00      	nop
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20001e80 	.word	0x20001e80
 8002afc:	40007800 	.word	0x40007800

08002b00 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b04:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <MX_USART1_UART_Init+0x4c>)
 8002b06:	4a12      	ldr	r2, [pc, #72]	; (8002b50 <MX_USART1_UART_Init+0x50>)
 8002b08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b0a:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <MX_USART1_UART_Init+0x4c>)
 8002b0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b12:	4b0e      	ldr	r3, [pc, #56]	; (8002b4c <MX_USART1_UART_Init+0x4c>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b18:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <MX_USART1_UART_Init+0x4c>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b1e:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <MX_USART1_UART_Init+0x4c>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b24:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <MX_USART1_UART_Init+0x4c>)
 8002b26:	220c      	movs	r2, #12
 8002b28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b2a:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <MX_USART1_UART_Init+0x4c>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b30:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <MX_USART1_UART_Init+0x4c>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b36:	4805      	ldr	r0, [pc, #20]	; (8002b4c <MX_USART1_UART_Init+0x4c>)
 8002b38:	f002 ff66 	bl	8005a08 <HAL_UART_Init>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002b42:	f7ff fdd5 	bl	80026f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b46:	bf00      	nop
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20001ec4 	.word	0x20001ec4
 8002b50:	40011000 	.word	0x40011000

08002b54 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b58:	4b11      	ldr	r3, [pc, #68]	; (8002ba0 <MX_USART3_UART_Init+0x4c>)
 8002b5a:	4a12      	ldr	r2, [pc, #72]	; (8002ba4 <MX_USART3_UART_Init+0x50>)
 8002b5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002b5e:	4b10      	ldr	r3, [pc, #64]	; (8002ba0 <MX_USART3_UART_Init+0x4c>)
 8002b60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b66:	4b0e      	ldr	r3, [pc, #56]	; (8002ba0 <MX_USART3_UART_Init+0x4c>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ba0 <MX_USART3_UART_Init+0x4c>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b72:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <MX_USART3_UART_Init+0x4c>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b78:	4b09      	ldr	r3, [pc, #36]	; (8002ba0 <MX_USART3_UART_Init+0x4c>)
 8002b7a:	220c      	movs	r2, #12
 8002b7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b7e:	4b08      	ldr	r3, [pc, #32]	; (8002ba0 <MX_USART3_UART_Init+0x4c>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b84:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <MX_USART3_UART_Init+0x4c>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002b8a:	4805      	ldr	r0, [pc, #20]	; (8002ba0 <MX_USART3_UART_Init+0x4c>)
 8002b8c:	f002 ff3c 	bl	8005a08 <HAL_UART_Init>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002b96:	f7ff fdab 	bl	80026f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20001f08 	.word	0x20001f08
 8002ba4:	40004800 	.word	0x40004800

08002ba8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002bac:	4b11      	ldr	r3, [pc, #68]	; (8002bf4 <MX_USART6_UART_Init+0x4c>)
 8002bae:	4a12      	ldr	r2, [pc, #72]	; (8002bf8 <MX_USART6_UART_Init+0x50>)
 8002bb0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002bb2:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <MX_USART6_UART_Init+0x4c>)
 8002bb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bb8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002bba:	4b0e      	ldr	r3, [pc, #56]	; (8002bf4 <MX_USART6_UART_Init+0x4c>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002bc0:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <MX_USART6_UART_Init+0x4c>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002bc6:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <MX_USART6_UART_Init+0x4c>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002bcc:	4b09      	ldr	r3, [pc, #36]	; (8002bf4 <MX_USART6_UART_Init+0x4c>)
 8002bce:	220c      	movs	r2, #12
 8002bd0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bd2:	4b08      	ldr	r3, [pc, #32]	; (8002bf4 <MX_USART6_UART_Init+0x4c>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bd8:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <MX_USART6_UART_Init+0x4c>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002bde:	4805      	ldr	r0, [pc, #20]	; (8002bf4 <MX_USART6_UART_Init+0x4c>)
 8002be0:	f002 ff12 	bl	8005a08 <HAL_UART_Init>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002bea:	f7ff fd81 	bl	80026f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002bee:	bf00      	nop
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	20001f4c 	.word	0x20001f4c
 8002bf8:	40011400 	.word	0x40011400

08002bfc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b092      	sub	sp, #72	; 0x48
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	605a      	str	r2, [r3, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
 8002c10:	60da      	str	r2, [r3, #12]
 8002c12:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a9e      	ldr	r2, [pc, #632]	; (8002e94 <HAL_UART_MspInit+0x298>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d14b      	bne.n	8002cb6 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	633b      	str	r3, [r7, #48]	; 0x30
 8002c22:	4b9d      	ldr	r3, [pc, #628]	; (8002e98 <HAL_UART_MspInit+0x29c>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	4a9c      	ldr	r2, [pc, #624]	; (8002e98 <HAL_UART_MspInit+0x29c>)
 8002c28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c2e:	4b9a      	ldr	r3, [pc, #616]	; (8002e98 <HAL_UART_MspInit+0x29c>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c36:	633b      	str	r3, [r7, #48]	; 0x30
 8002c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c3e:	4b96      	ldr	r3, [pc, #600]	; (8002e98 <HAL_UART_MspInit+0x29c>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	4a95      	ldr	r2, [pc, #596]	; (8002e98 <HAL_UART_MspInit+0x29c>)
 8002c44:	f043 0304 	orr.w	r3, r3, #4
 8002c48:	6313      	str	r3, [r2, #48]	; 0x30
 8002c4a:	4b93      	ldr	r3, [pc, #588]	; (8002e98 <HAL_UART_MspInit+0x29c>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	f003 0304 	and.w	r3, r3, #4
 8002c52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c56:	2300      	movs	r3, #0
 8002c58:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c5a:	4b8f      	ldr	r3, [pc, #572]	; (8002e98 <HAL_UART_MspInit+0x29c>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	4a8e      	ldr	r2, [pc, #568]	; (8002e98 <HAL_UART_MspInit+0x29c>)
 8002c60:	f043 0308 	orr.w	r3, r3, #8
 8002c64:	6313      	str	r3, [r2, #48]	; 0x30
 8002c66:	4b8c      	ldr	r3, [pc, #560]	; (8002e98 <HAL_UART_MspInit+0x29c>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002c72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c76:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c78:	2302      	movs	r3, #2
 8002c7a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c80:	2303      	movs	r3, #3
 8002c82:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002c84:	2308      	movs	r3, #8
 8002c86:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4883      	ldr	r0, [pc, #524]	; (8002e9c <HAL_UART_MspInit+0x2a0>)
 8002c90:	f000 faba 	bl	8003208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c94:	2304      	movs	r3, #4
 8002c96:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c98:	2302      	movs	r3, #2
 8002c9a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002ca4:	2308      	movs	r3, #8
 8002ca6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ca8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002cac:	4619      	mov	r1, r3
 8002cae:	487c      	ldr	r0, [pc, #496]	; (8002ea0 <HAL_UART_MspInit+0x2a4>)
 8002cb0:	f000 faaa 	bl	8003208 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002cb4:	e0e9      	b.n	8002e8a <HAL_UART_MspInit+0x28e>
  else if(uartHandle->Instance==UART7)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a7a      	ldr	r2, [pc, #488]	; (8002ea4 <HAL_UART_MspInit+0x2a8>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d13c      	bne.n	8002d3a <HAL_UART_MspInit+0x13e>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc4:	4b74      	ldr	r3, [pc, #464]	; (8002e98 <HAL_UART_MspInit+0x29c>)
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	4a73      	ldr	r2, [pc, #460]	; (8002e98 <HAL_UART_MspInit+0x29c>)
 8002cca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002cce:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd0:	4b71      	ldr	r3, [pc, #452]	; (8002e98 <HAL_UART_MspInit+0x29c>)
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cdc:	2300      	movs	r3, #0
 8002cde:	623b      	str	r3, [r7, #32]
 8002ce0:	4b6d      	ldr	r3, [pc, #436]	; (8002e98 <HAL_UART_MspInit+0x29c>)
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce4:	4a6c      	ldr	r2, [pc, #432]	; (8002e98 <HAL_UART_MspInit+0x29c>)
 8002ce6:	f043 0320 	orr.w	r3, r3, #32
 8002cea:	6313      	str	r3, [r2, #48]	; 0x30
 8002cec:	4b6a      	ldr	r3, [pc, #424]	; (8002e98 <HAL_UART_MspInit+0x29c>)
 8002cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf0:	f003 0320 	and.w	r3, r3, #32
 8002cf4:	623b      	str	r3, [r7, #32]
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002cf8:	2340      	movs	r3, #64	; 0x40
 8002cfa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d00:	2301      	movs	r3, #1
 8002d02:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d04:	2303      	movs	r3, #3
 8002d06:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002d08:	2308      	movs	r3, #8
 8002d0a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d10:	4619      	mov	r1, r3
 8002d12:	4865      	ldr	r0, [pc, #404]	; (8002ea8 <HAL_UART_MspInit+0x2ac>)
 8002d14:	f000 fa78 	bl	8003208 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002d18:	2380      	movs	r3, #128	; 0x80
 8002d1a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d20:	2300      	movs	r3, #0
 8002d22:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d24:	2303      	movs	r3, #3
 8002d26:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002d28:	2308      	movs	r3, #8
 8002d2a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d2c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d30:	4619      	mov	r1, r3
 8002d32:	485d      	ldr	r0, [pc, #372]	; (8002ea8 <HAL_UART_MspInit+0x2ac>)
 8002d34:	f000 fa68 	bl	8003208 <HAL_GPIO_Init>
}
 8002d38:	e0a7      	b.n	8002e8a <HAL_UART_MspInit+0x28e>
  else if(uartHandle->Instance==USART1)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a5b      	ldr	r2, [pc, #364]	; (8002eac <HAL_UART_MspInit+0x2b0>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d13e      	bne.n	8002dc2 <HAL_UART_MspInit+0x1c6>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d44:	2300      	movs	r3, #0
 8002d46:	61fb      	str	r3, [r7, #28]
 8002d48:	4b53      	ldr	r3, [pc, #332]	; (8002e98 <HAL_UART_MspInit+0x29c>)
 8002d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4c:	4a52      	ldr	r2, [pc, #328]	; (8002e98 <HAL_UART_MspInit+0x29c>)
 8002d4e:	f043 0310 	orr.w	r3, r3, #16
 8002d52:	6453      	str	r3, [r2, #68]	; 0x44
 8002d54:	4b50      	ldr	r3, [pc, #320]	; (8002e98 <HAL_UART_MspInit+0x29c>)
 8002d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d58:	f003 0310 	and.w	r3, r3, #16
 8002d5c:	61fb      	str	r3, [r7, #28]
 8002d5e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d60:	2300      	movs	r3, #0
 8002d62:	61bb      	str	r3, [r7, #24]
 8002d64:	4b4c      	ldr	r3, [pc, #304]	; (8002e98 <HAL_UART_MspInit+0x29c>)
 8002d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d68:	4a4b      	ldr	r2, [pc, #300]	; (8002e98 <HAL_UART_MspInit+0x29c>)
 8002d6a:	f043 0301 	orr.w	r3, r3, #1
 8002d6e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d70:	4b49      	ldr	r3, [pc, #292]	; (8002e98 <HAL_UART_MspInit+0x29c>)
 8002d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	61bb      	str	r3, [r7, #24]
 8002d7a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d80:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d82:	2302      	movs	r3, #2
 8002d84:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d86:	2300      	movs	r3, #0
 8002d88:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d8e:	2307      	movs	r3, #7
 8002d90:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d96:	4619      	mov	r1, r3
 8002d98:	4845      	ldr	r0, [pc, #276]	; (8002eb0 <HAL_UART_MspInit+0x2b4>)
 8002d9a:	f000 fa35 	bl	8003208 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002da2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da4:	2302      	movs	r3, #2
 8002da6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002da8:	2301      	movs	r3, #1
 8002daa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dac:	2303      	movs	r3, #3
 8002dae:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002db0:	2307      	movs	r3, #7
 8002db2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002db8:	4619      	mov	r1, r3
 8002dba:	483d      	ldr	r0, [pc, #244]	; (8002eb0 <HAL_UART_MspInit+0x2b4>)
 8002dbc:	f000 fa24 	bl	8003208 <HAL_GPIO_Init>
}
 8002dc0:	e063      	b.n	8002e8a <HAL_UART_MspInit+0x28e>
  else if(uartHandle->Instance==USART3)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a3b      	ldr	r2, [pc, #236]	; (8002eb4 <HAL_UART_MspInit+0x2b8>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d12d      	bne.n	8002e28 <HAL_UART_MspInit+0x22c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]
 8002dd0:	4b31      	ldr	r3, [pc, #196]	; (8002e98 <HAL_UART_MspInit+0x29c>)
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	4a30      	ldr	r2, [pc, #192]	; (8002e98 <HAL_UART_MspInit+0x29c>)
 8002dd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dda:	6413      	str	r3, [r2, #64]	; 0x40
 8002ddc:	4b2e      	ldr	r3, [pc, #184]	; (8002e98 <HAL_UART_MspInit+0x29c>)
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002de4:	617b      	str	r3, [r7, #20]
 8002de6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002de8:	2300      	movs	r3, #0
 8002dea:	613b      	str	r3, [r7, #16]
 8002dec:	4b2a      	ldr	r3, [pc, #168]	; (8002e98 <HAL_UART_MspInit+0x29c>)
 8002dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df0:	4a29      	ldr	r2, [pc, #164]	; (8002e98 <HAL_UART_MspInit+0x29c>)
 8002df2:	f043 0308 	orr.w	r3, r3, #8
 8002df6:	6313      	str	r3, [r2, #48]	; 0x30
 8002df8:	4b27      	ldr	r3, [pc, #156]	; (8002e98 <HAL_UART_MspInit+0x29c>)
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	613b      	str	r3, [r7, #16]
 8002e02:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e04:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e08:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e12:	2303      	movs	r3, #3
 8002e14:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e16:	2307      	movs	r3, #7
 8002e18:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e1e:	4619      	mov	r1, r3
 8002e20:	481f      	ldr	r0, [pc, #124]	; (8002ea0 <HAL_UART_MspInit+0x2a4>)
 8002e22:	f000 f9f1 	bl	8003208 <HAL_GPIO_Init>
}
 8002e26:	e030      	b.n	8002e8a <HAL_UART_MspInit+0x28e>
  else if(uartHandle->Instance==USART6)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a22      	ldr	r2, [pc, #136]	; (8002eb8 <HAL_UART_MspInit+0x2bc>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d12b      	bne.n	8002e8a <HAL_UART_MspInit+0x28e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002e32:	2300      	movs	r3, #0
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	4b18      	ldr	r3, [pc, #96]	; (8002e98 <HAL_UART_MspInit+0x29c>)
 8002e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3a:	4a17      	ldr	r2, [pc, #92]	; (8002e98 <HAL_UART_MspInit+0x29c>)
 8002e3c:	f043 0320 	orr.w	r3, r3, #32
 8002e40:	6453      	str	r3, [r2, #68]	; 0x44
 8002e42:	4b15      	ldr	r3, [pc, #84]	; (8002e98 <HAL_UART_MspInit+0x29c>)
 8002e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e46:	f003 0320 	and.w	r3, r3, #32
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60bb      	str	r3, [r7, #8]
 8002e52:	4b11      	ldr	r3, [pc, #68]	; (8002e98 <HAL_UART_MspInit+0x29c>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	4a10      	ldr	r2, [pc, #64]	; (8002e98 <HAL_UART_MspInit+0x29c>)
 8002e58:	f043 0304 	orr.w	r3, r3, #4
 8002e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e5e:	4b0e      	ldr	r3, [pc, #56]	; (8002e98 <HAL_UART_MspInit+0x29c>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	60bb      	str	r3, [r7, #8]
 8002e68:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e6a:	23c0      	movs	r3, #192	; 0xc0
 8002e6c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6e:	2302      	movs	r3, #2
 8002e70:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e72:	2300      	movs	r3, #0
 8002e74:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e76:	2303      	movs	r3, #3
 8002e78:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002e7a:	2308      	movs	r3, #8
 8002e7c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e7e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e82:	4619      	mov	r1, r3
 8002e84:	4805      	ldr	r0, [pc, #20]	; (8002e9c <HAL_UART_MspInit+0x2a0>)
 8002e86:	f000 f9bf 	bl	8003208 <HAL_GPIO_Init>
}
 8002e8a:	bf00      	nop
 8002e8c:	3748      	adds	r7, #72	; 0x48
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40005000 	.word	0x40005000
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	40020800 	.word	0x40020800
 8002ea0:	40020c00 	.word	0x40020c00
 8002ea4:	40007800 	.word	0x40007800
 8002ea8:	40021400 	.word	0x40021400
 8002eac:	40011000 	.word	0x40011000
 8002eb0:	40020000 	.word	0x40020000
 8002eb4:	40004800 	.word	0x40004800
 8002eb8:	40011400 	.word	0x40011400

08002ebc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack       /* set stack pointer */
 8002ebc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ef4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ec0:	480d      	ldr	r0, [pc, #52]	; (8002ef8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ec2:	490e      	ldr	r1, [pc, #56]	; (8002efc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ec4:	4a0e      	ldr	r2, [pc, #56]	; (8002f00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ec6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ec8:	e002      	b.n	8002ed0 <LoopCopyDataInit>

08002eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ece:	3304      	adds	r3, #4

08002ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ed4:	d3f9      	bcc.n	8002eca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ed6:	4a0b      	ldr	r2, [pc, #44]	; (8002f04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ed8:	4c0b      	ldr	r4, [pc, #44]	; (8002f08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002edc:	e001      	b.n	8002ee2 <LoopFillZerobss>

08002ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ee0:	3204      	adds	r2, #4

08002ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ee4:	d3fb      	bcc.n	8002ede <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ee6:	f7ff fda5 	bl	8002a34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eea:	f003 f9f7 	bl	80062dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eee:	f7ff fa63 	bl	80023b8 <main>
  bx  lr
 8002ef2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002ef4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002efc:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8002f00:	0800b6f4 	.word	0x0800b6f4
  ldr r2, =_sbss
 8002f04:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8002f08:	20001fa4 	.word	0x20001fa4

08002f0c <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f0c:	e7fe      	b.n	8002f0c <ADC_IRQHandler>
	...

08002f10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f14:	4b0e      	ldr	r3, [pc, #56]	; (8002f50 <HAL_Init+0x40>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a0d      	ldr	r2, [pc, #52]	; (8002f50 <HAL_Init+0x40>)
 8002f1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f20:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <HAL_Init+0x40>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a0a      	ldr	r2, [pc, #40]	; (8002f50 <HAL_Init+0x40>)
 8002f26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f2c:	4b08      	ldr	r3, [pc, #32]	; (8002f50 <HAL_Init+0x40>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a07      	ldr	r2, [pc, #28]	; (8002f50 <HAL_Init+0x40>)
 8002f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f38:	2003      	movs	r0, #3
 8002f3a:	f000 f931 	bl	80031a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f3e:	200f      	movs	r0, #15
 8002f40:	f000 f808 	bl	8002f54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f44:	f7ff fc5e 	bl	8002804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	40023c00 	.word	0x40023c00

08002f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f5c:	4b12      	ldr	r3, [pc, #72]	; (8002fa8 <HAL_InitTick+0x54>)
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	4b12      	ldr	r3, [pc, #72]	; (8002fac <HAL_InitTick+0x58>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	4619      	mov	r1, r3
 8002f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 f93b 	bl	80031ee <HAL_SYSTICK_Config>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e00e      	b.n	8002fa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b0f      	cmp	r3, #15
 8002f86:	d80a      	bhi.n	8002f9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f88:	2200      	movs	r2, #0
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f90:	f000 f911 	bl	80031b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f94:	4a06      	ldr	r2, [pc, #24]	; (8002fb0 <HAL_InitTick+0x5c>)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	e000      	b.n	8002fa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	20000030 	.word	0x20000030
 8002fac:	20000038 	.word	0x20000038
 8002fb0:	20000034 	.word	0x20000034

08002fb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fb8:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <HAL_IncTick+0x20>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <HAL_IncTick+0x24>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	4a04      	ldr	r2, [pc, #16]	; (8002fd8 <HAL_IncTick+0x24>)
 8002fc6:	6013      	str	r3, [r2, #0]
}
 8002fc8:	bf00      	nop
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	20000038 	.word	0x20000038
 8002fd8:	20001f90 	.word	0x20001f90

08002fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  return uwTick;
 8002fe0:	4b03      	ldr	r3, [pc, #12]	; (8002ff0 <HAL_GetTick+0x14>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	20001f90 	.word	0x20001f90

08002ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ffc:	f7ff ffee 	bl	8002fdc <HAL_GetTick>
 8003000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800300c:	d005      	beq.n	800301a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800300e:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <HAL_Delay+0x44>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	461a      	mov	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4413      	add	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800301a:	bf00      	nop
 800301c:	f7ff ffde 	bl	8002fdc <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	429a      	cmp	r2, r3
 800302a:	d8f7      	bhi.n	800301c <HAL_Delay+0x28>
  {
  }
}
 800302c:	bf00      	nop
 800302e:	bf00      	nop
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	20000038 	.word	0x20000038

0800303c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800304c:	4b0c      	ldr	r3, [pc, #48]	; (8003080 <__NVIC_SetPriorityGrouping+0x44>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003058:	4013      	ands	r3, r2
 800305a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003064:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800306c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800306e:	4a04      	ldr	r2, [pc, #16]	; (8003080 <__NVIC_SetPriorityGrouping+0x44>)
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	60d3      	str	r3, [r2, #12]
}
 8003074:	bf00      	nop
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	e000ed00 	.word	0xe000ed00

08003084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003088:	4b04      	ldr	r3, [pc, #16]	; (800309c <__NVIC_GetPriorityGrouping+0x18>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	0a1b      	lsrs	r3, r3, #8
 800308e:	f003 0307 	and.w	r3, r3, #7
}
 8003092:	4618      	mov	r0, r3
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	e000ed00 	.word	0xe000ed00

080030a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	6039      	str	r1, [r7, #0]
 80030aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	db0a      	blt.n	80030ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	490c      	ldr	r1, [pc, #48]	; (80030ec <__NVIC_SetPriority+0x4c>)
 80030ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030be:	0112      	lsls	r2, r2, #4
 80030c0:	b2d2      	uxtb	r2, r2
 80030c2:	440b      	add	r3, r1
 80030c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030c8:	e00a      	b.n	80030e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	4908      	ldr	r1, [pc, #32]	; (80030f0 <__NVIC_SetPriority+0x50>)
 80030d0:	79fb      	ldrb	r3, [r7, #7]
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	3b04      	subs	r3, #4
 80030d8:	0112      	lsls	r2, r2, #4
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	440b      	add	r3, r1
 80030de:	761a      	strb	r2, [r3, #24]
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	e000e100 	.word	0xe000e100
 80030f0:	e000ed00 	.word	0xe000ed00

080030f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b089      	sub	sp, #36	; 0x24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	f1c3 0307 	rsb	r3, r3, #7
 800310e:	2b04      	cmp	r3, #4
 8003110:	bf28      	it	cs
 8003112:	2304      	movcs	r3, #4
 8003114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	3304      	adds	r3, #4
 800311a:	2b06      	cmp	r3, #6
 800311c:	d902      	bls.n	8003124 <NVIC_EncodePriority+0x30>
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	3b03      	subs	r3, #3
 8003122:	e000      	b.n	8003126 <NVIC_EncodePriority+0x32>
 8003124:	2300      	movs	r3, #0
 8003126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003128:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	43da      	mvns	r2, r3
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	401a      	ands	r2, r3
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800313c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	fa01 f303 	lsl.w	r3, r1, r3
 8003146:	43d9      	mvns	r1, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800314c:	4313      	orrs	r3, r2
         );
}
 800314e:	4618      	mov	r0, r3
 8003150:	3724      	adds	r7, #36	; 0x24
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
	...

0800315c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3b01      	subs	r3, #1
 8003168:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800316c:	d301      	bcc.n	8003172 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800316e:	2301      	movs	r3, #1
 8003170:	e00f      	b.n	8003192 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003172:	4a0a      	ldr	r2, [pc, #40]	; (800319c <SysTick_Config+0x40>)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3b01      	subs	r3, #1
 8003178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800317a:	210f      	movs	r1, #15
 800317c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003180:	f7ff ff8e 	bl	80030a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003184:	4b05      	ldr	r3, [pc, #20]	; (800319c <SysTick_Config+0x40>)
 8003186:	2200      	movs	r2, #0
 8003188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800318a:	4b04      	ldr	r3, [pc, #16]	; (800319c <SysTick_Config+0x40>)
 800318c:	2207      	movs	r2, #7
 800318e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	e000e010 	.word	0xe000e010

080031a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7ff ff47 	bl	800303c <__NVIC_SetPriorityGrouping>
}
 80031ae:	bf00      	nop
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b086      	sub	sp, #24
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	4603      	mov	r3, r0
 80031be:	60b9      	str	r1, [r7, #8]
 80031c0:	607a      	str	r2, [r7, #4]
 80031c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031c8:	f7ff ff5c 	bl	8003084 <__NVIC_GetPriorityGrouping>
 80031cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	68b9      	ldr	r1, [r7, #8]
 80031d2:	6978      	ldr	r0, [r7, #20]
 80031d4:	f7ff ff8e 	bl	80030f4 <NVIC_EncodePriority>
 80031d8:	4602      	mov	r2, r0
 80031da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031de:	4611      	mov	r1, r2
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff ff5d 	bl	80030a0 <__NVIC_SetPriority>
}
 80031e6:	bf00      	nop
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b082      	sub	sp, #8
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7ff ffb0 	bl	800315c <SysTick_Config>
 80031fc:	4603      	mov	r3, r0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003208:	b480      	push	{r7}
 800320a:	b089      	sub	sp, #36	; 0x24
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003216:	2300      	movs	r3, #0
 8003218:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800321a:	2300      	movs	r3, #0
 800321c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800321e:	2300      	movs	r3, #0
 8003220:	61fb      	str	r3, [r7, #28]
 8003222:	e177      	b.n	8003514 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003224:	2201      	movs	r2, #1
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	4013      	ands	r3, r2
 8003236:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	429a      	cmp	r2, r3
 800323e:	f040 8166 	bne.w	800350e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	2b01      	cmp	r3, #1
 800324c:	d005      	beq.n	800325a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003256:	2b02      	cmp	r3, #2
 8003258:	d130      	bne.n	80032bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	2203      	movs	r2, #3
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	43db      	mvns	r3, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4013      	ands	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	68da      	ldr	r2, [r3, #12]
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	4313      	orrs	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003290:	2201      	movs	r2, #1
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	43db      	mvns	r3, r3
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	4013      	ands	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	091b      	lsrs	r3, r3, #4
 80032a6:	f003 0201 	and.w	r2, r3, #1
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 0303 	and.w	r3, r3, #3
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d017      	beq.n	80032f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	2203      	movs	r2, #3
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	43db      	mvns	r3, r3
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	4013      	ands	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 0303 	and.w	r3, r3, #3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d123      	bne.n	800334c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	08da      	lsrs	r2, r3, #3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3208      	adds	r2, #8
 800330c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003310:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	220f      	movs	r2, #15
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	43db      	mvns	r3, r3
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	4013      	ands	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	691a      	ldr	r2, [r3, #16]
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	4313      	orrs	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	08da      	lsrs	r2, r3, #3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	3208      	adds	r2, #8
 8003346:	69b9      	ldr	r1, [r7, #24]
 8003348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	2203      	movs	r2, #3
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	43db      	mvns	r3, r3
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	4013      	ands	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f003 0203 	and.w	r2, r3, #3
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	4313      	orrs	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 80c0 	beq.w	800350e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800338e:	2300      	movs	r3, #0
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	4b66      	ldr	r3, [pc, #408]	; (800352c <HAL_GPIO_Init+0x324>)
 8003394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003396:	4a65      	ldr	r2, [pc, #404]	; (800352c <HAL_GPIO_Init+0x324>)
 8003398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800339c:	6453      	str	r3, [r2, #68]	; 0x44
 800339e:	4b63      	ldr	r3, [pc, #396]	; (800352c <HAL_GPIO_Init+0x324>)
 80033a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033aa:	4a61      	ldr	r2, [pc, #388]	; (8003530 <HAL_GPIO_Init+0x328>)
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	089b      	lsrs	r3, r3, #2
 80033b0:	3302      	adds	r3, #2
 80033b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	220f      	movs	r2, #15
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	43db      	mvns	r3, r3
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	4013      	ands	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a58      	ldr	r2, [pc, #352]	; (8003534 <HAL_GPIO_Init+0x32c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d037      	beq.n	8003446 <HAL_GPIO_Init+0x23e>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a57      	ldr	r2, [pc, #348]	; (8003538 <HAL_GPIO_Init+0x330>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d031      	beq.n	8003442 <HAL_GPIO_Init+0x23a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a56      	ldr	r2, [pc, #344]	; (800353c <HAL_GPIO_Init+0x334>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d02b      	beq.n	800343e <HAL_GPIO_Init+0x236>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a55      	ldr	r2, [pc, #340]	; (8003540 <HAL_GPIO_Init+0x338>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d025      	beq.n	800343a <HAL_GPIO_Init+0x232>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a54      	ldr	r2, [pc, #336]	; (8003544 <HAL_GPIO_Init+0x33c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d01f      	beq.n	8003436 <HAL_GPIO_Init+0x22e>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a53      	ldr	r2, [pc, #332]	; (8003548 <HAL_GPIO_Init+0x340>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d019      	beq.n	8003432 <HAL_GPIO_Init+0x22a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a52      	ldr	r2, [pc, #328]	; (800354c <HAL_GPIO_Init+0x344>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d013      	beq.n	800342e <HAL_GPIO_Init+0x226>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a51      	ldr	r2, [pc, #324]	; (8003550 <HAL_GPIO_Init+0x348>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d00d      	beq.n	800342a <HAL_GPIO_Init+0x222>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a50      	ldr	r2, [pc, #320]	; (8003554 <HAL_GPIO_Init+0x34c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d007      	beq.n	8003426 <HAL_GPIO_Init+0x21e>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a4f      	ldr	r2, [pc, #316]	; (8003558 <HAL_GPIO_Init+0x350>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d101      	bne.n	8003422 <HAL_GPIO_Init+0x21a>
 800341e:	2309      	movs	r3, #9
 8003420:	e012      	b.n	8003448 <HAL_GPIO_Init+0x240>
 8003422:	230a      	movs	r3, #10
 8003424:	e010      	b.n	8003448 <HAL_GPIO_Init+0x240>
 8003426:	2308      	movs	r3, #8
 8003428:	e00e      	b.n	8003448 <HAL_GPIO_Init+0x240>
 800342a:	2307      	movs	r3, #7
 800342c:	e00c      	b.n	8003448 <HAL_GPIO_Init+0x240>
 800342e:	2306      	movs	r3, #6
 8003430:	e00a      	b.n	8003448 <HAL_GPIO_Init+0x240>
 8003432:	2305      	movs	r3, #5
 8003434:	e008      	b.n	8003448 <HAL_GPIO_Init+0x240>
 8003436:	2304      	movs	r3, #4
 8003438:	e006      	b.n	8003448 <HAL_GPIO_Init+0x240>
 800343a:	2303      	movs	r3, #3
 800343c:	e004      	b.n	8003448 <HAL_GPIO_Init+0x240>
 800343e:	2302      	movs	r3, #2
 8003440:	e002      	b.n	8003448 <HAL_GPIO_Init+0x240>
 8003442:	2301      	movs	r3, #1
 8003444:	e000      	b.n	8003448 <HAL_GPIO_Init+0x240>
 8003446:	2300      	movs	r3, #0
 8003448:	69fa      	ldr	r2, [r7, #28]
 800344a:	f002 0203 	and.w	r2, r2, #3
 800344e:	0092      	lsls	r2, r2, #2
 8003450:	4093      	lsls	r3, r2
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	4313      	orrs	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003458:	4935      	ldr	r1, [pc, #212]	; (8003530 <HAL_GPIO_Init+0x328>)
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	089b      	lsrs	r3, r3, #2
 800345e:	3302      	adds	r3, #2
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003466:	4b3d      	ldr	r3, [pc, #244]	; (800355c <HAL_GPIO_Init+0x354>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	43db      	mvns	r3, r3
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	4013      	ands	r3, r2
 8003474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	4313      	orrs	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800348a:	4a34      	ldr	r2, [pc, #208]	; (800355c <HAL_GPIO_Init+0x354>)
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003490:	4b32      	ldr	r3, [pc, #200]	; (800355c <HAL_GPIO_Init+0x354>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	43db      	mvns	r3, r3
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4013      	ands	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034b4:	4a29      	ldr	r2, [pc, #164]	; (800355c <HAL_GPIO_Init+0x354>)
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034ba:	4b28      	ldr	r3, [pc, #160]	; (800355c <HAL_GPIO_Init+0x354>)
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	43db      	mvns	r3, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4013      	ands	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	4313      	orrs	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034de:	4a1f      	ldr	r2, [pc, #124]	; (800355c <HAL_GPIO_Init+0x354>)
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034e4:	4b1d      	ldr	r3, [pc, #116]	; (800355c <HAL_GPIO_Init+0x354>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	43db      	mvns	r3, r3
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	4013      	ands	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	4313      	orrs	r3, r2
 8003506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003508:	4a14      	ldr	r2, [pc, #80]	; (800355c <HAL_GPIO_Init+0x354>)
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	3301      	adds	r3, #1
 8003512:	61fb      	str	r3, [r7, #28]
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	2b0f      	cmp	r3, #15
 8003518:	f67f ae84 	bls.w	8003224 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800351c:	bf00      	nop
 800351e:	bf00      	nop
 8003520:	3724      	adds	r7, #36	; 0x24
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	40023800 	.word	0x40023800
 8003530:	40013800 	.word	0x40013800
 8003534:	40020000 	.word	0x40020000
 8003538:	40020400 	.word	0x40020400
 800353c:	40020800 	.word	0x40020800
 8003540:	40020c00 	.word	0x40020c00
 8003544:	40021000 	.word	0x40021000
 8003548:	40021400 	.word	0x40021400
 800354c:	40021800 	.word	0x40021800
 8003550:	40021c00 	.word	0x40021c00
 8003554:	40022000 	.word	0x40022000
 8003558:	40022400 	.word	0x40022400
 800355c:	40013c00 	.word	0x40013c00

08003560 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e12b      	b.n	80037ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d106      	bne.n	800358c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7fe fece 	bl	8002328 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2224      	movs	r2, #36	; 0x24
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 0201 	bic.w	r2, r2, #1
 80035a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035c4:	f001 fd3a 	bl	800503c <HAL_RCC_GetPCLK1Freq>
 80035c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	4a81      	ldr	r2, [pc, #516]	; (80037d4 <HAL_I2C_Init+0x274>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d807      	bhi.n	80035e4 <HAL_I2C_Init+0x84>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4a80      	ldr	r2, [pc, #512]	; (80037d8 <HAL_I2C_Init+0x278>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	bf94      	ite	ls
 80035dc:	2301      	movls	r3, #1
 80035de:	2300      	movhi	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	e006      	b.n	80035f2 <HAL_I2C_Init+0x92>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4a7d      	ldr	r2, [pc, #500]	; (80037dc <HAL_I2C_Init+0x27c>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	bf94      	ite	ls
 80035ec:	2301      	movls	r3, #1
 80035ee:	2300      	movhi	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e0e7      	b.n	80037ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	4a78      	ldr	r2, [pc, #480]	; (80037e0 <HAL_I2C_Init+0x280>)
 80035fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003602:	0c9b      	lsrs	r3, r3, #18
 8003604:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	430a      	orrs	r2, r1
 8003618:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	4a6a      	ldr	r2, [pc, #424]	; (80037d4 <HAL_I2C_Init+0x274>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d802      	bhi.n	8003634 <HAL_I2C_Init+0xd4>
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	3301      	adds	r3, #1
 8003632:	e009      	b.n	8003648 <HAL_I2C_Init+0xe8>
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800363a:	fb02 f303 	mul.w	r3, r2, r3
 800363e:	4a69      	ldr	r2, [pc, #420]	; (80037e4 <HAL_I2C_Init+0x284>)
 8003640:	fba2 2303 	umull	r2, r3, r2, r3
 8003644:	099b      	lsrs	r3, r3, #6
 8003646:	3301      	adds	r3, #1
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6812      	ldr	r2, [r2, #0]
 800364c:	430b      	orrs	r3, r1
 800364e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800365a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	495c      	ldr	r1, [pc, #368]	; (80037d4 <HAL_I2C_Init+0x274>)
 8003664:	428b      	cmp	r3, r1
 8003666:	d819      	bhi.n	800369c <HAL_I2C_Init+0x13c>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	1e59      	subs	r1, r3, #1
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	fbb1 f3f3 	udiv	r3, r1, r3
 8003676:	1c59      	adds	r1, r3, #1
 8003678:	f640 73fc 	movw	r3, #4092	; 0xffc
 800367c:	400b      	ands	r3, r1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00a      	beq.n	8003698 <HAL_I2C_Init+0x138>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	1e59      	subs	r1, r3, #1
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003690:	3301      	adds	r3, #1
 8003692:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003696:	e051      	b.n	800373c <HAL_I2C_Init+0x1dc>
 8003698:	2304      	movs	r3, #4
 800369a:	e04f      	b.n	800373c <HAL_I2C_Init+0x1dc>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d111      	bne.n	80036c8 <HAL_I2C_Init+0x168>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	1e58      	subs	r0, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6859      	ldr	r1, [r3, #4]
 80036ac:	460b      	mov	r3, r1
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	440b      	add	r3, r1
 80036b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036b6:	3301      	adds	r3, #1
 80036b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036bc:	2b00      	cmp	r3, #0
 80036be:	bf0c      	ite	eq
 80036c0:	2301      	moveq	r3, #1
 80036c2:	2300      	movne	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	e012      	b.n	80036ee <HAL_I2C_Init+0x18e>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	1e58      	subs	r0, r3, #1
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6859      	ldr	r1, [r3, #4]
 80036d0:	460b      	mov	r3, r1
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	0099      	lsls	r1, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	fbb0 f3f3 	udiv	r3, r0, r3
 80036de:	3301      	adds	r3, #1
 80036e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	bf0c      	ite	eq
 80036e8:	2301      	moveq	r3, #1
 80036ea:	2300      	movne	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <HAL_I2C_Init+0x196>
 80036f2:	2301      	movs	r3, #1
 80036f4:	e022      	b.n	800373c <HAL_I2C_Init+0x1dc>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10e      	bne.n	800371c <HAL_I2C_Init+0x1bc>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	1e58      	subs	r0, r3, #1
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6859      	ldr	r1, [r3, #4]
 8003706:	460b      	mov	r3, r1
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	440b      	add	r3, r1
 800370c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003710:	3301      	adds	r3, #1
 8003712:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800371a:	e00f      	b.n	800373c <HAL_I2C_Init+0x1dc>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	1e58      	subs	r0, r3, #1
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6859      	ldr	r1, [r3, #4]
 8003724:	460b      	mov	r3, r1
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	0099      	lsls	r1, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003732:	3301      	adds	r3, #1
 8003734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003738:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800373c:	6879      	ldr	r1, [r7, #4]
 800373e:	6809      	ldr	r1, [r1, #0]
 8003740:	4313      	orrs	r3, r2
 8003742:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69da      	ldr	r2, [r3, #28]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800376a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6911      	ldr	r1, [r2, #16]
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	68d2      	ldr	r2, [r2, #12]
 8003776:	4311      	orrs	r1, r2
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6812      	ldr	r2, [r2, #0]
 800377c:	430b      	orrs	r3, r1
 800377e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	695a      	ldr	r2, [r3, #20]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0201 	orr.w	r2, r2, #1
 80037aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2220      	movs	r2, #32
 80037b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	000186a0 	.word	0x000186a0
 80037d8:	001e847f 	.word	0x001e847f
 80037dc:	003d08ff 	.word	0x003d08ff
 80037e0:	431bde83 	.word	0x431bde83
 80037e4:	10624dd3 	.word	0x10624dd3

080037e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b088      	sub	sp, #32
 80037ec:	af02      	add	r7, sp, #8
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	607a      	str	r2, [r7, #4]
 80037f2:	461a      	mov	r2, r3
 80037f4:	460b      	mov	r3, r1
 80037f6:	817b      	strh	r3, [r7, #10]
 80037f8:	4613      	mov	r3, r2
 80037fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037fc:	f7ff fbee 	bl	8002fdc <HAL_GetTick>
 8003800:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b20      	cmp	r3, #32
 800380c:	f040 80e0 	bne.w	80039d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	2319      	movs	r3, #25
 8003816:	2201      	movs	r2, #1
 8003818:	4970      	ldr	r1, [pc, #448]	; (80039dc <HAL_I2C_Master_Transmit+0x1f4>)
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 fd86 	bl	800432c <I2C_WaitOnFlagUntilTimeout>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003826:	2302      	movs	r3, #2
 8003828:	e0d3      	b.n	80039d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003830:	2b01      	cmp	r3, #1
 8003832:	d101      	bne.n	8003838 <HAL_I2C_Master_Transmit+0x50>
 8003834:	2302      	movs	r3, #2
 8003836:	e0cc      	b.n	80039d2 <HAL_I2C_Master_Transmit+0x1ea>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b01      	cmp	r3, #1
 800384c:	d007      	beq.n	800385e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f042 0201 	orr.w	r2, r2, #1
 800385c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800386c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2221      	movs	r2, #33	; 0x21
 8003872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2210      	movs	r2, #16
 800387a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	893a      	ldrh	r2, [r7, #8]
 800388e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003894:	b29a      	uxth	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	4a50      	ldr	r2, [pc, #320]	; (80039e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800389e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80038a0:	8979      	ldrh	r1, [r7, #10]
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	6a3a      	ldr	r2, [r7, #32]
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 fbf0 	bl	800408c <I2C_MasterRequestWrite>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e08d      	b.n	80039d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038b6:	2300      	movs	r3, #0
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	613b      	str	r3, [r7, #16]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	613b      	str	r3, [r7, #16]
 80038ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80038cc:	e066      	b.n	800399c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	6a39      	ldr	r1, [r7, #32]
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 fe00 	bl	80044d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00d      	beq.n	80038fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d107      	bne.n	80038f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e06b      	b.n	80039d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fe:	781a      	ldrb	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003914:	b29b      	uxth	r3, r3
 8003916:	3b01      	subs	r3, #1
 8003918:	b29a      	uxth	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b04      	cmp	r3, #4
 8003936:	d11b      	bne.n	8003970 <HAL_I2C_Master_Transmit+0x188>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393c:	2b00      	cmp	r3, #0
 800393e:	d017      	beq.n	8003970 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	781a      	ldrb	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	1c5a      	adds	r2, r3, #1
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395a:	b29b      	uxth	r3, r3
 800395c:	3b01      	subs	r3, #1
 800395e:	b29a      	uxth	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003968:	3b01      	subs	r3, #1
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	6a39      	ldr	r1, [r7, #32]
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 fdf0 	bl	800455a <I2C_WaitOnBTFFlagUntilTimeout>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00d      	beq.n	800399c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003984:	2b04      	cmp	r3, #4
 8003986:	d107      	bne.n	8003998 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003996:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e01a      	b.n	80039d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d194      	bne.n	80038ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2220      	movs	r2, #32
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039cc:	2300      	movs	r3, #0
 80039ce:	e000      	b.n	80039d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80039d0:	2302      	movs	r3, #2
  }
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3718      	adds	r7, #24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	00100002 	.word	0x00100002
 80039e0:	ffff0000 	.word	0xffff0000

080039e4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b08c      	sub	sp, #48	; 0x30
 80039e8:	af02      	add	r7, sp, #8
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	607a      	str	r2, [r7, #4]
 80039ee:	461a      	mov	r2, r3
 80039f0:	460b      	mov	r3, r1
 80039f2:	817b      	strh	r3, [r7, #10]
 80039f4:	4613      	mov	r3, r2
 80039f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039f8:	f7ff faf0 	bl	8002fdc <HAL_GetTick>
 80039fc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b20      	cmp	r3, #32
 8003a08:	f040 820b 	bne.w	8003e22 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	2319      	movs	r3, #25
 8003a12:	2201      	movs	r2, #1
 8003a14:	497c      	ldr	r1, [pc, #496]	; (8003c08 <HAL_I2C_Master_Receive+0x224>)
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f000 fc88 	bl	800432c <I2C_WaitOnFlagUntilTimeout>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003a22:	2302      	movs	r3, #2
 8003a24:	e1fe      	b.n	8003e24 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d101      	bne.n	8003a34 <HAL_I2C_Master_Receive+0x50>
 8003a30:	2302      	movs	r3, #2
 8003a32:	e1f7      	b.n	8003e24 <HAL_I2C_Master_Receive+0x440>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d007      	beq.n	8003a5a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f042 0201 	orr.w	r2, r2, #1
 8003a58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2222      	movs	r2, #34	; 0x22
 8003a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2210      	movs	r2, #16
 8003a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	893a      	ldrh	r2, [r7, #8]
 8003a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4a5c      	ldr	r2, [pc, #368]	; (8003c0c <HAL_I2C_Master_Receive+0x228>)
 8003a9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a9c:	8979      	ldrh	r1, [r7, #10]
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 fb74 	bl	8004190 <I2C_MasterRequestRead>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e1b8      	b.n	8003e24 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d113      	bne.n	8003ae2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aba:	2300      	movs	r3, #0
 8003abc:	623b      	str	r3, [r7, #32]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	623b      	str	r3, [r7, #32]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	623b      	str	r3, [r7, #32]
 8003ace:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	e18c      	b.n	8003dfc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d11b      	bne.n	8003b22 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003af8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003afa:	2300      	movs	r3, #0
 8003afc:	61fb      	str	r3, [r7, #28]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	61fb      	str	r3, [r7, #28]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	61fb      	str	r3, [r7, #28]
 8003b0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	e16c      	b.n	8003dfc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d11b      	bne.n	8003b62 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b38:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	61bb      	str	r3, [r7, #24]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	61bb      	str	r3, [r7, #24]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	61bb      	str	r3, [r7, #24]
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	e14c      	b.n	8003dfc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	617b      	str	r3, [r7, #20]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	617b      	str	r3, [r7, #20]
 8003b86:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003b88:	e138      	b.n	8003dfc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b8e:	2b03      	cmp	r3, #3
 8003b90:	f200 80f1 	bhi.w	8003d76 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d123      	bne.n	8003be4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 fd1b 	bl	80045dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e139      	b.n	8003e24 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	691a      	ldr	r2, [r3, #16]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	1c5a      	adds	r2, r3, #1
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003be2:	e10b      	b.n	8003dfc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d14e      	bne.n	8003c8a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	4906      	ldr	r1, [pc, #24]	; (8003c10 <HAL_I2C_Master_Receive+0x22c>)
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 fb98 	bl	800432c <I2C_WaitOnFlagUntilTimeout>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d008      	beq.n	8003c14 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e10e      	b.n	8003e24 <HAL_I2C_Master_Receive+0x440>
 8003c06:	bf00      	nop
 8003c08:	00100002 	.word	0x00100002
 8003c0c:	ffff0000 	.word	0xffff0000
 8003c10:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	691a      	ldr	r2, [r3, #16]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	1c5a      	adds	r2, r3, #1
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c40:	3b01      	subs	r3, #1
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	691a      	ldr	r2, [r3, #16]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c72:	3b01      	subs	r3, #1
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c88:	e0b8      	b.n	8003dfc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c90:	2200      	movs	r2, #0
 8003c92:	4966      	ldr	r1, [pc, #408]	; (8003e2c <HAL_I2C_Master_Receive+0x448>)
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 fb49 	bl	800432c <I2C_WaitOnFlagUntilTimeout>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e0bf      	b.n	8003e24 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	691a      	ldr	r2, [r3, #16]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	1c5a      	adds	r2, r3, #1
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cec:	2200      	movs	r2, #0
 8003cee:	494f      	ldr	r1, [pc, #316]	; (8003e2c <HAL_I2C_Master_Receive+0x448>)
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 fb1b 	bl	800432c <I2C_WaitOnFlagUntilTimeout>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e091      	b.n	8003e24 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	691a      	ldr	r2, [r3, #16]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	b2d2      	uxtb	r2, r2
 8003d1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	691a      	ldr	r2, [r3, #16]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	b2d2      	uxtb	r2, r2
 8003d4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	1c5a      	adds	r2, r3, #1
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d74:	e042      	b.n	8003dfc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f000 fc2e 	bl	80045dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e04c      	b.n	8003e24 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	691a      	ldr	r2, [r3, #16]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d94:	b2d2      	uxtb	r2, r2
 8003d96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	1c5a      	adds	r2, r3, #1
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da6:	3b01      	subs	r3, #1
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	3b01      	subs	r3, #1
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	f003 0304 	and.w	r3, r3, #4
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d118      	bne.n	8003dfc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	691a      	ldr	r2, [r3, #16]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	b2d2      	uxtb	r2, r2
 8003dd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	1c5a      	adds	r2, r3, #1
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f47f aec2 	bne.w	8003b8a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	e000      	b.n	8003e24 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003e22:	2302      	movs	r3, #2
  }
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3728      	adds	r7, #40	; 0x28
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	00010004 	.word	0x00010004

08003e30 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b08a      	sub	sp, #40	; 0x28
 8003e34:	af02      	add	r7, sp, #8
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	607a      	str	r2, [r7, #4]
 8003e3a:	603b      	str	r3, [r7, #0]
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003e40:	f7ff f8cc 	bl	8002fdc <HAL_GetTick>
 8003e44:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b20      	cmp	r3, #32
 8003e54:	f040 8111 	bne.w	800407a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	2319      	movs	r3, #25
 8003e5e:	2201      	movs	r2, #1
 8003e60:	4988      	ldr	r1, [pc, #544]	; (8004084 <HAL_I2C_IsDeviceReady+0x254>)
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 fa62 	bl	800432c <I2C_WaitOnFlagUntilTimeout>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003e6e:	2302      	movs	r3, #2
 8003e70:	e104      	b.n	800407c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d101      	bne.n	8003e80 <HAL_I2C_IsDeviceReady+0x50>
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	e0fd      	b.n	800407c <HAL_I2C_IsDeviceReady+0x24c>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d007      	beq.n	8003ea6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f042 0201 	orr.w	r2, r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eb4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2224      	movs	r2, #36	; 0x24
 8003eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4a70      	ldr	r2, [pc, #448]	; (8004088 <HAL_I2C_IsDeviceReady+0x258>)
 8003ec8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ed8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 fa20 	bl	800432c <I2C_WaitOnFlagUntilTimeout>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00d      	beq.n	8003f0e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f00:	d103      	bne.n	8003f0a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f08:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e0b6      	b.n	800407c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f0e:	897b      	ldrh	r3, [r7, #10]
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	461a      	mov	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f1c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003f1e:	f7ff f85d 	bl	8002fdc <HAL_GetTick>
 8003f22:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	bf0c      	ite	eq
 8003f32:	2301      	moveq	r3, #1
 8003f34:	2300      	movne	r3, #0
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f48:	bf0c      	ite	eq
 8003f4a:	2301      	moveq	r3, #1
 8003f4c:	2300      	movne	r3, #0
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003f52:	e025      	b.n	8003fa0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f54:	f7ff f842 	bl	8002fdc <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d302      	bcc.n	8003f6a <HAL_I2C_IsDeviceReady+0x13a>
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d103      	bne.n	8003f72 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	22a0      	movs	r2, #160	; 0xa0
 8003f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	bf0c      	ite	eq
 8003f80:	2301      	moveq	r3, #1
 8003f82:	2300      	movne	r3, #0
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f96:	bf0c      	ite	eq
 8003f98:	2301      	moveq	r3, #1
 8003f9a:	2300      	movne	r3, #0
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2ba0      	cmp	r3, #160	; 0xa0
 8003faa:	d005      	beq.n	8003fb8 <HAL_I2C_IsDeviceReady+0x188>
 8003fac:	7dfb      	ldrb	r3, [r7, #23]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d102      	bne.n	8003fb8 <HAL_I2C_IsDeviceReady+0x188>
 8003fb2:	7dbb      	ldrb	r3, [r7, #22]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d0cd      	beq.n	8003f54 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d129      	bne.n	8004022 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fdc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fde:	2300      	movs	r3, #0
 8003fe0:	613b      	str	r3, [r7, #16]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	613b      	str	r3, [r7, #16]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	613b      	str	r3, [r7, #16]
 8003ff2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	2319      	movs	r3, #25
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	4921      	ldr	r1, [pc, #132]	; (8004084 <HAL_I2C_IsDeviceReady+0x254>)
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 f994 	bl	800432c <I2C_WaitOnFlagUntilTimeout>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e036      	b.n	800407c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2220      	movs	r2, #32
 8004012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800401e:	2300      	movs	r3, #0
 8004020:	e02c      	b.n	800407c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004030:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800403a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	2319      	movs	r3, #25
 8004042:	2201      	movs	r2, #1
 8004044:	490f      	ldr	r1, [pc, #60]	; (8004084 <HAL_I2C_IsDeviceReady+0x254>)
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 f970 	bl	800432c <I2C_WaitOnFlagUntilTimeout>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e012      	b.n	800407c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	3301      	adds	r3, #1
 800405a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	429a      	cmp	r2, r3
 8004062:	f4ff af32 	bcc.w	8003eca <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2220      	movs	r2, #32
 800406a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e000      	b.n	800407c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800407a:	2302      	movs	r3, #2
  }
}
 800407c:	4618      	mov	r0, r3
 800407e:	3720      	adds	r7, #32
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	00100002 	.word	0x00100002
 8004088:	ffff0000 	.word	0xffff0000

0800408c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b088      	sub	sp, #32
 8004090:	af02      	add	r7, sp, #8
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	607a      	str	r2, [r7, #4]
 8004096:	603b      	str	r3, [r7, #0]
 8004098:	460b      	mov	r3, r1
 800409a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2b08      	cmp	r3, #8
 80040a6:	d006      	beq.n	80040b6 <I2C_MasterRequestWrite+0x2a>
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d003      	beq.n	80040b6 <I2C_MasterRequestWrite+0x2a>
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040b4:	d108      	bne.n	80040c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	e00b      	b.n	80040e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040cc:	2b12      	cmp	r3, #18
 80040ce:	d107      	bne.n	80040e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 f91d 	bl	800432c <I2C_WaitOnFlagUntilTimeout>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00d      	beq.n	8004114 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004106:	d103      	bne.n	8004110 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800410e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e035      	b.n	8004180 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800411c:	d108      	bne.n	8004130 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800411e:	897b      	ldrh	r3, [r7, #10]
 8004120:	b2db      	uxtb	r3, r3
 8004122:	461a      	mov	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800412c:	611a      	str	r2, [r3, #16]
 800412e:	e01b      	b.n	8004168 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004130:	897b      	ldrh	r3, [r7, #10]
 8004132:	11db      	asrs	r3, r3, #7
 8004134:	b2db      	uxtb	r3, r3
 8004136:	f003 0306 	and.w	r3, r3, #6
 800413a:	b2db      	uxtb	r3, r3
 800413c:	f063 030f 	orn	r3, r3, #15
 8004140:	b2da      	uxtb	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	490e      	ldr	r1, [pc, #56]	; (8004188 <I2C_MasterRequestWrite+0xfc>)
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f000 f943 	bl	80043da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e010      	b.n	8004180 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800415e:	897b      	ldrh	r3, [r7, #10]
 8004160:	b2da      	uxtb	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	4907      	ldr	r1, [pc, #28]	; (800418c <I2C_MasterRequestWrite+0x100>)
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f000 f933 	bl	80043da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e000      	b.n	8004180 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3718      	adds	r7, #24
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	00010008 	.word	0x00010008
 800418c:	00010002 	.word	0x00010002

08004190 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b088      	sub	sp, #32
 8004194:	af02      	add	r7, sp, #8
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	607a      	str	r2, [r7, #4]
 800419a:	603b      	str	r3, [r7, #0]
 800419c:	460b      	mov	r3, r1
 800419e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041b4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d006      	beq.n	80041ca <I2C_MasterRequestRead+0x3a>
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d003      	beq.n	80041ca <I2C_MasterRequestRead+0x3a>
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041c8:	d108      	bne.n	80041dc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	e00b      	b.n	80041f4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e0:	2b11      	cmp	r3, #17
 80041e2:	d107      	bne.n	80041f4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 f893 	bl	800432c <I2C_WaitOnFlagUntilTimeout>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00d      	beq.n	8004228 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800421a:	d103      	bne.n	8004224 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004222:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e079      	b.n	800431c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004230:	d108      	bne.n	8004244 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004232:	897b      	ldrh	r3, [r7, #10]
 8004234:	b2db      	uxtb	r3, r3
 8004236:	f043 0301 	orr.w	r3, r3, #1
 800423a:	b2da      	uxtb	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	611a      	str	r2, [r3, #16]
 8004242:	e05f      	b.n	8004304 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004244:	897b      	ldrh	r3, [r7, #10]
 8004246:	11db      	asrs	r3, r3, #7
 8004248:	b2db      	uxtb	r3, r3
 800424a:	f003 0306 	and.w	r3, r3, #6
 800424e:	b2db      	uxtb	r3, r3
 8004250:	f063 030f 	orn	r3, r3, #15
 8004254:	b2da      	uxtb	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	4930      	ldr	r1, [pc, #192]	; (8004324 <I2C_MasterRequestRead+0x194>)
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 f8b9 	bl	80043da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e054      	b.n	800431c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004272:	897b      	ldrh	r3, [r7, #10]
 8004274:	b2da      	uxtb	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	4929      	ldr	r1, [pc, #164]	; (8004328 <I2C_MasterRequestRead+0x198>)
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 f8a9 	bl	80043da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e044      	b.n	800431c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004292:	2300      	movs	r3, #0
 8004294:	613b      	str	r3, [r7, #16]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	613b      	str	r3, [r7, #16]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	613b      	str	r3, [r7, #16]
 80042a6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042b6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f000 f831 	bl	800432c <I2C_WaitOnFlagUntilTimeout>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00d      	beq.n	80042ec <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042de:	d103      	bne.n	80042e8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042e6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e017      	b.n	800431c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80042ec:	897b      	ldrh	r3, [r7, #10]
 80042ee:	11db      	asrs	r3, r3, #7
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	f003 0306 	and.w	r3, r3, #6
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	f063 030e 	orn	r3, r3, #14
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	4907      	ldr	r1, [pc, #28]	; (8004328 <I2C_MasterRequestRead+0x198>)
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	f000 f865 	bl	80043da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e000      	b.n	800431c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3718      	adds	r7, #24
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	00010008 	.word	0x00010008
 8004328:	00010002 	.word	0x00010002

0800432c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	603b      	str	r3, [r7, #0]
 8004338:	4613      	mov	r3, r2
 800433a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800433c:	e025      	b.n	800438a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004344:	d021      	beq.n	800438a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004346:	f7fe fe49 	bl	8002fdc <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	429a      	cmp	r2, r3
 8004354:	d302      	bcc.n	800435c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d116      	bne.n	800438a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2220      	movs	r2, #32
 8004366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	f043 0220 	orr.w	r2, r3, #32
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e023      	b.n	80043d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	0c1b      	lsrs	r3, r3, #16
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b01      	cmp	r3, #1
 8004392:	d10d      	bne.n	80043b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	43da      	mvns	r2, r3
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	4013      	ands	r3, r2
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	bf0c      	ite	eq
 80043a6:	2301      	moveq	r3, #1
 80043a8:	2300      	movne	r3, #0
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	461a      	mov	r2, r3
 80043ae:	e00c      	b.n	80043ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	43da      	mvns	r2, r3
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	4013      	ands	r3, r2
 80043bc:	b29b      	uxth	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	bf0c      	ite	eq
 80043c2:	2301      	moveq	r3, #1
 80043c4:	2300      	movne	r3, #0
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	461a      	mov	r2, r3
 80043ca:	79fb      	ldrb	r3, [r7, #7]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d0b6      	beq.n	800433e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b084      	sub	sp, #16
 80043de:	af00      	add	r7, sp, #0
 80043e0:	60f8      	str	r0, [r7, #12]
 80043e2:	60b9      	str	r1, [r7, #8]
 80043e4:	607a      	str	r2, [r7, #4]
 80043e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043e8:	e051      	b.n	800448e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043f8:	d123      	bne.n	8004442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004408:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004412:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2220      	movs	r2, #32
 800441e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	f043 0204 	orr.w	r2, r3, #4
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e046      	b.n	80044d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004448:	d021      	beq.n	800448e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800444a:	f7fe fdc7 	bl	8002fdc <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	429a      	cmp	r2, r3
 8004458:	d302      	bcc.n	8004460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d116      	bne.n	800448e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2220      	movs	r2, #32
 800446a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	f043 0220 	orr.w	r2, r3, #32
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e020      	b.n	80044d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	0c1b      	lsrs	r3, r3, #16
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b01      	cmp	r3, #1
 8004496:	d10c      	bne.n	80044b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	43da      	mvns	r2, r3
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	4013      	ands	r3, r2
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	bf14      	ite	ne
 80044aa:	2301      	movne	r3, #1
 80044ac:	2300      	moveq	r3, #0
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	e00b      	b.n	80044ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	43da      	mvns	r2, r3
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	4013      	ands	r3, r2
 80044be:	b29b      	uxth	r3, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	bf14      	ite	ne
 80044c4:	2301      	movne	r3, #1
 80044c6:	2300      	moveq	r3, #0
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d18d      	bne.n	80043ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044e4:	e02d      	b.n	8004542 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f000 f8ce 	bl	8004688 <I2C_IsAcknowledgeFailed>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e02d      	b.n	8004552 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044fc:	d021      	beq.n	8004542 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044fe:	f7fe fd6d 	bl	8002fdc <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	429a      	cmp	r2, r3
 800450c:	d302      	bcc.n	8004514 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d116      	bne.n	8004542 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2220      	movs	r2, #32
 800451e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	f043 0220 	orr.w	r2, r3, #32
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e007      	b.n	8004552 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800454c:	2b80      	cmp	r3, #128	; 0x80
 800454e:	d1ca      	bne.n	80044e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b084      	sub	sp, #16
 800455e:	af00      	add	r7, sp, #0
 8004560:	60f8      	str	r0, [r7, #12]
 8004562:	60b9      	str	r1, [r7, #8]
 8004564:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004566:	e02d      	b.n	80045c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 f88d 	bl	8004688 <I2C_IsAcknowledgeFailed>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e02d      	b.n	80045d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800457e:	d021      	beq.n	80045c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004580:	f7fe fd2c 	bl	8002fdc <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	429a      	cmp	r2, r3
 800458e:	d302      	bcc.n	8004596 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d116      	bne.n	80045c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2220      	movs	r2, #32
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b0:	f043 0220 	orr.w	r2, r3, #32
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e007      	b.n	80045d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	f003 0304 	and.w	r3, r3, #4
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d1ca      	bne.n	8004568 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045e8:	e042      	b.n	8004670 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	f003 0310 	and.w	r3, r3, #16
 80045f4:	2b10      	cmp	r3, #16
 80045f6:	d119      	bne.n	800462c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f06f 0210 	mvn.w	r2, #16
 8004600:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2220      	movs	r2, #32
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e029      	b.n	8004680 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800462c:	f7fe fcd6 	bl	8002fdc <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	429a      	cmp	r2, r3
 800463a:	d302      	bcc.n	8004642 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d116      	bne.n	8004670 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2220      	movs	r2, #32
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465c:	f043 0220 	orr.w	r2, r3, #32
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e007      	b.n	8004680 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467a:	2b40      	cmp	r3, #64	; 0x40
 800467c:	d1b5      	bne.n	80045ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800469a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800469e:	d11b      	bne.n	80046d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2220      	movs	r2, #32
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c4:	f043 0204 	orr.w	r2, r3, #4
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e000      	b.n	80046da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b083      	sub	sp, #12
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b20      	cmp	r3, #32
 80046fa:	d129      	bne.n	8004750 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2224      	movs	r2, #36	; 0x24
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 0201 	bic.w	r2, r2, #1
 8004712:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0210 	bic.w	r2, r2, #16
 8004722:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f042 0201 	orr.w	r2, r2, #1
 8004742:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2220      	movs	r2, #32
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800474c:	2300      	movs	r3, #0
 800474e:	e000      	b.n	8004752 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004750:	2302      	movs	r3, #2
  }
}
 8004752:	4618      	mov	r0, r3
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800475e:	b480      	push	{r7}
 8004760:	b085      	sub	sp, #20
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004768:	2300      	movs	r3, #0
 800476a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b20      	cmp	r3, #32
 8004776:	d12a      	bne.n	80047ce <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2224      	movs	r2, #36	; 0x24
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0201 	bic.w	r2, r2, #1
 800478e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004798:	89fb      	ldrh	r3, [r7, #14]
 800479a:	f023 030f 	bic.w	r3, r3, #15
 800479e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	89fb      	ldrh	r3, [r7, #14]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	89fa      	ldrh	r2, [r7, #14]
 80047b0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f042 0201 	orr.w	r2, r2, #1
 80047c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2220      	movs	r2, #32
 80047c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80047ca:	2300      	movs	r3, #0
 80047cc:	e000      	b.n	80047d0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80047ce:	2302      	movs	r3, #2
  }
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3714      	adds	r7, #20
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e267      	b.n	8004cbe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d075      	beq.n	80048e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047fa:	4b88      	ldr	r3, [pc, #544]	; (8004a1c <HAL_RCC_OscConfig+0x240>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f003 030c 	and.w	r3, r3, #12
 8004802:	2b04      	cmp	r3, #4
 8004804:	d00c      	beq.n	8004820 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004806:	4b85      	ldr	r3, [pc, #532]	; (8004a1c <HAL_RCC_OscConfig+0x240>)
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800480e:	2b08      	cmp	r3, #8
 8004810:	d112      	bne.n	8004838 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004812:	4b82      	ldr	r3, [pc, #520]	; (8004a1c <HAL_RCC_OscConfig+0x240>)
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800481a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800481e:	d10b      	bne.n	8004838 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004820:	4b7e      	ldr	r3, [pc, #504]	; (8004a1c <HAL_RCC_OscConfig+0x240>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d05b      	beq.n	80048e4 <HAL_RCC_OscConfig+0x108>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d157      	bne.n	80048e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e242      	b.n	8004cbe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004840:	d106      	bne.n	8004850 <HAL_RCC_OscConfig+0x74>
 8004842:	4b76      	ldr	r3, [pc, #472]	; (8004a1c <HAL_RCC_OscConfig+0x240>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a75      	ldr	r2, [pc, #468]	; (8004a1c <HAL_RCC_OscConfig+0x240>)
 8004848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800484c:	6013      	str	r3, [r2, #0]
 800484e:	e01d      	b.n	800488c <HAL_RCC_OscConfig+0xb0>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004858:	d10c      	bne.n	8004874 <HAL_RCC_OscConfig+0x98>
 800485a:	4b70      	ldr	r3, [pc, #448]	; (8004a1c <HAL_RCC_OscConfig+0x240>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a6f      	ldr	r2, [pc, #444]	; (8004a1c <HAL_RCC_OscConfig+0x240>)
 8004860:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004864:	6013      	str	r3, [r2, #0]
 8004866:	4b6d      	ldr	r3, [pc, #436]	; (8004a1c <HAL_RCC_OscConfig+0x240>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a6c      	ldr	r2, [pc, #432]	; (8004a1c <HAL_RCC_OscConfig+0x240>)
 800486c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004870:	6013      	str	r3, [r2, #0]
 8004872:	e00b      	b.n	800488c <HAL_RCC_OscConfig+0xb0>
 8004874:	4b69      	ldr	r3, [pc, #420]	; (8004a1c <HAL_RCC_OscConfig+0x240>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a68      	ldr	r2, [pc, #416]	; (8004a1c <HAL_RCC_OscConfig+0x240>)
 800487a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800487e:	6013      	str	r3, [r2, #0]
 8004880:	4b66      	ldr	r3, [pc, #408]	; (8004a1c <HAL_RCC_OscConfig+0x240>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a65      	ldr	r2, [pc, #404]	; (8004a1c <HAL_RCC_OscConfig+0x240>)
 8004886:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800488a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d013      	beq.n	80048bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004894:	f7fe fba2 	bl	8002fdc <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800489c:	f7fe fb9e 	bl	8002fdc <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b64      	cmp	r3, #100	; 0x64
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e207      	b.n	8004cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ae:	4b5b      	ldr	r3, [pc, #364]	; (8004a1c <HAL_RCC_OscConfig+0x240>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0f0      	beq.n	800489c <HAL_RCC_OscConfig+0xc0>
 80048ba:	e014      	b.n	80048e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048bc:	f7fe fb8e 	bl	8002fdc <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048c4:	f7fe fb8a 	bl	8002fdc <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b64      	cmp	r3, #100	; 0x64
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e1f3      	b.n	8004cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048d6:	4b51      	ldr	r3, [pc, #324]	; (8004a1c <HAL_RCC_OscConfig+0x240>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1f0      	bne.n	80048c4 <HAL_RCC_OscConfig+0xe8>
 80048e2:	e000      	b.n	80048e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d063      	beq.n	80049ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048f2:	4b4a      	ldr	r3, [pc, #296]	; (8004a1c <HAL_RCC_OscConfig+0x240>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f003 030c 	and.w	r3, r3, #12
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00b      	beq.n	8004916 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048fe:	4b47      	ldr	r3, [pc, #284]	; (8004a1c <HAL_RCC_OscConfig+0x240>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004906:	2b08      	cmp	r3, #8
 8004908:	d11c      	bne.n	8004944 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800490a:	4b44      	ldr	r3, [pc, #272]	; (8004a1c <HAL_RCC_OscConfig+0x240>)
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d116      	bne.n	8004944 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004916:	4b41      	ldr	r3, [pc, #260]	; (8004a1c <HAL_RCC_OscConfig+0x240>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d005      	beq.n	800492e <HAL_RCC_OscConfig+0x152>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d001      	beq.n	800492e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e1c7      	b.n	8004cbe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800492e:	4b3b      	ldr	r3, [pc, #236]	; (8004a1c <HAL_RCC_OscConfig+0x240>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	00db      	lsls	r3, r3, #3
 800493c:	4937      	ldr	r1, [pc, #220]	; (8004a1c <HAL_RCC_OscConfig+0x240>)
 800493e:	4313      	orrs	r3, r2
 8004940:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004942:	e03a      	b.n	80049ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d020      	beq.n	800498e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800494c:	4b34      	ldr	r3, [pc, #208]	; (8004a20 <HAL_RCC_OscConfig+0x244>)
 800494e:	2201      	movs	r2, #1
 8004950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004952:	f7fe fb43 	bl	8002fdc <HAL_GetTick>
 8004956:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004958:	e008      	b.n	800496c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800495a:	f7fe fb3f 	bl	8002fdc <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e1a8      	b.n	8004cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800496c:	4b2b      	ldr	r3, [pc, #172]	; (8004a1c <HAL_RCC_OscConfig+0x240>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0f0      	beq.n	800495a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004978:	4b28      	ldr	r3, [pc, #160]	; (8004a1c <HAL_RCC_OscConfig+0x240>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	00db      	lsls	r3, r3, #3
 8004986:	4925      	ldr	r1, [pc, #148]	; (8004a1c <HAL_RCC_OscConfig+0x240>)
 8004988:	4313      	orrs	r3, r2
 800498a:	600b      	str	r3, [r1, #0]
 800498c:	e015      	b.n	80049ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800498e:	4b24      	ldr	r3, [pc, #144]	; (8004a20 <HAL_RCC_OscConfig+0x244>)
 8004990:	2200      	movs	r2, #0
 8004992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004994:	f7fe fb22 	bl	8002fdc <HAL_GetTick>
 8004998:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800499c:	f7fe fb1e 	bl	8002fdc <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e187      	b.n	8004cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ae:	4b1b      	ldr	r3, [pc, #108]	; (8004a1c <HAL_RCC_OscConfig+0x240>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1f0      	bne.n	800499c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0308 	and.w	r3, r3, #8
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d036      	beq.n	8004a34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d016      	beq.n	80049fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049ce:	4b15      	ldr	r3, [pc, #84]	; (8004a24 <HAL_RCC_OscConfig+0x248>)
 80049d0:	2201      	movs	r2, #1
 80049d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d4:	f7fe fb02 	bl	8002fdc <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049dc:	f7fe fafe 	bl	8002fdc <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e167      	b.n	8004cbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049ee:	4b0b      	ldr	r3, [pc, #44]	; (8004a1c <HAL_RCC_OscConfig+0x240>)
 80049f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d0f0      	beq.n	80049dc <HAL_RCC_OscConfig+0x200>
 80049fa:	e01b      	b.n	8004a34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049fc:	4b09      	ldr	r3, [pc, #36]	; (8004a24 <HAL_RCC_OscConfig+0x248>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a02:	f7fe faeb 	bl	8002fdc <HAL_GetTick>
 8004a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a08:	e00e      	b.n	8004a28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a0a:	f7fe fae7 	bl	8002fdc <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d907      	bls.n	8004a28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e150      	b.n	8004cbe <HAL_RCC_OscConfig+0x4e2>
 8004a1c:	40023800 	.word	0x40023800
 8004a20:	42470000 	.word	0x42470000
 8004a24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a28:	4b88      	ldr	r3, [pc, #544]	; (8004c4c <HAL_RCC_OscConfig+0x470>)
 8004a2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1ea      	bne.n	8004a0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f000 8097 	beq.w	8004b70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a42:	2300      	movs	r3, #0
 8004a44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a46:	4b81      	ldr	r3, [pc, #516]	; (8004c4c <HAL_RCC_OscConfig+0x470>)
 8004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10f      	bne.n	8004a72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a52:	2300      	movs	r3, #0
 8004a54:	60bb      	str	r3, [r7, #8]
 8004a56:	4b7d      	ldr	r3, [pc, #500]	; (8004c4c <HAL_RCC_OscConfig+0x470>)
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	4a7c      	ldr	r2, [pc, #496]	; (8004c4c <HAL_RCC_OscConfig+0x470>)
 8004a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a60:	6413      	str	r3, [r2, #64]	; 0x40
 8004a62:	4b7a      	ldr	r3, [pc, #488]	; (8004c4c <HAL_RCC_OscConfig+0x470>)
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a6a:	60bb      	str	r3, [r7, #8]
 8004a6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a72:	4b77      	ldr	r3, [pc, #476]	; (8004c50 <HAL_RCC_OscConfig+0x474>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d118      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a7e:	4b74      	ldr	r3, [pc, #464]	; (8004c50 <HAL_RCC_OscConfig+0x474>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a73      	ldr	r2, [pc, #460]	; (8004c50 <HAL_RCC_OscConfig+0x474>)
 8004a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a8a:	f7fe faa7 	bl	8002fdc <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a90:	e008      	b.n	8004aa4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a92:	f7fe faa3 	bl	8002fdc <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e10c      	b.n	8004cbe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aa4:	4b6a      	ldr	r3, [pc, #424]	; (8004c50 <HAL_RCC_OscConfig+0x474>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0f0      	beq.n	8004a92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d106      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x2ea>
 8004ab8:	4b64      	ldr	r3, [pc, #400]	; (8004c4c <HAL_RCC_OscConfig+0x470>)
 8004aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004abc:	4a63      	ldr	r2, [pc, #396]	; (8004c4c <HAL_RCC_OscConfig+0x470>)
 8004abe:	f043 0301 	orr.w	r3, r3, #1
 8004ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ac4:	e01c      	b.n	8004b00 <HAL_RCC_OscConfig+0x324>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	2b05      	cmp	r3, #5
 8004acc:	d10c      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x30c>
 8004ace:	4b5f      	ldr	r3, [pc, #380]	; (8004c4c <HAL_RCC_OscConfig+0x470>)
 8004ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad2:	4a5e      	ldr	r2, [pc, #376]	; (8004c4c <HAL_RCC_OscConfig+0x470>)
 8004ad4:	f043 0304 	orr.w	r3, r3, #4
 8004ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8004ada:	4b5c      	ldr	r3, [pc, #368]	; (8004c4c <HAL_RCC_OscConfig+0x470>)
 8004adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ade:	4a5b      	ldr	r2, [pc, #364]	; (8004c4c <HAL_RCC_OscConfig+0x470>)
 8004ae0:	f043 0301 	orr.w	r3, r3, #1
 8004ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ae6:	e00b      	b.n	8004b00 <HAL_RCC_OscConfig+0x324>
 8004ae8:	4b58      	ldr	r3, [pc, #352]	; (8004c4c <HAL_RCC_OscConfig+0x470>)
 8004aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aec:	4a57      	ldr	r2, [pc, #348]	; (8004c4c <HAL_RCC_OscConfig+0x470>)
 8004aee:	f023 0301 	bic.w	r3, r3, #1
 8004af2:	6713      	str	r3, [r2, #112]	; 0x70
 8004af4:	4b55      	ldr	r3, [pc, #340]	; (8004c4c <HAL_RCC_OscConfig+0x470>)
 8004af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af8:	4a54      	ldr	r2, [pc, #336]	; (8004c4c <HAL_RCC_OscConfig+0x470>)
 8004afa:	f023 0304 	bic.w	r3, r3, #4
 8004afe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d015      	beq.n	8004b34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b08:	f7fe fa68 	bl	8002fdc <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b0e:	e00a      	b.n	8004b26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b10:	f7fe fa64 	bl	8002fdc <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e0cb      	b.n	8004cbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b26:	4b49      	ldr	r3, [pc, #292]	; (8004c4c <HAL_RCC_OscConfig+0x470>)
 8004b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d0ee      	beq.n	8004b10 <HAL_RCC_OscConfig+0x334>
 8004b32:	e014      	b.n	8004b5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b34:	f7fe fa52 	bl	8002fdc <HAL_GetTick>
 8004b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b3a:	e00a      	b.n	8004b52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b3c:	f7fe fa4e 	bl	8002fdc <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e0b5      	b.n	8004cbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b52:	4b3e      	ldr	r3, [pc, #248]	; (8004c4c <HAL_RCC_OscConfig+0x470>)
 8004b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1ee      	bne.n	8004b3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b5e:	7dfb      	ldrb	r3, [r7, #23]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d105      	bne.n	8004b70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b64:	4b39      	ldr	r3, [pc, #228]	; (8004c4c <HAL_RCC_OscConfig+0x470>)
 8004b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b68:	4a38      	ldr	r2, [pc, #224]	; (8004c4c <HAL_RCC_OscConfig+0x470>)
 8004b6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f000 80a1 	beq.w	8004cbc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b7a:	4b34      	ldr	r3, [pc, #208]	; (8004c4c <HAL_RCC_OscConfig+0x470>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f003 030c 	and.w	r3, r3, #12
 8004b82:	2b08      	cmp	r3, #8
 8004b84:	d05c      	beq.n	8004c40 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d141      	bne.n	8004c12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b8e:	4b31      	ldr	r3, [pc, #196]	; (8004c54 <HAL_RCC_OscConfig+0x478>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b94:	f7fe fa22 	bl	8002fdc <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b9c:	f7fe fa1e 	bl	8002fdc <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e087      	b.n	8004cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bae:	4b27      	ldr	r3, [pc, #156]	; (8004c4c <HAL_RCC_OscConfig+0x470>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1f0      	bne.n	8004b9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	69da      	ldr	r2, [r3, #28]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc8:	019b      	lsls	r3, r3, #6
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd0:	085b      	lsrs	r3, r3, #1
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	041b      	lsls	r3, r3, #16
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bdc:	061b      	lsls	r3, r3, #24
 8004bde:	491b      	ldr	r1, [pc, #108]	; (8004c4c <HAL_RCC_OscConfig+0x470>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004be4:	4b1b      	ldr	r3, [pc, #108]	; (8004c54 <HAL_RCC_OscConfig+0x478>)
 8004be6:	2201      	movs	r2, #1
 8004be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bea:	f7fe f9f7 	bl	8002fdc <HAL_GetTick>
 8004bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bf0:	e008      	b.n	8004c04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bf2:	f7fe f9f3 	bl	8002fdc <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d901      	bls.n	8004c04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e05c      	b.n	8004cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c04:	4b11      	ldr	r3, [pc, #68]	; (8004c4c <HAL_RCC_OscConfig+0x470>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d0f0      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x416>
 8004c10:	e054      	b.n	8004cbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c12:	4b10      	ldr	r3, [pc, #64]	; (8004c54 <HAL_RCC_OscConfig+0x478>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c18:	f7fe f9e0 	bl	8002fdc <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c20:	f7fe f9dc 	bl	8002fdc <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e045      	b.n	8004cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c32:	4b06      	ldr	r3, [pc, #24]	; (8004c4c <HAL_RCC_OscConfig+0x470>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1f0      	bne.n	8004c20 <HAL_RCC_OscConfig+0x444>
 8004c3e:	e03d      	b.n	8004cbc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d107      	bne.n	8004c58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e038      	b.n	8004cbe <HAL_RCC_OscConfig+0x4e2>
 8004c4c:	40023800 	.word	0x40023800
 8004c50:	40007000 	.word	0x40007000
 8004c54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c58:	4b1b      	ldr	r3, [pc, #108]	; (8004cc8 <HAL_RCC_OscConfig+0x4ec>)
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d028      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d121      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d11a      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c88:	4013      	ands	r3, r2
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d111      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9e:	085b      	lsrs	r3, r3, #1
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d107      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d001      	beq.n	8004cbc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e000      	b.n	8004cbe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3718      	adds	r7, #24
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	40023800 	.word	0x40023800

08004ccc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e0cc      	b.n	8004e7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ce0:	4b68      	ldr	r3, [pc, #416]	; (8004e84 <HAL_RCC_ClockConfig+0x1b8>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 030f 	and.w	r3, r3, #15
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d90c      	bls.n	8004d08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cee:	4b65      	ldr	r3, [pc, #404]	; (8004e84 <HAL_RCC_ClockConfig+0x1b8>)
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	b2d2      	uxtb	r2, r2
 8004cf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cf6:	4b63      	ldr	r3, [pc, #396]	; (8004e84 <HAL_RCC_ClockConfig+0x1b8>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 030f 	and.w	r3, r3, #15
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d001      	beq.n	8004d08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e0b8      	b.n	8004e7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d020      	beq.n	8004d56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d005      	beq.n	8004d2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d20:	4b59      	ldr	r3, [pc, #356]	; (8004e88 <HAL_RCC_ClockConfig+0x1bc>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	4a58      	ldr	r2, [pc, #352]	; (8004e88 <HAL_RCC_ClockConfig+0x1bc>)
 8004d26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0308 	and.w	r3, r3, #8
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d005      	beq.n	8004d44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d38:	4b53      	ldr	r3, [pc, #332]	; (8004e88 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	4a52      	ldr	r2, [pc, #328]	; (8004e88 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d44:	4b50      	ldr	r3, [pc, #320]	; (8004e88 <HAL_RCC_ClockConfig+0x1bc>)
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	494d      	ldr	r1, [pc, #308]	; (8004e88 <HAL_RCC_ClockConfig+0x1bc>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d044      	beq.n	8004dec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d107      	bne.n	8004d7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d6a:	4b47      	ldr	r3, [pc, #284]	; (8004e88 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d119      	bne.n	8004daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e07f      	b.n	8004e7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d003      	beq.n	8004d8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d86:	2b03      	cmp	r3, #3
 8004d88:	d107      	bne.n	8004d9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d8a:	4b3f      	ldr	r3, [pc, #252]	; (8004e88 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d109      	bne.n	8004daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e06f      	b.n	8004e7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d9a:	4b3b      	ldr	r3, [pc, #236]	; (8004e88 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e067      	b.n	8004e7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004daa:	4b37      	ldr	r3, [pc, #220]	; (8004e88 <HAL_RCC_ClockConfig+0x1bc>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f023 0203 	bic.w	r2, r3, #3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	4934      	ldr	r1, [pc, #208]	; (8004e88 <HAL_RCC_ClockConfig+0x1bc>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dbc:	f7fe f90e 	bl	8002fdc <HAL_GetTick>
 8004dc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dc2:	e00a      	b.n	8004dda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dc4:	f7fe f90a 	bl	8002fdc <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e04f      	b.n	8004e7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dda:	4b2b      	ldr	r3, [pc, #172]	; (8004e88 <HAL_RCC_ClockConfig+0x1bc>)
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f003 020c 	and.w	r2, r3, #12
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d1eb      	bne.n	8004dc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dec:	4b25      	ldr	r3, [pc, #148]	; (8004e84 <HAL_RCC_ClockConfig+0x1b8>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 030f 	and.w	r3, r3, #15
 8004df4:	683a      	ldr	r2, [r7, #0]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d20c      	bcs.n	8004e14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dfa:	4b22      	ldr	r3, [pc, #136]	; (8004e84 <HAL_RCC_ClockConfig+0x1b8>)
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	b2d2      	uxtb	r2, r2
 8004e00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e02:	4b20      	ldr	r3, [pc, #128]	; (8004e84 <HAL_RCC_ClockConfig+0x1b8>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 030f 	and.w	r3, r3, #15
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d001      	beq.n	8004e14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e032      	b.n	8004e7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0304 	and.w	r3, r3, #4
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d008      	beq.n	8004e32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e20:	4b19      	ldr	r3, [pc, #100]	; (8004e88 <HAL_RCC_ClockConfig+0x1bc>)
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	4916      	ldr	r1, [pc, #88]	; (8004e88 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0308 	and.w	r3, r3, #8
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d009      	beq.n	8004e52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e3e:	4b12      	ldr	r3, [pc, #72]	; (8004e88 <HAL_RCC_ClockConfig+0x1bc>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	00db      	lsls	r3, r3, #3
 8004e4c:	490e      	ldr	r1, [pc, #56]	; (8004e88 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e52:	f000 f821 	bl	8004e98 <HAL_RCC_GetSysClockFreq>
 8004e56:	4602      	mov	r2, r0
 8004e58:	4b0b      	ldr	r3, [pc, #44]	; (8004e88 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	091b      	lsrs	r3, r3, #4
 8004e5e:	f003 030f 	and.w	r3, r3, #15
 8004e62:	490a      	ldr	r1, [pc, #40]	; (8004e8c <HAL_RCC_ClockConfig+0x1c0>)
 8004e64:	5ccb      	ldrb	r3, [r1, r3]
 8004e66:	fa22 f303 	lsr.w	r3, r2, r3
 8004e6a:	4a09      	ldr	r2, [pc, #36]	; (8004e90 <HAL_RCC_ClockConfig+0x1c4>)
 8004e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e6e:	4b09      	ldr	r3, [pc, #36]	; (8004e94 <HAL_RCC_ClockConfig+0x1c8>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7fe f86e 	bl	8002f54 <HAL_InitTick>

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	40023c00 	.word	0x40023c00
 8004e88:	40023800 	.word	0x40023800
 8004e8c:	0800b220 	.word	0x0800b220
 8004e90:	20000030 	.word	0x20000030
 8004e94:	20000034 	.word	0x20000034

08004e98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e9c:	b090      	sub	sp, #64	; 0x40
 8004e9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004eac:	2300      	movs	r3, #0
 8004eae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004eb0:	4b59      	ldr	r3, [pc, #356]	; (8005018 <HAL_RCC_GetSysClockFreq+0x180>)
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f003 030c 	and.w	r3, r3, #12
 8004eb8:	2b08      	cmp	r3, #8
 8004eba:	d00d      	beq.n	8004ed8 <HAL_RCC_GetSysClockFreq+0x40>
 8004ebc:	2b08      	cmp	r3, #8
 8004ebe:	f200 80a1 	bhi.w	8005004 <HAL_RCC_GetSysClockFreq+0x16c>
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d002      	beq.n	8004ecc <HAL_RCC_GetSysClockFreq+0x34>
 8004ec6:	2b04      	cmp	r3, #4
 8004ec8:	d003      	beq.n	8004ed2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004eca:	e09b      	b.n	8005004 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ecc:	4b53      	ldr	r3, [pc, #332]	; (800501c <HAL_RCC_GetSysClockFreq+0x184>)
 8004ece:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004ed0:	e09b      	b.n	800500a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ed2:	4b53      	ldr	r3, [pc, #332]	; (8005020 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ed4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ed6:	e098      	b.n	800500a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ed8:	4b4f      	ldr	r3, [pc, #316]	; (8005018 <HAL_RCC_GetSysClockFreq+0x180>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ee0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ee2:	4b4d      	ldr	r3, [pc, #308]	; (8005018 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d028      	beq.n	8004f40 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eee:	4b4a      	ldr	r3, [pc, #296]	; (8005018 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	099b      	lsrs	r3, r3, #6
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	623b      	str	r3, [r7, #32]
 8004ef8:	627a      	str	r2, [r7, #36]	; 0x24
 8004efa:	6a3b      	ldr	r3, [r7, #32]
 8004efc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004f00:	2100      	movs	r1, #0
 8004f02:	4b47      	ldr	r3, [pc, #284]	; (8005020 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f04:	fb03 f201 	mul.w	r2, r3, r1
 8004f08:	2300      	movs	r3, #0
 8004f0a:	fb00 f303 	mul.w	r3, r0, r3
 8004f0e:	4413      	add	r3, r2
 8004f10:	4a43      	ldr	r2, [pc, #268]	; (8005020 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f12:	fba0 1202 	umull	r1, r2, r0, r2
 8004f16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f18:	460a      	mov	r2, r1
 8004f1a:	62ba      	str	r2, [r7, #40]	; 0x28
 8004f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f1e:	4413      	add	r3, r2
 8004f20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f24:	2200      	movs	r2, #0
 8004f26:	61bb      	str	r3, [r7, #24]
 8004f28:	61fa      	str	r2, [r7, #28]
 8004f2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f2e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004f32:	f7fb feb9 	bl	8000ca8 <__aeabi_uldivmod>
 8004f36:	4602      	mov	r2, r0
 8004f38:	460b      	mov	r3, r1
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f3e:	e053      	b.n	8004fe8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f40:	4b35      	ldr	r3, [pc, #212]	; (8005018 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	099b      	lsrs	r3, r3, #6
 8004f46:	2200      	movs	r2, #0
 8004f48:	613b      	str	r3, [r7, #16]
 8004f4a:	617a      	str	r2, [r7, #20]
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004f52:	f04f 0b00 	mov.w	fp, #0
 8004f56:	4652      	mov	r2, sl
 8004f58:	465b      	mov	r3, fp
 8004f5a:	f04f 0000 	mov.w	r0, #0
 8004f5e:	f04f 0100 	mov.w	r1, #0
 8004f62:	0159      	lsls	r1, r3, #5
 8004f64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f68:	0150      	lsls	r0, r2, #5
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	ebb2 080a 	subs.w	r8, r2, sl
 8004f72:	eb63 090b 	sbc.w	r9, r3, fp
 8004f76:	f04f 0200 	mov.w	r2, #0
 8004f7a:	f04f 0300 	mov.w	r3, #0
 8004f7e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004f82:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004f86:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004f8a:	ebb2 0408 	subs.w	r4, r2, r8
 8004f8e:	eb63 0509 	sbc.w	r5, r3, r9
 8004f92:	f04f 0200 	mov.w	r2, #0
 8004f96:	f04f 0300 	mov.w	r3, #0
 8004f9a:	00eb      	lsls	r3, r5, #3
 8004f9c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fa0:	00e2      	lsls	r2, r4, #3
 8004fa2:	4614      	mov	r4, r2
 8004fa4:	461d      	mov	r5, r3
 8004fa6:	eb14 030a 	adds.w	r3, r4, sl
 8004faa:	603b      	str	r3, [r7, #0]
 8004fac:	eb45 030b 	adc.w	r3, r5, fp
 8004fb0:	607b      	str	r3, [r7, #4]
 8004fb2:	f04f 0200 	mov.w	r2, #0
 8004fb6:	f04f 0300 	mov.w	r3, #0
 8004fba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004fbe:	4629      	mov	r1, r5
 8004fc0:	028b      	lsls	r3, r1, #10
 8004fc2:	4621      	mov	r1, r4
 8004fc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004fc8:	4621      	mov	r1, r4
 8004fca:	028a      	lsls	r2, r1, #10
 8004fcc:	4610      	mov	r0, r2
 8004fce:	4619      	mov	r1, r3
 8004fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	60bb      	str	r3, [r7, #8]
 8004fd6:	60fa      	str	r2, [r7, #12]
 8004fd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fdc:	f7fb fe64 	bl	8000ca8 <__aeabi_uldivmod>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fe8:	4b0b      	ldr	r3, [pc, #44]	; (8005018 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	0c1b      	lsrs	r3, r3, #16
 8004fee:	f003 0303 	and.w	r3, r3, #3
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004ff8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005000:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005002:	e002      	b.n	800500a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005004:	4b05      	ldr	r3, [pc, #20]	; (800501c <HAL_RCC_GetSysClockFreq+0x184>)
 8005006:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005008:	bf00      	nop
    }
  }
  return sysclockfreq;
 800500a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800500c:	4618      	mov	r0, r3
 800500e:	3740      	adds	r7, #64	; 0x40
 8005010:	46bd      	mov	sp, r7
 8005012:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005016:	bf00      	nop
 8005018:	40023800 	.word	0x40023800
 800501c:	00f42400 	.word	0x00f42400
 8005020:	017d7840 	.word	0x017d7840

08005024 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005024:	b480      	push	{r7}
 8005026:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005028:	4b03      	ldr	r3, [pc, #12]	; (8005038 <HAL_RCC_GetHCLKFreq+0x14>)
 800502a:	681b      	ldr	r3, [r3, #0]
}
 800502c:	4618      	mov	r0, r3
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	20000030 	.word	0x20000030

0800503c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005040:	f7ff fff0 	bl	8005024 <HAL_RCC_GetHCLKFreq>
 8005044:	4602      	mov	r2, r0
 8005046:	4b05      	ldr	r3, [pc, #20]	; (800505c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	0a9b      	lsrs	r3, r3, #10
 800504c:	f003 0307 	and.w	r3, r3, #7
 8005050:	4903      	ldr	r1, [pc, #12]	; (8005060 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005052:	5ccb      	ldrb	r3, [r1, r3]
 8005054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005058:	4618      	mov	r0, r3
 800505a:	bd80      	pop	{r7, pc}
 800505c:	40023800 	.word	0x40023800
 8005060:	0800b230 	.word	0x0800b230

08005064 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005068:	f7ff ffdc 	bl	8005024 <HAL_RCC_GetHCLKFreq>
 800506c:	4602      	mov	r2, r0
 800506e:	4b05      	ldr	r3, [pc, #20]	; (8005084 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	0b5b      	lsrs	r3, r3, #13
 8005074:	f003 0307 	and.w	r3, r3, #7
 8005078:	4903      	ldr	r1, [pc, #12]	; (8005088 <HAL_RCC_GetPCLK2Freq+0x24>)
 800507a:	5ccb      	ldrb	r3, [r1, r3]
 800507c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005080:	4618      	mov	r0, r3
 8005082:	bd80      	pop	{r7, pc}
 8005084:	40023800 	.word	0x40023800
 8005088:	0800b230 	.word	0x0800b230

0800508c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005094:	2300      	movs	r3, #0
 8005096:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005098:	2300      	movs	r3, #0
 800509a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10b      	bne.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d105      	bne.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d075      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80050c0:	4b91      	ldr	r3, [pc, #580]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050c6:	f7fd ff89 	bl	8002fdc <HAL_GetTick>
 80050ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050cc:	e008      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80050ce:	f7fd ff85 	bl	8002fdc <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d901      	bls.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e189      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050e0:	4b8a      	ldr	r3, [pc, #552]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1f0      	bne.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d009      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	019a      	lsls	r2, r3, #6
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	071b      	lsls	r3, r3, #28
 8005104:	4981      	ldr	r1, [pc, #516]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005106:	4313      	orrs	r3, r2
 8005108:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d01f      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005118:	4b7c      	ldr	r3, [pc, #496]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800511a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800511e:	0f1b      	lsrs	r3, r3, #28
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	019a      	lsls	r2, r3, #6
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	061b      	lsls	r3, r3, #24
 8005132:	431a      	orrs	r2, r3
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	071b      	lsls	r3, r3, #28
 8005138:	4974      	ldr	r1, [pc, #464]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800513a:	4313      	orrs	r3, r2
 800513c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005140:	4b72      	ldr	r3, [pc, #456]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005142:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005146:	f023 021f 	bic.w	r2, r3, #31
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	3b01      	subs	r3, #1
 8005150:	496e      	ldr	r1, [pc, #440]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005152:	4313      	orrs	r3, r2
 8005154:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00d      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	019a      	lsls	r2, r3, #6
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	061b      	lsls	r3, r3, #24
 8005170:	431a      	orrs	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	071b      	lsls	r3, r3, #28
 8005178:	4964      	ldr	r1, [pc, #400]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800517a:	4313      	orrs	r3, r2
 800517c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005180:	4b61      	ldr	r3, [pc, #388]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005182:	2201      	movs	r2, #1
 8005184:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005186:	f7fd ff29 	bl	8002fdc <HAL_GetTick>
 800518a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800518c:	e008      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800518e:	f7fd ff25 	bl	8002fdc <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d901      	bls.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e129      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051a0:	4b5a      	ldr	r3, [pc, #360]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d0f0      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0304 	and.w	r3, r3, #4
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d105      	bne.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d079      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80051c4:	4b52      	ldr	r3, [pc, #328]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051ca:	f7fd ff07 	bl	8002fdc <HAL_GetTick>
 80051ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051d0:	e008      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80051d2:	f7fd ff03 	bl	8002fdc <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d901      	bls.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e107      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051e4:	4b49      	ldr	r3, [pc, #292]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051f0:	d0ef      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0304 	and.w	r3, r3, #4
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d020      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80051fe:	4b43      	ldr	r3, [pc, #268]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005204:	0f1b      	lsrs	r3, r3, #28
 8005206:	f003 0307 	and.w	r3, r3, #7
 800520a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	019a      	lsls	r2, r3, #6
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	061b      	lsls	r3, r3, #24
 8005218:	431a      	orrs	r2, r3
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	071b      	lsls	r3, r3, #28
 800521e:	493b      	ldr	r1, [pc, #236]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005220:	4313      	orrs	r3, r2
 8005222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005226:	4b39      	ldr	r3, [pc, #228]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800522c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a1b      	ldr	r3, [r3, #32]
 8005234:	3b01      	subs	r3, #1
 8005236:	021b      	lsls	r3, r3, #8
 8005238:	4934      	ldr	r1, [pc, #208]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800523a:	4313      	orrs	r3, r2
 800523c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0308 	and.w	r3, r3, #8
 8005248:	2b00      	cmp	r3, #0
 800524a:	d01e      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800524c:	4b2f      	ldr	r3, [pc, #188]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800524e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005252:	0e1b      	lsrs	r3, r3, #24
 8005254:	f003 030f 	and.w	r3, r3, #15
 8005258:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	019a      	lsls	r2, r3, #6
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	061b      	lsls	r3, r3, #24
 8005264:	431a      	orrs	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	071b      	lsls	r3, r3, #28
 800526c:	4927      	ldr	r1, [pc, #156]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800526e:	4313      	orrs	r3, r2
 8005270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005274:	4b25      	ldr	r3, [pc, #148]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005276:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800527a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005282:	4922      	ldr	r1, [pc, #136]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005284:	4313      	orrs	r3, r2
 8005286:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800528a:	4b21      	ldr	r3, [pc, #132]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800528c:	2201      	movs	r2, #1
 800528e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005290:	f7fd fea4 	bl	8002fdc <HAL_GetTick>
 8005294:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005296:	e008      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005298:	f7fd fea0 	bl	8002fdc <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d901      	bls.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e0a4      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052aa:	4b18      	ldr	r3, [pc, #96]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052b6:	d1ef      	bne.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0320 	and.w	r3, r3, #32
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f000 808b 	beq.w	80053dc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80052c6:	2300      	movs	r3, #0
 80052c8:	60fb      	str	r3, [r7, #12]
 80052ca:	4b10      	ldr	r3, [pc, #64]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ce:	4a0f      	ldr	r2, [pc, #60]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052d4:	6413      	str	r3, [r2, #64]	; 0x40
 80052d6:	4b0d      	ldr	r3, [pc, #52]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052de:	60fb      	str	r3, [r7, #12]
 80052e0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80052e2:	4b0c      	ldr	r3, [pc, #48]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a0b      	ldr	r2, [pc, #44]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80052e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052ec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80052ee:	f7fd fe75 	bl	8002fdc <HAL_GetTick>
 80052f2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80052f4:	e010      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80052f6:	f7fd fe71 	bl	8002fdc <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	2b02      	cmp	r3, #2
 8005302:	d909      	bls.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e075      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005308:	42470068 	.word	0x42470068
 800530c:	40023800 	.word	0x40023800
 8005310:	42470070 	.word	0x42470070
 8005314:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005318:	4b38      	ldr	r3, [pc, #224]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005320:	2b00      	cmp	r3, #0
 8005322:	d0e8      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005324:	4b36      	ldr	r3, [pc, #216]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005328:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800532c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d02f      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005338:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	429a      	cmp	r2, r3
 8005340:	d028      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005342:	4b2f      	ldr	r3, [pc, #188]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005346:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800534a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800534c:	4b2d      	ldr	r3, [pc, #180]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800534e:	2201      	movs	r2, #1
 8005350:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005352:	4b2c      	ldr	r3, [pc, #176]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005354:	2200      	movs	r2, #0
 8005356:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005358:	4a29      	ldr	r2, [pc, #164]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800535e:	4b28      	ldr	r3, [pc, #160]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b01      	cmp	r3, #1
 8005368:	d114      	bne.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800536a:	f7fd fe37 	bl	8002fdc <HAL_GetTick>
 800536e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005370:	e00a      	b.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005372:	f7fd fe33 	bl	8002fdc <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005380:	4293      	cmp	r3, r2
 8005382:	d901      	bls.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e035      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005388:	4b1d      	ldr	r3, [pc, #116]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800538a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d0ee      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005398:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800539c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053a0:	d10d      	bne.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x332>
 80053a2:	4b17      	ldr	r3, [pc, #92]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80053b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053b6:	4912      	ldr	r1, [pc, #72]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	608b      	str	r3, [r1, #8]
 80053bc:	e005      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80053be:	4b10      	ldr	r3, [pc, #64]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	4a0f      	ldr	r2, [pc, #60]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053c4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80053c8:	6093      	str	r3, [r2, #8]
 80053ca:	4b0d      	ldr	r3, [pc, #52]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053d6:	490a      	ldr	r1, [pc, #40]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0310 	and.w	r3, r3, #16
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d004      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80053ee:	4b06      	ldr	r3, [pc, #24]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80053f0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3718      	adds	r7, #24
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	40007000 	.word	0x40007000
 8005400:	40023800 	.word	0x40023800
 8005404:	42470e40 	.word	0x42470e40
 8005408:	424711e0 	.word	0x424711e0

0800540c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e066      	b.n	80054f0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	7f5b      	ldrb	r3, [r3, #29]
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	d105      	bne.n	8005438 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f7fd f9bc 	bl	80027b0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	22ca      	movs	r2, #202	; 0xca
 8005444:	625a      	str	r2, [r3, #36]	; 0x24
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2253      	movs	r2, #83	; 0x53
 800544c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 fa45 	bl	80058de <RTC_EnterInitMode>
 8005454:	4603      	mov	r3, r0
 8005456:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005458:	7bfb      	ldrb	r3, [r7, #15]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d12c      	bne.n	80054b8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	6812      	ldr	r2, [r2, #0]
 8005468:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800546c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005470:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6899      	ldr	r1, [r3, #8]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	431a      	orrs	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	431a      	orrs	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	68d2      	ldr	r2, [r2, #12]
 8005498:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	6919      	ldr	r1, [r3, #16]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	041a      	lsls	r2, r3, #16
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 fa4c 	bl	800594c <RTC_ExitInitMode>
 80054b4:	4603      	mov	r3, r0
 80054b6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80054b8:	7bfb      	ldrb	r3, [r7, #15]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d113      	bne.n	80054e6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80054cc:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	699a      	ldr	r2, [r3, #24]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	430a      	orrs	r2, r1
 80054de:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	22ff      	movs	r2, #255	; 0xff
 80054ec:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80054ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80054f8:	b590      	push	{r4, r7, lr}
 80054fa:	b087      	sub	sp, #28
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005504:	2300      	movs	r3, #0
 8005506:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	7f1b      	ldrb	r3, [r3, #28]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d101      	bne.n	8005514 <HAL_RTC_SetTime+0x1c>
 8005510:	2302      	movs	r3, #2
 8005512:	e087      	b.n	8005624 <HAL_RTC_SetTime+0x12c>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2201      	movs	r2, #1
 8005518:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2202      	movs	r2, #2
 800551e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d126      	bne.n	8005574 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005530:	2b00      	cmp	r3, #0
 8005532:	d102      	bne.n	800553a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	2200      	movs	r2, #0
 8005538:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	4618      	mov	r0, r3
 8005540:	f000 fa29 	bl	8005996 <RTC_ByteToBcd2>
 8005544:	4603      	mov	r3, r0
 8005546:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	785b      	ldrb	r3, [r3, #1]
 800554c:	4618      	mov	r0, r3
 800554e:	f000 fa22 	bl	8005996 <RTC_ByteToBcd2>
 8005552:	4603      	mov	r3, r0
 8005554:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005556:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	789b      	ldrb	r3, [r3, #2]
 800555c:	4618      	mov	r0, r3
 800555e:	f000 fa1a 	bl	8005996 <RTC_ByteToBcd2>
 8005562:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005564:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	78db      	ldrb	r3, [r3, #3]
 800556c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800556e:	4313      	orrs	r3, r2
 8005570:	617b      	str	r3, [r7, #20]
 8005572:	e018      	b.n	80055a6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557e:	2b00      	cmp	r3, #0
 8005580:	d102      	bne.n	8005588 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	2200      	movs	r2, #0
 8005586:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	785b      	ldrb	r3, [r3, #1]
 8005592:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005594:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800559a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	78db      	ldrb	r3, [r3, #3]
 80055a0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80055a2:	4313      	orrs	r3, r2
 80055a4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	22ca      	movs	r2, #202	; 0xca
 80055ac:	625a      	str	r2, [r3, #36]	; 0x24
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2253      	movs	r2, #83	; 0x53
 80055b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f000 f991 	bl	80058de <RTC_EnterInitMode>
 80055bc:	4603      	mov	r3, r0
 80055be:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80055c0:	7cfb      	ldrb	r3, [r7, #19]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d120      	bne.n	8005608 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80055d0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80055d4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80055e4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6899      	ldr	r1, [r3, #8]
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	68da      	ldr	r2, [r3, #12]
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	431a      	orrs	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	430a      	orrs	r2, r1
 80055fc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f000 f9a4 	bl	800594c <RTC_ExitInitMode>
 8005604:	4603      	mov	r3, r0
 8005606:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005608:	7cfb      	ldrb	r3, [r7, #19]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d102      	bne.n	8005614 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2201      	movs	r2, #1
 8005612:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	22ff      	movs	r2, #255	; 0xff
 800561a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	771a      	strb	r2, [r3, #28]

  return status;
 8005622:	7cfb      	ldrb	r3, [r7, #19]
}
 8005624:	4618      	mov	r0, r3
 8005626:	371c      	adds	r7, #28
 8005628:	46bd      	mov	sp, r7
 800562a:	bd90      	pop	{r4, r7, pc}

0800562c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005638:	2300      	movs	r3, #0
 800563a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800565e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005662:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	0c1b      	lsrs	r3, r3, #16
 8005668:	b2db      	uxtb	r3, r3
 800566a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800566e:	b2da      	uxtb	r2, r3
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	0a1b      	lsrs	r3, r3, #8
 8005678:	b2db      	uxtb	r3, r3
 800567a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800567e:	b2da      	uxtb	r2, r3
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	b2db      	uxtb	r3, r3
 8005688:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800568c:	b2da      	uxtb	r2, r3
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	0d9b      	lsrs	r3, r3, #22
 8005696:	b2db      	uxtb	r3, r3
 8005698:	f003 0301 	and.w	r3, r3, #1
 800569c:	b2da      	uxtb	r2, r3
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d11a      	bne.n	80056de <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	4618      	mov	r0, r3
 80056ae:	f000 f98f 	bl	80059d0 <RTC_Bcd2ToByte>
 80056b2:	4603      	mov	r3, r0
 80056b4:	461a      	mov	r2, r3
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	785b      	ldrb	r3, [r3, #1]
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 f986 	bl	80059d0 <RTC_Bcd2ToByte>
 80056c4:	4603      	mov	r3, r0
 80056c6:	461a      	mov	r2, r3
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	789b      	ldrb	r3, [r3, #2]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f000 f97d 	bl	80059d0 <RTC_Bcd2ToByte>
 80056d6:	4603      	mov	r3, r0
 80056d8:	461a      	mov	r2, r3
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3718      	adds	r7, #24
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80056e8:	b590      	push	{r4, r7, lr}
 80056ea:	b087      	sub	sp, #28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80056f4:	2300      	movs	r3, #0
 80056f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	7f1b      	ldrb	r3, [r3, #28]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d101      	bne.n	8005704 <HAL_RTC_SetDate+0x1c>
 8005700:	2302      	movs	r3, #2
 8005702:	e071      	b.n	80057e8 <HAL_RTC_SetDate+0x100>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2201      	movs	r2, #1
 8005708:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2202      	movs	r2, #2
 800570e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10e      	bne.n	8005734 <HAL_RTC_SetDate+0x4c>
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	785b      	ldrb	r3, [r3, #1]
 800571a:	f003 0310 	and.w	r3, r3, #16
 800571e:	2b00      	cmp	r3, #0
 8005720:	d008      	beq.n	8005734 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	785b      	ldrb	r3, [r3, #1]
 8005726:	f023 0310 	bic.w	r3, r3, #16
 800572a:	b2db      	uxtb	r3, r3
 800572c:	330a      	adds	r3, #10
 800572e:	b2da      	uxtb	r2, r3
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d11c      	bne.n	8005774 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	78db      	ldrb	r3, [r3, #3]
 800573e:	4618      	mov	r0, r3
 8005740:	f000 f929 	bl	8005996 <RTC_ByteToBcd2>
 8005744:	4603      	mov	r3, r0
 8005746:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	785b      	ldrb	r3, [r3, #1]
 800574c:	4618      	mov	r0, r3
 800574e:	f000 f922 	bl	8005996 <RTC_ByteToBcd2>
 8005752:	4603      	mov	r3, r0
 8005754:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005756:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	789b      	ldrb	r3, [r3, #2]
 800575c:	4618      	mov	r0, r3
 800575e:	f000 f91a 	bl	8005996 <RTC_ByteToBcd2>
 8005762:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005764:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800576e:	4313      	orrs	r3, r2
 8005770:	617b      	str	r3, [r7, #20]
 8005772:	e00e      	b.n	8005792 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	78db      	ldrb	r3, [r3, #3]
 8005778:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	785b      	ldrb	r3, [r3, #1]
 800577e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005780:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005786:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800578e:	4313      	orrs	r3, r2
 8005790:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	22ca      	movs	r2, #202	; 0xca
 8005798:	625a      	str	r2, [r3, #36]	; 0x24
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2253      	movs	r2, #83	; 0x53
 80057a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f000 f89b 	bl	80058de <RTC_EnterInitMode>
 80057a8:	4603      	mov	r3, r0
 80057aa:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80057ac:	7cfb      	ldrb	r3, [r7, #19]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10c      	bne.n	80057cc <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80057bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80057c0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f000 f8c2 	bl	800594c <RTC_ExitInitMode>
 80057c8:	4603      	mov	r3, r0
 80057ca:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80057cc:	7cfb      	ldrb	r3, [r7, #19]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d102      	bne.n	80057d8 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2201      	movs	r2, #1
 80057d6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	22ff      	movs	r2, #255	; 0xff
 80057de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	771a      	strb	r2, [r3, #28]

  return status;
 80057e6:	7cfb      	ldrb	r3, [r7, #19]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	371c      	adds	r7, #28
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd90      	pop	{r4, r7, pc}

080057f0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800580a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800580e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	0c1b      	lsrs	r3, r3, #16
 8005814:	b2da      	uxtb	r2, r3
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	0a1b      	lsrs	r3, r3, #8
 800581e:	b2db      	uxtb	r3, r3
 8005820:	f003 031f 	and.w	r3, r3, #31
 8005824:	b2da      	uxtb	r2, r3
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	b2db      	uxtb	r3, r3
 800582e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005832:	b2da      	uxtb	r2, r3
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	0b5b      	lsrs	r3, r3, #13
 800583c:	b2db      	uxtb	r3, r3
 800583e:	f003 0307 	and.w	r3, r3, #7
 8005842:	b2da      	uxtb	r2, r3
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d11a      	bne.n	8005884 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	78db      	ldrb	r3, [r3, #3]
 8005852:	4618      	mov	r0, r3
 8005854:	f000 f8bc 	bl	80059d0 <RTC_Bcd2ToByte>
 8005858:	4603      	mov	r3, r0
 800585a:	461a      	mov	r2, r3
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	785b      	ldrb	r3, [r3, #1]
 8005864:	4618      	mov	r0, r3
 8005866:	f000 f8b3 	bl	80059d0 <RTC_Bcd2ToByte>
 800586a:	4603      	mov	r3, r0
 800586c:	461a      	mov	r2, r3
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	789b      	ldrb	r3, [r3, #2]
 8005876:	4618      	mov	r0, r3
 8005878:	f000 f8aa 	bl	80059d0 <RTC_Bcd2ToByte>
 800587c:	4603      	mov	r3, r0
 800587e:	461a      	mov	r2, r3
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b084      	sub	sp, #16
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005896:	2300      	movs	r3, #0
 8005898:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68da      	ldr	r2, [r3, #12]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80058a8:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80058aa:	f7fd fb97 	bl	8002fdc <HAL_GetTick>
 80058ae:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80058b0:	e009      	b.n	80058c6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80058b2:	f7fd fb93 	bl	8002fdc <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058c0:	d901      	bls.n	80058c6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e007      	b.n	80058d6 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	f003 0320 	and.w	r3, r3, #32
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d0ee      	beq.n	80058b2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b084      	sub	sp, #16
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058e6:	2300      	movs	r3, #0
 80058e8:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80058ea:	2300      	movs	r3, #0
 80058ec:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d122      	bne.n	8005942 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68da      	ldr	r2, [r3, #12]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800590a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800590c:	f7fd fb66 	bl	8002fdc <HAL_GetTick>
 8005910:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005912:	e00c      	b.n	800592e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005914:	f7fd fb62 	bl	8002fdc <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005922:	d904      	bls.n	800592e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2204      	movs	r2, #4
 8005928:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005938:	2b00      	cmp	r3, #0
 800593a:	d102      	bne.n	8005942 <RTC_EnterInitMode+0x64>
 800593c:	7bfb      	ldrb	r3, [r7, #15]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d1e8      	bne.n	8005914 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005942:	7bfb      	ldrb	r3, [r7, #15]
}
 8005944:	4618      	mov	r0, r3
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005954:	2300      	movs	r3, #0
 8005956:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68da      	ldr	r2, [r3, #12]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005966:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f003 0320 	and.w	r3, r3, #32
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10a      	bne.n	800598c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7ff ff89 	bl	800588e <HAL_RTC_WaitForSynchro>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d004      	beq.n	800598c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2204      	movs	r2, #4
 8005986:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800598c:	7bfb      	ldrb	r3, [r7, #15]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005996:	b480      	push	{r7}
 8005998:	b085      	sub	sp, #20
 800599a:	af00      	add	r7, sp, #0
 800599c:	4603      	mov	r3, r0
 800599e:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80059a0:	2300      	movs	r3, #0
 80059a2:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80059a4:	e005      	b.n	80059b2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80059a6:	7bfb      	ldrb	r3, [r7, #15]
 80059a8:	3301      	adds	r3, #1
 80059aa:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80059ac:	79fb      	ldrb	r3, [r7, #7]
 80059ae:	3b0a      	subs	r3, #10
 80059b0:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80059b2:	79fb      	ldrb	r3, [r7, #7]
 80059b4:	2b09      	cmp	r3, #9
 80059b6:	d8f6      	bhi.n	80059a6 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80059b8:	7bfb      	ldrb	r3, [r7, #15]
 80059ba:	011b      	lsls	r3, r3, #4
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	79fb      	ldrb	r3, [r7, #7]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	b2db      	uxtb	r3, r3
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3714      	adds	r7, #20
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	4603      	mov	r3, r0
 80059d8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80059da:	2300      	movs	r3, #0
 80059dc:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80059de:	79fb      	ldrb	r3, [r7, #7]
 80059e0:	091b      	lsrs	r3, r3, #4
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	461a      	mov	r2, r3
 80059e6:	0092      	lsls	r2, r2, #2
 80059e8:	4413      	add	r3, r2
 80059ea:	005b      	lsls	r3, r3, #1
 80059ec:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80059ee:	79fb      	ldrb	r3, [r7, #7]
 80059f0:	f003 030f 	and.w	r3, r3, #15
 80059f4:	b2da      	uxtb	r2, r3
 80059f6:	7bfb      	ldrb	r3, [r7, #15]
 80059f8:	4413      	add	r3, r2
 80059fa:	b2db      	uxtb	r3, r3
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3714      	adds	r7, #20
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e03f      	b.n	8005a9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d106      	bne.n	8005a34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f7fd f8e4 	bl	8002bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2224      	movs	r2, #36	; 0x24
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68da      	ldr	r2, [r3, #12]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 f9cb 	bl	8005de8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	691a      	ldr	r2, [r3, #16]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	695a      	ldr	r2, [r3, #20]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68da      	ldr	r2, [r3, #12]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2220      	movs	r2, #32
 8005a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b08a      	sub	sp, #40	; 0x28
 8005aa6:	af02      	add	r7, sp, #8
 8005aa8:	60f8      	str	r0, [r7, #12]
 8005aaa:	60b9      	str	r1, [r7, #8]
 8005aac:	603b      	str	r3, [r7, #0]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b20      	cmp	r3, #32
 8005ac0:	d17c      	bne.n	8005bbc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d002      	beq.n	8005ace <HAL_UART_Transmit+0x2c>
 8005ac8:	88fb      	ldrh	r3, [r7, #6]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d101      	bne.n	8005ad2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e075      	b.n	8005bbe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d101      	bne.n	8005ae0 <HAL_UART_Transmit+0x3e>
 8005adc:	2302      	movs	r3, #2
 8005ade:	e06e      	b.n	8005bbe <HAL_UART_Transmit+0x11c>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2221      	movs	r2, #33	; 0x21
 8005af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005af6:	f7fd fa71 	bl	8002fdc <HAL_GetTick>
 8005afa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	88fa      	ldrh	r2, [r7, #6]
 8005b00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	88fa      	ldrh	r2, [r7, #6]
 8005b06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b10:	d108      	bne.n	8005b24 <HAL_UART_Transmit+0x82>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d104      	bne.n	8005b24 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	61bb      	str	r3, [r7, #24]
 8005b22:	e003      	b.n	8005b2c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005b34:	e02a      	b.n	8005b8c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	9300      	str	r3, [sp, #0]
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	2180      	movs	r1, #128	; 0x80
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f000 f8e2 	bl	8005d0a <UART_WaitOnFlagUntilTimeout>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e036      	b.n	8005bbe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10b      	bne.n	8005b6e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	881b      	ldrh	r3, [r3, #0]
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	3302      	adds	r3, #2
 8005b6a:	61bb      	str	r3, [r7, #24]
 8005b6c:	e007      	b.n	8005b7e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	781a      	ldrb	r2, [r3, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	3b01      	subs	r3, #1
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1cf      	bne.n	8005b36 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	9300      	str	r3, [sp, #0]
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	2140      	movs	r1, #64	; 0x40
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f000 f8b2 	bl	8005d0a <UART_WaitOnFlagUntilTimeout>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d001      	beq.n	8005bb0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e006      	b.n	8005bbe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	e000      	b.n	8005bbe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005bbc:	2302      	movs	r3, #2
  }
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3720      	adds	r7, #32
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b08a      	sub	sp, #40	; 0x28
 8005bca:	af02      	add	r7, sp, #8
 8005bcc:	60f8      	str	r0, [r7, #12]
 8005bce:	60b9      	str	r1, [r7, #8]
 8005bd0:	603b      	str	r3, [r7, #0]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b20      	cmp	r3, #32
 8005be4:	f040 808c 	bne.w	8005d00 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d002      	beq.n	8005bf4 <HAL_UART_Receive+0x2e>
 8005bee:	88fb      	ldrh	r3, [r7, #6]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e084      	b.n	8005d02 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d101      	bne.n	8005c06 <HAL_UART_Receive+0x40>
 8005c02:	2302      	movs	r3, #2
 8005c04:	e07d      	b.n	8005d02 <HAL_UART_Receive+0x13c>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2222      	movs	r2, #34	; 0x22
 8005c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c22:	f7fd f9db 	bl	8002fdc <HAL_GetTick>
 8005c26:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	88fa      	ldrh	r2, [r7, #6]
 8005c2c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	88fa      	ldrh	r2, [r7, #6]
 8005c32:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c3c:	d108      	bne.n	8005c50 <HAL_UART_Receive+0x8a>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d104      	bne.n	8005c50 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005c46:	2300      	movs	r3, #0
 8005c48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	61bb      	str	r3, [r7, #24]
 8005c4e:	e003      	b.n	8005c58 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c54:	2300      	movs	r3, #0
 8005c56:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005c60:	e043      	b.n	8005cea <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	2120      	movs	r1, #32
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 f84c 	bl	8005d0a <UART_WaitOnFlagUntilTimeout>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d001      	beq.n	8005c7c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e042      	b.n	8005d02 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10c      	bne.n	8005c9c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	3302      	adds	r3, #2
 8005c98:	61bb      	str	r3, [r7, #24]
 8005c9a:	e01f      	b.n	8005cdc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ca4:	d007      	beq.n	8005cb6 <HAL_UART_Receive+0xf0>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d10a      	bne.n	8005cc4 <HAL_UART_Receive+0xfe>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d106      	bne.n	8005cc4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	b2da      	uxtb	r2, r3
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	701a      	strb	r2, [r3, #0]
 8005cc2:	e008      	b.n	8005cd6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cd0:	b2da      	uxtb	r2, r3
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1b6      	bne.n	8005c62 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	e000      	b.n	8005d02 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005d00:	2302      	movs	r3, #2
  }
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3720      	adds	r7, #32
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b090      	sub	sp, #64	; 0x40
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	60f8      	str	r0, [r7, #12]
 8005d12:	60b9      	str	r1, [r7, #8]
 8005d14:	603b      	str	r3, [r7, #0]
 8005d16:	4613      	mov	r3, r2
 8005d18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d1a:	e050      	b.n	8005dbe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d22:	d04c      	beq.n	8005dbe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005d24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d007      	beq.n	8005d3a <UART_WaitOnFlagUntilTimeout+0x30>
 8005d2a:	f7fd f957 	bl	8002fdc <HAL_GetTick>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d241      	bcs.n	8005dbe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	330c      	adds	r3, #12
 8005d40:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d44:	e853 3f00 	ldrex	r3, [r3]
 8005d48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	330c      	adds	r3, #12
 8005d58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d5a:	637a      	str	r2, [r7, #52]	; 0x34
 8005d5c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d62:	e841 2300 	strex	r3, r2, [r1]
 8005d66:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1e5      	bne.n	8005d3a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	3314      	adds	r3, #20
 8005d74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	e853 3f00 	ldrex	r3, [r3]
 8005d7c:	613b      	str	r3, [r7, #16]
   return(result);
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	f023 0301 	bic.w	r3, r3, #1
 8005d84:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	3314      	adds	r3, #20
 8005d8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d8e:	623a      	str	r2, [r7, #32]
 8005d90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d92:	69f9      	ldr	r1, [r7, #28]
 8005d94:	6a3a      	ldr	r2, [r7, #32]
 8005d96:	e841 2300 	strex	r3, r2, [r1]
 8005d9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1e5      	bne.n	8005d6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2220      	movs	r2, #32
 8005da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2220      	movs	r2, #32
 8005dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e00f      	b.n	8005dde <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	bf0c      	ite	eq
 8005dce:	2301      	moveq	r3, #1
 8005dd0:	2300      	movne	r3, #0
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	79fb      	ldrb	r3, [r7, #7]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d09f      	beq.n	8005d1c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3740      	adds	r7, #64	; 0x40
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
	...

08005de8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005dec:	b0c0      	sub	sp, #256	; 0x100
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e04:	68d9      	ldr	r1, [r3, #12]
 8005e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	ea40 0301 	orr.w	r3, r0, r1
 8005e10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e16:	689a      	ldr	r2, [r3, #8]
 8005e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	431a      	orrs	r2, r3
 8005e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	431a      	orrs	r2, r3
 8005e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e40:	f021 010c 	bic.w	r1, r1, #12
 8005e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e4e:	430b      	orrs	r3, r1
 8005e50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e62:	6999      	ldr	r1, [r3, #24]
 8005e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	ea40 0301 	orr.w	r3, r0, r1
 8005e6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	4b8f      	ldr	r3, [pc, #572]	; (80060b4 <UART_SetConfig+0x2cc>)
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d005      	beq.n	8005e88 <UART_SetConfig+0xa0>
 8005e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	4b8d      	ldr	r3, [pc, #564]	; (80060b8 <UART_SetConfig+0x2d0>)
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d104      	bne.n	8005e92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e88:	f7ff f8ec 	bl	8005064 <HAL_RCC_GetPCLK2Freq>
 8005e8c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005e90:	e003      	b.n	8005e9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e92:	f7ff f8d3 	bl	800503c <HAL_RCC_GetPCLK1Freq>
 8005e96:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e9e:	69db      	ldr	r3, [r3, #28]
 8005ea0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ea4:	f040 810c 	bne.w	80060c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ea8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005eac:	2200      	movs	r2, #0
 8005eae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005eb2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005eb6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005eba:	4622      	mov	r2, r4
 8005ebc:	462b      	mov	r3, r5
 8005ebe:	1891      	adds	r1, r2, r2
 8005ec0:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ec2:	415b      	adcs	r3, r3
 8005ec4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ec6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005eca:	4621      	mov	r1, r4
 8005ecc:	eb12 0801 	adds.w	r8, r2, r1
 8005ed0:	4629      	mov	r1, r5
 8005ed2:	eb43 0901 	adc.w	r9, r3, r1
 8005ed6:	f04f 0200 	mov.w	r2, #0
 8005eda:	f04f 0300 	mov.w	r3, #0
 8005ede:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ee2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ee6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005eea:	4690      	mov	r8, r2
 8005eec:	4699      	mov	r9, r3
 8005eee:	4623      	mov	r3, r4
 8005ef0:	eb18 0303 	adds.w	r3, r8, r3
 8005ef4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ef8:	462b      	mov	r3, r5
 8005efa:	eb49 0303 	adc.w	r3, r9, r3
 8005efe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f0e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005f12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005f16:	460b      	mov	r3, r1
 8005f18:	18db      	adds	r3, r3, r3
 8005f1a:	653b      	str	r3, [r7, #80]	; 0x50
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	eb42 0303 	adc.w	r3, r2, r3
 8005f22:	657b      	str	r3, [r7, #84]	; 0x54
 8005f24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005f28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005f2c:	f7fa febc 	bl	8000ca8 <__aeabi_uldivmod>
 8005f30:	4602      	mov	r2, r0
 8005f32:	460b      	mov	r3, r1
 8005f34:	4b61      	ldr	r3, [pc, #388]	; (80060bc <UART_SetConfig+0x2d4>)
 8005f36:	fba3 2302 	umull	r2, r3, r3, r2
 8005f3a:	095b      	lsrs	r3, r3, #5
 8005f3c:	011c      	lsls	r4, r3, #4
 8005f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f42:	2200      	movs	r2, #0
 8005f44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f48:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005f4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005f50:	4642      	mov	r2, r8
 8005f52:	464b      	mov	r3, r9
 8005f54:	1891      	adds	r1, r2, r2
 8005f56:	64b9      	str	r1, [r7, #72]	; 0x48
 8005f58:	415b      	adcs	r3, r3
 8005f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005f60:	4641      	mov	r1, r8
 8005f62:	eb12 0a01 	adds.w	sl, r2, r1
 8005f66:	4649      	mov	r1, r9
 8005f68:	eb43 0b01 	adc.w	fp, r3, r1
 8005f6c:	f04f 0200 	mov.w	r2, #0
 8005f70:	f04f 0300 	mov.w	r3, #0
 8005f74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f80:	4692      	mov	sl, r2
 8005f82:	469b      	mov	fp, r3
 8005f84:	4643      	mov	r3, r8
 8005f86:	eb1a 0303 	adds.w	r3, sl, r3
 8005f8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f8e:	464b      	mov	r3, r9
 8005f90:	eb4b 0303 	adc.w	r3, fp, r3
 8005f94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fa4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005fa8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005fac:	460b      	mov	r3, r1
 8005fae:	18db      	adds	r3, r3, r3
 8005fb0:	643b      	str	r3, [r7, #64]	; 0x40
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	eb42 0303 	adc.w	r3, r2, r3
 8005fb8:	647b      	str	r3, [r7, #68]	; 0x44
 8005fba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005fbe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005fc2:	f7fa fe71 	bl	8000ca8 <__aeabi_uldivmod>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	460b      	mov	r3, r1
 8005fca:	4611      	mov	r1, r2
 8005fcc:	4b3b      	ldr	r3, [pc, #236]	; (80060bc <UART_SetConfig+0x2d4>)
 8005fce:	fba3 2301 	umull	r2, r3, r3, r1
 8005fd2:	095b      	lsrs	r3, r3, #5
 8005fd4:	2264      	movs	r2, #100	; 0x64
 8005fd6:	fb02 f303 	mul.w	r3, r2, r3
 8005fda:	1acb      	subs	r3, r1, r3
 8005fdc:	00db      	lsls	r3, r3, #3
 8005fde:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005fe2:	4b36      	ldr	r3, [pc, #216]	; (80060bc <UART_SetConfig+0x2d4>)
 8005fe4:	fba3 2302 	umull	r2, r3, r3, r2
 8005fe8:	095b      	lsrs	r3, r3, #5
 8005fea:	005b      	lsls	r3, r3, #1
 8005fec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ff0:	441c      	add	r4, r3
 8005ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ffc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006000:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006004:	4642      	mov	r2, r8
 8006006:	464b      	mov	r3, r9
 8006008:	1891      	adds	r1, r2, r2
 800600a:	63b9      	str	r1, [r7, #56]	; 0x38
 800600c:	415b      	adcs	r3, r3
 800600e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006010:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006014:	4641      	mov	r1, r8
 8006016:	1851      	adds	r1, r2, r1
 8006018:	6339      	str	r1, [r7, #48]	; 0x30
 800601a:	4649      	mov	r1, r9
 800601c:	414b      	adcs	r3, r1
 800601e:	637b      	str	r3, [r7, #52]	; 0x34
 8006020:	f04f 0200 	mov.w	r2, #0
 8006024:	f04f 0300 	mov.w	r3, #0
 8006028:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800602c:	4659      	mov	r1, fp
 800602e:	00cb      	lsls	r3, r1, #3
 8006030:	4651      	mov	r1, sl
 8006032:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006036:	4651      	mov	r1, sl
 8006038:	00ca      	lsls	r2, r1, #3
 800603a:	4610      	mov	r0, r2
 800603c:	4619      	mov	r1, r3
 800603e:	4603      	mov	r3, r0
 8006040:	4642      	mov	r2, r8
 8006042:	189b      	adds	r3, r3, r2
 8006044:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006048:	464b      	mov	r3, r9
 800604a:	460a      	mov	r2, r1
 800604c:	eb42 0303 	adc.w	r3, r2, r3
 8006050:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006060:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006064:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006068:	460b      	mov	r3, r1
 800606a:	18db      	adds	r3, r3, r3
 800606c:	62bb      	str	r3, [r7, #40]	; 0x28
 800606e:	4613      	mov	r3, r2
 8006070:	eb42 0303 	adc.w	r3, r2, r3
 8006074:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006076:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800607a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800607e:	f7fa fe13 	bl	8000ca8 <__aeabi_uldivmod>
 8006082:	4602      	mov	r2, r0
 8006084:	460b      	mov	r3, r1
 8006086:	4b0d      	ldr	r3, [pc, #52]	; (80060bc <UART_SetConfig+0x2d4>)
 8006088:	fba3 1302 	umull	r1, r3, r3, r2
 800608c:	095b      	lsrs	r3, r3, #5
 800608e:	2164      	movs	r1, #100	; 0x64
 8006090:	fb01 f303 	mul.w	r3, r1, r3
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	00db      	lsls	r3, r3, #3
 8006098:	3332      	adds	r3, #50	; 0x32
 800609a:	4a08      	ldr	r2, [pc, #32]	; (80060bc <UART_SetConfig+0x2d4>)
 800609c:	fba2 2303 	umull	r2, r3, r2, r3
 80060a0:	095b      	lsrs	r3, r3, #5
 80060a2:	f003 0207 	and.w	r2, r3, #7
 80060a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4422      	add	r2, r4
 80060ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80060b0:	e105      	b.n	80062be <UART_SetConfig+0x4d6>
 80060b2:	bf00      	nop
 80060b4:	40011000 	.word	0x40011000
 80060b8:	40011400 	.word	0x40011400
 80060bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060c4:	2200      	movs	r2, #0
 80060c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80060ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80060ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80060d2:	4642      	mov	r2, r8
 80060d4:	464b      	mov	r3, r9
 80060d6:	1891      	adds	r1, r2, r2
 80060d8:	6239      	str	r1, [r7, #32]
 80060da:	415b      	adcs	r3, r3
 80060dc:	627b      	str	r3, [r7, #36]	; 0x24
 80060de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060e2:	4641      	mov	r1, r8
 80060e4:	1854      	adds	r4, r2, r1
 80060e6:	4649      	mov	r1, r9
 80060e8:	eb43 0501 	adc.w	r5, r3, r1
 80060ec:	f04f 0200 	mov.w	r2, #0
 80060f0:	f04f 0300 	mov.w	r3, #0
 80060f4:	00eb      	lsls	r3, r5, #3
 80060f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060fa:	00e2      	lsls	r2, r4, #3
 80060fc:	4614      	mov	r4, r2
 80060fe:	461d      	mov	r5, r3
 8006100:	4643      	mov	r3, r8
 8006102:	18e3      	adds	r3, r4, r3
 8006104:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006108:	464b      	mov	r3, r9
 800610a:	eb45 0303 	adc.w	r3, r5, r3
 800610e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800611e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006122:	f04f 0200 	mov.w	r2, #0
 8006126:	f04f 0300 	mov.w	r3, #0
 800612a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800612e:	4629      	mov	r1, r5
 8006130:	008b      	lsls	r3, r1, #2
 8006132:	4621      	mov	r1, r4
 8006134:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006138:	4621      	mov	r1, r4
 800613a:	008a      	lsls	r2, r1, #2
 800613c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006140:	f7fa fdb2 	bl	8000ca8 <__aeabi_uldivmod>
 8006144:	4602      	mov	r2, r0
 8006146:	460b      	mov	r3, r1
 8006148:	4b60      	ldr	r3, [pc, #384]	; (80062cc <UART_SetConfig+0x4e4>)
 800614a:	fba3 2302 	umull	r2, r3, r3, r2
 800614e:	095b      	lsrs	r3, r3, #5
 8006150:	011c      	lsls	r4, r3, #4
 8006152:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006156:	2200      	movs	r2, #0
 8006158:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800615c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006160:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006164:	4642      	mov	r2, r8
 8006166:	464b      	mov	r3, r9
 8006168:	1891      	adds	r1, r2, r2
 800616a:	61b9      	str	r1, [r7, #24]
 800616c:	415b      	adcs	r3, r3
 800616e:	61fb      	str	r3, [r7, #28]
 8006170:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006174:	4641      	mov	r1, r8
 8006176:	1851      	adds	r1, r2, r1
 8006178:	6139      	str	r1, [r7, #16]
 800617a:	4649      	mov	r1, r9
 800617c:	414b      	adcs	r3, r1
 800617e:	617b      	str	r3, [r7, #20]
 8006180:	f04f 0200 	mov.w	r2, #0
 8006184:	f04f 0300 	mov.w	r3, #0
 8006188:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800618c:	4659      	mov	r1, fp
 800618e:	00cb      	lsls	r3, r1, #3
 8006190:	4651      	mov	r1, sl
 8006192:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006196:	4651      	mov	r1, sl
 8006198:	00ca      	lsls	r2, r1, #3
 800619a:	4610      	mov	r0, r2
 800619c:	4619      	mov	r1, r3
 800619e:	4603      	mov	r3, r0
 80061a0:	4642      	mov	r2, r8
 80061a2:	189b      	adds	r3, r3, r2
 80061a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80061a8:	464b      	mov	r3, r9
 80061aa:	460a      	mov	r2, r1
 80061ac:	eb42 0303 	adc.w	r3, r2, r3
 80061b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80061b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80061be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80061c0:	f04f 0200 	mov.w	r2, #0
 80061c4:	f04f 0300 	mov.w	r3, #0
 80061c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80061cc:	4649      	mov	r1, r9
 80061ce:	008b      	lsls	r3, r1, #2
 80061d0:	4641      	mov	r1, r8
 80061d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061d6:	4641      	mov	r1, r8
 80061d8:	008a      	lsls	r2, r1, #2
 80061da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80061de:	f7fa fd63 	bl	8000ca8 <__aeabi_uldivmod>
 80061e2:	4602      	mov	r2, r0
 80061e4:	460b      	mov	r3, r1
 80061e6:	4b39      	ldr	r3, [pc, #228]	; (80062cc <UART_SetConfig+0x4e4>)
 80061e8:	fba3 1302 	umull	r1, r3, r3, r2
 80061ec:	095b      	lsrs	r3, r3, #5
 80061ee:	2164      	movs	r1, #100	; 0x64
 80061f0:	fb01 f303 	mul.w	r3, r1, r3
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	011b      	lsls	r3, r3, #4
 80061f8:	3332      	adds	r3, #50	; 0x32
 80061fa:	4a34      	ldr	r2, [pc, #208]	; (80062cc <UART_SetConfig+0x4e4>)
 80061fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006200:	095b      	lsrs	r3, r3, #5
 8006202:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006206:	441c      	add	r4, r3
 8006208:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800620c:	2200      	movs	r2, #0
 800620e:	673b      	str	r3, [r7, #112]	; 0x70
 8006210:	677a      	str	r2, [r7, #116]	; 0x74
 8006212:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006216:	4642      	mov	r2, r8
 8006218:	464b      	mov	r3, r9
 800621a:	1891      	adds	r1, r2, r2
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	415b      	adcs	r3, r3
 8006220:	60fb      	str	r3, [r7, #12]
 8006222:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006226:	4641      	mov	r1, r8
 8006228:	1851      	adds	r1, r2, r1
 800622a:	6039      	str	r1, [r7, #0]
 800622c:	4649      	mov	r1, r9
 800622e:	414b      	adcs	r3, r1
 8006230:	607b      	str	r3, [r7, #4]
 8006232:	f04f 0200 	mov.w	r2, #0
 8006236:	f04f 0300 	mov.w	r3, #0
 800623a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800623e:	4659      	mov	r1, fp
 8006240:	00cb      	lsls	r3, r1, #3
 8006242:	4651      	mov	r1, sl
 8006244:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006248:	4651      	mov	r1, sl
 800624a:	00ca      	lsls	r2, r1, #3
 800624c:	4610      	mov	r0, r2
 800624e:	4619      	mov	r1, r3
 8006250:	4603      	mov	r3, r0
 8006252:	4642      	mov	r2, r8
 8006254:	189b      	adds	r3, r3, r2
 8006256:	66bb      	str	r3, [r7, #104]	; 0x68
 8006258:	464b      	mov	r3, r9
 800625a:	460a      	mov	r2, r1
 800625c:	eb42 0303 	adc.w	r3, r2, r3
 8006260:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	663b      	str	r3, [r7, #96]	; 0x60
 800626c:	667a      	str	r2, [r7, #100]	; 0x64
 800626e:	f04f 0200 	mov.w	r2, #0
 8006272:	f04f 0300 	mov.w	r3, #0
 8006276:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800627a:	4649      	mov	r1, r9
 800627c:	008b      	lsls	r3, r1, #2
 800627e:	4641      	mov	r1, r8
 8006280:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006284:	4641      	mov	r1, r8
 8006286:	008a      	lsls	r2, r1, #2
 8006288:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800628c:	f7fa fd0c 	bl	8000ca8 <__aeabi_uldivmod>
 8006290:	4602      	mov	r2, r0
 8006292:	460b      	mov	r3, r1
 8006294:	4b0d      	ldr	r3, [pc, #52]	; (80062cc <UART_SetConfig+0x4e4>)
 8006296:	fba3 1302 	umull	r1, r3, r3, r2
 800629a:	095b      	lsrs	r3, r3, #5
 800629c:	2164      	movs	r1, #100	; 0x64
 800629e:	fb01 f303 	mul.w	r3, r1, r3
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	011b      	lsls	r3, r3, #4
 80062a6:	3332      	adds	r3, #50	; 0x32
 80062a8:	4a08      	ldr	r2, [pc, #32]	; (80062cc <UART_SetConfig+0x4e4>)
 80062aa:	fba2 2303 	umull	r2, r3, r2, r3
 80062ae:	095b      	lsrs	r3, r3, #5
 80062b0:	f003 020f 	and.w	r2, r3, #15
 80062b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4422      	add	r2, r4
 80062bc:	609a      	str	r2, [r3, #8]
}
 80062be:	bf00      	nop
 80062c0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80062c4:	46bd      	mov	sp, r7
 80062c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062ca:	bf00      	nop
 80062cc:	51eb851f 	.word	0x51eb851f

080062d0 <__errno>:
 80062d0:	4b01      	ldr	r3, [pc, #4]	; (80062d8 <__errno+0x8>)
 80062d2:	6818      	ldr	r0, [r3, #0]
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	2000003c 	.word	0x2000003c

080062dc <__libc_init_array>:
 80062dc:	b570      	push	{r4, r5, r6, lr}
 80062de:	4d0d      	ldr	r5, [pc, #52]	; (8006314 <__libc_init_array+0x38>)
 80062e0:	4c0d      	ldr	r4, [pc, #52]	; (8006318 <__libc_init_array+0x3c>)
 80062e2:	1b64      	subs	r4, r4, r5
 80062e4:	10a4      	asrs	r4, r4, #2
 80062e6:	2600      	movs	r6, #0
 80062e8:	42a6      	cmp	r6, r4
 80062ea:	d109      	bne.n	8006300 <__libc_init_array+0x24>
 80062ec:	4d0b      	ldr	r5, [pc, #44]	; (800631c <__libc_init_array+0x40>)
 80062ee:	4c0c      	ldr	r4, [pc, #48]	; (8006320 <__libc_init_array+0x44>)
 80062f0:	f004 fd40 	bl	800ad74 <_init>
 80062f4:	1b64      	subs	r4, r4, r5
 80062f6:	10a4      	asrs	r4, r4, #2
 80062f8:	2600      	movs	r6, #0
 80062fa:	42a6      	cmp	r6, r4
 80062fc:	d105      	bne.n	800630a <__libc_init_array+0x2e>
 80062fe:	bd70      	pop	{r4, r5, r6, pc}
 8006300:	f855 3b04 	ldr.w	r3, [r5], #4
 8006304:	4798      	blx	r3
 8006306:	3601      	adds	r6, #1
 8006308:	e7ee      	b.n	80062e8 <__libc_init_array+0xc>
 800630a:	f855 3b04 	ldr.w	r3, [r5], #4
 800630e:	4798      	blx	r3
 8006310:	3601      	adds	r6, #1
 8006312:	e7f2      	b.n	80062fa <__libc_init_array+0x1e>
 8006314:	0800b6ec 	.word	0x0800b6ec
 8006318:	0800b6ec 	.word	0x0800b6ec
 800631c:	0800b6ec 	.word	0x0800b6ec
 8006320:	0800b6f0 	.word	0x0800b6f0

08006324 <memcpy>:
 8006324:	440a      	add	r2, r1
 8006326:	4291      	cmp	r1, r2
 8006328:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800632c:	d100      	bne.n	8006330 <memcpy+0xc>
 800632e:	4770      	bx	lr
 8006330:	b510      	push	{r4, lr}
 8006332:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006336:	f803 4f01 	strb.w	r4, [r3, #1]!
 800633a:	4291      	cmp	r1, r2
 800633c:	d1f9      	bne.n	8006332 <memcpy+0xe>
 800633e:	bd10      	pop	{r4, pc}

08006340 <memset>:
 8006340:	4402      	add	r2, r0
 8006342:	4603      	mov	r3, r0
 8006344:	4293      	cmp	r3, r2
 8006346:	d100      	bne.n	800634a <memset+0xa>
 8006348:	4770      	bx	lr
 800634a:	f803 1b01 	strb.w	r1, [r3], #1
 800634e:	e7f9      	b.n	8006344 <memset+0x4>

08006350 <__cvt>:
 8006350:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006354:	ec55 4b10 	vmov	r4, r5, d0
 8006358:	2d00      	cmp	r5, #0
 800635a:	460e      	mov	r6, r1
 800635c:	4619      	mov	r1, r3
 800635e:	462b      	mov	r3, r5
 8006360:	bfbb      	ittet	lt
 8006362:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006366:	461d      	movlt	r5, r3
 8006368:	2300      	movge	r3, #0
 800636a:	232d      	movlt	r3, #45	; 0x2d
 800636c:	700b      	strb	r3, [r1, #0]
 800636e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006370:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006374:	4691      	mov	r9, r2
 8006376:	f023 0820 	bic.w	r8, r3, #32
 800637a:	bfbc      	itt	lt
 800637c:	4622      	movlt	r2, r4
 800637e:	4614      	movlt	r4, r2
 8006380:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006384:	d005      	beq.n	8006392 <__cvt+0x42>
 8006386:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800638a:	d100      	bne.n	800638e <__cvt+0x3e>
 800638c:	3601      	adds	r6, #1
 800638e:	2102      	movs	r1, #2
 8006390:	e000      	b.n	8006394 <__cvt+0x44>
 8006392:	2103      	movs	r1, #3
 8006394:	ab03      	add	r3, sp, #12
 8006396:	9301      	str	r3, [sp, #4]
 8006398:	ab02      	add	r3, sp, #8
 800639a:	9300      	str	r3, [sp, #0]
 800639c:	ec45 4b10 	vmov	d0, r4, r5
 80063a0:	4653      	mov	r3, sl
 80063a2:	4632      	mov	r2, r6
 80063a4:	f001 ff20 	bl	80081e8 <_dtoa_r>
 80063a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80063ac:	4607      	mov	r7, r0
 80063ae:	d102      	bne.n	80063b6 <__cvt+0x66>
 80063b0:	f019 0f01 	tst.w	r9, #1
 80063b4:	d022      	beq.n	80063fc <__cvt+0xac>
 80063b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80063ba:	eb07 0906 	add.w	r9, r7, r6
 80063be:	d110      	bne.n	80063e2 <__cvt+0x92>
 80063c0:	783b      	ldrb	r3, [r7, #0]
 80063c2:	2b30      	cmp	r3, #48	; 0x30
 80063c4:	d10a      	bne.n	80063dc <__cvt+0x8c>
 80063c6:	2200      	movs	r2, #0
 80063c8:	2300      	movs	r3, #0
 80063ca:	4620      	mov	r0, r4
 80063cc:	4629      	mov	r1, r5
 80063ce:	f7fa fb8b 	bl	8000ae8 <__aeabi_dcmpeq>
 80063d2:	b918      	cbnz	r0, 80063dc <__cvt+0x8c>
 80063d4:	f1c6 0601 	rsb	r6, r6, #1
 80063d8:	f8ca 6000 	str.w	r6, [sl]
 80063dc:	f8da 3000 	ldr.w	r3, [sl]
 80063e0:	4499      	add	r9, r3
 80063e2:	2200      	movs	r2, #0
 80063e4:	2300      	movs	r3, #0
 80063e6:	4620      	mov	r0, r4
 80063e8:	4629      	mov	r1, r5
 80063ea:	f7fa fb7d 	bl	8000ae8 <__aeabi_dcmpeq>
 80063ee:	b108      	cbz	r0, 80063f4 <__cvt+0xa4>
 80063f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80063f4:	2230      	movs	r2, #48	; 0x30
 80063f6:	9b03      	ldr	r3, [sp, #12]
 80063f8:	454b      	cmp	r3, r9
 80063fa:	d307      	bcc.n	800640c <__cvt+0xbc>
 80063fc:	9b03      	ldr	r3, [sp, #12]
 80063fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006400:	1bdb      	subs	r3, r3, r7
 8006402:	4638      	mov	r0, r7
 8006404:	6013      	str	r3, [r2, #0]
 8006406:	b004      	add	sp, #16
 8006408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800640c:	1c59      	adds	r1, r3, #1
 800640e:	9103      	str	r1, [sp, #12]
 8006410:	701a      	strb	r2, [r3, #0]
 8006412:	e7f0      	b.n	80063f6 <__cvt+0xa6>

08006414 <__exponent>:
 8006414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006416:	4603      	mov	r3, r0
 8006418:	2900      	cmp	r1, #0
 800641a:	bfb8      	it	lt
 800641c:	4249      	neglt	r1, r1
 800641e:	f803 2b02 	strb.w	r2, [r3], #2
 8006422:	bfb4      	ite	lt
 8006424:	222d      	movlt	r2, #45	; 0x2d
 8006426:	222b      	movge	r2, #43	; 0x2b
 8006428:	2909      	cmp	r1, #9
 800642a:	7042      	strb	r2, [r0, #1]
 800642c:	dd2a      	ble.n	8006484 <__exponent+0x70>
 800642e:	f10d 0407 	add.w	r4, sp, #7
 8006432:	46a4      	mov	ip, r4
 8006434:	270a      	movs	r7, #10
 8006436:	46a6      	mov	lr, r4
 8006438:	460a      	mov	r2, r1
 800643a:	fb91 f6f7 	sdiv	r6, r1, r7
 800643e:	fb07 1516 	mls	r5, r7, r6, r1
 8006442:	3530      	adds	r5, #48	; 0x30
 8006444:	2a63      	cmp	r2, #99	; 0x63
 8006446:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800644a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800644e:	4631      	mov	r1, r6
 8006450:	dcf1      	bgt.n	8006436 <__exponent+0x22>
 8006452:	3130      	adds	r1, #48	; 0x30
 8006454:	f1ae 0502 	sub.w	r5, lr, #2
 8006458:	f804 1c01 	strb.w	r1, [r4, #-1]
 800645c:	1c44      	adds	r4, r0, #1
 800645e:	4629      	mov	r1, r5
 8006460:	4561      	cmp	r1, ip
 8006462:	d30a      	bcc.n	800647a <__exponent+0x66>
 8006464:	f10d 0209 	add.w	r2, sp, #9
 8006468:	eba2 020e 	sub.w	r2, r2, lr
 800646c:	4565      	cmp	r5, ip
 800646e:	bf88      	it	hi
 8006470:	2200      	movhi	r2, #0
 8006472:	4413      	add	r3, r2
 8006474:	1a18      	subs	r0, r3, r0
 8006476:	b003      	add	sp, #12
 8006478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800647a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800647e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006482:	e7ed      	b.n	8006460 <__exponent+0x4c>
 8006484:	2330      	movs	r3, #48	; 0x30
 8006486:	3130      	adds	r1, #48	; 0x30
 8006488:	7083      	strb	r3, [r0, #2]
 800648a:	70c1      	strb	r1, [r0, #3]
 800648c:	1d03      	adds	r3, r0, #4
 800648e:	e7f1      	b.n	8006474 <__exponent+0x60>

08006490 <_printf_float>:
 8006490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006494:	ed2d 8b02 	vpush	{d8}
 8006498:	b08d      	sub	sp, #52	; 0x34
 800649a:	460c      	mov	r4, r1
 800649c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80064a0:	4616      	mov	r6, r2
 80064a2:	461f      	mov	r7, r3
 80064a4:	4605      	mov	r5, r0
 80064a6:	f003 f9b3 	bl	8009810 <_localeconv_r>
 80064aa:	f8d0 a000 	ldr.w	sl, [r0]
 80064ae:	4650      	mov	r0, sl
 80064b0:	f7f9 fe9e 	bl	80001f0 <strlen>
 80064b4:	2300      	movs	r3, #0
 80064b6:	930a      	str	r3, [sp, #40]	; 0x28
 80064b8:	6823      	ldr	r3, [r4, #0]
 80064ba:	9305      	str	r3, [sp, #20]
 80064bc:	f8d8 3000 	ldr.w	r3, [r8]
 80064c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80064c4:	3307      	adds	r3, #7
 80064c6:	f023 0307 	bic.w	r3, r3, #7
 80064ca:	f103 0208 	add.w	r2, r3, #8
 80064ce:	f8c8 2000 	str.w	r2, [r8]
 80064d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80064da:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80064de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80064e2:	9307      	str	r3, [sp, #28]
 80064e4:	f8cd 8018 	str.w	r8, [sp, #24]
 80064e8:	ee08 0a10 	vmov	s16, r0
 80064ec:	4b9f      	ldr	r3, [pc, #636]	; (800676c <_printf_float+0x2dc>)
 80064ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064f6:	f7fa fb29 	bl	8000b4c <__aeabi_dcmpun>
 80064fa:	bb88      	cbnz	r0, 8006560 <_printf_float+0xd0>
 80064fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006500:	4b9a      	ldr	r3, [pc, #616]	; (800676c <_printf_float+0x2dc>)
 8006502:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006506:	f7fa fb03 	bl	8000b10 <__aeabi_dcmple>
 800650a:	bb48      	cbnz	r0, 8006560 <_printf_float+0xd0>
 800650c:	2200      	movs	r2, #0
 800650e:	2300      	movs	r3, #0
 8006510:	4640      	mov	r0, r8
 8006512:	4649      	mov	r1, r9
 8006514:	f7fa faf2 	bl	8000afc <__aeabi_dcmplt>
 8006518:	b110      	cbz	r0, 8006520 <_printf_float+0x90>
 800651a:	232d      	movs	r3, #45	; 0x2d
 800651c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006520:	4b93      	ldr	r3, [pc, #588]	; (8006770 <_printf_float+0x2e0>)
 8006522:	4894      	ldr	r0, [pc, #592]	; (8006774 <_printf_float+0x2e4>)
 8006524:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006528:	bf94      	ite	ls
 800652a:	4698      	movls	r8, r3
 800652c:	4680      	movhi	r8, r0
 800652e:	2303      	movs	r3, #3
 8006530:	6123      	str	r3, [r4, #16]
 8006532:	9b05      	ldr	r3, [sp, #20]
 8006534:	f023 0204 	bic.w	r2, r3, #4
 8006538:	6022      	str	r2, [r4, #0]
 800653a:	f04f 0900 	mov.w	r9, #0
 800653e:	9700      	str	r7, [sp, #0]
 8006540:	4633      	mov	r3, r6
 8006542:	aa0b      	add	r2, sp, #44	; 0x2c
 8006544:	4621      	mov	r1, r4
 8006546:	4628      	mov	r0, r5
 8006548:	f000 f9d8 	bl	80068fc <_printf_common>
 800654c:	3001      	adds	r0, #1
 800654e:	f040 8090 	bne.w	8006672 <_printf_float+0x1e2>
 8006552:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006556:	b00d      	add	sp, #52	; 0x34
 8006558:	ecbd 8b02 	vpop	{d8}
 800655c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006560:	4642      	mov	r2, r8
 8006562:	464b      	mov	r3, r9
 8006564:	4640      	mov	r0, r8
 8006566:	4649      	mov	r1, r9
 8006568:	f7fa faf0 	bl	8000b4c <__aeabi_dcmpun>
 800656c:	b140      	cbz	r0, 8006580 <_printf_float+0xf0>
 800656e:	464b      	mov	r3, r9
 8006570:	2b00      	cmp	r3, #0
 8006572:	bfbc      	itt	lt
 8006574:	232d      	movlt	r3, #45	; 0x2d
 8006576:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800657a:	487f      	ldr	r0, [pc, #508]	; (8006778 <_printf_float+0x2e8>)
 800657c:	4b7f      	ldr	r3, [pc, #508]	; (800677c <_printf_float+0x2ec>)
 800657e:	e7d1      	b.n	8006524 <_printf_float+0x94>
 8006580:	6863      	ldr	r3, [r4, #4]
 8006582:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006586:	9206      	str	r2, [sp, #24]
 8006588:	1c5a      	adds	r2, r3, #1
 800658a:	d13f      	bne.n	800660c <_printf_float+0x17c>
 800658c:	2306      	movs	r3, #6
 800658e:	6063      	str	r3, [r4, #4]
 8006590:	9b05      	ldr	r3, [sp, #20]
 8006592:	6861      	ldr	r1, [r4, #4]
 8006594:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006598:	2300      	movs	r3, #0
 800659a:	9303      	str	r3, [sp, #12]
 800659c:	ab0a      	add	r3, sp, #40	; 0x28
 800659e:	e9cd b301 	strd	fp, r3, [sp, #4]
 80065a2:	ab09      	add	r3, sp, #36	; 0x24
 80065a4:	ec49 8b10 	vmov	d0, r8, r9
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	6022      	str	r2, [r4, #0]
 80065ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80065b0:	4628      	mov	r0, r5
 80065b2:	f7ff fecd 	bl	8006350 <__cvt>
 80065b6:	9b06      	ldr	r3, [sp, #24]
 80065b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065ba:	2b47      	cmp	r3, #71	; 0x47
 80065bc:	4680      	mov	r8, r0
 80065be:	d108      	bne.n	80065d2 <_printf_float+0x142>
 80065c0:	1cc8      	adds	r0, r1, #3
 80065c2:	db02      	blt.n	80065ca <_printf_float+0x13a>
 80065c4:	6863      	ldr	r3, [r4, #4]
 80065c6:	4299      	cmp	r1, r3
 80065c8:	dd41      	ble.n	800664e <_printf_float+0x1be>
 80065ca:	f1ab 0b02 	sub.w	fp, fp, #2
 80065ce:	fa5f fb8b 	uxtb.w	fp, fp
 80065d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80065d6:	d820      	bhi.n	800661a <_printf_float+0x18a>
 80065d8:	3901      	subs	r1, #1
 80065da:	465a      	mov	r2, fp
 80065dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80065e0:	9109      	str	r1, [sp, #36]	; 0x24
 80065e2:	f7ff ff17 	bl	8006414 <__exponent>
 80065e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065e8:	1813      	adds	r3, r2, r0
 80065ea:	2a01      	cmp	r2, #1
 80065ec:	4681      	mov	r9, r0
 80065ee:	6123      	str	r3, [r4, #16]
 80065f0:	dc02      	bgt.n	80065f8 <_printf_float+0x168>
 80065f2:	6822      	ldr	r2, [r4, #0]
 80065f4:	07d2      	lsls	r2, r2, #31
 80065f6:	d501      	bpl.n	80065fc <_printf_float+0x16c>
 80065f8:	3301      	adds	r3, #1
 80065fa:	6123      	str	r3, [r4, #16]
 80065fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006600:	2b00      	cmp	r3, #0
 8006602:	d09c      	beq.n	800653e <_printf_float+0xae>
 8006604:	232d      	movs	r3, #45	; 0x2d
 8006606:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800660a:	e798      	b.n	800653e <_printf_float+0xae>
 800660c:	9a06      	ldr	r2, [sp, #24]
 800660e:	2a47      	cmp	r2, #71	; 0x47
 8006610:	d1be      	bne.n	8006590 <_printf_float+0x100>
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1bc      	bne.n	8006590 <_printf_float+0x100>
 8006616:	2301      	movs	r3, #1
 8006618:	e7b9      	b.n	800658e <_printf_float+0xfe>
 800661a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800661e:	d118      	bne.n	8006652 <_printf_float+0x1c2>
 8006620:	2900      	cmp	r1, #0
 8006622:	6863      	ldr	r3, [r4, #4]
 8006624:	dd0b      	ble.n	800663e <_printf_float+0x1ae>
 8006626:	6121      	str	r1, [r4, #16]
 8006628:	b913      	cbnz	r3, 8006630 <_printf_float+0x1a0>
 800662a:	6822      	ldr	r2, [r4, #0]
 800662c:	07d0      	lsls	r0, r2, #31
 800662e:	d502      	bpl.n	8006636 <_printf_float+0x1a6>
 8006630:	3301      	adds	r3, #1
 8006632:	440b      	add	r3, r1
 8006634:	6123      	str	r3, [r4, #16]
 8006636:	65a1      	str	r1, [r4, #88]	; 0x58
 8006638:	f04f 0900 	mov.w	r9, #0
 800663c:	e7de      	b.n	80065fc <_printf_float+0x16c>
 800663e:	b913      	cbnz	r3, 8006646 <_printf_float+0x1b6>
 8006640:	6822      	ldr	r2, [r4, #0]
 8006642:	07d2      	lsls	r2, r2, #31
 8006644:	d501      	bpl.n	800664a <_printf_float+0x1ba>
 8006646:	3302      	adds	r3, #2
 8006648:	e7f4      	b.n	8006634 <_printf_float+0x1a4>
 800664a:	2301      	movs	r3, #1
 800664c:	e7f2      	b.n	8006634 <_printf_float+0x1a4>
 800664e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006652:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006654:	4299      	cmp	r1, r3
 8006656:	db05      	blt.n	8006664 <_printf_float+0x1d4>
 8006658:	6823      	ldr	r3, [r4, #0]
 800665a:	6121      	str	r1, [r4, #16]
 800665c:	07d8      	lsls	r0, r3, #31
 800665e:	d5ea      	bpl.n	8006636 <_printf_float+0x1a6>
 8006660:	1c4b      	adds	r3, r1, #1
 8006662:	e7e7      	b.n	8006634 <_printf_float+0x1a4>
 8006664:	2900      	cmp	r1, #0
 8006666:	bfd4      	ite	le
 8006668:	f1c1 0202 	rsble	r2, r1, #2
 800666c:	2201      	movgt	r2, #1
 800666e:	4413      	add	r3, r2
 8006670:	e7e0      	b.n	8006634 <_printf_float+0x1a4>
 8006672:	6823      	ldr	r3, [r4, #0]
 8006674:	055a      	lsls	r2, r3, #21
 8006676:	d407      	bmi.n	8006688 <_printf_float+0x1f8>
 8006678:	6923      	ldr	r3, [r4, #16]
 800667a:	4642      	mov	r2, r8
 800667c:	4631      	mov	r1, r6
 800667e:	4628      	mov	r0, r5
 8006680:	47b8      	blx	r7
 8006682:	3001      	adds	r0, #1
 8006684:	d12c      	bne.n	80066e0 <_printf_float+0x250>
 8006686:	e764      	b.n	8006552 <_printf_float+0xc2>
 8006688:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800668c:	f240 80e0 	bls.w	8006850 <_printf_float+0x3c0>
 8006690:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006694:	2200      	movs	r2, #0
 8006696:	2300      	movs	r3, #0
 8006698:	f7fa fa26 	bl	8000ae8 <__aeabi_dcmpeq>
 800669c:	2800      	cmp	r0, #0
 800669e:	d034      	beq.n	800670a <_printf_float+0x27a>
 80066a0:	4a37      	ldr	r2, [pc, #220]	; (8006780 <_printf_float+0x2f0>)
 80066a2:	2301      	movs	r3, #1
 80066a4:	4631      	mov	r1, r6
 80066a6:	4628      	mov	r0, r5
 80066a8:	47b8      	blx	r7
 80066aa:	3001      	adds	r0, #1
 80066ac:	f43f af51 	beq.w	8006552 <_printf_float+0xc2>
 80066b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066b4:	429a      	cmp	r2, r3
 80066b6:	db02      	blt.n	80066be <_printf_float+0x22e>
 80066b8:	6823      	ldr	r3, [r4, #0]
 80066ba:	07d8      	lsls	r0, r3, #31
 80066bc:	d510      	bpl.n	80066e0 <_printf_float+0x250>
 80066be:	ee18 3a10 	vmov	r3, s16
 80066c2:	4652      	mov	r2, sl
 80066c4:	4631      	mov	r1, r6
 80066c6:	4628      	mov	r0, r5
 80066c8:	47b8      	blx	r7
 80066ca:	3001      	adds	r0, #1
 80066cc:	f43f af41 	beq.w	8006552 <_printf_float+0xc2>
 80066d0:	f04f 0800 	mov.w	r8, #0
 80066d4:	f104 091a 	add.w	r9, r4, #26
 80066d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066da:	3b01      	subs	r3, #1
 80066dc:	4543      	cmp	r3, r8
 80066de:	dc09      	bgt.n	80066f4 <_printf_float+0x264>
 80066e0:	6823      	ldr	r3, [r4, #0]
 80066e2:	079b      	lsls	r3, r3, #30
 80066e4:	f100 8105 	bmi.w	80068f2 <_printf_float+0x462>
 80066e8:	68e0      	ldr	r0, [r4, #12]
 80066ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066ec:	4298      	cmp	r0, r3
 80066ee:	bfb8      	it	lt
 80066f0:	4618      	movlt	r0, r3
 80066f2:	e730      	b.n	8006556 <_printf_float+0xc6>
 80066f4:	2301      	movs	r3, #1
 80066f6:	464a      	mov	r2, r9
 80066f8:	4631      	mov	r1, r6
 80066fa:	4628      	mov	r0, r5
 80066fc:	47b8      	blx	r7
 80066fe:	3001      	adds	r0, #1
 8006700:	f43f af27 	beq.w	8006552 <_printf_float+0xc2>
 8006704:	f108 0801 	add.w	r8, r8, #1
 8006708:	e7e6      	b.n	80066d8 <_printf_float+0x248>
 800670a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800670c:	2b00      	cmp	r3, #0
 800670e:	dc39      	bgt.n	8006784 <_printf_float+0x2f4>
 8006710:	4a1b      	ldr	r2, [pc, #108]	; (8006780 <_printf_float+0x2f0>)
 8006712:	2301      	movs	r3, #1
 8006714:	4631      	mov	r1, r6
 8006716:	4628      	mov	r0, r5
 8006718:	47b8      	blx	r7
 800671a:	3001      	adds	r0, #1
 800671c:	f43f af19 	beq.w	8006552 <_printf_float+0xc2>
 8006720:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006724:	4313      	orrs	r3, r2
 8006726:	d102      	bne.n	800672e <_printf_float+0x29e>
 8006728:	6823      	ldr	r3, [r4, #0]
 800672a:	07d9      	lsls	r1, r3, #31
 800672c:	d5d8      	bpl.n	80066e0 <_printf_float+0x250>
 800672e:	ee18 3a10 	vmov	r3, s16
 8006732:	4652      	mov	r2, sl
 8006734:	4631      	mov	r1, r6
 8006736:	4628      	mov	r0, r5
 8006738:	47b8      	blx	r7
 800673a:	3001      	adds	r0, #1
 800673c:	f43f af09 	beq.w	8006552 <_printf_float+0xc2>
 8006740:	f04f 0900 	mov.w	r9, #0
 8006744:	f104 0a1a 	add.w	sl, r4, #26
 8006748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800674a:	425b      	negs	r3, r3
 800674c:	454b      	cmp	r3, r9
 800674e:	dc01      	bgt.n	8006754 <_printf_float+0x2c4>
 8006750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006752:	e792      	b.n	800667a <_printf_float+0x1ea>
 8006754:	2301      	movs	r3, #1
 8006756:	4652      	mov	r2, sl
 8006758:	4631      	mov	r1, r6
 800675a:	4628      	mov	r0, r5
 800675c:	47b8      	blx	r7
 800675e:	3001      	adds	r0, #1
 8006760:	f43f aef7 	beq.w	8006552 <_printf_float+0xc2>
 8006764:	f109 0901 	add.w	r9, r9, #1
 8006768:	e7ee      	b.n	8006748 <_printf_float+0x2b8>
 800676a:	bf00      	nop
 800676c:	7fefffff 	.word	0x7fefffff
 8006770:	0800b23c 	.word	0x0800b23c
 8006774:	0800b240 	.word	0x0800b240
 8006778:	0800b248 	.word	0x0800b248
 800677c:	0800b244 	.word	0x0800b244
 8006780:	0800b24c 	.word	0x0800b24c
 8006784:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006786:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006788:	429a      	cmp	r2, r3
 800678a:	bfa8      	it	ge
 800678c:	461a      	movge	r2, r3
 800678e:	2a00      	cmp	r2, #0
 8006790:	4691      	mov	r9, r2
 8006792:	dc37      	bgt.n	8006804 <_printf_float+0x374>
 8006794:	f04f 0b00 	mov.w	fp, #0
 8006798:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800679c:	f104 021a 	add.w	r2, r4, #26
 80067a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067a2:	9305      	str	r3, [sp, #20]
 80067a4:	eba3 0309 	sub.w	r3, r3, r9
 80067a8:	455b      	cmp	r3, fp
 80067aa:	dc33      	bgt.n	8006814 <_printf_float+0x384>
 80067ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067b0:	429a      	cmp	r2, r3
 80067b2:	db3b      	blt.n	800682c <_printf_float+0x39c>
 80067b4:	6823      	ldr	r3, [r4, #0]
 80067b6:	07da      	lsls	r2, r3, #31
 80067b8:	d438      	bmi.n	800682c <_printf_float+0x39c>
 80067ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067bc:	9a05      	ldr	r2, [sp, #20]
 80067be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067c0:	1a9a      	subs	r2, r3, r2
 80067c2:	eba3 0901 	sub.w	r9, r3, r1
 80067c6:	4591      	cmp	r9, r2
 80067c8:	bfa8      	it	ge
 80067ca:	4691      	movge	r9, r2
 80067cc:	f1b9 0f00 	cmp.w	r9, #0
 80067d0:	dc35      	bgt.n	800683e <_printf_float+0x3ae>
 80067d2:	f04f 0800 	mov.w	r8, #0
 80067d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067da:	f104 0a1a 	add.w	sl, r4, #26
 80067de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067e2:	1a9b      	subs	r3, r3, r2
 80067e4:	eba3 0309 	sub.w	r3, r3, r9
 80067e8:	4543      	cmp	r3, r8
 80067ea:	f77f af79 	ble.w	80066e0 <_printf_float+0x250>
 80067ee:	2301      	movs	r3, #1
 80067f0:	4652      	mov	r2, sl
 80067f2:	4631      	mov	r1, r6
 80067f4:	4628      	mov	r0, r5
 80067f6:	47b8      	blx	r7
 80067f8:	3001      	adds	r0, #1
 80067fa:	f43f aeaa 	beq.w	8006552 <_printf_float+0xc2>
 80067fe:	f108 0801 	add.w	r8, r8, #1
 8006802:	e7ec      	b.n	80067de <_printf_float+0x34e>
 8006804:	4613      	mov	r3, r2
 8006806:	4631      	mov	r1, r6
 8006808:	4642      	mov	r2, r8
 800680a:	4628      	mov	r0, r5
 800680c:	47b8      	blx	r7
 800680e:	3001      	adds	r0, #1
 8006810:	d1c0      	bne.n	8006794 <_printf_float+0x304>
 8006812:	e69e      	b.n	8006552 <_printf_float+0xc2>
 8006814:	2301      	movs	r3, #1
 8006816:	4631      	mov	r1, r6
 8006818:	4628      	mov	r0, r5
 800681a:	9205      	str	r2, [sp, #20]
 800681c:	47b8      	blx	r7
 800681e:	3001      	adds	r0, #1
 8006820:	f43f ae97 	beq.w	8006552 <_printf_float+0xc2>
 8006824:	9a05      	ldr	r2, [sp, #20]
 8006826:	f10b 0b01 	add.w	fp, fp, #1
 800682a:	e7b9      	b.n	80067a0 <_printf_float+0x310>
 800682c:	ee18 3a10 	vmov	r3, s16
 8006830:	4652      	mov	r2, sl
 8006832:	4631      	mov	r1, r6
 8006834:	4628      	mov	r0, r5
 8006836:	47b8      	blx	r7
 8006838:	3001      	adds	r0, #1
 800683a:	d1be      	bne.n	80067ba <_printf_float+0x32a>
 800683c:	e689      	b.n	8006552 <_printf_float+0xc2>
 800683e:	9a05      	ldr	r2, [sp, #20]
 8006840:	464b      	mov	r3, r9
 8006842:	4442      	add	r2, r8
 8006844:	4631      	mov	r1, r6
 8006846:	4628      	mov	r0, r5
 8006848:	47b8      	blx	r7
 800684a:	3001      	adds	r0, #1
 800684c:	d1c1      	bne.n	80067d2 <_printf_float+0x342>
 800684e:	e680      	b.n	8006552 <_printf_float+0xc2>
 8006850:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006852:	2a01      	cmp	r2, #1
 8006854:	dc01      	bgt.n	800685a <_printf_float+0x3ca>
 8006856:	07db      	lsls	r3, r3, #31
 8006858:	d538      	bpl.n	80068cc <_printf_float+0x43c>
 800685a:	2301      	movs	r3, #1
 800685c:	4642      	mov	r2, r8
 800685e:	4631      	mov	r1, r6
 8006860:	4628      	mov	r0, r5
 8006862:	47b8      	blx	r7
 8006864:	3001      	adds	r0, #1
 8006866:	f43f ae74 	beq.w	8006552 <_printf_float+0xc2>
 800686a:	ee18 3a10 	vmov	r3, s16
 800686e:	4652      	mov	r2, sl
 8006870:	4631      	mov	r1, r6
 8006872:	4628      	mov	r0, r5
 8006874:	47b8      	blx	r7
 8006876:	3001      	adds	r0, #1
 8006878:	f43f ae6b 	beq.w	8006552 <_printf_float+0xc2>
 800687c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006880:	2200      	movs	r2, #0
 8006882:	2300      	movs	r3, #0
 8006884:	f7fa f930 	bl	8000ae8 <__aeabi_dcmpeq>
 8006888:	b9d8      	cbnz	r0, 80068c2 <_printf_float+0x432>
 800688a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800688c:	f108 0201 	add.w	r2, r8, #1
 8006890:	3b01      	subs	r3, #1
 8006892:	4631      	mov	r1, r6
 8006894:	4628      	mov	r0, r5
 8006896:	47b8      	blx	r7
 8006898:	3001      	adds	r0, #1
 800689a:	d10e      	bne.n	80068ba <_printf_float+0x42a>
 800689c:	e659      	b.n	8006552 <_printf_float+0xc2>
 800689e:	2301      	movs	r3, #1
 80068a0:	4652      	mov	r2, sl
 80068a2:	4631      	mov	r1, r6
 80068a4:	4628      	mov	r0, r5
 80068a6:	47b8      	blx	r7
 80068a8:	3001      	adds	r0, #1
 80068aa:	f43f ae52 	beq.w	8006552 <_printf_float+0xc2>
 80068ae:	f108 0801 	add.w	r8, r8, #1
 80068b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068b4:	3b01      	subs	r3, #1
 80068b6:	4543      	cmp	r3, r8
 80068b8:	dcf1      	bgt.n	800689e <_printf_float+0x40e>
 80068ba:	464b      	mov	r3, r9
 80068bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80068c0:	e6dc      	b.n	800667c <_printf_float+0x1ec>
 80068c2:	f04f 0800 	mov.w	r8, #0
 80068c6:	f104 0a1a 	add.w	sl, r4, #26
 80068ca:	e7f2      	b.n	80068b2 <_printf_float+0x422>
 80068cc:	2301      	movs	r3, #1
 80068ce:	4642      	mov	r2, r8
 80068d0:	e7df      	b.n	8006892 <_printf_float+0x402>
 80068d2:	2301      	movs	r3, #1
 80068d4:	464a      	mov	r2, r9
 80068d6:	4631      	mov	r1, r6
 80068d8:	4628      	mov	r0, r5
 80068da:	47b8      	blx	r7
 80068dc:	3001      	adds	r0, #1
 80068de:	f43f ae38 	beq.w	8006552 <_printf_float+0xc2>
 80068e2:	f108 0801 	add.w	r8, r8, #1
 80068e6:	68e3      	ldr	r3, [r4, #12]
 80068e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80068ea:	1a5b      	subs	r3, r3, r1
 80068ec:	4543      	cmp	r3, r8
 80068ee:	dcf0      	bgt.n	80068d2 <_printf_float+0x442>
 80068f0:	e6fa      	b.n	80066e8 <_printf_float+0x258>
 80068f2:	f04f 0800 	mov.w	r8, #0
 80068f6:	f104 0919 	add.w	r9, r4, #25
 80068fa:	e7f4      	b.n	80068e6 <_printf_float+0x456>

080068fc <_printf_common>:
 80068fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006900:	4616      	mov	r6, r2
 8006902:	4699      	mov	r9, r3
 8006904:	688a      	ldr	r2, [r1, #8]
 8006906:	690b      	ldr	r3, [r1, #16]
 8006908:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800690c:	4293      	cmp	r3, r2
 800690e:	bfb8      	it	lt
 8006910:	4613      	movlt	r3, r2
 8006912:	6033      	str	r3, [r6, #0]
 8006914:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006918:	4607      	mov	r7, r0
 800691a:	460c      	mov	r4, r1
 800691c:	b10a      	cbz	r2, 8006922 <_printf_common+0x26>
 800691e:	3301      	adds	r3, #1
 8006920:	6033      	str	r3, [r6, #0]
 8006922:	6823      	ldr	r3, [r4, #0]
 8006924:	0699      	lsls	r1, r3, #26
 8006926:	bf42      	ittt	mi
 8006928:	6833      	ldrmi	r3, [r6, #0]
 800692a:	3302      	addmi	r3, #2
 800692c:	6033      	strmi	r3, [r6, #0]
 800692e:	6825      	ldr	r5, [r4, #0]
 8006930:	f015 0506 	ands.w	r5, r5, #6
 8006934:	d106      	bne.n	8006944 <_printf_common+0x48>
 8006936:	f104 0a19 	add.w	sl, r4, #25
 800693a:	68e3      	ldr	r3, [r4, #12]
 800693c:	6832      	ldr	r2, [r6, #0]
 800693e:	1a9b      	subs	r3, r3, r2
 8006940:	42ab      	cmp	r3, r5
 8006942:	dc26      	bgt.n	8006992 <_printf_common+0x96>
 8006944:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006948:	1e13      	subs	r3, r2, #0
 800694a:	6822      	ldr	r2, [r4, #0]
 800694c:	bf18      	it	ne
 800694e:	2301      	movne	r3, #1
 8006950:	0692      	lsls	r2, r2, #26
 8006952:	d42b      	bmi.n	80069ac <_printf_common+0xb0>
 8006954:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006958:	4649      	mov	r1, r9
 800695a:	4638      	mov	r0, r7
 800695c:	47c0      	blx	r8
 800695e:	3001      	adds	r0, #1
 8006960:	d01e      	beq.n	80069a0 <_printf_common+0xa4>
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	68e5      	ldr	r5, [r4, #12]
 8006966:	6832      	ldr	r2, [r6, #0]
 8006968:	f003 0306 	and.w	r3, r3, #6
 800696c:	2b04      	cmp	r3, #4
 800696e:	bf08      	it	eq
 8006970:	1aad      	subeq	r5, r5, r2
 8006972:	68a3      	ldr	r3, [r4, #8]
 8006974:	6922      	ldr	r2, [r4, #16]
 8006976:	bf0c      	ite	eq
 8006978:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800697c:	2500      	movne	r5, #0
 800697e:	4293      	cmp	r3, r2
 8006980:	bfc4      	itt	gt
 8006982:	1a9b      	subgt	r3, r3, r2
 8006984:	18ed      	addgt	r5, r5, r3
 8006986:	2600      	movs	r6, #0
 8006988:	341a      	adds	r4, #26
 800698a:	42b5      	cmp	r5, r6
 800698c:	d11a      	bne.n	80069c4 <_printf_common+0xc8>
 800698e:	2000      	movs	r0, #0
 8006990:	e008      	b.n	80069a4 <_printf_common+0xa8>
 8006992:	2301      	movs	r3, #1
 8006994:	4652      	mov	r2, sl
 8006996:	4649      	mov	r1, r9
 8006998:	4638      	mov	r0, r7
 800699a:	47c0      	blx	r8
 800699c:	3001      	adds	r0, #1
 800699e:	d103      	bne.n	80069a8 <_printf_common+0xac>
 80069a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069a8:	3501      	adds	r5, #1
 80069aa:	e7c6      	b.n	800693a <_printf_common+0x3e>
 80069ac:	18e1      	adds	r1, r4, r3
 80069ae:	1c5a      	adds	r2, r3, #1
 80069b0:	2030      	movs	r0, #48	; 0x30
 80069b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069b6:	4422      	add	r2, r4
 80069b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069c0:	3302      	adds	r3, #2
 80069c2:	e7c7      	b.n	8006954 <_printf_common+0x58>
 80069c4:	2301      	movs	r3, #1
 80069c6:	4622      	mov	r2, r4
 80069c8:	4649      	mov	r1, r9
 80069ca:	4638      	mov	r0, r7
 80069cc:	47c0      	blx	r8
 80069ce:	3001      	adds	r0, #1
 80069d0:	d0e6      	beq.n	80069a0 <_printf_common+0xa4>
 80069d2:	3601      	adds	r6, #1
 80069d4:	e7d9      	b.n	800698a <_printf_common+0x8e>
	...

080069d8 <_printf_i>:
 80069d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069dc:	7e0f      	ldrb	r7, [r1, #24]
 80069de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80069e0:	2f78      	cmp	r7, #120	; 0x78
 80069e2:	4691      	mov	r9, r2
 80069e4:	4680      	mov	r8, r0
 80069e6:	460c      	mov	r4, r1
 80069e8:	469a      	mov	sl, r3
 80069ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80069ee:	d807      	bhi.n	8006a00 <_printf_i+0x28>
 80069f0:	2f62      	cmp	r7, #98	; 0x62
 80069f2:	d80a      	bhi.n	8006a0a <_printf_i+0x32>
 80069f4:	2f00      	cmp	r7, #0
 80069f6:	f000 80d8 	beq.w	8006baa <_printf_i+0x1d2>
 80069fa:	2f58      	cmp	r7, #88	; 0x58
 80069fc:	f000 80a3 	beq.w	8006b46 <_printf_i+0x16e>
 8006a00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a08:	e03a      	b.n	8006a80 <_printf_i+0xa8>
 8006a0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a0e:	2b15      	cmp	r3, #21
 8006a10:	d8f6      	bhi.n	8006a00 <_printf_i+0x28>
 8006a12:	a101      	add	r1, pc, #4	; (adr r1, 8006a18 <_printf_i+0x40>)
 8006a14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a18:	08006a71 	.word	0x08006a71
 8006a1c:	08006a85 	.word	0x08006a85
 8006a20:	08006a01 	.word	0x08006a01
 8006a24:	08006a01 	.word	0x08006a01
 8006a28:	08006a01 	.word	0x08006a01
 8006a2c:	08006a01 	.word	0x08006a01
 8006a30:	08006a85 	.word	0x08006a85
 8006a34:	08006a01 	.word	0x08006a01
 8006a38:	08006a01 	.word	0x08006a01
 8006a3c:	08006a01 	.word	0x08006a01
 8006a40:	08006a01 	.word	0x08006a01
 8006a44:	08006b91 	.word	0x08006b91
 8006a48:	08006ab5 	.word	0x08006ab5
 8006a4c:	08006b73 	.word	0x08006b73
 8006a50:	08006a01 	.word	0x08006a01
 8006a54:	08006a01 	.word	0x08006a01
 8006a58:	08006bb3 	.word	0x08006bb3
 8006a5c:	08006a01 	.word	0x08006a01
 8006a60:	08006ab5 	.word	0x08006ab5
 8006a64:	08006a01 	.word	0x08006a01
 8006a68:	08006a01 	.word	0x08006a01
 8006a6c:	08006b7b 	.word	0x08006b7b
 8006a70:	682b      	ldr	r3, [r5, #0]
 8006a72:	1d1a      	adds	r2, r3, #4
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	602a      	str	r2, [r5, #0]
 8006a78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a80:	2301      	movs	r3, #1
 8006a82:	e0a3      	b.n	8006bcc <_printf_i+0x1f4>
 8006a84:	6820      	ldr	r0, [r4, #0]
 8006a86:	6829      	ldr	r1, [r5, #0]
 8006a88:	0606      	lsls	r6, r0, #24
 8006a8a:	f101 0304 	add.w	r3, r1, #4
 8006a8e:	d50a      	bpl.n	8006aa6 <_printf_i+0xce>
 8006a90:	680e      	ldr	r6, [r1, #0]
 8006a92:	602b      	str	r3, [r5, #0]
 8006a94:	2e00      	cmp	r6, #0
 8006a96:	da03      	bge.n	8006aa0 <_printf_i+0xc8>
 8006a98:	232d      	movs	r3, #45	; 0x2d
 8006a9a:	4276      	negs	r6, r6
 8006a9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006aa0:	485e      	ldr	r0, [pc, #376]	; (8006c1c <_printf_i+0x244>)
 8006aa2:	230a      	movs	r3, #10
 8006aa4:	e019      	b.n	8006ada <_printf_i+0x102>
 8006aa6:	680e      	ldr	r6, [r1, #0]
 8006aa8:	602b      	str	r3, [r5, #0]
 8006aaa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006aae:	bf18      	it	ne
 8006ab0:	b236      	sxthne	r6, r6
 8006ab2:	e7ef      	b.n	8006a94 <_printf_i+0xbc>
 8006ab4:	682b      	ldr	r3, [r5, #0]
 8006ab6:	6820      	ldr	r0, [r4, #0]
 8006ab8:	1d19      	adds	r1, r3, #4
 8006aba:	6029      	str	r1, [r5, #0]
 8006abc:	0601      	lsls	r1, r0, #24
 8006abe:	d501      	bpl.n	8006ac4 <_printf_i+0xec>
 8006ac0:	681e      	ldr	r6, [r3, #0]
 8006ac2:	e002      	b.n	8006aca <_printf_i+0xf2>
 8006ac4:	0646      	lsls	r6, r0, #25
 8006ac6:	d5fb      	bpl.n	8006ac0 <_printf_i+0xe8>
 8006ac8:	881e      	ldrh	r6, [r3, #0]
 8006aca:	4854      	ldr	r0, [pc, #336]	; (8006c1c <_printf_i+0x244>)
 8006acc:	2f6f      	cmp	r7, #111	; 0x6f
 8006ace:	bf0c      	ite	eq
 8006ad0:	2308      	moveq	r3, #8
 8006ad2:	230a      	movne	r3, #10
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ada:	6865      	ldr	r5, [r4, #4]
 8006adc:	60a5      	str	r5, [r4, #8]
 8006ade:	2d00      	cmp	r5, #0
 8006ae0:	bfa2      	ittt	ge
 8006ae2:	6821      	ldrge	r1, [r4, #0]
 8006ae4:	f021 0104 	bicge.w	r1, r1, #4
 8006ae8:	6021      	strge	r1, [r4, #0]
 8006aea:	b90e      	cbnz	r6, 8006af0 <_printf_i+0x118>
 8006aec:	2d00      	cmp	r5, #0
 8006aee:	d04d      	beq.n	8006b8c <_printf_i+0x1b4>
 8006af0:	4615      	mov	r5, r2
 8006af2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006af6:	fb03 6711 	mls	r7, r3, r1, r6
 8006afa:	5dc7      	ldrb	r7, [r0, r7]
 8006afc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b00:	4637      	mov	r7, r6
 8006b02:	42bb      	cmp	r3, r7
 8006b04:	460e      	mov	r6, r1
 8006b06:	d9f4      	bls.n	8006af2 <_printf_i+0x11a>
 8006b08:	2b08      	cmp	r3, #8
 8006b0a:	d10b      	bne.n	8006b24 <_printf_i+0x14c>
 8006b0c:	6823      	ldr	r3, [r4, #0]
 8006b0e:	07de      	lsls	r6, r3, #31
 8006b10:	d508      	bpl.n	8006b24 <_printf_i+0x14c>
 8006b12:	6923      	ldr	r3, [r4, #16]
 8006b14:	6861      	ldr	r1, [r4, #4]
 8006b16:	4299      	cmp	r1, r3
 8006b18:	bfde      	ittt	le
 8006b1a:	2330      	movle	r3, #48	; 0x30
 8006b1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b20:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006b24:	1b52      	subs	r2, r2, r5
 8006b26:	6122      	str	r2, [r4, #16]
 8006b28:	f8cd a000 	str.w	sl, [sp]
 8006b2c:	464b      	mov	r3, r9
 8006b2e:	aa03      	add	r2, sp, #12
 8006b30:	4621      	mov	r1, r4
 8006b32:	4640      	mov	r0, r8
 8006b34:	f7ff fee2 	bl	80068fc <_printf_common>
 8006b38:	3001      	adds	r0, #1
 8006b3a:	d14c      	bne.n	8006bd6 <_printf_i+0x1fe>
 8006b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b40:	b004      	add	sp, #16
 8006b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b46:	4835      	ldr	r0, [pc, #212]	; (8006c1c <_printf_i+0x244>)
 8006b48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006b4c:	6829      	ldr	r1, [r5, #0]
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b54:	6029      	str	r1, [r5, #0]
 8006b56:	061d      	lsls	r5, r3, #24
 8006b58:	d514      	bpl.n	8006b84 <_printf_i+0x1ac>
 8006b5a:	07df      	lsls	r7, r3, #31
 8006b5c:	bf44      	itt	mi
 8006b5e:	f043 0320 	orrmi.w	r3, r3, #32
 8006b62:	6023      	strmi	r3, [r4, #0]
 8006b64:	b91e      	cbnz	r6, 8006b6e <_printf_i+0x196>
 8006b66:	6823      	ldr	r3, [r4, #0]
 8006b68:	f023 0320 	bic.w	r3, r3, #32
 8006b6c:	6023      	str	r3, [r4, #0]
 8006b6e:	2310      	movs	r3, #16
 8006b70:	e7b0      	b.n	8006ad4 <_printf_i+0xfc>
 8006b72:	6823      	ldr	r3, [r4, #0]
 8006b74:	f043 0320 	orr.w	r3, r3, #32
 8006b78:	6023      	str	r3, [r4, #0]
 8006b7a:	2378      	movs	r3, #120	; 0x78
 8006b7c:	4828      	ldr	r0, [pc, #160]	; (8006c20 <_printf_i+0x248>)
 8006b7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b82:	e7e3      	b.n	8006b4c <_printf_i+0x174>
 8006b84:	0659      	lsls	r1, r3, #25
 8006b86:	bf48      	it	mi
 8006b88:	b2b6      	uxthmi	r6, r6
 8006b8a:	e7e6      	b.n	8006b5a <_printf_i+0x182>
 8006b8c:	4615      	mov	r5, r2
 8006b8e:	e7bb      	b.n	8006b08 <_printf_i+0x130>
 8006b90:	682b      	ldr	r3, [r5, #0]
 8006b92:	6826      	ldr	r6, [r4, #0]
 8006b94:	6961      	ldr	r1, [r4, #20]
 8006b96:	1d18      	adds	r0, r3, #4
 8006b98:	6028      	str	r0, [r5, #0]
 8006b9a:	0635      	lsls	r5, r6, #24
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	d501      	bpl.n	8006ba4 <_printf_i+0x1cc>
 8006ba0:	6019      	str	r1, [r3, #0]
 8006ba2:	e002      	b.n	8006baa <_printf_i+0x1d2>
 8006ba4:	0670      	lsls	r0, r6, #25
 8006ba6:	d5fb      	bpl.n	8006ba0 <_printf_i+0x1c8>
 8006ba8:	8019      	strh	r1, [r3, #0]
 8006baa:	2300      	movs	r3, #0
 8006bac:	6123      	str	r3, [r4, #16]
 8006bae:	4615      	mov	r5, r2
 8006bb0:	e7ba      	b.n	8006b28 <_printf_i+0x150>
 8006bb2:	682b      	ldr	r3, [r5, #0]
 8006bb4:	1d1a      	adds	r2, r3, #4
 8006bb6:	602a      	str	r2, [r5, #0]
 8006bb8:	681d      	ldr	r5, [r3, #0]
 8006bba:	6862      	ldr	r2, [r4, #4]
 8006bbc:	2100      	movs	r1, #0
 8006bbe:	4628      	mov	r0, r5
 8006bc0:	f7f9 fb1e 	bl	8000200 <memchr>
 8006bc4:	b108      	cbz	r0, 8006bca <_printf_i+0x1f2>
 8006bc6:	1b40      	subs	r0, r0, r5
 8006bc8:	6060      	str	r0, [r4, #4]
 8006bca:	6863      	ldr	r3, [r4, #4]
 8006bcc:	6123      	str	r3, [r4, #16]
 8006bce:	2300      	movs	r3, #0
 8006bd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bd4:	e7a8      	b.n	8006b28 <_printf_i+0x150>
 8006bd6:	6923      	ldr	r3, [r4, #16]
 8006bd8:	462a      	mov	r2, r5
 8006bda:	4649      	mov	r1, r9
 8006bdc:	4640      	mov	r0, r8
 8006bde:	47d0      	blx	sl
 8006be0:	3001      	adds	r0, #1
 8006be2:	d0ab      	beq.n	8006b3c <_printf_i+0x164>
 8006be4:	6823      	ldr	r3, [r4, #0]
 8006be6:	079b      	lsls	r3, r3, #30
 8006be8:	d413      	bmi.n	8006c12 <_printf_i+0x23a>
 8006bea:	68e0      	ldr	r0, [r4, #12]
 8006bec:	9b03      	ldr	r3, [sp, #12]
 8006bee:	4298      	cmp	r0, r3
 8006bf0:	bfb8      	it	lt
 8006bf2:	4618      	movlt	r0, r3
 8006bf4:	e7a4      	b.n	8006b40 <_printf_i+0x168>
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	4632      	mov	r2, r6
 8006bfa:	4649      	mov	r1, r9
 8006bfc:	4640      	mov	r0, r8
 8006bfe:	47d0      	blx	sl
 8006c00:	3001      	adds	r0, #1
 8006c02:	d09b      	beq.n	8006b3c <_printf_i+0x164>
 8006c04:	3501      	adds	r5, #1
 8006c06:	68e3      	ldr	r3, [r4, #12]
 8006c08:	9903      	ldr	r1, [sp, #12]
 8006c0a:	1a5b      	subs	r3, r3, r1
 8006c0c:	42ab      	cmp	r3, r5
 8006c0e:	dcf2      	bgt.n	8006bf6 <_printf_i+0x21e>
 8006c10:	e7eb      	b.n	8006bea <_printf_i+0x212>
 8006c12:	2500      	movs	r5, #0
 8006c14:	f104 0619 	add.w	r6, r4, #25
 8006c18:	e7f5      	b.n	8006c06 <_printf_i+0x22e>
 8006c1a:	bf00      	nop
 8006c1c:	0800b24e 	.word	0x0800b24e
 8006c20:	0800b25f 	.word	0x0800b25f

08006c24 <_scanf_float>:
 8006c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c28:	b087      	sub	sp, #28
 8006c2a:	4617      	mov	r7, r2
 8006c2c:	9303      	str	r3, [sp, #12]
 8006c2e:	688b      	ldr	r3, [r1, #8]
 8006c30:	1e5a      	subs	r2, r3, #1
 8006c32:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006c36:	bf83      	ittte	hi
 8006c38:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006c3c:	195b      	addhi	r3, r3, r5
 8006c3e:	9302      	strhi	r3, [sp, #8]
 8006c40:	2300      	movls	r3, #0
 8006c42:	bf86      	itte	hi
 8006c44:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006c48:	608b      	strhi	r3, [r1, #8]
 8006c4a:	9302      	strls	r3, [sp, #8]
 8006c4c:	680b      	ldr	r3, [r1, #0]
 8006c4e:	468b      	mov	fp, r1
 8006c50:	2500      	movs	r5, #0
 8006c52:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006c56:	f84b 3b1c 	str.w	r3, [fp], #28
 8006c5a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006c5e:	4680      	mov	r8, r0
 8006c60:	460c      	mov	r4, r1
 8006c62:	465e      	mov	r6, fp
 8006c64:	46aa      	mov	sl, r5
 8006c66:	46a9      	mov	r9, r5
 8006c68:	9501      	str	r5, [sp, #4]
 8006c6a:	68a2      	ldr	r2, [r4, #8]
 8006c6c:	b152      	cbz	r2, 8006c84 <_scanf_float+0x60>
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	2b4e      	cmp	r3, #78	; 0x4e
 8006c74:	d864      	bhi.n	8006d40 <_scanf_float+0x11c>
 8006c76:	2b40      	cmp	r3, #64	; 0x40
 8006c78:	d83c      	bhi.n	8006cf4 <_scanf_float+0xd0>
 8006c7a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006c7e:	b2c8      	uxtb	r0, r1
 8006c80:	280e      	cmp	r0, #14
 8006c82:	d93a      	bls.n	8006cfa <_scanf_float+0xd6>
 8006c84:	f1b9 0f00 	cmp.w	r9, #0
 8006c88:	d003      	beq.n	8006c92 <_scanf_float+0x6e>
 8006c8a:	6823      	ldr	r3, [r4, #0]
 8006c8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c90:	6023      	str	r3, [r4, #0]
 8006c92:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006c96:	f1ba 0f01 	cmp.w	sl, #1
 8006c9a:	f200 8113 	bhi.w	8006ec4 <_scanf_float+0x2a0>
 8006c9e:	455e      	cmp	r6, fp
 8006ca0:	f200 8105 	bhi.w	8006eae <_scanf_float+0x28a>
 8006ca4:	2501      	movs	r5, #1
 8006ca6:	4628      	mov	r0, r5
 8006ca8:	b007      	add	sp, #28
 8006caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cae:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006cb2:	2a0d      	cmp	r2, #13
 8006cb4:	d8e6      	bhi.n	8006c84 <_scanf_float+0x60>
 8006cb6:	a101      	add	r1, pc, #4	; (adr r1, 8006cbc <_scanf_float+0x98>)
 8006cb8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006cbc:	08006dfb 	.word	0x08006dfb
 8006cc0:	08006c85 	.word	0x08006c85
 8006cc4:	08006c85 	.word	0x08006c85
 8006cc8:	08006c85 	.word	0x08006c85
 8006ccc:	08006e5b 	.word	0x08006e5b
 8006cd0:	08006e33 	.word	0x08006e33
 8006cd4:	08006c85 	.word	0x08006c85
 8006cd8:	08006c85 	.word	0x08006c85
 8006cdc:	08006e09 	.word	0x08006e09
 8006ce0:	08006c85 	.word	0x08006c85
 8006ce4:	08006c85 	.word	0x08006c85
 8006ce8:	08006c85 	.word	0x08006c85
 8006cec:	08006c85 	.word	0x08006c85
 8006cf0:	08006dc1 	.word	0x08006dc1
 8006cf4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006cf8:	e7db      	b.n	8006cb2 <_scanf_float+0x8e>
 8006cfa:	290e      	cmp	r1, #14
 8006cfc:	d8c2      	bhi.n	8006c84 <_scanf_float+0x60>
 8006cfe:	a001      	add	r0, pc, #4	; (adr r0, 8006d04 <_scanf_float+0xe0>)
 8006d00:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006d04:	08006db3 	.word	0x08006db3
 8006d08:	08006c85 	.word	0x08006c85
 8006d0c:	08006db3 	.word	0x08006db3
 8006d10:	08006e47 	.word	0x08006e47
 8006d14:	08006c85 	.word	0x08006c85
 8006d18:	08006d61 	.word	0x08006d61
 8006d1c:	08006d9d 	.word	0x08006d9d
 8006d20:	08006d9d 	.word	0x08006d9d
 8006d24:	08006d9d 	.word	0x08006d9d
 8006d28:	08006d9d 	.word	0x08006d9d
 8006d2c:	08006d9d 	.word	0x08006d9d
 8006d30:	08006d9d 	.word	0x08006d9d
 8006d34:	08006d9d 	.word	0x08006d9d
 8006d38:	08006d9d 	.word	0x08006d9d
 8006d3c:	08006d9d 	.word	0x08006d9d
 8006d40:	2b6e      	cmp	r3, #110	; 0x6e
 8006d42:	d809      	bhi.n	8006d58 <_scanf_float+0x134>
 8006d44:	2b60      	cmp	r3, #96	; 0x60
 8006d46:	d8b2      	bhi.n	8006cae <_scanf_float+0x8a>
 8006d48:	2b54      	cmp	r3, #84	; 0x54
 8006d4a:	d077      	beq.n	8006e3c <_scanf_float+0x218>
 8006d4c:	2b59      	cmp	r3, #89	; 0x59
 8006d4e:	d199      	bne.n	8006c84 <_scanf_float+0x60>
 8006d50:	2d07      	cmp	r5, #7
 8006d52:	d197      	bne.n	8006c84 <_scanf_float+0x60>
 8006d54:	2508      	movs	r5, #8
 8006d56:	e029      	b.n	8006dac <_scanf_float+0x188>
 8006d58:	2b74      	cmp	r3, #116	; 0x74
 8006d5a:	d06f      	beq.n	8006e3c <_scanf_float+0x218>
 8006d5c:	2b79      	cmp	r3, #121	; 0x79
 8006d5e:	e7f6      	b.n	8006d4e <_scanf_float+0x12a>
 8006d60:	6821      	ldr	r1, [r4, #0]
 8006d62:	05c8      	lsls	r0, r1, #23
 8006d64:	d51a      	bpl.n	8006d9c <_scanf_float+0x178>
 8006d66:	9b02      	ldr	r3, [sp, #8]
 8006d68:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006d6c:	6021      	str	r1, [r4, #0]
 8006d6e:	f109 0901 	add.w	r9, r9, #1
 8006d72:	b11b      	cbz	r3, 8006d7c <_scanf_float+0x158>
 8006d74:	3b01      	subs	r3, #1
 8006d76:	3201      	adds	r2, #1
 8006d78:	9302      	str	r3, [sp, #8]
 8006d7a:	60a2      	str	r2, [r4, #8]
 8006d7c:	68a3      	ldr	r3, [r4, #8]
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	60a3      	str	r3, [r4, #8]
 8006d82:	6923      	ldr	r3, [r4, #16]
 8006d84:	3301      	adds	r3, #1
 8006d86:	6123      	str	r3, [r4, #16]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	607b      	str	r3, [r7, #4]
 8006d90:	f340 8084 	ble.w	8006e9c <_scanf_float+0x278>
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	3301      	adds	r3, #1
 8006d98:	603b      	str	r3, [r7, #0]
 8006d9a:	e766      	b.n	8006c6a <_scanf_float+0x46>
 8006d9c:	eb1a 0f05 	cmn.w	sl, r5
 8006da0:	f47f af70 	bne.w	8006c84 <_scanf_float+0x60>
 8006da4:	6822      	ldr	r2, [r4, #0]
 8006da6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006daa:	6022      	str	r2, [r4, #0]
 8006dac:	f806 3b01 	strb.w	r3, [r6], #1
 8006db0:	e7e4      	b.n	8006d7c <_scanf_float+0x158>
 8006db2:	6822      	ldr	r2, [r4, #0]
 8006db4:	0610      	lsls	r0, r2, #24
 8006db6:	f57f af65 	bpl.w	8006c84 <_scanf_float+0x60>
 8006dba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006dbe:	e7f4      	b.n	8006daa <_scanf_float+0x186>
 8006dc0:	f1ba 0f00 	cmp.w	sl, #0
 8006dc4:	d10e      	bne.n	8006de4 <_scanf_float+0x1c0>
 8006dc6:	f1b9 0f00 	cmp.w	r9, #0
 8006dca:	d10e      	bne.n	8006dea <_scanf_float+0x1c6>
 8006dcc:	6822      	ldr	r2, [r4, #0]
 8006dce:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006dd2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006dd6:	d108      	bne.n	8006dea <_scanf_float+0x1c6>
 8006dd8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006ddc:	6022      	str	r2, [r4, #0]
 8006dde:	f04f 0a01 	mov.w	sl, #1
 8006de2:	e7e3      	b.n	8006dac <_scanf_float+0x188>
 8006de4:	f1ba 0f02 	cmp.w	sl, #2
 8006de8:	d055      	beq.n	8006e96 <_scanf_float+0x272>
 8006dea:	2d01      	cmp	r5, #1
 8006dec:	d002      	beq.n	8006df4 <_scanf_float+0x1d0>
 8006dee:	2d04      	cmp	r5, #4
 8006df0:	f47f af48 	bne.w	8006c84 <_scanf_float+0x60>
 8006df4:	3501      	adds	r5, #1
 8006df6:	b2ed      	uxtb	r5, r5
 8006df8:	e7d8      	b.n	8006dac <_scanf_float+0x188>
 8006dfa:	f1ba 0f01 	cmp.w	sl, #1
 8006dfe:	f47f af41 	bne.w	8006c84 <_scanf_float+0x60>
 8006e02:	f04f 0a02 	mov.w	sl, #2
 8006e06:	e7d1      	b.n	8006dac <_scanf_float+0x188>
 8006e08:	b97d      	cbnz	r5, 8006e2a <_scanf_float+0x206>
 8006e0a:	f1b9 0f00 	cmp.w	r9, #0
 8006e0e:	f47f af3c 	bne.w	8006c8a <_scanf_float+0x66>
 8006e12:	6822      	ldr	r2, [r4, #0]
 8006e14:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006e18:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006e1c:	f47f af39 	bne.w	8006c92 <_scanf_float+0x6e>
 8006e20:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006e24:	6022      	str	r2, [r4, #0]
 8006e26:	2501      	movs	r5, #1
 8006e28:	e7c0      	b.n	8006dac <_scanf_float+0x188>
 8006e2a:	2d03      	cmp	r5, #3
 8006e2c:	d0e2      	beq.n	8006df4 <_scanf_float+0x1d0>
 8006e2e:	2d05      	cmp	r5, #5
 8006e30:	e7de      	b.n	8006df0 <_scanf_float+0x1cc>
 8006e32:	2d02      	cmp	r5, #2
 8006e34:	f47f af26 	bne.w	8006c84 <_scanf_float+0x60>
 8006e38:	2503      	movs	r5, #3
 8006e3a:	e7b7      	b.n	8006dac <_scanf_float+0x188>
 8006e3c:	2d06      	cmp	r5, #6
 8006e3e:	f47f af21 	bne.w	8006c84 <_scanf_float+0x60>
 8006e42:	2507      	movs	r5, #7
 8006e44:	e7b2      	b.n	8006dac <_scanf_float+0x188>
 8006e46:	6822      	ldr	r2, [r4, #0]
 8006e48:	0591      	lsls	r1, r2, #22
 8006e4a:	f57f af1b 	bpl.w	8006c84 <_scanf_float+0x60>
 8006e4e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006e52:	6022      	str	r2, [r4, #0]
 8006e54:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e58:	e7a8      	b.n	8006dac <_scanf_float+0x188>
 8006e5a:	6822      	ldr	r2, [r4, #0]
 8006e5c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006e60:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006e64:	d006      	beq.n	8006e74 <_scanf_float+0x250>
 8006e66:	0550      	lsls	r0, r2, #21
 8006e68:	f57f af0c 	bpl.w	8006c84 <_scanf_float+0x60>
 8006e6c:	f1b9 0f00 	cmp.w	r9, #0
 8006e70:	f43f af0f 	beq.w	8006c92 <_scanf_float+0x6e>
 8006e74:	0591      	lsls	r1, r2, #22
 8006e76:	bf58      	it	pl
 8006e78:	9901      	ldrpl	r1, [sp, #4]
 8006e7a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006e7e:	bf58      	it	pl
 8006e80:	eba9 0101 	subpl.w	r1, r9, r1
 8006e84:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006e88:	bf58      	it	pl
 8006e8a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006e8e:	6022      	str	r2, [r4, #0]
 8006e90:	f04f 0900 	mov.w	r9, #0
 8006e94:	e78a      	b.n	8006dac <_scanf_float+0x188>
 8006e96:	f04f 0a03 	mov.w	sl, #3
 8006e9a:	e787      	b.n	8006dac <_scanf_float+0x188>
 8006e9c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006ea0:	4639      	mov	r1, r7
 8006ea2:	4640      	mov	r0, r8
 8006ea4:	4798      	blx	r3
 8006ea6:	2800      	cmp	r0, #0
 8006ea8:	f43f aedf 	beq.w	8006c6a <_scanf_float+0x46>
 8006eac:	e6ea      	b.n	8006c84 <_scanf_float+0x60>
 8006eae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006eb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006eb6:	463a      	mov	r2, r7
 8006eb8:	4640      	mov	r0, r8
 8006eba:	4798      	blx	r3
 8006ebc:	6923      	ldr	r3, [r4, #16]
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	6123      	str	r3, [r4, #16]
 8006ec2:	e6ec      	b.n	8006c9e <_scanf_float+0x7a>
 8006ec4:	1e6b      	subs	r3, r5, #1
 8006ec6:	2b06      	cmp	r3, #6
 8006ec8:	d825      	bhi.n	8006f16 <_scanf_float+0x2f2>
 8006eca:	2d02      	cmp	r5, #2
 8006ecc:	d836      	bhi.n	8006f3c <_scanf_float+0x318>
 8006ece:	455e      	cmp	r6, fp
 8006ed0:	f67f aee8 	bls.w	8006ca4 <_scanf_float+0x80>
 8006ed4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ed8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006edc:	463a      	mov	r2, r7
 8006ede:	4640      	mov	r0, r8
 8006ee0:	4798      	blx	r3
 8006ee2:	6923      	ldr	r3, [r4, #16]
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	6123      	str	r3, [r4, #16]
 8006ee8:	e7f1      	b.n	8006ece <_scanf_float+0x2aa>
 8006eea:	9802      	ldr	r0, [sp, #8]
 8006eec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ef0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006ef4:	9002      	str	r0, [sp, #8]
 8006ef6:	463a      	mov	r2, r7
 8006ef8:	4640      	mov	r0, r8
 8006efa:	4798      	blx	r3
 8006efc:	6923      	ldr	r3, [r4, #16]
 8006efe:	3b01      	subs	r3, #1
 8006f00:	6123      	str	r3, [r4, #16]
 8006f02:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006f06:	fa5f fa8a 	uxtb.w	sl, sl
 8006f0a:	f1ba 0f02 	cmp.w	sl, #2
 8006f0e:	d1ec      	bne.n	8006eea <_scanf_float+0x2c6>
 8006f10:	3d03      	subs	r5, #3
 8006f12:	b2ed      	uxtb	r5, r5
 8006f14:	1b76      	subs	r6, r6, r5
 8006f16:	6823      	ldr	r3, [r4, #0]
 8006f18:	05da      	lsls	r2, r3, #23
 8006f1a:	d52f      	bpl.n	8006f7c <_scanf_float+0x358>
 8006f1c:	055b      	lsls	r3, r3, #21
 8006f1e:	d510      	bpl.n	8006f42 <_scanf_float+0x31e>
 8006f20:	455e      	cmp	r6, fp
 8006f22:	f67f aebf 	bls.w	8006ca4 <_scanf_float+0x80>
 8006f26:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f2a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f2e:	463a      	mov	r2, r7
 8006f30:	4640      	mov	r0, r8
 8006f32:	4798      	blx	r3
 8006f34:	6923      	ldr	r3, [r4, #16]
 8006f36:	3b01      	subs	r3, #1
 8006f38:	6123      	str	r3, [r4, #16]
 8006f3a:	e7f1      	b.n	8006f20 <_scanf_float+0x2fc>
 8006f3c:	46aa      	mov	sl, r5
 8006f3e:	9602      	str	r6, [sp, #8]
 8006f40:	e7df      	b.n	8006f02 <_scanf_float+0x2de>
 8006f42:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006f46:	6923      	ldr	r3, [r4, #16]
 8006f48:	2965      	cmp	r1, #101	; 0x65
 8006f4a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8006f4e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8006f52:	6123      	str	r3, [r4, #16]
 8006f54:	d00c      	beq.n	8006f70 <_scanf_float+0x34c>
 8006f56:	2945      	cmp	r1, #69	; 0x45
 8006f58:	d00a      	beq.n	8006f70 <_scanf_float+0x34c>
 8006f5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f5e:	463a      	mov	r2, r7
 8006f60:	4640      	mov	r0, r8
 8006f62:	4798      	blx	r3
 8006f64:	6923      	ldr	r3, [r4, #16]
 8006f66:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	1eb5      	subs	r5, r6, #2
 8006f6e:	6123      	str	r3, [r4, #16]
 8006f70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f74:	463a      	mov	r2, r7
 8006f76:	4640      	mov	r0, r8
 8006f78:	4798      	blx	r3
 8006f7a:	462e      	mov	r6, r5
 8006f7c:	6825      	ldr	r5, [r4, #0]
 8006f7e:	f015 0510 	ands.w	r5, r5, #16
 8006f82:	d159      	bne.n	8007038 <_scanf_float+0x414>
 8006f84:	7035      	strb	r5, [r6, #0]
 8006f86:	6823      	ldr	r3, [r4, #0]
 8006f88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f90:	d11b      	bne.n	8006fca <_scanf_float+0x3a6>
 8006f92:	9b01      	ldr	r3, [sp, #4]
 8006f94:	454b      	cmp	r3, r9
 8006f96:	eba3 0209 	sub.w	r2, r3, r9
 8006f9a:	d123      	bne.n	8006fe4 <_scanf_float+0x3c0>
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	4659      	mov	r1, fp
 8006fa0:	4640      	mov	r0, r8
 8006fa2:	f000 ff4b 	bl	8007e3c <_strtod_r>
 8006fa6:	6822      	ldr	r2, [r4, #0]
 8006fa8:	9b03      	ldr	r3, [sp, #12]
 8006faa:	f012 0f02 	tst.w	r2, #2
 8006fae:	ec57 6b10 	vmov	r6, r7, d0
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	d021      	beq.n	8006ffa <_scanf_float+0x3d6>
 8006fb6:	9903      	ldr	r1, [sp, #12]
 8006fb8:	1d1a      	adds	r2, r3, #4
 8006fba:	600a      	str	r2, [r1, #0]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	e9c3 6700 	strd	r6, r7, [r3]
 8006fc2:	68e3      	ldr	r3, [r4, #12]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	60e3      	str	r3, [r4, #12]
 8006fc8:	e66d      	b.n	8006ca6 <_scanf_float+0x82>
 8006fca:	9b04      	ldr	r3, [sp, #16]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d0e5      	beq.n	8006f9c <_scanf_float+0x378>
 8006fd0:	9905      	ldr	r1, [sp, #20]
 8006fd2:	230a      	movs	r3, #10
 8006fd4:	462a      	mov	r2, r5
 8006fd6:	3101      	adds	r1, #1
 8006fd8:	4640      	mov	r0, r8
 8006fda:	f000 ffb7 	bl	8007f4c <_strtol_r>
 8006fde:	9b04      	ldr	r3, [sp, #16]
 8006fe0:	9e05      	ldr	r6, [sp, #20]
 8006fe2:	1ac2      	subs	r2, r0, r3
 8006fe4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006fe8:	429e      	cmp	r6, r3
 8006fea:	bf28      	it	cs
 8006fec:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006ff0:	4912      	ldr	r1, [pc, #72]	; (800703c <_scanf_float+0x418>)
 8006ff2:	4630      	mov	r0, r6
 8006ff4:	f000 f8d6 	bl	80071a4 <siprintf>
 8006ff8:	e7d0      	b.n	8006f9c <_scanf_float+0x378>
 8006ffa:	9903      	ldr	r1, [sp, #12]
 8006ffc:	f012 0f04 	tst.w	r2, #4
 8007000:	f103 0204 	add.w	r2, r3, #4
 8007004:	600a      	str	r2, [r1, #0]
 8007006:	d1d9      	bne.n	8006fbc <_scanf_float+0x398>
 8007008:	f8d3 8000 	ldr.w	r8, [r3]
 800700c:	ee10 2a10 	vmov	r2, s0
 8007010:	ee10 0a10 	vmov	r0, s0
 8007014:	463b      	mov	r3, r7
 8007016:	4639      	mov	r1, r7
 8007018:	f7f9 fd98 	bl	8000b4c <__aeabi_dcmpun>
 800701c:	b128      	cbz	r0, 800702a <_scanf_float+0x406>
 800701e:	4808      	ldr	r0, [pc, #32]	; (8007040 <_scanf_float+0x41c>)
 8007020:	f000 f886 	bl	8007130 <nanf>
 8007024:	ed88 0a00 	vstr	s0, [r8]
 8007028:	e7cb      	b.n	8006fc2 <_scanf_float+0x39e>
 800702a:	4630      	mov	r0, r6
 800702c:	4639      	mov	r1, r7
 800702e:	f7f9 fdeb 	bl	8000c08 <__aeabi_d2f>
 8007032:	f8c8 0000 	str.w	r0, [r8]
 8007036:	e7c4      	b.n	8006fc2 <_scanf_float+0x39e>
 8007038:	2500      	movs	r5, #0
 800703a:	e634      	b.n	8006ca6 <_scanf_float+0x82>
 800703c:	0800b270 	.word	0x0800b270
 8007040:	0800b6e0 	.word	0x0800b6e0

08007044 <_puts_r>:
 8007044:	b570      	push	{r4, r5, r6, lr}
 8007046:	460e      	mov	r6, r1
 8007048:	4605      	mov	r5, r0
 800704a:	b118      	cbz	r0, 8007054 <_puts_r+0x10>
 800704c:	6983      	ldr	r3, [r0, #24]
 800704e:	b90b      	cbnz	r3, 8007054 <_puts_r+0x10>
 8007050:	f001 ffd2 	bl	8008ff8 <__sinit>
 8007054:	69ab      	ldr	r3, [r5, #24]
 8007056:	68ac      	ldr	r4, [r5, #8]
 8007058:	b913      	cbnz	r3, 8007060 <_puts_r+0x1c>
 800705a:	4628      	mov	r0, r5
 800705c:	f001 ffcc 	bl	8008ff8 <__sinit>
 8007060:	4b2c      	ldr	r3, [pc, #176]	; (8007114 <_puts_r+0xd0>)
 8007062:	429c      	cmp	r4, r3
 8007064:	d120      	bne.n	80070a8 <_puts_r+0x64>
 8007066:	686c      	ldr	r4, [r5, #4]
 8007068:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800706a:	07db      	lsls	r3, r3, #31
 800706c:	d405      	bmi.n	800707a <_puts_r+0x36>
 800706e:	89a3      	ldrh	r3, [r4, #12]
 8007070:	0598      	lsls	r0, r3, #22
 8007072:	d402      	bmi.n	800707a <_puts_r+0x36>
 8007074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007076:	f002 fbd0 	bl	800981a <__retarget_lock_acquire_recursive>
 800707a:	89a3      	ldrh	r3, [r4, #12]
 800707c:	0719      	lsls	r1, r3, #28
 800707e:	d51d      	bpl.n	80070bc <_puts_r+0x78>
 8007080:	6923      	ldr	r3, [r4, #16]
 8007082:	b1db      	cbz	r3, 80070bc <_puts_r+0x78>
 8007084:	3e01      	subs	r6, #1
 8007086:	68a3      	ldr	r3, [r4, #8]
 8007088:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800708c:	3b01      	subs	r3, #1
 800708e:	60a3      	str	r3, [r4, #8]
 8007090:	bb39      	cbnz	r1, 80070e2 <_puts_r+0x9e>
 8007092:	2b00      	cmp	r3, #0
 8007094:	da38      	bge.n	8007108 <_puts_r+0xc4>
 8007096:	4622      	mov	r2, r4
 8007098:	210a      	movs	r1, #10
 800709a:	4628      	mov	r0, r5
 800709c:	f000 ff58 	bl	8007f50 <__swbuf_r>
 80070a0:	3001      	adds	r0, #1
 80070a2:	d011      	beq.n	80070c8 <_puts_r+0x84>
 80070a4:	250a      	movs	r5, #10
 80070a6:	e011      	b.n	80070cc <_puts_r+0x88>
 80070a8:	4b1b      	ldr	r3, [pc, #108]	; (8007118 <_puts_r+0xd4>)
 80070aa:	429c      	cmp	r4, r3
 80070ac:	d101      	bne.n	80070b2 <_puts_r+0x6e>
 80070ae:	68ac      	ldr	r4, [r5, #8]
 80070b0:	e7da      	b.n	8007068 <_puts_r+0x24>
 80070b2:	4b1a      	ldr	r3, [pc, #104]	; (800711c <_puts_r+0xd8>)
 80070b4:	429c      	cmp	r4, r3
 80070b6:	bf08      	it	eq
 80070b8:	68ec      	ldreq	r4, [r5, #12]
 80070ba:	e7d5      	b.n	8007068 <_puts_r+0x24>
 80070bc:	4621      	mov	r1, r4
 80070be:	4628      	mov	r0, r5
 80070c0:	f000 ff98 	bl	8007ff4 <__swsetup_r>
 80070c4:	2800      	cmp	r0, #0
 80070c6:	d0dd      	beq.n	8007084 <_puts_r+0x40>
 80070c8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80070cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070ce:	07da      	lsls	r2, r3, #31
 80070d0:	d405      	bmi.n	80070de <_puts_r+0x9a>
 80070d2:	89a3      	ldrh	r3, [r4, #12]
 80070d4:	059b      	lsls	r3, r3, #22
 80070d6:	d402      	bmi.n	80070de <_puts_r+0x9a>
 80070d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070da:	f002 fb9f 	bl	800981c <__retarget_lock_release_recursive>
 80070de:	4628      	mov	r0, r5
 80070e0:	bd70      	pop	{r4, r5, r6, pc}
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	da04      	bge.n	80070f0 <_puts_r+0xac>
 80070e6:	69a2      	ldr	r2, [r4, #24]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	dc06      	bgt.n	80070fa <_puts_r+0xb6>
 80070ec:	290a      	cmp	r1, #10
 80070ee:	d004      	beq.n	80070fa <_puts_r+0xb6>
 80070f0:	6823      	ldr	r3, [r4, #0]
 80070f2:	1c5a      	adds	r2, r3, #1
 80070f4:	6022      	str	r2, [r4, #0]
 80070f6:	7019      	strb	r1, [r3, #0]
 80070f8:	e7c5      	b.n	8007086 <_puts_r+0x42>
 80070fa:	4622      	mov	r2, r4
 80070fc:	4628      	mov	r0, r5
 80070fe:	f000 ff27 	bl	8007f50 <__swbuf_r>
 8007102:	3001      	adds	r0, #1
 8007104:	d1bf      	bne.n	8007086 <_puts_r+0x42>
 8007106:	e7df      	b.n	80070c8 <_puts_r+0x84>
 8007108:	6823      	ldr	r3, [r4, #0]
 800710a:	250a      	movs	r5, #10
 800710c:	1c5a      	adds	r2, r3, #1
 800710e:	6022      	str	r2, [r4, #0]
 8007110:	701d      	strb	r5, [r3, #0]
 8007112:	e7db      	b.n	80070cc <_puts_r+0x88>
 8007114:	0800b47c 	.word	0x0800b47c
 8007118:	0800b49c 	.word	0x0800b49c
 800711c:	0800b45c 	.word	0x0800b45c

08007120 <puts>:
 8007120:	4b02      	ldr	r3, [pc, #8]	; (800712c <puts+0xc>)
 8007122:	4601      	mov	r1, r0
 8007124:	6818      	ldr	r0, [r3, #0]
 8007126:	f7ff bf8d 	b.w	8007044 <_puts_r>
 800712a:	bf00      	nop
 800712c:	2000003c 	.word	0x2000003c

08007130 <nanf>:
 8007130:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007138 <nanf+0x8>
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	7fc00000 	.word	0x7fc00000

0800713c <sniprintf>:
 800713c:	b40c      	push	{r2, r3}
 800713e:	b530      	push	{r4, r5, lr}
 8007140:	4b17      	ldr	r3, [pc, #92]	; (80071a0 <sniprintf+0x64>)
 8007142:	1e0c      	subs	r4, r1, #0
 8007144:	681d      	ldr	r5, [r3, #0]
 8007146:	b09d      	sub	sp, #116	; 0x74
 8007148:	da08      	bge.n	800715c <sniprintf+0x20>
 800714a:	238b      	movs	r3, #139	; 0x8b
 800714c:	602b      	str	r3, [r5, #0]
 800714e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007152:	b01d      	add	sp, #116	; 0x74
 8007154:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007158:	b002      	add	sp, #8
 800715a:	4770      	bx	lr
 800715c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007160:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007164:	bf14      	ite	ne
 8007166:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800716a:	4623      	moveq	r3, r4
 800716c:	9304      	str	r3, [sp, #16]
 800716e:	9307      	str	r3, [sp, #28]
 8007170:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007174:	9002      	str	r0, [sp, #8]
 8007176:	9006      	str	r0, [sp, #24]
 8007178:	f8ad 3016 	strh.w	r3, [sp, #22]
 800717c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800717e:	ab21      	add	r3, sp, #132	; 0x84
 8007180:	a902      	add	r1, sp, #8
 8007182:	4628      	mov	r0, r5
 8007184:	9301      	str	r3, [sp, #4]
 8007186:	f003 f9dd 	bl	800a544 <_svfiprintf_r>
 800718a:	1c43      	adds	r3, r0, #1
 800718c:	bfbc      	itt	lt
 800718e:	238b      	movlt	r3, #139	; 0x8b
 8007190:	602b      	strlt	r3, [r5, #0]
 8007192:	2c00      	cmp	r4, #0
 8007194:	d0dd      	beq.n	8007152 <sniprintf+0x16>
 8007196:	9b02      	ldr	r3, [sp, #8]
 8007198:	2200      	movs	r2, #0
 800719a:	701a      	strb	r2, [r3, #0]
 800719c:	e7d9      	b.n	8007152 <sniprintf+0x16>
 800719e:	bf00      	nop
 80071a0:	2000003c 	.word	0x2000003c

080071a4 <siprintf>:
 80071a4:	b40e      	push	{r1, r2, r3}
 80071a6:	b500      	push	{lr}
 80071a8:	b09c      	sub	sp, #112	; 0x70
 80071aa:	ab1d      	add	r3, sp, #116	; 0x74
 80071ac:	9002      	str	r0, [sp, #8]
 80071ae:	9006      	str	r0, [sp, #24]
 80071b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80071b4:	4809      	ldr	r0, [pc, #36]	; (80071dc <siprintf+0x38>)
 80071b6:	9107      	str	r1, [sp, #28]
 80071b8:	9104      	str	r1, [sp, #16]
 80071ba:	4909      	ldr	r1, [pc, #36]	; (80071e0 <siprintf+0x3c>)
 80071bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80071c0:	9105      	str	r1, [sp, #20]
 80071c2:	6800      	ldr	r0, [r0, #0]
 80071c4:	9301      	str	r3, [sp, #4]
 80071c6:	a902      	add	r1, sp, #8
 80071c8:	f003 f9bc 	bl	800a544 <_svfiprintf_r>
 80071cc:	9b02      	ldr	r3, [sp, #8]
 80071ce:	2200      	movs	r2, #0
 80071d0:	701a      	strb	r2, [r3, #0]
 80071d2:	b01c      	add	sp, #112	; 0x70
 80071d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80071d8:	b003      	add	sp, #12
 80071da:	4770      	bx	lr
 80071dc:	2000003c 	.word	0x2000003c
 80071e0:	ffff0208 	.word	0xffff0208

080071e4 <strcpy>:
 80071e4:	4603      	mov	r3, r0
 80071e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071ea:	f803 2b01 	strb.w	r2, [r3], #1
 80071ee:	2a00      	cmp	r2, #0
 80071f0:	d1f9      	bne.n	80071e6 <strcpy+0x2>
 80071f2:	4770      	bx	lr

080071f4 <sulp>:
 80071f4:	b570      	push	{r4, r5, r6, lr}
 80071f6:	4604      	mov	r4, r0
 80071f8:	460d      	mov	r5, r1
 80071fa:	ec45 4b10 	vmov	d0, r4, r5
 80071fe:	4616      	mov	r6, r2
 8007200:	f002 fefe 	bl	800a000 <__ulp>
 8007204:	ec51 0b10 	vmov	r0, r1, d0
 8007208:	b17e      	cbz	r6, 800722a <sulp+0x36>
 800720a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800720e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007212:	2b00      	cmp	r3, #0
 8007214:	dd09      	ble.n	800722a <sulp+0x36>
 8007216:	051b      	lsls	r3, r3, #20
 8007218:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800721c:	2400      	movs	r4, #0
 800721e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007222:	4622      	mov	r2, r4
 8007224:	462b      	mov	r3, r5
 8007226:	f7f9 f9f7 	bl	8000618 <__aeabi_dmul>
 800722a:	bd70      	pop	{r4, r5, r6, pc}
 800722c:	0000      	movs	r0, r0
	...

08007230 <_strtod_l>:
 8007230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007234:	ed2d 8b02 	vpush	{d8}
 8007238:	b09d      	sub	sp, #116	; 0x74
 800723a:	461f      	mov	r7, r3
 800723c:	2300      	movs	r3, #0
 800723e:	9318      	str	r3, [sp, #96]	; 0x60
 8007240:	4ba2      	ldr	r3, [pc, #648]	; (80074cc <_strtod_l+0x29c>)
 8007242:	9213      	str	r2, [sp, #76]	; 0x4c
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	9305      	str	r3, [sp, #20]
 8007248:	4604      	mov	r4, r0
 800724a:	4618      	mov	r0, r3
 800724c:	4688      	mov	r8, r1
 800724e:	f7f8 ffcf 	bl	80001f0 <strlen>
 8007252:	f04f 0a00 	mov.w	sl, #0
 8007256:	4605      	mov	r5, r0
 8007258:	f04f 0b00 	mov.w	fp, #0
 800725c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007260:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007262:	781a      	ldrb	r2, [r3, #0]
 8007264:	2a2b      	cmp	r2, #43	; 0x2b
 8007266:	d04e      	beq.n	8007306 <_strtod_l+0xd6>
 8007268:	d83b      	bhi.n	80072e2 <_strtod_l+0xb2>
 800726a:	2a0d      	cmp	r2, #13
 800726c:	d834      	bhi.n	80072d8 <_strtod_l+0xa8>
 800726e:	2a08      	cmp	r2, #8
 8007270:	d834      	bhi.n	80072dc <_strtod_l+0xac>
 8007272:	2a00      	cmp	r2, #0
 8007274:	d03e      	beq.n	80072f4 <_strtod_l+0xc4>
 8007276:	2300      	movs	r3, #0
 8007278:	930a      	str	r3, [sp, #40]	; 0x28
 800727a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800727c:	7833      	ldrb	r3, [r6, #0]
 800727e:	2b30      	cmp	r3, #48	; 0x30
 8007280:	f040 80b0 	bne.w	80073e4 <_strtod_l+0x1b4>
 8007284:	7873      	ldrb	r3, [r6, #1]
 8007286:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800728a:	2b58      	cmp	r3, #88	; 0x58
 800728c:	d168      	bne.n	8007360 <_strtod_l+0x130>
 800728e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007290:	9301      	str	r3, [sp, #4]
 8007292:	ab18      	add	r3, sp, #96	; 0x60
 8007294:	9702      	str	r7, [sp, #8]
 8007296:	9300      	str	r3, [sp, #0]
 8007298:	4a8d      	ldr	r2, [pc, #564]	; (80074d0 <_strtod_l+0x2a0>)
 800729a:	ab19      	add	r3, sp, #100	; 0x64
 800729c:	a917      	add	r1, sp, #92	; 0x5c
 800729e:	4620      	mov	r0, r4
 80072a0:	f001 ffae 	bl	8009200 <__gethex>
 80072a4:	f010 0707 	ands.w	r7, r0, #7
 80072a8:	4605      	mov	r5, r0
 80072aa:	d005      	beq.n	80072b8 <_strtod_l+0x88>
 80072ac:	2f06      	cmp	r7, #6
 80072ae:	d12c      	bne.n	800730a <_strtod_l+0xda>
 80072b0:	3601      	adds	r6, #1
 80072b2:	2300      	movs	r3, #0
 80072b4:	9617      	str	r6, [sp, #92]	; 0x5c
 80072b6:	930a      	str	r3, [sp, #40]	; 0x28
 80072b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f040 8590 	bne.w	8007de0 <_strtod_l+0xbb0>
 80072c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072c2:	b1eb      	cbz	r3, 8007300 <_strtod_l+0xd0>
 80072c4:	4652      	mov	r2, sl
 80072c6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80072ca:	ec43 2b10 	vmov	d0, r2, r3
 80072ce:	b01d      	add	sp, #116	; 0x74
 80072d0:	ecbd 8b02 	vpop	{d8}
 80072d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072d8:	2a20      	cmp	r2, #32
 80072da:	d1cc      	bne.n	8007276 <_strtod_l+0x46>
 80072dc:	3301      	adds	r3, #1
 80072de:	9317      	str	r3, [sp, #92]	; 0x5c
 80072e0:	e7be      	b.n	8007260 <_strtod_l+0x30>
 80072e2:	2a2d      	cmp	r2, #45	; 0x2d
 80072e4:	d1c7      	bne.n	8007276 <_strtod_l+0x46>
 80072e6:	2201      	movs	r2, #1
 80072e8:	920a      	str	r2, [sp, #40]	; 0x28
 80072ea:	1c5a      	adds	r2, r3, #1
 80072ec:	9217      	str	r2, [sp, #92]	; 0x5c
 80072ee:	785b      	ldrb	r3, [r3, #1]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d1c2      	bne.n	800727a <_strtod_l+0x4a>
 80072f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80072f6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	f040 856e 	bne.w	8007ddc <_strtod_l+0xbac>
 8007300:	4652      	mov	r2, sl
 8007302:	465b      	mov	r3, fp
 8007304:	e7e1      	b.n	80072ca <_strtod_l+0x9a>
 8007306:	2200      	movs	r2, #0
 8007308:	e7ee      	b.n	80072e8 <_strtod_l+0xb8>
 800730a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800730c:	b13a      	cbz	r2, 800731e <_strtod_l+0xee>
 800730e:	2135      	movs	r1, #53	; 0x35
 8007310:	a81a      	add	r0, sp, #104	; 0x68
 8007312:	f002 ff80 	bl	800a216 <__copybits>
 8007316:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007318:	4620      	mov	r0, r4
 800731a:	f002 fb3f 	bl	800999c <_Bfree>
 800731e:	3f01      	subs	r7, #1
 8007320:	2f04      	cmp	r7, #4
 8007322:	d806      	bhi.n	8007332 <_strtod_l+0x102>
 8007324:	e8df f007 	tbb	[pc, r7]
 8007328:	1714030a 	.word	0x1714030a
 800732c:	0a          	.byte	0x0a
 800732d:	00          	.byte	0x00
 800732e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007332:	0728      	lsls	r0, r5, #28
 8007334:	d5c0      	bpl.n	80072b8 <_strtod_l+0x88>
 8007336:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800733a:	e7bd      	b.n	80072b8 <_strtod_l+0x88>
 800733c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007340:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007342:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007346:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800734a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800734e:	e7f0      	b.n	8007332 <_strtod_l+0x102>
 8007350:	f8df b180 	ldr.w	fp, [pc, #384]	; 80074d4 <_strtod_l+0x2a4>
 8007354:	e7ed      	b.n	8007332 <_strtod_l+0x102>
 8007356:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800735a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800735e:	e7e8      	b.n	8007332 <_strtod_l+0x102>
 8007360:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007362:	1c5a      	adds	r2, r3, #1
 8007364:	9217      	str	r2, [sp, #92]	; 0x5c
 8007366:	785b      	ldrb	r3, [r3, #1]
 8007368:	2b30      	cmp	r3, #48	; 0x30
 800736a:	d0f9      	beq.n	8007360 <_strtod_l+0x130>
 800736c:	2b00      	cmp	r3, #0
 800736e:	d0a3      	beq.n	80072b8 <_strtod_l+0x88>
 8007370:	2301      	movs	r3, #1
 8007372:	f04f 0900 	mov.w	r9, #0
 8007376:	9304      	str	r3, [sp, #16]
 8007378:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800737a:	9308      	str	r3, [sp, #32]
 800737c:	f8cd 901c 	str.w	r9, [sp, #28]
 8007380:	464f      	mov	r7, r9
 8007382:	220a      	movs	r2, #10
 8007384:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007386:	7806      	ldrb	r6, [r0, #0]
 8007388:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800738c:	b2d9      	uxtb	r1, r3
 800738e:	2909      	cmp	r1, #9
 8007390:	d92a      	bls.n	80073e8 <_strtod_l+0x1b8>
 8007392:	9905      	ldr	r1, [sp, #20]
 8007394:	462a      	mov	r2, r5
 8007396:	f003 fa32 	bl	800a7fe <strncmp>
 800739a:	b398      	cbz	r0, 8007404 <_strtod_l+0x1d4>
 800739c:	2000      	movs	r0, #0
 800739e:	4632      	mov	r2, r6
 80073a0:	463d      	mov	r5, r7
 80073a2:	9005      	str	r0, [sp, #20]
 80073a4:	4603      	mov	r3, r0
 80073a6:	2a65      	cmp	r2, #101	; 0x65
 80073a8:	d001      	beq.n	80073ae <_strtod_l+0x17e>
 80073aa:	2a45      	cmp	r2, #69	; 0x45
 80073ac:	d118      	bne.n	80073e0 <_strtod_l+0x1b0>
 80073ae:	b91d      	cbnz	r5, 80073b8 <_strtod_l+0x188>
 80073b0:	9a04      	ldr	r2, [sp, #16]
 80073b2:	4302      	orrs	r2, r0
 80073b4:	d09e      	beq.n	80072f4 <_strtod_l+0xc4>
 80073b6:	2500      	movs	r5, #0
 80073b8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80073bc:	f108 0201 	add.w	r2, r8, #1
 80073c0:	9217      	str	r2, [sp, #92]	; 0x5c
 80073c2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80073c6:	2a2b      	cmp	r2, #43	; 0x2b
 80073c8:	d075      	beq.n	80074b6 <_strtod_l+0x286>
 80073ca:	2a2d      	cmp	r2, #45	; 0x2d
 80073cc:	d07b      	beq.n	80074c6 <_strtod_l+0x296>
 80073ce:	f04f 0c00 	mov.w	ip, #0
 80073d2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80073d6:	2909      	cmp	r1, #9
 80073d8:	f240 8082 	bls.w	80074e0 <_strtod_l+0x2b0>
 80073dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80073e0:	2600      	movs	r6, #0
 80073e2:	e09d      	b.n	8007520 <_strtod_l+0x2f0>
 80073e4:	2300      	movs	r3, #0
 80073e6:	e7c4      	b.n	8007372 <_strtod_l+0x142>
 80073e8:	2f08      	cmp	r7, #8
 80073ea:	bfd8      	it	le
 80073ec:	9907      	ldrle	r1, [sp, #28]
 80073ee:	f100 0001 	add.w	r0, r0, #1
 80073f2:	bfda      	itte	le
 80073f4:	fb02 3301 	mlale	r3, r2, r1, r3
 80073f8:	9307      	strle	r3, [sp, #28]
 80073fa:	fb02 3909 	mlagt	r9, r2, r9, r3
 80073fe:	3701      	adds	r7, #1
 8007400:	9017      	str	r0, [sp, #92]	; 0x5c
 8007402:	e7bf      	b.n	8007384 <_strtod_l+0x154>
 8007404:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007406:	195a      	adds	r2, r3, r5
 8007408:	9217      	str	r2, [sp, #92]	; 0x5c
 800740a:	5d5a      	ldrb	r2, [r3, r5]
 800740c:	2f00      	cmp	r7, #0
 800740e:	d037      	beq.n	8007480 <_strtod_l+0x250>
 8007410:	9005      	str	r0, [sp, #20]
 8007412:	463d      	mov	r5, r7
 8007414:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007418:	2b09      	cmp	r3, #9
 800741a:	d912      	bls.n	8007442 <_strtod_l+0x212>
 800741c:	2301      	movs	r3, #1
 800741e:	e7c2      	b.n	80073a6 <_strtod_l+0x176>
 8007420:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007422:	1c5a      	adds	r2, r3, #1
 8007424:	9217      	str	r2, [sp, #92]	; 0x5c
 8007426:	785a      	ldrb	r2, [r3, #1]
 8007428:	3001      	adds	r0, #1
 800742a:	2a30      	cmp	r2, #48	; 0x30
 800742c:	d0f8      	beq.n	8007420 <_strtod_l+0x1f0>
 800742e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007432:	2b08      	cmp	r3, #8
 8007434:	f200 84d9 	bhi.w	8007dea <_strtod_l+0xbba>
 8007438:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800743a:	9005      	str	r0, [sp, #20]
 800743c:	2000      	movs	r0, #0
 800743e:	9308      	str	r3, [sp, #32]
 8007440:	4605      	mov	r5, r0
 8007442:	3a30      	subs	r2, #48	; 0x30
 8007444:	f100 0301 	add.w	r3, r0, #1
 8007448:	d014      	beq.n	8007474 <_strtod_l+0x244>
 800744a:	9905      	ldr	r1, [sp, #20]
 800744c:	4419      	add	r1, r3
 800744e:	9105      	str	r1, [sp, #20]
 8007450:	462b      	mov	r3, r5
 8007452:	eb00 0e05 	add.w	lr, r0, r5
 8007456:	210a      	movs	r1, #10
 8007458:	4573      	cmp	r3, lr
 800745a:	d113      	bne.n	8007484 <_strtod_l+0x254>
 800745c:	182b      	adds	r3, r5, r0
 800745e:	2b08      	cmp	r3, #8
 8007460:	f105 0501 	add.w	r5, r5, #1
 8007464:	4405      	add	r5, r0
 8007466:	dc1c      	bgt.n	80074a2 <_strtod_l+0x272>
 8007468:	9907      	ldr	r1, [sp, #28]
 800746a:	230a      	movs	r3, #10
 800746c:	fb03 2301 	mla	r3, r3, r1, r2
 8007470:	9307      	str	r3, [sp, #28]
 8007472:	2300      	movs	r3, #0
 8007474:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007476:	1c51      	adds	r1, r2, #1
 8007478:	9117      	str	r1, [sp, #92]	; 0x5c
 800747a:	7852      	ldrb	r2, [r2, #1]
 800747c:	4618      	mov	r0, r3
 800747e:	e7c9      	b.n	8007414 <_strtod_l+0x1e4>
 8007480:	4638      	mov	r0, r7
 8007482:	e7d2      	b.n	800742a <_strtod_l+0x1fa>
 8007484:	2b08      	cmp	r3, #8
 8007486:	dc04      	bgt.n	8007492 <_strtod_l+0x262>
 8007488:	9e07      	ldr	r6, [sp, #28]
 800748a:	434e      	muls	r6, r1
 800748c:	9607      	str	r6, [sp, #28]
 800748e:	3301      	adds	r3, #1
 8007490:	e7e2      	b.n	8007458 <_strtod_l+0x228>
 8007492:	f103 0c01 	add.w	ip, r3, #1
 8007496:	f1bc 0f10 	cmp.w	ip, #16
 800749a:	bfd8      	it	le
 800749c:	fb01 f909 	mulle.w	r9, r1, r9
 80074a0:	e7f5      	b.n	800748e <_strtod_l+0x25e>
 80074a2:	2d10      	cmp	r5, #16
 80074a4:	bfdc      	itt	le
 80074a6:	230a      	movle	r3, #10
 80074a8:	fb03 2909 	mlale	r9, r3, r9, r2
 80074ac:	e7e1      	b.n	8007472 <_strtod_l+0x242>
 80074ae:	2300      	movs	r3, #0
 80074b0:	9305      	str	r3, [sp, #20]
 80074b2:	2301      	movs	r3, #1
 80074b4:	e77c      	b.n	80073b0 <_strtod_l+0x180>
 80074b6:	f04f 0c00 	mov.w	ip, #0
 80074ba:	f108 0202 	add.w	r2, r8, #2
 80074be:	9217      	str	r2, [sp, #92]	; 0x5c
 80074c0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80074c4:	e785      	b.n	80073d2 <_strtod_l+0x1a2>
 80074c6:	f04f 0c01 	mov.w	ip, #1
 80074ca:	e7f6      	b.n	80074ba <_strtod_l+0x28a>
 80074cc:	0800b524 	.word	0x0800b524
 80074d0:	0800b278 	.word	0x0800b278
 80074d4:	7ff00000 	.word	0x7ff00000
 80074d8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80074da:	1c51      	adds	r1, r2, #1
 80074dc:	9117      	str	r1, [sp, #92]	; 0x5c
 80074de:	7852      	ldrb	r2, [r2, #1]
 80074e0:	2a30      	cmp	r2, #48	; 0x30
 80074e2:	d0f9      	beq.n	80074d8 <_strtod_l+0x2a8>
 80074e4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80074e8:	2908      	cmp	r1, #8
 80074ea:	f63f af79 	bhi.w	80073e0 <_strtod_l+0x1b0>
 80074ee:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80074f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80074f4:	9206      	str	r2, [sp, #24]
 80074f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80074f8:	1c51      	adds	r1, r2, #1
 80074fa:	9117      	str	r1, [sp, #92]	; 0x5c
 80074fc:	7852      	ldrb	r2, [r2, #1]
 80074fe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007502:	2e09      	cmp	r6, #9
 8007504:	d937      	bls.n	8007576 <_strtod_l+0x346>
 8007506:	9e06      	ldr	r6, [sp, #24]
 8007508:	1b89      	subs	r1, r1, r6
 800750a:	2908      	cmp	r1, #8
 800750c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007510:	dc02      	bgt.n	8007518 <_strtod_l+0x2e8>
 8007512:	4576      	cmp	r6, lr
 8007514:	bfa8      	it	ge
 8007516:	4676      	movge	r6, lr
 8007518:	f1bc 0f00 	cmp.w	ip, #0
 800751c:	d000      	beq.n	8007520 <_strtod_l+0x2f0>
 800751e:	4276      	negs	r6, r6
 8007520:	2d00      	cmp	r5, #0
 8007522:	d14d      	bne.n	80075c0 <_strtod_l+0x390>
 8007524:	9904      	ldr	r1, [sp, #16]
 8007526:	4301      	orrs	r1, r0
 8007528:	f47f aec6 	bne.w	80072b8 <_strtod_l+0x88>
 800752c:	2b00      	cmp	r3, #0
 800752e:	f47f aee1 	bne.w	80072f4 <_strtod_l+0xc4>
 8007532:	2a69      	cmp	r2, #105	; 0x69
 8007534:	d027      	beq.n	8007586 <_strtod_l+0x356>
 8007536:	dc24      	bgt.n	8007582 <_strtod_l+0x352>
 8007538:	2a49      	cmp	r2, #73	; 0x49
 800753a:	d024      	beq.n	8007586 <_strtod_l+0x356>
 800753c:	2a4e      	cmp	r2, #78	; 0x4e
 800753e:	f47f aed9 	bne.w	80072f4 <_strtod_l+0xc4>
 8007542:	499f      	ldr	r1, [pc, #636]	; (80077c0 <_strtod_l+0x590>)
 8007544:	a817      	add	r0, sp, #92	; 0x5c
 8007546:	f002 f8b3 	bl	80096b0 <__match>
 800754a:	2800      	cmp	r0, #0
 800754c:	f43f aed2 	beq.w	80072f4 <_strtod_l+0xc4>
 8007550:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	2b28      	cmp	r3, #40	; 0x28
 8007556:	d12d      	bne.n	80075b4 <_strtod_l+0x384>
 8007558:	499a      	ldr	r1, [pc, #616]	; (80077c4 <_strtod_l+0x594>)
 800755a:	aa1a      	add	r2, sp, #104	; 0x68
 800755c:	a817      	add	r0, sp, #92	; 0x5c
 800755e:	f002 f8bb 	bl	80096d8 <__hexnan>
 8007562:	2805      	cmp	r0, #5
 8007564:	d126      	bne.n	80075b4 <_strtod_l+0x384>
 8007566:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007568:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800756c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007570:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007574:	e6a0      	b.n	80072b8 <_strtod_l+0x88>
 8007576:	210a      	movs	r1, #10
 8007578:	fb01 2e0e 	mla	lr, r1, lr, r2
 800757c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007580:	e7b9      	b.n	80074f6 <_strtod_l+0x2c6>
 8007582:	2a6e      	cmp	r2, #110	; 0x6e
 8007584:	e7db      	b.n	800753e <_strtod_l+0x30e>
 8007586:	4990      	ldr	r1, [pc, #576]	; (80077c8 <_strtod_l+0x598>)
 8007588:	a817      	add	r0, sp, #92	; 0x5c
 800758a:	f002 f891 	bl	80096b0 <__match>
 800758e:	2800      	cmp	r0, #0
 8007590:	f43f aeb0 	beq.w	80072f4 <_strtod_l+0xc4>
 8007594:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007596:	498d      	ldr	r1, [pc, #564]	; (80077cc <_strtod_l+0x59c>)
 8007598:	3b01      	subs	r3, #1
 800759a:	a817      	add	r0, sp, #92	; 0x5c
 800759c:	9317      	str	r3, [sp, #92]	; 0x5c
 800759e:	f002 f887 	bl	80096b0 <__match>
 80075a2:	b910      	cbnz	r0, 80075aa <_strtod_l+0x37a>
 80075a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075a6:	3301      	adds	r3, #1
 80075a8:	9317      	str	r3, [sp, #92]	; 0x5c
 80075aa:	f8df b230 	ldr.w	fp, [pc, #560]	; 80077dc <_strtod_l+0x5ac>
 80075ae:	f04f 0a00 	mov.w	sl, #0
 80075b2:	e681      	b.n	80072b8 <_strtod_l+0x88>
 80075b4:	4886      	ldr	r0, [pc, #536]	; (80077d0 <_strtod_l+0x5a0>)
 80075b6:	f003 f8c7 	bl	800a748 <nan>
 80075ba:	ec5b ab10 	vmov	sl, fp, d0
 80075be:	e67b      	b.n	80072b8 <_strtod_l+0x88>
 80075c0:	9b05      	ldr	r3, [sp, #20]
 80075c2:	9807      	ldr	r0, [sp, #28]
 80075c4:	1af3      	subs	r3, r6, r3
 80075c6:	2f00      	cmp	r7, #0
 80075c8:	bf08      	it	eq
 80075ca:	462f      	moveq	r7, r5
 80075cc:	2d10      	cmp	r5, #16
 80075ce:	9306      	str	r3, [sp, #24]
 80075d0:	46a8      	mov	r8, r5
 80075d2:	bfa8      	it	ge
 80075d4:	f04f 0810 	movge.w	r8, #16
 80075d8:	f7f8 ffa4 	bl	8000524 <__aeabi_ui2d>
 80075dc:	2d09      	cmp	r5, #9
 80075de:	4682      	mov	sl, r0
 80075e0:	468b      	mov	fp, r1
 80075e2:	dd13      	ble.n	800760c <_strtod_l+0x3dc>
 80075e4:	4b7b      	ldr	r3, [pc, #492]	; (80077d4 <_strtod_l+0x5a4>)
 80075e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80075ea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80075ee:	f7f9 f813 	bl	8000618 <__aeabi_dmul>
 80075f2:	4682      	mov	sl, r0
 80075f4:	4648      	mov	r0, r9
 80075f6:	468b      	mov	fp, r1
 80075f8:	f7f8 ff94 	bl	8000524 <__aeabi_ui2d>
 80075fc:	4602      	mov	r2, r0
 80075fe:	460b      	mov	r3, r1
 8007600:	4650      	mov	r0, sl
 8007602:	4659      	mov	r1, fp
 8007604:	f7f8 fe52 	bl	80002ac <__adddf3>
 8007608:	4682      	mov	sl, r0
 800760a:	468b      	mov	fp, r1
 800760c:	2d0f      	cmp	r5, #15
 800760e:	dc38      	bgt.n	8007682 <_strtod_l+0x452>
 8007610:	9b06      	ldr	r3, [sp, #24]
 8007612:	2b00      	cmp	r3, #0
 8007614:	f43f ae50 	beq.w	80072b8 <_strtod_l+0x88>
 8007618:	dd24      	ble.n	8007664 <_strtod_l+0x434>
 800761a:	2b16      	cmp	r3, #22
 800761c:	dc0b      	bgt.n	8007636 <_strtod_l+0x406>
 800761e:	496d      	ldr	r1, [pc, #436]	; (80077d4 <_strtod_l+0x5a4>)
 8007620:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007624:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007628:	4652      	mov	r2, sl
 800762a:	465b      	mov	r3, fp
 800762c:	f7f8 fff4 	bl	8000618 <__aeabi_dmul>
 8007630:	4682      	mov	sl, r0
 8007632:	468b      	mov	fp, r1
 8007634:	e640      	b.n	80072b8 <_strtod_l+0x88>
 8007636:	9a06      	ldr	r2, [sp, #24]
 8007638:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800763c:	4293      	cmp	r3, r2
 800763e:	db20      	blt.n	8007682 <_strtod_l+0x452>
 8007640:	4c64      	ldr	r4, [pc, #400]	; (80077d4 <_strtod_l+0x5a4>)
 8007642:	f1c5 050f 	rsb	r5, r5, #15
 8007646:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800764a:	4652      	mov	r2, sl
 800764c:	465b      	mov	r3, fp
 800764e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007652:	f7f8 ffe1 	bl	8000618 <__aeabi_dmul>
 8007656:	9b06      	ldr	r3, [sp, #24]
 8007658:	1b5d      	subs	r5, r3, r5
 800765a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800765e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007662:	e7e3      	b.n	800762c <_strtod_l+0x3fc>
 8007664:	9b06      	ldr	r3, [sp, #24]
 8007666:	3316      	adds	r3, #22
 8007668:	db0b      	blt.n	8007682 <_strtod_l+0x452>
 800766a:	9b05      	ldr	r3, [sp, #20]
 800766c:	1b9e      	subs	r6, r3, r6
 800766e:	4b59      	ldr	r3, [pc, #356]	; (80077d4 <_strtod_l+0x5a4>)
 8007670:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007674:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007678:	4650      	mov	r0, sl
 800767a:	4659      	mov	r1, fp
 800767c:	f7f9 f8f6 	bl	800086c <__aeabi_ddiv>
 8007680:	e7d6      	b.n	8007630 <_strtod_l+0x400>
 8007682:	9b06      	ldr	r3, [sp, #24]
 8007684:	eba5 0808 	sub.w	r8, r5, r8
 8007688:	4498      	add	r8, r3
 800768a:	f1b8 0f00 	cmp.w	r8, #0
 800768e:	dd74      	ble.n	800777a <_strtod_l+0x54a>
 8007690:	f018 030f 	ands.w	r3, r8, #15
 8007694:	d00a      	beq.n	80076ac <_strtod_l+0x47c>
 8007696:	494f      	ldr	r1, [pc, #316]	; (80077d4 <_strtod_l+0x5a4>)
 8007698:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800769c:	4652      	mov	r2, sl
 800769e:	465b      	mov	r3, fp
 80076a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076a4:	f7f8 ffb8 	bl	8000618 <__aeabi_dmul>
 80076a8:	4682      	mov	sl, r0
 80076aa:	468b      	mov	fp, r1
 80076ac:	f038 080f 	bics.w	r8, r8, #15
 80076b0:	d04f      	beq.n	8007752 <_strtod_l+0x522>
 80076b2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80076b6:	dd22      	ble.n	80076fe <_strtod_l+0x4ce>
 80076b8:	2500      	movs	r5, #0
 80076ba:	462e      	mov	r6, r5
 80076bc:	9507      	str	r5, [sp, #28]
 80076be:	9505      	str	r5, [sp, #20]
 80076c0:	2322      	movs	r3, #34	; 0x22
 80076c2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80077dc <_strtod_l+0x5ac>
 80076c6:	6023      	str	r3, [r4, #0]
 80076c8:	f04f 0a00 	mov.w	sl, #0
 80076cc:	9b07      	ldr	r3, [sp, #28]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f43f adf2 	beq.w	80072b8 <_strtod_l+0x88>
 80076d4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80076d6:	4620      	mov	r0, r4
 80076d8:	f002 f960 	bl	800999c <_Bfree>
 80076dc:	9905      	ldr	r1, [sp, #20]
 80076de:	4620      	mov	r0, r4
 80076e0:	f002 f95c 	bl	800999c <_Bfree>
 80076e4:	4631      	mov	r1, r6
 80076e6:	4620      	mov	r0, r4
 80076e8:	f002 f958 	bl	800999c <_Bfree>
 80076ec:	9907      	ldr	r1, [sp, #28]
 80076ee:	4620      	mov	r0, r4
 80076f0:	f002 f954 	bl	800999c <_Bfree>
 80076f4:	4629      	mov	r1, r5
 80076f6:	4620      	mov	r0, r4
 80076f8:	f002 f950 	bl	800999c <_Bfree>
 80076fc:	e5dc      	b.n	80072b8 <_strtod_l+0x88>
 80076fe:	4b36      	ldr	r3, [pc, #216]	; (80077d8 <_strtod_l+0x5a8>)
 8007700:	9304      	str	r3, [sp, #16]
 8007702:	2300      	movs	r3, #0
 8007704:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007708:	4650      	mov	r0, sl
 800770a:	4659      	mov	r1, fp
 800770c:	4699      	mov	r9, r3
 800770e:	f1b8 0f01 	cmp.w	r8, #1
 8007712:	dc21      	bgt.n	8007758 <_strtod_l+0x528>
 8007714:	b10b      	cbz	r3, 800771a <_strtod_l+0x4ea>
 8007716:	4682      	mov	sl, r0
 8007718:	468b      	mov	fp, r1
 800771a:	4b2f      	ldr	r3, [pc, #188]	; (80077d8 <_strtod_l+0x5a8>)
 800771c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007720:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007724:	4652      	mov	r2, sl
 8007726:	465b      	mov	r3, fp
 8007728:	e9d9 0100 	ldrd	r0, r1, [r9]
 800772c:	f7f8 ff74 	bl	8000618 <__aeabi_dmul>
 8007730:	4b2a      	ldr	r3, [pc, #168]	; (80077dc <_strtod_l+0x5ac>)
 8007732:	460a      	mov	r2, r1
 8007734:	400b      	ands	r3, r1
 8007736:	492a      	ldr	r1, [pc, #168]	; (80077e0 <_strtod_l+0x5b0>)
 8007738:	428b      	cmp	r3, r1
 800773a:	4682      	mov	sl, r0
 800773c:	d8bc      	bhi.n	80076b8 <_strtod_l+0x488>
 800773e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007742:	428b      	cmp	r3, r1
 8007744:	bf86      	itte	hi
 8007746:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80077e4 <_strtod_l+0x5b4>
 800774a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800774e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007752:	2300      	movs	r3, #0
 8007754:	9304      	str	r3, [sp, #16]
 8007756:	e084      	b.n	8007862 <_strtod_l+0x632>
 8007758:	f018 0f01 	tst.w	r8, #1
 800775c:	d005      	beq.n	800776a <_strtod_l+0x53a>
 800775e:	9b04      	ldr	r3, [sp, #16]
 8007760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007764:	f7f8 ff58 	bl	8000618 <__aeabi_dmul>
 8007768:	2301      	movs	r3, #1
 800776a:	9a04      	ldr	r2, [sp, #16]
 800776c:	3208      	adds	r2, #8
 800776e:	f109 0901 	add.w	r9, r9, #1
 8007772:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007776:	9204      	str	r2, [sp, #16]
 8007778:	e7c9      	b.n	800770e <_strtod_l+0x4de>
 800777a:	d0ea      	beq.n	8007752 <_strtod_l+0x522>
 800777c:	f1c8 0800 	rsb	r8, r8, #0
 8007780:	f018 020f 	ands.w	r2, r8, #15
 8007784:	d00a      	beq.n	800779c <_strtod_l+0x56c>
 8007786:	4b13      	ldr	r3, [pc, #76]	; (80077d4 <_strtod_l+0x5a4>)
 8007788:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800778c:	4650      	mov	r0, sl
 800778e:	4659      	mov	r1, fp
 8007790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007794:	f7f9 f86a 	bl	800086c <__aeabi_ddiv>
 8007798:	4682      	mov	sl, r0
 800779a:	468b      	mov	fp, r1
 800779c:	ea5f 1828 	movs.w	r8, r8, asr #4
 80077a0:	d0d7      	beq.n	8007752 <_strtod_l+0x522>
 80077a2:	f1b8 0f1f 	cmp.w	r8, #31
 80077a6:	dd1f      	ble.n	80077e8 <_strtod_l+0x5b8>
 80077a8:	2500      	movs	r5, #0
 80077aa:	462e      	mov	r6, r5
 80077ac:	9507      	str	r5, [sp, #28]
 80077ae:	9505      	str	r5, [sp, #20]
 80077b0:	2322      	movs	r3, #34	; 0x22
 80077b2:	f04f 0a00 	mov.w	sl, #0
 80077b6:	f04f 0b00 	mov.w	fp, #0
 80077ba:	6023      	str	r3, [r4, #0]
 80077bc:	e786      	b.n	80076cc <_strtod_l+0x49c>
 80077be:	bf00      	nop
 80077c0:	0800b249 	.word	0x0800b249
 80077c4:	0800b28c 	.word	0x0800b28c
 80077c8:	0800b241 	.word	0x0800b241
 80077cc:	0800b3cc 	.word	0x0800b3cc
 80077d0:	0800b6e0 	.word	0x0800b6e0
 80077d4:	0800b5c0 	.word	0x0800b5c0
 80077d8:	0800b598 	.word	0x0800b598
 80077dc:	7ff00000 	.word	0x7ff00000
 80077e0:	7ca00000 	.word	0x7ca00000
 80077e4:	7fefffff 	.word	0x7fefffff
 80077e8:	f018 0310 	ands.w	r3, r8, #16
 80077ec:	bf18      	it	ne
 80077ee:	236a      	movne	r3, #106	; 0x6a
 80077f0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007ba0 <_strtod_l+0x970>
 80077f4:	9304      	str	r3, [sp, #16]
 80077f6:	4650      	mov	r0, sl
 80077f8:	4659      	mov	r1, fp
 80077fa:	2300      	movs	r3, #0
 80077fc:	f018 0f01 	tst.w	r8, #1
 8007800:	d004      	beq.n	800780c <_strtod_l+0x5dc>
 8007802:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007806:	f7f8 ff07 	bl	8000618 <__aeabi_dmul>
 800780a:	2301      	movs	r3, #1
 800780c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007810:	f109 0908 	add.w	r9, r9, #8
 8007814:	d1f2      	bne.n	80077fc <_strtod_l+0x5cc>
 8007816:	b10b      	cbz	r3, 800781c <_strtod_l+0x5ec>
 8007818:	4682      	mov	sl, r0
 800781a:	468b      	mov	fp, r1
 800781c:	9b04      	ldr	r3, [sp, #16]
 800781e:	b1c3      	cbz	r3, 8007852 <_strtod_l+0x622>
 8007820:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007824:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007828:	2b00      	cmp	r3, #0
 800782a:	4659      	mov	r1, fp
 800782c:	dd11      	ble.n	8007852 <_strtod_l+0x622>
 800782e:	2b1f      	cmp	r3, #31
 8007830:	f340 8124 	ble.w	8007a7c <_strtod_l+0x84c>
 8007834:	2b34      	cmp	r3, #52	; 0x34
 8007836:	bfde      	ittt	le
 8007838:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800783c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8007840:	fa03 f202 	lslle.w	r2, r3, r2
 8007844:	f04f 0a00 	mov.w	sl, #0
 8007848:	bfcc      	ite	gt
 800784a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800784e:	ea02 0b01 	andle.w	fp, r2, r1
 8007852:	2200      	movs	r2, #0
 8007854:	2300      	movs	r3, #0
 8007856:	4650      	mov	r0, sl
 8007858:	4659      	mov	r1, fp
 800785a:	f7f9 f945 	bl	8000ae8 <__aeabi_dcmpeq>
 800785e:	2800      	cmp	r0, #0
 8007860:	d1a2      	bne.n	80077a8 <_strtod_l+0x578>
 8007862:	9b07      	ldr	r3, [sp, #28]
 8007864:	9300      	str	r3, [sp, #0]
 8007866:	9908      	ldr	r1, [sp, #32]
 8007868:	462b      	mov	r3, r5
 800786a:	463a      	mov	r2, r7
 800786c:	4620      	mov	r0, r4
 800786e:	f002 f8fd 	bl	8009a6c <__s2b>
 8007872:	9007      	str	r0, [sp, #28]
 8007874:	2800      	cmp	r0, #0
 8007876:	f43f af1f 	beq.w	80076b8 <_strtod_l+0x488>
 800787a:	9b05      	ldr	r3, [sp, #20]
 800787c:	1b9e      	subs	r6, r3, r6
 800787e:	9b06      	ldr	r3, [sp, #24]
 8007880:	2b00      	cmp	r3, #0
 8007882:	bfb4      	ite	lt
 8007884:	4633      	movlt	r3, r6
 8007886:	2300      	movge	r3, #0
 8007888:	930c      	str	r3, [sp, #48]	; 0x30
 800788a:	9b06      	ldr	r3, [sp, #24]
 800788c:	2500      	movs	r5, #0
 800788e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007892:	9312      	str	r3, [sp, #72]	; 0x48
 8007894:	462e      	mov	r6, r5
 8007896:	9b07      	ldr	r3, [sp, #28]
 8007898:	4620      	mov	r0, r4
 800789a:	6859      	ldr	r1, [r3, #4]
 800789c:	f002 f83e 	bl	800991c <_Balloc>
 80078a0:	9005      	str	r0, [sp, #20]
 80078a2:	2800      	cmp	r0, #0
 80078a4:	f43f af0c 	beq.w	80076c0 <_strtod_l+0x490>
 80078a8:	9b07      	ldr	r3, [sp, #28]
 80078aa:	691a      	ldr	r2, [r3, #16]
 80078ac:	3202      	adds	r2, #2
 80078ae:	f103 010c 	add.w	r1, r3, #12
 80078b2:	0092      	lsls	r2, r2, #2
 80078b4:	300c      	adds	r0, #12
 80078b6:	f7fe fd35 	bl	8006324 <memcpy>
 80078ba:	ec4b ab10 	vmov	d0, sl, fp
 80078be:	aa1a      	add	r2, sp, #104	; 0x68
 80078c0:	a919      	add	r1, sp, #100	; 0x64
 80078c2:	4620      	mov	r0, r4
 80078c4:	f002 fc18 	bl	800a0f8 <__d2b>
 80078c8:	ec4b ab18 	vmov	d8, sl, fp
 80078cc:	9018      	str	r0, [sp, #96]	; 0x60
 80078ce:	2800      	cmp	r0, #0
 80078d0:	f43f aef6 	beq.w	80076c0 <_strtod_l+0x490>
 80078d4:	2101      	movs	r1, #1
 80078d6:	4620      	mov	r0, r4
 80078d8:	f002 f962 	bl	8009ba0 <__i2b>
 80078dc:	4606      	mov	r6, r0
 80078de:	2800      	cmp	r0, #0
 80078e0:	f43f aeee 	beq.w	80076c0 <_strtod_l+0x490>
 80078e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80078e6:	9904      	ldr	r1, [sp, #16]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	bfab      	itete	ge
 80078ec:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80078ee:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80078f0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80078f2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80078f6:	bfac      	ite	ge
 80078f8:	eb03 0902 	addge.w	r9, r3, r2
 80078fc:	1ad7      	sublt	r7, r2, r3
 80078fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007900:	eba3 0801 	sub.w	r8, r3, r1
 8007904:	4490      	add	r8, r2
 8007906:	4ba1      	ldr	r3, [pc, #644]	; (8007b8c <_strtod_l+0x95c>)
 8007908:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800790c:	4598      	cmp	r8, r3
 800790e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007912:	f280 80c7 	bge.w	8007aa4 <_strtod_l+0x874>
 8007916:	eba3 0308 	sub.w	r3, r3, r8
 800791a:	2b1f      	cmp	r3, #31
 800791c:	eba2 0203 	sub.w	r2, r2, r3
 8007920:	f04f 0101 	mov.w	r1, #1
 8007924:	f300 80b1 	bgt.w	8007a8a <_strtod_l+0x85a>
 8007928:	fa01 f303 	lsl.w	r3, r1, r3
 800792c:	930d      	str	r3, [sp, #52]	; 0x34
 800792e:	2300      	movs	r3, #0
 8007930:	9308      	str	r3, [sp, #32]
 8007932:	eb09 0802 	add.w	r8, r9, r2
 8007936:	9b04      	ldr	r3, [sp, #16]
 8007938:	45c1      	cmp	r9, r8
 800793a:	4417      	add	r7, r2
 800793c:	441f      	add	r7, r3
 800793e:	464b      	mov	r3, r9
 8007940:	bfa8      	it	ge
 8007942:	4643      	movge	r3, r8
 8007944:	42bb      	cmp	r3, r7
 8007946:	bfa8      	it	ge
 8007948:	463b      	movge	r3, r7
 800794a:	2b00      	cmp	r3, #0
 800794c:	bfc2      	ittt	gt
 800794e:	eba8 0803 	subgt.w	r8, r8, r3
 8007952:	1aff      	subgt	r7, r7, r3
 8007954:	eba9 0903 	subgt.w	r9, r9, r3
 8007958:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800795a:	2b00      	cmp	r3, #0
 800795c:	dd17      	ble.n	800798e <_strtod_l+0x75e>
 800795e:	4631      	mov	r1, r6
 8007960:	461a      	mov	r2, r3
 8007962:	4620      	mov	r0, r4
 8007964:	f002 f9dc 	bl	8009d20 <__pow5mult>
 8007968:	4606      	mov	r6, r0
 800796a:	2800      	cmp	r0, #0
 800796c:	f43f aea8 	beq.w	80076c0 <_strtod_l+0x490>
 8007970:	4601      	mov	r1, r0
 8007972:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007974:	4620      	mov	r0, r4
 8007976:	f002 f929 	bl	8009bcc <__multiply>
 800797a:	900b      	str	r0, [sp, #44]	; 0x2c
 800797c:	2800      	cmp	r0, #0
 800797e:	f43f ae9f 	beq.w	80076c0 <_strtod_l+0x490>
 8007982:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007984:	4620      	mov	r0, r4
 8007986:	f002 f809 	bl	800999c <_Bfree>
 800798a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800798c:	9318      	str	r3, [sp, #96]	; 0x60
 800798e:	f1b8 0f00 	cmp.w	r8, #0
 8007992:	f300 808c 	bgt.w	8007aae <_strtod_l+0x87e>
 8007996:	9b06      	ldr	r3, [sp, #24]
 8007998:	2b00      	cmp	r3, #0
 800799a:	dd08      	ble.n	80079ae <_strtod_l+0x77e>
 800799c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800799e:	9905      	ldr	r1, [sp, #20]
 80079a0:	4620      	mov	r0, r4
 80079a2:	f002 f9bd 	bl	8009d20 <__pow5mult>
 80079a6:	9005      	str	r0, [sp, #20]
 80079a8:	2800      	cmp	r0, #0
 80079aa:	f43f ae89 	beq.w	80076c0 <_strtod_l+0x490>
 80079ae:	2f00      	cmp	r7, #0
 80079b0:	dd08      	ble.n	80079c4 <_strtod_l+0x794>
 80079b2:	9905      	ldr	r1, [sp, #20]
 80079b4:	463a      	mov	r2, r7
 80079b6:	4620      	mov	r0, r4
 80079b8:	f002 fa0c 	bl	8009dd4 <__lshift>
 80079bc:	9005      	str	r0, [sp, #20]
 80079be:	2800      	cmp	r0, #0
 80079c0:	f43f ae7e 	beq.w	80076c0 <_strtod_l+0x490>
 80079c4:	f1b9 0f00 	cmp.w	r9, #0
 80079c8:	dd08      	ble.n	80079dc <_strtod_l+0x7ac>
 80079ca:	4631      	mov	r1, r6
 80079cc:	464a      	mov	r2, r9
 80079ce:	4620      	mov	r0, r4
 80079d0:	f002 fa00 	bl	8009dd4 <__lshift>
 80079d4:	4606      	mov	r6, r0
 80079d6:	2800      	cmp	r0, #0
 80079d8:	f43f ae72 	beq.w	80076c0 <_strtod_l+0x490>
 80079dc:	9a05      	ldr	r2, [sp, #20]
 80079de:	9918      	ldr	r1, [sp, #96]	; 0x60
 80079e0:	4620      	mov	r0, r4
 80079e2:	f002 fa83 	bl	8009eec <__mdiff>
 80079e6:	4605      	mov	r5, r0
 80079e8:	2800      	cmp	r0, #0
 80079ea:	f43f ae69 	beq.w	80076c0 <_strtod_l+0x490>
 80079ee:	68c3      	ldr	r3, [r0, #12]
 80079f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80079f2:	2300      	movs	r3, #0
 80079f4:	60c3      	str	r3, [r0, #12]
 80079f6:	4631      	mov	r1, r6
 80079f8:	f002 fa5c 	bl	8009eb4 <__mcmp>
 80079fc:	2800      	cmp	r0, #0
 80079fe:	da60      	bge.n	8007ac2 <_strtod_l+0x892>
 8007a00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a02:	ea53 030a 	orrs.w	r3, r3, sl
 8007a06:	f040 8082 	bne.w	8007b0e <_strtod_l+0x8de>
 8007a0a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d17d      	bne.n	8007b0e <_strtod_l+0x8de>
 8007a12:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007a16:	0d1b      	lsrs	r3, r3, #20
 8007a18:	051b      	lsls	r3, r3, #20
 8007a1a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007a1e:	d976      	bls.n	8007b0e <_strtod_l+0x8de>
 8007a20:	696b      	ldr	r3, [r5, #20]
 8007a22:	b913      	cbnz	r3, 8007a2a <_strtod_l+0x7fa>
 8007a24:	692b      	ldr	r3, [r5, #16]
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	dd71      	ble.n	8007b0e <_strtod_l+0x8de>
 8007a2a:	4629      	mov	r1, r5
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	4620      	mov	r0, r4
 8007a30:	f002 f9d0 	bl	8009dd4 <__lshift>
 8007a34:	4631      	mov	r1, r6
 8007a36:	4605      	mov	r5, r0
 8007a38:	f002 fa3c 	bl	8009eb4 <__mcmp>
 8007a3c:	2800      	cmp	r0, #0
 8007a3e:	dd66      	ble.n	8007b0e <_strtod_l+0x8de>
 8007a40:	9904      	ldr	r1, [sp, #16]
 8007a42:	4a53      	ldr	r2, [pc, #332]	; (8007b90 <_strtod_l+0x960>)
 8007a44:	465b      	mov	r3, fp
 8007a46:	2900      	cmp	r1, #0
 8007a48:	f000 8081 	beq.w	8007b4e <_strtod_l+0x91e>
 8007a4c:	ea02 010b 	and.w	r1, r2, fp
 8007a50:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007a54:	dc7b      	bgt.n	8007b4e <_strtod_l+0x91e>
 8007a56:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007a5a:	f77f aea9 	ble.w	80077b0 <_strtod_l+0x580>
 8007a5e:	4b4d      	ldr	r3, [pc, #308]	; (8007b94 <_strtod_l+0x964>)
 8007a60:	4650      	mov	r0, sl
 8007a62:	4659      	mov	r1, fp
 8007a64:	2200      	movs	r2, #0
 8007a66:	f7f8 fdd7 	bl	8000618 <__aeabi_dmul>
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	4303      	orrs	r3, r0
 8007a6e:	bf08      	it	eq
 8007a70:	2322      	moveq	r3, #34	; 0x22
 8007a72:	4682      	mov	sl, r0
 8007a74:	468b      	mov	fp, r1
 8007a76:	bf08      	it	eq
 8007a78:	6023      	streq	r3, [r4, #0]
 8007a7a:	e62b      	b.n	80076d4 <_strtod_l+0x4a4>
 8007a7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a80:	fa02 f303 	lsl.w	r3, r2, r3
 8007a84:	ea03 0a0a 	and.w	sl, r3, sl
 8007a88:	e6e3      	b.n	8007852 <_strtod_l+0x622>
 8007a8a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007a8e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007a92:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007a96:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007a9a:	fa01 f308 	lsl.w	r3, r1, r8
 8007a9e:	9308      	str	r3, [sp, #32]
 8007aa0:	910d      	str	r1, [sp, #52]	; 0x34
 8007aa2:	e746      	b.n	8007932 <_strtod_l+0x702>
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	9308      	str	r3, [sp, #32]
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	930d      	str	r3, [sp, #52]	; 0x34
 8007aac:	e741      	b.n	8007932 <_strtod_l+0x702>
 8007aae:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007ab0:	4642      	mov	r2, r8
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	f002 f98e 	bl	8009dd4 <__lshift>
 8007ab8:	9018      	str	r0, [sp, #96]	; 0x60
 8007aba:	2800      	cmp	r0, #0
 8007abc:	f47f af6b 	bne.w	8007996 <_strtod_l+0x766>
 8007ac0:	e5fe      	b.n	80076c0 <_strtod_l+0x490>
 8007ac2:	465f      	mov	r7, fp
 8007ac4:	d16e      	bne.n	8007ba4 <_strtod_l+0x974>
 8007ac6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ac8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007acc:	b342      	cbz	r2, 8007b20 <_strtod_l+0x8f0>
 8007ace:	4a32      	ldr	r2, [pc, #200]	; (8007b98 <_strtod_l+0x968>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d128      	bne.n	8007b26 <_strtod_l+0x8f6>
 8007ad4:	9b04      	ldr	r3, [sp, #16]
 8007ad6:	4651      	mov	r1, sl
 8007ad8:	b1eb      	cbz	r3, 8007b16 <_strtod_l+0x8e6>
 8007ada:	4b2d      	ldr	r3, [pc, #180]	; (8007b90 <_strtod_l+0x960>)
 8007adc:	403b      	ands	r3, r7
 8007ade:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007ae2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ae6:	d819      	bhi.n	8007b1c <_strtod_l+0x8ec>
 8007ae8:	0d1b      	lsrs	r3, r3, #20
 8007aea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007aee:	fa02 f303 	lsl.w	r3, r2, r3
 8007af2:	4299      	cmp	r1, r3
 8007af4:	d117      	bne.n	8007b26 <_strtod_l+0x8f6>
 8007af6:	4b29      	ldr	r3, [pc, #164]	; (8007b9c <_strtod_l+0x96c>)
 8007af8:	429f      	cmp	r7, r3
 8007afa:	d102      	bne.n	8007b02 <_strtod_l+0x8d2>
 8007afc:	3101      	adds	r1, #1
 8007afe:	f43f addf 	beq.w	80076c0 <_strtod_l+0x490>
 8007b02:	4b23      	ldr	r3, [pc, #140]	; (8007b90 <_strtod_l+0x960>)
 8007b04:	403b      	ands	r3, r7
 8007b06:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007b0a:	f04f 0a00 	mov.w	sl, #0
 8007b0e:	9b04      	ldr	r3, [sp, #16]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1a4      	bne.n	8007a5e <_strtod_l+0x82e>
 8007b14:	e5de      	b.n	80076d4 <_strtod_l+0x4a4>
 8007b16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b1a:	e7ea      	b.n	8007af2 <_strtod_l+0x8c2>
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	e7e8      	b.n	8007af2 <_strtod_l+0x8c2>
 8007b20:	ea53 030a 	orrs.w	r3, r3, sl
 8007b24:	d08c      	beq.n	8007a40 <_strtod_l+0x810>
 8007b26:	9b08      	ldr	r3, [sp, #32]
 8007b28:	b1db      	cbz	r3, 8007b62 <_strtod_l+0x932>
 8007b2a:	423b      	tst	r3, r7
 8007b2c:	d0ef      	beq.n	8007b0e <_strtod_l+0x8de>
 8007b2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b30:	9a04      	ldr	r2, [sp, #16]
 8007b32:	4650      	mov	r0, sl
 8007b34:	4659      	mov	r1, fp
 8007b36:	b1c3      	cbz	r3, 8007b6a <_strtod_l+0x93a>
 8007b38:	f7ff fb5c 	bl	80071f4 <sulp>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	460b      	mov	r3, r1
 8007b40:	ec51 0b18 	vmov	r0, r1, d8
 8007b44:	f7f8 fbb2 	bl	80002ac <__adddf3>
 8007b48:	4682      	mov	sl, r0
 8007b4a:	468b      	mov	fp, r1
 8007b4c:	e7df      	b.n	8007b0e <_strtod_l+0x8de>
 8007b4e:	4013      	ands	r3, r2
 8007b50:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007b54:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007b58:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007b5c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007b60:	e7d5      	b.n	8007b0e <_strtod_l+0x8de>
 8007b62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b64:	ea13 0f0a 	tst.w	r3, sl
 8007b68:	e7e0      	b.n	8007b2c <_strtod_l+0x8fc>
 8007b6a:	f7ff fb43 	bl	80071f4 <sulp>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	460b      	mov	r3, r1
 8007b72:	ec51 0b18 	vmov	r0, r1, d8
 8007b76:	f7f8 fb97 	bl	80002a8 <__aeabi_dsub>
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	4682      	mov	sl, r0
 8007b80:	468b      	mov	fp, r1
 8007b82:	f7f8 ffb1 	bl	8000ae8 <__aeabi_dcmpeq>
 8007b86:	2800      	cmp	r0, #0
 8007b88:	d0c1      	beq.n	8007b0e <_strtod_l+0x8de>
 8007b8a:	e611      	b.n	80077b0 <_strtod_l+0x580>
 8007b8c:	fffffc02 	.word	0xfffffc02
 8007b90:	7ff00000 	.word	0x7ff00000
 8007b94:	39500000 	.word	0x39500000
 8007b98:	000fffff 	.word	0x000fffff
 8007b9c:	7fefffff 	.word	0x7fefffff
 8007ba0:	0800b2a0 	.word	0x0800b2a0
 8007ba4:	4631      	mov	r1, r6
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	f002 fb02 	bl	800a1b0 <__ratio>
 8007bac:	ec59 8b10 	vmov	r8, r9, d0
 8007bb0:	ee10 0a10 	vmov	r0, s0
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007bba:	4649      	mov	r1, r9
 8007bbc:	f7f8 ffa8 	bl	8000b10 <__aeabi_dcmple>
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	d07a      	beq.n	8007cba <_strtod_l+0xa8a>
 8007bc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d04a      	beq.n	8007c60 <_strtod_l+0xa30>
 8007bca:	4b95      	ldr	r3, [pc, #596]	; (8007e20 <_strtod_l+0xbf0>)
 8007bcc:	2200      	movs	r2, #0
 8007bce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007bd2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007e20 <_strtod_l+0xbf0>
 8007bd6:	f04f 0800 	mov.w	r8, #0
 8007bda:	4b92      	ldr	r3, [pc, #584]	; (8007e24 <_strtod_l+0xbf4>)
 8007bdc:	403b      	ands	r3, r7
 8007bde:	930d      	str	r3, [sp, #52]	; 0x34
 8007be0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007be2:	4b91      	ldr	r3, [pc, #580]	; (8007e28 <_strtod_l+0xbf8>)
 8007be4:	429a      	cmp	r2, r3
 8007be6:	f040 80b0 	bne.w	8007d4a <_strtod_l+0xb1a>
 8007bea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007bee:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007bf2:	ec4b ab10 	vmov	d0, sl, fp
 8007bf6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007bfa:	f002 fa01 	bl	800a000 <__ulp>
 8007bfe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007c02:	ec53 2b10 	vmov	r2, r3, d0
 8007c06:	f7f8 fd07 	bl	8000618 <__aeabi_dmul>
 8007c0a:	4652      	mov	r2, sl
 8007c0c:	465b      	mov	r3, fp
 8007c0e:	f7f8 fb4d 	bl	80002ac <__adddf3>
 8007c12:	460b      	mov	r3, r1
 8007c14:	4983      	ldr	r1, [pc, #524]	; (8007e24 <_strtod_l+0xbf4>)
 8007c16:	4a85      	ldr	r2, [pc, #532]	; (8007e2c <_strtod_l+0xbfc>)
 8007c18:	4019      	ands	r1, r3
 8007c1a:	4291      	cmp	r1, r2
 8007c1c:	4682      	mov	sl, r0
 8007c1e:	d960      	bls.n	8007ce2 <_strtod_l+0xab2>
 8007c20:	ee18 3a90 	vmov	r3, s17
 8007c24:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d104      	bne.n	8007c36 <_strtod_l+0xa06>
 8007c2c:	ee18 3a10 	vmov	r3, s16
 8007c30:	3301      	adds	r3, #1
 8007c32:	f43f ad45 	beq.w	80076c0 <_strtod_l+0x490>
 8007c36:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007e38 <_strtod_l+0xc08>
 8007c3a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007c3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007c40:	4620      	mov	r0, r4
 8007c42:	f001 feab 	bl	800999c <_Bfree>
 8007c46:	9905      	ldr	r1, [sp, #20]
 8007c48:	4620      	mov	r0, r4
 8007c4a:	f001 fea7 	bl	800999c <_Bfree>
 8007c4e:	4631      	mov	r1, r6
 8007c50:	4620      	mov	r0, r4
 8007c52:	f001 fea3 	bl	800999c <_Bfree>
 8007c56:	4629      	mov	r1, r5
 8007c58:	4620      	mov	r0, r4
 8007c5a:	f001 fe9f 	bl	800999c <_Bfree>
 8007c5e:	e61a      	b.n	8007896 <_strtod_l+0x666>
 8007c60:	f1ba 0f00 	cmp.w	sl, #0
 8007c64:	d11b      	bne.n	8007c9e <_strtod_l+0xa6e>
 8007c66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c6a:	b9f3      	cbnz	r3, 8007caa <_strtod_l+0xa7a>
 8007c6c:	4b6c      	ldr	r3, [pc, #432]	; (8007e20 <_strtod_l+0xbf0>)
 8007c6e:	2200      	movs	r2, #0
 8007c70:	4640      	mov	r0, r8
 8007c72:	4649      	mov	r1, r9
 8007c74:	f7f8 ff42 	bl	8000afc <__aeabi_dcmplt>
 8007c78:	b9d0      	cbnz	r0, 8007cb0 <_strtod_l+0xa80>
 8007c7a:	4640      	mov	r0, r8
 8007c7c:	4649      	mov	r1, r9
 8007c7e:	4b6c      	ldr	r3, [pc, #432]	; (8007e30 <_strtod_l+0xc00>)
 8007c80:	2200      	movs	r2, #0
 8007c82:	f7f8 fcc9 	bl	8000618 <__aeabi_dmul>
 8007c86:	4680      	mov	r8, r0
 8007c88:	4689      	mov	r9, r1
 8007c8a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007c8e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007c92:	9315      	str	r3, [sp, #84]	; 0x54
 8007c94:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007c98:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007c9c:	e79d      	b.n	8007bda <_strtod_l+0x9aa>
 8007c9e:	f1ba 0f01 	cmp.w	sl, #1
 8007ca2:	d102      	bne.n	8007caa <_strtod_l+0xa7a>
 8007ca4:	2f00      	cmp	r7, #0
 8007ca6:	f43f ad83 	beq.w	80077b0 <_strtod_l+0x580>
 8007caa:	4b62      	ldr	r3, [pc, #392]	; (8007e34 <_strtod_l+0xc04>)
 8007cac:	2200      	movs	r2, #0
 8007cae:	e78e      	b.n	8007bce <_strtod_l+0x99e>
 8007cb0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007e30 <_strtod_l+0xc00>
 8007cb4:	f04f 0800 	mov.w	r8, #0
 8007cb8:	e7e7      	b.n	8007c8a <_strtod_l+0xa5a>
 8007cba:	4b5d      	ldr	r3, [pc, #372]	; (8007e30 <_strtod_l+0xc00>)
 8007cbc:	4640      	mov	r0, r8
 8007cbe:	4649      	mov	r1, r9
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f7f8 fca9 	bl	8000618 <__aeabi_dmul>
 8007cc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cc8:	4680      	mov	r8, r0
 8007cca:	4689      	mov	r9, r1
 8007ccc:	b933      	cbnz	r3, 8007cdc <_strtod_l+0xaac>
 8007cce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cd2:	900e      	str	r0, [sp, #56]	; 0x38
 8007cd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cd6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007cda:	e7dd      	b.n	8007c98 <_strtod_l+0xa68>
 8007cdc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007ce0:	e7f9      	b.n	8007cd6 <_strtod_l+0xaa6>
 8007ce2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007ce6:	9b04      	ldr	r3, [sp, #16]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d1a8      	bne.n	8007c3e <_strtod_l+0xa0e>
 8007cec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007cf0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007cf2:	0d1b      	lsrs	r3, r3, #20
 8007cf4:	051b      	lsls	r3, r3, #20
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d1a1      	bne.n	8007c3e <_strtod_l+0xa0e>
 8007cfa:	4640      	mov	r0, r8
 8007cfc:	4649      	mov	r1, r9
 8007cfe:	f7f8 ffeb 	bl	8000cd8 <__aeabi_d2lz>
 8007d02:	f7f8 fc5b 	bl	80005bc <__aeabi_l2d>
 8007d06:	4602      	mov	r2, r0
 8007d08:	460b      	mov	r3, r1
 8007d0a:	4640      	mov	r0, r8
 8007d0c:	4649      	mov	r1, r9
 8007d0e:	f7f8 facb 	bl	80002a8 <__aeabi_dsub>
 8007d12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d18:	ea43 030a 	orr.w	r3, r3, sl
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	4680      	mov	r8, r0
 8007d20:	4689      	mov	r9, r1
 8007d22:	d055      	beq.n	8007dd0 <_strtod_l+0xba0>
 8007d24:	a336      	add	r3, pc, #216	; (adr r3, 8007e00 <_strtod_l+0xbd0>)
 8007d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2a:	f7f8 fee7 	bl	8000afc <__aeabi_dcmplt>
 8007d2e:	2800      	cmp	r0, #0
 8007d30:	f47f acd0 	bne.w	80076d4 <_strtod_l+0x4a4>
 8007d34:	a334      	add	r3, pc, #208	; (adr r3, 8007e08 <_strtod_l+0xbd8>)
 8007d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3a:	4640      	mov	r0, r8
 8007d3c:	4649      	mov	r1, r9
 8007d3e:	f7f8 fefb 	bl	8000b38 <__aeabi_dcmpgt>
 8007d42:	2800      	cmp	r0, #0
 8007d44:	f43f af7b 	beq.w	8007c3e <_strtod_l+0xa0e>
 8007d48:	e4c4      	b.n	80076d4 <_strtod_l+0x4a4>
 8007d4a:	9b04      	ldr	r3, [sp, #16]
 8007d4c:	b333      	cbz	r3, 8007d9c <_strtod_l+0xb6c>
 8007d4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d50:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007d54:	d822      	bhi.n	8007d9c <_strtod_l+0xb6c>
 8007d56:	a32e      	add	r3, pc, #184	; (adr r3, 8007e10 <_strtod_l+0xbe0>)
 8007d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5c:	4640      	mov	r0, r8
 8007d5e:	4649      	mov	r1, r9
 8007d60:	f7f8 fed6 	bl	8000b10 <__aeabi_dcmple>
 8007d64:	b1a0      	cbz	r0, 8007d90 <_strtod_l+0xb60>
 8007d66:	4649      	mov	r1, r9
 8007d68:	4640      	mov	r0, r8
 8007d6a:	f7f8 ff2d 	bl	8000bc8 <__aeabi_d2uiz>
 8007d6e:	2801      	cmp	r0, #1
 8007d70:	bf38      	it	cc
 8007d72:	2001      	movcc	r0, #1
 8007d74:	f7f8 fbd6 	bl	8000524 <__aeabi_ui2d>
 8007d78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d7a:	4680      	mov	r8, r0
 8007d7c:	4689      	mov	r9, r1
 8007d7e:	bb23      	cbnz	r3, 8007dca <_strtod_l+0xb9a>
 8007d80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d84:	9010      	str	r0, [sp, #64]	; 0x40
 8007d86:	9311      	str	r3, [sp, #68]	; 0x44
 8007d88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007d8c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d94:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007d98:	1a9b      	subs	r3, r3, r2
 8007d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007da0:	eeb0 0a48 	vmov.f32	s0, s16
 8007da4:	eef0 0a68 	vmov.f32	s1, s17
 8007da8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007dac:	f002 f928 	bl	800a000 <__ulp>
 8007db0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007db4:	ec53 2b10 	vmov	r2, r3, d0
 8007db8:	f7f8 fc2e 	bl	8000618 <__aeabi_dmul>
 8007dbc:	ec53 2b18 	vmov	r2, r3, d8
 8007dc0:	f7f8 fa74 	bl	80002ac <__adddf3>
 8007dc4:	4682      	mov	sl, r0
 8007dc6:	468b      	mov	fp, r1
 8007dc8:	e78d      	b.n	8007ce6 <_strtod_l+0xab6>
 8007dca:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007dce:	e7db      	b.n	8007d88 <_strtod_l+0xb58>
 8007dd0:	a311      	add	r3, pc, #68	; (adr r3, 8007e18 <_strtod_l+0xbe8>)
 8007dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd6:	f7f8 fe91 	bl	8000afc <__aeabi_dcmplt>
 8007dda:	e7b2      	b.n	8007d42 <_strtod_l+0xb12>
 8007ddc:	2300      	movs	r3, #0
 8007dde:	930a      	str	r3, [sp, #40]	; 0x28
 8007de0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007de2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007de4:	6013      	str	r3, [r2, #0]
 8007de6:	f7ff ba6b 	b.w	80072c0 <_strtod_l+0x90>
 8007dea:	2a65      	cmp	r2, #101	; 0x65
 8007dec:	f43f ab5f 	beq.w	80074ae <_strtod_l+0x27e>
 8007df0:	2a45      	cmp	r2, #69	; 0x45
 8007df2:	f43f ab5c 	beq.w	80074ae <_strtod_l+0x27e>
 8007df6:	2301      	movs	r3, #1
 8007df8:	f7ff bb94 	b.w	8007524 <_strtod_l+0x2f4>
 8007dfc:	f3af 8000 	nop.w
 8007e00:	94a03595 	.word	0x94a03595
 8007e04:	3fdfffff 	.word	0x3fdfffff
 8007e08:	35afe535 	.word	0x35afe535
 8007e0c:	3fe00000 	.word	0x3fe00000
 8007e10:	ffc00000 	.word	0xffc00000
 8007e14:	41dfffff 	.word	0x41dfffff
 8007e18:	94a03595 	.word	0x94a03595
 8007e1c:	3fcfffff 	.word	0x3fcfffff
 8007e20:	3ff00000 	.word	0x3ff00000
 8007e24:	7ff00000 	.word	0x7ff00000
 8007e28:	7fe00000 	.word	0x7fe00000
 8007e2c:	7c9fffff 	.word	0x7c9fffff
 8007e30:	3fe00000 	.word	0x3fe00000
 8007e34:	bff00000 	.word	0xbff00000
 8007e38:	7fefffff 	.word	0x7fefffff

08007e3c <_strtod_r>:
 8007e3c:	4b01      	ldr	r3, [pc, #4]	; (8007e44 <_strtod_r+0x8>)
 8007e3e:	f7ff b9f7 	b.w	8007230 <_strtod_l>
 8007e42:	bf00      	nop
 8007e44:	200000a4 	.word	0x200000a4

08007e48 <_strtol_l.constprop.0>:
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e4e:	d001      	beq.n	8007e54 <_strtol_l.constprop.0+0xc>
 8007e50:	2b24      	cmp	r3, #36	; 0x24
 8007e52:	d906      	bls.n	8007e62 <_strtol_l.constprop.0+0x1a>
 8007e54:	f7fe fa3c 	bl	80062d0 <__errno>
 8007e58:	2316      	movs	r3, #22
 8007e5a:	6003      	str	r3, [r0, #0]
 8007e5c:	2000      	movs	r0, #0
 8007e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e62:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007f48 <_strtol_l.constprop.0+0x100>
 8007e66:	460d      	mov	r5, r1
 8007e68:	462e      	mov	r6, r5
 8007e6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e6e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007e72:	f017 0708 	ands.w	r7, r7, #8
 8007e76:	d1f7      	bne.n	8007e68 <_strtol_l.constprop.0+0x20>
 8007e78:	2c2d      	cmp	r4, #45	; 0x2d
 8007e7a:	d132      	bne.n	8007ee2 <_strtol_l.constprop.0+0x9a>
 8007e7c:	782c      	ldrb	r4, [r5, #0]
 8007e7e:	2701      	movs	r7, #1
 8007e80:	1cb5      	adds	r5, r6, #2
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d05b      	beq.n	8007f3e <_strtol_l.constprop.0+0xf6>
 8007e86:	2b10      	cmp	r3, #16
 8007e88:	d109      	bne.n	8007e9e <_strtol_l.constprop.0+0x56>
 8007e8a:	2c30      	cmp	r4, #48	; 0x30
 8007e8c:	d107      	bne.n	8007e9e <_strtol_l.constprop.0+0x56>
 8007e8e:	782c      	ldrb	r4, [r5, #0]
 8007e90:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007e94:	2c58      	cmp	r4, #88	; 0x58
 8007e96:	d14d      	bne.n	8007f34 <_strtol_l.constprop.0+0xec>
 8007e98:	786c      	ldrb	r4, [r5, #1]
 8007e9a:	2310      	movs	r3, #16
 8007e9c:	3502      	adds	r5, #2
 8007e9e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007ea2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007ea6:	f04f 0c00 	mov.w	ip, #0
 8007eaa:	fbb8 f9f3 	udiv	r9, r8, r3
 8007eae:	4666      	mov	r6, ip
 8007eb0:	fb03 8a19 	mls	sl, r3, r9, r8
 8007eb4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007eb8:	f1be 0f09 	cmp.w	lr, #9
 8007ebc:	d816      	bhi.n	8007eec <_strtol_l.constprop.0+0xa4>
 8007ebe:	4674      	mov	r4, lr
 8007ec0:	42a3      	cmp	r3, r4
 8007ec2:	dd24      	ble.n	8007f0e <_strtol_l.constprop.0+0xc6>
 8007ec4:	f1bc 0f00 	cmp.w	ip, #0
 8007ec8:	db1e      	blt.n	8007f08 <_strtol_l.constprop.0+0xc0>
 8007eca:	45b1      	cmp	r9, r6
 8007ecc:	d31c      	bcc.n	8007f08 <_strtol_l.constprop.0+0xc0>
 8007ece:	d101      	bne.n	8007ed4 <_strtol_l.constprop.0+0x8c>
 8007ed0:	45a2      	cmp	sl, r4
 8007ed2:	db19      	blt.n	8007f08 <_strtol_l.constprop.0+0xc0>
 8007ed4:	fb06 4603 	mla	r6, r6, r3, r4
 8007ed8:	f04f 0c01 	mov.w	ip, #1
 8007edc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ee0:	e7e8      	b.n	8007eb4 <_strtol_l.constprop.0+0x6c>
 8007ee2:	2c2b      	cmp	r4, #43	; 0x2b
 8007ee4:	bf04      	itt	eq
 8007ee6:	782c      	ldrbeq	r4, [r5, #0]
 8007ee8:	1cb5      	addeq	r5, r6, #2
 8007eea:	e7ca      	b.n	8007e82 <_strtol_l.constprop.0+0x3a>
 8007eec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007ef0:	f1be 0f19 	cmp.w	lr, #25
 8007ef4:	d801      	bhi.n	8007efa <_strtol_l.constprop.0+0xb2>
 8007ef6:	3c37      	subs	r4, #55	; 0x37
 8007ef8:	e7e2      	b.n	8007ec0 <_strtol_l.constprop.0+0x78>
 8007efa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007efe:	f1be 0f19 	cmp.w	lr, #25
 8007f02:	d804      	bhi.n	8007f0e <_strtol_l.constprop.0+0xc6>
 8007f04:	3c57      	subs	r4, #87	; 0x57
 8007f06:	e7db      	b.n	8007ec0 <_strtol_l.constprop.0+0x78>
 8007f08:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007f0c:	e7e6      	b.n	8007edc <_strtol_l.constprop.0+0x94>
 8007f0e:	f1bc 0f00 	cmp.w	ip, #0
 8007f12:	da05      	bge.n	8007f20 <_strtol_l.constprop.0+0xd8>
 8007f14:	2322      	movs	r3, #34	; 0x22
 8007f16:	6003      	str	r3, [r0, #0]
 8007f18:	4646      	mov	r6, r8
 8007f1a:	b942      	cbnz	r2, 8007f2e <_strtol_l.constprop.0+0xe6>
 8007f1c:	4630      	mov	r0, r6
 8007f1e:	e79e      	b.n	8007e5e <_strtol_l.constprop.0+0x16>
 8007f20:	b107      	cbz	r7, 8007f24 <_strtol_l.constprop.0+0xdc>
 8007f22:	4276      	negs	r6, r6
 8007f24:	2a00      	cmp	r2, #0
 8007f26:	d0f9      	beq.n	8007f1c <_strtol_l.constprop.0+0xd4>
 8007f28:	f1bc 0f00 	cmp.w	ip, #0
 8007f2c:	d000      	beq.n	8007f30 <_strtol_l.constprop.0+0xe8>
 8007f2e:	1e69      	subs	r1, r5, #1
 8007f30:	6011      	str	r1, [r2, #0]
 8007f32:	e7f3      	b.n	8007f1c <_strtol_l.constprop.0+0xd4>
 8007f34:	2430      	movs	r4, #48	; 0x30
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1b1      	bne.n	8007e9e <_strtol_l.constprop.0+0x56>
 8007f3a:	2308      	movs	r3, #8
 8007f3c:	e7af      	b.n	8007e9e <_strtol_l.constprop.0+0x56>
 8007f3e:	2c30      	cmp	r4, #48	; 0x30
 8007f40:	d0a5      	beq.n	8007e8e <_strtol_l.constprop.0+0x46>
 8007f42:	230a      	movs	r3, #10
 8007f44:	e7ab      	b.n	8007e9e <_strtol_l.constprop.0+0x56>
 8007f46:	bf00      	nop
 8007f48:	0800b2c9 	.word	0x0800b2c9

08007f4c <_strtol_r>:
 8007f4c:	f7ff bf7c 	b.w	8007e48 <_strtol_l.constprop.0>

08007f50 <__swbuf_r>:
 8007f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f52:	460e      	mov	r6, r1
 8007f54:	4614      	mov	r4, r2
 8007f56:	4605      	mov	r5, r0
 8007f58:	b118      	cbz	r0, 8007f62 <__swbuf_r+0x12>
 8007f5a:	6983      	ldr	r3, [r0, #24]
 8007f5c:	b90b      	cbnz	r3, 8007f62 <__swbuf_r+0x12>
 8007f5e:	f001 f84b 	bl	8008ff8 <__sinit>
 8007f62:	4b21      	ldr	r3, [pc, #132]	; (8007fe8 <__swbuf_r+0x98>)
 8007f64:	429c      	cmp	r4, r3
 8007f66:	d12b      	bne.n	8007fc0 <__swbuf_r+0x70>
 8007f68:	686c      	ldr	r4, [r5, #4]
 8007f6a:	69a3      	ldr	r3, [r4, #24]
 8007f6c:	60a3      	str	r3, [r4, #8]
 8007f6e:	89a3      	ldrh	r3, [r4, #12]
 8007f70:	071a      	lsls	r2, r3, #28
 8007f72:	d52f      	bpl.n	8007fd4 <__swbuf_r+0x84>
 8007f74:	6923      	ldr	r3, [r4, #16]
 8007f76:	b36b      	cbz	r3, 8007fd4 <__swbuf_r+0x84>
 8007f78:	6923      	ldr	r3, [r4, #16]
 8007f7a:	6820      	ldr	r0, [r4, #0]
 8007f7c:	1ac0      	subs	r0, r0, r3
 8007f7e:	6963      	ldr	r3, [r4, #20]
 8007f80:	b2f6      	uxtb	r6, r6
 8007f82:	4283      	cmp	r3, r0
 8007f84:	4637      	mov	r7, r6
 8007f86:	dc04      	bgt.n	8007f92 <__swbuf_r+0x42>
 8007f88:	4621      	mov	r1, r4
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	f000 ffa0 	bl	8008ed0 <_fflush_r>
 8007f90:	bb30      	cbnz	r0, 8007fe0 <__swbuf_r+0x90>
 8007f92:	68a3      	ldr	r3, [r4, #8]
 8007f94:	3b01      	subs	r3, #1
 8007f96:	60a3      	str	r3, [r4, #8]
 8007f98:	6823      	ldr	r3, [r4, #0]
 8007f9a:	1c5a      	adds	r2, r3, #1
 8007f9c:	6022      	str	r2, [r4, #0]
 8007f9e:	701e      	strb	r6, [r3, #0]
 8007fa0:	6963      	ldr	r3, [r4, #20]
 8007fa2:	3001      	adds	r0, #1
 8007fa4:	4283      	cmp	r3, r0
 8007fa6:	d004      	beq.n	8007fb2 <__swbuf_r+0x62>
 8007fa8:	89a3      	ldrh	r3, [r4, #12]
 8007faa:	07db      	lsls	r3, r3, #31
 8007fac:	d506      	bpl.n	8007fbc <__swbuf_r+0x6c>
 8007fae:	2e0a      	cmp	r6, #10
 8007fb0:	d104      	bne.n	8007fbc <__swbuf_r+0x6c>
 8007fb2:	4621      	mov	r1, r4
 8007fb4:	4628      	mov	r0, r5
 8007fb6:	f000 ff8b 	bl	8008ed0 <_fflush_r>
 8007fba:	b988      	cbnz	r0, 8007fe0 <__swbuf_r+0x90>
 8007fbc:	4638      	mov	r0, r7
 8007fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fc0:	4b0a      	ldr	r3, [pc, #40]	; (8007fec <__swbuf_r+0x9c>)
 8007fc2:	429c      	cmp	r4, r3
 8007fc4:	d101      	bne.n	8007fca <__swbuf_r+0x7a>
 8007fc6:	68ac      	ldr	r4, [r5, #8]
 8007fc8:	e7cf      	b.n	8007f6a <__swbuf_r+0x1a>
 8007fca:	4b09      	ldr	r3, [pc, #36]	; (8007ff0 <__swbuf_r+0xa0>)
 8007fcc:	429c      	cmp	r4, r3
 8007fce:	bf08      	it	eq
 8007fd0:	68ec      	ldreq	r4, [r5, #12]
 8007fd2:	e7ca      	b.n	8007f6a <__swbuf_r+0x1a>
 8007fd4:	4621      	mov	r1, r4
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	f000 f80c 	bl	8007ff4 <__swsetup_r>
 8007fdc:	2800      	cmp	r0, #0
 8007fde:	d0cb      	beq.n	8007f78 <__swbuf_r+0x28>
 8007fe0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007fe4:	e7ea      	b.n	8007fbc <__swbuf_r+0x6c>
 8007fe6:	bf00      	nop
 8007fe8:	0800b47c 	.word	0x0800b47c
 8007fec:	0800b49c 	.word	0x0800b49c
 8007ff0:	0800b45c 	.word	0x0800b45c

08007ff4 <__swsetup_r>:
 8007ff4:	4b32      	ldr	r3, [pc, #200]	; (80080c0 <__swsetup_r+0xcc>)
 8007ff6:	b570      	push	{r4, r5, r6, lr}
 8007ff8:	681d      	ldr	r5, [r3, #0]
 8007ffa:	4606      	mov	r6, r0
 8007ffc:	460c      	mov	r4, r1
 8007ffe:	b125      	cbz	r5, 800800a <__swsetup_r+0x16>
 8008000:	69ab      	ldr	r3, [r5, #24]
 8008002:	b913      	cbnz	r3, 800800a <__swsetup_r+0x16>
 8008004:	4628      	mov	r0, r5
 8008006:	f000 fff7 	bl	8008ff8 <__sinit>
 800800a:	4b2e      	ldr	r3, [pc, #184]	; (80080c4 <__swsetup_r+0xd0>)
 800800c:	429c      	cmp	r4, r3
 800800e:	d10f      	bne.n	8008030 <__swsetup_r+0x3c>
 8008010:	686c      	ldr	r4, [r5, #4]
 8008012:	89a3      	ldrh	r3, [r4, #12]
 8008014:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008018:	0719      	lsls	r1, r3, #28
 800801a:	d42c      	bmi.n	8008076 <__swsetup_r+0x82>
 800801c:	06dd      	lsls	r5, r3, #27
 800801e:	d411      	bmi.n	8008044 <__swsetup_r+0x50>
 8008020:	2309      	movs	r3, #9
 8008022:	6033      	str	r3, [r6, #0]
 8008024:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008028:	81a3      	strh	r3, [r4, #12]
 800802a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800802e:	e03e      	b.n	80080ae <__swsetup_r+0xba>
 8008030:	4b25      	ldr	r3, [pc, #148]	; (80080c8 <__swsetup_r+0xd4>)
 8008032:	429c      	cmp	r4, r3
 8008034:	d101      	bne.n	800803a <__swsetup_r+0x46>
 8008036:	68ac      	ldr	r4, [r5, #8]
 8008038:	e7eb      	b.n	8008012 <__swsetup_r+0x1e>
 800803a:	4b24      	ldr	r3, [pc, #144]	; (80080cc <__swsetup_r+0xd8>)
 800803c:	429c      	cmp	r4, r3
 800803e:	bf08      	it	eq
 8008040:	68ec      	ldreq	r4, [r5, #12]
 8008042:	e7e6      	b.n	8008012 <__swsetup_r+0x1e>
 8008044:	0758      	lsls	r0, r3, #29
 8008046:	d512      	bpl.n	800806e <__swsetup_r+0x7a>
 8008048:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800804a:	b141      	cbz	r1, 800805e <__swsetup_r+0x6a>
 800804c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008050:	4299      	cmp	r1, r3
 8008052:	d002      	beq.n	800805a <__swsetup_r+0x66>
 8008054:	4630      	mov	r0, r6
 8008056:	f002 f939 	bl	800a2cc <_free_r>
 800805a:	2300      	movs	r3, #0
 800805c:	6363      	str	r3, [r4, #52]	; 0x34
 800805e:	89a3      	ldrh	r3, [r4, #12]
 8008060:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008064:	81a3      	strh	r3, [r4, #12]
 8008066:	2300      	movs	r3, #0
 8008068:	6063      	str	r3, [r4, #4]
 800806a:	6923      	ldr	r3, [r4, #16]
 800806c:	6023      	str	r3, [r4, #0]
 800806e:	89a3      	ldrh	r3, [r4, #12]
 8008070:	f043 0308 	orr.w	r3, r3, #8
 8008074:	81a3      	strh	r3, [r4, #12]
 8008076:	6923      	ldr	r3, [r4, #16]
 8008078:	b94b      	cbnz	r3, 800808e <__swsetup_r+0x9a>
 800807a:	89a3      	ldrh	r3, [r4, #12]
 800807c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008084:	d003      	beq.n	800808e <__swsetup_r+0x9a>
 8008086:	4621      	mov	r1, r4
 8008088:	4630      	mov	r0, r6
 800808a:	f001 fbed 	bl	8009868 <__smakebuf_r>
 800808e:	89a0      	ldrh	r0, [r4, #12]
 8008090:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008094:	f010 0301 	ands.w	r3, r0, #1
 8008098:	d00a      	beq.n	80080b0 <__swsetup_r+0xbc>
 800809a:	2300      	movs	r3, #0
 800809c:	60a3      	str	r3, [r4, #8]
 800809e:	6963      	ldr	r3, [r4, #20]
 80080a0:	425b      	negs	r3, r3
 80080a2:	61a3      	str	r3, [r4, #24]
 80080a4:	6923      	ldr	r3, [r4, #16]
 80080a6:	b943      	cbnz	r3, 80080ba <__swsetup_r+0xc6>
 80080a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80080ac:	d1ba      	bne.n	8008024 <__swsetup_r+0x30>
 80080ae:	bd70      	pop	{r4, r5, r6, pc}
 80080b0:	0781      	lsls	r1, r0, #30
 80080b2:	bf58      	it	pl
 80080b4:	6963      	ldrpl	r3, [r4, #20]
 80080b6:	60a3      	str	r3, [r4, #8]
 80080b8:	e7f4      	b.n	80080a4 <__swsetup_r+0xb0>
 80080ba:	2000      	movs	r0, #0
 80080bc:	e7f7      	b.n	80080ae <__swsetup_r+0xba>
 80080be:	bf00      	nop
 80080c0:	2000003c 	.word	0x2000003c
 80080c4:	0800b47c 	.word	0x0800b47c
 80080c8:	0800b49c 	.word	0x0800b49c
 80080cc:	0800b45c 	.word	0x0800b45c

080080d0 <quorem>:
 80080d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d4:	6903      	ldr	r3, [r0, #16]
 80080d6:	690c      	ldr	r4, [r1, #16]
 80080d8:	42a3      	cmp	r3, r4
 80080da:	4607      	mov	r7, r0
 80080dc:	f2c0 8081 	blt.w	80081e2 <quorem+0x112>
 80080e0:	3c01      	subs	r4, #1
 80080e2:	f101 0814 	add.w	r8, r1, #20
 80080e6:	f100 0514 	add.w	r5, r0, #20
 80080ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080ee:	9301      	str	r3, [sp, #4]
 80080f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80080f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080f8:	3301      	adds	r3, #1
 80080fa:	429a      	cmp	r2, r3
 80080fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008100:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008104:	fbb2 f6f3 	udiv	r6, r2, r3
 8008108:	d331      	bcc.n	800816e <quorem+0x9e>
 800810a:	f04f 0e00 	mov.w	lr, #0
 800810e:	4640      	mov	r0, r8
 8008110:	46ac      	mov	ip, r5
 8008112:	46f2      	mov	sl, lr
 8008114:	f850 2b04 	ldr.w	r2, [r0], #4
 8008118:	b293      	uxth	r3, r2
 800811a:	fb06 e303 	mla	r3, r6, r3, lr
 800811e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008122:	b29b      	uxth	r3, r3
 8008124:	ebaa 0303 	sub.w	r3, sl, r3
 8008128:	f8dc a000 	ldr.w	sl, [ip]
 800812c:	0c12      	lsrs	r2, r2, #16
 800812e:	fa13 f38a 	uxtah	r3, r3, sl
 8008132:	fb06 e202 	mla	r2, r6, r2, lr
 8008136:	9300      	str	r3, [sp, #0]
 8008138:	9b00      	ldr	r3, [sp, #0]
 800813a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800813e:	b292      	uxth	r2, r2
 8008140:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008144:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008148:	f8bd 3000 	ldrh.w	r3, [sp]
 800814c:	4581      	cmp	r9, r0
 800814e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008152:	f84c 3b04 	str.w	r3, [ip], #4
 8008156:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800815a:	d2db      	bcs.n	8008114 <quorem+0x44>
 800815c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008160:	b92b      	cbnz	r3, 800816e <quorem+0x9e>
 8008162:	9b01      	ldr	r3, [sp, #4]
 8008164:	3b04      	subs	r3, #4
 8008166:	429d      	cmp	r5, r3
 8008168:	461a      	mov	r2, r3
 800816a:	d32e      	bcc.n	80081ca <quorem+0xfa>
 800816c:	613c      	str	r4, [r7, #16]
 800816e:	4638      	mov	r0, r7
 8008170:	f001 fea0 	bl	8009eb4 <__mcmp>
 8008174:	2800      	cmp	r0, #0
 8008176:	db24      	blt.n	80081c2 <quorem+0xf2>
 8008178:	3601      	adds	r6, #1
 800817a:	4628      	mov	r0, r5
 800817c:	f04f 0c00 	mov.w	ip, #0
 8008180:	f858 2b04 	ldr.w	r2, [r8], #4
 8008184:	f8d0 e000 	ldr.w	lr, [r0]
 8008188:	b293      	uxth	r3, r2
 800818a:	ebac 0303 	sub.w	r3, ip, r3
 800818e:	0c12      	lsrs	r2, r2, #16
 8008190:	fa13 f38e 	uxtah	r3, r3, lr
 8008194:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008198:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800819c:	b29b      	uxth	r3, r3
 800819e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081a2:	45c1      	cmp	r9, r8
 80081a4:	f840 3b04 	str.w	r3, [r0], #4
 80081a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80081ac:	d2e8      	bcs.n	8008180 <quorem+0xb0>
 80081ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081b6:	b922      	cbnz	r2, 80081c2 <quorem+0xf2>
 80081b8:	3b04      	subs	r3, #4
 80081ba:	429d      	cmp	r5, r3
 80081bc:	461a      	mov	r2, r3
 80081be:	d30a      	bcc.n	80081d6 <quorem+0x106>
 80081c0:	613c      	str	r4, [r7, #16]
 80081c2:	4630      	mov	r0, r6
 80081c4:	b003      	add	sp, #12
 80081c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ca:	6812      	ldr	r2, [r2, #0]
 80081cc:	3b04      	subs	r3, #4
 80081ce:	2a00      	cmp	r2, #0
 80081d0:	d1cc      	bne.n	800816c <quorem+0x9c>
 80081d2:	3c01      	subs	r4, #1
 80081d4:	e7c7      	b.n	8008166 <quorem+0x96>
 80081d6:	6812      	ldr	r2, [r2, #0]
 80081d8:	3b04      	subs	r3, #4
 80081da:	2a00      	cmp	r2, #0
 80081dc:	d1f0      	bne.n	80081c0 <quorem+0xf0>
 80081de:	3c01      	subs	r4, #1
 80081e0:	e7eb      	b.n	80081ba <quorem+0xea>
 80081e2:	2000      	movs	r0, #0
 80081e4:	e7ee      	b.n	80081c4 <quorem+0xf4>
	...

080081e8 <_dtoa_r>:
 80081e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ec:	ed2d 8b04 	vpush	{d8-d9}
 80081f0:	ec57 6b10 	vmov	r6, r7, d0
 80081f4:	b093      	sub	sp, #76	; 0x4c
 80081f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80081f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80081fc:	9106      	str	r1, [sp, #24]
 80081fe:	ee10 aa10 	vmov	sl, s0
 8008202:	4604      	mov	r4, r0
 8008204:	9209      	str	r2, [sp, #36]	; 0x24
 8008206:	930c      	str	r3, [sp, #48]	; 0x30
 8008208:	46bb      	mov	fp, r7
 800820a:	b975      	cbnz	r5, 800822a <_dtoa_r+0x42>
 800820c:	2010      	movs	r0, #16
 800820e:	f001 fb6b 	bl	80098e8 <malloc>
 8008212:	4602      	mov	r2, r0
 8008214:	6260      	str	r0, [r4, #36]	; 0x24
 8008216:	b920      	cbnz	r0, 8008222 <_dtoa_r+0x3a>
 8008218:	4ba7      	ldr	r3, [pc, #668]	; (80084b8 <_dtoa_r+0x2d0>)
 800821a:	21ea      	movs	r1, #234	; 0xea
 800821c:	48a7      	ldr	r0, [pc, #668]	; (80084bc <_dtoa_r+0x2d4>)
 800821e:	f002 fb21 	bl	800a864 <__assert_func>
 8008222:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008226:	6005      	str	r5, [r0, #0]
 8008228:	60c5      	str	r5, [r0, #12]
 800822a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800822c:	6819      	ldr	r1, [r3, #0]
 800822e:	b151      	cbz	r1, 8008246 <_dtoa_r+0x5e>
 8008230:	685a      	ldr	r2, [r3, #4]
 8008232:	604a      	str	r2, [r1, #4]
 8008234:	2301      	movs	r3, #1
 8008236:	4093      	lsls	r3, r2
 8008238:	608b      	str	r3, [r1, #8]
 800823a:	4620      	mov	r0, r4
 800823c:	f001 fbae 	bl	800999c <_Bfree>
 8008240:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008242:	2200      	movs	r2, #0
 8008244:	601a      	str	r2, [r3, #0]
 8008246:	1e3b      	subs	r3, r7, #0
 8008248:	bfaa      	itet	ge
 800824a:	2300      	movge	r3, #0
 800824c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008250:	f8c8 3000 	strge.w	r3, [r8]
 8008254:	4b9a      	ldr	r3, [pc, #616]	; (80084c0 <_dtoa_r+0x2d8>)
 8008256:	bfbc      	itt	lt
 8008258:	2201      	movlt	r2, #1
 800825a:	f8c8 2000 	strlt.w	r2, [r8]
 800825e:	ea33 030b 	bics.w	r3, r3, fp
 8008262:	d11b      	bne.n	800829c <_dtoa_r+0xb4>
 8008264:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008266:	f242 730f 	movw	r3, #9999	; 0x270f
 800826a:	6013      	str	r3, [r2, #0]
 800826c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008270:	4333      	orrs	r3, r6
 8008272:	f000 8592 	beq.w	8008d9a <_dtoa_r+0xbb2>
 8008276:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008278:	b963      	cbnz	r3, 8008294 <_dtoa_r+0xac>
 800827a:	4b92      	ldr	r3, [pc, #584]	; (80084c4 <_dtoa_r+0x2dc>)
 800827c:	e022      	b.n	80082c4 <_dtoa_r+0xdc>
 800827e:	4b92      	ldr	r3, [pc, #584]	; (80084c8 <_dtoa_r+0x2e0>)
 8008280:	9301      	str	r3, [sp, #4]
 8008282:	3308      	adds	r3, #8
 8008284:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008286:	6013      	str	r3, [r2, #0]
 8008288:	9801      	ldr	r0, [sp, #4]
 800828a:	b013      	add	sp, #76	; 0x4c
 800828c:	ecbd 8b04 	vpop	{d8-d9}
 8008290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008294:	4b8b      	ldr	r3, [pc, #556]	; (80084c4 <_dtoa_r+0x2dc>)
 8008296:	9301      	str	r3, [sp, #4]
 8008298:	3303      	adds	r3, #3
 800829a:	e7f3      	b.n	8008284 <_dtoa_r+0x9c>
 800829c:	2200      	movs	r2, #0
 800829e:	2300      	movs	r3, #0
 80082a0:	4650      	mov	r0, sl
 80082a2:	4659      	mov	r1, fp
 80082a4:	f7f8 fc20 	bl	8000ae8 <__aeabi_dcmpeq>
 80082a8:	ec4b ab19 	vmov	d9, sl, fp
 80082ac:	4680      	mov	r8, r0
 80082ae:	b158      	cbz	r0, 80082c8 <_dtoa_r+0xe0>
 80082b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082b2:	2301      	movs	r3, #1
 80082b4:	6013      	str	r3, [r2, #0]
 80082b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	f000 856b 	beq.w	8008d94 <_dtoa_r+0xbac>
 80082be:	4883      	ldr	r0, [pc, #524]	; (80084cc <_dtoa_r+0x2e4>)
 80082c0:	6018      	str	r0, [r3, #0]
 80082c2:	1e43      	subs	r3, r0, #1
 80082c4:	9301      	str	r3, [sp, #4]
 80082c6:	e7df      	b.n	8008288 <_dtoa_r+0xa0>
 80082c8:	ec4b ab10 	vmov	d0, sl, fp
 80082cc:	aa10      	add	r2, sp, #64	; 0x40
 80082ce:	a911      	add	r1, sp, #68	; 0x44
 80082d0:	4620      	mov	r0, r4
 80082d2:	f001 ff11 	bl	800a0f8 <__d2b>
 80082d6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80082da:	ee08 0a10 	vmov	s16, r0
 80082de:	2d00      	cmp	r5, #0
 80082e0:	f000 8084 	beq.w	80083ec <_dtoa_r+0x204>
 80082e4:	ee19 3a90 	vmov	r3, s19
 80082e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082ec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80082f0:	4656      	mov	r6, sl
 80082f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80082f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80082fa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80082fe:	4b74      	ldr	r3, [pc, #464]	; (80084d0 <_dtoa_r+0x2e8>)
 8008300:	2200      	movs	r2, #0
 8008302:	4630      	mov	r0, r6
 8008304:	4639      	mov	r1, r7
 8008306:	f7f7 ffcf 	bl	80002a8 <__aeabi_dsub>
 800830a:	a365      	add	r3, pc, #404	; (adr r3, 80084a0 <_dtoa_r+0x2b8>)
 800830c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008310:	f7f8 f982 	bl	8000618 <__aeabi_dmul>
 8008314:	a364      	add	r3, pc, #400	; (adr r3, 80084a8 <_dtoa_r+0x2c0>)
 8008316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831a:	f7f7 ffc7 	bl	80002ac <__adddf3>
 800831e:	4606      	mov	r6, r0
 8008320:	4628      	mov	r0, r5
 8008322:	460f      	mov	r7, r1
 8008324:	f7f8 f90e 	bl	8000544 <__aeabi_i2d>
 8008328:	a361      	add	r3, pc, #388	; (adr r3, 80084b0 <_dtoa_r+0x2c8>)
 800832a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832e:	f7f8 f973 	bl	8000618 <__aeabi_dmul>
 8008332:	4602      	mov	r2, r0
 8008334:	460b      	mov	r3, r1
 8008336:	4630      	mov	r0, r6
 8008338:	4639      	mov	r1, r7
 800833a:	f7f7 ffb7 	bl	80002ac <__adddf3>
 800833e:	4606      	mov	r6, r0
 8008340:	460f      	mov	r7, r1
 8008342:	f7f8 fc19 	bl	8000b78 <__aeabi_d2iz>
 8008346:	2200      	movs	r2, #0
 8008348:	9000      	str	r0, [sp, #0]
 800834a:	2300      	movs	r3, #0
 800834c:	4630      	mov	r0, r6
 800834e:	4639      	mov	r1, r7
 8008350:	f7f8 fbd4 	bl	8000afc <__aeabi_dcmplt>
 8008354:	b150      	cbz	r0, 800836c <_dtoa_r+0x184>
 8008356:	9800      	ldr	r0, [sp, #0]
 8008358:	f7f8 f8f4 	bl	8000544 <__aeabi_i2d>
 800835c:	4632      	mov	r2, r6
 800835e:	463b      	mov	r3, r7
 8008360:	f7f8 fbc2 	bl	8000ae8 <__aeabi_dcmpeq>
 8008364:	b910      	cbnz	r0, 800836c <_dtoa_r+0x184>
 8008366:	9b00      	ldr	r3, [sp, #0]
 8008368:	3b01      	subs	r3, #1
 800836a:	9300      	str	r3, [sp, #0]
 800836c:	9b00      	ldr	r3, [sp, #0]
 800836e:	2b16      	cmp	r3, #22
 8008370:	d85a      	bhi.n	8008428 <_dtoa_r+0x240>
 8008372:	9a00      	ldr	r2, [sp, #0]
 8008374:	4b57      	ldr	r3, [pc, #348]	; (80084d4 <_dtoa_r+0x2ec>)
 8008376:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800837a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837e:	ec51 0b19 	vmov	r0, r1, d9
 8008382:	f7f8 fbbb 	bl	8000afc <__aeabi_dcmplt>
 8008386:	2800      	cmp	r0, #0
 8008388:	d050      	beq.n	800842c <_dtoa_r+0x244>
 800838a:	9b00      	ldr	r3, [sp, #0]
 800838c:	3b01      	subs	r3, #1
 800838e:	9300      	str	r3, [sp, #0]
 8008390:	2300      	movs	r3, #0
 8008392:	930b      	str	r3, [sp, #44]	; 0x2c
 8008394:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008396:	1b5d      	subs	r5, r3, r5
 8008398:	1e6b      	subs	r3, r5, #1
 800839a:	9305      	str	r3, [sp, #20]
 800839c:	bf45      	ittet	mi
 800839e:	f1c5 0301 	rsbmi	r3, r5, #1
 80083a2:	9304      	strmi	r3, [sp, #16]
 80083a4:	2300      	movpl	r3, #0
 80083a6:	2300      	movmi	r3, #0
 80083a8:	bf4c      	ite	mi
 80083aa:	9305      	strmi	r3, [sp, #20]
 80083ac:	9304      	strpl	r3, [sp, #16]
 80083ae:	9b00      	ldr	r3, [sp, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	db3d      	blt.n	8008430 <_dtoa_r+0x248>
 80083b4:	9b05      	ldr	r3, [sp, #20]
 80083b6:	9a00      	ldr	r2, [sp, #0]
 80083b8:	920a      	str	r2, [sp, #40]	; 0x28
 80083ba:	4413      	add	r3, r2
 80083bc:	9305      	str	r3, [sp, #20]
 80083be:	2300      	movs	r3, #0
 80083c0:	9307      	str	r3, [sp, #28]
 80083c2:	9b06      	ldr	r3, [sp, #24]
 80083c4:	2b09      	cmp	r3, #9
 80083c6:	f200 8089 	bhi.w	80084dc <_dtoa_r+0x2f4>
 80083ca:	2b05      	cmp	r3, #5
 80083cc:	bfc4      	itt	gt
 80083ce:	3b04      	subgt	r3, #4
 80083d0:	9306      	strgt	r3, [sp, #24]
 80083d2:	9b06      	ldr	r3, [sp, #24]
 80083d4:	f1a3 0302 	sub.w	r3, r3, #2
 80083d8:	bfcc      	ite	gt
 80083da:	2500      	movgt	r5, #0
 80083dc:	2501      	movle	r5, #1
 80083de:	2b03      	cmp	r3, #3
 80083e0:	f200 8087 	bhi.w	80084f2 <_dtoa_r+0x30a>
 80083e4:	e8df f003 	tbb	[pc, r3]
 80083e8:	59383a2d 	.word	0x59383a2d
 80083ec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80083f0:	441d      	add	r5, r3
 80083f2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80083f6:	2b20      	cmp	r3, #32
 80083f8:	bfc1      	itttt	gt
 80083fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80083fe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008402:	fa0b f303 	lslgt.w	r3, fp, r3
 8008406:	fa26 f000 	lsrgt.w	r0, r6, r0
 800840a:	bfda      	itte	le
 800840c:	f1c3 0320 	rsble	r3, r3, #32
 8008410:	fa06 f003 	lslle.w	r0, r6, r3
 8008414:	4318      	orrgt	r0, r3
 8008416:	f7f8 f885 	bl	8000524 <__aeabi_ui2d>
 800841a:	2301      	movs	r3, #1
 800841c:	4606      	mov	r6, r0
 800841e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008422:	3d01      	subs	r5, #1
 8008424:	930e      	str	r3, [sp, #56]	; 0x38
 8008426:	e76a      	b.n	80082fe <_dtoa_r+0x116>
 8008428:	2301      	movs	r3, #1
 800842a:	e7b2      	b.n	8008392 <_dtoa_r+0x1aa>
 800842c:	900b      	str	r0, [sp, #44]	; 0x2c
 800842e:	e7b1      	b.n	8008394 <_dtoa_r+0x1ac>
 8008430:	9b04      	ldr	r3, [sp, #16]
 8008432:	9a00      	ldr	r2, [sp, #0]
 8008434:	1a9b      	subs	r3, r3, r2
 8008436:	9304      	str	r3, [sp, #16]
 8008438:	4253      	negs	r3, r2
 800843a:	9307      	str	r3, [sp, #28]
 800843c:	2300      	movs	r3, #0
 800843e:	930a      	str	r3, [sp, #40]	; 0x28
 8008440:	e7bf      	b.n	80083c2 <_dtoa_r+0x1da>
 8008442:	2300      	movs	r3, #0
 8008444:	9308      	str	r3, [sp, #32]
 8008446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008448:	2b00      	cmp	r3, #0
 800844a:	dc55      	bgt.n	80084f8 <_dtoa_r+0x310>
 800844c:	2301      	movs	r3, #1
 800844e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008452:	461a      	mov	r2, r3
 8008454:	9209      	str	r2, [sp, #36]	; 0x24
 8008456:	e00c      	b.n	8008472 <_dtoa_r+0x28a>
 8008458:	2301      	movs	r3, #1
 800845a:	e7f3      	b.n	8008444 <_dtoa_r+0x25c>
 800845c:	2300      	movs	r3, #0
 800845e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008460:	9308      	str	r3, [sp, #32]
 8008462:	9b00      	ldr	r3, [sp, #0]
 8008464:	4413      	add	r3, r2
 8008466:	9302      	str	r3, [sp, #8]
 8008468:	3301      	adds	r3, #1
 800846a:	2b01      	cmp	r3, #1
 800846c:	9303      	str	r3, [sp, #12]
 800846e:	bfb8      	it	lt
 8008470:	2301      	movlt	r3, #1
 8008472:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008474:	2200      	movs	r2, #0
 8008476:	6042      	str	r2, [r0, #4]
 8008478:	2204      	movs	r2, #4
 800847a:	f102 0614 	add.w	r6, r2, #20
 800847e:	429e      	cmp	r6, r3
 8008480:	6841      	ldr	r1, [r0, #4]
 8008482:	d93d      	bls.n	8008500 <_dtoa_r+0x318>
 8008484:	4620      	mov	r0, r4
 8008486:	f001 fa49 	bl	800991c <_Balloc>
 800848a:	9001      	str	r0, [sp, #4]
 800848c:	2800      	cmp	r0, #0
 800848e:	d13b      	bne.n	8008508 <_dtoa_r+0x320>
 8008490:	4b11      	ldr	r3, [pc, #68]	; (80084d8 <_dtoa_r+0x2f0>)
 8008492:	4602      	mov	r2, r0
 8008494:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008498:	e6c0      	b.n	800821c <_dtoa_r+0x34>
 800849a:	2301      	movs	r3, #1
 800849c:	e7df      	b.n	800845e <_dtoa_r+0x276>
 800849e:	bf00      	nop
 80084a0:	636f4361 	.word	0x636f4361
 80084a4:	3fd287a7 	.word	0x3fd287a7
 80084a8:	8b60c8b3 	.word	0x8b60c8b3
 80084ac:	3fc68a28 	.word	0x3fc68a28
 80084b0:	509f79fb 	.word	0x509f79fb
 80084b4:	3fd34413 	.word	0x3fd34413
 80084b8:	0800b3d6 	.word	0x0800b3d6
 80084bc:	0800b3ed 	.word	0x0800b3ed
 80084c0:	7ff00000 	.word	0x7ff00000
 80084c4:	0800b3d2 	.word	0x0800b3d2
 80084c8:	0800b3c9 	.word	0x0800b3c9
 80084cc:	0800b24d 	.word	0x0800b24d
 80084d0:	3ff80000 	.word	0x3ff80000
 80084d4:	0800b5c0 	.word	0x0800b5c0
 80084d8:	0800b448 	.word	0x0800b448
 80084dc:	2501      	movs	r5, #1
 80084de:	2300      	movs	r3, #0
 80084e0:	9306      	str	r3, [sp, #24]
 80084e2:	9508      	str	r5, [sp, #32]
 80084e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80084ec:	2200      	movs	r2, #0
 80084ee:	2312      	movs	r3, #18
 80084f0:	e7b0      	b.n	8008454 <_dtoa_r+0x26c>
 80084f2:	2301      	movs	r3, #1
 80084f4:	9308      	str	r3, [sp, #32]
 80084f6:	e7f5      	b.n	80084e4 <_dtoa_r+0x2fc>
 80084f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084fa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80084fe:	e7b8      	b.n	8008472 <_dtoa_r+0x28a>
 8008500:	3101      	adds	r1, #1
 8008502:	6041      	str	r1, [r0, #4]
 8008504:	0052      	lsls	r2, r2, #1
 8008506:	e7b8      	b.n	800847a <_dtoa_r+0x292>
 8008508:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800850a:	9a01      	ldr	r2, [sp, #4]
 800850c:	601a      	str	r2, [r3, #0]
 800850e:	9b03      	ldr	r3, [sp, #12]
 8008510:	2b0e      	cmp	r3, #14
 8008512:	f200 809d 	bhi.w	8008650 <_dtoa_r+0x468>
 8008516:	2d00      	cmp	r5, #0
 8008518:	f000 809a 	beq.w	8008650 <_dtoa_r+0x468>
 800851c:	9b00      	ldr	r3, [sp, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	dd32      	ble.n	8008588 <_dtoa_r+0x3a0>
 8008522:	4ab7      	ldr	r2, [pc, #732]	; (8008800 <_dtoa_r+0x618>)
 8008524:	f003 030f 	and.w	r3, r3, #15
 8008528:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800852c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008530:	9b00      	ldr	r3, [sp, #0]
 8008532:	05d8      	lsls	r0, r3, #23
 8008534:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008538:	d516      	bpl.n	8008568 <_dtoa_r+0x380>
 800853a:	4bb2      	ldr	r3, [pc, #712]	; (8008804 <_dtoa_r+0x61c>)
 800853c:	ec51 0b19 	vmov	r0, r1, d9
 8008540:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008544:	f7f8 f992 	bl	800086c <__aeabi_ddiv>
 8008548:	f007 070f 	and.w	r7, r7, #15
 800854c:	4682      	mov	sl, r0
 800854e:	468b      	mov	fp, r1
 8008550:	2503      	movs	r5, #3
 8008552:	4eac      	ldr	r6, [pc, #688]	; (8008804 <_dtoa_r+0x61c>)
 8008554:	b957      	cbnz	r7, 800856c <_dtoa_r+0x384>
 8008556:	4642      	mov	r2, r8
 8008558:	464b      	mov	r3, r9
 800855a:	4650      	mov	r0, sl
 800855c:	4659      	mov	r1, fp
 800855e:	f7f8 f985 	bl	800086c <__aeabi_ddiv>
 8008562:	4682      	mov	sl, r0
 8008564:	468b      	mov	fp, r1
 8008566:	e028      	b.n	80085ba <_dtoa_r+0x3d2>
 8008568:	2502      	movs	r5, #2
 800856a:	e7f2      	b.n	8008552 <_dtoa_r+0x36a>
 800856c:	07f9      	lsls	r1, r7, #31
 800856e:	d508      	bpl.n	8008582 <_dtoa_r+0x39a>
 8008570:	4640      	mov	r0, r8
 8008572:	4649      	mov	r1, r9
 8008574:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008578:	f7f8 f84e 	bl	8000618 <__aeabi_dmul>
 800857c:	3501      	adds	r5, #1
 800857e:	4680      	mov	r8, r0
 8008580:	4689      	mov	r9, r1
 8008582:	107f      	asrs	r7, r7, #1
 8008584:	3608      	adds	r6, #8
 8008586:	e7e5      	b.n	8008554 <_dtoa_r+0x36c>
 8008588:	f000 809b 	beq.w	80086c2 <_dtoa_r+0x4da>
 800858c:	9b00      	ldr	r3, [sp, #0]
 800858e:	4f9d      	ldr	r7, [pc, #628]	; (8008804 <_dtoa_r+0x61c>)
 8008590:	425e      	negs	r6, r3
 8008592:	4b9b      	ldr	r3, [pc, #620]	; (8008800 <_dtoa_r+0x618>)
 8008594:	f006 020f 	and.w	r2, r6, #15
 8008598:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800859c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a0:	ec51 0b19 	vmov	r0, r1, d9
 80085a4:	f7f8 f838 	bl	8000618 <__aeabi_dmul>
 80085a8:	1136      	asrs	r6, r6, #4
 80085aa:	4682      	mov	sl, r0
 80085ac:	468b      	mov	fp, r1
 80085ae:	2300      	movs	r3, #0
 80085b0:	2502      	movs	r5, #2
 80085b2:	2e00      	cmp	r6, #0
 80085b4:	d17a      	bne.n	80086ac <_dtoa_r+0x4c4>
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d1d3      	bne.n	8008562 <_dtoa_r+0x37a>
 80085ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f000 8082 	beq.w	80086c6 <_dtoa_r+0x4de>
 80085c2:	4b91      	ldr	r3, [pc, #580]	; (8008808 <_dtoa_r+0x620>)
 80085c4:	2200      	movs	r2, #0
 80085c6:	4650      	mov	r0, sl
 80085c8:	4659      	mov	r1, fp
 80085ca:	f7f8 fa97 	bl	8000afc <__aeabi_dcmplt>
 80085ce:	2800      	cmp	r0, #0
 80085d0:	d079      	beq.n	80086c6 <_dtoa_r+0x4de>
 80085d2:	9b03      	ldr	r3, [sp, #12]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d076      	beq.n	80086c6 <_dtoa_r+0x4de>
 80085d8:	9b02      	ldr	r3, [sp, #8]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	dd36      	ble.n	800864c <_dtoa_r+0x464>
 80085de:	9b00      	ldr	r3, [sp, #0]
 80085e0:	4650      	mov	r0, sl
 80085e2:	4659      	mov	r1, fp
 80085e4:	1e5f      	subs	r7, r3, #1
 80085e6:	2200      	movs	r2, #0
 80085e8:	4b88      	ldr	r3, [pc, #544]	; (800880c <_dtoa_r+0x624>)
 80085ea:	f7f8 f815 	bl	8000618 <__aeabi_dmul>
 80085ee:	9e02      	ldr	r6, [sp, #8]
 80085f0:	4682      	mov	sl, r0
 80085f2:	468b      	mov	fp, r1
 80085f4:	3501      	adds	r5, #1
 80085f6:	4628      	mov	r0, r5
 80085f8:	f7f7 ffa4 	bl	8000544 <__aeabi_i2d>
 80085fc:	4652      	mov	r2, sl
 80085fe:	465b      	mov	r3, fp
 8008600:	f7f8 f80a 	bl	8000618 <__aeabi_dmul>
 8008604:	4b82      	ldr	r3, [pc, #520]	; (8008810 <_dtoa_r+0x628>)
 8008606:	2200      	movs	r2, #0
 8008608:	f7f7 fe50 	bl	80002ac <__adddf3>
 800860c:	46d0      	mov	r8, sl
 800860e:	46d9      	mov	r9, fp
 8008610:	4682      	mov	sl, r0
 8008612:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008616:	2e00      	cmp	r6, #0
 8008618:	d158      	bne.n	80086cc <_dtoa_r+0x4e4>
 800861a:	4b7e      	ldr	r3, [pc, #504]	; (8008814 <_dtoa_r+0x62c>)
 800861c:	2200      	movs	r2, #0
 800861e:	4640      	mov	r0, r8
 8008620:	4649      	mov	r1, r9
 8008622:	f7f7 fe41 	bl	80002a8 <__aeabi_dsub>
 8008626:	4652      	mov	r2, sl
 8008628:	465b      	mov	r3, fp
 800862a:	4680      	mov	r8, r0
 800862c:	4689      	mov	r9, r1
 800862e:	f7f8 fa83 	bl	8000b38 <__aeabi_dcmpgt>
 8008632:	2800      	cmp	r0, #0
 8008634:	f040 8295 	bne.w	8008b62 <_dtoa_r+0x97a>
 8008638:	4652      	mov	r2, sl
 800863a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800863e:	4640      	mov	r0, r8
 8008640:	4649      	mov	r1, r9
 8008642:	f7f8 fa5b 	bl	8000afc <__aeabi_dcmplt>
 8008646:	2800      	cmp	r0, #0
 8008648:	f040 8289 	bne.w	8008b5e <_dtoa_r+0x976>
 800864c:	ec5b ab19 	vmov	sl, fp, d9
 8008650:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008652:	2b00      	cmp	r3, #0
 8008654:	f2c0 8148 	blt.w	80088e8 <_dtoa_r+0x700>
 8008658:	9a00      	ldr	r2, [sp, #0]
 800865a:	2a0e      	cmp	r2, #14
 800865c:	f300 8144 	bgt.w	80088e8 <_dtoa_r+0x700>
 8008660:	4b67      	ldr	r3, [pc, #412]	; (8008800 <_dtoa_r+0x618>)
 8008662:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008666:	e9d3 8900 	ldrd	r8, r9, [r3]
 800866a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800866c:	2b00      	cmp	r3, #0
 800866e:	f280 80d5 	bge.w	800881c <_dtoa_r+0x634>
 8008672:	9b03      	ldr	r3, [sp, #12]
 8008674:	2b00      	cmp	r3, #0
 8008676:	f300 80d1 	bgt.w	800881c <_dtoa_r+0x634>
 800867a:	f040 826f 	bne.w	8008b5c <_dtoa_r+0x974>
 800867e:	4b65      	ldr	r3, [pc, #404]	; (8008814 <_dtoa_r+0x62c>)
 8008680:	2200      	movs	r2, #0
 8008682:	4640      	mov	r0, r8
 8008684:	4649      	mov	r1, r9
 8008686:	f7f7 ffc7 	bl	8000618 <__aeabi_dmul>
 800868a:	4652      	mov	r2, sl
 800868c:	465b      	mov	r3, fp
 800868e:	f7f8 fa49 	bl	8000b24 <__aeabi_dcmpge>
 8008692:	9e03      	ldr	r6, [sp, #12]
 8008694:	4637      	mov	r7, r6
 8008696:	2800      	cmp	r0, #0
 8008698:	f040 8245 	bne.w	8008b26 <_dtoa_r+0x93e>
 800869c:	9d01      	ldr	r5, [sp, #4]
 800869e:	2331      	movs	r3, #49	; 0x31
 80086a0:	f805 3b01 	strb.w	r3, [r5], #1
 80086a4:	9b00      	ldr	r3, [sp, #0]
 80086a6:	3301      	adds	r3, #1
 80086a8:	9300      	str	r3, [sp, #0]
 80086aa:	e240      	b.n	8008b2e <_dtoa_r+0x946>
 80086ac:	07f2      	lsls	r2, r6, #31
 80086ae:	d505      	bpl.n	80086bc <_dtoa_r+0x4d4>
 80086b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086b4:	f7f7 ffb0 	bl	8000618 <__aeabi_dmul>
 80086b8:	3501      	adds	r5, #1
 80086ba:	2301      	movs	r3, #1
 80086bc:	1076      	asrs	r6, r6, #1
 80086be:	3708      	adds	r7, #8
 80086c0:	e777      	b.n	80085b2 <_dtoa_r+0x3ca>
 80086c2:	2502      	movs	r5, #2
 80086c4:	e779      	b.n	80085ba <_dtoa_r+0x3d2>
 80086c6:	9f00      	ldr	r7, [sp, #0]
 80086c8:	9e03      	ldr	r6, [sp, #12]
 80086ca:	e794      	b.n	80085f6 <_dtoa_r+0x40e>
 80086cc:	9901      	ldr	r1, [sp, #4]
 80086ce:	4b4c      	ldr	r3, [pc, #304]	; (8008800 <_dtoa_r+0x618>)
 80086d0:	4431      	add	r1, r6
 80086d2:	910d      	str	r1, [sp, #52]	; 0x34
 80086d4:	9908      	ldr	r1, [sp, #32]
 80086d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80086da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80086de:	2900      	cmp	r1, #0
 80086e0:	d043      	beq.n	800876a <_dtoa_r+0x582>
 80086e2:	494d      	ldr	r1, [pc, #308]	; (8008818 <_dtoa_r+0x630>)
 80086e4:	2000      	movs	r0, #0
 80086e6:	f7f8 f8c1 	bl	800086c <__aeabi_ddiv>
 80086ea:	4652      	mov	r2, sl
 80086ec:	465b      	mov	r3, fp
 80086ee:	f7f7 fddb 	bl	80002a8 <__aeabi_dsub>
 80086f2:	9d01      	ldr	r5, [sp, #4]
 80086f4:	4682      	mov	sl, r0
 80086f6:	468b      	mov	fp, r1
 80086f8:	4649      	mov	r1, r9
 80086fa:	4640      	mov	r0, r8
 80086fc:	f7f8 fa3c 	bl	8000b78 <__aeabi_d2iz>
 8008700:	4606      	mov	r6, r0
 8008702:	f7f7 ff1f 	bl	8000544 <__aeabi_i2d>
 8008706:	4602      	mov	r2, r0
 8008708:	460b      	mov	r3, r1
 800870a:	4640      	mov	r0, r8
 800870c:	4649      	mov	r1, r9
 800870e:	f7f7 fdcb 	bl	80002a8 <__aeabi_dsub>
 8008712:	3630      	adds	r6, #48	; 0x30
 8008714:	f805 6b01 	strb.w	r6, [r5], #1
 8008718:	4652      	mov	r2, sl
 800871a:	465b      	mov	r3, fp
 800871c:	4680      	mov	r8, r0
 800871e:	4689      	mov	r9, r1
 8008720:	f7f8 f9ec 	bl	8000afc <__aeabi_dcmplt>
 8008724:	2800      	cmp	r0, #0
 8008726:	d163      	bne.n	80087f0 <_dtoa_r+0x608>
 8008728:	4642      	mov	r2, r8
 800872a:	464b      	mov	r3, r9
 800872c:	4936      	ldr	r1, [pc, #216]	; (8008808 <_dtoa_r+0x620>)
 800872e:	2000      	movs	r0, #0
 8008730:	f7f7 fdba 	bl	80002a8 <__aeabi_dsub>
 8008734:	4652      	mov	r2, sl
 8008736:	465b      	mov	r3, fp
 8008738:	f7f8 f9e0 	bl	8000afc <__aeabi_dcmplt>
 800873c:	2800      	cmp	r0, #0
 800873e:	f040 80b5 	bne.w	80088ac <_dtoa_r+0x6c4>
 8008742:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008744:	429d      	cmp	r5, r3
 8008746:	d081      	beq.n	800864c <_dtoa_r+0x464>
 8008748:	4b30      	ldr	r3, [pc, #192]	; (800880c <_dtoa_r+0x624>)
 800874a:	2200      	movs	r2, #0
 800874c:	4650      	mov	r0, sl
 800874e:	4659      	mov	r1, fp
 8008750:	f7f7 ff62 	bl	8000618 <__aeabi_dmul>
 8008754:	4b2d      	ldr	r3, [pc, #180]	; (800880c <_dtoa_r+0x624>)
 8008756:	4682      	mov	sl, r0
 8008758:	468b      	mov	fp, r1
 800875a:	4640      	mov	r0, r8
 800875c:	4649      	mov	r1, r9
 800875e:	2200      	movs	r2, #0
 8008760:	f7f7 ff5a 	bl	8000618 <__aeabi_dmul>
 8008764:	4680      	mov	r8, r0
 8008766:	4689      	mov	r9, r1
 8008768:	e7c6      	b.n	80086f8 <_dtoa_r+0x510>
 800876a:	4650      	mov	r0, sl
 800876c:	4659      	mov	r1, fp
 800876e:	f7f7 ff53 	bl	8000618 <__aeabi_dmul>
 8008772:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008774:	9d01      	ldr	r5, [sp, #4]
 8008776:	930f      	str	r3, [sp, #60]	; 0x3c
 8008778:	4682      	mov	sl, r0
 800877a:	468b      	mov	fp, r1
 800877c:	4649      	mov	r1, r9
 800877e:	4640      	mov	r0, r8
 8008780:	f7f8 f9fa 	bl	8000b78 <__aeabi_d2iz>
 8008784:	4606      	mov	r6, r0
 8008786:	f7f7 fedd 	bl	8000544 <__aeabi_i2d>
 800878a:	3630      	adds	r6, #48	; 0x30
 800878c:	4602      	mov	r2, r0
 800878e:	460b      	mov	r3, r1
 8008790:	4640      	mov	r0, r8
 8008792:	4649      	mov	r1, r9
 8008794:	f7f7 fd88 	bl	80002a8 <__aeabi_dsub>
 8008798:	f805 6b01 	strb.w	r6, [r5], #1
 800879c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800879e:	429d      	cmp	r5, r3
 80087a0:	4680      	mov	r8, r0
 80087a2:	4689      	mov	r9, r1
 80087a4:	f04f 0200 	mov.w	r2, #0
 80087a8:	d124      	bne.n	80087f4 <_dtoa_r+0x60c>
 80087aa:	4b1b      	ldr	r3, [pc, #108]	; (8008818 <_dtoa_r+0x630>)
 80087ac:	4650      	mov	r0, sl
 80087ae:	4659      	mov	r1, fp
 80087b0:	f7f7 fd7c 	bl	80002ac <__adddf3>
 80087b4:	4602      	mov	r2, r0
 80087b6:	460b      	mov	r3, r1
 80087b8:	4640      	mov	r0, r8
 80087ba:	4649      	mov	r1, r9
 80087bc:	f7f8 f9bc 	bl	8000b38 <__aeabi_dcmpgt>
 80087c0:	2800      	cmp	r0, #0
 80087c2:	d173      	bne.n	80088ac <_dtoa_r+0x6c4>
 80087c4:	4652      	mov	r2, sl
 80087c6:	465b      	mov	r3, fp
 80087c8:	4913      	ldr	r1, [pc, #76]	; (8008818 <_dtoa_r+0x630>)
 80087ca:	2000      	movs	r0, #0
 80087cc:	f7f7 fd6c 	bl	80002a8 <__aeabi_dsub>
 80087d0:	4602      	mov	r2, r0
 80087d2:	460b      	mov	r3, r1
 80087d4:	4640      	mov	r0, r8
 80087d6:	4649      	mov	r1, r9
 80087d8:	f7f8 f990 	bl	8000afc <__aeabi_dcmplt>
 80087dc:	2800      	cmp	r0, #0
 80087de:	f43f af35 	beq.w	800864c <_dtoa_r+0x464>
 80087e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80087e4:	1e6b      	subs	r3, r5, #1
 80087e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80087e8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80087ec:	2b30      	cmp	r3, #48	; 0x30
 80087ee:	d0f8      	beq.n	80087e2 <_dtoa_r+0x5fa>
 80087f0:	9700      	str	r7, [sp, #0]
 80087f2:	e049      	b.n	8008888 <_dtoa_r+0x6a0>
 80087f4:	4b05      	ldr	r3, [pc, #20]	; (800880c <_dtoa_r+0x624>)
 80087f6:	f7f7 ff0f 	bl	8000618 <__aeabi_dmul>
 80087fa:	4680      	mov	r8, r0
 80087fc:	4689      	mov	r9, r1
 80087fe:	e7bd      	b.n	800877c <_dtoa_r+0x594>
 8008800:	0800b5c0 	.word	0x0800b5c0
 8008804:	0800b598 	.word	0x0800b598
 8008808:	3ff00000 	.word	0x3ff00000
 800880c:	40240000 	.word	0x40240000
 8008810:	401c0000 	.word	0x401c0000
 8008814:	40140000 	.word	0x40140000
 8008818:	3fe00000 	.word	0x3fe00000
 800881c:	9d01      	ldr	r5, [sp, #4]
 800881e:	4656      	mov	r6, sl
 8008820:	465f      	mov	r7, fp
 8008822:	4642      	mov	r2, r8
 8008824:	464b      	mov	r3, r9
 8008826:	4630      	mov	r0, r6
 8008828:	4639      	mov	r1, r7
 800882a:	f7f8 f81f 	bl	800086c <__aeabi_ddiv>
 800882e:	f7f8 f9a3 	bl	8000b78 <__aeabi_d2iz>
 8008832:	4682      	mov	sl, r0
 8008834:	f7f7 fe86 	bl	8000544 <__aeabi_i2d>
 8008838:	4642      	mov	r2, r8
 800883a:	464b      	mov	r3, r9
 800883c:	f7f7 feec 	bl	8000618 <__aeabi_dmul>
 8008840:	4602      	mov	r2, r0
 8008842:	460b      	mov	r3, r1
 8008844:	4630      	mov	r0, r6
 8008846:	4639      	mov	r1, r7
 8008848:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800884c:	f7f7 fd2c 	bl	80002a8 <__aeabi_dsub>
 8008850:	f805 6b01 	strb.w	r6, [r5], #1
 8008854:	9e01      	ldr	r6, [sp, #4]
 8008856:	9f03      	ldr	r7, [sp, #12]
 8008858:	1bae      	subs	r6, r5, r6
 800885a:	42b7      	cmp	r7, r6
 800885c:	4602      	mov	r2, r0
 800885e:	460b      	mov	r3, r1
 8008860:	d135      	bne.n	80088ce <_dtoa_r+0x6e6>
 8008862:	f7f7 fd23 	bl	80002ac <__adddf3>
 8008866:	4642      	mov	r2, r8
 8008868:	464b      	mov	r3, r9
 800886a:	4606      	mov	r6, r0
 800886c:	460f      	mov	r7, r1
 800886e:	f7f8 f963 	bl	8000b38 <__aeabi_dcmpgt>
 8008872:	b9d0      	cbnz	r0, 80088aa <_dtoa_r+0x6c2>
 8008874:	4642      	mov	r2, r8
 8008876:	464b      	mov	r3, r9
 8008878:	4630      	mov	r0, r6
 800887a:	4639      	mov	r1, r7
 800887c:	f7f8 f934 	bl	8000ae8 <__aeabi_dcmpeq>
 8008880:	b110      	cbz	r0, 8008888 <_dtoa_r+0x6a0>
 8008882:	f01a 0f01 	tst.w	sl, #1
 8008886:	d110      	bne.n	80088aa <_dtoa_r+0x6c2>
 8008888:	4620      	mov	r0, r4
 800888a:	ee18 1a10 	vmov	r1, s16
 800888e:	f001 f885 	bl	800999c <_Bfree>
 8008892:	2300      	movs	r3, #0
 8008894:	9800      	ldr	r0, [sp, #0]
 8008896:	702b      	strb	r3, [r5, #0]
 8008898:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800889a:	3001      	adds	r0, #1
 800889c:	6018      	str	r0, [r3, #0]
 800889e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	f43f acf1 	beq.w	8008288 <_dtoa_r+0xa0>
 80088a6:	601d      	str	r5, [r3, #0]
 80088a8:	e4ee      	b.n	8008288 <_dtoa_r+0xa0>
 80088aa:	9f00      	ldr	r7, [sp, #0]
 80088ac:	462b      	mov	r3, r5
 80088ae:	461d      	mov	r5, r3
 80088b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088b4:	2a39      	cmp	r2, #57	; 0x39
 80088b6:	d106      	bne.n	80088c6 <_dtoa_r+0x6de>
 80088b8:	9a01      	ldr	r2, [sp, #4]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d1f7      	bne.n	80088ae <_dtoa_r+0x6c6>
 80088be:	9901      	ldr	r1, [sp, #4]
 80088c0:	2230      	movs	r2, #48	; 0x30
 80088c2:	3701      	adds	r7, #1
 80088c4:	700a      	strb	r2, [r1, #0]
 80088c6:	781a      	ldrb	r2, [r3, #0]
 80088c8:	3201      	adds	r2, #1
 80088ca:	701a      	strb	r2, [r3, #0]
 80088cc:	e790      	b.n	80087f0 <_dtoa_r+0x608>
 80088ce:	4ba6      	ldr	r3, [pc, #664]	; (8008b68 <_dtoa_r+0x980>)
 80088d0:	2200      	movs	r2, #0
 80088d2:	f7f7 fea1 	bl	8000618 <__aeabi_dmul>
 80088d6:	2200      	movs	r2, #0
 80088d8:	2300      	movs	r3, #0
 80088da:	4606      	mov	r6, r0
 80088dc:	460f      	mov	r7, r1
 80088de:	f7f8 f903 	bl	8000ae8 <__aeabi_dcmpeq>
 80088e2:	2800      	cmp	r0, #0
 80088e4:	d09d      	beq.n	8008822 <_dtoa_r+0x63a>
 80088e6:	e7cf      	b.n	8008888 <_dtoa_r+0x6a0>
 80088e8:	9a08      	ldr	r2, [sp, #32]
 80088ea:	2a00      	cmp	r2, #0
 80088ec:	f000 80d7 	beq.w	8008a9e <_dtoa_r+0x8b6>
 80088f0:	9a06      	ldr	r2, [sp, #24]
 80088f2:	2a01      	cmp	r2, #1
 80088f4:	f300 80ba 	bgt.w	8008a6c <_dtoa_r+0x884>
 80088f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088fa:	2a00      	cmp	r2, #0
 80088fc:	f000 80b2 	beq.w	8008a64 <_dtoa_r+0x87c>
 8008900:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008904:	9e07      	ldr	r6, [sp, #28]
 8008906:	9d04      	ldr	r5, [sp, #16]
 8008908:	9a04      	ldr	r2, [sp, #16]
 800890a:	441a      	add	r2, r3
 800890c:	9204      	str	r2, [sp, #16]
 800890e:	9a05      	ldr	r2, [sp, #20]
 8008910:	2101      	movs	r1, #1
 8008912:	441a      	add	r2, r3
 8008914:	4620      	mov	r0, r4
 8008916:	9205      	str	r2, [sp, #20]
 8008918:	f001 f942 	bl	8009ba0 <__i2b>
 800891c:	4607      	mov	r7, r0
 800891e:	2d00      	cmp	r5, #0
 8008920:	dd0c      	ble.n	800893c <_dtoa_r+0x754>
 8008922:	9b05      	ldr	r3, [sp, #20]
 8008924:	2b00      	cmp	r3, #0
 8008926:	dd09      	ble.n	800893c <_dtoa_r+0x754>
 8008928:	42ab      	cmp	r3, r5
 800892a:	9a04      	ldr	r2, [sp, #16]
 800892c:	bfa8      	it	ge
 800892e:	462b      	movge	r3, r5
 8008930:	1ad2      	subs	r2, r2, r3
 8008932:	9204      	str	r2, [sp, #16]
 8008934:	9a05      	ldr	r2, [sp, #20]
 8008936:	1aed      	subs	r5, r5, r3
 8008938:	1ad3      	subs	r3, r2, r3
 800893a:	9305      	str	r3, [sp, #20]
 800893c:	9b07      	ldr	r3, [sp, #28]
 800893e:	b31b      	cbz	r3, 8008988 <_dtoa_r+0x7a0>
 8008940:	9b08      	ldr	r3, [sp, #32]
 8008942:	2b00      	cmp	r3, #0
 8008944:	f000 80af 	beq.w	8008aa6 <_dtoa_r+0x8be>
 8008948:	2e00      	cmp	r6, #0
 800894a:	dd13      	ble.n	8008974 <_dtoa_r+0x78c>
 800894c:	4639      	mov	r1, r7
 800894e:	4632      	mov	r2, r6
 8008950:	4620      	mov	r0, r4
 8008952:	f001 f9e5 	bl	8009d20 <__pow5mult>
 8008956:	ee18 2a10 	vmov	r2, s16
 800895a:	4601      	mov	r1, r0
 800895c:	4607      	mov	r7, r0
 800895e:	4620      	mov	r0, r4
 8008960:	f001 f934 	bl	8009bcc <__multiply>
 8008964:	ee18 1a10 	vmov	r1, s16
 8008968:	4680      	mov	r8, r0
 800896a:	4620      	mov	r0, r4
 800896c:	f001 f816 	bl	800999c <_Bfree>
 8008970:	ee08 8a10 	vmov	s16, r8
 8008974:	9b07      	ldr	r3, [sp, #28]
 8008976:	1b9a      	subs	r2, r3, r6
 8008978:	d006      	beq.n	8008988 <_dtoa_r+0x7a0>
 800897a:	ee18 1a10 	vmov	r1, s16
 800897e:	4620      	mov	r0, r4
 8008980:	f001 f9ce 	bl	8009d20 <__pow5mult>
 8008984:	ee08 0a10 	vmov	s16, r0
 8008988:	2101      	movs	r1, #1
 800898a:	4620      	mov	r0, r4
 800898c:	f001 f908 	bl	8009ba0 <__i2b>
 8008990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008992:	2b00      	cmp	r3, #0
 8008994:	4606      	mov	r6, r0
 8008996:	f340 8088 	ble.w	8008aaa <_dtoa_r+0x8c2>
 800899a:	461a      	mov	r2, r3
 800899c:	4601      	mov	r1, r0
 800899e:	4620      	mov	r0, r4
 80089a0:	f001 f9be 	bl	8009d20 <__pow5mult>
 80089a4:	9b06      	ldr	r3, [sp, #24]
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	4606      	mov	r6, r0
 80089aa:	f340 8081 	ble.w	8008ab0 <_dtoa_r+0x8c8>
 80089ae:	f04f 0800 	mov.w	r8, #0
 80089b2:	6933      	ldr	r3, [r6, #16]
 80089b4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80089b8:	6918      	ldr	r0, [r3, #16]
 80089ba:	f001 f8a1 	bl	8009b00 <__hi0bits>
 80089be:	f1c0 0020 	rsb	r0, r0, #32
 80089c2:	9b05      	ldr	r3, [sp, #20]
 80089c4:	4418      	add	r0, r3
 80089c6:	f010 001f 	ands.w	r0, r0, #31
 80089ca:	f000 8092 	beq.w	8008af2 <_dtoa_r+0x90a>
 80089ce:	f1c0 0320 	rsb	r3, r0, #32
 80089d2:	2b04      	cmp	r3, #4
 80089d4:	f340 808a 	ble.w	8008aec <_dtoa_r+0x904>
 80089d8:	f1c0 001c 	rsb	r0, r0, #28
 80089dc:	9b04      	ldr	r3, [sp, #16]
 80089de:	4403      	add	r3, r0
 80089e0:	9304      	str	r3, [sp, #16]
 80089e2:	9b05      	ldr	r3, [sp, #20]
 80089e4:	4403      	add	r3, r0
 80089e6:	4405      	add	r5, r0
 80089e8:	9305      	str	r3, [sp, #20]
 80089ea:	9b04      	ldr	r3, [sp, #16]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	dd07      	ble.n	8008a00 <_dtoa_r+0x818>
 80089f0:	ee18 1a10 	vmov	r1, s16
 80089f4:	461a      	mov	r2, r3
 80089f6:	4620      	mov	r0, r4
 80089f8:	f001 f9ec 	bl	8009dd4 <__lshift>
 80089fc:	ee08 0a10 	vmov	s16, r0
 8008a00:	9b05      	ldr	r3, [sp, #20]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	dd05      	ble.n	8008a12 <_dtoa_r+0x82a>
 8008a06:	4631      	mov	r1, r6
 8008a08:	461a      	mov	r2, r3
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	f001 f9e2 	bl	8009dd4 <__lshift>
 8008a10:	4606      	mov	r6, r0
 8008a12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d06e      	beq.n	8008af6 <_dtoa_r+0x90e>
 8008a18:	ee18 0a10 	vmov	r0, s16
 8008a1c:	4631      	mov	r1, r6
 8008a1e:	f001 fa49 	bl	8009eb4 <__mcmp>
 8008a22:	2800      	cmp	r0, #0
 8008a24:	da67      	bge.n	8008af6 <_dtoa_r+0x90e>
 8008a26:	9b00      	ldr	r3, [sp, #0]
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	ee18 1a10 	vmov	r1, s16
 8008a2e:	9300      	str	r3, [sp, #0]
 8008a30:	220a      	movs	r2, #10
 8008a32:	2300      	movs	r3, #0
 8008a34:	4620      	mov	r0, r4
 8008a36:	f000 ffd3 	bl	80099e0 <__multadd>
 8008a3a:	9b08      	ldr	r3, [sp, #32]
 8008a3c:	ee08 0a10 	vmov	s16, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f000 81b1 	beq.w	8008da8 <_dtoa_r+0xbc0>
 8008a46:	2300      	movs	r3, #0
 8008a48:	4639      	mov	r1, r7
 8008a4a:	220a      	movs	r2, #10
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	f000 ffc7 	bl	80099e0 <__multadd>
 8008a52:	9b02      	ldr	r3, [sp, #8]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	4607      	mov	r7, r0
 8008a58:	f300 808e 	bgt.w	8008b78 <_dtoa_r+0x990>
 8008a5c:	9b06      	ldr	r3, [sp, #24]
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	dc51      	bgt.n	8008b06 <_dtoa_r+0x91e>
 8008a62:	e089      	b.n	8008b78 <_dtoa_r+0x990>
 8008a64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008a6a:	e74b      	b.n	8008904 <_dtoa_r+0x71c>
 8008a6c:	9b03      	ldr	r3, [sp, #12]
 8008a6e:	1e5e      	subs	r6, r3, #1
 8008a70:	9b07      	ldr	r3, [sp, #28]
 8008a72:	42b3      	cmp	r3, r6
 8008a74:	bfbf      	itttt	lt
 8008a76:	9b07      	ldrlt	r3, [sp, #28]
 8008a78:	9607      	strlt	r6, [sp, #28]
 8008a7a:	1af2      	sublt	r2, r6, r3
 8008a7c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008a7e:	bfb6      	itet	lt
 8008a80:	189b      	addlt	r3, r3, r2
 8008a82:	1b9e      	subge	r6, r3, r6
 8008a84:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008a86:	9b03      	ldr	r3, [sp, #12]
 8008a88:	bfb8      	it	lt
 8008a8a:	2600      	movlt	r6, #0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	bfb7      	itett	lt
 8008a90:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008a94:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008a98:	1a9d      	sublt	r5, r3, r2
 8008a9a:	2300      	movlt	r3, #0
 8008a9c:	e734      	b.n	8008908 <_dtoa_r+0x720>
 8008a9e:	9e07      	ldr	r6, [sp, #28]
 8008aa0:	9d04      	ldr	r5, [sp, #16]
 8008aa2:	9f08      	ldr	r7, [sp, #32]
 8008aa4:	e73b      	b.n	800891e <_dtoa_r+0x736>
 8008aa6:	9a07      	ldr	r2, [sp, #28]
 8008aa8:	e767      	b.n	800897a <_dtoa_r+0x792>
 8008aaa:	9b06      	ldr	r3, [sp, #24]
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	dc18      	bgt.n	8008ae2 <_dtoa_r+0x8fa>
 8008ab0:	f1ba 0f00 	cmp.w	sl, #0
 8008ab4:	d115      	bne.n	8008ae2 <_dtoa_r+0x8fa>
 8008ab6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008aba:	b993      	cbnz	r3, 8008ae2 <_dtoa_r+0x8fa>
 8008abc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008ac0:	0d1b      	lsrs	r3, r3, #20
 8008ac2:	051b      	lsls	r3, r3, #20
 8008ac4:	b183      	cbz	r3, 8008ae8 <_dtoa_r+0x900>
 8008ac6:	9b04      	ldr	r3, [sp, #16]
 8008ac8:	3301      	adds	r3, #1
 8008aca:	9304      	str	r3, [sp, #16]
 8008acc:	9b05      	ldr	r3, [sp, #20]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	9305      	str	r3, [sp, #20]
 8008ad2:	f04f 0801 	mov.w	r8, #1
 8008ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f47f af6a 	bne.w	80089b2 <_dtoa_r+0x7ca>
 8008ade:	2001      	movs	r0, #1
 8008ae0:	e76f      	b.n	80089c2 <_dtoa_r+0x7da>
 8008ae2:	f04f 0800 	mov.w	r8, #0
 8008ae6:	e7f6      	b.n	8008ad6 <_dtoa_r+0x8ee>
 8008ae8:	4698      	mov	r8, r3
 8008aea:	e7f4      	b.n	8008ad6 <_dtoa_r+0x8ee>
 8008aec:	f43f af7d 	beq.w	80089ea <_dtoa_r+0x802>
 8008af0:	4618      	mov	r0, r3
 8008af2:	301c      	adds	r0, #28
 8008af4:	e772      	b.n	80089dc <_dtoa_r+0x7f4>
 8008af6:	9b03      	ldr	r3, [sp, #12]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	dc37      	bgt.n	8008b6c <_dtoa_r+0x984>
 8008afc:	9b06      	ldr	r3, [sp, #24]
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	dd34      	ble.n	8008b6c <_dtoa_r+0x984>
 8008b02:	9b03      	ldr	r3, [sp, #12]
 8008b04:	9302      	str	r3, [sp, #8]
 8008b06:	9b02      	ldr	r3, [sp, #8]
 8008b08:	b96b      	cbnz	r3, 8008b26 <_dtoa_r+0x93e>
 8008b0a:	4631      	mov	r1, r6
 8008b0c:	2205      	movs	r2, #5
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f000 ff66 	bl	80099e0 <__multadd>
 8008b14:	4601      	mov	r1, r0
 8008b16:	4606      	mov	r6, r0
 8008b18:	ee18 0a10 	vmov	r0, s16
 8008b1c:	f001 f9ca 	bl	8009eb4 <__mcmp>
 8008b20:	2800      	cmp	r0, #0
 8008b22:	f73f adbb 	bgt.w	800869c <_dtoa_r+0x4b4>
 8008b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b28:	9d01      	ldr	r5, [sp, #4]
 8008b2a:	43db      	mvns	r3, r3
 8008b2c:	9300      	str	r3, [sp, #0]
 8008b2e:	f04f 0800 	mov.w	r8, #0
 8008b32:	4631      	mov	r1, r6
 8008b34:	4620      	mov	r0, r4
 8008b36:	f000 ff31 	bl	800999c <_Bfree>
 8008b3a:	2f00      	cmp	r7, #0
 8008b3c:	f43f aea4 	beq.w	8008888 <_dtoa_r+0x6a0>
 8008b40:	f1b8 0f00 	cmp.w	r8, #0
 8008b44:	d005      	beq.n	8008b52 <_dtoa_r+0x96a>
 8008b46:	45b8      	cmp	r8, r7
 8008b48:	d003      	beq.n	8008b52 <_dtoa_r+0x96a>
 8008b4a:	4641      	mov	r1, r8
 8008b4c:	4620      	mov	r0, r4
 8008b4e:	f000 ff25 	bl	800999c <_Bfree>
 8008b52:	4639      	mov	r1, r7
 8008b54:	4620      	mov	r0, r4
 8008b56:	f000 ff21 	bl	800999c <_Bfree>
 8008b5a:	e695      	b.n	8008888 <_dtoa_r+0x6a0>
 8008b5c:	2600      	movs	r6, #0
 8008b5e:	4637      	mov	r7, r6
 8008b60:	e7e1      	b.n	8008b26 <_dtoa_r+0x93e>
 8008b62:	9700      	str	r7, [sp, #0]
 8008b64:	4637      	mov	r7, r6
 8008b66:	e599      	b.n	800869c <_dtoa_r+0x4b4>
 8008b68:	40240000 	.word	0x40240000
 8008b6c:	9b08      	ldr	r3, [sp, #32]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	f000 80ca 	beq.w	8008d08 <_dtoa_r+0xb20>
 8008b74:	9b03      	ldr	r3, [sp, #12]
 8008b76:	9302      	str	r3, [sp, #8]
 8008b78:	2d00      	cmp	r5, #0
 8008b7a:	dd05      	ble.n	8008b88 <_dtoa_r+0x9a0>
 8008b7c:	4639      	mov	r1, r7
 8008b7e:	462a      	mov	r2, r5
 8008b80:	4620      	mov	r0, r4
 8008b82:	f001 f927 	bl	8009dd4 <__lshift>
 8008b86:	4607      	mov	r7, r0
 8008b88:	f1b8 0f00 	cmp.w	r8, #0
 8008b8c:	d05b      	beq.n	8008c46 <_dtoa_r+0xa5e>
 8008b8e:	6879      	ldr	r1, [r7, #4]
 8008b90:	4620      	mov	r0, r4
 8008b92:	f000 fec3 	bl	800991c <_Balloc>
 8008b96:	4605      	mov	r5, r0
 8008b98:	b928      	cbnz	r0, 8008ba6 <_dtoa_r+0x9be>
 8008b9a:	4b87      	ldr	r3, [pc, #540]	; (8008db8 <_dtoa_r+0xbd0>)
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008ba2:	f7ff bb3b 	b.w	800821c <_dtoa_r+0x34>
 8008ba6:	693a      	ldr	r2, [r7, #16]
 8008ba8:	3202      	adds	r2, #2
 8008baa:	0092      	lsls	r2, r2, #2
 8008bac:	f107 010c 	add.w	r1, r7, #12
 8008bb0:	300c      	adds	r0, #12
 8008bb2:	f7fd fbb7 	bl	8006324 <memcpy>
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	4629      	mov	r1, r5
 8008bba:	4620      	mov	r0, r4
 8008bbc:	f001 f90a 	bl	8009dd4 <__lshift>
 8008bc0:	9b01      	ldr	r3, [sp, #4]
 8008bc2:	f103 0901 	add.w	r9, r3, #1
 8008bc6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008bca:	4413      	add	r3, r2
 8008bcc:	9305      	str	r3, [sp, #20]
 8008bce:	f00a 0301 	and.w	r3, sl, #1
 8008bd2:	46b8      	mov	r8, r7
 8008bd4:	9304      	str	r3, [sp, #16]
 8008bd6:	4607      	mov	r7, r0
 8008bd8:	4631      	mov	r1, r6
 8008bda:	ee18 0a10 	vmov	r0, s16
 8008bde:	f7ff fa77 	bl	80080d0 <quorem>
 8008be2:	4641      	mov	r1, r8
 8008be4:	9002      	str	r0, [sp, #8]
 8008be6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008bea:	ee18 0a10 	vmov	r0, s16
 8008bee:	f001 f961 	bl	8009eb4 <__mcmp>
 8008bf2:	463a      	mov	r2, r7
 8008bf4:	9003      	str	r0, [sp, #12]
 8008bf6:	4631      	mov	r1, r6
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	f001 f977 	bl	8009eec <__mdiff>
 8008bfe:	68c2      	ldr	r2, [r0, #12]
 8008c00:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8008c04:	4605      	mov	r5, r0
 8008c06:	bb02      	cbnz	r2, 8008c4a <_dtoa_r+0xa62>
 8008c08:	4601      	mov	r1, r0
 8008c0a:	ee18 0a10 	vmov	r0, s16
 8008c0e:	f001 f951 	bl	8009eb4 <__mcmp>
 8008c12:	4602      	mov	r2, r0
 8008c14:	4629      	mov	r1, r5
 8008c16:	4620      	mov	r0, r4
 8008c18:	9207      	str	r2, [sp, #28]
 8008c1a:	f000 febf 	bl	800999c <_Bfree>
 8008c1e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008c22:	ea43 0102 	orr.w	r1, r3, r2
 8008c26:	9b04      	ldr	r3, [sp, #16]
 8008c28:	430b      	orrs	r3, r1
 8008c2a:	464d      	mov	r5, r9
 8008c2c:	d10f      	bne.n	8008c4e <_dtoa_r+0xa66>
 8008c2e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008c32:	d02a      	beq.n	8008c8a <_dtoa_r+0xaa2>
 8008c34:	9b03      	ldr	r3, [sp, #12]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	dd02      	ble.n	8008c40 <_dtoa_r+0xa58>
 8008c3a:	9b02      	ldr	r3, [sp, #8]
 8008c3c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008c40:	f88b a000 	strb.w	sl, [fp]
 8008c44:	e775      	b.n	8008b32 <_dtoa_r+0x94a>
 8008c46:	4638      	mov	r0, r7
 8008c48:	e7ba      	b.n	8008bc0 <_dtoa_r+0x9d8>
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	e7e2      	b.n	8008c14 <_dtoa_r+0xa2c>
 8008c4e:	9b03      	ldr	r3, [sp, #12]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	db04      	blt.n	8008c5e <_dtoa_r+0xa76>
 8008c54:	9906      	ldr	r1, [sp, #24]
 8008c56:	430b      	orrs	r3, r1
 8008c58:	9904      	ldr	r1, [sp, #16]
 8008c5a:	430b      	orrs	r3, r1
 8008c5c:	d122      	bne.n	8008ca4 <_dtoa_r+0xabc>
 8008c5e:	2a00      	cmp	r2, #0
 8008c60:	ddee      	ble.n	8008c40 <_dtoa_r+0xa58>
 8008c62:	ee18 1a10 	vmov	r1, s16
 8008c66:	2201      	movs	r2, #1
 8008c68:	4620      	mov	r0, r4
 8008c6a:	f001 f8b3 	bl	8009dd4 <__lshift>
 8008c6e:	4631      	mov	r1, r6
 8008c70:	ee08 0a10 	vmov	s16, r0
 8008c74:	f001 f91e 	bl	8009eb4 <__mcmp>
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	dc03      	bgt.n	8008c84 <_dtoa_r+0xa9c>
 8008c7c:	d1e0      	bne.n	8008c40 <_dtoa_r+0xa58>
 8008c7e:	f01a 0f01 	tst.w	sl, #1
 8008c82:	d0dd      	beq.n	8008c40 <_dtoa_r+0xa58>
 8008c84:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008c88:	d1d7      	bne.n	8008c3a <_dtoa_r+0xa52>
 8008c8a:	2339      	movs	r3, #57	; 0x39
 8008c8c:	f88b 3000 	strb.w	r3, [fp]
 8008c90:	462b      	mov	r3, r5
 8008c92:	461d      	mov	r5, r3
 8008c94:	3b01      	subs	r3, #1
 8008c96:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008c9a:	2a39      	cmp	r2, #57	; 0x39
 8008c9c:	d071      	beq.n	8008d82 <_dtoa_r+0xb9a>
 8008c9e:	3201      	adds	r2, #1
 8008ca0:	701a      	strb	r2, [r3, #0]
 8008ca2:	e746      	b.n	8008b32 <_dtoa_r+0x94a>
 8008ca4:	2a00      	cmp	r2, #0
 8008ca6:	dd07      	ble.n	8008cb8 <_dtoa_r+0xad0>
 8008ca8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008cac:	d0ed      	beq.n	8008c8a <_dtoa_r+0xaa2>
 8008cae:	f10a 0301 	add.w	r3, sl, #1
 8008cb2:	f88b 3000 	strb.w	r3, [fp]
 8008cb6:	e73c      	b.n	8008b32 <_dtoa_r+0x94a>
 8008cb8:	9b05      	ldr	r3, [sp, #20]
 8008cba:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008cbe:	4599      	cmp	r9, r3
 8008cc0:	d047      	beq.n	8008d52 <_dtoa_r+0xb6a>
 8008cc2:	ee18 1a10 	vmov	r1, s16
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	220a      	movs	r2, #10
 8008cca:	4620      	mov	r0, r4
 8008ccc:	f000 fe88 	bl	80099e0 <__multadd>
 8008cd0:	45b8      	cmp	r8, r7
 8008cd2:	ee08 0a10 	vmov	s16, r0
 8008cd6:	f04f 0300 	mov.w	r3, #0
 8008cda:	f04f 020a 	mov.w	r2, #10
 8008cde:	4641      	mov	r1, r8
 8008ce0:	4620      	mov	r0, r4
 8008ce2:	d106      	bne.n	8008cf2 <_dtoa_r+0xb0a>
 8008ce4:	f000 fe7c 	bl	80099e0 <__multadd>
 8008ce8:	4680      	mov	r8, r0
 8008cea:	4607      	mov	r7, r0
 8008cec:	f109 0901 	add.w	r9, r9, #1
 8008cf0:	e772      	b.n	8008bd8 <_dtoa_r+0x9f0>
 8008cf2:	f000 fe75 	bl	80099e0 <__multadd>
 8008cf6:	4639      	mov	r1, r7
 8008cf8:	4680      	mov	r8, r0
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	220a      	movs	r2, #10
 8008cfe:	4620      	mov	r0, r4
 8008d00:	f000 fe6e 	bl	80099e0 <__multadd>
 8008d04:	4607      	mov	r7, r0
 8008d06:	e7f1      	b.n	8008cec <_dtoa_r+0xb04>
 8008d08:	9b03      	ldr	r3, [sp, #12]
 8008d0a:	9302      	str	r3, [sp, #8]
 8008d0c:	9d01      	ldr	r5, [sp, #4]
 8008d0e:	ee18 0a10 	vmov	r0, s16
 8008d12:	4631      	mov	r1, r6
 8008d14:	f7ff f9dc 	bl	80080d0 <quorem>
 8008d18:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008d1c:	9b01      	ldr	r3, [sp, #4]
 8008d1e:	f805 ab01 	strb.w	sl, [r5], #1
 8008d22:	1aea      	subs	r2, r5, r3
 8008d24:	9b02      	ldr	r3, [sp, #8]
 8008d26:	4293      	cmp	r3, r2
 8008d28:	dd09      	ble.n	8008d3e <_dtoa_r+0xb56>
 8008d2a:	ee18 1a10 	vmov	r1, s16
 8008d2e:	2300      	movs	r3, #0
 8008d30:	220a      	movs	r2, #10
 8008d32:	4620      	mov	r0, r4
 8008d34:	f000 fe54 	bl	80099e0 <__multadd>
 8008d38:	ee08 0a10 	vmov	s16, r0
 8008d3c:	e7e7      	b.n	8008d0e <_dtoa_r+0xb26>
 8008d3e:	9b02      	ldr	r3, [sp, #8]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	bfc8      	it	gt
 8008d44:	461d      	movgt	r5, r3
 8008d46:	9b01      	ldr	r3, [sp, #4]
 8008d48:	bfd8      	it	le
 8008d4a:	2501      	movle	r5, #1
 8008d4c:	441d      	add	r5, r3
 8008d4e:	f04f 0800 	mov.w	r8, #0
 8008d52:	ee18 1a10 	vmov	r1, s16
 8008d56:	2201      	movs	r2, #1
 8008d58:	4620      	mov	r0, r4
 8008d5a:	f001 f83b 	bl	8009dd4 <__lshift>
 8008d5e:	4631      	mov	r1, r6
 8008d60:	ee08 0a10 	vmov	s16, r0
 8008d64:	f001 f8a6 	bl	8009eb4 <__mcmp>
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	dc91      	bgt.n	8008c90 <_dtoa_r+0xaa8>
 8008d6c:	d102      	bne.n	8008d74 <_dtoa_r+0xb8c>
 8008d6e:	f01a 0f01 	tst.w	sl, #1
 8008d72:	d18d      	bne.n	8008c90 <_dtoa_r+0xaa8>
 8008d74:	462b      	mov	r3, r5
 8008d76:	461d      	mov	r5, r3
 8008d78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d7c:	2a30      	cmp	r2, #48	; 0x30
 8008d7e:	d0fa      	beq.n	8008d76 <_dtoa_r+0xb8e>
 8008d80:	e6d7      	b.n	8008b32 <_dtoa_r+0x94a>
 8008d82:	9a01      	ldr	r2, [sp, #4]
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d184      	bne.n	8008c92 <_dtoa_r+0xaaa>
 8008d88:	9b00      	ldr	r3, [sp, #0]
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	9300      	str	r3, [sp, #0]
 8008d8e:	2331      	movs	r3, #49	; 0x31
 8008d90:	7013      	strb	r3, [r2, #0]
 8008d92:	e6ce      	b.n	8008b32 <_dtoa_r+0x94a>
 8008d94:	4b09      	ldr	r3, [pc, #36]	; (8008dbc <_dtoa_r+0xbd4>)
 8008d96:	f7ff ba95 	b.w	80082c4 <_dtoa_r+0xdc>
 8008d9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f47f aa6e 	bne.w	800827e <_dtoa_r+0x96>
 8008da2:	4b07      	ldr	r3, [pc, #28]	; (8008dc0 <_dtoa_r+0xbd8>)
 8008da4:	f7ff ba8e 	b.w	80082c4 <_dtoa_r+0xdc>
 8008da8:	9b02      	ldr	r3, [sp, #8]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	dcae      	bgt.n	8008d0c <_dtoa_r+0xb24>
 8008dae:	9b06      	ldr	r3, [sp, #24]
 8008db0:	2b02      	cmp	r3, #2
 8008db2:	f73f aea8 	bgt.w	8008b06 <_dtoa_r+0x91e>
 8008db6:	e7a9      	b.n	8008d0c <_dtoa_r+0xb24>
 8008db8:	0800b448 	.word	0x0800b448
 8008dbc:	0800b24c 	.word	0x0800b24c
 8008dc0:	0800b3c9 	.word	0x0800b3c9

08008dc4 <__sflush_r>:
 8008dc4:	898a      	ldrh	r2, [r1, #12]
 8008dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dca:	4605      	mov	r5, r0
 8008dcc:	0710      	lsls	r0, r2, #28
 8008dce:	460c      	mov	r4, r1
 8008dd0:	d458      	bmi.n	8008e84 <__sflush_r+0xc0>
 8008dd2:	684b      	ldr	r3, [r1, #4]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	dc05      	bgt.n	8008de4 <__sflush_r+0x20>
 8008dd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	dc02      	bgt.n	8008de4 <__sflush_r+0x20>
 8008dde:	2000      	movs	r0, #0
 8008de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008de4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008de6:	2e00      	cmp	r6, #0
 8008de8:	d0f9      	beq.n	8008dde <__sflush_r+0x1a>
 8008dea:	2300      	movs	r3, #0
 8008dec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008df0:	682f      	ldr	r7, [r5, #0]
 8008df2:	602b      	str	r3, [r5, #0]
 8008df4:	d032      	beq.n	8008e5c <__sflush_r+0x98>
 8008df6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008df8:	89a3      	ldrh	r3, [r4, #12]
 8008dfa:	075a      	lsls	r2, r3, #29
 8008dfc:	d505      	bpl.n	8008e0a <__sflush_r+0x46>
 8008dfe:	6863      	ldr	r3, [r4, #4]
 8008e00:	1ac0      	subs	r0, r0, r3
 8008e02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e04:	b10b      	cbz	r3, 8008e0a <__sflush_r+0x46>
 8008e06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e08:	1ac0      	subs	r0, r0, r3
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e10:	6a21      	ldr	r1, [r4, #32]
 8008e12:	4628      	mov	r0, r5
 8008e14:	47b0      	blx	r6
 8008e16:	1c43      	adds	r3, r0, #1
 8008e18:	89a3      	ldrh	r3, [r4, #12]
 8008e1a:	d106      	bne.n	8008e2a <__sflush_r+0x66>
 8008e1c:	6829      	ldr	r1, [r5, #0]
 8008e1e:	291d      	cmp	r1, #29
 8008e20:	d82c      	bhi.n	8008e7c <__sflush_r+0xb8>
 8008e22:	4a2a      	ldr	r2, [pc, #168]	; (8008ecc <__sflush_r+0x108>)
 8008e24:	40ca      	lsrs	r2, r1
 8008e26:	07d6      	lsls	r6, r2, #31
 8008e28:	d528      	bpl.n	8008e7c <__sflush_r+0xb8>
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	6062      	str	r2, [r4, #4]
 8008e2e:	04d9      	lsls	r1, r3, #19
 8008e30:	6922      	ldr	r2, [r4, #16]
 8008e32:	6022      	str	r2, [r4, #0]
 8008e34:	d504      	bpl.n	8008e40 <__sflush_r+0x7c>
 8008e36:	1c42      	adds	r2, r0, #1
 8008e38:	d101      	bne.n	8008e3e <__sflush_r+0x7a>
 8008e3a:	682b      	ldr	r3, [r5, #0]
 8008e3c:	b903      	cbnz	r3, 8008e40 <__sflush_r+0x7c>
 8008e3e:	6560      	str	r0, [r4, #84]	; 0x54
 8008e40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e42:	602f      	str	r7, [r5, #0]
 8008e44:	2900      	cmp	r1, #0
 8008e46:	d0ca      	beq.n	8008dde <__sflush_r+0x1a>
 8008e48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e4c:	4299      	cmp	r1, r3
 8008e4e:	d002      	beq.n	8008e56 <__sflush_r+0x92>
 8008e50:	4628      	mov	r0, r5
 8008e52:	f001 fa3b 	bl	800a2cc <_free_r>
 8008e56:	2000      	movs	r0, #0
 8008e58:	6360      	str	r0, [r4, #52]	; 0x34
 8008e5a:	e7c1      	b.n	8008de0 <__sflush_r+0x1c>
 8008e5c:	6a21      	ldr	r1, [r4, #32]
 8008e5e:	2301      	movs	r3, #1
 8008e60:	4628      	mov	r0, r5
 8008e62:	47b0      	blx	r6
 8008e64:	1c41      	adds	r1, r0, #1
 8008e66:	d1c7      	bne.n	8008df8 <__sflush_r+0x34>
 8008e68:	682b      	ldr	r3, [r5, #0]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d0c4      	beq.n	8008df8 <__sflush_r+0x34>
 8008e6e:	2b1d      	cmp	r3, #29
 8008e70:	d001      	beq.n	8008e76 <__sflush_r+0xb2>
 8008e72:	2b16      	cmp	r3, #22
 8008e74:	d101      	bne.n	8008e7a <__sflush_r+0xb6>
 8008e76:	602f      	str	r7, [r5, #0]
 8008e78:	e7b1      	b.n	8008dde <__sflush_r+0x1a>
 8008e7a:	89a3      	ldrh	r3, [r4, #12]
 8008e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e80:	81a3      	strh	r3, [r4, #12]
 8008e82:	e7ad      	b.n	8008de0 <__sflush_r+0x1c>
 8008e84:	690f      	ldr	r7, [r1, #16]
 8008e86:	2f00      	cmp	r7, #0
 8008e88:	d0a9      	beq.n	8008dde <__sflush_r+0x1a>
 8008e8a:	0793      	lsls	r3, r2, #30
 8008e8c:	680e      	ldr	r6, [r1, #0]
 8008e8e:	bf08      	it	eq
 8008e90:	694b      	ldreq	r3, [r1, #20]
 8008e92:	600f      	str	r7, [r1, #0]
 8008e94:	bf18      	it	ne
 8008e96:	2300      	movne	r3, #0
 8008e98:	eba6 0807 	sub.w	r8, r6, r7
 8008e9c:	608b      	str	r3, [r1, #8]
 8008e9e:	f1b8 0f00 	cmp.w	r8, #0
 8008ea2:	dd9c      	ble.n	8008dde <__sflush_r+0x1a>
 8008ea4:	6a21      	ldr	r1, [r4, #32]
 8008ea6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ea8:	4643      	mov	r3, r8
 8008eaa:	463a      	mov	r2, r7
 8008eac:	4628      	mov	r0, r5
 8008eae:	47b0      	blx	r6
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	dc06      	bgt.n	8008ec2 <__sflush_r+0xfe>
 8008eb4:	89a3      	ldrh	r3, [r4, #12]
 8008eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008eba:	81a3      	strh	r3, [r4, #12]
 8008ebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ec0:	e78e      	b.n	8008de0 <__sflush_r+0x1c>
 8008ec2:	4407      	add	r7, r0
 8008ec4:	eba8 0800 	sub.w	r8, r8, r0
 8008ec8:	e7e9      	b.n	8008e9e <__sflush_r+0xda>
 8008eca:	bf00      	nop
 8008ecc:	20400001 	.word	0x20400001

08008ed0 <_fflush_r>:
 8008ed0:	b538      	push	{r3, r4, r5, lr}
 8008ed2:	690b      	ldr	r3, [r1, #16]
 8008ed4:	4605      	mov	r5, r0
 8008ed6:	460c      	mov	r4, r1
 8008ed8:	b913      	cbnz	r3, 8008ee0 <_fflush_r+0x10>
 8008eda:	2500      	movs	r5, #0
 8008edc:	4628      	mov	r0, r5
 8008ede:	bd38      	pop	{r3, r4, r5, pc}
 8008ee0:	b118      	cbz	r0, 8008eea <_fflush_r+0x1a>
 8008ee2:	6983      	ldr	r3, [r0, #24]
 8008ee4:	b90b      	cbnz	r3, 8008eea <_fflush_r+0x1a>
 8008ee6:	f000 f887 	bl	8008ff8 <__sinit>
 8008eea:	4b14      	ldr	r3, [pc, #80]	; (8008f3c <_fflush_r+0x6c>)
 8008eec:	429c      	cmp	r4, r3
 8008eee:	d11b      	bne.n	8008f28 <_fflush_r+0x58>
 8008ef0:	686c      	ldr	r4, [r5, #4]
 8008ef2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d0ef      	beq.n	8008eda <_fflush_r+0xa>
 8008efa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008efc:	07d0      	lsls	r0, r2, #31
 8008efe:	d404      	bmi.n	8008f0a <_fflush_r+0x3a>
 8008f00:	0599      	lsls	r1, r3, #22
 8008f02:	d402      	bmi.n	8008f0a <_fflush_r+0x3a>
 8008f04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f06:	f000 fc88 	bl	800981a <__retarget_lock_acquire_recursive>
 8008f0a:	4628      	mov	r0, r5
 8008f0c:	4621      	mov	r1, r4
 8008f0e:	f7ff ff59 	bl	8008dc4 <__sflush_r>
 8008f12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f14:	07da      	lsls	r2, r3, #31
 8008f16:	4605      	mov	r5, r0
 8008f18:	d4e0      	bmi.n	8008edc <_fflush_r+0xc>
 8008f1a:	89a3      	ldrh	r3, [r4, #12]
 8008f1c:	059b      	lsls	r3, r3, #22
 8008f1e:	d4dd      	bmi.n	8008edc <_fflush_r+0xc>
 8008f20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f22:	f000 fc7b 	bl	800981c <__retarget_lock_release_recursive>
 8008f26:	e7d9      	b.n	8008edc <_fflush_r+0xc>
 8008f28:	4b05      	ldr	r3, [pc, #20]	; (8008f40 <_fflush_r+0x70>)
 8008f2a:	429c      	cmp	r4, r3
 8008f2c:	d101      	bne.n	8008f32 <_fflush_r+0x62>
 8008f2e:	68ac      	ldr	r4, [r5, #8]
 8008f30:	e7df      	b.n	8008ef2 <_fflush_r+0x22>
 8008f32:	4b04      	ldr	r3, [pc, #16]	; (8008f44 <_fflush_r+0x74>)
 8008f34:	429c      	cmp	r4, r3
 8008f36:	bf08      	it	eq
 8008f38:	68ec      	ldreq	r4, [r5, #12]
 8008f3a:	e7da      	b.n	8008ef2 <_fflush_r+0x22>
 8008f3c:	0800b47c 	.word	0x0800b47c
 8008f40:	0800b49c 	.word	0x0800b49c
 8008f44:	0800b45c 	.word	0x0800b45c

08008f48 <std>:
 8008f48:	2300      	movs	r3, #0
 8008f4a:	b510      	push	{r4, lr}
 8008f4c:	4604      	mov	r4, r0
 8008f4e:	e9c0 3300 	strd	r3, r3, [r0]
 8008f52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f56:	6083      	str	r3, [r0, #8]
 8008f58:	8181      	strh	r1, [r0, #12]
 8008f5a:	6643      	str	r3, [r0, #100]	; 0x64
 8008f5c:	81c2      	strh	r2, [r0, #14]
 8008f5e:	6183      	str	r3, [r0, #24]
 8008f60:	4619      	mov	r1, r3
 8008f62:	2208      	movs	r2, #8
 8008f64:	305c      	adds	r0, #92	; 0x5c
 8008f66:	f7fd f9eb 	bl	8006340 <memset>
 8008f6a:	4b05      	ldr	r3, [pc, #20]	; (8008f80 <std+0x38>)
 8008f6c:	6263      	str	r3, [r4, #36]	; 0x24
 8008f6e:	4b05      	ldr	r3, [pc, #20]	; (8008f84 <std+0x3c>)
 8008f70:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f72:	4b05      	ldr	r3, [pc, #20]	; (8008f88 <std+0x40>)
 8008f74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f76:	4b05      	ldr	r3, [pc, #20]	; (8008f8c <std+0x44>)
 8008f78:	6224      	str	r4, [r4, #32]
 8008f7a:	6323      	str	r3, [r4, #48]	; 0x30
 8008f7c:	bd10      	pop	{r4, pc}
 8008f7e:	bf00      	nop
 8008f80:	0800a779 	.word	0x0800a779
 8008f84:	0800a79b 	.word	0x0800a79b
 8008f88:	0800a7d3 	.word	0x0800a7d3
 8008f8c:	0800a7f7 	.word	0x0800a7f7

08008f90 <_cleanup_r>:
 8008f90:	4901      	ldr	r1, [pc, #4]	; (8008f98 <_cleanup_r+0x8>)
 8008f92:	f000 b8af 	b.w	80090f4 <_fwalk_reent>
 8008f96:	bf00      	nop
 8008f98:	08008ed1 	.word	0x08008ed1

08008f9c <__sfmoreglue>:
 8008f9c:	b570      	push	{r4, r5, r6, lr}
 8008f9e:	2268      	movs	r2, #104	; 0x68
 8008fa0:	1e4d      	subs	r5, r1, #1
 8008fa2:	4355      	muls	r5, r2
 8008fa4:	460e      	mov	r6, r1
 8008fa6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008faa:	f001 f9fb 	bl	800a3a4 <_malloc_r>
 8008fae:	4604      	mov	r4, r0
 8008fb0:	b140      	cbz	r0, 8008fc4 <__sfmoreglue+0x28>
 8008fb2:	2100      	movs	r1, #0
 8008fb4:	e9c0 1600 	strd	r1, r6, [r0]
 8008fb8:	300c      	adds	r0, #12
 8008fba:	60a0      	str	r0, [r4, #8]
 8008fbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008fc0:	f7fd f9be 	bl	8006340 <memset>
 8008fc4:	4620      	mov	r0, r4
 8008fc6:	bd70      	pop	{r4, r5, r6, pc}

08008fc8 <__sfp_lock_acquire>:
 8008fc8:	4801      	ldr	r0, [pc, #4]	; (8008fd0 <__sfp_lock_acquire+0x8>)
 8008fca:	f000 bc26 	b.w	800981a <__retarget_lock_acquire_recursive>
 8008fce:	bf00      	nop
 8008fd0:	20001f95 	.word	0x20001f95

08008fd4 <__sfp_lock_release>:
 8008fd4:	4801      	ldr	r0, [pc, #4]	; (8008fdc <__sfp_lock_release+0x8>)
 8008fd6:	f000 bc21 	b.w	800981c <__retarget_lock_release_recursive>
 8008fda:	bf00      	nop
 8008fdc:	20001f95 	.word	0x20001f95

08008fe0 <__sinit_lock_acquire>:
 8008fe0:	4801      	ldr	r0, [pc, #4]	; (8008fe8 <__sinit_lock_acquire+0x8>)
 8008fe2:	f000 bc1a 	b.w	800981a <__retarget_lock_acquire_recursive>
 8008fe6:	bf00      	nop
 8008fe8:	20001f96 	.word	0x20001f96

08008fec <__sinit_lock_release>:
 8008fec:	4801      	ldr	r0, [pc, #4]	; (8008ff4 <__sinit_lock_release+0x8>)
 8008fee:	f000 bc15 	b.w	800981c <__retarget_lock_release_recursive>
 8008ff2:	bf00      	nop
 8008ff4:	20001f96 	.word	0x20001f96

08008ff8 <__sinit>:
 8008ff8:	b510      	push	{r4, lr}
 8008ffa:	4604      	mov	r4, r0
 8008ffc:	f7ff fff0 	bl	8008fe0 <__sinit_lock_acquire>
 8009000:	69a3      	ldr	r3, [r4, #24]
 8009002:	b11b      	cbz	r3, 800900c <__sinit+0x14>
 8009004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009008:	f7ff bff0 	b.w	8008fec <__sinit_lock_release>
 800900c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009010:	6523      	str	r3, [r4, #80]	; 0x50
 8009012:	4b13      	ldr	r3, [pc, #76]	; (8009060 <__sinit+0x68>)
 8009014:	4a13      	ldr	r2, [pc, #76]	; (8009064 <__sinit+0x6c>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	62a2      	str	r2, [r4, #40]	; 0x28
 800901a:	42a3      	cmp	r3, r4
 800901c:	bf04      	itt	eq
 800901e:	2301      	moveq	r3, #1
 8009020:	61a3      	streq	r3, [r4, #24]
 8009022:	4620      	mov	r0, r4
 8009024:	f000 f820 	bl	8009068 <__sfp>
 8009028:	6060      	str	r0, [r4, #4]
 800902a:	4620      	mov	r0, r4
 800902c:	f000 f81c 	bl	8009068 <__sfp>
 8009030:	60a0      	str	r0, [r4, #8]
 8009032:	4620      	mov	r0, r4
 8009034:	f000 f818 	bl	8009068 <__sfp>
 8009038:	2200      	movs	r2, #0
 800903a:	60e0      	str	r0, [r4, #12]
 800903c:	2104      	movs	r1, #4
 800903e:	6860      	ldr	r0, [r4, #4]
 8009040:	f7ff ff82 	bl	8008f48 <std>
 8009044:	68a0      	ldr	r0, [r4, #8]
 8009046:	2201      	movs	r2, #1
 8009048:	2109      	movs	r1, #9
 800904a:	f7ff ff7d 	bl	8008f48 <std>
 800904e:	68e0      	ldr	r0, [r4, #12]
 8009050:	2202      	movs	r2, #2
 8009052:	2112      	movs	r1, #18
 8009054:	f7ff ff78 	bl	8008f48 <std>
 8009058:	2301      	movs	r3, #1
 800905a:	61a3      	str	r3, [r4, #24]
 800905c:	e7d2      	b.n	8009004 <__sinit+0xc>
 800905e:	bf00      	nop
 8009060:	0800b238 	.word	0x0800b238
 8009064:	08008f91 	.word	0x08008f91

08009068 <__sfp>:
 8009068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800906a:	4607      	mov	r7, r0
 800906c:	f7ff ffac 	bl	8008fc8 <__sfp_lock_acquire>
 8009070:	4b1e      	ldr	r3, [pc, #120]	; (80090ec <__sfp+0x84>)
 8009072:	681e      	ldr	r6, [r3, #0]
 8009074:	69b3      	ldr	r3, [r6, #24]
 8009076:	b913      	cbnz	r3, 800907e <__sfp+0x16>
 8009078:	4630      	mov	r0, r6
 800907a:	f7ff ffbd 	bl	8008ff8 <__sinit>
 800907e:	3648      	adds	r6, #72	; 0x48
 8009080:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009084:	3b01      	subs	r3, #1
 8009086:	d503      	bpl.n	8009090 <__sfp+0x28>
 8009088:	6833      	ldr	r3, [r6, #0]
 800908a:	b30b      	cbz	r3, 80090d0 <__sfp+0x68>
 800908c:	6836      	ldr	r6, [r6, #0]
 800908e:	e7f7      	b.n	8009080 <__sfp+0x18>
 8009090:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009094:	b9d5      	cbnz	r5, 80090cc <__sfp+0x64>
 8009096:	4b16      	ldr	r3, [pc, #88]	; (80090f0 <__sfp+0x88>)
 8009098:	60e3      	str	r3, [r4, #12]
 800909a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800909e:	6665      	str	r5, [r4, #100]	; 0x64
 80090a0:	f000 fbba 	bl	8009818 <__retarget_lock_init_recursive>
 80090a4:	f7ff ff96 	bl	8008fd4 <__sfp_lock_release>
 80090a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80090ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80090b0:	6025      	str	r5, [r4, #0]
 80090b2:	61a5      	str	r5, [r4, #24]
 80090b4:	2208      	movs	r2, #8
 80090b6:	4629      	mov	r1, r5
 80090b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80090bc:	f7fd f940 	bl	8006340 <memset>
 80090c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80090c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80090c8:	4620      	mov	r0, r4
 80090ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090cc:	3468      	adds	r4, #104	; 0x68
 80090ce:	e7d9      	b.n	8009084 <__sfp+0x1c>
 80090d0:	2104      	movs	r1, #4
 80090d2:	4638      	mov	r0, r7
 80090d4:	f7ff ff62 	bl	8008f9c <__sfmoreglue>
 80090d8:	4604      	mov	r4, r0
 80090da:	6030      	str	r0, [r6, #0]
 80090dc:	2800      	cmp	r0, #0
 80090de:	d1d5      	bne.n	800908c <__sfp+0x24>
 80090e0:	f7ff ff78 	bl	8008fd4 <__sfp_lock_release>
 80090e4:	230c      	movs	r3, #12
 80090e6:	603b      	str	r3, [r7, #0]
 80090e8:	e7ee      	b.n	80090c8 <__sfp+0x60>
 80090ea:	bf00      	nop
 80090ec:	0800b238 	.word	0x0800b238
 80090f0:	ffff0001 	.word	0xffff0001

080090f4 <_fwalk_reent>:
 80090f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090f8:	4606      	mov	r6, r0
 80090fa:	4688      	mov	r8, r1
 80090fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009100:	2700      	movs	r7, #0
 8009102:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009106:	f1b9 0901 	subs.w	r9, r9, #1
 800910a:	d505      	bpl.n	8009118 <_fwalk_reent+0x24>
 800910c:	6824      	ldr	r4, [r4, #0]
 800910e:	2c00      	cmp	r4, #0
 8009110:	d1f7      	bne.n	8009102 <_fwalk_reent+0xe>
 8009112:	4638      	mov	r0, r7
 8009114:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009118:	89ab      	ldrh	r3, [r5, #12]
 800911a:	2b01      	cmp	r3, #1
 800911c:	d907      	bls.n	800912e <_fwalk_reent+0x3a>
 800911e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009122:	3301      	adds	r3, #1
 8009124:	d003      	beq.n	800912e <_fwalk_reent+0x3a>
 8009126:	4629      	mov	r1, r5
 8009128:	4630      	mov	r0, r6
 800912a:	47c0      	blx	r8
 800912c:	4307      	orrs	r7, r0
 800912e:	3568      	adds	r5, #104	; 0x68
 8009130:	e7e9      	b.n	8009106 <_fwalk_reent+0x12>

08009132 <rshift>:
 8009132:	6903      	ldr	r3, [r0, #16]
 8009134:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800913c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009140:	f100 0414 	add.w	r4, r0, #20
 8009144:	dd45      	ble.n	80091d2 <rshift+0xa0>
 8009146:	f011 011f 	ands.w	r1, r1, #31
 800914a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800914e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009152:	d10c      	bne.n	800916e <rshift+0x3c>
 8009154:	f100 0710 	add.w	r7, r0, #16
 8009158:	4629      	mov	r1, r5
 800915a:	42b1      	cmp	r1, r6
 800915c:	d334      	bcc.n	80091c8 <rshift+0x96>
 800915e:	1a9b      	subs	r3, r3, r2
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	1eea      	subs	r2, r5, #3
 8009164:	4296      	cmp	r6, r2
 8009166:	bf38      	it	cc
 8009168:	2300      	movcc	r3, #0
 800916a:	4423      	add	r3, r4
 800916c:	e015      	b.n	800919a <rshift+0x68>
 800916e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009172:	f1c1 0820 	rsb	r8, r1, #32
 8009176:	40cf      	lsrs	r7, r1
 8009178:	f105 0e04 	add.w	lr, r5, #4
 800917c:	46a1      	mov	r9, r4
 800917e:	4576      	cmp	r6, lr
 8009180:	46f4      	mov	ip, lr
 8009182:	d815      	bhi.n	80091b0 <rshift+0x7e>
 8009184:	1a9a      	subs	r2, r3, r2
 8009186:	0092      	lsls	r2, r2, #2
 8009188:	3a04      	subs	r2, #4
 800918a:	3501      	adds	r5, #1
 800918c:	42ae      	cmp	r6, r5
 800918e:	bf38      	it	cc
 8009190:	2200      	movcc	r2, #0
 8009192:	18a3      	adds	r3, r4, r2
 8009194:	50a7      	str	r7, [r4, r2]
 8009196:	b107      	cbz	r7, 800919a <rshift+0x68>
 8009198:	3304      	adds	r3, #4
 800919a:	1b1a      	subs	r2, r3, r4
 800919c:	42a3      	cmp	r3, r4
 800919e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80091a2:	bf08      	it	eq
 80091a4:	2300      	moveq	r3, #0
 80091a6:	6102      	str	r2, [r0, #16]
 80091a8:	bf08      	it	eq
 80091aa:	6143      	streq	r3, [r0, #20]
 80091ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091b0:	f8dc c000 	ldr.w	ip, [ip]
 80091b4:	fa0c fc08 	lsl.w	ip, ip, r8
 80091b8:	ea4c 0707 	orr.w	r7, ip, r7
 80091bc:	f849 7b04 	str.w	r7, [r9], #4
 80091c0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80091c4:	40cf      	lsrs	r7, r1
 80091c6:	e7da      	b.n	800917e <rshift+0x4c>
 80091c8:	f851 cb04 	ldr.w	ip, [r1], #4
 80091cc:	f847 cf04 	str.w	ip, [r7, #4]!
 80091d0:	e7c3      	b.n	800915a <rshift+0x28>
 80091d2:	4623      	mov	r3, r4
 80091d4:	e7e1      	b.n	800919a <rshift+0x68>

080091d6 <__hexdig_fun>:
 80091d6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80091da:	2b09      	cmp	r3, #9
 80091dc:	d802      	bhi.n	80091e4 <__hexdig_fun+0xe>
 80091de:	3820      	subs	r0, #32
 80091e0:	b2c0      	uxtb	r0, r0
 80091e2:	4770      	bx	lr
 80091e4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80091e8:	2b05      	cmp	r3, #5
 80091ea:	d801      	bhi.n	80091f0 <__hexdig_fun+0x1a>
 80091ec:	3847      	subs	r0, #71	; 0x47
 80091ee:	e7f7      	b.n	80091e0 <__hexdig_fun+0xa>
 80091f0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80091f4:	2b05      	cmp	r3, #5
 80091f6:	d801      	bhi.n	80091fc <__hexdig_fun+0x26>
 80091f8:	3827      	subs	r0, #39	; 0x27
 80091fa:	e7f1      	b.n	80091e0 <__hexdig_fun+0xa>
 80091fc:	2000      	movs	r0, #0
 80091fe:	4770      	bx	lr

08009200 <__gethex>:
 8009200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009204:	ed2d 8b02 	vpush	{d8}
 8009208:	b089      	sub	sp, #36	; 0x24
 800920a:	ee08 0a10 	vmov	s16, r0
 800920e:	9304      	str	r3, [sp, #16]
 8009210:	4bb4      	ldr	r3, [pc, #720]	; (80094e4 <__gethex+0x2e4>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	9301      	str	r3, [sp, #4]
 8009216:	4618      	mov	r0, r3
 8009218:	468b      	mov	fp, r1
 800921a:	4690      	mov	r8, r2
 800921c:	f7f6 ffe8 	bl	80001f0 <strlen>
 8009220:	9b01      	ldr	r3, [sp, #4]
 8009222:	f8db 2000 	ldr.w	r2, [fp]
 8009226:	4403      	add	r3, r0
 8009228:	4682      	mov	sl, r0
 800922a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800922e:	9305      	str	r3, [sp, #20]
 8009230:	1c93      	adds	r3, r2, #2
 8009232:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009236:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800923a:	32fe      	adds	r2, #254	; 0xfe
 800923c:	18d1      	adds	r1, r2, r3
 800923e:	461f      	mov	r7, r3
 8009240:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009244:	9100      	str	r1, [sp, #0]
 8009246:	2830      	cmp	r0, #48	; 0x30
 8009248:	d0f8      	beq.n	800923c <__gethex+0x3c>
 800924a:	f7ff ffc4 	bl	80091d6 <__hexdig_fun>
 800924e:	4604      	mov	r4, r0
 8009250:	2800      	cmp	r0, #0
 8009252:	d13a      	bne.n	80092ca <__gethex+0xca>
 8009254:	9901      	ldr	r1, [sp, #4]
 8009256:	4652      	mov	r2, sl
 8009258:	4638      	mov	r0, r7
 800925a:	f001 fad0 	bl	800a7fe <strncmp>
 800925e:	4605      	mov	r5, r0
 8009260:	2800      	cmp	r0, #0
 8009262:	d168      	bne.n	8009336 <__gethex+0x136>
 8009264:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009268:	eb07 060a 	add.w	r6, r7, sl
 800926c:	f7ff ffb3 	bl	80091d6 <__hexdig_fun>
 8009270:	2800      	cmp	r0, #0
 8009272:	d062      	beq.n	800933a <__gethex+0x13a>
 8009274:	4633      	mov	r3, r6
 8009276:	7818      	ldrb	r0, [r3, #0]
 8009278:	2830      	cmp	r0, #48	; 0x30
 800927a:	461f      	mov	r7, r3
 800927c:	f103 0301 	add.w	r3, r3, #1
 8009280:	d0f9      	beq.n	8009276 <__gethex+0x76>
 8009282:	f7ff ffa8 	bl	80091d6 <__hexdig_fun>
 8009286:	2301      	movs	r3, #1
 8009288:	fab0 f480 	clz	r4, r0
 800928c:	0964      	lsrs	r4, r4, #5
 800928e:	4635      	mov	r5, r6
 8009290:	9300      	str	r3, [sp, #0]
 8009292:	463a      	mov	r2, r7
 8009294:	4616      	mov	r6, r2
 8009296:	3201      	adds	r2, #1
 8009298:	7830      	ldrb	r0, [r6, #0]
 800929a:	f7ff ff9c 	bl	80091d6 <__hexdig_fun>
 800929e:	2800      	cmp	r0, #0
 80092a0:	d1f8      	bne.n	8009294 <__gethex+0x94>
 80092a2:	9901      	ldr	r1, [sp, #4]
 80092a4:	4652      	mov	r2, sl
 80092a6:	4630      	mov	r0, r6
 80092a8:	f001 faa9 	bl	800a7fe <strncmp>
 80092ac:	b980      	cbnz	r0, 80092d0 <__gethex+0xd0>
 80092ae:	b94d      	cbnz	r5, 80092c4 <__gethex+0xc4>
 80092b0:	eb06 050a 	add.w	r5, r6, sl
 80092b4:	462a      	mov	r2, r5
 80092b6:	4616      	mov	r6, r2
 80092b8:	3201      	adds	r2, #1
 80092ba:	7830      	ldrb	r0, [r6, #0]
 80092bc:	f7ff ff8b 	bl	80091d6 <__hexdig_fun>
 80092c0:	2800      	cmp	r0, #0
 80092c2:	d1f8      	bne.n	80092b6 <__gethex+0xb6>
 80092c4:	1bad      	subs	r5, r5, r6
 80092c6:	00ad      	lsls	r5, r5, #2
 80092c8:	e004      	b.n	80092d4 <__gethex+0xd4>
 80092ca:	2400      	movs	r4, #0
 80092cc:	4625      	mov	r5, r4
 80092ce:	e7e0      	b.n	8009292 <__gethex+0x92>
 80092d0:	2d00      	cmp	r5, #0
 80092d2:	d1f7      	bne.n	80092c4 <__gethex+0xc4>
 80092d4:	7833      	ldrb	r3, [r6, #0]
 80092d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80092da:	2b50      	cmp	r3, #80	; 0x50
 80092dc:	d13b      	bne.n	8009356 <__gethex+0x156>
 80092de:	7873      	ldrb	r3, [r6, #1]
 80092e0:	2b2b      	cmp	r3, #43	; 0x2b
 80092e2:	d02c      	beq.n	800933e <__gethex+0x13e>
 80092e4:	2b2d      	cmp	r3, #45	; 0x2d
 80092e6:	d02e      	beq.n	8009346 <__gethex+0x146>
 80092e8:	1c71      	adds	r1, r6, #1
 80092ea:	f04f 0900 	mov.w	r9, #0
 80092ee:	7808      	ldrb	r0, [r1, #0]
 80092f0:	f7ff ff71 	bl	80091d6 <__hexdig_fun>
 80092f4:	1e43      	subs	r3, r0, #1
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	2b18      	cmp	r3, #24
 80092fa:	d82c      	bhi.n	8009356 <__gethex+0x156>
 80092fc:	f1a0 0210 	sub.w	r2, r0, #16
 8009300:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009304:	f7ff ff67 	bl	80091d6 <__hexdig_fun>
 8009308:	1e43      	subs	r3, r0, #1
 800930a:	b2db      	uxtb	r3, r3
 800930c:	2b18      	cmp	r3, #24
 800930e:	d91d      	bls.n	800934c <__gethex+0x14c>
 8009310:	f1b9 0f00 	cmp.w	r9, #0
 8009314:	d000      	beq.n	8009318 <__gethex+0x118>
 8009316:	4252      	negs	r2, r2
 8009318:	4415      	add	r5, r2
 800931a:	f8cb 1000 	str.w	r1, [fp]
 800931e:	b1e4      	cbz	r4, 800935a <__gethex+0x15a>
 8009320:	9b00      	ldr	r3, [sp, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	bf14      	ite	ne
 8009326:	2700      	movne	r7, #0
 8009328:	2706      	moveq	r7, #6
 800932a:	4638      	mov	r0, r7
 800932c:	b009      	add	sp, #36	; 0x24
 800932e:	ecbd 8b02 	vpop	{d8}
 8009332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009336:	463e      	mov	r6, r7
 8009338:	4625      	mov	r5, r4
 800933a:	2401      	movs	r4, #1
 800933c:	e7ca      	b.n	80092d4 <__gethex+0xd4>
 800933e:	f04f 0900 	mov.w	r9, #0
 8009342:	1cb1      	adds	r1, r6, #2
 8009344:	e7d3      	b.n	80092ee <__gethex+0xee>
 8009346:	f04f 0901 	mov.w	r9, #1
 800934a:	e7fa      	b.n	8009342 <__gethex+0x142>
 800934c:	230a      	movs	r3, #10
 800934e:	fb03 0202 	mla	r2, r3, r2, r0
 8009352:	3a10      	subs	r2, #16
 8009354:	e7d4      	b.n	8009300 <__gethex+0x100>
 8009356:	4631      	mov	r1, r6
 8009358:	e7df      	b.n	800931a <__gethex+0x11a>
 800935a:	1bf3      	subs	r3, r6, r7
 800935c:	3b01      	subs	r3, #1
 800935e:	4621      	mov	r1, r4
 8009360:	2b07      	cmp	r3, #7
 8009362:	dc0b      	bgt.n	800937c <__gethex+0x17c>
 8009364:	ee18 0a10 	vmov	r0, s16
 8009368:	f000 fad8 	bl	800991c <_Balloc>
 800936c:	4604      	mov	r4, r0
 800936e:	b940      	cbnz	r0, 8009382 <__gethex+0x182>
 8009370:	4b5d      	ldr	r3, [pc, #372]	; (80094e8 <__gethex+0x2e8>)
 8009372:	4602      	mov	r2, r0
 8009374:	21de      	movs	r1, #222	; 0xde
 8009376:	485d      	ldr	r0, [pc, #372]	; (80094ec <__gethex+0x2ec>)
 8009378:	f001 fa74 	bl	800a864 <__assert_func>
 800937c:	3101      	adds	r1, #1
 800937e:	105b      	asrs	r3, r3, #1
 8009380:	e7ee      	b.n	8009360 <__gethex+0x160>
 8009382:	f100 0914 	add.w	r9, r0, #20
 8009386:	f04f 0b00 	mov.w	fp, #0
 800938a:	f1ca 0301 	rsb	r3, sl, #1
 800938e:	f8cd 9008 	str.w	r9, [sp, #8]
 8009392:	f8cd b000 	str.w	fp, [sp]
 8009396:	9306      	str	r3, [sp, #24]
 8009398:	42b7      	cmp	r7, r6
 800939a:	d340      	bcc.n	800941e <__gethex+0x21e>
 800939c:	9802      	ldr	r0, [sp, #8]
 800939e:	9b00      	ldr	r3, [sp, #0]
 80093a0:	f840 3b04 	str.w	r3, [r0], #4
 80093a4:	eba0 0009 	sub.w	r0, r0, r9
 80093a8:	1080      	asrs	r0, r0, #2
 80093aa:	0146      	lsls	r6, r0, #5
 80093ac:	6120      	str	r0, [r4, #16]
 80093ae:	4618      	mov	r0, r3
 80093b0:	f000 fba6 	bl	8009b00 <__hi0bits>
 80093b4:	1a30      	subs	r0, r6, r0
 80093b6:	f8d8 6000 	ldr.w	r6, [r8]
 80093ba:	42b0      	cmp	r0, r6
 80093bc:	dd63      	ble.n	8009486 <__gethex+0x286>
 80093be:	1b87      	subs	r7, r0, r6
 80093c0:	4639      	mov	r1, r7
 80093c2:	4620      	mov	r0, r4
 80093c4:	f000 ff4a 	bl	800a25c <__any_on>
 80093c8:	4682      	mov	sl, r0
 80093ca:	b1a8      	cbz	r0, 80093f8 <__gethex+0x1f8>
 80093cc:	1e7b      	subs	r3, r7, #1
 80093ce:	1159      	asrs	r1, r3, #5
 80093d0:	f003 021f 	and.w	r2, r3, #31
 80093d4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80093d8:	f04f 0a01 	mov.w	sl, #1
 80093dc:	fa0a f202 	lsl.w	r2, sl, r2
 80093e0:	420a      	tst	r2, r1
 80093e2:	d009      	beq.n	80093f8 <__gethex+0x1f8>
 80093e4:	4553      	cmp	r3, sl
 80093e6:	dd05      	ble.n	80093f4 <__gethex+0x1f4>
 80093e8:	1eb9      	subs	r1, r7, #2
 80093ea:	4620      	mov	r0, r4
 80093ec:	f000 ff36 	bl	800a25c <__any_on>
 80093f0:	2800      	cmp	r0, #0
 80093f2:	d145      	bne.n	8009480 <__gethex+0x280>
 80093f4:	f04f 0a02 	mov.w	sl, #2
 80093f8:	4639      	mov	r1, r7
 80093fa:	4620      	mov	r0, r4
 80093fc:	f7ff fe99 	bl	8009132 <rshift>
 8009400:	443d      	add	r5, r7
 8009402:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009406:	42ab      	cmp	r3, r5
 8009408:	da4c      	bge.n	80094a4 <__gethex+0x2a4>
 800940a:	ee18 0a10 	vmov	r0, s16
 800940e:	4621      	mov	r1, r4
 8009410:	f000 fac4 	bl	800999c <_Bfree>
 8009414:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009416:	2300      	movs	r3, #0
 8009418:	6013      	str	r3, [r2, #0]
 800941a:	27a3      	movs	r7, #163	; 0xa3
 800941c:	e785      	b.n	800932a <__gethex+0x12a>
 800941e:	1e73      	subs	r3, r6, #1
 8009420:	9a05      	ldr	r2, [sp, #20]
 8009422:	9303      	str	r3, [sp, #12]
 8009424:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009428:	4293      	cmp	r3, r2
 800942a:	d019      	beq.n	8009460 <__gethex+0x260>
 800942c:	f1bb 0f20 	cmp.w	fp, #32
 8009430:	d107      	bne.n	8009442 <__gethex+0x242>
 8009432:	9b02      	ldr	r3, [sp, #8]
 8009434:	9a00      	ldr	r2, [sp, #0]
 8009436:	f843 2b04 	str.w	r2, [r3], #4
 800943a:	9302      	str	r3, [sp, #8]
 800943c:	2300      	movs	r3, #0
 800943e:	9300      	str	r3, [sp, #0]
 8009440:	469b      	mov	fp, r3
 8009442:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009446:	f7ff fec6 	bl	80091d6 <__hexdig_fun>
 800944a:	9b00      	ldr	r3, [sp, #0]
 800944c:	f000 000f 	and.w	r0, r0, #15
 8009450:	fa00 f00b 	lsl.w	r0, r0, fp
 8009454:	4303      	orrs	r3, r0
 8009456:	9300      	str	r3, [sp, #0]
 8009458:	f10b 0b04 	add.w	fp, fp, #4
 800945c:	9b03      	ldr	r3, [sp, #12]
 800945e:	e00d      	b.n	800947c <__gethex+0x27c>
 8009460:	9b03      	ldr	r3, [sp, #12]
 8009462:	9a06      	ldr	r2, [sp, #24]
 8009464:	4413      	add	r3, r2
 8009466:	42bb      	cmp	r3, r7
 8009468:	d3e0      	bcc.n	800942c <__gethex+0x22c>
 800946a:	4618      	mov	r0, r3
 800946c:	9901      	ldr	r1, [sp, #4]
 800946e:	9307      	str	r3, [sp, #28]
 8009470:	4652      	mov	r2, sl
 8009472:	f001 f9c4 	bl	800a7fe <strncmp>
 8009476:	9b07      	ldr	r3, [sp, #28]
 8009478:	2800      	cmp	r0, #0
 800947a:	d1d7      	bne.n	800942c <__gethex+0x22c>
 800947c:	461e      	mov	r6, r3
 800947e:	e78b      	b.n	8009398 <__gethex+0x198>
 8009480:	f04f 0a03 	mov.w	sl, #3
 8009484:	e7b8      	b.n	80093f8 <__gethex+0x1f8>
 8009486:	da0a      	bge.n	800949e <__gethex+0x29e>
 8009488:	1a37      	subs	r7, r6, r0
 800948a:	4621      	mov	r1, r4
 800948c:	ee18 0a10 	vmov	r0, s16
 8009490:	463a      	mov	r2, r7
 8009492:	f000 fc9f 	bl	8009dd4 <__lshift>
 8009496:	1bed      	subs	r5, r5, r7
 8009498:	4604      	mov	r4, r0
 800949a:	f100 0914 	add.w	r9, r0, #20
 800949e:	f04f 0a00 	mov.w	sl, #0
 80094a2:	e7ae      	b.n	8009402 <__gethex+0x202>
 80094a4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80094a8:	42a8      	cmp	r0, r5
 80094aa:	dd72      	ble.n	8009592 <__gethex+0x392>
 80094ac:	1b45      	subs	r5, r0, r5
 80094ae:	42ae      	cmp	r6, r5
 80094b0:	dc36      	bgt.n	8009520 <__gethex+0x320>
 80094b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80094b6:	2b02      	cmp	r3, #2
 80094b8:	d02a      	beq.n	8009510 <__gethex+0x310>
 80094ba:	2b03      	cmp	r3, #3
 80094bc:	d02c      	beq.n	8009518 <__gethex+0x318>
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d11c      	bne.n	80094fc <__gethex+0x2fc>
 80094c2:	42ae      	cmp	r6, r5
 80094c4:	d11a      	bne.n	80094fc <__gethex+0x2fc>
 80094c6:	2e01      	cmp	r6, #1
 80094c8:	d112      	bne.n	80094f0 <__gethex+0x2f0>
 80094ca:	9a04      	ldr	r2, [sp, #16]
 80094cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80094d0:	6013      	str	r3, [r2, #0]
 80094d2:	2301      	movs	r3, #1
 80094d4:	6123      	str	r3, [r4, #16]
 80094d6:	f8c9 3000 	str.w	r3, [r9]
 80094da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80094dc:	2762      	movs	r7, #98	; 0x62
 80094de:	601c      	str	r4, [r3, #0]
 80094e0:	e723      	b.n	800932a <__gethex+0x12a>
 80094e2:	bf00      	nop
 80094e4:	0800b524 	.word	0x0800b524
 80094e8:	0800b448 	.word	0x0800b448
 80094ec:	0800b4bc 	.word	0x0800b4bc
 80094f0:	1e71      	subs	r1, r6, #1
 80094f2:	4620      	mov	r0, r4
 80094f4:	f000 feb2 	bl	800a25c <__any_on>
 80094f8:	2800      	cmp	r0, #0
 80094fa:	d1e6      	bne.n	80094ca <__gethex+0x2ca>
 80094fc:	ee18 0a10 	vmov	r0, s16
 8009500:	4621      	mov	r1, r4
 8009502:	f000 fa4b 	bl	800999c <_Bfree>
 8009506:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009508:	2300      	movs	r3, #0
 800950a:	6013      	str	r3, [r2, #0]
 800950c:	2750      	movs	r7, #80	; 0x50
 800950e:	e70c      	b.n	800932a <__gethex+0x12a>
 8009510:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009512:	2b00      	cmp	r3, #0
 8009514:	d1f2      	bne.n	80094fc <__gethex+0x2fc>
 8009516:	e7d8      	b.n	80094ca <__gethex+0x2ca>
 8009518:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1d5      	bne.n	80094ca <__gethex+0x2ca>
 800951e:	e7ed      	b.n	80094fc <__gethex+0x2fc>
 8009520:	1e6f      	subs	r7, r5, #1
 8009522:	f1ba 0f00 	cmp.w	sl, #0
 8009526:	d131      	bne.n	800958c <__gethex+0x38c>
 8009528:	b127      	cbz	r7, 8009534 <__gethex+0x334>
 800952a:	4639      	mov	r1, r7
 800952c:	4620      	mov	r0, r4
 800952e:	f000 fe95 	bl	800a25c <__any_on>
 8009532:	4682      	mov	sl, r0
 8009534:	117b      	asrs	r3, r7, #5
 8009536:	2101      	movs	r1, #1
 8009538:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800953c:	f007 071f 	and.w	r7, r7, #31
 8009540:	fa01 f707 	lsl.w	r7, r1, r7
 8009544:	421f      	tst	r7, r3
 8009546:	4629      	mov	r1, r5
 8009548:	4620      	mov	r0, r4
 800954a:	bf18      	it	ne
 800954c:	f04a 0a02 	orrne.w	sl, sl, #2
 8009550:	1b76      	subs	r6, r6, r5
 8009552:	f7ff fdee 	bl	8009132 <rshift>
 8009556:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800955a:	2702      	movs	r7, #2
 800955c:	f1ba 0f00 	cmp.w	sl, #0
 8009560:	d048      	beq.n	80095f4 <__gethex+0x3f4>
 8009562:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009566:	2b02      	cmp	r3, #2
 8009568:	d015      	beq.n	8009596 <__gethex+0x396>
 800956a:	2b03      	cmp	r3, #3
 800956c:	d017      	beq.n	800959e <__gethex+0x39e>
 800956e:	2b01      	cmp	r3, #1
 8009570:	d109      	bne.n	8009586 <__gethex+0x386>
 8009572:	f01a 0f02 	tst.w	sl, #2
 8009576:	d006      	beq.n	8009586 <__gethex+0x386>
 8009578:	f8d9 0000 	ldr.w	r0, [r9]
 800957c:	ea4a 0a00 	orr.w	sl, sl, r0
 8009580:	f01a 0f01 	tst.w	sl, #1
 8009584:	d10e      	bne.n	80095a4 <__gethex+0x3a4>
 8009586:	f047 0710 	orr.w	r7, r7, #16
 800958a:	e033      	b.n	80095f4 <__gethex+0x3f4>
 800958c:	f04f 0a01 	mov.w	sl, #1
 8009590:	e7d0      	b.n	8009534 <__gethex+0x334>
 8009592:	2701      	movs	r7, #1
 8009594:	e7e2      	b.n	800955c <__gethex+0x35c>
 8009596:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009598:	f1c3 0301 	rsb	r3, r3, #1
 800959c:	9315      	str	r3, [sp, #84]	; 0x54
 800959e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d0f0      	beq.n	8009586 <__gethex+0x386>
 80095a4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80095a8:	f104 0314 	add.w	r3, r4, #20
 80095ac:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80095b0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80095b4:	f04f 0c00 	mov.w	ip, #0
 80095b8:	4618      	mov	r0, r3
 80095ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80095be:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80095c2:	d01c      	beq.n	80095fe <__gethex+0x3fe>
 80095c4:	3201      	adds	r2, #1
 80095c6:	6002      	str	r2, [r0, #0]
 80095c8:	2f02      	cmp	r7, #2
 80095ca:	f104 0314 	add.w	r3, r4, #20
 80095ce:	d13f      	bne.n	8009650 <__gethex+0x450>
 80095d0:	f8d8 2000 	ldr.w	r2, [r8]
 80095d4:	3a01      	subs	r2, #1
 80095d6:	42b2      	cmp	r2, r6
 80095d8:	d10a      	bne.n	80095f0 <__gethex+0x3f0>
 80095da:	1171      	asrs	r1, r6, #5
 80095dc:	2201      	movs	r2, #1
 80095de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80095e2:	f006 061f 	and.w	r6, r6, #31
 80095e6:	fa02 f606 	lsl.w	r6, r2, r6
 80095ea:	421e      	tst	r6, r3
 80095ec:	bf18      	it	ne
 80095ee:	4617      	movne	r7, r2
 80095f0:	f047 0720 	orr.w	r7, r7, #32
 80095f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80095f6:	601c      	str	r4, [r3, #0]
 80095f8:	9b04      	ldr	r3, [sp, #16]
 80095fa:	601d      	str	r5, [r3, #0]
 80095fc:	e695      	b.n	800932a <__gethex+0x12a>
 80095fe:	4299      	cmp	r1, r3
 8009600:	f843 cc04 	str.w	ip, [r3, #-4]
 8009604:	d8d8      	bhi.n	80095b8 <__gethex+0x3b8>
 8009606:	68a3      	ldr	r3, [r4, #8]
 8009608:	459b      	cmp	fp, r3
 800960a:	db19      	blt.n	8009640 <__gethex+0x440>
 800960c:	6861      	ldr	r1, [r4, #4]
 800960e:	ee18 0a10 	vmov	r0, s16
 8009612:	3101      	adds	r1, #1
 8009614:	f000 f982 	bl	800991c <_Balloc>
 8009618:	4681      	mov	r9, r0
 800961a:	b918      	cbnz	r0, 8009624 <__gethex+0x424>
 800961c:	4b1a      	ldr	r3, [pc, #104]	; (8009688 <__gethex+0x488>)
 800961e:	4602      	mov	r2, r0
 8009620:	2184      	movs	r1, #132	; 0x84
 8009622:	e6a8      	b.n	8009376 <__gethex+0x176>
 8009624:	6922      	ldr	r2, [r4, #16]
 8009626:	3202      	adds	r2, #2
 8009628:	f104 010c 	add.w	r1, r4, #12
 800962c:	0092      	lsls	r2, r2, #2
 800962e:	300c      	adds	r0, #12
 8009630:	f7fc fe78 	bl	8006324 <memcpy>
 8009634:	4621      	mov	r1, r4
 8009636:	ee18 0a10 	vmov	r0, s16
 800963a:	f000 f9af 	bl	800999c <_Bfree>
 800963e:	464c      	mov	r4, r9
 8009640:	6923      	ldr	r3, [r4, #16]
 8009642:	1c5a      	adds	r2, r3, #1
 8009644:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009648:	6122      	str	r2, [r4, #16]
 800964a:	2201      	movs	r2, #1
 800964c:	615a      	str	r2, [r3, #20]
 800964e:	e7bb      	b.n	80095c8 <__gethex+0x3c8>
 8009650:	6922      	ldr	r2, [r4, #16]
 8009652:	455a      	cmp	r2, fp
 8009654:	dd0b      	ble.n	800966e <__gethex+0x46e>
 8009656:	2101      	movs	r1, #1
 8009658:	4620      	mov	r0, r4
 800965a:	f7ff fd6a 	bl	8009132 <rshift>
 800965e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009662:	3501      	adds	r5, #1
 8009664:	42ab      	cmp	r3, r5
 8009666:	f6ff aed0 	blt.w	800940a <__gethex+0x20a>
 800966a:	2701      	movs	r7, #1
 800966c:	e7c0      	b.n	80095f0 <__gethex+0x3f0>
 800966e:	f016 061f 	ands.w	r6, r6, #31
 8009672:	d0fa      	beq.n	800966a <__gethex+0x46a>
 8009674:	4453      	add	r3, sl
 8009676:	f1c6 0620 	rsb	r6, r6, #32
 800967a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800967e:	f000 fa3f 	bl	8009b00 <__hi0bits>
 8009682:	42b0      	cmp	r0, r6
 8009684:	dbe7      	blt.n	8009656 <__gethex+0x456>
 8009686:	e7f0      	b.n	800966a <__gethex+0x46a>
 8009688:	0800b448 	.word	0x0800b448

0800968c <L_shift>:
 800968c:	f1c2 0208 	rsb	r2, r2, #8
 8009690:	0092      	lsls	r2, r2, #2
 8009692:	b570      	push	{r4, r5, r6, lr}
 8009694:	f1c2 0620 	rsb	r6, r2, #32
 8009698:	6843      	ldr	r3, [r0, #4]
 800969a:	6804      	ldr	r4, [r0, #0]
 800969c:	fa03 f506 	lsl.w	r5, r3, r6
 80096a0:	432c      	orrs	r4, r5
 80096a2:	40d3      	lsrs	r3, r2
 80096a4:	6004      	str	r4, [r0, #0]
 80096a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80096aa:	4288      	cmp	r0, r1
 80096ac:	d3f4      	bcc.n	8009698 <L_shift+0xc>
 80096ae:	bd70      	pop	{r4, r5, r6, pc}

080096b0 <__match>:
 80096b0:	b530      	push	{r4, r5, lr}
 80096b2:	6803      	ldr	r3, [r0, #0]
 80096b4:	3301      	adds	r3, #1
 80096b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096ba:	b914      	cbnz	r4, 80096c2 <__match+0x12>
 80096bc:	6003      	str	r3, [r0, #0]
 80096be:	2001      	movs	r0, #1
 80096c0:	bd30      	pop	{r4, r5, pc}
 80096c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80096ca:	2d19      	cmp	r5, #25
 80096cc:	bf98      	it	ls
 80096ce:	3220      	addls	r2, #32
 80096d0:	42a2      	cmp	r2, r4
 80096d2:	d0f0      	beq.n	80096b6 <__match+0x6>
 80096d4:	2000      	movs	r0, #0
 80096d6:	e7f3      	b.n	80096c0 <__match+0x10>

080096d8 <__hexnan>:
 80096d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096dc:	680b      	ldr	r3, [r1, #0]
 80096de:	115e      	asrs	r6, r3, #5
 80096e0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80096e4:	f013 031f 	ands.w	r3, r3, #31
 80096e8:	b087      	sub	sp, #28
 80096ea:	bf18      	it	ne
 80096ec:	3604      	addne	r6, #4
 80096ee:	2500      	movs	r5, #0
 80096f0:	1f37      	subs	r7, r6, #4
 80096f2:	4690      	mov	r8, r2
 80096f4:	6802      	ldr	r2, [r0, #0]
 80096f6:	9301      	str	r3, [sp, #4]
 80096f8:	4682      	mov	sl, r0
 80096fa:	f846 5c04 	str.w	r5, [r6, #-4]
 80096fe:	46b9      	mov	r9, r7
 8009700:	463c      	mov	r4, r7
 8009702:	9502      	str	r5, [sp, #8]
 8009704:	46ab      	mov	fp, r5
 8009706:	7851      	ldrb	r1, [r2, #1]
 8009708:	1c53      	adds	r3, r2, #1
 800970a:	9303      	str	r3, [sp, #12]
 800970c:	b341      	cbz	r1, 8009760 <__hexnan+0x88>
 800970e:	4608      	mov	r0, r1
 8009710:	9205      	str	r2, [sp, #20]
 8009712:	9104      	str	r1, [sp, #16]
 8009714:	f7ff fd5f 	bl	80091d6 <__hexdig_fun>
 8009718:	2800      	cmp	r0, #0
 800971a:	d14f      	bne.n	80097bc <__hexnan+0xe4>
 800971c:	9904      	ldr	r1, [sp, #16]
 800971e:	9a05      	ldr	r2, [sp, #20]
 8009720:	2920      	cmp	r1, #32
 8009722:	d818      	bhi.n	8009756 <__hexnan+0x7e>
 8009724:	9b02      	ldr	r3, [sp, #8]
 8009726:	459b      	cmp	fp, r3
 8009728:	dd13      	ble.n	8009752 <__hexnan+0x7a>
 800972a:	454c      	cmp	r4, r9
 800972c:	d206      	bcs.n	800973c <__hexnan+0x64>
 800972e:	2d07      	cmp	r5, #7
 8009730:	dc04      	bgt.n	800973c <__hexnan+0x64>
 8009732:	462a      	mov	r2, r5
 8009734:	4649      	mov	r1, r9
 8009736:	4620      	mov	r0, r4
 8009738:	f7ff ffa8 	bl	800968c <L_shift>
 800973c:	4544      	cmp	r4, r8
 800973e:	d950      	bls.n	80097e2 <__hexnan+0x10a>
 8009740:	2300      	movs	r3, #0
 8009742:	f1a4 0904 	sub.w	r9, r4, #4
 8009746:	f844 3c04 	str.w	r3, [r4, #-4]
 800974a:	f8cd b008 	str.w	fp, [sp, #8]
 800974e:	464c      	mov	r4, r9
 8009750:	461d      	mov	r5, r3
 8009752:	9a03      	ldr	r2, [sp, #12]
 8009754:	e7d7      	b.n	8009706 <__hexnan+0x2e>
 8009756:	2929      	cmp	r1, #41	; 0x29
 8009758:	d156      	bne.n	8009808 <__hexnan+0x130>
 800975a:	3202      	adds	r2, #2
 800975c:	f8ca 2000 	str.w	r2, [sl]
 8009760:	f1bb 0f00 	cmp.w	fp, #0
 8009764:	d050      	beq.n	8009808 <__hexnan+0x130>
 8009766:	454c      	cmp	r4, r9
 8009768:	d206      	bcs.n	8009778 <__hexnan+0xa0>
 800976a:	2d07      	cmp	r5, #7
 800976c:	dc04      	bgt.n	8009778 <__hexnan+0xa0>
 800976e:	462a      	mov	r2, r5
 8009770:	4649      	mov	r1, r9
 8009772:	4620      	mov	r0, r4
 8009774:	f7ff ff8a 	bl	800968c <L_shift>
 8009778:	4544      	cmp	r4, r8
 800977a:	d934      	bls.n	80097e6 <__hexnan+0x10e>
 800977c:	f1a8 0204 	sub.w	r2, r8, #4
 8009780:	4623      	mov	r3, r4
 8009782:	f853 1b04 	ldr.w	r1, [r3], #4
 8009786:	f842 1f04 	str.w	r1, [r2, #4]!
 800978a:	429f      	cmp	r7, r3
 800978c:	d2f9      	bcs.n	8009782 <__hexnan+0xaa>
 800978e:	1b3b      	subs	r3, r7, r4
 8009790:	f023 0303 	bic.w	r3, r3, #3
 8009794:	3304      	adds	r3, #4
 8009796:	3401      	adds	r4, #1
 8009798:	3e03      	subs	r6, #3
 800979a:	42b4      	cmp	r4, r6
 800979c:	bf88      	it	hi
 800979e:	2304      	movhi	r3, #4
 80097a0:	4443      	add	r3, r8
 80097a2:	2200      	movs	r2, #0
 80097a4:	f843 2b04 	str.w	r2, [r3], #4
 80097a8:	429f      	cmp	r7, r3
 80097aa:	d2fb      	bcs.n	80097a4 <__hexnan+0xcc>
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	b91b      	cbnz	r3, 80097b8 <__hexnan+0xe0>
 80097b0:	4547      	cmp	r7, r8
 80097b2:	d127      	bne.n	8009804 <__hexnan+0x12c>
 80097b4:	2301      	movs	r3, #1
 80097b6:	603b      	str	r3, [r7, #0]
 80097b8:	2005      	movs	r0, #5
 80097ba:	e026      	b.n	800980a <__hexnan+0x132>
 80097bc:	3501      	adds	r5, #1
 80097be:	2d08      	cmp	r5, #8
 80097c0:	f10b 0b01 	add.w	fp, fp, #1
 80097c4:	dd06      	ble.n	80097d4 <__hexnan+0xfc>
 80097c6:	4544      	cmp	r4, r8
 80097c8:	d9c3      	bls.n	8009752 <__hexnan+0x7a>
 80097ca:	2300      	movs	r3, #0
 80097cc:	f844 3c04 	str.w	r3, [r4, #-4]
 80097d0:	2501      	movs	r5, #1
 80097d2:	3c04      	subs	r4, #4
 80097d4:	6822      	ldr	r2, [r4, #0]
 80097d6:	f000 000f 	and.w	r0, r0, #15
 80097da:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80097de:	6022      	str	r2, [r4, #0]
 80097e0:	e7b7      	b.n	8009752 <__hexnan+0x7a>
 80097e2:	2508      	movs	r5, #8
 80097e4:	e7b5      	b.n	8009752 <__hexnan+0x7a>
 80097e6:	9b01      	ldr	r3, [sp, #4]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d0df      	beq.n	80097ac <__hexnan+0xd4>
 80097ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097f0:	f1c3 0320 	rsb	r3, r3, #32
 80097f4:	fa22 f303 	lsr.w	r3, r2, r3
 80097f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80097fc:	401a      	ands	r2, r3
 80097fe:	f846 2c04 	str.w	r2, [r6, #-4]
 8009802:	e7d3      	b.n	80097ac <__hexnan+0xd4>
 8009804:	3f04      	subs	r7, #4
 8009806:	e7d1      	b.n	80097ac <__hexnan+0xd4>
 8009808:	2004      	movs	r0, #4
 800980a:	b007      	add	sp, #28
 800980c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009810 <_localeconv_r>:
 8009810:	4800      	ldr	r0, [pc, #0]	; (8009814 <_localeconv_r+0x4>)
 8009812:	4770      	bx	lr
 8009814:	20000194 	.word	0x20000194

08009818 <__retarget_lock_init_recursive>:
 8009818:	4770      	bx	lr

0800981a <__retarget_lock_acquire_recursive>:
 800981a:	4770      	bx	lr

0800981c <__retarget_lock_release_recursive>:
 800981c:	4770      	bx	lr

0800981e <__swhatbuf_r>:
 800981e:	b570      	push	{r4, r5, r6, lr}
 8009820:	460e      	mov	r6, r1
 8009822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009826:	2900      	cmp	r1, #0
 8009828:	b096      	sub	sp, #88	; 0x58
 800982a:	4614      	mov	r4, r2
 800982c:	461d      	mov	r5, r3
 800982e:	da08      	bge.n	8009842 <__swhatbuf_r+0x24>
 8009830:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009834:	2200      	movs	r2, #0
 8009836:	602a      	str	r2, [r5, #0]
 8009838:	061a      	lsls	r2, r3, #24
 800983a:	d410      	bmi.n	800985e <__swhatbuf_r+0x40>
 800983c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009840:	e00e      	b.n	8009860 <__swhatbuf_r+0x42>
 8009842:	466a      	mov	r2, sp
 8009844:	f001 f84e 	bl	800a8e4 <_fstat_r>
 8009848:	2800      	cmp	r0, #0
 800984a:	dbf1      	blt.n	8009830 <__swhatbuf_r+0x12>
 800984c:	9a01      	ldr	r2, [sp, #4]
 800984e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009852:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009856:	425a      	negs	r2, r3
 8009858:	415a      	adcs	r2, r3
 800985a:	602a      	str	r2, [r5, #0]
 800985c:	e7ee      	b.n	800983c <__swhatbuf_r+0x1e>
 800985e:	2340      	movs	r3, #64	; 0x40
 8009860:	2000      	movs	r0, #0
 8009862:	6023      	str	r3, [r4, #0]
 8009864:	b016      	add	sp, #88	; 0x58
 8009866:	bd70      	pop	{r4, r5, r6, pc}

08009868 <__smakebuf_r>:
 8009868:	898b      	ldrh	r3, [r1, #12]
 800986a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800986c:	079d      	lsls	r5, r3, #30
 800986e:	4606      	mov	r6, r0
 8009870:	460c      	mov	r4, r1
 8009872:	d507      	bpl.n	8009884 <__smakebuf_r+0x1c>
 8009874:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009878:	6023      	str	r3, [r4, #0]
 800987a:	6123      	str	r3, [r4, #16]
 800987c:	2301      	movs	r3, #1
 800987e:	6163      	str	r3, [r4, #20]
 8009880:	b002      	add	sp, #8
 8009882:	bd70      	pop	{r4, r5, r6, pc}
 8009884:	ab01      	add	r3, sp, #4
 8009886:	466a      	mov	r2, sp
 8009888:	f7ff ffc9 	bl	800981e <__swhatbuf_r>
 800988c:	9900      	ldr	r1, [sp, #0]
 800988e:	4605      	mov	r5, r0
 8009890:	4630      	mov	r0, r6
 8009892:	f000 fd87 	bl	800a3a4 <_malloc_r>
 8009896:	b948      	cbnz	r0, 80098ac <__smakebuf_r+0x44>
 8009898:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800989c:	059a      	lsls	r2, r3, #22
 800989e:	d4ef      	bmi.n	8009880 <__smakebuf_r+0x18>
 80098a0:	f023 0303 	bic.w	r3, r3, #3
 80098a4:	f043 0302 	orr.w	r3, r3, #2
 80098a8:	81a3      	strh	r3, [r4, #12]
 80098aa:	e7e3      	b.n	8009874 <__smakebuf_r+0xc>
 80098ac:	4b0d      	ldr	r3, [pc, #52]	; (80098e4 <__smakebuf_r+0x7c>)
 80098ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80098b0:	89a3      	ldrh	r3, [r4, #12]
 80098b2:	6020      	str	r0, [r4, #0]
 80098b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098b8:	81a3      	strh	r3, [r4, #12]
 80098ba:	9b00      	ldr	r3, [sp, #0]
 80098bc:	6163      	str	r3, [r4, #20]
 80098be:	9b01      	ldr	r3, [sp, #4]
 80098c0:	6120      	str	r0, [r4, #16]
 80098c2:	b15b      	cbz	r3, 80098dc <__smakebuf_r+0x74>
 80098c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098c8:	4630      	mov	r0, r6
 80098ca:	f001 f81d 	bl	800a908 <_isatty_r>
 80098ce:	b128      	cbz	r0, 80098dc <__smakebuf_r+0x74>
 80098d0:	89a3      	ldrh	r3, [r4, #12]
 80098d2:	f023 0303 	bic.w	r3, r3, #3
 80098d6:	f043 0301 	orr.w	r3, r3, #1
 80098da:	81a3      	strh	r3, [r4, #12]
 80098dc:	89a0      	ldrh	r0, [r4, #12]
 80098de:	4305      	orrs	r5, r0
 80098e0:	81a5      	strh	r5, [r4, #12]
 80098e2:	e7cd      	b.n	8009880 <__smakebuf_r+0x18>
 80098e4:	08008f91 	.word	0x08008f91

080098e8 <malloc>:
 80098e8:	4b02      	ldr	r3, [pc, #8]	; (80098f4 <malloc+0xc>)
 80098ea:	4601      	mov	r1, r0
 80098ec:	6818      	ldr	r0, [r3, #0]
 80098ee:	f000 bd59 	b.w	800a3a4 <_malloc_r>
 80098f2:	bf00      	nop
 80098f4:	2000003c 	.word	0x2000003c

080098f8 <__ascii_mbtowc>:
 80098f8:	b082      	sub	sp, #8
 80098fa:	b901      	cbnz	r1, 80098fe <__ascii_mbtowc+0x6>
 80098fc:	a901      	add	r1, sp, #4
 80098fe:	b142      	cbz	r2, 8009912 <__ascii_mbtowc+0x1a>
 8009900:	b14b      	cbz	r3, 8009916 <__ascii_mbtowc+0x1e>
 8009902:	7813      	ldrb	r3, [r2, #0]
 8009904:	600b      	str	r3, [r1, #0]
 8009906:	7812      	ldrb	r2, [r2, #0]
 8009908:	1e10      	subs	r0, r2, #0
 800990a:	bf18      	it	ne
 800990c:	2001      	movne	r0, #1
 800990e:	b002      	add	sp, #8
 8009910:	4770      	bx	lr
 8009912:	4610      	mov	r0, r2
 8009914:	e7fb      	b.n	800990e <__ascii_mbtowc+0x16>
 8009916:	f06f 0001 	mvn.w	r0, #1
 800991a:	e7f8      	b.n	800990e <__ascii_mbtowc+0x16>

0800991c <_Balloc>:
 800991c:	b570      	push	{r4, r5, r6, lr}
 800991e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009920:	4604      	mov	r4, r0
 8009922:	460d      	mov	r5, r1
 8009924:	b976      	cbnz	r6, 8009944 <_Balloc+0x28>
 8009926:	2010      	movs	r0, #16
 8009928:	f7ff ffde 	bl	80098e8 <malloc>
 800992c:	4602      	mov	r2, r0
 800992e:	6260      	str	r0, [r4, #36]	; 0x24
 8009930:	b920      	cbnz	r0, 800993c <_Balloc+0x20>
 8009932:	4b18      	ldr	r3, [pc, #96]	; (8009994 <_Balloc+0x78>)
 8009934:	4818      	ldr	r0, [pc, #96]	; (8009998 <_Balloc+0x7c>)
 8009936:	2166      	movs	r1, #102	; 0x66
 8009938:	f000 ff94 	bl	800a864 <__assert_func>
 800993c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009940:	6006      	str	r6, [r0, #0]
 8009942:	60c6      	str	r6, [r0, #12]
 8009944:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009946:	68f3      	ldr	r3, [r6, #12]
 8009948:	b183      	cbz	r3, 800996c <_Balloc+0x50>
 800994a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800994c:	68db      	ldr	r3, [r3, #12]
 800994e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009952:	b9b8      	cbnz	r0, 8009984 <_Balloc+0x68>
 8009954:	2101      	movs	r1, #1
 8009956:	fa01 f605 	lsl.w	r6, r1, r5
 800995a:	1d72      	adds	r2, r6, #5
 800995c:	0092      	lsls	r2, r2, #2
 800995e:	4620      	mov	r0, r4
 8009960:	f000 fc9d 	bl	800a29e <_calloc_r>
 8009964:	b160      	cbz	r0, 8009980 <_Balloc+0x64>
 8009966:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800996a:	e00e      	b.n	800998a <_Balloc+0x6e>
 800996c:	2221      	movs	r2, #33	; 0x21
 800996e:	2104      	movs	r1, #4
 8009970:	4620      	mov	r0, r4
 8009972:	f000 fc94 	bl	800a29e <_calloc_r>
 8009976:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009978:	60f0      	str	r0, [r6, #12]
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d1e4      	bne.n	800994a <_Balloc+0x2e>
 8009980:	2000      	movs	r0, #0
 8009982:	bd70      	pop	{r4, r5, r6, pc}
 8009984:	6802      	ldr	r2, [r0, #0]
 8009986:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800998a:	2300      	movs	r3, #0
 800998c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009990:	e7f7      	b.n	8009982 <_Balloc+0x66>
 8009992:	bf00      	nop
 8009994:	0800b3d6 	.word	0x0800b3d6
 8009998:	0800b538 	.word	0x0800b538

0800999c <_Bfree>:
 800999c:	b570      	push	{r4, r5, r6, lr}
 800999e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80099a0:	4605      	mov	r5, r0
 80099a2:	460c      	mov	r4, r1
 80099a4:	b976      	cbnz	r6, 80099c4 <_Bfree+0x28>
 80099a6:	2010      	movs	r0, #16
 80099a8:	f7ff ff9e 	bl	80098e8 <malloc>
 80099ac:	4602      	mov	r2, r0
 80099ae:	6268      	str	r0, [r5, #36]	; 0x24
 80099b0:	b920      	cbnz	r0, 80099bc <_Bfree+0x20>
 80099b2:	4b09      	ldr	r3, [pc, #36]	; (80099d8 <_Bfree+0x3c>)
 80099b4:	4809      	ldr	r0, [pc, #36]	; (80099dc <_Bfree+0x40>)
 80099b6:	218a      	movs	r1, #138	; 0x8a
 80099b8:	f000 ff54 	bl	800a864 <__assert_func>
 80099bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099c0:	6006      	str	r6, [r0, #0]
 80099c2:	60c6      	str	r6, [r0, #12]
 80099c4:	b13c      	cbz	r4, 80099d6 <_Bfree+0x3a>
 80099c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80099c8:	6862      	ldr	r2, [r4, #4]
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80099d0:	6021      	str	r1, [r4, #0]
 80099d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80099d6:	bd70      	pop	{r4, r5, r6, pc}
 80099d8:	0800b3d6 	.word	0x0800b3d6
 80099dc:	0800b538 	.word	0x0800b538

080099e0 <__multadd>:
 80099e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099e4:	690d      	ldr	r5, [r1, #16]
 80099e6:	4607      	mov	r7, r0
 80099e8:	460c      	mov	r4, r1
 80099ea:	461e      	mov	r6, r3
 80099ec:	f101 0c14 	add.w	ip, r1, #20
 80099f0:	2000      	movs	r0, #0
 80099f2:	f8dc 3000 	ldr.w	r3, [ip]
 80099f6:	b299      	uxth	r1, r3
 80099f8:	fb02 6101 	mla	r1, r2, r1, r6
 80099fc:	0c1e      	lsrs	r6, r3, #16
 80099fe:	0c0b      	lsrs	r3, r1, #16
 8009a00:	fb02 3306 	mla	r3, r2, r6, r3
 8009a04:	b289      	uxth	r1, r1
 8009a06:	3001      	adds	r0, #1
 8009a08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009a0c:	4285      	cmp	r5, r0
 8009a0e:	f84c 1b04 	str.w	r1, [ip], #4
 8009a12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009a16:	dcec      	bgt.n	80099f2 <__multadd+0x12>
 8009a18:	b30e      	cbz	r6, 8009a5e <__multadd+0x7e>
 8009a1a:	68a3      	ldr	r3, [r4, #8]
 8009a1c:	42ab      	cmp	r3, r5
 8009a1e:	dc19      	bgt.n	8009a54 <__multadd+0x74>
 8009a20:	6861      	ldr	r1, [r4, #4]
 8009a22:	4638      	mov	r0, r7
 8009a24:	3101      	adds	r1, #1
 8009a26:	f7ff ff79 	bl	800991c <_Balloc>
 8009a2a:	4680      	mov	r8, r0
 8009a2c:	b928      	cbnz	r0, 8009a3a <__multadd+0x5a>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	4b0c      	ldr	r3, [pc, #48]	; (8009a64 <__multadd+0x84>)
 8009a32:	480d      	ldr	r0, [pc, #52]	; (8009a68 <__multadd+0x88>)
 8009a34:	21b5      	movs	r1, #181	; 0xb5
 8009a36:	f000 ff15 	bl	800a864 <__assert_func>
 8009a3a:	6922      	ldr	r2, [r4, #16]
 8009a3c:	3202      	adds	r2, #2
 8009a3e:	f104 010c 	add.w	r1, r4, #12
 8009a42:	0092      	lsls	r2, r2, #2
 8009a44:	300c      	adds	r0, #12
 8009a46:	f7fc fc6d 	bl	8006324 <memcpy>
 8009a4a:	4621      	mov	r1, r4
 8009a4c:	4638      	mov	r0, r7
 8009a4e:	f7ff ffa5 	bl	800999c <_Bfree>
 8009a52:	4644      	mov	r4, r8
 8009a54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009a58:	3501      	adds	r5, #1
 8009a5a:	615e      	str	r6, [r3, #20]
 8009a5c:	6125      	str	r5, [r4, #16]
 8009a5e:	4620      	mov	r0, r4
 8009a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a64:	0800b448 	.word	0x0800b448
 8009a68:	0800b538 	.word	0x0800b538

08009a6c <__s2b>:
 8009a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a70:	460c      	mov	r4, r1
 8009a72:	4615      	mov	r5, r2
 8009a74:	461f      	mov	r7, r3
 8009a76:	2209      	movs	r2, #9
 8009a78:	3308      	adds	r3, #8
 8009a7a:	4606      	mov	r6, r0
 8009a7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a80:	2100      	movs	r1, #0
 8009a82:	2201      	movs	r2, #1
 8009a84:	429a      	cmp	r2, r3
 8009a86:	db09      	blt.n	8009a9c <__s2b+0x30>
 8009a88:	4630      	mov	r0, r6
 8009a8a:	f7ff ff47 	bl	800991c <_Balloc>
 8009a8e:	b940      	cbnz	r0, 8009aa2 <__s2b+0x36>
 8009a90:	4602      	mov	r2, r0
 8009a92:	4b19      	ldr	r3, [pc, #100]	; (8009af8 <__s2b+0x8c>)
 8009a94:	4819      	ldr	r0, [pc, #100]	; (8009afc <__s2b+0x90>)
 8009a96:	21ce      	movs	r1, #206	; 0xce
 8009a98:	f000 fee4 	bl	800a864 <__assert_func>
 8009a9c:	0052      	lsls	r2, r2, #1
 8009a9e:	3101      	adds	r1, #1
 8009aa0:	e7f0      	b.n	8009a84 <__s2b+0x18>
 8009aa2:	9b08      	ldr	r3, [sp, #32]
 8009aa4:	6143      	str	r3, [r0, #20]
 8009aa6:	2d09      	cmp	r5, #9
 8009aa8:	f04f 0301 	mov.w	r3, #1
 8009aac:	6103      	str	r3, [r0, #16]
 8009aae:	dd16      	ble.n	8009ade <__s2b+0x72>
 8009ab0:	f104 0909 	add.w	r9, r4, #9
 8009ab4:	46c8      	mov	r8, r9
 8009ab6:	442c      	add	r4, r5
 8009ab8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009abc:	4601      	mov	r1, r0
 8009abe:	3b30      	subs	r3, #48	; 0x30
 8009ac0:	220a      	movs	r2, #10
 8009ac2:	4630      	mov	r0, r6
 8009ac4:	f7ff ff8c 	bl	80099e0 <__multadd>
 8009ac8:	45a0      	cmp	r8, r4
 8009aca:	d1f5      	bne.n	8009ab8 <__s2b+0x4c>
 8009acc:	f1a5 0408 	sub.w	r4, r5, #8
 8009ad0:	444c      	add	r4, r9
 8009ad2:	1b2d      	subs	r5, r5, r4
 8009ad4:	1963      	adds	r3, r4, r5
 8009ad6:	42bb      	cmp	r3, r7
 8009ad8:	db04      	blt.n	8009ae4 <__s2b+0x78>
 8009ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ade:	340a      	adds	r4, #10
 8009ae0:	2509      	movs	r5, #9
 8009ae2:	e7f6      	b.n	8009ad2 <__s2b+0x66>
 8009ae4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009ae8:	4601      	mov	r1, r0
 8009aea:	3b30      	subs	r3, #48	; 0x30
 8009aec:	220a      	movs	r2, #10
 8009aee:	4630      	mov	r0, r6
 8009af0:	f7ff ff76 	bl	80099e0 <__multadd>
 8009af4:	e7ee      	b.n	8009ad4 <__s2b+0x68>
 8009af6:	bf00      	nop
 8009af8:	0800b448 	.word	0x0800b448
 8009afc:	0800b538 	.word	0x0800b538

08009b00 <__hi0bits>:
 8009b00:	0c03      	lsrs	r3, r0, #16
 8009b02:	041b      	lsls	r3, r3, #16
 8009b04:	b9d3      	cbnz	r3, 8009b3c <__hi0bits+0x3c>
 8009b06:	0400      	lsls	r0, r0, #16
 8009b08:	2310      	movs	r3, #16
 8009b0a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009b0e:	bf04      	itt	eq
 8009b10:	0200      	lsleq	r0, r0, #8
 8009b12:	3308      	addeq	r3, #8
 8009b14:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009b18:	bf04      	itt	eq
 8009b1a:	0100      	lsleq	r0, r0, #4
 8009b1c:	3304      	addeq	r3, #4
 8009b1e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009b22:	bf04      	itt	eq
 8009b24:	0080      	lsleq	r0, r0, #2
 8009b26:	3302      	addeq	r3, #2
 8009b28:	2800      	cmp	r0, #0
 8009b2a:	db05      	blt.n	8009b38 <__hi0bits+0x38>
 8009b2c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009b30:	f103 0301 	add.w	r3, r3, #1
 8009b34:	bf08      	it	eq
 8009b36:	2320      	moveq	r3, #32
 8009b38:	4618      	mov	r0, r3
 8009b3a:	4770      	bx	lr
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	e7e4      	b.n	8009b0a <__hi0bits+0xa>

08009b40 <__lo0bits>:
 8009b40:	6803      	ldr	r3, [r0, #0]
 8009b42:	f013 0207 	ands.w	r2, r3, #7
 8009b46:	4601      	mov	r1, r0
 8009b48:	d00b      	beq.n	8009b62 <__lo0bits+0x22>
 8009b4a:	07da      	lsls	r2, r3, #31
 8009b4c:	d423      	bmi.n	8009b96 <__lo0bits+0x56>
 8009b4e:	0798      	lsls	r0, r3, #30
 8009b50:	bf49      	itett	mi
 8009b52:	085b      	lsrmi	r3, r3, #1
 8009b54:	089b      	lsrpl	r3, r3, #2
 8009b56:	2001      	movmi	r0, #1
 8009b58:	600b      	strmi	r3, [r1, #0]
 8009b5a:	bf5c      	itt	pl
 8009b5c:	600b      	strpl	r3, [r1, #0]
 8009b5e:	2002      	movpl	r0, #2
 8009b60:	4770      	bx	lr
 8009b62:	b298      	uxth	r0, r3
 8009b64:	b9a8      	cbnz	r0, 8009b92 <__lo0bits+0x52>
 8009b66:	0c1b      	lsrs	r3, r3, #16
 8009b68:	2010      	movs	r0, #16
 8009b6a:	b2da      	uxtb	r2, r3
 8009b6c:	b90a      	cbnz	r2, 8009b72 <__lo0bits+0x32>
 8009b6e:	3008      	adds	r0, #8
 8009b70:	0a1b      	lsrs	r3, r3, #8
 8009b72:	071a      	lsls	r2, r3, #28
 8009b74:	bf04      	itt	eq
 8009b76:	091b      	lsreq	r3, r3, #4
 8009b78:	3004      	addeq	r0, #4
 8009b7a:	079a      	lsls	r2, r3, #30
 8009b7c:	bf04      	itt	eq
 8009b7e:	089b      	lsreq	r3, r3, #2
 8009b80:	3002      	addeq	r0, #2
 8009b82:	07da      	lsls	r2, r3, #31
 8009b84:	d403      	bmi.n	8009b8e <__lo0bits+0x4e>
 8009b86:	085b      	lsrs	r3, r3, #1
 8009b88:	f100 0001 	add.w	r0, r0, #1
 8009b8c:	d005      	beq.n	8009b9a <__lo0bits+0x5a>
 8009b8e:	600b      	str	r3, [r1, #0]
 8009b90:	4770      	bx	lr
 8009b92:	4610      	mov	r0, r2
 8009b94:	e7e9      	b.n	8009b6a <__lo0bits+0x2a>
 8009b96:	2000      	movs	r0, #0
 8009b98:	4770      	bx	lr
 8009b9a:	2020      	movs	r0, #32
 8009b9c:	4770      	bx	lr
	...

08009ba0 <__i2b>:
 8009ba0:	b510      	push	{r4, lr}
 8009ba2:	460c      	mov	r4, r1
 8009ba4:	2101      	movs	r1, #1
 8009ba6:	f7ff feb9 	bl	800991c <_Balloc>
 8009baa:	4602      	mov	r2, r0
 8009bac:	b928      	cbnz	r0, 8009bba <__i2b+0x1a>
 8009bae:	4b05      	ldr	r3, [pc, #20]	; (8009bc4 <__i2b+0x24>)
 8009bb0:	4805      	ldr	r0, [pc, #20]	; (8009bc8 <__i2b+0x28>)
 8009bb2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009bb6:	f000 fe55 	bl	800a864 <__assert_func>
 8009bba:	2301      	movs	r3, #1
 8009bbc:	6144      	str	r4, [r0, #20]
 8009bbe:	6103      	str	r3, [r0, #16]
 8009bc0:	bd10      	pop	{r4, pc}
 8009bc2:	bf00      	nop
 8009bc4:	0800b448 	.word	0x0800b448
 8009bc8:	0800b538 	.word	0x0800b538

08009bcc <__multiply>:
 8009bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bd0:	4691      	mov	r9, r2
 8009bd2:	690a      	ldr	r2, [r1, #16]
 8009bd4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	bfb8      	it	lt
 8009bdc:	460b      	movlt	r3, r1
 8009bde:	460c      	mov	r4, r1
 8009be0:	bfbc      	itt	lt
 8009be2:	464c      	movlt	r4, r9
 8009be4:	4699      	movlt	r9, r3
 8009be6:	6927      	ldr	r7, [r4, #16]
 8009be8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009bec:	68a3      	ldr	r3, [r4, #8]
 8009bee:	6861      	ldr	r1, [r4, #4]
 8009bf0:	eb07 060a 	add.w	r6, r7, sl
 8009bf4:	42b3      	cmp	r3, r6
 8009bf6:	b085      	sub	sp, #20
 8009bf8:	bfb8      	it	lt
 8009bfa:	3101      	addlt	r1, #1
 8009bfc:	f7ff fe8e 	bl	800991c <_Balloc>
 8009c00:	b930      	cbnz	r0, 8009c10 <__multiply+0x44>
 8009c02:	4602      	mov	r2, r0
 8009c04:	4b44      	ldr	r3, [pc, #272]	; (8009d18 <__multiply+0x14c>)
 8009c06:	4845      	ldr	r0, [pc, #276]	; (8009d1c <__multiply+0x150>)
 8009c08:	f240 115d 	movw	r1, #349	; 0x15d
 8009c0c:	f000 fe2a 	bl	800a864 <__assert_func>
 8009c10:	f100 0514 	add.w	r5, r0, #20
 8009c14:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009c18:	462b      	mov	r3, r5
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	4543      	cmp	r3, r8
 8009c1e:	d321      	bcc.n	8009c64 <__multiply+0x98>
 8009c20:	f104 0314 	add.w	r3, r4, #20
 8009c24:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009c28:	f109 0314 	add.w	r3, r9, #20
 8009c2c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009c30:	9202      	str	r2, [sp, #8]
 8009c32:	1b3a      	subs	r2, r7, r4
 8009c34:	3a15      	subs	r2, #21
 8009c36:	f022 0203 	bic.w	r2, r2, #3
 8009c3a:	3204      	adds	r2, #4
 8009c3c:	f104 0115 	add.w	r1, r4, #21
 8009c40:	428f      	cmp	r7, r1
 8009c42:	bf38      	it	cc
 8009c44:	2204      	movcc	r2, #4
 8009c46:	9201      	str	r2, [sp, #4]
 8009c48:	9a02      	ldr	r2, [sp, #8]
 8009c4a:	9303      	str	r3, [sp, #12]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d80c      	bhi.n	8009c6a <__multiply+0x9e>
 8009c50:	2e00      	cmp	r6, #0
 8009c52:	dd03      	ble.n	8009c5c <__multiply+0x90>
 8009c54:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d05a      	beq.n	8009d12 <__multiply+0x146>
 8009c5c:	6106      	str	r6, [r0, #16]
 8009c5e:	b005      	add	sp, #20
 8009c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c64:	f843 2b04 	str.w	r2, [r3], #4
 8009c68:	e7d8      	b.n	8009c1c <__multiply+0x50>
 8009c6a:	f8b3 a000 	ldrh.w	sl, [r3]
 8009c6e:	f1ba 0f00 	cmp.w	sl, #0
 8009c72:	d024      	beq.n	8009cbe <__multiply+0xf2>
 8009c74:	f104 0e14 	add.w	lr, r4, #20
 8009c78:	46a9      	mov	r9, r5
 8009c7a:	f04f 0c00 	mov.w	ip, #0
 8009c7e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009c82:	f8d9 1000 	ldr.w	r1, [r9]
 8009c86:	fa1f fb82 	uxth.w	fp, r2
 8009c8a:	b289      	uxth	r1, r1
 8009c8c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009c90:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009c94:	f8d9 2000 	ldr.w	r2, [r9]
 8009c98:	4461      	add	r1, ip
 8009c9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c9e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009ca2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009ca6:	b289      	uxth	r1, r1
 8009ca8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009cac:	4577      	cmp	r7, lr
 8009cae:	f849 1b04 	str.w	r1, [r9], #4
 8009cb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009cb6:	d8e2      	bhi.n	8009c7e <__multiply+0xb2>
 8009cb8:	9a01      	ldr	r2, [sp, #4]
 8009cba:	f845 c002 	str.w	ip, [r5, r2]
 8009cbe:	9a03      	ldr	r2, [sp, #12]
 8009cc0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009cc4:	3304      	adds	r3, #4
 8009cc6:	f1b9 0f00 	cmp.w	r9, #0
 8009cca:	d020      	beq.n	8009d0e <__multiply+0x142>
 8009ccc:	6829      	ldr	r1, [r5, #0]
 8009cce:	f104 0c14 	add.w	ip, r4, #20
 8009cd2:	46ae      	mov	lr, r5
 8009cd4:	f04f 0a00 	mov.w	sl, #0
 8009cd8:	f8bc b000 	ldrh.w	fp, [ip]
 8009cdc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009ce0:	fb09 220b 	mla	r2, r9, fp, r2
 8009ce4:	4492      	add	sl, r2
 8009ce6:	b289      	uxth	r1, r1
 8009ce8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009cec:	f84e 1b04 	str.w	r1, [lr], #4
 8009cf0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009cf4:	f8be 1000 	ldrh.w	r1, [lr]
 8009cf8:	0c12      	lsrs	r2, r2, #16
 8009cfa:	fb09 1102 	mla	r1, r9, r2, r1
 8009cfe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009d02:	4567      	cmp	r7, ip
 8009d04:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009d08:	d8e6      	bhi.n	8009cd8 <__multiply+0x10c>
 8009d0a:	9a01      	ldr	r2, [sp, #4]
 8009d0c:	50a9      	str	r1, [r5, r2]
 8009d0e:	3504      	adds	r5, #4
 8009d10:	e79a      	b.n	8009c48 <__multiply+0x7c>
 8009d12:	3e01      	subs	r6, #1
 8009d14:	e79c      	b.n	8009c50 <__multiply+0x84>
 8009d16:	bf00      	nop
 8009d18:	0800b448 	.word	0x0800b448
 8009d1c:	0800b538 	.word	0x0800b538

08009d20 <__pow5mult>:
 8009d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d24:	4615      	mov	r5, r2
 8009d26:	f012 0203 	ands.w	r2, r2, #3
 8009d2a:	4606      	mov	r6, r0
 8009d2c:	460f      	mov	r7, r1
 8009d2e:	d007      	beq.n	8009d40 <__pow5mult+0x20>
 8009d30:	4c25      	ldr	r4, [pc, #148]	; (8009dc8 <__pow5mult+0xa8>)
 8009d32:	3a01      	subs	r2, #1
 8009d34:	2300      	movs	r3, #0
 8009d36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d3a:	f7ff fe51 	bl	80099e0 <__multadd>
 8009d3e:	4607      	mov	r7, r0
 8009d40:	10ad      	asrs	r5, r5, #2
 8009d42:	d03d      	beq.n	8009dc0 <__pow5mult+0xa0>
 8009d44:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009d46:	b97c      	cbnz	r4, 8009d68 <__pow5mult+0x48>
 8009d48:	2010      	movs	r0, #16
 8009d4a:	f7ff fdcd 	bl	80098e8 <malloc>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	6270      	str	r0, [r6, #36]	; 0x24
 8009d52:	b928      	cbnz	r0, 8009d60 <__pow5mult+0x40>
 8009d54:	4b1d      	ldr	r3, [pc, #116]	; (8009dcc <__pow5mult+0xac>)
 8009d56:	481e      	ldr	r0, [pc, #120]	; (8009dd0 <__pow5mult+0xb0>)
 8009d58:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009d5c:	f000 fd82 	bl	800a864 <__assert_func>
 8009d60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d64:	6004      	str	r4, [r0, #0]
 8009d66:	60c4      	str	r4, [r0, #12]
 8009d68:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009d6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d70:	b94c      	cbnz	r4, 8009d86 <__pow5mult+0x66>
 8009d72:	f240 2171 	movw	r1, #625	; 0x271
 8009d76:	4630      	mov	r0, r6
 8009d78:	f7ff ff12 	bl	8009ba0 <__i2b>
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d82:	4604      	mov	r4, r0
 8009d84:	6003      	str	r3, [r0, #0]
 8009d86:	f04f 0900 	mov.w	r9, #0
 8009d8a:	07eb      	lsls	r3, r5, #31
 8009d8c:	d50a      	bpl.n	8009da4 <__pow5mult+0x84>
 8009d8e:	4639      	mov	r1, r7
 8009d90:	4622      	mov	r2, r4
 8009d92:	4630      	mov	r0, r6
 8009d94:	f7ff ff1a 	bl	8009bcc <__multiply>
 8009d98:	4639      	mov	r1, r7
 8009d9a:	4680      	mov	r8, r0
 8009d9c:	4630      	mov	r0, r6
 8009d9e:	f7ff fdfd 	bl	800999c <_Bfree>
 8009da2:	4647      	mov	r7, r8
 8009da4:	106d      	asrs	r5, r5, #1
 8009da6:	d00b      	beq.n	8009dc0 <__pow5mult+0xa0>
 8009da8:	6820      	ldr	r0, [r4, #0]
 8009daa:	b938      	cbnz	r0, 8009dbc <__pow5mult+0x9c>
 8009dac:	4622      	mov	r2, r4
 8009dae:	4621      	mov	r1, r4
 8009db0:	4630      	mov	r0, r6
 8009db2:	f7ff ff0b 	bl	8009bcc <__multiply>
 8009db6:	6020      	str	r0, [r4, #0]
 8009db8:	f8c0 9000 	str.w	r9, [r0]
 8009dbc:	4604      	mov	r4, r0
 8009dbe:	e7e4      	b.n	8009d8a <__pow5mult+0x6a>
 8009dc0:	4638      	mov	r0, r7
 8009dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dc6:	bf00      	nop
 8009dc8:	0800b688 	.word	0x0800b688
 8009dcc:	0800b3d6 	.word	0x0800b3d6
 8009dd0:	0800b538 	.word	0x0800b538

08009dd4 <__lshift>:
 8009dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dd8:	460c      	mov	r4, r1
 8009dda:	6849      	ldr	r1, [r1, #4]
 8009ddc:	6923      	ldr	r3, [r4, #16]
 8009dde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009de2:	68a3      	ldr	r3, [r4, #8]
 8009de4:	4607      	mov	r7, r0
 8009de6:	4691      	mov	r9, r2
 8009de8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009dec:	f108 0601 	add.w	r6, r8, #1
 8009df0:	42b3      	cmp	r3, r6
 8009df2:	db0b      	blt.n	8009e0c <__lshift+0x38>
 8009df4:	4638      	mov	r0, r7
 8009df6:	f7ff fd91 	bl	800991c <_Balloc>
 8009dfa:	4605      	mov	r5, r0
 8009dfc:	b948      	cbnz	r0, 8009e12 <__lshift+0x3e>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	4b2a      	ldr	r3, [pc, #168]	; (8009eac <__lshift+0xd8>)
 8009e02:	482b      	ldr	r0, [pc, #172]	; (8009eb0 <__lshift+0xdc>)
 8009e04:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009e08:	f000 fd2c 	bl	800a864 <__assert_func>
 8009e0c:	3101      	adds	r1, #1
 8009e0e:	005b      	lsls	r3, r3, #1
 8009e10:	e7ee      	b.n	8009df0 <__lshift+0x1c>
 8009e12:	2300      	movs	r3, #0
 8009e14:	f100 0114 	add.w	r1, r0, #20
 8009e18:	f100 0210 	add.w	r2, r0, #16
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	4553      	cmp	r3, sl
 8009e20:	db37      	blt.n	8009e92 <__lshift+0xbe>
 8009e22:	6920      	ldr	r0, [r4, #16]
 8009e24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e28:	f104 0314 	add.w	r3, r4, #20
 8009e2c:	f019 091f 	ands.w	r9, r9, #31
 8009e30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e34:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009e38:	d02f      	beq.n	8009e9a <__lshift+0xc6>
 8009e3a:	f1c9 0e20 	rsb	lr, r9, #32
 8009e3e:	468a      	mov	sl, r1
 8009e40:	f04f 0c00 	mov.w	ip, #0
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	fa02 f209 	lsl.w	r2, r2, r9
 8009e4a:	ea42 020c 	orr.w	r2, r2, ip
 8009e4e:	f84a 2b04 	str.w	r2, [sl], #4
 8009e52:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e56:	4298      	cmp	r0, r3
 8009e58:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009e5c:	d8f2      	bhi.n	8009e44 <__lshift+0x70>
 8009e5e:	1b03      	subs	r3, r0, r4
 8009e60:	3b15      	subs	r3, #21
 8009e62:	f023 0303 	bic.w	r3, r3, #3
 8009e66:	3304      	adds	r3, #4
 8009e68:	f104 0215 	add.w	r2, r4, #21
 8009e6c:	4290      	cmp	r0, r2
 8009e6e:	bf38      	it	cc
 8009e70:	2304      	movcc	r3, #4
 8009e72:	f841 c003 	str.w	ip, [r1, r3]
 8009e76:	f1bc 0f00 	cmp.w	ip, #0
 8009e7a:	d001      	beq.n	8009e80 <__lshift+0xac>
 8009e7c:	f108 0602 	add.w	r6, r8, #2
 8009e80:	3e01      	subs	r6, #1
 8009e82:	4638      	mov	r0, r7
 8009e84:	612e      	str	r6, [r5, #16]
 8009e86:	4621      	mov	r1, r4
 8009e88:	f7ff fd88 	bl	800999c <_Bfree>
 8009e8c:	4628      	mov	r0, r5
 8009e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e92:	f842 0f04 	str.w	r0, [r2, #4]!
 8009e96:	3301      	adds	r3, #1
 8009e98:	e7c1      	b.n	8009e1e <__lshift+0x4a>
 8009e9a:	3904      	subs	r1, #4
 8009e9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ea0:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ea4:	4298      	cmp	r0, r3
 8009ea6:	d8f9      	bhi.n	8009e9c <__lshift+0xc8>
 8009ea8:	e7ea      	b.n	8009e80 <__lshift+0xac>
 8009eaa:	bf00      	nop
 8009eac:	0800b448 	.word	0x0800b448
 8009eb0:	0800b538 	.word	0x0800b538

08009eb4 <__mcmp>:
 8009eb4:	b530      	push	{r4, r5, lr}
 8009eb6:	6902      	ldr	r2, [r0, #16]
 8009eb8:	690c      	ldr	r4, [r1, #16]
 8009eba:	1b12      	subs	r2, r2, r4
 8009ebc:	d10e      	bne.n	8009edc <__mcmp+0x28>
 8009ebe:	f100 0314 	add.w	r3, r0, #20
 8009ec2:	3114      	adds	r1, #20
 8009ec4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009ec8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009ecc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009ed0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009ed4:	42a5      	cmp	r5, r4
 8009ed6:	d003      	beq.n	8009ee0 <__mcmp+0x2c>
 8009ed8:	d305      	bcc.n	8009ee6 <__mcmp+0x32>
 8009eda:	2201      	movs	r2, #1
 8009edc:	4610      	mov	r0, r2
 8009ede:	bd30      	pop	{r4, r5, pc}
 8009ee0:	4283      	cmp	r3, r0
 8009ee2:	d3f3      	bcc.n	8009ecc <__mcmp+0x18>
 8009ee4:	e7fa      	b.n	8009edc <__mcmp+0x28>
 8009ee6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009eea:	e7f7      	b.n	8009edc <__mcmp+0x28>

08009eec <__mdiff>:
 8009eec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef0:	460c      	mov	r4, r1
 8009ef2:	4606      	mov	r6, r0
 8009ef4:	4611      	mov	r1, r2
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	4690      	mov	r8, r2
 8009efa:	f7ff ffdb 	bl	8009eb4 <__mcmp>
 8009efe:	1e05      	subs	r5, r0, #0
 8009f00:	d110      	bne.n	8009f24 <__mdiff+0x38>
 8009f02:	4629      	mov	r1, r5
 8009f04:	4630      	mov	r0, r6
 8009f06:	f7ff fd09 	bl	800991c <_Balloc>
 8009f0a:	b930      	cbnz	r0, 8009f1a <__mdiff+0x2e>
 8009f0c:	4b3a      	ldr	r3, [pc, #232]	; (8009ff8 <__mdiff+0x10c>)
 8009f0e:	4602      	mov	r2, r0
 8009f10:	f240 2132 	movw	r1, #562	; 0x232
 8009f14:	4839      	ldr	r0, [pc, #228]	; (8009ffc <__mdiff+0x110>)
 8009f16:	f000 fca5 	bl	800a864 <__assert_func>
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f24:	bfa4      	itt	ge
 8009f26:	4643      	movge	r3, r8
 8009f28:	46a0      	movge	r8, r4
 8009f2a:	4630      	mov	r0, r6
 8009f2c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009f30:	bfa6      	itte	ge
 8009f32:	461c      	movge	r4, r3
 8009f34:	2500      	movge	r5, #0
 8009f36:	2501      	movlt	r5, #1
 8009f38:	f7ff fcf0 	bl	800991c <_Balloc>
 8009f3c:	b920      	cbnz	r0, 8009f48 <__mdiff+0x5c>
 8009f3e:	4b2e      	ldr	r3, [pc, #184]	; (8009ff8 <__mdiff+0x10c>)
 8009f40:	4602      	mov	r2, r0
 8009f42:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009f46:	e7e5      	b.n	8009f14 <__mdiff+0x28>
 8009f48:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009f4c:	6926      	ldr	r6, [r4, #16]
 8009f4e:	60c5      	str	r5, [r0, #12]
 8009f50:	f104 0914 	add.w	r9, r4, #20
 8009f54:	f108 0514 	add.w	r5, r8, #20
 8009f58:	f100 0e14 	add.w	lr, r0, #20
 8009f5c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009f60:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009f64:	f108 0210 	add.w	r2, r8, #16
 8009f68:	46f2      	mov	sl, lr
 8009f6a:	2100      	movs	r1, #0
 8009f6c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009f70:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009f74:	fa1f f883 	uxth.w	r8, r3
 8009f78:	fa11 f18b 	uxtah	r1, r1, fp
 8009f7c:	0c1b      	lsrs	r3, r3, #16
 8009f7e:	eba1 0808 	sub.w	r8, r1, r8
 8009f82:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009f86:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009f8a:	fa1f f888 	uxth.w	r8, r8
 8009f8e:	1419      	asrs	r1, r3, #16
 8009f90:	454e      	cmp	r6, r9
 8009f92:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009f96:	f84a 3b04 	str.w	r3, [sl], #4
 8009f9a:	d8e7      	bhi.n	8009f6c <__mdiff+0x80>
 8009f9c:	1b33      	subs	r3, r6, r4
 8009f9e:	3b15      	subs	r3, #21
 8009fa0:	f023 0303 	bic.w	r3, r3, #3
 8009fa4:	3304      	adds	r3, #4
 8009fa6:	3415      	adds	r4, #21
 8009fa8:	42a6      	cmp	r6, r4
 8009faa:	bf38      	it	cc
 8009fac:	2304      	movcc	r3, #4
 8009fae:	441d      	add	r5, r3
 8009fb0:	4473      	add	r3, lr
 8009fb2:	469e      	mov	lr, r3
 8009fb4:	462e      	mov	r6, r5
 8009fb6:	4566      	cmp	r6, ip
 8009fb8:	d30e      	bcc.n	8009fd8 <__mdiff+0xec>
 8009fba:	f10c 0203 	add.w	r2, ip, #3
 8009fbe:	1b52      	subs	r2, r2, r5
 8009fc0:	f022 0203 	bic.w	r2, r2, #3
 8009fc4:	3d03      	subs	r5, #3
 8009fc6:	45ac      	cmp	ip, r5
 8009fc8:	bf38      	it	cc
 8009fca:	2200      	movcc	r2, #0
 8009fcc:	441a      	add	r2, r3
 8009fce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009fd2:	b17b      	cbz	r3, 8009ff4 <__mdiff+0x108>
 8009fd4:	6107      	str	r7, [r0, #16]
 8009fd6:	e7a3      	b.n	8009f20 <__mdiff+0x34>
 8009fd8:	f856 8b04 	ldr.w	r8, [r6], #4
 8009fdc:	fa11 f288 	uxtah	r2, r1, r8
 8009fe0:	1414      	asrs	r4, r2, #16
 8009fe2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009fe6:	b292      	uxth	r2, r2
 8009fe8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009fec:	f84e 2b04 	str.w	r2, [lr], #4
 8009ff0:	1421      	asrs	r1, r4, #16
 8009ff2:	e7e0      	b.n	8009fb6 <__mdiff+0xca>
 8009ff4:	3f01      	subs	r7, #1
 8009ff6:	e7ea      	b.n	8009fce <__mdiff+0xe2>
 8009ff8:	0800b448 	.word	0x0800b448
 8009ffc:	0800b538 	.word	0x0800b538

0800a000 <__ulp>:
 800a000:	b082      	sub	sp, #8
 800a002:	ed8d 0b00 	vstr	d0, [sp]
 800a006:	9b01      	ldr	r3, [sp, #4]
 800a008:	4912      	ldr	r1, [pc, #72]	; (800a054 <__ulp+0x54>)
 800a00a:	4019      	ands	r1, r3
 800a00c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a010:	2900      	cmp	r1, #0
 800a012:	dd05      	ble.n	800a020 <__ulp+0x20>
 800a014:	2200      	movs	r2, #0
 800a016:	460b      	mov	r3, r1
 800a018:	ec43 2b10 	vmov	d0, r2, r3
 800a01c:	b002      	add	sp, #8
 800a01e:	4770      	bx	lr
 800a020:	4249      	negs	r1, r1
 800a022:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a026:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a02a:	f04f 0200 	mov.w	r2, #0
 800a02e:	f04f 0300 	mov.w	r3, #0
 800a032:	da04      	bge.n	800a03e <__ulp+0x3e>
 800a034:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a038:	fa41 f300 	asr.w	r3, r1, r0
 800a03c:	e7ec      	b.n	800a018 <__ulp+0x18>
 800a03e:	f1a0 0114 	sub.w	r1, r0, #20
 800a042:	291e      	cmp	r1, #30
 800a044:	bfda      	itte	le
 800a046:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a04a:	fa20 f101 	lsrle.w	r1, r0, r1
 800a04e:	2101      	movgt	r1, #1
 800a050:	460a      	mov	r2, r1
 800a052:	e7e1      	b.n	800a018 <__ulp+0x18>
 800a054:	7ff00000 	.word	0x7ff00000

0800a058 <__b2d>:
 800a058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a05a:	6905      	ldr	r5, [r0, #16]
 800a05c:	f100 0714 	add.w	r7, r0, #20
 800a060:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a064:	1f2e      	subs	r6, r5, #4
 800a066:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a06a:	4620      	mov	r0, r4
 800a06c:	f7ff fd48 	bl	8009b00 <__hi0bits>
 800a070:	f1c0 0320 	rsb	r3, r0, #32
 800a074:	280a      	cmp	r0, #10
 800a076:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a0f4 <__b2d+0x9c>
 800a07a:	600b      	str	r3, [r1, #0]
 800a07c:	dc14      	bgt.n	800a0a8 <__b2d+0x50>
 800a07e:	f1c0 0e0b 	rsb	lr, r0, #11
 800a082:	fa24 f10e 	lsr.w	r1, r4, lr
 800a086:	42b7      	cmp	r7, r6
 800a088:	ea41 030c 	orr.w	r3, r1, ip
 800a08c:	bf34      	ite	cc
 800a08e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a092:	2100      	movcs	r1, #0
 800a094:	3015      	adds	r0, #21
 800a096:	fa04 f000 	lsl.w	r0, r4, r0
 800a09a:	fa21 f10e 	lsr.w	r1, r1, lr
 800a09e:	ea40 0201 	orr.w	r2, r0, r1
 800a0a2:	ec43 2b10 	vmov	d0, r2, r3
 800a0a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0a8:	42b7      	cmp	r7, r6
 800a0aa:	bf3a      	itte	cc
 800a0ac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a0b0:	f1a5 0608 	subcc.w	r6, r5, #8
 800a0b4:	2100      	movcs	r1, #0
 800a0b6:	380b      	subs	r0, #11
 800a0b8:	d017      	beq.n	800a0ea <__b2d+0x92>
 800a0ba:	f1c0 0c20 	rsb	ip, r0, #32
 800a0be:	fa04 f500 	lsl.w	r5, r4, r0
 800a0c2:	42be      	cmp	r6, r7
 800a0c4:	fa21 f40c 	lsr.w	r4, r1, ip
 800a0c8:	ea45 0504 	orr.w	r5, r5, r4
 800a0cc:	bf8c      	ite	hi
 800a0ce:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a0d2:	2400      	movls	r4, #0
 800a0d4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a0d8:	fa01 f000 	lsl.w	r0, r1, r0
 800a0dc:	fa24 f40c 	lsr.w	r4, r4, ip
 800a0e0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a0e4:	ea40 0204 	orr.w	r2, r0, r4
 800a0e8:	e7db      	b.n	800a0a2 <__b2d+0x4a>
 800a0ea:	ea44 030c 	orr.w	r3, r4, ip
 800a0ee:	460a      	mov	r2, r1
 800a0f0:	e7d7      	b.n	800a0a2 <__b2d+0x4a>
 800a0f2:	bf00      	nop
 800a0f4:	3ff00000 	.word	0x3ff00000

0800a0f8 <__d2b>:
 800a0f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a0fc:	4689      	mov	r9, r1
 800a0fe:	2101      	movs	r1, #1
 800a100:	ec57 6b10 	vmov	r6, r7, d0
 800a104:	4690      	mov	r8, r2
 800a106:	f7ff fc09 	bl	800991c <_Balloc>
 800a10a:	4604      	mov	r4, r0
 800a10c:	b930      	cbnz	r0, 800a11c <__d2b+0x24>
 800a10e:	4602      	mov	r2, r0
 800a110:	4b25      	ldr	r3, [pc, #148]	; (800a1a8 <__d2b+0xb0>)
 800a112:	4826      	ldr	r0, [pc, #152]	; (800a1ac <__d2b+0xb4>)
 800a114:	f240 310a 	movw	r1, #778	; 0x30a
 800a118:	f000 fba4 	bl	800a864 <__assert_func>
 800a11c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a120:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a124:	bb35      	cbnz	r5, 800a174 <__d2b+0x7c>
 800a126:	2e00      	cmp	r6, #0
 800a128:	9301      	str	r3, [sp, #4]
 800a12a:	d028      	beq.n	800a17e <__d2b+0x86>
 800a12c:	4668      	mov	r0, sp
 800a12e:	9600      	str	r6, [sp, #0]
 800a130:	f7ff fd06 	bl	8009b40 <__lo0bits>
 800a134:	9900      	ldr	r1, [sp, #0]
 800a136:	b300      	cbz	r0, 800a17a <__d2b+0x82>
 800a138:	9a01      	ldr	r2, [sp, #4]
 800a13a:	f1c0 0320 	rsb	r3, r0, #32
 800a13e:	fa02 f303 	lsl.w	r3, r2, r3
 800a142:	430b      	orrs	r3, r1
 800a144:	40c2      	lsrs	r2, r0
 800a146:	6163      	str	r3, [r4, #20]
 800a148:	9201      	str	r2, [sp, #4]
 800a14a:	9b01      	ldr	r3, [sp, #4]
 800a14c:	61a3      	str	r3, [r4, #24]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	bf14      	ite	ne
 800a152:	2202      	movne	r2, #2
 800a154:	2201      	moveq	r2, #1
 800a156:	6122      	str	r2, [r4, #16]
 800a158:	b1d5      	cbz	r5, 800a190 <__d2b+0x98>
 800a15a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a15e:	4405      	add	r5, r0
 800a160:	f8c9 5000 	str.w	r5, [r9]
 800a164:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a168:	f8c8 0000 	str.w	r0, [r8]
 800a16c:	4620      	mov	r0, r4
 800a16e:	b003      	add	sp, #12
 800a170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a174:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a178:	e7d5      	b.n	800a126 <__d2b+0x2e>
 800a17a:	6161      	str	r1, [r4, #20]
 800a17c:	e7e5      	b.n	800a14a <__d2b+0x52>
 800a17e:	a801      	add	r0, sp, #4
 800a180:	f7ff fcde 	bl	8009b40 <__lo0bits>
 800a184:	9b01      	ldr	r3, [sp, #4]
 800a186:	6163      	str	r3, [r4, #20]
 800a188:	2201      	movs	r2, #1
 800a18a:	6122      	str	r2, [r4, #16]
 800a18c:	3020      	adds	r0, #32
 800a18e:	e7e3      	b.n	800a158 <__d2b+0x60>
 800a190:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a194:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a198:	f8c9 0000 	str.w	r0, [r9]
 800a19c:	6918      	ldr	r0, [r3, #16]
 800a19e:	f7ff fcaf 	bl	8009b00 <__hi0bits>
 800a1a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a1a6:	e7df      	b.n	800a168 <__d2b+0x70>
 800a1a8:	0800b448 	.word	0x0800b448
 800a1ac:	0800b538 	.word	0x0800b538

0800a1b0 <__ratio>:
 800a1b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1b4:	4688      	mov	r8, r1
 800a1b6:	4669      	mov	r1, sp
 800a1b8:	4681      	mov	r9, r0
 800a1ba:	f7ff ff4d 	bl	800a058 <__b2d>
 800a1be:	a901      	add	r1, sp, #4
 800a1c0:	4640      	mov	r0, r8
 800a1c2:	ec55 4b10 	vmov	r4, r5, d0
 800a1c6:	f7ff ff47 	bl	800a058 <__b2d>
 800a1ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a1ce:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a1d2:	eba3 0c02 	sub.w	ip, r3, r2
 800a1d6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a1da:	1a9b      	subs	r3, r3, r2
 800a1dc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a1e0:	ec51 0b10 	vmov	r0, r1, d0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	bfd6      	itet	le
 800a1e8:	460a      	movle	r2, r1
 800a1ea:	462a      	movgt	r2, r5
 800a1ec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a1f0:	468b      	mov	fp, r1
 800a1f2:	462f      	mov	r7, r5
 800a1f4:	bfd4      	ite	le
 800a1f6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a1fa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a1fe:	4620      	mov	r0, r4
 800a200:	ee10 2a10 	vmov	r2, s0
 800a204:	465b      	mov	r3, fp
 800a206:	4639      	mov	r1, r7
 800a208:	f7f6 fb30 	bl	800086c <__aeabi_ddiv>
 800a20c:	ec41 0b10 	vmov	d0, r0, r1
 800a210:	b003      	add	sp, #12
 800a212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a216 <__copybits>:
 800a216:	3901      	subs	r1, #1
 800a218:	b570      	push	{r4, r5, r6, lr}
 800a21a:	1149      	asrs	r1, r1, #5
 800a21c:	6914      	ldr	r4, [r2, #16]
 800a21e:	3101      	adds	r1, #1
 800a220:	f102 0314 	add.w	r3, r2, #20
 800a224:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a228:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a22c:	1f05      	subs	r5, r0, #4
 800a22e:	42a3      	cmp	r3, r4
 800a230:	d30c      	bcc.n	800a24c <__copybits+0x36>
 800a232:	1aa3      	subs	r3, r4, r2
 800a234:	3b11      	subs	r3, #17
 800a236:	f023 0303 	bic.w	r3, r3, #3
 800a23a:	3211      	adds	r2, #17
 800a23c:	42a2      	cmp	r2, r4
 800a23e:	bf88      	it	hi
 800a240:	2300      	movhi	r3, #0
 800a242:	4418      	add	r0, r3
 800a244:	2300      	movs	r3, #0
 800a246:	4288      	cmp	r0, r1
 800a248:	d305      	bcc.n	800a256 <__copybits+0x40>
 800a24a:	bd70      	pop	{r4, r5, r6, pc}
 800a24c:	f853 6b04 	ldr.w	r6, [r3], #4
 800a250:	f845 6f04 	str.w	r6, [r5, #4]!
 800a254:	e7eb      	b.n	800a22e <__copybits+0x18>
 800a256:	f840 3b04 	str.w	r3, [r0], #4
 800a25a:	e7f4      	b.n	800a246 <__copybits+0x30>

0800a25c <__any_on>:
 800a25c:	f100 0214 	add.w	r2, r0, #20
 800a260:	6900      	ldr	r0, [r0, #16]
 800a262:	114b      	asrs	r3, r1, #5
 800a264:	4298      	cmp	r0, r3
 800a266:	b510      	push	{r4, lr}
 800a268:	db11      	blt.n	800a28e <__any_on+0x32>
 800a26a:	dd0a      	ble.n	800a282 <__any_on+0x26>
 800a26c:	f011 011f 	ands.w	r1, r1, #31
 800a270:	d007      	beq.n	800a282 <__any_on+0x26>
 800a272:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a276:	fa24 f001 	lsr.w	r0, r4, r1
 800a27a:	fa00 f101 	lsl.w	r1, r0, r1
 800a27e:	428c      	cmp	r4, r1
 800a280:	d10b      	bne.n	800a29a <__any_on+0x3e>
 800a282:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a286:	4293      	cmp	r3, r2
 800a288:	d803      	bhi.n	800a292 <__any_on+0x36>
 800a28a:	2000      	movs	r0, #0
 800a28c:	bd10      	pop	{r4, pc}
 800a28e:	4603      	mov	r3, r0
 800a290:	e7f7      	b.n	800a282 <__any_on+0x26>
 800a292:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a296:	2900      	cmp	r1, #0
 800a298:	d0f5      	beq.n	800a286 <__any_on+0x2a>
 800a29a:	2001      	movs	r0, #1
 800a29c:	e7f6      	b.n	800a28c <__any_on+0x30>

0800a29e <_calloc_r>:
 800a29e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2a0:	fba1 2402 	umull	r2, r4, r1, r2
 800a2a4:	b94c      	cbnz	r4, 800a2ba <_calloc_r+0x1c>
 800a2a6:	4611      	mov	r1, r2
 800a2a8:	9201      	str	r2, [sp, #4]
 800a2aa:	f000 f87b 	bl	800a3a4 <_malloc_r>
 800a2ae:	9a01      	ldr	r2, [sp, #4]
 800a2b0:	4605      	mov	r5, r0
 800a2b2:	b930      	cbnz	r0, 800a2c2 <_calloc_r+0x24>
 800a2b4:	4628      	mov	r0, r5
 800a2b6:	b003      	add	sp, #12
 800a2b8:	bd30      	pop	{r4, r5, pc}
 800a2ba:	220c      	movs	r2, #12
 800a2bc:	6002      	str	r2, [r0, #0]
 800a2be:	2500      	movs	r5, #0
 800a2c0:	e7f8      	b.n	800a2b4 <_calloc_r+0x16>
 800a2c2:	4621      	mov	r1, r4
 800a2c4:	f7fc f83c 	bl	8006340 <memset>
 800a2c8:	e7f4      	b.n	800a2b4 <_calloc_r+0x16>
	...

0800a2cc <_free_r>:
 800a2cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2ce:	2900      	cmp	r1, #0
 800a2d0:	d044      	beq.n	800a35c <_free_r+0x90>
 800a2d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2d6:	9001      	str	r0, [sp, #4]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	f1a1 0404 	sub.w	r4, r1, #4
 800a2de:	bfb8      	it	lt
 800a2e0:	18e4      	addlt	r4, r4, r3
 800a2e2:	f000 fb4d 	bl	800a980 <__malloc_lock>
 800a2e6:	4a1e      	ldr	r2, [pc, #120]	; (800a360 <_free_r+0x94>)
 800a2e8:	9801      	ldr	r0, [sp, #4]
 800a2ea:	6813      	ldr	r3, [r2, #0]
 800a2ec:	b933      	cbnz	r3, 800a2fc <_free_r+0x30>
 800a2ee:	6063      	str	r3, [r4, #4]
 800a2f0:	6014      	str	r4, [r2, #0]
 800a2f2:	b003      	add	sp, #12
 800a2f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2f8:	f000 bb48 	b.w	800a98c <__malloc_unlock>
 800a2fc:	42a3      	cmp	r3, r4
 800a2fe:	d908      	bls.n	800a312 <_free_r+0x46>
 800a300:	6825      	ldr	r5, [r4, #0]
 800a302:	1961      	adds	r1, r4, r5
 800a304:	428b      	cmp	r3, r1
 800a306:	bf01      	itttt	eq
 800a308:	6819      	ldreq	r1, [r3, #0]
 800a30a:	685b      	ldreq	r3, [r3, #4]
 800a30c:	1949      	addeq	r1, r1, r5
 800a30e:	6021      	streq	r1, [r4, #0]
 800a310:	e7ed      	b.n	800a2ee <_free_r+0x22>
 800a312:	461a      	mov	r2, r3
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	b10b      	cbz	r3, 800a31c <_free_r+0x50>
 800a318:	42a3      	cmp	r3, r4
 800a31a:	d9fa      	bls.n	800a312 <_free_r+0x46>
 800a31c:	6811      	ldr	r1, [r2, #0]
 800a31e:	1855      	adds	r5, r2, r1
 800a320:	42a5      	cmp	r5, r4
 800a322:	d10b      	bne.n	800a33c <_free_r+0x70>
 800a324:	6824      	ldr	r4, [r4, #0]
 800a326:	4421      	add	r1, r4
 800a328:	1854      	adds	r4, r2, r1
 800a32a:	42a3      	cmp	r3, r4
 800a32c:	6011      	str	r1, [r2, #0]
 800a32e:	d1e0      	bne.n	800a2f2 <_free_r+0x26>
 800a330:	681c      	ldr	r4, [r3, #0]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	6053      	str	r3, [r2, #4]
 800a336:	4421      	add	r1, r4
 800a338:	6011      	str	r1, [r2, #0]
 800a33a:	e7da      	b.n	800a2f2 <_free_r+0x26>
 800a33c:	d902      	bls.n	800a344 <_free_r+0x78>
 800a33e:	230c      	movs	r3, #12
 800a340:	6003      	str	r3, [r0, #0]
 800a342:	e7d6      	b.n	800a2f2 <_free_r+0x26>
 800a344:	6825      	ldr	r5, [r4, #0]
 800a346:	1961      	adds	r1, r4, r5
 800a348:	428b      	cmp	r3, r1
 800a34a:	bf04      	itt	eq
 800a34c:	6819      	ldreq	r1, [r3, #0]
 800a34e:	685b      	ldreq	r3, [r3, #4]
 800a350:	6063      	str	r3, [r4, #4]
 800a352:	bf04      	itt	eq
 800a354:	1949      	addeq	r1, r1, r5
 800a356:	6021      	streq	r1, [r4, #0]
 800a358:	6054      	str	r4, [r2, #4]
 800a35a:	e7ca      	b.n	800a2f2 <_free_r+0x26>
 800a35c:	b003      	add	sp, #12
 800a35e:	bd30      	pop	{r4, r5, pc}
 800a360:	20001f98 	.word	0x20001f98

0800a364 <sbrk_aligned>:
 800a364:	b570      	push	{r4, r5, r6, lr}
 800a366:	4e0e      	ldr	r6, [pc, #56]	; (800a3a0 <sbrk_aligned+0x3c>)
 800a368:	460c      	mov	r4, r1
 800a36a:	6831      	ldr	r1, [r6, #0]
 800a36c:	4605      	mov	r5, r0
 800a36e:	b911      	cbnz	r1, 800a376 <sbrk_aligned+0x12>
 800a370:	f000 f9f2 	bl	800a758 <_sbrk_r>
 800a374:	6030      	str	r0, [r6, #0]
 800a376:	4621      	mov	r1, r4
 800a378:	4628      	mov	r0, r5
 800a37a:	f000 f9ed 	bl	800a758 <_sbrk_r>
 800a37e:	1c43      	adds	r3, r0, #1
 800a380:	d00a      	beq.n	800a398 <sbrk_aligned+0x34>
 800a382:	1cc4      	adds	r4, r0, #3
 800a384:	f024 0403 	bic.w	r4, r4, #3
 800a388:	42a0      	cmp	r0, r4
 800a38a:	d007      	beq.n	800a39c <sbrk_aligned+0x38>
 800a38c:	1a21      	subs	r1, r4, r0
 800a38e:	4628      	mov	r0, r5
 800a390:	f000 f9e2 	bl	800a758 <_sbrk_r>
 800a394:	3001      	adds	r0, #1
 800a396:	d101      	bne.n	800a39c <sbrk_aligned+0x38>
 800a398:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a39c:	4620      	mov	r0, r4
 800a39e:	bd70      	pop	{r4, r5, r6, pc}
 800a3a0:	20001f9c 	.word	0x20001f9c

0800a3a4 <_malloc_r>:
 800a3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3a8:	1ccd      	adds	r5, r1, #3
 800a3aa:	f025 0503 	bic.w	r5, r5, #3
 800a3ae:	3508      	adds	r5, #8
 800a3b0:	2d0c      	cmp	r5, #12
 800a3b2:	bf38      	it	cc
 800a3b4:	250c      	movcc	r5, #12
 800a3b6:	2d00      	cmp	r5, #0
 800a3b8:	4607      	mov	r7, r0
 800a3ba:	db01      	blt.n	800a3c0 <_malloc_r+0x1c>
 800a3bc:	42a9      	cmp	r1, r5
 800a3be:	d905      	bls.n	800a3cc <_malloc_r+0x28>
 800a3c0:	230c      	movs	r3, #12
 800a3c2:	603b      	str	r3, [r7, #0]
 800a3c4:	2600      	movs	r6, #0
 800a3c6:	4630      	mov	r0, r6
 800a3c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3cc:	4e2e      	ldr	r6, [pc, #184]	; (800a488 <_malloc_r+0xe4>)
 800a3ce:	f000 fad7 	bl	800a980 <__malloc_lock>
 800a3d2:	6833      	ldr	r3, [r6, #0]
 800a3d4:	461c      	mov	r4, r3
 800a3d6:	bb34      	cbnz	r4, 800a426 <_malloc_r+0x82>
 800a3d8:	4629      	mov	r1, r5
 800a3da:	4638      	mov	r0, r7
 800a3dc:	f7ff ffc2 	bl	800a364 <sbrk_aligned>
 800a3e0:	1c43      	adds	r3, r0, #1
 800a3e2:	4604      	mov	r4, r0
 800a3e4:	d14d      	bne.n	800a482 <_malloc_r+0xde>
 800a3e6:	6834      	ldr	r4, [r6, #0]
 800a3e8:	4626      	mov	r6, r4
 800a3ea:	2e00      	cmp	r6, #0
 800a3ec:	d140      	bne.n	800a470 <_malloc_r+0xcc>
 800a3ee:	6823      	ldr	r3, [r4, #0]
 800a3f0:	4631      	mov	r1, r6
 800a3f2:	4638      	mov	r0, r7
 800a3f4:	eb04 0803 	add.w	r8, r4, r3
 800a3f8:	f000 f9ae 	bl	800a758 <_sbrk_r>
 800a3fc:	4580      	cmp	r8, r0
 800a3fe:	d13a      	bne.n	800a476 <_malloc_r+0xd2>
 800a400:	6821      	ldr	r1, [r4, #0]
 800a402:	3503      	adds	r5, #3
 800a404:	1a6d      	subs	r5, r5, r1
 800a406:	f025 0503 	bic.w	r5, r5, #3
 800a40a:	3508      	adds	r5, #8
 800a40c:	2d0c      	cmp	r5, #12
 800a40e:	bf38      	it	cc
 800a410:	250c      	movcc	r5, #12
 800a412:	4629      	mov	r1, r5
 800a414:	4638      	mov	r0, r7
 800a416:	f7ff ffa5 	bl	800a364 <sbrk_aligned>
 800a41a:	3001      	adds	r0, #1
 800a41c:	d02b      	beq.n	800a476 <_malloc_r+0xd2>
 800a41e:	6823      	ldr	r3, [r4, #0]
 800a420:	442b      	add	r3, r5
 800a422:	6023      	str	r3, [r4, #0]
 800a424:	e00e      	b.n	800a444 <_malloc_r+0xa0>
 800a426:	6822      	ldr	r2, [r4, #0]
 800a428:	1b52      	subs	r2, r2, r5
 800a42a:	d41e      	bmi.n	800a46a <_malloc_r+0xc6>
 800a42c:	2a0b      	cmp	r2, #11
 800a42e:	d916      	bls.n	800a45e <_malloc_r+0xba>
 800a430:	1961      	adds	r1, r4, r5
 800a432:	42a3      	cmp	r3, r4
 800a434:	6025      	str	r5, [r4, #0]
 800a436:	bf18      	it	ne
 800a438:	6059      	strne	r1, [r3, #4]
 800a43a:	6863      	ldr	r3, [r4, #4]
 800a43c:	bf08      	it	eq
 800a43e:	6031      	streq	r1, [r6, #0]
 800a440:	5162      	str	r2, [r4, r5]
 800a442:	604b      	str	r3, [r1, #4]
 800a444:	4638      	mov	r0, r7
 800a446:	f104 060b 	add.w	r6, r4, #11
 800a44a:	f000 fa9f 	bl	800a98c <__malloc_unlock>
 800a44e:	f026 0607 	bic.w	r6, r6, #7
 800a452:	1d23      	adds	r3, r4, #4
 800a454:	1af2      	subs	r2, r6, r3
 800a456:	d0b6      	beq.n	800a3c6 <_malloc_r+0x22>
 800a458:	1b9b      	subs	r3, r3, r6
 800a45a:	50a3      	str	r3, [r4, r2]
 800a45c:	e7b3      	b.n	800a3c6 <_malloc_r+0x22>
 800a45e:	6862      	ldr	r2, [r4, #4]
 800a460:	42a3      	cmp	r3, r4
 800a462:	bf0c      	ite	eq
 800a464:	6032      	streq	r2, [r6, #0]
 800a466:	605a      	strne	r2, [r3, #4]
 800a468:	e7ec      	b.n	800a444 <_malloc_r+0xa0>
 800a46a:	4623      	mov	r3, r4
 800a46c:	6864      	ldr	r4, [r4, #4]
 800a46e:	e7b2      	b.n	800a3d6 <_malloc_r+0x32>
 800a470:	4634      	mov	r4, r6
 800a472:	6876      	ldr	r6, [r6, #4]
 800a474:	e7b9      	b.n	800a3ea <_malloc_r+0x46>
 800a476:	230c      	movs	r3, #12
 800a478:	603b      	str	r3, [r7, #0]
 800a47a:	4638      	mov	r0, r7
 800a47c:	f000 fa86 	bl	800a98c <__malloc_unlock>
 800a480:	e7a1      	b.n	800a3c6 <_malloc_r+0x22>
 800a482:	6025      	str	r5, [r4, #0]
 800a484:	e7de      	b.n	800a444 <_malloc_r+0xa0>
 800a486:	bf00      	nop
 800a488:	20001f98 	.word	0x20001f98

0800a48c <__ssputs_r>:
 800a48c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a490:	688e      	ldr	r6, [r1, #8]
 800a492:	429e      	cmp	r6, r3
 800a494:	4682      	mov	sl, r0
 800a496:	460c      	mov	r4, r1
 800a498:	4690      	mov	r8, r2
 800a49a:	461f      	mov	r7, r3
 800a49c:	d838      	bhi.n	800a510 <__ssputs_r+0x84>
 800a49e:	898a      	ldrh	r2, [r1, #12]
 800a4a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a4a4:	d032      	beq.n	800a50c <__ssputs_r+0x80>
 800a4a6:	6825      	ldr	r5, [r4, #0]
 800a4a8:	6909      	ldr	r1, [r1, #16]
 800a4aa:	eba5 0901 	sub.w	r9, r5, r1
 800a4ae:	6965      	ldr	r5, [r4, #20]
 800a4b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a4b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	444b      	add	r3, r9
 800a4bc:	106d      	asrs	r5, r5, #1
 800a4be:	429d      	cmp	r5, r3
 800a4c0:	bf38      	it	cc
 800a4c2:	461d      	movcc	r5, r3
 800a4c4:	0553      	lsls	r3, r2, #21
 800a4c6:	d531      	bpl.n	800a52c <__ssputs_r+0xa0>
 800a4c8:	4629      	mov	r1, r5
 800a4ca:	f7ff ff6b 	bl	800a3a4 <_malloc_r>
 800a4ce:	4606      	mov	r6, r0
 800a4d0:	b950      	cbnz	r0, 800a4e8 <__ssputs_r+0x5c>
 800a4d2:	230c      	movs	r3, #12
 800a4d4:	f8ca 3000 	str.w	r3, [sl]
 800a4d8:	89a3      	ldrh	r3, [r4, #12]
 800a4da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4de:	81a3      	strh	r3, [r4, #12]
 800a4e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4e8:	6921      	ldr	r1, [r4, #16]
 800a4ea:	464a      	mov	r2, r9
 800a4ec:	f7fb ff1a 	bl	8006324 <memcpy>
 800a4f0:	89a3      	ldrh	r3, [r4, #12]
 800a4f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a4f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4fa:	81a3      	strh	r3, [r4, #12]
 800a4fc:	6126      	str	r6, [r4, #16]
 800a4fe:	6165      	str	r5, [r4, #20]
 800a500:	444e      	add	r6, r9
 800a502:	eba5 0509 	sub.w	r5, r5, r9
 800a506:	6026      	str	r6, [r4, #0]
 800a508:	60a5      	str	r5, [r4, #8]
 800a50a:	463e      	mov	r6, r7
 800a50c:	42be      	cmp	r6, r7
 800a50e:	d900      	bls.n	800a512 <__ssputs_r+0x86>
 800a510:	463e      	mov	r6, r7
 800a512:	6820      	ldr	r0, [r4, #0]
 800a514:	4632      	mov	r2, r6
 800a516:	4641      	mov	r1, r8
 800a518:	f000 fa18 	bl	800a94c <memmove>
 800a51c:	68a3      	ldr	r3, [r4, #8]
 800a51e:	1b9b      	subs	r3, r3, r6
 800a520:	60a3      	str	r3, [r4, #8]
 800a522:	6823      	ldr	r3, [r4, #0]
 800a524:	4433      	add	r3, r6
 800a526:	6023      	str	r3, [r4, #0]
 800a528:	2000      	movs	r0, #0
 800a52a:	e7db      	b.n	800a4e4 <__ssputs_r+0x58>
 800a52c:	462a      	mov	r2, r5
 800a52e:	f000 fa33 	bl	800a998 <_realloc_r>
 800a532:	4606      	mov	r6, r0
 800a534:	2800      	cmp	r0, #0
 800a536:	d1e1      	bne.n	800a4fc <__ssputs_r+0x70>
 800a538:	6921      	ldr	r1, [r4, #16]
 800a53a:	4650      	mov	r0, sl
 800a53c:	f7ff fec6 	bl	800a2cc <_free_r>
 800a540:	e7c7      	b.n	800a4d2 <__ssputs_r+0x46>
	...

0800a544 <_svfiprintf_r>:
 800a544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a548:	4698      	mov	r8, r3
 800a54a:	898b      	ldrh	r3, [r1, #12]
 800a54c:	061b      	lsls	r3, r3, #24
 800a54e:	b09d      	sub	sp, #116	; 0x74
 800a550:	4607      	mov	r7, r0
 800a552:	460d      	mov	r5, r1
 800a554:	4614      	mov	r4, r2
 800a556:	d50e      	bpl.n	800a576 <_svfiprintf_r+0x32>
 800a558:	690b      	ldr	r3, [r1, #16]
 800a55a:	b963      	cbnz	r3, 800a576 <_svfiprintf_r+0x32>
 800a55c:	2140      	movs	r1, #64	; 0x40
 800a55e:	f7ff ff21 	bl	800a3a4 <_malloc_r>
 800a562:	6028      	str	r0, [r5, #0]
 800a564:	6128      	str	r0, [r5, #16]
 800a566:	b920      	cbnz	r0, 800a572 <_svfiprintf_r+0x2e>
 800a568:	230c      	movs	r3, #12
 800a56a:	603b      	str	r3, [r7, #0]
 800a56c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a570:	e0d1      	b.n	800a716 <_svfiprintf_r+0x1d2>
 800a572:	2340      	movs	r3, #64	; 0x40
 800a574:	616b      	str	r3, [r5, #20]
 800a576:	2300      	movs	r3, #0
 800a578:	9309      	str	r3, [sp, #36]	; 0x24
 800a57a:	2320      	movs	r3, #32
 800a57c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a580:	f8cd 800c 	str.w	r8, [sp, #12]
 800a584:	2330      	movs	r3, #48	; 0x30
 800a586:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a730 <_svfiprintf_r+0x1ec>
 800a58a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a58e:	f04f 0901 	mov.w	r9, #1
 800a592:	4623      	mov	r3, r4
 800a594:	469a      	mov	sl, r3
 800a596:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a59a:	b10a      	cbz	r2, 800a5a0 <_svfiprintf_r+0x5c>
 800a59c:	2a25      	cmp	r2, #37	; 0x25
 800a59e:	d1f9      	bne.n	800a594 <_svfiprintf_r+0x50>
 800a5a0:	ebba 0b04 	subs.w	fp, sl, r4
 800a5a4:	d00b      	beq.n	800a5be <_svfiprintf_r+0x7a>
 800a5a6:	465b      	mov	r3, fp
 800a5a8:	4622      	mov	r2, r4
 800a5aa:	4629      	mov	r1, r5
 800a5ac:	4638      	mov	r0, r7
 800a5ae:	f7ff ff6d 	bl	800a48c <__ssputs_r>
 800a5b2:	3001      	adds	r0, #1
 800a5b4:	f000 80aa 	beq.w	800a70c <_svfiprintf_r+0x1c8>
 800a5b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5ba:	445a      	add	r2, fp
 800a5bc:	9209      	str	r2, [sp, #36]	; 0x24
 800a5be:	f89a 3000 	ldrb.w	r3, [sl]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	f000 80a2 	beq.w	800a70c <_svfiprintf_r+0x1c8>
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a5ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5d2:	f10a 0a01 	add.w	sl, sl, #1
 800a5d6:	9304      	str	r3, [sp, #16]
 800a5d8:	9307      	str	r3, [sp, #28]
 800a5da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5de:	931a      	str	r3, [sp, #104]	; 0x68
 800a5e0:	4654      	mov	r4, sl
 800a5e2:	2205      	movs	r2, #5
 800a5e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5e8:	4851      	ldr	r0, [pc, #324]	; (800a730 <_svfiprintf_r+0x1ec>)
 800a5ea:	f7f5 fe09 	bl	8000200 <memchr>
 800a5ee:	9a04      	ldr	r2, [sp, #16]
 800a5f0:	b9d8      	cbnz	r0, 800a62a <_svfiprintf_r+0xe6>
 800a5f2:	06d0      	lsls	r0, r2, #27
 800a5f4:	bf44      	itt	mi
 800a5f6:	2320      	movmi	r3, #32
 800a5f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5fc:	0711      	lsls	r1, r2, #28
 800a5fe:	bf44      	itt	mi
 800a600:	232b      	movmi	r3, #43	; 0x2b
 800a602:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a606:	f89a 3000 	ldrb.w	r3, [sl]
 800a60a:	2b2a      	cmp	r3, #42	; 0x2a
 800a60c:	d015      	beq.n	800a63a <_svfiprintf_r+0xf6>
 800a60e:	9a07      	ldr	r2, [sp, #28]
 800a610:	4654      	mov	r4, sl
 800a612:	2000      	movs	r0, #0
 800a614:	f04f 0c0a 	mov.w	ip, #10
 800a618:	4621      	mov	r1, r4
 800a61a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a61e:	3b30      	subs	r3, #48	; 0x30
 800a620:	2b09      	cmp	r3, #9
 800a622:	d94e      	bls.n	800a6c2 <_svfiprintf_r+0x17e>
 800a624:	b1b0      	cbz	r0, 800a654 <_svfiprintf_r+0x110>
 800a626:	9207      	str	r2, [sp, #28]
 800a628:	e014      	b.n	800a654 <_svfiprintf_r+0x110>
 800a62a:	eba0 0308 	sub.w	r3, r0, r8
 800a62e:	fa09 f303 	lsl.w	r3, r9, r3
 800a632:	4313      	orrs	r3, r2
 800a634:	9304      	str	r3, [sp, #16]
 800a636:	46a2      	mov	sl, r4
 800a638:	e7d2      	b.n	800a5e0 <_svfiprintf_r+0x9c>
 800a63a:	9b03      	ldr	r3, [sp, #12]
 800a63c:	1d19      	adds	r1, r3, #4
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	9103      	str	r1, [sp, #12]
 800a642:	2b00      	cmp	r3, #0
 800a644:	bfbb      	ittet	lt
 800a646:	425b      	neglt	r3, r3
 800a648:	f042 0202 	orrlt.w	r2, r2, #2
 800a64c:	9307      	strge	r3, [sp, #28]
 800a64e:	9307      	strlt	r3, [sp, #28]
 800a650:	bfb8      	it	lt
 800a652:	9204      	strlt	r2, [sp, #16]
 800a654:	7823      	ldrb	r3, [r4, #0]
 800a656:	2b2e      	cmp	r3, #46	; 0x2e
 800a658:	d10c      	bne.n	800a674 <_svfiprintf_r+0x130>
 800a65a:	7863      	ldrb	r3, [r4, #1]
 800a65c:	2b2a      	cmp	r3, #42	; 0x2a
 800a65e:	d135      	bne.n	800a6cc <_svfiprintf_r+0x188>
 800a660:	9b03      	ldr	r3, [sp, #12]
 800a662:	1d1a      	adds	r2, r3, #4
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	9203      	str	r2, [sp, #12]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	bfb8      	it	lt
 800a66c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a670:	3402      	adds	r4, #2
 800a672:	9305      	str	r3, [sp, #20]
 800a674:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a740 <_svfiprintf_r+0x1fc>
 800a678:	7821      	ldrb	r1, [r4, #0]
 800a67a:	2203      	movs	r2, #3
 800a67c:	4650      	mov	r0, sl
 800a67e:	f7f5 fdbf 	bl	8000200 <memchr>
 800a682:	b140      	cbz	r0, 800a696 <_svfiprintf_r+0x152>
 800a684:	2340      	movs	r3, #64	; 0x40
 800a686:	eba0 000a 	sub.w	r0, r0, sl
 800a68a:	fa03 f000 	lsl.w	r0, r3, r0
 800a68e:	9b04      	ldr	r3, [sp, #16]
 800a690:	4303      	orrs	r3, r0
 800a692:	3401      	adds	r4, #1
 800a694:	9304      	str	r3, [sp, #16]
 800a696:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a69a:	4826      	ldr	r0, [pc, #152]	; (800a734 <_svfiprintf_r+0x1f0>)
 800a69c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6a0:	2206      	movs	r2, #6
 800a6a2:	f7f5 fdad 	bl	8000200 <memchr>
 800a6a6:	2800      	cmp	r0, #0
 800a6a8:	d038      	beq.n	800a71c <_svfiprintf_r+0x1d8>
 800a6aa:	4b23      	ldr	r3, [pc, #140]	; (800a738 <_svfiprintf_r+0x1f4>)
 800a6ac:	bb1b      	cbnz	r3, 800a6f6 <_svfiprintf_r+0x1b2>
 800a6ae:	9b03      	ldr	r3, [sp, #12]
 800a6b0:	3307      	adds	r3, #7
 800a6b2:	f023 0307 	bic.w	r3, r3, #7
 800a6b6:	3308      	adds	r3, #8
 800a6b8:	9303      	str	r3, [sp, #12]
 800a6ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6bc:	4433      	add	r3, r6
 800a6be:	9309      	str	r3, [sp, #36]	; 0x24
 800a6c0:	e767      	b.n	800a592 <_svfiprintf_r+0x4e>
 800a6c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6c6:	460c      	mov	r4, r1
 800a6c8:	2001      	movs	r0, #1
 800a6ca:	e7a5      	b.n	800a618 <_svfiprintf_r+0xd4>
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	3401      	adds	r4, #1
 800a6d0:	9305      	str	r3, [sp, #20]
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	f04f 0c0a 	mov.w	ip, #10
 800a6d8:	4620      	mov	r0, r4
 800a6da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6de:	3a30      	subs	r2, #48	; 0x30
 800a6e0:	2a09      	cmp	r2, #9
 800a6e2:	d903      	bls.n	800a6ec <_svfiprintf_r+0x1a8>
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d0c5      	beq.n	800a674 <_svfiprintf_r+0x130>
 800a6e8:	9105      	str	r1, [sp, #20]
 800a6ea:	e7c3      	b.n	800a674 <_svfiprintf_r+0x130>
 800a6ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6f0:	4604      	mov	r4, r0
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	e7f0      	b.n	800a6d8 <_svfiprintf_r+0x194>
 800a6f6:	ab03      	add	r3, sp, #12
 800a6f8:	9300      	str	r3, [sp, #0]
 800a6fa:	462a      	mov	r2, r5
 800a6fc:	4b0f      	ldr	r3, [pc, #60]	; (800a73c <_svfiprintf_r+0x1f8>)
 800a6fe:	a904      	add	r1, sp, #16
 800a700:	4638      	mov	r0, r7
 800a702:	f7fb fec5 	bl	8006490 <_printf_float>
 800a706:	1c42      	adds	r2, r0, #1
 800a708:	4606      	mov	r6, r0
 800a70a:	d1d6      	bne.n	800a6ba <_svfiprintf_r+0x176>
 800a70c:	89ab      	ldrh	r3, [r5, #12]
 800a70e:	065b      	lsls	r3, r3, #25
 800a710:	f53f af2c 	bmi.w	800a56c <_svfiprintf_r+0x28>
 800a714:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a716:	b01d      	add	sp, #116	; 0x74
 800a718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a71c:	ab03      	add	r3, sp, #12
 800a71e:	9300      	str	r3, [sp, #0]
 800a720:	462a      	mov	r2, r5
 800a722:	4b06      	ldr	r3, [pc, #24]	; (800a73c <_svfiprintf_r+0x1f8>)
 800a724:	a904      	add	r1, sp, #16
 800a726:	4638      	mov	r0, r7
 800a728:	f7fc f956 	bl	80069d8 <_printf_i>
 800a72c:	e7eb      	b.n	800a706 <_svfiprintf_r+0x1c2>
 800a72e:	bf00      	nop
 800a730:	0800b694 	.word	0x0800b694
 800a734:	0800b69e 	.word	0x0800b69e
 800a738:	08006491 	.word	0x08006491
 800a73c:	0800a48d 	.word	0x0800a48d
 800a740:	0800b69a 	.word	0x0800b69a
 800a744:	00000000 	.word	0x00000000

0800a748 <nan>:
 800a748:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a750 <nan+0x8>
 800a74c:	4770      	bx	lr
 800a74e:	bf00      	nop
 800a750:	00000000 	.word	0x00000000
 800a754:	7ff80000 	.word	0x7ff80000

0800a758 <_sbrk_r>:
 800a758:	b538      	push	{r3, r4, r5, lr}
 800a75a:	4d06      	ldr	r5, [pc, #24]	; (800a774 <_sbrk_r+0x1c>)
 800a75c:	2300      	movs	r3, #0
 800a75e:	4604      	mov	r4, r0
 800a760:	4608      	mov	r0, r1
 800a762:	602b      	str	r3, [r5, #0]
 800a764:	f7f8 f930 	bl	80029c8 <_sbrk>
 800a768:	1c43      	adds	r3, r0, #1
 800a76a:	d102      	bne.n	800a772 <_sbrk_r+0x1a>
 800a76c:	682b      	ldr	r3, [r5, #0]
 800a76e:	b103      	cbz	r3, 800a772 <_sbrk_r+0x1a>
 800a770:	6023      	str	r3, [r4, #0]
 800a772:	bd38      	pop	{r3, r4, r5, pc}
 800a774:	20001fa0 	.word	0x20001fa0

0800a778 <__sread>:
 800a778:	b510      	push	{r4, lr}
 800a77a:	460c      	mov	r4, r1
 800a77c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a780:	f000 fa92 	bl	800aca8 <_read_r>
 800a784:	2800      	cmp	r0, #0
 800a786:	bfab      	itete	ge
 800a788:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a78a:	89a3      	ldrhlt	r3, [r4, #12]
 800a78c:	181b      	addge	r3, r3, r0
 800a78e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a792:	bfac      	ite	ge
 800a794:	6563      	strge	r3, [r4, #84]	; 0x54
 800a796:	81a3      	strhlt	r3, [r4, #12]
 800a798:	bd10      	pop	{r4, pc}

0800a79a <__swrite>:
 800a79a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a79e:	461f      	mov	r7, r3
 800a7a0:	898b      	ldrh	r3, [r1, #12]
 800a7a2:	05db      	lsls	r3, r3, #23
 800a7a4:	4605      	mov	r5, r0
 800a7a6:	460c      	mov	r4, r1
 800a7a8:	4616      	mov	r6, r2
 800a7aa:	d505      	bpl.n	800a7b8 <__swrite+0x1e>
 800a7ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7b0:	2302      	movs	r3, #2
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f000 f8b8 	bl	800a928 <_lseek_r>
 800a7b8:	89a3      	ldrh	r3, [r4, #12]
 800a7ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a7c2:	81a3      	strh	r3, [r4, #12]
 800a7c4:	4632      	mov	r2, r6
 800a7c6:	463b      	mov	r3, r7
 800a7c8:	4628      	mov	r0, r5
 800a7ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ce:	f000 b837 	b.w	800a840 <_write_r>

0800a7d2 <__sseek>:
 800a7d2:	b510      	push	{r4, lr}
 800a7d4:	460c      	mov	r4, r1
 800a7d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7da:	f000 f8a5 	bl	800a928 <_lseek_r>
 800a7de:	1c43      	adds	r3, r0, #1
 800a7e0:	89a3      	ldrh	r3, [r4, #12]
 800a7e2:	bf15      	itete	ne
 800a7e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a7e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a7ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a7ee:	81a3      	strheq	r3, [r4, #12]
 800a7f0:	bf18      	it	ne
 800a7f2:	81a3      	strhne	r3, [r4, #12]
 800a7f4:	bd10      	pop	{r4, pc}

0800a7f6 <__sclose>:
 800a7f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7fa:	f000 b851 	b.w	800a8a0 <_close_r>

0800a7fe <strncmp>:
 800a7fe:	b510      	push	{r4, lr}
 800a800:	b17a      	cbz	r2, 800a822 <strncmp+0x24>
 800a802:	4603      	mov	r3, r0
 800a804:	3901      	subs	r1, #1
 800a806:	1884      	adds	r4, r0, r2
 800a808:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a80c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a810:	4290      	cmp	r0, r2
 800a812:	d101      	bne.n	800a818 <strncmp+0x1a>
 800a814:	42a3      	cmp	r3, r4
 800a816:	d101      	bne.n	800a81c <strncmp+0x1e>
 800a818:	1a80      	subs	r0, r0, r2
 800a81a:	bd10      	pop	{r4, pc}
 800a81c:	2800      	cmp	r0, #0
 800a81e:	d1f3      	bne.n	800a808 <strncmp+0xa>
 800a820:	e7fa      	b.n	800a818 <strncmp+0x1a>
 800a822:	4610      	mov	r0, r2
 800a824:	e7f9      	b.n	800a81a <strncmp+0x1c>

0800a826 <__ascii_wctomb>:
 800a826:	b149      	cbz	r1, 800a83c <__ascii_wctomb+0x16>
 800a828:	2aff      	cmp	r2, #255	; 0xff
 800a82a:	bf85      	ittet	hi
 800a82c:	238a      	movhi	r3, #138	; 0x8a
 800a82e:	6003      	strhi	r3, [r0, #0]
 800a830:	700a      	strbls	r2, [r1, #0]
 800a832:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a836:	bf98      	it	ls
 800a838:	2001      	movls	r0, #1
 800a83a:	4770      	bx	lr
 800a83c:	4608      	mov	r0, r1
 800a83e:	4770      	bx	lr

0800a840 <_write_r>:
 800a840:	b538      	push	{r3, r4, r5, lr}
 800a842:	4d07      	ldr	r5, [pc, #28]	; (800a860 <_write_r+0x20>)
 800a844:	4604      	mov	r4, r0
 800a846:	4608      	mov	r0, r1
 800a848:	4611      	mov	r1, r2
 800a84a:	2200      	movs	r2, #0
 800a84c:	602a      	str	r2, [r5, #0]
 800a84e:	461a      	mov	r2, r3
 800a850:	f7f8 f869 	bl	8002926 <_write>
 800a854:	1c43      	adds	r3, r0, #1
 800a856:	d102      	bne.n	800a85e <_write_r+0x1e>
 800a858:	682b      	ldr	r3, [r5, #0]
 800a85a:	b103      	cbz	r3, 800a85e <_write_r+0x1e>
 800a85c:	6023      	str	r3, [r4, #0]
 800a85e:	bd38      	pop	{r3, r4, r5, pc}
 800a860:	20001fa0 	.word	0x20001fa0

0800a864 <__assert_func>:
 800a864:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a866:	4614      	mov	r4, r2
 800a868:	461a      	mov	r2, r3
 800a86a:	4b09      	ldr	r3, [pc, #36]	; (800a890 <__assert_func+0x2c>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4605      	mov	r5, r0
 800a870:	68d8      	ldr	r0, [r3, #12]
 800a872:	b14c      	cbz	r4, 800a888 <__assert_func+0x24>
 800a874:	4b07      	ldr	r3, [pc, #28]	; (800a894 <__assert_func+0x30>)
 800a876:	9100      	str	r1, [sp, #0]
 800a878:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a87c:	4906      	ldr	r1, [pc, #24]	; (800a898 <__assert_func+0x34>)
 800a87e:	462b      	mov	r3, r5
 800a880:	f000 f81e 	bl	800a8c0 <fiprintf>
 800a884:	f000 fa22 	bl	800accc <abort>
 800a888:	4b04      	ldr	r3, [pc, #16]	; (800a89c <__assert_func+0x38>)
 800a88a:	461c      	mov	r4, r3
 800a88c:	e7f3      	b.n	800a876 <__assert_func+0x12>
 800a88e:	bf00      	nop
 800a890:	2000003c 	.word	0x2000003c
 800a894:	0800b6a5 	.word	0x0800b6a5
 800a898:	0800b6b2 	.word	0x0800b6b2
 800a89c:	0800b6e0 	.word	0x0800b6e0

0800a8a0 <_close_r>:
 800a8a0:	b538      	push	{r3, r4, r5, lr}
 800a8a2:	4d06      	ldr	r5, [pc, #24]	; (800a8bc <_close_r+0x1c>)
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	4604      	mov	r4, r0
 800a8a8:	4608      	mov	r0, r1
 800a8aa:	602b      	str	r3, [r5, #0]
 800a8ac:	f7f8 f857 	bl	800295e <_close>
 800a8b0:	1c43      	adds	r3, r0, #1
 800a8b2:	d102      	bne.n	800a8ba <_close_r+0x1a>
 800a8b4:	682b      	ldr	r3, [r5, #0]
 800a8b6:	b103      	cbz	r3, 800a8ba <_close_r+0x1a>
 800a8b8:	6023      	str	r3, [r4, #0]
 800a8ba:	bd38      	pop	{r3, r4, r5, pc}
 800a8bc:	20001fa0 	.word	0x20001fa0

0800a8c0 <fiprintf>:
 800a8c0:	b40e      	push	{r1, r2, r3}
 800a8c2:	b503      	push	{r0, r1, lr}
 800a8c4:	4601      	mov	r1, r0
 800a8c6:	ab03      	add	r3, sp, #12
 800a8c8:	4805      	ldr	r0, [pc, #20]	; (800a8e0 <fiprintf+0x20>)
 800a8ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8ce:	6800      	ldr	r0, [r0, #0]
 800a8d0:	9301      	str	r3, [sp, #4]
 800a8d2:	f000 f8b9 	bl	800aa48 <_vfiprintf_r>
 800a8d6:	b002      	add	sp, #8
 800a8d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8dc:	b003      	add	sp, #12
 800a8de:	4770      	bx	lr
 800a8e0:	2000003c 	.word	0x2000003c

0800a8e4 <_fstat_r>:
 800a8e4:	b538      	push	{r3, r4, r5, lr}
 800a8e6:	4d07      	ldr	r5, [pc, #28]	; (800a904 <_fstat_r+0x20>)
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	4604      	mov	r4, r0
 800a8ec:	4608      	mov	r0, r1
 800a8ee:	4611      	mov	r1, r2
 800a8f0:	602b      	str	r3, [r5, #0]
 800a8f2:	f7f8 f840 	bl	8002976 <_fstat>
 800a8f6:	1c43      	adds	r3, r0, #1
 800a8f8:	d102      	bne.n	800a900 <_fstat_r+0x1c>
 800a8fa:	682b      	ldr	r3, [r5, #0]
 800a8fc:	b103      	cbz	r3, 800a900 <_fstat_r+0x1c>
 800a8fe:	6023      	str	r3, [r4, #0]
 800a900:	bd38      	pop	{r3, r4, r5, pc}
 800a902:	bf00      	nop
 800a904:	20001fa0 	.word	0x20001fa0

0800a908 <_isatty_r>:
 800a908:	b538      	push	{r3, r4, r5, lr}
 800a90a:	4d06      	ldr	r5, [pc, #24]	; (800a924 <_isatty_r+0x1c>)
 800a90c:	2300      	movs	r3, #0
 800a90e:	4604      	mov	r4, r0
 800a910:	4608      	mov	r0, r1
 800a912:	602b      	str	r3, [r5, #0]
 800a914:	f7f8 f83f 	bl	8002996 <_isatty>
 800a918:	1c43      	adds	r3, r0, #1
 800a91a:	d102      	bne.n	800a922 <_isatty_r+0x1a>
 800a91c:	682b      	ldr	r3, [r5, #0]
 800a91e:	b103      	cbz	r3, 800a922 <_isatty_r+0x1a>
 800a920:	6023      	str	r3, [r4, #0]
 800a922:	bd38      	pop	{r3, r4, r5, pc}
 800a924:	20001fa0 	.word	0x20001fa0

0800a928 <_lseek_r>:
 800a928:	b538      	push	{r3, r4, r5, lr}
 800a92a:	4d07      	ldr	r5, [pc, #28]	; (800a948 <_lseek_r+0x20>)
 800a92c:	4604      	mov	r4, r0
 800a92e:	4608      	mov	r0, r1
 800a930:	4611      	mov	r1, r2
 800a932:	2200      	movs	r2, #0
 800a934:	602a      	str	r2, [r5, #0]
 800a936:	461a      	mov	r2, r3
 800a938:	f7f8 f838 	bl	80029ac <_lseek>
 800a93c:	1c43      	adds	r3, r0, #1
 800a93e:	d102      	bne.n	800a946 <_lseek_r+0x1e>
 800a940:	682b      	ldr	r3, [r5, #0]
 800a942:	b103      	cbz	r3, 800a946 <_lseek_r+0x1e>
 800a944:	6023      	str	r3, [r4, #0]
 800a946:	bd38      	pop	{r3, r4, r5, pc}
 800a948:	20001fa0 	.word	0x20001fa0

0800a94c <memmove>:
 800a94c:	4288      	cmp	r0, r1
 800a94e:	b510      	push	{r4, lr}
 800a950:	eb01 0402 	add.w	r4, r1, r2
 800a954:	d902      	bls.n	800a95c <memmove+0x10>
 800a956:	4284      	cmp	r4, r0
 800a958:	4623      	mov	r3, r4
 800a95a:	d807      	bhi.n	800a96c <memmove+0x20>
 800a95c:	1e43      	subs	r3, r0, #1
 800a95e:	42a1      	cmp	r1, r4
 800a960:	d008      	beq.n	800a974 <memmove+0x28>
 800a962:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a966:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a96a:	e7f8      	b.n	800a95e <memmove+0x12>
 800a96c:	4402      	add	r2, r0
 800a96e:	4601      	mov	r1, r0
 800a970:	428a      	cmp	r2, r1
 800a972:	d100      	bne.n	800a976 <memmove+0x2a>
 800a974:	bd10      	pop	{r4, pc}
 800a976:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a97a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a97e:	e7f7      	b.n	800a970 <memmove+0x24>

0800a980 <__malloc_lock>:
 800a980:	4801      	ldr	r0, [pc, #4]	; (800a988 <__malloc_lock+0x8>)
 800a982:	f7fe bf4a 	b.w	800981a <__retarget_lock_acquire_recursive>
 800a986:	bf00      	nop
 800a988:	20001f94 	.word	0x20001f94

0800a98c <__malloc_unlock>:
 800a98c:	4801      	ldr	r0, [pc, #4]	; (800a994 <__malloc_unlock+0x8>)
 800a98e:	f7fe bf45 	b.w	800981c <__retarget_lock_release_recursive>
 800a992:	bf00      	nop
 800a994:	20001f94 	.word	0x20001f94

0800a998 <_realloc_r>:
 800a998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a99c:	4680      	mov	r8, r0
 800a99e:	4614      	mov	r4, r2
 800a9a0:	460e      	mov	r6, r1
 800a9a2:	b921      	cbnz	r1, 800a9ae <_realloc_r+0x16>
 800a9a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9a8:	4611      	mov	r1, r2
 800a9aa:	f7ff bcfb 	b.w	800a3a4 <_malloc_r>
 800a9ae:	b92a      	cbnz	r2, 800a9bc <_realloc_r+0x24>
 800a9b0:	f7ff fc8c 	bl	800a2cc <_free_r>
 800a9b4:	4625      	mov	r5, r4
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9bc:	f000 f98d 	bl	800acda <_malloc_usable_size_r>
 800a9c0:	4284      	cmp	r4, r0
 800a9c2:	4607      	mov	r7, r0
 800a9c4:	d802      	bhi.n	800a9cc <_realloc_r+0x34>
 800a9c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a9ca:	d812      	bhi.n	800a9f2 <_realloc_r+0x5a>
 800a9cc:	4621      	mov	r1, r4
 800a9ce:	4640      	mov	r0, r8
 800a9d0:	f7ff fce8 	bl	800a3a4 <_malloc_r>
 800a9d4:	4605      	mov	r5, r0
 800a9d6:	2800      	cmp	r0, #0
 800a9d8:	d0ed      	beq.n	800a9b6 <_realloc_r+0x1e>
 800a9da:	42bc      	cmp	r4, r7
 800a9dc:	4622      	mov	r2, r4
 800a9de:	4631      	mov	r1, r6
 800a9e0:	bf28      	it	cs
 800a9e2:	463a      	movcs	r2, r7
 800a9e4:	f7fb fc9e 	bl	8006324 <memcpy>
 800a9e8:	4631      	mov	r1, r6
 800a9ea:	4640      	mov	r0, r8
 800a9ec:	f7ff fc6e 	bl	800a2cc <_free_r>
 800a9f0:	e7e1      	b.n	800a9b6 <_realloc_r+0x1e>
 800a9f2:	4635      	mov	r5, r6
 800a9f4:	e7df      	b.n	800a9b6 <_realloc_r+0x1e>

0800a9f6 <__sfputc_r>:
 800a9f6:	6893      	ldr	r3, [r2, #8]
 800a9f8:	3b01      	subs	r3, #1
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	b410      	push	{r4}
 800a9fe:	6093      	str	r3, [r2, #8]
 800aa00:	da08      	bge.n	800aa14 <__sfputc_r+0x1e>
 800aa02:	6994      	ldr	r4, [r2, #24]
 800aa04:	42a3      	cmp	r3, r4
 800aa06:	db01      	blt.n	800aa0c <__sfputc_r+0x16>
 800aa08:	290a      	cmp	r1, #10
 800aa0a:	d103      	bne.n	800aa14 <__sfputc_r+0x1e>
 800aa0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa10:	f7fd ba9e 	b.w	8007f50 <__swbuf_r>
 800aa14:	6813      	ldr	r3, [r2, #0]
 800aa16:	1c58      	adds	r0, r3, #1
 800aa18:	6010      	str	r0, [r2, #0]
 800aa1a:	7019      	strb	r1, [r3, #0]
 800aa1c:	4608      	mov	r0, r1
 800aa1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa22:	4770      	bx	lr

0800aa24 <__sfputs_r>:
 800aa24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa26:	4606      	mov	r6, r0
 800aa28:	460f      	mov	r7, r1
 800aa2a:	4614      	mov	r4, r2
 800aa2c:	18d5      	adds	r5, r2, r3
 800aa2e:	42ac      	cmp	r4, r5
 800aa30:	d101      	bne.n	800aa36 <__sfputs_r+0x12>
 800aa32:	2000      	movs	r0, #0
 800aa34:	e007      	b.n	800aa46 <__sfputs_r+0x22>
 800aa36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa3a:	463a      	mov	r2, r7
 800aa3c:	4630      	mov	r0, r6
 800aa3e:	f7ff ffda 	bl	800a9f6 <__sfputc_r>
 800aa42:	1c43      	adds	r3, r0, #1
 800aa44:	d1f3      	bne.n	800aa2e <__sfputs_r+0xa>
 800aa46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aa48 <_vfiprintf_r>:
 800aa48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa4c:	460d      	mov	r5, r1
 800aa4e:	b09d      	sub	sp, #116	; 0x74
 800aa50:	4614      	mov	r4, r2
 800aa52:	4698      	mov	r8, r3
 800aa54:	4606      	mov	r6, r0
 800aa56:	b118      	cbz	r0, 800aa60 <_vfiprintf_r+0x18>
 800aa58:	6983      	ldr	r3, [r0, #24]
 800aa5a:	b90b      	cbnz	r3, 800aa60 <_vfiprintf_r+0x18>
 800aa5c:	f7fe facc 	bl	8008ff8 <__sinit>
 800aa60:	4b89      	ldr	r3, [pc, #548]	; (800ac88 <_vfiprintf_r+0x240>)
 800aa62:	429d      	cmp	r5, r3
 800aa64:	d11b      	bne.n	800aa9e <_vfiprintf_r+0x56>
 800aa66:	6875      	ldr	r5, [r6, #4]
 800aa68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa6a:	07d9      	lsls	r1, r3, #31
 800aa6c:	d405      	bmi.n	800aa7a <_vfiprintf_r+0x32>
 800aa6e:	89ab      	ldrh	r3, [r5, #12]
 800aa70:	059a      	lsls	r2, r3, #22
 800aa72:	d402      	bmi.n	800aa7a <_vfiprintf_r+0x32>
 800aa74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa76:	f7fe fed0 	bl	800981a <__retarget_lock_acquire_recursive>
 800aa7a:	89ab      	ldrh	r3, [r5, #12]
 800aa7c:	071b      	lsls	r3, r3, #28
 800aa7e:	d501      	bpl.n	800aa84 <_vfiprintf_r+0x3c>
 800aa80:	692b      	ldr	r3, [r5, #16]
 800aa82:	b9eb      	cbnz	r3, 800aac0 <_vfiprintf_r+0x78>
 800aa84:	4629      	mov	r1, r5
 800aa86:	4630      	mov	r0, r6
 800aa88:	f7fd fab4 	bl	8007ff4 <__swsetup_r>
 800aa8c:	b1c0      	cbz	r0, 800aac0 <_vfiprintf_r+0x78>
 800aa8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa90:	07dc      	lsls	r4, r3, #31
 800aa92:	d50e      	bpl.n	800aab2 <_vfiprintf_r+0x6a>
 800aa94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa98:	b01d      	add	sp, #116	; 0x74
 800aa9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa9e:	4b7b      	ldr	r3, [pc, #492]	; (800ac8c <_vfiprintf_r+0x244>)
 800aaa0:	429d      	cmp	r5, r3
 800aaa2:	d101      	bne.n	800aaa8 <_vfiprintf_r+0x60>
 800aaa4:	68b5      	ldr	r5, [r6, #8]
 800aaa6:	e7df      	b.n	800aa68 <_vfiprintf_r+0x20>
 800aaa8:	4b79      	ldr	r3, [pc, #484]	; (800ac90 <_vfiprintf_r+0x248>)
 800aaaa:	429d      	cmp	r5, r3
 800aaac:	bf08      	it	eq
 800aaae:	68f5      	ldreq	r5, [r6, #12]
 800aab0:	e7da      	b.n	800aa68 <_vfiprintf_r+0x20>
 800aab2:	89ab      	ldrh	r3, [r5, #12]
 800aab4:	0598      	lsls	r0, r3, #22
 800aab6:	d4ed      	bmi.n	800aa94 <_vfiprintf_r+0x4c>
 800aab8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aaba:	f7fe feaf 	bl	800981c <__retarget_lock_release_recursive>
 800aabe:	e7e9      	b.n	800aa94 <_vfiprintf_r+0x4c>
 800aac0:	2300      	movs	r3, #0
 800aac2:	9309      	str	r3, [sp, #36]	; 0x24
 800aac4:	2320      	movs	r3, #32
 800aac6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aaca:	f8cd 800c 	str.w	r8, [sp, #12]
 800aace:	2330      	movs	r3, #48	; 0x30
 800aad0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ac94 <_vfiprintf_r+0x24c>
 800aad4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aad8:	f04f 0901 	mov.w	r9, #1
 800aadc:	4623      	mov	r3, r4
 800aade:	469a      	mov	sl, r3
 800aae0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aae4:	b10a      	cbz	r2, 800aaea <_vfiprintf_r+0xa2>
 800aae6:	2a25      	cmp	r2, #37	; 0x25
 800aae8:	d1f9      	bne.n	800aade <_vfiprintf_r+0x96>
 800aaea:	ebba 0b04 	subs.w	fp, sl, r4
 800aaee:	d00b      	beq.n	800ab08 <_vfiprintf_r+0xc0>
 800aaf0:	465b      	mov	r3, fp
 800aaf2:	4622      	mov	r2, r4
 800aaf4:	4629      	mov	r1, r5
 800aaf6:	4630      	mov	r0, r6
 800aaf8:	f7ff ff94 	bl	800aa24 <__sfputs_r>
 800aafc:	3001      	adds	r0, #1
 800aafe:	f000 80aa 	beq.w	800ac56 <_vfiprintf_r+0x20e>
 800ab02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab04:	445a      	add	r2, fp
 800ab06:	9209      	str	r2, [sp, #36]	; 0x24
 800ab08:	f89a 3000 	ldrb.w	r3, [sl]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	f000 80a2 	beq.w	800ac56 <_vfiprintf_r+0x20e>
 800ab12:	2300      	movs	r3, #0
 800ab14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab1c:	f10a 0a01 	add.w	sl, sl, #1
 800ab20:	9304      	str	r3, [sp, #16]
 800ab22:	9307      	str	r3, [sp, #28]
 800ab24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab28:	931a      	str	r3, [sp, #104]	; 0x68
 800ab2a:	4654      	mov	r4, sl
 800ab2c:	2205      	movs	r2, #5
 800ab2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab32:	4858      	ldr	r0, [pc, #352]	; (800ac94 <_vfiprintf_r+0x24c>)
 800ab34:	f7f5 fb64 	bl	8000200 <memchr>
 800ab38:	9a04      	ldr	r2, [sp, #16]
 800ab3a:	b9d8      	cbnz	r0, 800ab74 <_vfiprintf_r+0x12c>
 800ab3c:	06d1      	lsls	r1, r2, #27
 800ab3e:	bf44      	itt	mi
 800ab40:	2320      	movmi	r3, #32
 800ab42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab46:	0713      	lsls	r3, r2, #28
 800ab48:	bf44      	itt	mi
 800ab4a:	232b      	movmi	r3, #43	; 0x2b
 800ab4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab50:	f89a 3000 	ldrb.w	r3, [sl]
 800ab54:	2b2a      	cmp	r3, #42	; 0x2a
 800ab56:	d015      	beq.n	800ab84 <_vfiprintf_r+0x13c>
 800ab58:	9a07      	ldr	r2, [sp, #28]
 800ab5a:	4654      	mov	r4, sl
 800ab5c:	2000      	movs	r0, #0
 800ab5e:	f04f 0c0a 	mov.w	ip, #10
 800ab62:	4621      	mov	r1, r4
 800ab64:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab68:	3b30      	subs	r3, #48	; 0x30
 800ab6a:	2b09      	cmp	r3, #9
 800ab6c:	d94e      	bls.n	800ac0c <_vfiprintf_r+0x1c4>
 800ab6e:	b1b0      	cbz	r0, 800ab9e <_vfiprintf_r+0x156>
 800ab70:	9207      	str	r2, [sp, #28]
 800ab72:	e014      	b.n	800ab9e <_vfiprintf_r+0x156>
 800ab74:	eba0 0308 	sub.w	r3, r0, r8
 800ab78:	fa09 f303 	lsl.w	r3, r9, r3
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	9304      	str	r3, [sp, #16]
 800ab80:	46a2      	mov	sl, r4
 800ab82:	e7d2      	b.n	800ab2a <_vfiprintf_r+0xe2>
 800ab84:	9b03      	ldr	r3, [sp, #12]
 800ab86:	1d19      	adds	r1, r3, #4
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	9103      	str	r1, [sp, #12]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	bfbb      	ittet	lt
 800ab90:	425b      	neglt	r3, r3
 800ab92:	f042 0202 	orrlt.w	r2, r2, #2
 800ab96:	9307      	strge	r3, [sp, #28]
 800ab98:	9307      	strlt	r3, [sp, #28]
 800ab9a:	bfb8      	it	lt
 800ab9c:	9204      	strlt	r2, [sp, #16]
 800ab9e:	7823      	ldrb	r3, [r4, #0]
 800aba0:	2b2e      	cmp	r3, #46	; 0x2e
 800aba2:	d10c      	bne.n	800abbe <_vfiprintf_r+0x176>
 800aba4:	7863      	ldrb	r3, [r4, #1]
 800aba6:	2b2a      	cmp	r3, #42	; 0x2a
 800aba8:	d135      	bne.n	800ac16 <_vfiprintf_r+0x1ce>
 800abaa:	9b03      	ldr	r3, [sp, #12]
 800abac:	1d1a      	adds	r2, r3, #4
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	9203      	str	r2, [sp, #12]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	bfb8      	it	lt
 800abb6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800abba:	3402      	adds	r4, #2
 800abbc:	9305      	str	r3, [sp, #20]
 800abbe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aca4 <_vfiprintf_r+0x25c>
 800abc2:	7821      	ldrb	r1, [r4, #0]
 800abc4:	2203      	movs	r2, #3
 800abc6:	4650      	mov	r0, sl
 800abc8:	f7f5 fb1a 	bl	8000200 <memchr>
 800abcc:	b140      	cbz	r0, 800abe0 <_vfiprintf_r+0x198>
 800abce:	2340      	movs	r3, #64	; 0x40
 800abd0:	eba0 000a 	sub.w	r0, r0, sl
 800abd4:	fa03 f000 	lsl.w	r0, r3, r0
 800abd8:	9b04      	ldr	r3, [sp, #16]
 800abda:	4303      	orrs	r3, r0
 800abdc:	3401      	adds	r4, #1
 800abde:	9304      	str	r3, [sp, #16]
 800abe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abe4:	482c      	ldr	r0, [pc, #176]	; (800ac98 <_vfiprintf_r+0x250>)
 800abe6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800abea:	2206      	movs	r2, #6
 800abec:	f7f5 fb08 	bl	8000200 <memchr>
 800abf0:	2800      	cmp	r0, #0
 800abf2:	d03f      	beq.n	800ac74 <_vfiprintf_r+0x22c>
 800abf4:	4b29      	ldr	r3, [pc, #164]	; (800ac9c <_vfiprintf_r+0x254>)
 800abf6:	bb1b      	cbnz	r3, 800ac40 <_vfiprintf_r+0x1f8>
 800abf8:	9b03      	ldr	r3, [sp, #12]
 800abfa:	3307      	adds	r3, #7
 800abfc:	f023 0307 	bic.w	r3, r3, #7
 800ac00:	3308      	adds	r3, #8
 800ac02:	9303      	str	r3, [sp, #12]
 800ac04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac06:	443b      	add	r3, r7
 800ac08:	9309      	str	r3, [sp, #36]	; 0x24
 800ac0a:	e767      	b.n	800aadc <_vfiprintf_r+0x94>
 800ac0c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac10:	460c      	mov	r4, r1
 800ac12:	2001      	movs	r0, #1
 800ac14:	e7a5      	b.n	800ab62 <_vfiprintf_r+0x11a>
 800ac16:	2300      	movs	r3, #0
 800ac18:	3401      	adds	r4, #1
 800ac1a:	9305      	str	r3, [sp, #20]
 800ac1c:	4619      	mov	r1, r3
 800ac1e:	f04f 0c0a 	mov.w	ip, #10
 800ac22:	4620      	mov	r0, r4
 800ac24:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac28:	3a30      	subs	r2, #48	; 0x30
 800ac2a:	2a09      	cmp	r2, #9
 800ac2c:	d903      	bls.n	800ac36 <_vfiprintf_r+0x1ee>
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d0c5      	beq.n	800abbe <_vfiprintf_r+0x176>
 800ac32:	9105      	str	r1, [sp, #20]
 800ac34:	e7c3      	b.n	800abbe <_vfiprintf_r+0x176>
 800ac36:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac3a:	4604      	mov	r4, r0
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	e7f0      	b.n	800ac22 <_vfiprintf_r+0x1da>
 800ac40:	ab03      	add	r3, sp, #12
 800ac42:	9300      	str	r3, [sp, #0]
 800ac44:	462a      	mov	r2, r5
 800ac46:	4b16      	ldr	r3, [pc, #88]	; (800aca0 <_vfiprintf_r+0x258>)
 800ac48:	a904      	add	r1, sp, #16
 800ac4a:	4630      	mov	r0, r6
 800ac4c:	f7fb fc20 	bl	8006490 <_printf_float>
 800ac50:	4607      	mov	r7, r0
 800ac52:	1c78      	adds	r0, r7, #1
 800ac54:	d1d6      	bne.n	800ac04 <_vfiprintf_r+0x1bc>
 800ac56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac58:	07d9      	lsls	r1, r3, #31
 800ac5a:	d405      	bmi.n	800ac68 <_vfiprintf_r+0x220>
 800ac5c:	89ab      	ldrh	r3, [r5, #12]
 800ac5e:	059a      	lsls	r2, r3, #22
 800ac60:	d402      	bmi.n	800ac68 <_vfiprintf_r+0x220>
 800ac62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac64:	f7fe fdda 	bl	800981c <__retarget_lock_release_recursive>
 800ac68:	89ab      	ldrh	r3, [r5, #12]
 800ac6a:	065b      	lsls	r3, r3, #25
 800ac6c:	f53f af12 	bmi.w	800aa94 <_vfiprintf_r+0x4c>
 800ac70:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac72:	e711      	b.n	800aa98 <_vfiprintf_r+0x50>
 800ac74:	ab03      	add	r3, sp, #12
 800ac76:	9300      	str	r3, [sp, #0]
 800ac78:	462a      	mov	r2, r5
 800ac7a:	4b09      	ldr	r3, [pc, #36]	; (800aca0 <_vfiprintf_r+0x258>)
 800ac7c:	a904      	add	r1, sp, #16
 800ac7e:	4630      	mov	r0, r6
 800ac80:	f7fb feaa 	bl	80069d8 <_printf_i>
 800ac84:	e7e4      	b.n	800ac50 <_vfiprintf_r+0x208>
 800ac86:	bf00      	nop
 800ac88:	0800b47c 	.word	0x0800b47c
 800ac8c:	0800b49c 	.word	0x0800b49c
 800ac90:	0800b45c 	.word	0x0800b45c
 800ac94:	0800b694 	.word	0x0800b694
 800ac98:	0800b69e 	.word	0x0800b69e
 800ac9c:	08006491 	.word	0x08006491
 800aca0:	0800aa25 	.word	0x0800aa25
 800aca4:	0800b69a 	.word	0x0800b69a

0800aca8 <_read_r>:
 800aca8:	b538      	push	{r3, r4, r5, lr}
 800acaa:	4d07      	ldr	r5, [pc, #28]	; (800acc8 <_read_r+0x20>)
 800acac:	4604      	mov	r4, r0
 800acae:	4608      	mov	r0, r1
 800acb0:	4611      	mov	r1, r2
 800acb2:	2200      	movs	r2, #0
 800acb4:	602a      	str	r2, [r5, #0]
 800acb6:	461a      	mov	r2, r3
 800acb8:	f7f7 fe18 	bl	80028ec <_read>
 800acbc:	1c43      	adds	r3, r0, #1
 800acbe:	d102      	bne.n	800acc6 <_read_r+0x1e>
 800acc0:	682b      	ldr	r3, [r5, #0]
 800acc2:	b103      	cbz	r3, 800acc6 <_read_r+0x1e>
 800acc4:	6023      	str	r3, [r4, #0]
 800acc6:	bd38      	pop	{r3, r4, r5, pc}
 800acc8:	20001fa0 	.word	0x20001fa0

0800accc <abort>:
 800accc:	b508      	push	{r3, lr}
 800acce:	2006      	movs	r0, #6
 800acd0:	f000 f834 	bl	800ad3c <raise>
 800acd4:	2001      	movs	r0, #1
 800acd6:	f7f7 fdff 	bl	80028d8 <_exit>

0800acda <_malloc_usable_size_r>:
 800acda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acde:	1f18      	subs	r0, r3, #4
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	bfbc      	itt	lt
 800ace4:	580b      	ldrlt	r3, [r1, r0]
 800ace6:	18c0      	addlt	r0, r0, r3
 800ace8:	4770      	bx	lr

0800acea <_raise_r>:
 800acea:	291f      	cmp	r1, #31
 800acec:	b538      	push	{r3, r4, r5, lr}
 800acee:	4604      	mov	r4, r0
 800acf0:	460d      	mov	r5, r1
 800acf2:	d904      	bls.n	800acfe <_raise_r+0x14>
 800acf4:	2316      	movs	r3, #22
 800acf6:	6003      	str	r3, [r0, #0]
 800acf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800acfc:	bd38      	pop	{r3, r4, r5, pc}
 800acfe:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ad00:	b112      	cbz	r2, 800ad08 <_raise_r+0x1e>
 800ad02:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad06:	b94b      	cbnz	r3, 800ad1c <_raise_r+0x32>
 800ad08:	4620      	mov	r0, r4
 800ad0a:	f000 f831 	bl	800ad70 <_getpid_r>
 800ad0e:	462a      	mov	r2, r5
 800ad10:	4601      	mov	r1, r0
 800ad12:	4620      	mov	r0, r4
 800ad14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad18:	f000 b818 	b.w	800ad4c <_kill_r>
 800ad1c:	2b01      	cmp	r3, #1
 800ad1e:	d00a      	beq.n	800ad36 <_raise_r+0x4c>
 800ad20:	1c59      	adds	r1, r3, #1
 800ad22:	d103      	bne.n	800ad2c <_raise_r+0x42>
 800ad24:	2316      	movs	r3, #22
 800ad26:	6003      	str	r3, [r0, #0]
 800ad28:	2001      	movs	r0, #1
 800ad2a:	e7e7      	b.n	800acfc <_raise_r+0x12>
 800ad2c:	2400      	movs	r4, #0
 800ad2e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ad32:	4628      	mov	r0, r5
 800ad34:	4798      	blx	r3
 800ad36:	2000      	movs	r0, #0
 800ad38:	e7e0      	b.n	800acfc <_raise_r+0x12>
	...

0800ad3c <raise>:
 800ad3c:	4b02      	ldr	r3, [pc, #8]	; (800ad48 <raise+0xc>)
 800ad3e:	4601      	mov	r1, r0
 800ad40:	6818      	ldr	r0, [r3, #0]
 800ad42:	f7ff bfd2 	b.w	800acea <_raise_r>
 800ad46:	bf00      	nop
 800ad48:	2000003c 	.word	0x2000003c

0800ad4c <_kill_r>:
 800ad4c:	b538      	push	{r3, r4, r5, lr}
 800ad4e:	4d07      	ldr	r5, [pc, #28]	; (800ad6c <_kill_r+0x20>)
 800ad50:	2300      	movs	r3, #0
 800ad52:	4604      	mov	r4, r0
 800ad54:	4608      	mov	r0, r1
 800ad56:	4611      	mov	r1, r2
 800ad58:	602b      	str	r3, [r5, #0]
 800ad5a:	f7f7 fdad 	bl	80028b8 <_kill>
 800ad5e:	1c43      	adds	r3, r0, #1
 800ad60:	d102      	bne.n	800ad68 <_kill_r+0x1c>
 800ad62:	682b      	ldr	r3, [r5, #0]
 800ad64:	b103      	cbz	r3, 800ad68 <_kill_r+0x1c>
 800ad66:	6023      	str	r3, [r4, #0]
 800ad68:	bd38      	pop	{r3, r4, r5, pc}
 800ad6a:	bf00      	nop
 800ad6c:	20001fa0 	.word	0x20001fa0

0800ad70 <_getpid_r>:
 800ad70:	f7f7 bd9a 	b.w	80028a8 <_getpid>

0800ad74 <_init>:
 800ad74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad76:	bf00      	nop
 800ad78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad7a:	bc08      	pop	{r3}
 800ad7c:	469e      	mov	lr, r3
 800ad7e:	4770      	bx	lr

0800ad80 <_fini>:
 800ad80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad82:	bf00      	nop
 800ad84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad86:	bc08      	pop	{r3}
 800ad88:	469e      	mov	lr, r3
 800ad8a:	4770      	bx	lr
