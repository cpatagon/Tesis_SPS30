
Tesis_SPS30.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010be4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021f4  08010d98  08010d98  00020d98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012f8c  08012f8c  0003034c  2**0
                  CONTENTS
  4 .ARM          00000008  08012f8c  08012f8c  00022f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012f94  08012f94  0003034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012f94  08012f94  00022f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012f98  08012f98  00022f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  08012f9c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003034c  2**0
                  CONTENTS
 10 .bss          000022b0  2000034c  2000034c  0003034c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200025fc  200025fc  0003034c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003034c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ed74  00000000  00000000  0003037c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000517d  00000000  00000000  0004f0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f0  00000000  00000000  00054270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001388  00000000  00000000  00055860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b899  00000000  00000000  00056be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027206  00000000  00000000  00082481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2c7c  00000000  00000000  000a9687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018c303  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006ce8  00000000  00000000  0018c354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000034c 	.word	0x2000034c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08010d7c 	.word	0x08010d7c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000350 	.word	0x20000350
 80001ec:	08010d7c 	.word	0x08010d7c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <DHT22_Init>:
 * @param[in] GPIOx Puerto GPIO al que está conectado el DHT22.
 * @param[in] GPIO_Pin Pin GPIO al que está conectado el DHT22.
 *
 * @retval None
 */
void DHT22_Init(DHT22_HandleTypeDef * dht, GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	4613      	mov	r3, r2
 8001024:	80fb      	strh	r3, [r7, #6]
    DHT22_InitHardware(dht, GPIOx, GPIO_Pin);
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	461a      	mov	r2, r3
 800102a:	68b9      	ldr	r1, [r7, #8]
 800102c:	68f8      	ldr	r0, [r7, #12]
 800102e:	f000 f8f9 	bl	8001224 <DHT22_InitHardware>
    DWT_Init();
 8001032:	f000 fa97 	bl	8001564 <DWT_Init>
}
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <DHT22_Read>:
 * puerto y pin GPIO.
 * @param[out] data Puntero a la estructura DHT22_Data donde se almacenarán los datos leídos.
 *
 * @retval int Estado de la operación: DHT22_OK si es exitoso, código de error si falla.
 */
int DHT22_Read(DHT22_HandleTypeDef * dht, DHT22_Data * data) {
 8001040:	b590      	push	{r4, r7, lr}
 8001042:	b087      	sub	sp, #28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
    uint8_t bits[NUM_BITS] = {INIT_BITS}; // Array para almacenar los bits leídos
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	2300      	movs	r3, #0
 8001050:	743b      	strb	r3, [r7, #16]
    uint8_t checksum = INIT_CHECKSUM;     // Inicializar el checksum
 8001052:	2300      	movs	r3, #0
 8001054:	74bb      	strb	r3, [r7, #18]

    // Enviar señal de inicio
    DHT22_StartSignal(dht);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f000 f9fe 	bl	8001458 <DHT22_StartSignal>

    // Esperar respuesta del sensor: DHT22 debe poner el pin en bajo por 80 µs y luego en alto por
    // 80 µs
    uint32_t timeout = INIT_TIMEOUT;
 800105c:	2364      	movs	r3, #100	; 0x64
 800105e:	617b      	str	r3, [r7, #20]
    while (HAL_GPIO_ReadPin(dht->GPIOx, dht->GPIO_Pin) == GPIO_PIN_SET) {
 8001060:	e007      	b.n	8001072 <DHT22_Read+0x32>
        if (--timeout == FIN_TIMEOUT) {
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3b01      	subs	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <DHT22_Read+0x32>
            return DHT22_ERROR_PIN_HIGH; // Error si el pin permanece en alto
 800106e:	4b40      	ldr	r3, [pc, #256]	; (8001170 <DHT22_Read+0x130>)
 8001070:	e075      	b.n	800115e <DHT22_Read+0x11e>
    while (HAL_GPIO_ReadPin(dht->GPIOx, dht->GPIO_Pin) == GPIO_PIN_SET) {
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	889b      	ldrh	r3, [r3, #4]
 800107a:	4619      	mov	r1, r3
 800107c:	4610      	mov	r0, r2
 800107e:	f004 fb61 	bl	8005744 <HAL_GPIO_ReadPin>
 8001082:	4603      	mov	r3, r0
 8001084:	2b01      	cmp	r3, #1
 8001086:	d0ec      	beq.n	8001062 <DHT22_Read+0x22>
        }
    }
    DWT_Delay(DELAY_T_REL); // Esperar 80 µs
 8001088:	2050      	movs	r0, #80	; 0x50
 800108a:	f000 fa85 	bl	8001598 <DWT_Delay>

    timeout = INIT_TIMEOUT;
 800108e:	2364      	movs	r3, #100	; 0x64
 8001090:	617b      	str	r3, [r7, #20]
    while (HAL_GPIO_ReadPin(dht->GPIOx, dht->GPIO_Pin) == GPIO_PIN_RESET) {
 8001092:	e007      	b.n	80010a4 <DHT22_Read+0x64>
        if (--timeout == FIN_TIMEOUT) {
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	3b01      	subs	r3, #1
 8001098:	617b      	str	r3, [r7, #20]
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d101      	bne.n	80010a4 <DHT22_Read+0x64>
            return DHT22_ERROR_PIN_LOW; // Error si el pin permanece en bajo
 80010a0:	4b34      	ldr	r3, [pc, #208]	; (8001174 <DHT22_Read+0x134>)
 80010a2:	e05c      	b.n	800115e <DHT22_Read+0x11e>
    while (HAL_GPIO_ReadPin(dht->GPIOx, dht->GPIO_Pin) == GPIO_PIN_RESET) {
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	889b      	ldrh	r3, [r3, #4]
 80010ac:	4619      	mov	r1, r3
 80010ae:	4610      	mov	r0, r2
 80010b0:	f004 fb48 	bl	8005744 <HAL_GPIO_ReadPin>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d0ec      	beq.n	8001094 <DHT22_Read+0x54>
        }
    }
    DWT_Delay(DELAY_T_REH); // Esperar 80 µs
 80010ba:	2050      	movs	r0, #80	; 0x50
 80010bc:	f000 fa6c 	bl	8001598 <DWT_Delay>

    // Leer los 40 bits de datos (5 bytes)
    for (uint8_t i = 0; i < DHT22_DATA_BYTES; i++) {
 80010c0:	2300      	movs	r3, #0
 80010c2:	74fb      	strb	r3, [r7, #19]
 80010c4:	e00d      	b.n	80010e2 <DHT22_Read+0xa2>
        bits[i] = DHT22_ReadByte(dht);
 80010c6:	7cfc      	ldrb	r4, [r7, #19]
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 f9ea 	bl	80014a2 <DHT22_ReadByte>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	f104 0318 	add.w	r3, r4, #24
 80010d6:	443b      	add	r3, r7
 80010d8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < DHT22_DATA_BYTES; i++) {
 80010dc:	7cfb      	ldrb	r3, [r7, #19]
 80010de:	3301      	adds	r3, #1
 80010e0:	74fb      	strb	r3, [r7, #19]
 80010e2:	7cfb      	ldrb	r3, [r7, #19]
 80010e4:	2b04      	cmp	r3, #4
 80010e6:	d9ee      	bls.n	80010c6 <DHT22_Read+0x86>
    }

    // Calcular el checksum
    checksum = bits[0] + bits[1] + bits[2] + bits[3];
 80010e8:	7b3a      	ldrb	r2, [r7, #12]
 80010ea:	7b7b      	ldrb	r3, [r7, #13]
 80010ec:	4413      	add	r3, r2
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	7bbb      	ldrb	r3, [r7, #14]
 80010f2:	4413      	add	r3, r2
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	4413      	add	r3, r2
 80010fa:	74bb      	strb	r3, [r7, #18]
    if (checksum != bits[4]) {
 80010fc:	7c3b      	ldrb	r3, [r7, #16]
 80010fe:	7cba      	ldrb	r2, [r7, #18]
 8001100:	429a      	cmp	r2, r3
 8001102:	d001      	beq.n	8001108 <DHT22_Read+0xc8>
        return DHT22_ERROR_CHECKSUM; // Error si el checksum no coincide
 8001104:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <DHT22_Read+0x138>)
 8001106:	e02a      	b.n	800115e <DHT22_Read+0x11e>
    }

    // Convertir los datos
    data->humedad =
        ((bits[0] << DHT22_HUMIDITY_SHIFT) | bits[1]) * DHT22_CONVERSION_FACTOR; // Calcular humedad
 8001108:	7b3b      	ldrb	r3, [r7, #12]
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	7b7a      	ldrb	r2, [r7, #13]
 800110e:	4313      	orrs	r3, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fa17 	bl	8000544 <__aeabi_i2d>
 8001116:	a314      	add	r3, pc, #80	; (adr r3, 8001168 <DHT22_Read+0x128>)
 8001118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111c:	f7ff fa7c 	bl	8000618 <__aeabi_dmul>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	4610      	mov	r0, r2
 8001126:	4619      	mov	r1, r3
 8001128:	f7ff fd6e 	bl	8000c08 <__aeabi_d2f>
 800112c:	4602      	mov	r2, r0
    data->humedad =
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	605a      	str	r2, [r3, #4]
    data->temperatura = ((bits[2] << DHT22_TEMPERATURE_SHIFT) | bits[3]) *
 8001132:	7bbb      	ldrb	r3, [r7, #14]
 8001134:	021b      	lsls	r3, r3, #8
 8001136:	7bfa      	ldrb	r2, [r7, #15]
 8001138:	4313      	orrs	r3, r2
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fa02 	bl	8000544 <__aeabi_i2d>
 8001140:	a309      	add	r3, pc, #36	; (adr r3, 8001168 <DHT22_Read+0x128>)
 8001142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001146:	f7ff fa67 	bl	8000618 <__aeabi_dmul>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4610      	mov	r0, r2
 8001150:	4619      	mov	r1, r3
 8001152:	f7ff fd59 	bl	8000c08 <__aeabi_d2f>
 8001156:	4602      	mov	r2, r0
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	601a      	str	r2, [r3, #0]
                        DHT22_CONVERSION_FACTOR; // Calcular temperatura
    return DHT22_OK;                             // Operación exitosa
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	371c      	adds	r7, #28
 8001162:	46bd      	mov	sp, r7
 8001164:	bd90      	pop	{r4, r7, pc}
 8001166:	bf00      	nop
 8001168:	9999999a 	.word	0x9999999a
 800116c:	3fb99999 	.word	0x3fb99999
 8001170:	0001863d 	.word	0x0001863d
 8001174:	0001863e 	.word	0x0001863e
 8001178:	0001863f 	.word	0x0001863f

0800117c <DHT22_ReadSimple>:
 * @param[out] hum  Puntero a variable de salida con la humedad relativa en %.
 *
 * @retval true si la lectura fue exitosa y los datos son válidos.
 * @retval false si hubo error de lectura o si los datos están fuera de rango.
 */
bool DHT22_ReadSimple(DHT22_HandleTypeDef * dht, float * temp, float * hum) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
    DHT22_Data data;

    if (DHT22_Read(dht, &data) != DHT22_OK) {
 8001188:	f107 0310 	add.w	r3, r7, #16
 800118c:	4619      	mov	r1, r3
 800118e:	68f8      	ldr	r0, [r7, #12]
 8001190:	f7ff ff56 	bl	8001040 <DHT22_Read>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d007      	beq.n	80011aa <DHT22_ReadSimple+0x2e>
        *temp = -99.9f;
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	4a1d      	ldr	r2, [pc, #116]	; (8001214 <DHT22_ReadSimple+0x98>)
 800119e:	601a      	str	r2, [r3, #0]
        *hum = -99.9f;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a1c      	ldr	r2, [pc, #112]	; (8001214 <DHT22_ReadSimple+0x98>)
 80011a4:	601a      	str	r2, [r3, #0]
        return false;
 80011a6:	2300      	movs	r3, #0
 80011a8:	e030      	b.n	800120c <DHT22_ReadSimple+0x90>
    }

    // Validar rangos físicos esperados
    if (data.temperatura < -40.0f || data.temperatura > 80.0f || data.humedad < 0.0f ||
 80011aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80011ae:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001218 <DHT22_ReadSimple+0x9c>
 80011b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ba:	d418      	bmi.n	80011ee <DHT22_ReadSimple+0x72>
 80011bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80011c0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800121c <DHT22_ReadSimple+0xa0>
 80011c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011cc:	dc0f      	bgt.n	80011ee <DHT22_ReadSimple+0x72>
 80011ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80011d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011da:	d408      	bmi.n	80011ee <DHT22_ReadSimple+0x72>
        data.humedad > 100.0f) {
 80011dc:	edd7 7a05 	vldr	s15, [r7, #20]
    if (data.temperatura < -40.0f || data.temperatura > 80.0f || data.humedad < 0.0f ||
 80011e0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001220 <DHT22_ReadSimple+0xa4>
 80011e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ec:	dd07      	ble.n	80011fe <DHT22_ReadSimple+0x82>
        *temp = -99.9f;
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	4a08      	ldr	r2, [pc, #32]	; (8001214 <DHT22_ReadSimple+0x98>)
 80011f2:	601a      	str	r2, [r3, #0]
        *hum = -99.9f;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a07      	ldr	r2, [pc, #28]	; (8001214 <DHT22_ReadSimple+0x98>)
 80011f8:	601a      	str	r2, [r3, #0]
        return false;
 80011fa:	2300      	movs	r3, #0
 80011fc:	e006      	b.n	800120c <DHT22_ReadSimple+0x90>
    }

    *temp = data.temperatura;
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	601a      	str	r2, [r3, #0]
    *hum = data.humedad;
 8001204:	697a      	ldr	r2, [r7, #20]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	601a      	str	r2, [r3, #0]
    return true;
 800120a:	2301      	movs	r3, #1
}
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	c2c7cccd 	.word	0xc2c7cccd
 8001218:	c2200000 	.word	0xc2200000
 800121c:	42a00000 	.word	0x42a00000
 8001220:	42c80000 	.word	0x42c80000

08001224 <DHT22_InitHardware>:
 * @param[in] GPIOx Puerto GPIO al que está conectado el DHT22.
 * @param[in] GPIO_Pin Pin GPIO al que está conectado el DHT22.
 *
 * @retval None
 */
void DHT22_InitHardware(DHT22_HandleTypeDef * dht, GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b08e      	sub	sp, #56	; 0x38
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	4613      	mov	r3, r2
 8001230:	80fb      	strh	r3, [r7, #6]
    dht->GPIOx = GPIOx;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	68ba      	ldr	r2, [r7, #8]
 8001236:	601a      	str	r2, [r3, #0]
    dht->GPIO_Pin = GPIO_Pin;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	88fa      	ldrh	r2, [r7, #6]
 800123c:	809a      	strh	r2, [r3, #4]

    // Habilitar el reloj para el puerto GPIO específico
    if (GPIOx == GPIOA)
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	4a5b      	ldr	r2, [pc, #364]	; (80013b0 <DHT22_InitHardware+0x18c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d10e      	bne.n	8001264 <DHT22_InitHardware+0x40>
        __HAL_RCC_GPIOA_CLK_ENABLE(); // Habilitar reloj para puerto GPIOA
 8001246:	2300      	movs	r3, #0
 8001248:	637b      	str	r3, [r7, #52]	; 0x34
 800124a:	4b5a      	ldr	r3, [pc, #360]	; (80013b4 <DHT22_InitHardware+0x190>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a59      	ldr	r2, [pc, #356]	; (80013b4 <DHT22_InitHardware+0x190>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b57      	ldr	r3, [pc, #348]	; (80013b4 <DHT22_InitHardware+0x190>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	637b      	str	r3, [r7, #52]	; 0x34
 8001260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001262:	e096      	b.n	8001392 <DHT22_InitHardware+0x16e>
    else if (GPIOx == GPIOB)
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	4a54      	ldr	r2, [pc, #336]	; (80013b8 <DHT22_InitHardware+0x194>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d10e      	bne.n	800128a <DHT22_InitHardware+0x66>
        __HAL_RCC_GPIOB_CLK_ENABLE(); // Habilitar reloj para puerto GPIOB
 800126c:	2300      	movs	r3, #0
 800126e:	633b      	str	r3, [r7, #48]	; 0x30
 8001270:	4b50      	ldr	r3, [pc, #320]	; (80013b4 <DHT22_InitHardware+0x190>)
 8001272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001274:	4a4f      	ldr	r2, [pc, #316]	; (80013b4 <DHT22_InitHardware+0x190>)
 8001276:	f043 0302 	orr.w	r3, r3, #2
 800127a:	6313      	str	r3, [r2, #48]	; 0x30
 800127c:	4b4d      	ldr	r3, [pc, #308]	; (80013b4 <DHT22_InitHardware+0x190>)
 800127e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	633b      	str	r3, [r7, #48]	; 0x30
 8001286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001288:	e083      	b.n	8001392 <DHT22_InitHardware+0x16e>
    else if (GPIOx == GPIOC)
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	4a4b      	ldr	r2, [pc, #300]	; (80013bc <DHT22_InitHardware+0x198>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d10e      	bne.n	80012b0 <DHT22_InitHardware+0x8c>
        __HAL_RCC_GPIOC_CLK_ENABLE(); // Habilitar reloj para puerto GPIOC
 8001292:	2300      	movs	r3, #0
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001296:	4b47      	ldr	r3, [pc, #284]	; (80013b4 <DHT22_InitHardware+0x190>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a46      	ldr	r2, [pc, #280]	; (80013b4 <DHT22_InitHardware+0x190>)
 800129c:	f043 0304 	orr.w	r3, r3, #4
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b44      	ldr	r3, [pc, #272]	; (80013b4 <DHT22_InitHardware+0x190>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0304 	and.w	r3, r3, #4
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ae:	e070      	b.n	8001392 <DHT22_InitHardware+0x16e>
    else if (GPIOx == GPIOD)
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	4a43      	ldr	r2, [pc, #268]	; (80013c0 <DHT22_InitHardware+0x19c>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d10e      	bne.n	80012d6 <DHT22_InitHardware+0xb2>
        __HAL_RCC_GPIOD_CLK_ENABLE(); // Habilitar reloj para puerto GPIOD
 80012b8:	2300      	movs	r3, #0
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80012bc:	4b3d      	ldr	r3, [pc, #244]	; (80013b4 <DHT22_InitHardware+0x190>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c0:	4a3c      	ldr	r2, [pc, #240]	; (80013b4 <DHT22_InitHardware+0x190>)
 80012c2:	f043 0308 	orr.w	r3, r3, #8
 80012c6:	6313      	str	r3, [r2, #48]	; 0x30
 80012c8:	4b3a      	ldr	r3, [pc, #232]	; (80013b4 <DHT22_InitHardware+0x190>)
 80012ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012cc:	f003 0308 	and.w	r3, r3, #8
 80012d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80012d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d4:	e05d      	b.n	8001392 <DHT22_InitHardware+0x16e>
    else if (GPIOx == GPIOE)
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	4a3a      	ldr	r2, [pc, #232]	; (80013c4 <DHT22_InitHardware+0x1a0>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d10e      	bne.n	80012fc <DHT22_InitHardware+0xd8>
        __HAL_RCC_GPIOE_CLK_ENABLE(); // Habilitar reloj para puerto GPIOE
 80012de:	2300      	movs	r3, #0
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
 80012e2:	4b34      	ldr	r3, [pc, #208]	; (80013b4 <DHT22_InitHardware+0x190>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a33      	ldr	r2, [pc, #204]	; (80013b4 <DHT22_InitHardware+0x190>)
 80012e8:	f043 0310 	orr.w	r3, r3, #16
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b31      	ldr	r3, [pc, #196]	; (80013b4 <DHT22_InitHardware+0x190>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0310 	and.w	r3, r3, #16
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	e04a      	b.n	8001392 <DHT22_InitHardware+0x16e>
    else if (GPIOx == GPIOF)
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	4a32      	ldr	r2, [pc, #200]	; (80013c8 <DHT22_InitHardware+0x1a4>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d10e      	bne.n	8001322 <DHT22_InitHardware+0xfe>
        __HAL_RCC_GPIOF_CLK_ENABLE(); // Habilitar reloj para puerto GPIOF
 8001304:	2300      	movs	r3, #0
 8001306:	623b      	str	r3, [r7, #32]
 8001308:	4b2a      	ldr	r3, [pc, #168]	; (80013b4 <DHT22_InitHardware+0x190>)
 800130a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130c:	4a29      	ldr	r2, [pc, #164]	; (80013b4 <DHT22_InitHardware+0x190>)
 800130e:	f043 0320 	orr.w	r3, r3, #32
 8001312:	6313      	str	r3, [r2, #48]	; 0x30
 8001314:	4b27      	ldr	r3, [pc, #156]	; (80013b4 <DHT22_InitHardware+0x190>)
 8001316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001318:	f003 0320 	and.w	r3, r3, #32
 800131c:	623b      	str	r3, [r7, #32]
 800131e:	6a3b      	ldr	r3, [r7, #32]
 8001320:	e037      	b.n	8001392 <DHT22_InitHardware+0x16e>
    else if (GPIOx == GPIOG)
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	4a29      	ldr	r2, [pc, #164]	; (80013cc <DHT22_InitHardware+0x1a8>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d10e      	bne.n	8001348 <DHT22_InitHardware+0x124>
        __HAL_RCC_GPIOG_CLK_ENABLE(); // Habilitar reloj para puerto GPIOG
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
 800132e:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <DHT22_InitHardware+0x190>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a20      	ldr	r2, [pc, #128]	; (80013b4 <DHT22_InitHardware+0x190>)
 8001334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b1e      	ldr	r3, [pc, #120]	; (80013b4 <DHT22_InitHardware+0x190>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001342:	61fb      	str	r3, [r7, #28]
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	e024      	b.n	8001392 <DHT22_InitHardware+0x16e>
    else if (GPIOx == GPIOH)
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	4a21      	ldr	r2, [pc, #132]	; (80013d0 <DHT22_InitHardware+0x1ac>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d10e      	bne.n	800136e <DHT22_InitHardware+0x14a>
        __HAL_RCC_GPIOH_CLK_ENABLE(); // Habilitar reloj para puerto GPIOH
 8001350:	2300      	movs	r3, #0
 8001352:	61bb      	str	r3, [r7, #24]
 8001354:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <DHT22_InitHardware+0x190>)
 8001356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001358:	4a16      	ldr	r2, [pc, #88]	; (80013b4 <DHT22_InitHardware+0x190>)
 800135a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800135e:	6313      	str	r3, [r2, #48]	; 0x30
 8001360:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <DHT22_InitHardware+0x190>)
 8001362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001368:	61bb      	str	r3, [r7, #24]
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	e011      	b.n	8001392 <DHT22_InitHardware+0x16e>
    else if (GPIOx == GPIOI)
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	4a18      	ldr	r2, [pc, #96]	; (80013d4 <DHT22_InitHardware+0x1b0>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d10d      	bne.n	8001392 <DHT22_InitHardware+0x16e>
        __HAL_RCC_GPIOI_CLK_ENABLE(); // Habilitar reloj para puerto GPIOI
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <DHT22_InitHardware+0x190>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a0d      	ldr	r2, [pc, #52]	; (80013b4 <DHT22_InitHardware+0x190>)
 8001380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <DHT22_InitHardware+0x190>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	697b      	ldr	r3, [r7, #20]

    // Configurar el pin como salida
    DHT22_SetPinOutput(dht);
 8001392:	68f8      	ldr	r0, [r7, #12]
 8001394:	f000 f820 	bl	80013d8 <DHT22_SetPinOutput>
    HAL_GPIO_WritePin(dht->GPIOx, dht->GPIO_Pin, GPIO_PIN_SET); // Poner el pin en alto
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6818      	ldr	r0, [r3, #0]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	889b      	ldrh	r3, [r3, #4]
 80013a0:	2201      	movs	r2, #1
 80013a2:	4619      	mov	r1, r3
 80013a4:	f004 f9e6 	bl	8005774 <HAL_GPIO_WritePin>
}
 80013a8:	bf00      	nop
 80013aa:	3738      	adds	r7, #56	; 0x38
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40020000 	.word	0x40020000
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40020400 	.word	0x40020400
 80013bc:	40020800 	.word	0x40020800
 80013c0:	40020c00 	.word	0x40020c00
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40021400 	.word	0x40021400
 80013cc:	40021800 	.word	0x40021800
 80013d0:	40021c00 	.word	0x40021c00
 80013d4:	40022000 	.word	0x40022000

080013d8 <DHT22_SetPinOutput>:
 * @param[in] dht Puntero a la estructura DHT22_HandleTypeDef que contiene la configuración del
 * puerto y pin GPIO.
 *
 * @retval None
 */
void DHT22_SetPinOutput(DHT22_HandleTypeDef * dht) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = dht->GPIO_Pin;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	889b      	ldrh	r3, [r3, #4]
 80013f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f6:	2301      	movs	r3, #1
 80013f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(dht->GPIOx, &GPIO_InitStruct); // Inicializar el GPIO como salida
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f107 020c 	add.w	r2, r7, #12
 800140a:	4611      	mov	r1, r2
 800140c:	4618      	mov	r0, r3
 800140e:	f003 fee1 	bl	80051d4 <HAL_GPIO_Init>
}
 8001412:	bf00      	nop
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <DHT22_SetPinInput>:
 * @param[in] dht Puntero a la estructura DHT22_HandleTypeDef que contiene la configuración del
 * puerto y pin GPIO.
 *
 * @retval None
 */
void DHT22_SetPinInput(DHT22_HandleTypeDef * dht) {
 800141a:	b580      	push	{r7, lr}
 800141c:	b088      	sub	sp, #32
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001422:	f107 030c 	add.w	r3, r7, #12
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
 8001430:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = dht->GPIO_Pin;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	889b      	ldrh	r3, [r3, #4]
 8001436:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001438:	2300      	movs	r3, #0
 800143a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(dht->GPIOx, &GPIO_InitStruct);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f107 020c 	add.w	r2, r7, #12
 8001448:	4611      	mov	r1, r2
 800144a:	4618      	mov	r0, r3
 800144c:	f003 fec2 	bl	80051d4 <HAL_GPIO_Init>
}
 8001450:	bf00      	nop
 8001452:	3720      	adds	r7, #32
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <DHT22_StartSignal>:
 * @param[in] dht Puntero a la estructura DHT22_HandleTypeDef que contiene la configuración del
 * puerto y pin GPIO.
 *
 * @retval None
 */
void DHT22_StartSignal(DHT22_HandleTypeDef * dht) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
    DHT22_SetPinOutput(dht);                                      // Configurar el pin como salida
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff ffb9 	bl	80013d8 <DHT22_SetPinOutput>
    HAL_GPIO_WritePin(dht->GPIOx, dht->GPIO_Pin, GPIO_PIN_RESET); // Enviar señal de inicio (bajo)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6818      	ldr	r0, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	889b      	ldrh	r3, [r3, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	4619      	mov	r1, r3
 8001472:	f004 f97f 	bl	8005774 <HAL_GPIO_WritePin>
    DWT_Delay(1000);                                              // Esperar 1000 µs
 8001476:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800147a:	f000 f88d 	bl	8001598 <DWT_Delay>
    HAL_GPIO_WritePin(dht->GPIOx, dht->GPIO_Pin, GPIO_PIN_SET); // Terminar señal de inicio (alto)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6818      	ldr	r0, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	889b      	ldrh	r3, [r3, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	4619      	mov	r1, r3
 800148a:	f004 f973 	bl	8005774 <HAL_GPIO_WritePin>
    DWT_Delay(20);                                              // Esperar 20 µs
 800148e:	2014      	movs	r0, #20
 8001490:	f000 f882 	bl	8001598 <DWT_Delay>
    DHT22_SetPinInput(dht);                                     // Configurar el pin como entrada
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff ffc0 	bl	800141a <DHT22_SetPinInput>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <DHT22_ReadByte>:
 * @param[in] dht Puntero a la estructura DHT22_HandleTypeDef que contiene la configuración del
 * puerto y pin GPIO.
 *
 * @retval uint8_t El byte leído del sensor.
 */
uint8_t DHT22_ReadByte(DHT22_HandleTypeDef * dht) {
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b084      	sub	sp, #16
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
    uint8_t result = 0;                             // Inicializa el resultado en 0
 80014aa:	2300      	movs	r3, #0
 80014ac:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < DHT22_BYTE_BITS; i++) { // Itera 8 veces para leer cada bit
 80014ae:	2300      	movs	r3, #0
 80014b0:	73bb      	strb	r3, [r7, #14]
 80014b2:	e00d      	b.n	80014d0 <DHT22_ReadByte+0x2e>
        result <<=
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	73fb      	strb	r3, [r7, #15]
            1; // Desplaza el resultado a la izquierda para hacer espacio para el siguiente bit
        result |= DHT22_ReadBit(dht); // Lee un bit y lo añade al resultado
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 f810 	bl	80014e0 <DHT22_ReadBit>
 80014c0:	4603      	mov	r3, r0
 80014c2:	461a      	mov	r2, r3
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < DHT22_BYTE_BITS; i++) { // Itera 8 veces para leer cada bit
 80014ca:	7bbb      	ldrb	r3, [r7, #14]
 80014cc:	3301      	adds	r3, #1
 80014ce:	73bb      	strb	r3, [r7, #14]
 80014d0:	7bbb      	ldrb	r3, [r7, #14]
 80014d2:	2b07      	cmp	r3, #7
 80014d4:	d9ee      	bls.n	80014b4 <DHT22_ReadByte+0x12>
    }
    return result; // Devuelve el byte completo leído del sensor
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <DHT22_ReadBit>:
 * @param[in] dht Puntero a la estructura DHT22_HandleTypeDef que contiene la configuración del
 * puerto y pin GPIO.
 *
 * @retval uint8_t El bit leído del sensor (0 o 1).
 */
uint8_t DHT22_ReadBit(DHT22_HandleTypeDef * dht) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
    uint32_t timeout = DHT22_TIMEOUT;
 80014e8:	2364      	movs	r3, #100	; 0x64
 80014ea:	60fb      	str	r3, [r7, #12]

    // Esperar a que el pin cambie a alto
    while (HAL_GPIO_ReadPin(dht->GPIOx, dht->GPIO_Pin) == GPIO_PIN_RESET) {
 80014ec:	e007      	b.n	80014fe <DHT22_ReadBit+0x1e>
        if (--timeout == 0) {
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	3b01      	subs	r3, #1
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <DHT22_ReadBit+0x1e>
            return 0; // Timeout, devolver 0
 80014fa:	2300      	movs	r3, #0
 80014fc:	e02e      	b.n	800155c <DHT22_ReadBit+0x7c>
    while (HAL_GPIO_ReadPin(dht->GPIOx, dht->GPIO_Pin) == GPIO_PIN_RESET) {
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	889b      	ldrh	r3, [r3, #4]
 8001506:	4619      	mov	r1, r3
 8001508:	4610      	mov	r0, r2
 800150a:	f004 f91b 	bl	8005744 <HAL_GPIO_ReadPin>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0ec      	beq.n	80014ee <DHT22_ReadBit+0xe>
        }
    }

    // Introducir un pequeño retraso para asegurar una lectura precisa del bit
    DWT_Delay(DHT22_BIT_DELAY); // Esperar 30 µs
 8001514:	201e      	movs	r0, #30
 8001516:	f000 f83f 	bl	8001598 <DWT_Delay>

    // Leer el bit (0 o 1) según el estado del pin
    uint8_t result = HAL_GPIO_ReadPin(dht->GPIOx, dht->GPIO_Pin);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	889b      	ldrh	r3, [r3, #4]
 8001522:	4619      	mov	r1, r3
 8001524:	4610      	mov	r0, r2
 8001526:	f004 f90d 	bl	8005744 <HAL_GPIO_ReadPin>
 800152a:	4603      	mov	r3, r0
 800152c:	72fb      	strb	r3, [r7, #11]

    timeout = DHT22_TIMEOUT;
 800152e:	2364      	movs	r3, #100	; 0x64
 8001530:	60fb      	str	r3, [r7, #12]

    // Esperar a que el pin vuelva a su estado bajo
    while (HAL_GPIO_ReadPin(dht->GPIOx, dht->GPIO_Pin) == GPIO_PIN_SET) {
 8001532:	e005      	b.n	8001540 <DHT22_ReadBit+0x60>
        if (--timeout == 0) {
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	3b01      	subs	r3, #1
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d00b      	beq.n	8001558 <DHT22_ReadBit+0x78>
    while (HAL_GPIO_ReadPin(dht->GPIOx, dht->GPIO_Pin) == GPIO_PIN_SET) {
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	889b      	ldrh	r3, [r3, #4]
 8001548:	4619      	mov	r1, r3
 800154a:	4610      	mov	r0, r2
 800154c:	f004 f8fa 	bl	8005744 <HAL_GPIO_ReadPin>
 8001550:	4603      	mov	r3, r0
 8001552:	2b01      	cmp	r3, #1
 8001554:	d0ee      	beq.n	8001534 <DHT22_ReadBit+0x54>
 8001556:	e000      	b.n	800155a <DHT22_ReadBit+0x7a>
            break; // Timeout, salir del bucle
 8001558:	bf00      	nop
        }
    }

    // Devolver el bit leído
    return result;
 800155a:	7afb      	ldrb	r3, [r7, #11]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <DWT_Init>:

/* === Private function implementation ========================================================= */

/* === Public function implementation ========================================================== */

void DWT_Init(void) {
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Habilitar el DWT
 8001568:	4b09      	ldr	r3, [pc, #36]	; (8001590 <DWT_Init+0x2c>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	4a08      	ldr	r2, [pc, #32]	; (8001590 <DWT_Init+0x2c>)
 800156e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001572:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = REINIT_COUNT;                     // Reiniciar el contador de ciclos
 8001574:	4b07      	ldr	r3, [pc, #28]	; (8001594 <DWT_Init+0x30>)
 8001576:	2200      	movs	r2, #0
 8001578:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // Habilitar el contador de ciclos
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <DWT_Init+0x30>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a05      	ldr	r2, [pc, #20]	; (8001594 <DWT_Init+0x30>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6013      	str	r3, [r2, #0]
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000edf0 	.word	0xe000edf0
 8001594:	e0001000 	.word	0xe0001000

08001598 <DWT_Delay>:

void DWT_Delay(uint32_t us) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
    uint32_t clk_cycle_start = DWT->CYCCNT;
 80015a0:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <DWT_Delay+0x40>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	60fb      	str	r3, [r7, #12]
    uint32_t clk_cycle_delay = us * (HAL_RCC_GetHCLKFreq() / CLK_DIV_FREQ_RCC);
 80015a6:	f005 fff1 	bl	800758c <HAL_RCC_GetHCLKFreq>
 80015aa:	4603      	mov	r3, r0
 80015ac:	4a0b      	ldr	r2, [pc, #44]	; (80015dc <DWT_Delay+0x44>)
 80015ae:	fba2 2303 	umull	r2, r3, r2, r3
 80015b2:	0c9a      	lsrs	r2, r3, #18
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	fb02 f303 	mul.w	r3, r2, r3
 80015ba:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - clk_cycle_start) < clk_cycle_delay)
 80015bc:	bf00      	nop
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <DWT_Delay+0x40>)
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d8f8      	bhi.n	80015be <DWT_Delay+0x26>
        ;
}
 80015cc:	bf00      	nop
 80015ce:	bf00      	nop
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	e0001000 	.word	0xe0001000
 80015dc:	431bde83 	.word	0x431bde83

080015e0 <data_logger_init>:
    memcpy(&buffer->datos[indice], medicion, sizeof(MedicionMP));
}

/* === Public function implementation ========================================================== */

bool data_logger_init(void) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
    // Inicializar buffers
    FRESULT res = f_mount(&fs, "", 1);
 80015e6:	2201      	movs	r2, #1
 80015e8:	490e      	ldr	r1, [pc, #56]	; (8001624 <data_logger_init+0x44>)
 80015ea:	480f      	ldr	r0, [pc, #60]	; (8001628 <data_logger_init+0x48>)
 80015ec:	f009 ff16 	bl	800b41c <f_mount>
 80015f0:	4603      	mov	r3, r0
 80015f2:	71fb      	strb	r3, [r7, #7]
    if (res != FR_OK) {
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d008      	beq.n	800160c <data_logger_init+0x2c>
        print_fatfs_error(res); // ⬅️ nueva línea aquí
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f000 f993 	bl	8001928 <print_fatfs_error>
        sd_mounted = false;
 8001602:	4b0a      	ldr	r3, [pc, #40]	; (800162c <data_logger_init+0x4c>)
 8001604:	2200      	movs	r2, #0
 8001606:	701a      	strb	r2, [r3, #0]
        return false;
 8001608:	2300      	movs	r3, #0
 800160a:	e006      	b.n	800161a <data_logger_init+0x3a>
    }

    uart_print("[OK] microSD montada correctamente\r\n");
 800160c:	4808      	ldr	r0, [pc, #32]	; (8001630 <data_logger_init+0x50>)
 800160e:	f002 fc6d 	bl	8003eec <uart_print>
    sd_mounted = true;
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <data_logger_init+0x4c>)
 8001614:	2201      	movs	r2, #1
 8001616:	701a      	strb	r2, [r3, #0]
    return true;
 8001618:	2301      	movs	r3, #1
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	08010d98 	.word	0x08010d98
 8001628:	20001e20 	.word	0x20001e20
 800162c:	20002054 	.word	0x20002054
 8001630:	08010d9c 	.word	0x08010d9c

08001634 <data_logger_get_average_pm25>:

    return true;
}
// función encargada de calcular los promedio de material particulado

float data_logger_get_average_pm25(uint8_t sensor_id, uint32_t num_mediciones) {
 8001634:	b480      	push	{r7}
 8001636:	b087      	sub	sp, #28
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	6039      	str	r1, [r7, #0]
 800163e:	71fb      	strb	r3, [r7, #7]
    float suma = 0.0f;
 8001640:	f04f 0300 	mov.w	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
    uint32_t contador = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]

    // Limitar la cantidad de mediciones a usar
    if (num_mediciones > buffer_alta_frecuencia.cantidad) {
 800164a:	4b30      	ldr	r3, [pc, #192]	; (800170c <data_logger_get_average_pm25+0xd8>)
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	429a      	cmp	r2, r3
 8001652:	d902      	bls.n	800165a <data_logger_get_average_pm25+0x26>
        num_mediciones = buffer_alta_frecuencia.cantidad;
 8001654:	4b2d      	ldr	r3, [pc, #180]	; (800170c <data_logger_get_average_pm25+0xd8>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	603b      	str	r3, [r7, #0]
    }

    // Si no hay mediciones, retornar 0
    if (num_mediciones == 0) {
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d102      	bne.n	8001666 <data_logger_get_average_pm25+0x32>
        return 0.0f;
 8001660:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8001710 <data_logger_get_average_pm25+0xdc>
 8001664:	e04b      	b.n	80016fe <data_logger_get_average_pm25+0xca>
    }

    // Calcular promedio de las últimas 'num_mediciones'
    for (uint32_t i = 0; i < num_mediciones; i++) {
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	e035      	b.n	80016d8 <data_logger_get_average_pm25+0xa4>
        uint32_t indice =
            (buffer_alta_frecuencia.inicio + buffer_alta_frecuencia.cantidad - i - 1) %
 800166c:	4b27      	ldr	r3, [pc, #156]	; (800170c <data_logger_get_average_pm25+0xd8>)
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	4b26      	ldr	r3, [pc, #152]	; (800170c <data_logger_get_average_pm25+0xd8>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	441a      	add	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	3b01      	subs	r3, #1
            buffer_alta_frecuencia.capacidad;
 800167c:	4a23      	ldr	r2, [pc, #140]	; (800170c <data_logger_get_average_pm25+0xd8>)
 800167e:	6852      	ldr	r2, [r2, #4]
        uint32_t indice =
 8001680:	fbb3 f1f2 	udiv	r1, r3, r2
 8001684:	fb01 f202 	mul.w	r2, r1, r2
 8001688:	1a9b      	subs	r3, r3, r2
 800168a:	60bb      	str	r3, [r7, #8]

        // Filtrar por sensor_id si es necesario
        if (sensor_id == 0 || buffer_alta_frecuencia.datos[indice].sensor_id == sensor_id) {
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d00c      	beq.n	80016ac <data_logger_get_average_pm25+0x78>
 8001692:	4b1e      	ldr	r3, [pc, #120]	; (800170c <data_logger_get_average_pm25+0xd8>)
 8001694:	6819      	ldr	r1, [r3, #0]
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	4613      	mov	r3, r2
 800169a:	011b      	lsls	r3, r3, #4
 800169c:	1a9b      	subs	r3, r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	440b      	add	r3, r1
 80016a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016a6:	79fa      	ldrb	r2, [r7, #7]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d112      	bne.n	80016d2 <data_logger_get_average_pm25+0x9e>
            suma += buffer_alta_frecuencia.datos[indice].valores.pm2_5;
 80016ac:	4b17      	ldr	r3, [pc, #92]	; (800170c <data_logger_get_average_pm25+0xd8>)
 80016ae:	6819      	ldr	r1, [r3, #0]
 80016b0:	68ba      	ldr	r2, [r7, #8]
 80016b2:	4613      	mov	r3, r2
 80016b4:	011b      	lsls	r3, r3, #4
 80016b6:	1a9b      	subs	r3, r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	440b      	add	r3, r1
 80016bc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80016c0:	ed97 7a05 	vldr	s14, [r7, #20]
 80016c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016c8:	edc7 7a05 	vstr	s15, [r7, #20]
            contador++;
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	3301      	adds	r3, #1
 80016d0:	613b      	str	r3, [r7, #16]
    for (uint32_t i = 0; i < num_mediciones; i++) {
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	3301      	adds	r3, #1
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fa      	ldr	r2, [r7, #12]
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d3c5      	bcc.n	800166c <data_logger_get_average_pm25+0x38>
        }
    }

    // Retornar promedio o 0 si no hay datos
    return (contador > 0) ? (suma / contador) : 0.0f;
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d009      	beq.n	80016fa <data_logger_get_average_pm25+0xc6>
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	ee07 3a90 	vmov	s15, r3
 80016ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016f0:	edd7 6a05 	vldr	s13, [r7, #20]
 80016f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016f8:	e001      	b.n	80016fe <data_logger_get_average_pm25+0xca>
 80016fa:	eddf 7a05 	vldr	s15, [pc, #20]	; 8001710 <data_logger_get_average_pm25+0xdc>
}
 80016fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001702:	371c      	adds	r7, #28
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	20000000 	.word	0x20000000
 8001710:	00000000 	.word	0x00000000

08001714 <data_logger_print_summary>:

void data_logger_print_summary() {
 8001714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001716:	b0cb      	sub	sp, #300	; 0x12c
 8001718:	af06      	add	r7, sp, #24
    char buffer[256];

    // Imprimir encabezado
    snprintf(buffer, sizeof(buffer),
 800171a:	4b3c      	ldr	r3, [pc, #240]	; (800180c <data_logger_print_summary+0xf8>)
 800171c:	68de      	ldr	r6, [r3, #12]
 800171e:	4b3b      	ldr	r3, [pc, #236]	; (800180c <data_logger_print_summary+0xf8>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	4a3b      	ldr	r2, [pc, #236]	; (8001810 <data_logger_print_summary+0xfc>)
 8001724:	68d2      	ldr	r2, [r2, #12]
 8001726:	493a      	ldr	r1, [pc, #232]	; (8001810 <data_logger_print_summary+0xfc>)
 8001728:	6849      	ldr	r1, [r1, #4]
 800172a:	483a      	ldr	r0, [pc, #232]	; (8001814 <data_logger_print_summary+0x100>)
 800172c:	68c0      	ldr	r0, [r0, #12]
 800172e:	4c39      	ldr	r4, [pc, #228]	; (8001814 <data_logger_print_summary+0x100>)
 8001730:	6864      	ldr	r4, [r4, #4]
 8001732:	1d3d      	adds	r5, r7, #4
 8001734:	9404      	str	r4, [sp, #16]
 8001736:	9003      	str	r0, [sp, #12]
 8001738:	9102      	str	r1, [sp, #8]
 800173a:	9201      	str	r2, [sp, #4]
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	4633      	mov	r3, r6
 8001740:	4a35      	ldr	r2, [pc, #212]	; (8001818 <data_logger_print_summary+0x104>)
 8001742:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001746:	4628      	mov	r0, r5
 8001748:	f00b fd92 	bl	800d270 <sniprintf>
             "Buffer diario: %lu/%lu muestras\n",
             buffer_alta_frecuencia.cantidad, buffer_alta_frecuencia.capacidad,
             buffer_hora.cantidad, buffer_hora.capacidad, buffer_dia.cantidad,
             buffer_dia.capacidad);

    uart_print("%s", buffer);
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	4619      	mov	r1, r3
 8001750:	4832      	ldr	r0, [pc, #200]	; (800181c <data_logger_print_summary+0x108>)
 8001752:	f002 fbcb 	bl	8003eec <uart_print>

    // Imprimir últimas mediciones si hay datos
    if (buffer_alta_frecuencia.cantidad > 0) {
 8001756:	4b2d      	ldr	r3, [pc, #180]	; (800180c <data_logger_print_summary+0xf8>)
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d050      	beq.n	8001800 <data_logger_print_summary+0xec>
        uart_print("\nÚltimas 3 mediciones:\n");
 800175e:	4830      	ldr	r0, [pc, #192]	; (8001820 <data_logger_print_summary+0x10c>)
 8001760:	f002 fbc4 	bl	8003eec <uart_print>

        for (uint32_t i = 0; i < 3 && i < buffer_alta_frecuencia.cantidad; i++) {
 8001764:	2300      	movs	r3, #0
 8001766:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800176a:	e03f      	b.n	80017ec <data_logger_print_summary+0xd8>
            uint32_t indice =
                (buffer_alta_frecuencia.inicio + buffer_alta_frecuencia.cantidad - i - 1) %
 800176c:	4b27      	ldr	r3, [pc, #156]	; (800180c <data_logger_print_summary+0xf8>)
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	4b26      	ldr	r3, [pc, #152]	; (800180c <data_logger_print_summary+0xf8>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	441a      	add	r2, r3
 8001776:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	3b01      	subs	r3, #1
                buffer_alta_frecuencia.capacidad;
 800177e:	4a23      	ldr	r2, [pc, #140]	; (800180c <data_logger_print_summary+0xf8>)
 8001780:	6852      	ldr	r2, [r2, #4]
            uint32_t indice =
 8001782:	fbb3 f1f2 	udiv	r1, r3, r2
 8001786:	fb01 f202 	mul.w	r2, r1, r2
 800178a:	1a9b      	subs	r3, r3, r2
 800178c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

            MedicionMP * medicion = &buffer_alta_frecuencia.datos[indice];
 8001790:	4b1e      	ldr	r3, [pc, #120]	; (800180c <data_logger_print_summary+0xf8>)
 8001792:	6819      	ldr	r1, [r3, #0]
 8001794:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001798:	4613      	mov	r3, r2
 800179a:	011b      	lsls	r3, r3, #4
 800179c:	1a9b      	subs	r3, r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	440b      	add	r3, r1
 80017a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

            snprintf(buffer, sizeof(buffer), "[%s] Sensor %d: PM2.5=%.2f ug/m3\n",
                     medicion->timestamp, medicion->sensor_id, medicion->valores.pm2_5);
 80017a6:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 80017aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80017ae:	f893 3020 	ldrb.w	r3, [r3, #32]
            snprintf(buffer, sizeof(buffer), "[%s] Sensor %d: PM2.5=%.2f ug/m3\n",
 80017b2:	461d      	mov	r5, r3
                     medicion->timestamp, medicion->sensor_id, medicion->valores.pm2_5);
 80017b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80017b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            snprintf(buffer, sizeof(buffer), "[%s] Sensor %d: PM2.5=%.2f ug/m3\n",
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe fed4 	bl	8000568 <__aeabi_f2d>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	1d38      	adds	r0, r7, #4
 80017c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80017ca:	9500      	str	r5, [sp, #0]
 80017cc:	4623      	mov	r3, r4
 80017ce:	4a15      	ldr	r2, [pc, #84]	; (8001824 <data_logger_print_summary+0x110>)
 80017d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017d4:	f00b fd4c 	bl	800d270 <sniprintf>

            uart_print("%s", buffer);
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	4619      	mov	r1, r3
 80017dc:	480f      	ldr	r0, [pc, #60]	; (800181c <data_logger_print_summary+0x108>)
 80017de:	f002 fb85 	bl	8003eec <uart_print>
        for (uint32_t i = 0; i < 3 && i < buffer_alta_frecuencia.cantidad; i++) {
 80017e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80017e6:	3301      	adds	r3, #1
 80017e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80017ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d805      	bhi.n	8001800 <data_logger_print_summary+0xec>
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <data_logger_print_summary+0xf8>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d3b5      	bcc.n	800176c <data_logger_print_summary+0x58>
        }
    }
}
 8001800:	bf00      	nop
 8001802:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001806:	46bd      	mov	sp, r7
 8001808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800180a:	bf00      	nop
 800180c:	20000000 	.word	0x20000000
 8001810:	20000010 	.word	0x20000010
 8001814:	20000020 	.word	0x20000020
 8001818:	08010dc4 	.word	0x08010dc4
 800181c:	08010e58 	.word	0x08010e58
 8001820:	08010e5c 	.word	0x08010e5c
 8001824:	08010e78 	.word	0x08010e78

08001828 <format_csv_line>:
 * @param data Puntero a estructura con los datos
 * @param csv_line Cadena de salida donde se almacenará la línea CSV
 * @param max_len Tamaño máximo del búfer de salida
 * @return true si el formateo fue exitoso, false si hubo error de espacio
 */
bool format_csv_line(const ParticulateData * data, char * csv_line, size_t max_len) {
 8001828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800182c:	b0a9      	sub	sp, #164	; 0xa4
 800182e:	af12      	add	r7, sp, #72	; 0x48
 8001830:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001832:	62b9      	str	r1, [r7, #40]	; 0x28
 8001834:	627a      	str	r2, [r7, #36]	; 0x24
    char timestamp[32];
    build_iso8601_timestamp(timestamp, sizeof(timestamp), data);
 8001836:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800183a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800183c:	2120      	movs	r1, #32
 800183e:	4618      	mov	r0, r3
 8001840:	f000 fa76 	bl	8001d30 <build_iso8601_timestamp>

    int written =
        snprintf(csv_line, max_len, "%s,%d,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n", timestamp,
                 data->sensor_id, data->pm1_0, data->pm2_5, data->pm4_0, data->pm10, data->temp_amb,
 8001844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001846:	781b      	ldrb	r3, [r3, #0]
        snprintf(csv_line, max_len, "%s,%d,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n", timestamp,
 8001848:	461e      	mov	r6, r3
                 data->sensor_id, data->pm1_0, data->pm2_5, data->pm4_0, data->pm10, data->temp_amb,
 800184a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184c:	685b      	ldr	r3, [r3, #4]
        snprintf(csv_line, max_len, "%s,%d,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n", timestamp,
 800184e:	4618      	mov	r0, r3
 8001850:	f7fe fe8a 	bl	8000568 <__aeabi_f2d>
 8001854:	4682      	mov	sl, r0
 8001856:	468b      	mov	fp, r1
                 data->sensor_id, data->pm1_0, data->pm2_5, data->pm4_0, data->pm10, data->temp_amb,
 8001858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185a:	689b      	ldr	r3, [r3, #8]
        snprintf(csv_line, max_len, "%s,%d,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n", timestamp,
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fe83 	bl	8000568 <__aeabi_f2d>
 8001862:	e9c7 0106 	strd	r0, r1, [r7, #24]
                 data->sensor_id, data->pm1_0, data->pm2_5, data->pm4_0, data->pm10, data->temp_amb,
 8001866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001868:	68db      	ldr	r3, [r3, #12]
        snprintf(csv_line, max_len, "%s,%d,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n", timestamp,
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fe7c 	bl	8000568 <__aeabi_f2d>
 8001870:	e9c7 0104 	strd	r0, r1, [r7, #16]
                 data->sensor_id, data->pm1_0, data->pm2_5, data->pm4_0, data->pm10, data->temp_amb,
 8001874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001876:	691b      	ldr	r3, [r3, #16]
        snprintf(csv_line, max_len, "%s,%d,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n", timestamp,
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fe75 	bl	8000568 <__aeabi_f2d>
 800187e:	e9c7 0102 	strd	r0, r1, [r7, #8]
                 data->sensor_id, data->pm1_0, data->pm2_5, data->pm4_0, data->pm10, data->temp_amb,
 8001882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001884:	695b      	ldr	r3, [r3, #20]
        snprintf(csv_line, max_len, "%s,%d,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n", timestamp,
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fe6e 	bl	8000568 <__aeabi_f2d>
 800188c:	e9c7 0100 	strd	r0, r1, [r7]
                 data->hum_amb, data->temp_cam, data->hum_cam);
 8001890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001892:	699b      	ldr	r3, [r3, #24]
        snprintf(csv_line, max_len, "%s,%d,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n", timestamp,
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe fe67 	bl	8000568 <__aeabi_f2d>
 800189a:	4680      	mov	r8, r0
 800189c:	4689      	mov	r9, r1
                 data->hum_amb, data->temp_cam, data->hum_cam);
 800189e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a0:	69db      	ldr	r3, [r3, #28]
        snprintf(csv_line, max_len, "%s,%d,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n", timestamp,
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe fe60 	bl	8000568 <__aeabi_f2d>
 80018a8:	4604      	mov	r4, r0
 80018aa:	460d      	mov	r5, r1
                 data->hum_amb, data->temp_cam, data->hum_cam);
 80018ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ae:	6a1b      	ldr	r3, [r3, #32]
        snprintf(csv_line, max_len, "%s,%d,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f\n", timestamp,
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe fe59 	bl	8000568 <__aeabi_f2d>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80018be:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80018c2:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 80018c6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80018ca:	ed97 7b00 	vldr	d7, [r7]
 80018ce:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80018d2:	ed97 7b02 	vldr	d7, [r7, #8]
 80018d6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80018da:	ed97 7b04 	vldr	d7, [r7, #16]
 80018de:	ed8d 7b06 	vstr	d7, [sp, #24]
 80018e2:	ed97 7b06 	vldr	d7, [r7, #24]
 80018e6:	ed8d 7b04 	vstr	d7, [sp, #16]
 80018ea:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80018ee:	9600      	str	r6, [sp, #0]
 80018f0:	460b      	mov	r3, r1
 80018f2:	4a0c      	ldr	r2, [pc, #48]	; (8001924 <format_csv_line+0xfc>)
 80018f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80018f8:	f00b fcba 	bl	800d270 <sniprintf>
 80018fc:	6578      	str	r0, [r7, #84]	; 0x54

    return (written > 0 && (size_t)written < max_len);
 80018fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001900:	2b00      	cmp	r3, #0
 8001902:	dd05      	ble.n	8001910 <format_csv_line+0xe8>
 8001904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001908:	429a      	cmp	r2, r3
 800190a:	d901      	bls.n	8001910 <format_csv_line+0xe8>
 800190c:	2301      	movs	r3, #1
 800190e:	e000      	b.n	8001912 <format_csv_line+0xea>
 8001910:	2300      	movs	r3, #0
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	b2db      	uxtb	r3, r3
}
 8001918:	4618      	mov	r0, r3
 800191a:	375c      	adds	r7, #92	; 0x5c
 800191c:	46bd      	mov	sp, r7
 800191e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001922:	bf00      	nop
 8001924:	08010f60 	.word	0x08010f60

08001928 <print_fatfs_error>:
    uart_print("Línea escrita en SD:\r\n");
    uart_print(csv_line);
    return true;
}

void print_fatfs_error(FRESULT res) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b092      	sub	sp, #72	; 0x48
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
    char msg[64];
    snprintf(msg, sizeof(msg), "f_mount() error code: %d\r\n", res);
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	f107 0008 	add.w	r0, r7, #8
 8001938:	4a3c      	ldr	r2, [pc, #240]	; (8001a2c <print_fatfs_error+0x104>)
 800193a:	2140      	movs	r1, #64	; 0x40
 800193c:	f00b fc98 	bl	800d270 <sniprintf>
    uart_print(msg);
 8001940:	f107 0308 	add.w	r3, r7, #8
 8001944:	4618      	mov	r0, r3
 8001946:	f002 fad1 	bl	8003eec <uart_print>

    switch (res) {
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	2b10      	cmp	r3, #16
 800194e:	d865      	bhi.n	8001a1c <print_fatfs_error+0xf4>
 8001950:	a201      	add	r2, pc, #4	; (adr r2, 8001958 <print_fatfs_error+0x30>)
 8001952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001956:	bf00      	nop
 8001958:	0800199d 	.word	0x0800199d
 800195c:	080019a5 	.word	0x080019a5
 8001960:	080019ad 	.word	0x080019ad
 8001964:	080019b5 	.word	0x080019b5
 8001968:	080019bd 	.word	0x080019bd
 800196c:	080019c5 	.word	0x080019c5
 8001970:	080019cd 	.word	0x080019cd
 8001974:	080019d5 	.word	0x080019d5
 8001978:	080019dd 	.word	0x080019dd
 800197c:	080019e5 	.word	0x080019e5
 8001980:	080019ed 	.word	0x080019ed
 8001984:	080019f5 	.word	0x080019f5
 8001988:	080019fd 	.word	0x080019fd
 800198c:	08001a05 	.word	0x08001a05
 8001990:	08001a1d 	.word	0x08001a1d
 8001994:	08001a0d 	.word	0x08001a0d
 8001998:	08001a15 	.word	0x08001a15
    case FR_OK:
        uart_print("FR_OK: Operacion exitosa\r\n");
 800199c:	4824      	ldr	r0, [pc, #144]	; (8001a30 <print_fatfs_error+0x108>)
 800199e:	f002 faa5 	bl	8003eec <uart_print>
        break;
 80019a2:	e03f      	b.n	8001a24 <print_fatfs_error+0xfc>
    case FR_DISK_ERR:
        uart_print("FR_DISK_ERR: Error fisico en el disco\r\n");
 80019a4:	4823      	ldr	r0, [pc, #140]	; (8001a34 <print_fatfs_error+0x10c>)
 80019a6:	f002 faa1 	bl	8003eec <uart_print>
        break;
 80019aa:	e03b      	b.n	8001a24 <print_fatfs_error+0xfc>
    case FR_INT_ERR:
        uart_print("FR_INT_ERR: Error interno de FatFs\r\n");
 80019ac:	4822      	ldr	r0, [pc, #136]	; (8001a38 <print_fatfs_error+0x110>)
 80019ae:	f002 fa9d 	bl	8003eec <uart_print>
        break;
 80019b2:	e037      	b.n	8001a24 <print_fatfs_error+0xfc>
    case FR_NOT_READY:
        uart_print("FR_NOT_READY: Disco no esta listo\r\n");
 80019b4:	4821      	ldr	r0, [pc, #132]	; (8001a3c <print_fatfs_error+0x114>)
 80019b6:	f002 fa99 	bl	8003eec <uart_print>
        break;
 80019ba:	e033      	b.n	8001a24 <print_fatfs_error+0xfc>
    case FR_NO_FILE:
        uart_print("FR_NO_FILE: Archivo no encontrado\r\n");
 80019bc:	4820      	ldr	r0, [pc, #128]	; (8001a40 <print_fatfs_error+0x118>)
 80019be:	f002 fa95 	bl	8003eec <uart_print>
        break;
 80019c2:	e02f      	b.n	8001a24 <print_fatfs_error+0xfc>
    case FR_NO_PATH:
        uart_print("FR_NO_PATH: Ruta no encontrada\r\n");
 80019c4:	481f      	ldr	r0, [pc, #124]	; (8001a44 <print_fatfs_error+0x11c>)
 80019c6:	f002 fa91 	bl	8003eec <uart_print>
        break;
 80019ca:	e02b      	b.n	8001a24 <print_fatfs_error+0xfc>
    case FR_INVALID_NAME:
        uart_print("FR_INVALID_NAME: Nombre inválido\r\n");
 80019cc:	481e      	ldr	r0, [pc, #120]	; (8001a48 <print_fatfs_error+0x120>)
 80019ce:	f002 fa8d 	bl	8003eec <uart_print>
        break;
 80019d2:	e027      	b.n	8001a24 <print_fatfs_error+0xfc>
    case FR_DENIED:
        uart_print("FR_DENIED: Acceso denegado\r\n");
 80019d4:	481d      	ldr	r0, [pc, #116]	; (8001a4c <print_fatfs_error+0x124>)
 80019d6:	f002 fa89 	bl	8003eec <uart_print>
        break;
 80019da:	e023      	b.n	8001a24 <print_fatfs_error+0xfc>
    case FR_EXIST:
        uart_print("FR_EXIST: Archivo ya existe\r\n");
 80019dc:	481c      	ldr	r0, [pc, #112]	; (8001a50 <print_fatfs_error+0x128>)
 80019de:	f002 fa85 	bl	8003eec <uart_print>
        break;
 80019e2:	e01f      	b.n	8001a24 <print_fatfs_error+0xfc>
    case FR_INVALID_OBJECT:
        uart_print("FR_INVALID_OBJECT: Objeto invalido\r\n");
 80019e4:	481b      	ldr	r0, [pc, #108]	; (8001a54 <print_fatfs_error+0x12c>)
 80019e6:	f002 fa81 	bl	8003eec <uart_print>
        break;
 80019ea:	e01b      	b.n	8001a24 <print_fatfs_error+0xfc>
    case FR_WRITE_PROTECTED:
        uart_print("FR_WRITE_PROTECTED: Tarjeta protegida contra escritura\r\n");
 80019ec:	481a      	ldr	r0, [pc, #104]	; (8001a58 <print_fatfs_error+0x130>)
 80019ee:	f002 fa7d 	bl	8003eec <uart_print>
        break;
 80019f2:	e017      	b.n	8001a24 <print_fatfs_error+0xfc>
    case FR_INVALID_DRIVE:
        uart_print("FR_INVALID_DRIVE: Unidad invalida\r\n");
 80019f4:	4819      	ldr	r0, [pc, #100]	; (8001a5c <print_fatfs_error+0x134>)
 80019f6:	f002 fa79 	bl	8003eec <uart_print>
        break;
 80019fa:	e013      	b.n	8001a24 <print_fatfs_error+0xfc>
    case FR_NOT_ENABLED:
        uart_print("FR_NOT_ENABLED: FatFs no esta habilitado\r\n");
 80019fc:	4818      	ldr	r0, [pc, #96]	; (8001a60 <print_fatfs_error+0x138>)
 80019fe:	f002 fa75 	bl	8003eec <uart_print>
        break;
 8001a02:	e00f      	b.n	8001a24 <print_fatfs_error+0xfc>
    case FR_NO_FILESYSTEM:
        uart_print("FR_NO_FILESYSTEM: No hay sistema de archivos FAT valido\r\n");
 8001a04:	4817      	ldr	r0, [pc, #92]	; (8001a64 <print_fatfs_error+0x13c>)
 8001a06:	f002 fa71 	bl	8003eec <uart_print>
        break;
 8001a0a:	e00b      	b.n	8001a24 <print_fatfs_error+0xfc>
    case FR_TIMEOUT:
        uart_print("FR_TIMEOUT: Timeout de acceso\r\n");
 8001a0c:	4816      	ldr	r0, [pc, #88]	; (8001a68 <print_fatfs_error+0x140>)
 8001a0e:	f002 fa6d 	bl	8003eec <uart_print>
        break;
 8001a12:	e007      	b.n	8001a24 <print_fatfs_error+0xfc>
    case FR_LOCKED:
        uart_print("FR_LOCKED: El archivo esta bloqueado\r\n");
 8001a14:	4815      	ldr	r0, [pc, #84]	; (8001a6c <print_fatfs_error+0x144>)
 8001a16:	f002 fa69 	bl	8003eec <uart_print>
        break;
 8001a1a:	e003      	b.n	8001a24 <print_fatfs_error+0xfc>
    default:
        uart_print("Codigo de error desconocido\r\n");
 8001a1c:	4814      	ldr	r0, [pc, #80]	; (8001a70 <print_fatfs_error+0x148>)
 8001a1e:	f002 fa65 	bl	8003eec <uart_print>
        break;
 8001a22:	bf00      	nop
    }
}
 8001a24:	bf00      	nop
 8001a26:	3748      	adds	r7, #72	; 0x48
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	08011114 	.word	0x08011114
 8001a30:	08011130 	.word	0x08011130
 8001a34:	0801114c 	.word	0x0801114c
 8001a38:	08011174 	.word	0x08011174
 8001a3c:	0801119c 	.word	0x0801119c
 8001a40:	080111c0 	.word	0x080111c0
 8001a44:	080111e4 	.word	0x080111e4
 8001a48:	08011208 	.word	0x08011208
 8001a4c:	0801122c 	.word	0x0801122c
 8001a50:	0801124c 	.word	0x0801124c
 8001a54:	0801126c 	.word	0x0801126c
 8001a58:	08011294 	.word	0x08011294
 8001a5c:	080112d0 	.word	0x080112d0
 8001a60:	080112f4 	.word	0x080112f4
 8001a64:	08011320 	.word	0x08011320
 8001a68:	0801135c 	.word	0x0801135c
 8001a6c:	0801137c 	.word	0x0801137c
 8001a70:	080113a4 	.word	0x080113a4

08001a74 <data_logger_store_raw>:

    uart_print("Línea escrita correctamente en CSV\r\n");
    return true;
}

bool data_logger_store_raw(const ParticulateData * data) {
 8001a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a76:	f5ad 7d67 	sub.w	sp, sp, #924	; 0x39c
 8001a7a:	af06      	add	r7, sp, #24
 8001a7c:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8001a80:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8001a84:	6018      	str	r0, [r3, #0]
    if (!sd_mounted) {
 8001a86:	4b9e      	ldr	r3, [pc, #632]	; (8001d00 <data_logger_store_raw+0x28c>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	f083 0301 	eor.w	r3, r3, #1
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d009      	beq.n	8001aa8 <data_logger_store_raw+0x34>
        if (!data_logger_init())
 8001a94:	f7ff fda4 	bl	80015e0 <data_logger_init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f083 0301 	eor.w	r3, r3, #1
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <data_logger_store_raw+0x34>
            return false;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	e126      	b.n	8001cf6 <data_logger_store_raw+0x282>
    char filepath[128];
    char csv_line[CSV_LINE_BUFFER_SIZE];
    char dirpath[64];

    // Crear carpetas: /YYYY/MM/DD
    snprintf(dirpath, sizeof(dirpath), "/%04d", data->year);
 8001aa8:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8001aac:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001ab4:	f507 700f 	add.w	r0, r7, #572	; 0x23c
 8001ab8:	4a92      	ldr	r2, [pc, #584]	; (8001d04 <data_logger_store_raw+0x290>)
 8001aba:	2140      	movs	r1, #64	; 0x40
 8001abc:	f00b fbd8 	bl	800d270 <sniprintf>
    f_mkdir(dirpath);
 8001ac0:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f00a fa35 	bl	800bf34 <f_mkdir>

    snprintf(dirpath, sizeof(dirpath), "/%04d/%02d", data->year, data->month);
 8001aca:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8001ace:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8001adc:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001ae6:	f507 700f 	add.w	r0, r7, #572	; 0x23c
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	4613      	mov	r3, r2
 8001aee:	4a86      	ldr	r2, [pc, #536]	; (8001d08 <data_logger_store_raw+0x294>)
 8001af0:	2140      	movs	r1, #64	; 0x40
 8001af2:	f00b fbbd 	bl	800d270 <sniprintf>
    f_mkdir(dirpath);
 8001af6:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8001afa:	4618      	mov	r0, r3
 8001afc:	f00a fa1a 	bl	800bf34 <f_mkdir>

    snprintf(dirpath, sizeof(dirpath), "/%04d/%02d/%02d", data->year, data->month, data->day);
 8001b00:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8001b04:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8001b12:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8001b22:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001b2c:	f507 700f 	add.w	r0, r7, #572	; 0x23c
 8001b30:	9301      	str	r3, [sp, #4]
 8001b32:	9200      	str	r2, [sp, #0]
 8001b34:	460b      	mov	r3, r1
 8001b36:	4a75      	ldr	r2, [pc, #468]	; (8001d0c <data_logger_store_raw+0x298>)
 8001b38:	2140      	movs	r1, #64	; 0x40
 8001b3a:	f00b fb99 	bl	800d270 <sniprintf>
    f_mkdir(dirpath);
 8001b3e:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8001b42:	4618      	mov	r0, r3
 8001b44:	f00a f9f6 	bl	800bf34 <f_mkdir>

    // Crear nombre del archivo
    snprintf(filepath, sizeof(filepath), "/%04d/%02d/%02d/RAW_%02d_%04d%02d%02d.CSV", data->year,
 8001b48:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8001b4c:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001b54:	469c      	mov	ip, r3
             data->month, data->day, data->sensor_id, data->year, data->month, data->day);
 8001b56:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8001b5a:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    snprintf(filepath, sizeof(filepath), "/%04d/%02d/%02d/RAW_%02d_%04d%02d%02d.CSV", data->year,
 8001b64:	461a      	mov	r2, r3
             data->month, data->day, data->sensor_id, data->year, data->month, data->day);
 8001b66:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8001b6a:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    snprintf(filepath, sizeof(filepath), "/%04d/%02d/%02d/RAW_%02d_%04d%02d%02d.CSV", data->year,
 8001b74:	4619      	mov	r1, r3
             data->month, data->day, data->sensor_id, data->year, data->month, data->day);
 8001b76:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8001b7a:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	781b      	ldrb	r3, [r3, #0]
    snprintf(filepath, sizeof(filepath), "/%04d/%02d/%02d/RAW_%02d_%04d%02d%02d.CSV", data->year,
 8001b82:	461c      	mov	r4, r3
             data->month, data->day, data->sensor_id, data->year, data->month, data->day);
 8001b84:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8001b88:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    snprintf(filepath, sizeof(filepath), "/%04d/%02d/%02d/RAW_%02d_%04d%02d%02d.CSV", data->year,
 8001b90:	461d      	mov	r5, r3
             data->month, data->day, data->sensor_id, data->year, data->month, data->day);
 8001b92:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8001b96:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    snprintf(filepath, sizeof(filepath), "/%04d/%02d/%02d/RAW_%02d_%04d%02d%02d.CSV", data->year,
 8001ba0:	461e      	mov	r6, r3
             data->month, data->day, data->sensor_id, data->year, data->month, data->day);
 8001ba2:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8001ba6:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    snprintf(filepath, sizeof(filepath), "/%04d/%02d/%02d/RAW_%02d_%04d%02d%02d.CSV", data->year,
 8001bb0:	f507 703f 	add.w	r0, r7, #764	; 0x2fc
 8001bb4:	9305      	str	r3, [sp, #20]
 8001bb6:	9604      	str	r6, [sp, #16]
 8001bb8:	9503      	str	r5, [sp, #12]
 8001bba:	9402      	str	r4, [sp, #8]
 8001bbc:	9101      	str	r1, [sp, #4]
 8001bbe:	9200      	str	r2, [sp, #0]
 8001bc0:	4663      	mov	r3, ip
 8001bc2:	4a53      	ldr	r2, [pc, #332]	; (8001d10 <data_logger_store_raw+0x29c>)
 8001bc4:	2180      	movs	r1, #128	; 0x80
 8001bc6:	f00b fb53 	bl	800d270 <sniprintf>

    // Abrir archivo
    FIL file;
    FRESULT res = f_open(&file, filepath, FA_OPEN_ALWAYS | FA_WRITE);
 8001bca:	f507 713f 	add.w	r1, r7, #764	; 0x2fc
 8001bce:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001bd2:	2212      	movs	r2, #18
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f009 fc67 	bl	800b4a8 <f_open>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	f887 337f 	strb.w	r3, [r7, #895]	; 0x37f
    if (res != FR_OK) {
 8001be0:	f897 337f 	ldrb.w	r3, [r7, #895]	; 0x37f
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d009      	beq.n	8001bfc <data_logger_store_raw+0x188>
        uart_print("No se pudo abrir archivo para escribir\r\n");
 8001be8:	484a      	ldr	r0, [pc, #296]	; (8001d14 <data_logger_store_raw+0x2a0>)
 8001bea:	f002 f97f 	bl	8003eec <uart_print>
        print_fatfs_error(res);
 8001bee:	f897 337f 	ldrb.w	r3, [r7, #895]	; 0x37f
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff fe98 	bl	8001928 <print_fatfs_error>
        return false;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	e07c      	b.n	8001cf6 <data_logger_store_raw+0x282>
    }

    // Verificar si el archivo está vacío para agregar encabezado
    if (f_size(&file) == 0) {
 8001bfc:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8001c00:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d13e      	bne.n	8001c88 <data_logger_store_raw+0x214>
                 "#  - Temp_amb y Temp_cam en °C\n"
                 "#  - Hum_amb y Hum_cam en %%RH\n"
                 "# Formato:\n"
                 "#  timestamp, sensor_id, pm1.0, pm2.5, pm4.0, pm10, temp_amb, hum_amb, temp_cam, "
                 "hum_cam\n",
                 data->sensor_id, sensor_metadata[data->sensor_id - 1].serial_number,
 8001c0a:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8001c0e:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	781b      	ldrb	r3, [r3, #0]
        snprintf(header, sizeof(header),
 8001c16:	461c      	mov	r4, r3
                 data->sensor_id, sensor_metadata[data->sensor_id - 1].serial_number,
 8001c18:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8001c1c:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	1e5a      	subs	r2, r3, #1
 8001c26:	4613      	mov	r3, r2
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	4413      	add	r3, r2
 8001c2c:	015b      	lsls	r3, r3, #5
 8001c2e:	4413      	add	r3, r2
 8001c30:	4a39      	ldr	r2, [pc, #228]	; (8001d18 <data_logger_store_raw+0x2a4>)
 8001c32:	1899      	adds	r1, r3, r2
                 sensor_metadata[data->sensor_id - 1].location_name, LOCATION_COORDS);
 8001c34:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8001c38:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	1e5a      	subs	r2, r3, #1
 8001c42:	4613      	mov	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4413      	add	r3, r2
 8001c48:	015b      	lsls	r3, r3, #5
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3320      	adds	r3, #32
 8001c4e:	4a32      	ldr	r2, [pc, #200]	; (8001d18 <data_logger_store_raw+0x2a4>)
 8001c50:	4413      	add	r3, r2
 8001c52:	3301      	adds	r3, #1
        snprintf(header, sizeof(header),
 8001c54:	f107 0008 	add.w	r0, r7, #8
 8001c58:	4a30      	ldr	r2, [pc, #192]	; (8001d1c <data_logger_store_raw+0x2a8>)
 8001c5a:	9202      	str	r2, [sp, #8]
 8001c5c:	9301      	str	r3, [sp, #4]
 8001c5e:	9100      	str	r1, [sp, #0]
 8001c60:	4623      	mov	r3, r4
 8001c62:	4a2f      	ldr	r2, [pc, #188]	; (8001d20 <data_logger_store_raw+0x2ac>)
 8001c64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c68:	f00b fb02 	bl	800d270 <sniprintf>

        UINT bw_header;
        f_write(&file, header, strlen(header), &bw_header);
 8001c6c:	f107 0308 	add.w	r3, r7, #8
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7fe fabd 	bl	80001f0 <strlen>
 8001c76:	4602      	mov	r2, r0
 8001c78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c7c:	f107 0108 	add.w	r1, r7, #8
 8001c80:	f507 7003 	add.w	r0, r7, #524	; 0x20c
 8001c84:	f009 fdb5 	bl	800b7f2 <f_write>
    }

    // Cerrar archivo después de escribir cabecera
    f_close(&file);
 8001c88:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f009 ff7c 	bl	800bb8a <f_close>

    // Crear línea CSV
    if (!format_csv_line(data, csv_line, sizeof(csv_line))) {
 8001c92:	f507 711f 	add.w	r1, r7, #636	; 0x27c
 8001c96:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8001c9a:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8001c9e:	2280      	movs	r2, #128	; 0x80
 8001ca0:	6818      	ldr	r0, [r3, #0]
 8001ca2:	f7ff fdc1 	bl	8001828 <format_csv_line>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	f083 0301 	eor.w	r3, r3, #1
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d004      	beq.n	8001cbc <data_logger_store_raw+0x248>
        uart_print("Error al generar línea CSV\r\n");
 8001cb2:	481c      	ldr	r0, [pc, #112]	; (8001d24 <data_logger_store_raw+0x2b0>)
 8001cb4:	f002 f91a 	bl	8003eec <uart_print>
        return false;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	e01c      	b.n	8001cf6 <data_logger_store_raw+0x282>
    }

    // Escribir la línea CSV usando utilidad
    bool ok = microSD_appendLineAbsolute(filepath, csv_line);
 8001cbc:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 8001cc0:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8001cc4:	4611      	mov	r1, r2
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f000 fddc 	bl	8002884 <microSD_appendLineAbsolute>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	f887 337e 	strb.w	r3, [r7, #894]	; 0x37e

    if (ok) {
 8001cd2:	f897 337e 	ldrb.w	r3, [r7, #894]	; 0x37e
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d008      	beq.n	8001cec <data_logger_store_raw+0x278>
        uart_print("RAW escrito: ");
 8001cda:	4813      	ldr	r0, [pc, #76]	; (8001d28 <data_logger_store_raw+0x2b4>)
 8001cdc:	f002 f906 	bl	8003eec <uart_print>
        uart_print(csv_line);
 8001ce0:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f002 f901 	bl	8003eec <uart_print>
 8001cea:	e002      	b.n	8001cf2 <data_logger_store_raw+0x27e>
    } else {
        uart_print("Fallo al escribir en RAW\r\n");
 8001cec:	480f      	ldr	r0, [pc, #60]	; (8001d2c <data_logger_store_raw+0x2b8>)
 8001cee:	f002 f8fd 	bl	8003eec <uart_print>
    }

    return ok;
 8001cf2:	f897 337e 	ldrb.w	r3, [r7, #894]	; 0x37e
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f507 7761 	add.w	r7, r7, #900	; 0x384
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d00:	20002054 	.word	0x20002054
 8001d04:	08011008 	.word	0x08011008
 8001d08:	08011010 	.word	0x08011010
 8001d0c:	0801101c 	.word	0x0801101c
 8001d10:	0801145c 	.word	0x0801145c
 8001d14:	08011488 	.word	0x08011488
 8001d18:	20000034 	.word	0x20000034
 8001d1c:	080115cc 	.word	0x080115cc
 8001d20:	080114b4 	.word	0x080114b4
 8001d24:	080110bc 	.word	0x080110bc
 8001d28:	080115e0 	.word	0x080115e0
 8001d2c:	080115f0 	.word	0x080115f0

08001d30 <build_iso8601_timestamp>:

void build_iso8601_timestamp(char * buffer, size_t len, const ParticulateData * data) {
 8001d30:	b5b0      	push	{r4, r5, r7, lr}
 8001d32:	b08a      	sub	sp, #40	; 0x28
 8001d34:	af06      	add	r7, sp, #24
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
    snprintf(buffer, len, "%04u-%02u-%02uT%02u:%02u:%02uZ", data->year, data->month, data->day,
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001d40:	461d      	mov	r5, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001d48:	461a      	mov	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001d50:	4619      	mov	r1, r3
             data->hour, data->min, data->sec);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    snprintf(buffer, len, "%04u-%02u-%02uT%02u:%02u:%02uZ", data->year, data->month, data->day,
 8001d58:	4618      	mov	r0, r3
             data->hour, data->min, data->sec);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    snprintf(buffer, len, "%04u-%02u-%02uT%02u:%02u:%02uZ", data->year, data->month, data->day,
 8001d60:	461c      	mov	r4, r3
             data->hour, data->min, data->sec);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    snprintf(buffer, len, "%04u-%02u-%02uT%02u:%02u:%02uZ", data->year, data->month, data->day,
 8001d68:	9304      	str	r3, [sp, #16]
 8001d6a:	9403      	str	r4, [sp, #12]
 8001d6c:	9002      	str	r0, [sp, #8]
 8001d6e:	9101      	str	r1, [sp, #4]
 8001d70:	9200      	str	r2, [sp, #0]
 8001d72:	462b      	mov	r3, r5
 8001d74:	4a04      	ldr	r2, [pc, #16]	; (8001d88 <build_iso8601_timestamp+0x58>)
 8001d76:	68b9      	ldr	r1, [r7, #8]
 8001d78:	68f8      	ldr	r0, [r7, #12]
 8001d7a:	f00b fa79 	bl	800d270 <sniprintf>
}
 8001d7e:	bf00      	nop
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bdb0      	pop	{r4, r5, r7, pc}
 8001d86:	bf00      	nop
 8001d88:	0801160c 	.word	0x0801160c

08001d8c <SD_disk_initialize>:
/* Exported functions --------------------------------------------------------*/
/*--------------------------------------------------------------------------
 user_diskio.c functions
 ---------------------------------------------------------------------------*/
/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) {
 8001d8c:	b590      	push	{r4, r7, lr}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	71fb      	strb	r3, [r7, #7]
    uint8_t n, type, ocr[4];

    /* single drive, drv should be 0 */
    if (drv)
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <SD_disk_initialize+0x14>
        return STA_NOINIT;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e0d5      	b.n	8001f4c <SD_disk_initialize+0x1c0>

    /* no disk */
    if (Stat & STA_NODISK)
 8001da0:	4b6c      	ldr	r3, [pc, #432]	; (8001f54 <SD_disk_initialize+0x1c8>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <SD_disk_initialize+0x2a>
        return Stat;
 8001dae:	4b69      	ldr	r3, [pc, #420]	; (8001f54 <SD_disk_initialize+0x1c8>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	e0ca      	b.n	8001f4c <SD_disk_initialize+0x1c0>

    /* power on */
    SD_PowerOn();
 8001db6:	f000 fb81 	bl	80024bc <SD_PowerOn>

    /* slave select */
    SELECT();
 8001dba:	f000 fb07 	bl	80023cc <SELECT>

    /* check disk type */
    type = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	73bb      	strb	r3, [r7, #14]

    /* send GO_IDLE_STATE command */
    if (SD_SendCmd(CMD0, 0) == 1) {
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	2040      	movs	r0, #64	; 0x40
 8001dc6:	f000 fc69 	bl	800269c <SD_SendCmd>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	f040 80a5 	bne.w	8001f1c <SD_disk_initialize+0x190>
        /* timeout 1 sec */
        Timer1 = 100;
 8001dd2:	4b61      	ldr	r3, [pc, #388]	; (8001f58 <SD_disk_initialize+0x1cc>)
 8001dd4:	2264      	movs	r2, #100	; 0x64
 8001dd6:	701a      	strb	r2, [r3, #0]

        /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
        if (SD_SendCmd(CMD8, 0x1AA) == 1) {
 8001dd8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001ddc:	2048      	movs	r0, #72	; 0x48
 8001dde:	f000 fc5d 	bl	800269c <SD_SendCmd>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d158      	bne.n	8001e9a <SD_disk_initialize+0x10e>
            /* operation condition register */
            for (n = 0; n < 4; n++)
 8001de8:	2300      	movs	r3, #0
 8001dea:	73fb      	strb	r3, [r7, #15]
 8001dec:	e00c      	b.n	8001e08 <SD_disk_initialize+0x7c>
                ocr[n] = SPI_RxByte();
 8001dee:	7bfc      	ldrb	r4, [r7, #15]
 8001df0:	f000 fb1c 	bl	800242c <SPI_RxByte>
 8001df4:	4603      	mov	r3, r0
 8001df6:	461a      	mov	r2, r3
 8001df8:	f104 0310 	add.w	r3, r4, #16
 8001dfc:	443b      	add	r3, r7
 8001dfe:	f803 2c08 	strb.w	r2, [r3, #-8]
            for (n = 0; n < 4; n++)
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
 8001e04:	3301      	adds	r3, #1
 8001e06:	73fb      	strb	r3, [r7, #15]
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d9ef      	bls.n	8001dee <SD_disk_initialize+0x62>

            if (ocr[2] == 0x01 && ocr[3] == 0xAA) {
 8001e0e:	7abb      	ldrb	r3, [r7, #10]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	f040 8083 	bne.w	8001f1c <SD_disk_initialize+0x190>
 8001e16:	7afb      	ldrb	r3, [r7, #11]
 8001e18:	2baa      	cmp	r3, #170	; 0xaa
 8001e1a:	d17f      	bne.n	8001f1c <SD_disk_initialize+0x190>
                /* voltage range 2.7-3.6V */
                do {
                    if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	2077      	movs	r0, #119	; 0x77
 8001e20:	f000 fc3c 	bl	800269c <SD_SendCmd>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d807      	bhi.n	8001e3a <SD_disk_initialize+0xae>
 8001e2a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e2e:	2069      	movs	r0, #105	; 0x69
 8001e30:	f000 fc34 	bl	800269c <SD_SendCmd>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d005      	beq.n	8001e46 <SD_disk_initialize+0xba>
                        break; /* ACMD41 with HCS bit */
                } while (Timer1);
 8001e3a:	4b47      	ldr	r3, [pc, #284]	; (8001f58 <SD_disk_initialize+0x1cc>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1eb      	bne.n	8001e1c <SD_disk_initialize+0x90>
 8001e44:	e000      	b.n	8001e48 <SD_disk_initialize+0xbc>
                        break; /* ACMD41 with HCS bit */
 8001e46:	bf00      	nop

                if (Timer1 && SD_SendCmd(CMD58, 0) == 0) {
 8001e48:	4b43      	ldr	r3, [pc, #268]	; (8001f58 <SD_disk_initialize+0x1cc>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d064      	beq.n	8001f1c <SD_disk_initialize+0x190>
 8001e52:	2100      	movs	r1, #0
 8001e54:	207a      	movs	r0, #122	; 0x7a
 8001e56:	f000 fc21 	bl	800269c <SD_SendCmd>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d15d      	bne.n	8001f1c <SD_disk_initialize+0x190>
                    /* Check CCS bit */
                    for (n = 0; n < 4; n++)
 8001e60:	2300      	movs	r3, #0
 8001e62:	73fb      	strb	r3, [r7, #15]
 8001e64:	e00c      	b.n	8001e80 <SD_disk_initialize+0xf4>
                        ocr[n] = SPI_RxByte();
 8001e66:	7bfc      	ldrb	r4, [r7, #15]
 8001e68:	f000 fae0 	bl	800242c <SPI_RxByte>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	461a      	mov	r2, r3
 8001e70:	f104 0310 	add.w	r3, r4, #16
 8001e74:	443b      	add	r3, r7
 8001e76:	f803 2c08 	strb.w	r2, [r3, #-8]
                    for (n = 0; n < 4; n++)
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	73fb      	strb	r3, [r7, #15]
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
 8001e82:	2b03      	cmp	r3, #3
 8001e84:	d9ef      	bls.n	8001e66 <SD_disk_initialize+0xda>
                    type = (ocr[0] & 0x40) ? 6 : 2;
 8001e86:	7a3b      	ldrb	r3, [r7, #8]
 8001e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <SD_disk_initialize+0x108>
 8001e90:	2306      	movs	r3, #6
 8001e92:	e000      	b.n	8001e96 <SD_disk_initialize+0x10a>
 8001e94:	2302      	movs	r3, #2
 8001e96:	73bb      	strb	r3, [r7, #14]
 8001e98:	e040      	b.n	8001f1c <SD_disk_initialize+0x190>
                }
            }
        } else {
            /* SDC Ver1 or MMC */
            type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	2077      	movs	r0, #119	; 0x77
 8001e9e:	f000 fbfd 	bl	800269c <SD_SendCmd>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d808      	bhi.n	8001eba <SD_disk_initialize+0x12e>
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	2069      	movs	r0, #105	; 0x69
 8001eac:	f000 fbf6 	bl	800269c <SD_SendCmd>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d801      	bhi.n	8001eba <SD_disk_initialize+0x12e>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e000      	b.n	8001ebc <SD_disk_initialize+0x130>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	73bb      	strb	r3, [r7, #14]

            do {
                if (type == 2) {
 8001ebe:	7bbb      	ldrb	r3, [r7, #14]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d10e      	bne.n	8001ee2 <SD_disk_initialize+0x156>
                    if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	2077      	movs	r0, #119	; 0x77
 8001ec8:	f000 fbe8 	bl	800269c <SD_SendCmd>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d80e      	bhi.n	8001ef0 <SD_disk_initialize+0x164>
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	2069      	movs	r0, #105	; 0x69
 8001ed6:	f000 fbe1 	bl	800269c <SD_SendCmd>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d107      	bne.n	8001ef0 <SD_disk_initialize+0x164>
                        break; /* ACMD41 */
 8001ee0:	e00d      	b.n	8001efe <SD_disk_initialize+0x172>
                } else {
                    if (SD_SendCmd(CMD1, 0) == 0)
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	2041      	movs	r0, #65	; 0x41
 8001ee6:	f000 fbd9 	bl	800269c <SD_SendCmd>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d005      	beq.n	8001efc <SD_disk_initialize+0x170>
                        break; /* CMD1 */
                }
            } while (Timer1);
 8001ef0:	4b19      	ldr	r3, [pc, #100]	; (8001f58 <SD_disk_initialize+0x1cc>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1e1      	bne.n	8001ebe <SD_disk_initialize+0x132>
 8001efa:	e000      	b.n	8001efe <SD_disk_initialize+0x172>
                        break; /* CMD1 */
 8001efc:	bf00      	nop
            /* SET_BLOCKLEN */
            if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8001efe:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <SD_disk_initialize+0x1cc>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d007      	beq.n	8001f18 <SD_disk_initialize+0x18c>
 8001f08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f0c:	2050      	movs	r0, #80	; 0x50
 8001f0e:	f000 fbc5 	bl	800269c <SD_SendCmd>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <SD_disk_initialize+0x190>
                type = 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	73bb      	strb	r3, [r7, #14]
        }
    }

    CardType = type;
 8001f1c:	4a0f      	ldr	r2, [pc, #60]	; (8001f5c <SD_disk_initialize+0x1d0>)
 8001f1e:	7bbb      	ldrb	r3, [r7, #14]
 8001f20:	7013      	strb	r3, [r2, #0]

    /* Idle */
    DESELECT();
 8001f22:	f000 fa5f 	bl	80023e4 <DESELECT>
    SPI_RxByte();
 8001f26:	f000 fa81 	bl	800242c <SPI_RxByte>

    /* Clear STA_NOINIT */
    if (type)
 8001f2a:	7bbb      	ldrb	r3, [r7, #14]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d008      	beq.n	8001f42 <SD_disk_initialize+0x1b6>
        Stat &= ~STA_NOINIT;
 8001f30:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <SD_disk_initialize+0x1c8>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	f023 0301 	bic.w	r3, r3, #1
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <SD_disk_initialize+0x1c8>)
 8001f3e:	701a      	strb	r2, [r3, #0]
 8001f40:	e001      	b.n	8001f46 <SD_disk_initialize+0x1ba>
    else
        SD_PowerOff(); /* Initialization failed */
 8001f42:	f000 fb07 	bl	8002554 <SD_PowerOff>

    return Stat;
 8001f46:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <SD_disk_initialize+0x1c8>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	b2db      	uxtb	r3, r3
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd90      	pop	{r4, r7, pc}
 8001f54:	20000030 	.word	0x20000030
 8001f58:	2000224e 	.word	0x2000224e
 8001f5c:	20002055 	.word	0x20002055

08001f60 <SD_disk_status>:
//-------------------------------------------------------------

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) {
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	71fb      	strb	r3, [r7, #7]
    if (drv)
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <SD_disk_status+0x14>
        return STA_NOINIT;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e002      	b.n	8001f7a <SD_disk_status+0x1a>

    return Stat;
 8001f74:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <SD_disk_status+0x28>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	b2db      	uxtb	r3, r3
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	20000030 	.word	0x20000030

08001f8c <SD_disk_read>:
//-------------------------------------------------------------

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE * buff, DWORD sector, UINT count) {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
 8001f96:	603b      	str	r3, [r7, #0]
 8001f98:	4603      	mov	r3, r0
 8001f9a:	73fb      	strb	r3, [r7, #15]
    /* pdrv should be 0 */
    if (pdrv || !count)
 8001f9c:	7bfb      	ldrb	r3, [r7, #15]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d102      	bne.n	8001fa8 <SD_disk_read+0x1c>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <SD_disk_read+0x20>
        return RES_PARERR;
 8001fa8:	2304      	movs	r3, #4
 8001faa:	e051      	b.n	8002050 <SD_disk_read+0xc4>
    /* no disk */
    if (Stat & STA_NOINIT)
 8001fac:	4b2a      	ldr	r3, [pc, #168]	; (8002058 <SD_disk_read+0xcc>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <SD_disk_read+0x32>
        return RES_NOTRDY;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e048      	b.n	8002050 <SD_disk_read+0xc4>
    /* convert to byte address */
    if (!(CardType & 4))
 8001fbe:	4b27      	ldr	r3, [pc, #156]	; (800205c <SD_disk_read+0xd0>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	f003 0304 	and.w	r3, r3, #4
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d102      	bne.n	8001fd0 <SD_disk_read+0x44>
        sector *= 512;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	025b      	lsls	r3, r3, #9
 8001fce:	607b      	str	r3, [r7, #4]

    SELECT();
 8001fd0:	f000 f9fc 	bl	80023cc <SELECT>

    if (count == 1) {
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d111      	bne.n	8001ffe <SD_disk_read+0x72>
        /* READ_SINGLE_BLOCK */
        if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	2051      	movs	r0, #81	; 0x51
 8001fde:	f000 fb5d 	bl	800269c <SD_SendCmd>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d129      	bne.n	800203c <SD_disk_read+0xb0>
 8001fe8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fec:	68b8      	ldr	r0, [r7, #8]
 8001fee:	f000 fac9 	bl	8002584 <SD_RxDataBlock>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d021      	beq.n	800203c <SD_disk_read+0xb0>
            count = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	e01e      	b.n	800203c <SD_disk_read+0xb0>
    } else {
        /* READ_MULTIPLE_BLOCK */
        if (SD_SendCmd(CMD18, sector) == 0) {
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	2052      	movs	r0, #82	; 0x52
 8002002:	f000 fb4b 	bl	800269c <SD_SendCmd>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d117      	bne.n	800203c <SD_disk_read+0xb0>
            do {
                if (!SD_RxDataBlock(buff, 512))
 800200c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002010:	68b8      	ldr	r0, [r7, #8]
 8002012:	f000 fab7 	bl	8002584 <SD_RxDataBlock>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00a      	beq.n	8002032 <SD_disk_read+0xa6>
                    break;

                buff += 512;
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002022:	60bb      	str	r3, [r7, #8]
            } while (--count);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	3b01      	subs	r3, #1
 8002028:	603b      	str	r3, [r7, #0]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1ed      	bne.n	800200c <SD_disk_read+0x80>
 8002030:	e000      	b.n	8002034 <SD_disk_read+0xa8>
                    break;
 8002032:	bf00      	nop

            /* STOP_TRANSMISSION */
            SD_SendCmd(CMD12, 0);
 8002034:	2100      	movs	r1, #0
 8002036:	204c      	movs	r0, #76	; 0x4c
 8002038:	f000 fb30 	bl	800269c <SD_SendCmd>
        }
    }
    /* Idle */
    DESELECT();
 800203c:	f000 f9d2 	bl	80023e4 <DESELECT>
    SPI_RxByte();
 8002040:	f000 f9f4 	bl	800242c <SPI_RxByte>

    return count ? RES_ERROR : RES_OK;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	bf14      	ite	ne
 800204a:	2301      	movne	r3, #1
 800204c:	2300      	moveq	r3, #0
 800204e:	b2db      	uxtb	r3, r3
}
 8002050:	4618      	mov	r0, r3
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20000030 	.word	0x20000030
 800205c:	20002055 	.word	0x20002055

08002060 <SD_disk_write>:
//-------------------------------------------------------------

/* write sector */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE * buff, DWORD sector, UINT count) {
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	60b9      	str	r1, [r7, #8]
 8002068:	607a      	str	r2, [r7, #4]
 800206a:	603b      	str	r3, [r7, #0]
 800206c:	4603      	mov	r3, r0
 800206e:	73fb      	strb	r3, [r7, #15]
    /* pdrv should be 0 */
    if (pdrv || !count)
 8002070:	7bfb      	ldrb	r3, [r7, #15]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d102      	bne.n	800207c <SD_disk_write+0x1c>
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <SD_disk_write+0x20>
        return RES_PARERR;
 800207c:	2304      	movs	r3, #4
 800207e:	e06b      	b.n	8002158 <SD_disk_write+0xf8>
    /* no disk */
    if (Stat & STA_NOINIT)
 8002080:	4b37      	ldr	r3, [pc, #220]	; (8002160 <SD_disk_write+0x100>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	b2db      	uxtb	r3, r3
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <SD_disk_write+0x32>
        return RES_NOTRDY;
 800208e:	2303      	movs	r3, #3
 8002090:	e062      	b.n	8002158 <SD_disk_write+0xf8>
    /* write protection */
    if (Stat & STA_PROTECT)
 8002092:	4b33      	ldr	r3, [pc, #204]	; (8002160 <SD_disk_write+0x100>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	b2db      	uxtb	r3, r3
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <SD_disk_write+0x44>
        return RES_WRPRT;
 80020a0:	2302      	movs	r3, #2
 80020a2:	e059      	b.n	8002158 <SD_disk_write+0xf8>
    /* convert to byte address */
    if (!(CardType & 4))
 80020a4:	4b2f      	ldr	r3, [pc, #188]	; (8002164 <SD_disk_write+0x104>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d102      	bne.n	80020b6 <SD_disk_write+0x56>
        sector *= 512;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	025b      	lsls	r3, r3, #9
 80020b4:	607b      	str	r3, [r7, #4]

    SELECT();
 80020b6:	f000 f989 	bl	80023cc <SELECT>

    if (count == 1) {
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d110      	bne.n	80020e2 <SD_disk_write+0x82>
        /* WRITE_BLOCK */
        if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	2058      	movs	r0, #88	; 0x58
 80020c4:	f000 faea 	bl	800269c <SD_SendCmd>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d13a      	bne.n	8002144 <SD_disk_write+0xe4>
 80020ce:	21fe      	movs	r1, #254	; 0xfe
 80020d0:	68b8      	ldr	r0, [r7, #8]
 80020d2:	f000 fa8d 	bl	80025f0 <SD_TxDataBlock>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d033      	beq.n	8002144 <SD_disk_write+0xe4>
            count = 0;
 80020dc:	2300      	movs	r3, #0
 80020de:	603b      	str	r3, [r7, #0]
 80020e0:	e030      	b.n	8002144 <SD_disk_write+0xe4>
    } else {
        /* WRITE_MULTIPLE_BLOCK */
        if (CardType & 2) {
 80020e2:	4b20      	ldr	r3, [pc, #128]	; (8002164 <SD_disk_write+0x104>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d007      	beq.n	80020fe <SD_disk_write+0x9e>
            SD_SendCmd(CMD55, 0);
 80020ee:	2100      	movs	r1, #0
 80020f0:	2077      	movs	r0, #119	; 0x77
 80020f2:	f000 fad3 	bl	800269c <SD_SendCmd>
            SD_SendCmd(CMD23, count); /* ACMD23 */
 80020f6:	6839      	ldr	r1, [r7, #0]
 80020f8:	2057      	movs	r0, #87	; 0x57
 80020fa:	f000 facf 	bl	800269c <SD_SendCmd>
        }

        if (SD_SendCmd(CMD25, sector) == 0) {
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	2059      	movs	r0, #89	; 0x59
 8002102:	f000 facb 	bl	800269c <SD_SendCmd>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d11b      	bne.n	8002144 <SD_disk_write+0xe4>
            do {
                if (!SD_TxDataBlock(buff, 0xFC))
 800210c:	21fc      	movs	r1, #252	; 0xfc
 800210e:	68b8      	ldr	r0, [r7, #8]
 8002110:	f000 fa6e 	bl	80025f0 <SD_TxDataBlock>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00a      	beq.n	8002130 <SD_disk_write+0xd0>
                    break;

                buff += 512;
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002120:	60bb      	str	r3, [r7, #8]
            } while (--count);
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	3b01      	subs	r3, #1
 8002126:	603b      	str	r3, [r7, #0]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1ee      	bne.n	800210c <SD_disk_write+0xac>
 800212e:	e000      	b.n	8002132 <SD_disk_write+0xd2>
                    break;
 8002130:	bf00      	nop
            /* STOP_TRAN token */
            if (!SD_TxDataBlock(0, 0xFD))
 8002132:	21fd      	movs	r1, #253	; 0xfd
 8002134:	2000      	movs	r0, #0
 8002136:	f000 fa5b 	bl	80025f0 <SD_TxDataBlock>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <SD_disk_write+0xe4>
                count = 1;
 8002140:	2301      	movs	r3, #1
 8002142:	603b      	str	r3, [r7, #0]
        }
    }
    /* Idle */
    DESELECT();
 8002144:	f000 f94e 	bl	80023e4 <DESELECT>
    SPI_RxByte();
 8002148:	f000 f970 	bl	800242c <SPI_RxByte>

    return count ? RES_ERROR : RES_OK;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	bf14      	ite	ne
 8002152:	2301      	movne	r3, #1
 8002154:	2300      	moveq	r3, #0
 8002156:	b2db      	uxtb	r3, r3
}
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20000030 	.word	0x20000030
 8002164:	20002055 	.word	0x20002055

08002168 <SD_disk_ioctl>:
//-------------------------------------------------------------
#endif /* _READONLY */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void * buff) {
 8002168:	b590      	push	{r4, r7, lr}
 800216a:	b08b      	sub	sp, #44	; 0x2c
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	603a      	str	r2, [r7, #0]
 8002172:	71fb      	strb	r3, [r7, #7]
 8002174:	460b      	mov	r3, r1
 8002176:	71bb      	strb	r3, [r7, #6]
    DRESULT res;
    BYTE n, csd[16], *ptr = buff;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	623b      	str	r3, [r7, #32]
    WORD csize;
    /* pdrv should be 0 */
    if (drv)
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <SD_disk_ioctl+0x1e>
        return RES_PARERR;
 8002182:	2304      	movs	r3, #4
 8002184:	e11b      	b.n	80023be <SD_disk_ioctl+0x256>

    res = RES_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (ctrl == CTRL_POWER) {
 800218c:	79bb      	ldrb	r3, [r7, #6]
 800218e:	2b05      	cmp	r3, #5
 8002190:	d129      	bne.n	80021e6 <SD_disk_ioctl+0x7e>
        switch (*ptr) {
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d017      	beq.n	80021ca <SD_disk_ioctl+0x62>
 800219a:	2b02      	cmp	r3, #2
 800219c:	dc1f      	bgt.n	80021de <SD_disk_ioctl+0x76>
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d002      	beq.n	80021a8 <SD_disk_ioctl+0x40>
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d00b      	beq.n	80021be <SD_disk_ioctl+0x56>
 80021a6:	e01a      	b.n	80021de <SD_disk_ioctl+0x76>
        case 0:
            if (SD_CheckPower())
 80021a8:	f000 f9e0 	bl	800256c <SD_CheckPower>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <SD_disk_ioctl+0x4e>
                SD_PowerOff(); /* Power Off */
 80021b2:	f000 f9cf 	bl	8002554 <SD_PowerOff>
            res = RES_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80021bc:	e0fd      	b.n	80023ba <SD_disk_ioctl+0x252>
        case 1:
            SD_PowerOn(); /* Power On */
 80021be:	f000 f97d 	bl	80024bc <SD_PowerOn>
            res = RES_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80021c8:	e0f7      	b.n	80023ba <SD_disk_ioctl+0x252>
        case 2:
            *(ptr + 1) = (BYTE)SD_CheckPower();
 80021ca:	6a3b      	ldr	r3, [r7, #32]
 80021cc:	1c5c      	adds	r4, r3, #1
 80021ce:	f000 f9cd 	bl	800256c <SD_CheckPower>
 80021d2:	4603      	mov	r3, r0
 80021d4:	7023      	strb	r3, [r4, #0]
            res = RES_OK; /* Power Check */
 80021d6:	2300      	movs	r3, #0
 80021d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80021dc:	e0ed      	b.n	80023ba <SD_disk_ioctl+0x252>
        default:
            res = RES_PARERR;
 80021de:	2304      	movs	r3, #4
 80021e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80021e4:	e0e9      	b.n	80023ba <SD_disk_ioctl+0x252>
        }
    } else {
        /* no disk */
        if (Stat & STA_NOINIT)
 80021e6:	4b78      	ldr	r3, [pc, #480]	; (80023c8 <SD_disk_ioctl+0x260>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <SD_disk_ioctl+0x90>
            return RES_NOTRDY;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e0e2      	b.n	80023be <SD_disk_ioctl+0x256>

        SELECT();
 80021f8:	f000 f8e8 	bl	80023cc <SELECT>

        switch (ctrl) {
 80021fc:	79bb      	ldrb	r3, [r7, #6]
 80021fe:	2b0d      	cmp	r3, #13
 8002200:	f200 80cc 	bhi.w	800239c <SD_disk_ioctl+0x234>
 8002204:	a201      	add	r2, pc, #4	; (adr r2, 800220c <SD_disk_ioctl+0xa4>)
 8002206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800220a:	bf00      	nop
 800220c:	08002307 	.word	0x08002307
 8002210:	08002245 	.word	0x08002245
 8002214:	080022f7 	.word	0x080022f7
 8002218:	0800239d 	.word	0x0800239d
 800221c:	0800239d 	.word	0x0800239d
 8002220:	0800239d 	.word	0x0800239d
 8002224:	0800239d 	.word	0x0800239d
 8002228:	0800239d 	.word	0x0800239d
 800222c:	0800239d 	.word	0x0800239d
 8002230:	0800239d 	.word	0x0800239d
 8002234:	0800239d 	.word	0x0800239d
 8002238:	08002319 	.word	0x08002319
 800223c:	0800233d 	.word	0x0800233d
 8002240:	08002361 	.word	0x08002361
        case GET_SECTOR_COUNT:
            /* SEND_CSD */
            if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) {
 8002244:	2100      	movs	r1, #0
 8002246:	2049      	movs	r0, #73	; 0x49
 8002248:	f000 fa28 	bl	800269c <SD_SendCmd>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	f040 80a8 	bne.w	80023a4 <SD_disk_ioctl+0x23c>
 8002254:	f107 030c 	add.w	r3, r7, #12
 8002258:	2110      	movs	r1, #16
 800225a:	4618      	mov	r0, r3
 800225c:	f000 f992 	bl	8002584 <SD_RxDataBlock>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 809e 	beq.w	80023a4 <SD_disk_ioctl+0x23c>
                if ((csd[0] >> 6) == 1) {
 8002268:	7b3b      	ldrb	r3, [r7, #12]
 800226a:	099b      	lsrs	r3, r3, #6
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b01      	cmp	r3, #1
 8002270:	d10e      	bne.n	8002290 <SD_disk_ioctl+0x128>
                    /* SDC ver 2.00 */
                    csize = csd[9] + ((WORD)csd[8] << 8) + 1;
 8002272:	7d7b      	ldrb	r3, [r7, #21]
 8002274:	b29a      	uxth	r2, r3
 8002276:	7d3b      	ldrb	r3, [r7, #20]
 8002278:	b29b      	uxth	r3, r3
 800227a:	021b      	lsls	r3, r3, #8
 800227c:	b29b      	uxth	r3, r3
 800227e:	4413      	add	r3, r2
 8002280:	b29b      	uxth	r3, r3
 8002282:	3301      	adds	r3, #1
 8002284:	83fb      	strh	r3, [r7, #30]
                    *(DWORD *)buff = (DWORD)csize << 10;
 8002286:	8bfb      	ldrh	r3, [r7, #30]
 8002288:	029a      	lsls	r2, r3, #10
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	e02e      	b.n	80022ee <SD_disk_ioctl+0x186>
                } else {
                    /* MMC or SDC ver 1.XX */
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002290:	7c7b      	ldrb	r3, [r7, #17]
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	b2da      	uxtb	r2, r3
 8002298:	7dbb      	ldrb	r3, [r7, #22]
 800229a:	09db      	lsrs	r3, r3, #7
 800229c:	b2db      	uxtb	r3, r3
 800229e:	4413      	add	r3, r2
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	7d7b      	ldrb	r3, [r7, #21]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	f003 0306 	and.w	r3, r3, #6
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	4413      	add	r3, r2
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	3302      	adds	r3, #2
 80022b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80022b8:	7d3b      	ldrb	r3, [r7, #20]
 80022ba:	099b      	lsrs	r3, r3, #6
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	b29a      	uxth	r2, r3
 80022c0:	7cfb      	ldrb	r3, [r7, #19]
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	4413      	add	r3, r2
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	7cbb      	ldrb	r3, [r7, #18]
 80022ce:	029b      	lsls	r3, r3, #10
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	4413      	add	r3, r2
 80022da:	b29b      	uxth	r3, r3
 80022dc:	3301      	adds	r3, #1
 80022de:	83fb      	strh	r3, [r7, #30]
                    *(DWORD *)buff = (DWORD)csize << (n - 9);
 80022e0:	8bfa      	ldrh	r2, [r7, #30]
 80022e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80022e6:	3b09      	subs	r3, #9
 80022e8:	409a      	lsls	r2, r3
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	601a      	str	r2, [r3, #0]
                }

                res = RES_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 80022f4:	e056      	b.n	80023a4 <SD_disk_ioctl+0x23c>

        case GET_SECTOR_SIZE:
            *(WORD *)buff = 512;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022fc:	801a      	strh	r2, [r3, #0]
            res = RES_OK;
 80022fe:	2300      	movs	r3, #0
 8002300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8002304:	e055      	b.n	80023b2 <SD_disk_ioctl+0x24a>

        case CTRL_SYNC:
            if (SD_ReadyWait() == 0xFF)
 8002306:	f000 f8bd 	bl	8002484 <SD_ReadyWait>
 800230a:	4603      	mov	r3, r0
 800230c:	2bff      	cmp	r3, #255	; 0xff
 800230e:	d14b      	bne.n	80023a8 <SD_disk_ioctl+0x240>
                res = RES_OK;
 8002310:	2300      	movs	r3, #0
 8002312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8002316:	e047      	b.n	80023a8 <SD_disk_ioctl+0x240>

        case MMC_GET_CSD:
            /* SEND_CSD */
            if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002318:	2100      	movs	r1, #0
 800231a:	2049      	movs	r0, #73	; 0x49
 800231c:	f000 f9be 	bl	800269c <SD_SendCmd>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d142      	bne.n	80023ac <SD_disk_ioctl+0x244>
 8002326:	2110      	movs	r1, #16
 8002328:	6a38      	ldr	r0, [r7, #32]
 800232a:	f000 f92b 	bl	8002584 <SD_RxDataBlock>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d03b      	beq.n	80023ac <SD_disk_ioctl+0x244>
                res = RES_OK;
 8002334:	2300      	movs	r3, #0
 8002336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800233a:	e037      	b.n	80023ac <SD_disk_ioctl+0x244>

        case MMC_GET_CID:
            /* SEND_CID */
            if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800233c:	2100      	movs	r1, #0
 800233e:	204a      	movs	r0, #74	; 0x4a
 8002340:	f000 f9ac 	bl	800269c <SD_SendCmd>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d132      	bne.n	80023b0 <SD_disk_ioctl+0x248>
 800234a:	2110      	movs	r1, #16
 800234c:	6a38      	ldr	r0, [r7, #32]
 800234e:	f000 f919 	bl	8002584 <SD_RxDataBlock>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d02b      	beq.n	80023b0 <SD_disk_ioctl+0x248>
                res = RES_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800235e:	e027      	b.n	80023b0 <SD_disk_ioctl+0x248>

        case MMC_GET_OCR:
            /* READ_OCR */
            if (SD_SendCmd(CMD58, 0) == 0) {
 8002360:	2100      	movs	r1, #0
 8002362:	207a      	movs	r0, #122	; 0x7a
 8002364:	f000 f99a 	bl	800269c <SD_SendCmd>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d116      	bne.n	800239c <SD_disk_ioctl+0x234>
                for (n = 0; n < 4; n++)
 800236e:	2300      	movs	r3, #0
 8002370:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002374:	e00b      	b.n	800238e <SD_disk_ioctl+0x226>
                    *ptr++ = SPI_RxByte();
 8002376:	6a3c      	ldr	r4, [r7, #32]
 8002378:	1c63      	adds	r3, r4, #1
 800237a:	623b      	str	r3, [r7, #32]
 800237c:	f000 f856 	bl	800242c <SPI_RxByte>
 8002380:	4603      	mov	r3, r0
 8002382:	7023      	strb	r3, [r4, #0]
                for (n = 0; n < 4; n++)
 8002384:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002388:	3301      	adds	r3, #1
 800238a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800238e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002392:	2b03      	cmp	r3, #3
 8002394:	d9ef      	bls.n	8002376 <SD_disk_ioctl+0x20e>

                res = RES_OK;
 8002396:	2300      	movs	r3, #0
 8002398:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }

        default:
            res = RES_PARERR;
 800239c:	2304      	movs	r3, #4
 800239e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80023a2:	e006      	b.n	80023b2 <SD_disk_ioctl+0x24a>
            break;
 80023a4:	bf00      	nop
 80023a6:	e004      	b.n	80023b2 <SD_disk_ioctl+0x24a>
            break;
 80023a8:	bf00      	nop
 80023aa:	e002      	b.n	80023b2 <SD_disk_ioctl+0x24a>
            break;
 80023ac:	bf00      	nop
 80023ae:	e000      	b.n	80023b2 <SD_disk_ioctl+0x24a>
            break;
 80023b0:	bf00      	nop
        }

        DESELECT();
 80023b2:	f000 f817 	bl	80023e4 <DESELECT>
        SPI_RxByte();
 80023b6:	f000 f839 	bl	800242c <SPI_RxByte>
    }

    return res;
 80023ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80023be:	4618      	mov	r0, r3
 80023c0:	372c      	adds	r7, #44	; 0x2c
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd90      	pop	{r4, r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000030 	.word	0x20000030

080023cc <SELECT>:
/* Private functions --------------------------------------------------------*/
/*--------------------------------------------------------------------------
 SPI functions
 ---------------------------------------------------------------------------*/
/* slave select */
static void SELECT(void) {
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80023d0:	2200      	movs	r2, #0
 80023d2:	2101      	movs	r1, #1
 80023d4:	4802      	ldr	r0, [pc, #8]	; (80023e0 <SELECT+0x14>)
 80023d6:	f003 f9cd 	bl	8005774 <HAL_GPIO_WritePin>
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40020400 	.word	0x40020400

080023e4 <DESELECT>:
//-------------------------------------------------------------

/* slave deselect */
static void DESELECT(void) {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80023e8:	2201      	movs	r2, #1
 80023ea:	2101      	movs	r1, #1
 80023ec:	4802      	ldr	r0, [pc, #8]	; (80023f8 <DESELECT+0x14>)
 80023ee:	f003 f9c1 	bl	8005774 <HAL_GPIO_WritePin>
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40020400 	.word	0x40020400

080023fc <SPI_TxByte>:
//-------------------------------------------------------------

/* SPI transmit a byte */
static void SPI_TxByte(BYTE data) {
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	71fb      	strb	r3, [r7, #7]
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY)
 8002406:	bf00      	nop
 8002408:	4807      	ldr	r0, [pc, #28]	; (8002428 <SPI_TxByte+0x2c>)
 800240a:	f006 f877 	bl	80084fc <HAL_SPI_GetState>
 800240e:	4603      	mov	r3, r0
 8002410:	2b01      	cmp	r3, #1
 8002412:	d1f9      	bne.n	8002408 <SPI_TxByte+0xc>
        ;
    HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8002414:	1df9      	adds	r1, r7, #7
 8002416:	2364      	movs	r3, #100	; 0x64
 8002418:	2201      	movs	r2, #1
 800241a:	4803      	ldr	r0, [pc, #12]	; (8002428 <SPI_TxByte+0x2c>)
 800241c:	f005 fd90 	bl	8007f40 <HAL_SPI_Transmit>
}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	200021f4 	.word	0x200021f4

0800242c <SPI_RxByte>:
//-------------------------------------------------------------

/* SPI receive a byte */
static uint8_t SPI_RxByte(void) {
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af02      	add	r7, sp, #8
    uint8_t dummy, data;
    dummy = 0xFF;
 8002432:	23ff      	movs	r3, #255	; 0xff
 8002434:	71fb      	strb	r3, [r7, #7]
    data = 0;
 8002436:	2300      	movs	r3, #0
 8002438:	71bb      	strb	r3, [r7, #6]

    while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY))
 800243a:	bf00      	nop
 800243c:	4809      	ldr	r0, [pc, #36]	; (8002464 <SPI_RxByte+0x38>)
 800243e:	f006 f85d 	bl	80084fc <HAL_SPI_GetState>
 8002442:	4603      	mov	r3, r0
 8002444:	2b01      	cmp	r3, #1
 8002446:	d1f9      	bne.n	800243c <SPI_RxByte+0x10>
        ;
    HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8002448:	1dba      	adds	r2, r7, #6
 800244a:	1df9      	adds	r1, r7, #7
 800244c:	2364      	movs	r3, #100	; 0x64
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	2301      	movs	r3, #1
 8002452:	4804      	ldr	r0, [pc, #16]	; (8002464 <SPI_RxByte+0x38>)
 8002454:	f005 feb0 	bl	80081b8 <HAL_SPI_TransmitReceive>

    return data;
 8002458:	79bb      	ldrb	r3, [r7, #6]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	200021f4 	.word	0x200021f4

08002468 <SPI_RxBytePtr>:
//-------------------------------------------------------------

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t * buff) {
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
    *buff = SPI_RxByte();
 8002470:	f7ff ffdc 	bl	800242c <SPI_RxByte>
 8002474:	4603      	mov	r3, r0
 8002476:	461a      	mov	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	701a      	strb	r2, [r3, #0]
}
 800247c:	bf00      	nop
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <SD_ReadyWait>:

/*--------------------------------------------------------------------------
 SD functions
 ---------------------------------------------------------------------------*/
/* wait SD ready */
static uint8_t SD_ReadyWait(void) {
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
    uint8_t res;

    /* 500ms 카운터 준비 */
    Timer2 = 50;
 800248a:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <SD_ReadyWait+0x34>)
 800248c:	2232      	movs	r2, #50	; 0x32
 800248e:	701a      	strb	r2, [r3, #0]
    SPI_RxByte();
 8002490:	f7ff ffcc 	bl	800242c <SPI_RxByte>

    do {
        /* 0xFF 값이 수신될 때 까지 SPI 통신 */
        res = SPI_RxByte();
 8002494:	f7ff ffca 	bl	800242c <SPI_RxByte>
 8002498:	4603      	mov	r3, r0
 800249a:	71fb      	strb	r3, [r7, #7]
    } while ((res != 0xFF) && Timer2);
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	2bff      	cmp	r3, #255	; 0xff
 80024a0:	d004      	beq.n	80024ac <SD_ReadyWait+0x28>
 80024a2:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <SD_ReadyWait+0x34>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1f3      	bne.n	8002494 <SD_ReadyWait+0x10>

    return res;
 80024ac:	79fb      	ldrb	r3, [r7, #7]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20002250 	.word	0x20002250

080024bc <SD_PowerOn>:
//-------------------------------------------------------------

/* power on */
static void SD_PowerOn(void) {
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
    uint8_t cmd_arg[6];
    uint32_t Count = 0x1FFF;
 80024c2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80024c6:	617b      	str	r3, [r7, #20]

    /* transmit bytes to wake up */
    DESELECT();
 80024c8:	f7ff ff8c 	bl	80023e4 <DESELECT>

    for (int i = 0; i < 10; i++)
 80024cc:	2300      	movs	r3, #0
 80024ce:	613b      	str	r3, [r7, #16]
 80024d0:	e005      	b.n	80024de <SD_PowerOn+0x22>
        SPI_TxByte(0xFF);
 80024d2:	20ff      	movs	r0, #255	; 0xff
 80024d4:	f7ff ff92 	bl	80023fc <SPI_TxByte>
    for (int i = 0; i < 10; i++)
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	3301      	adds	r3, #1
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	2b09      	cmp	r3, #9
 80024e2:	ddf6      	ble.n	80024d2 <SD_PowerOn+0x16>

    /* slave select */
    SELECT();
 80024e4:	f7ff ff72 	bl	80023cc <SELECT>

    /* make idle state */
    cmd_arg[0] = (CMD0 | 0x40);
 80024e8:	2340      	movs	r3, #64	; 0x40
 80024ea:	713b      	strb	r3, [r7, #4]
    cmd_arg[1] = 0;
 80024ec:	2300      	movs	r3, #0
 80024ee:	717b      	strb	r3, [r7, #5]
    cmd_arg[2] = 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	71bb      	strb	r3, [r7, #6]
    cmd_arg[3] = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	71fb      	strb	r3, [r7, #7]
    cmd_arg[4] = 0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	723b      	strb	r3, [r7, #8]
    cmd_arg[5] = 0x95;
 80024fc:	2395      	movs	r3, #149	; 0x95
 80024fe:	727b      	strb	r3, [r7, #9]

    /* 명령 전송 */
    for (int i = 0; i < 6; i++)
 8002500:	2300      	movs	r3, #0
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	e009      	b.n	800251a <SD_PowerOn+0x5e>
        SPI_TxByte(cmd_arg[i]);
 8002506:	1d3a      	adds	r2, r7, #4
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4413      	add	r3, r2
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff ff74 	bl	80023fc <SPI_TxByte>
    for (int i = 0; i < 6; i++)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	3301      	adds	r3, #1
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2b05      	cmp	r3, #5
 800251e:	ddf2      	ble.n	8002506 <SD_PowerOn+0x4a>

    /* wait response */
    while ((SPI_RxByte() != 0x01) && Count)
 8002520:	e002      	b.n	8002528 <SD_PowerOn+0x6c>
        Count--;
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	3b01      	subs	r3, #1
 8002526:	617b      	str	r3, [r7, #20]
    while ((SPI_RxByte() != 0x01) && Count)
 8002528:	f7ff ff80 	bl	800242c <SPI_RxByte>
 800252c:	4603      	mov	r3, r0
 800252e:	2b01      	cmp	r3, #1
 8002530:	d002      	beq.n	8002538 <SD_PowerOn+0x7c>
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1f4      	bne.n	8002522 <SD_PowerOn+0x66>

    DESELECT();
 8002538:	f7ff ff54 	bl	80023e4 <DESELECT>
    SPI_TxByte(0XFF);
 800253c:	20ff      	movs	r0, #255	; 0xff
 800253e:	f7ff ff5d 	bl	80023fc <SPI_TxByte>

    PowerFlag = 1;
 8002542:	4b03      	ldr	r3, [pc, #12]	; (8002550 <SD_PowerOn+0x94>)
 8002544:	2201      	movs	r2, #1
 8002546:	701a      	strb	r2, [r3, #0]
}
 8002548:	bf00      	nop
 800254a:	3718      	adds	r7, #24
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	20002056 	.word	0x20002056

08002554 <SD_PowerOff>:
//-------------------------------------------------------------

/* power off */
static void SD_PowerOff(void) {
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
    PowerFlag = 0;
 8002558:	4b03      	ldr	r3, [pc, #12]	; (8002568 <SD_PowerOff+0x14>)
 800255a:	2200      	movs	r2, #0
 800255c:	701a      	strb	r2, [r3, #0]
}
 800255e:	bf00      	nop
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	20002056 	.word	0x20002056

0800256c <SD_CheckPower>:
//-------------------------------------------------------------

/* check power flag */
static uint8_t SD_CheckPower(void) {
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
    return PowerFlag; /*  0=off, 1=on */
 8002570:	4b03      	ldr	r3, [pc, #12]	; (8002580 <SD_CheckPower+0x14>)
 8002572:	781b      	ldrb	r3, [r3, #0]
}
 8002574:	4618      	mov	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	20002056 	.word	0x20002056

08002584 <SD_RxDataBlock>:
//-------------------------------------------------------------

/* receive data block */
static bool SD_RxDataBlock(BYTE * buff, UINT btr) {
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
    uint8_t token;

    Timer1 = 10; /* timeout 100ms */
 800258e:	4b17      	ldr	r3, [pc, #92]	; (80025ec <SD_RxDataBlock+0x68>)
 8002590:	220a      	movs	r2, #10
 8002592:	701a      	strb	r2, [r3, #0]

    /* loop until receive a response or timeout */
    do {
        token = SPI_RxByte();
 8002594:	f7ff ff4a 	bl	800242c <SPI_RxByte>
 8002598:	4603      	mov	r3, r0
 800259a:	73fb      	strb	r3, [r7, #15]
    } while ((token == 0xFF) && Timer1);
 800259c:	7bfb      	ldrb	r3, [r7, #15]
 800259e:	2bff      	cmp	r3, #255	; 0xff
 80025a0:	d104      	bne.n	80025ac <SD_RxDataBlock+0x28>
 80025a2:	4b12      	ldr	r3, [pc, #72]	; (80025ec <SD_RxDataBlock+0x68>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1f3      	bne.n	8002594 <SD_RxDataBlock+0x10>

    /* invalid response */
    if (token != 0xFE)
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
 80025ae:	2bfe      	cmp	r3, #254	; 0xfe
 80025b0:	d001      	beq.n	80025b6 <SD_RxDataBlock+0x32>
        return FALSE;
 80025b2:	2300      	movs	r3, #0
 80025b4:	e016      	b.n	80025e4 <SD_RxDataBlock+0x60>

    /* receive data */
    do {
        SPI_RxBytePtr(buff++);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	1c5a      	adds	r2, r3, #1
 80025ba:	607a      	str	r2, [r7, #4]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff ff53 	bl	8002468 <SPI_RxBytePtr>
        SPI_RxBytePtr(buff++);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	1c5a      	adds	r2, r3, #1
 80025c6:	607a      	str	r2, [r7, #4]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff ff4d 	bl	8002468 <SPI_RxBytePtr>
    } while (btr -= 2);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	3b02      	subs	r3, #2
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1ed      	bne.n	80025b6 <SD_RxDataBlock+0x32>

    SPI_RxByte(); /* CRC 무시 */
 80025da:	f7ff ff27 	bl	800242c <SPI_RxByte>
    SPI_RxByte();
 80025de:	f7ff ff25 	bl	800242c <SPI_RxByte>

    return TRUE;
 80025e2:	2301      	movs	r3, #1
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	2000224e 	.word	0x2000224e

080025f0 <SD_TxDataBlock>:
//-------------------------------------------------------------

/* transmit data block */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE * buff, BYTE token) {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	70fb      	strb	r3, [r7, #3]
    uint8_t resp = 0, wc;
 80025fc:	2300      	movs	r3, #0
 80025fe:	73fb      	strb	r3, [r7, #15]
    uint8_t i = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	737b      	strb	r3, [r7, #13]

    /* wait SD ready */
    if (SD_ReadyWait() != 0xFF)
 8002604:	f7ff ff3e 	bl	8002484 <SD_ReadyWait>
 8002608:	4603      	mov	r3, r0
 800260a:	2bff      	cmp	r3, #255	; 0xff
 800260c:	d001      	beq.n	8002612 <SD_TxDataBlock+0x22>
        return FALSE;
 800260e:	2300      	movs	r3, #0
 8002610:	e040      	b.n	8002694 <SD_TxDataBlock+0xa4>

    /* transmit token */
    SPI_TxByte(token);
 8002612:	78fb      	ldrb	r3, [r7, #3]
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff fef1 	bl	80023fc <SPI_TxByte>

    /* if it's not STOP token, transmit data */
    if (token != 0xFD) {
 800261a:	78fb      	ldrb	r3, [r7, #3]
 800261c:	2bfd      	cmp	r3, #253	; 0xfd
 800261e:	d031      	beq.n	8002684 <SD_TxDataBlock+0x94>
        wc = 0;
 8002620:	2300      	movs	r3, #0
 8002622:	73bb      	strb	r3, [r7, #14]

        /* 512 바이트 데이터 전송 */
        do {
            SPI_TxByte(*buff++);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	607a      	str	r2, [r7, #4]
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff fee5 	bl	80023fc <SPI_TxByte>
            SPI_TxByte(*buff++);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	1c5a      	adds	r2, r3, #1
 8002636:	607a      	str	r2, [r7, #4]
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fede 	bl	80023fc <SPI_TxByte>
        } while (--wc);
 8002640:	7bbb      	ldrb	r3, [r7, #14]
 8002642:	3b01      	subs	r3, #1
 8002644:	73bb      	strb	r3, [r7, #14]
 8002646:	7bbb      	ldrb	r3, [r7, #14]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1eb      	bne.n	8002624 <SD_TxDataBlock+0x34>

        SPI_RxByte(); /* CRC 무시 */
 800264c:	f7ff feee 	bl	800242c <SPI_RxByte>
        SPI_RxByte();
 8002650:	f7ff feec 	bl	800242c <SPI_RxByte>

        /* 데이트 응답 수신 */
        while (i <= 64) {
 8002654:	e00b      	b.n	800266e <SD_TxDataBlock+0x7e>
            resp = SPI_RxByte();
 8002656:	f7ff fee9 	bl	800242c <SPI_RxByte>
 800265a:	4603      	mov	r3, r0
 800265c:	73fb      	strb	r3, [r7, #15]

            /* transmit 0x05 accepted */
            if ((resp & 0x1F) == 0x05)
 800265e:	7bfb      	ldrb	r3, [r7, #15]
 8002660:	f003 031f 	and.w	r3, r3, #31
 8002664:	2b05      	cmp	r3, #5
 8002666:	d006      	beq.n	8002676 <SD_TxDataBlock+0x86>
                break;

            i++;
 8002668:	7b7b      	ldrb	r3, [r7, #13]
 800266a:	3301      	adds	r3, #1
 800266c:	737b      	strb	r3, [r7, #13]
        while (i <= 64) {
 800266e:	7b7b      	ldrb	r3, [r7, #13]
 8002670:	2b40      	cmp	r3, #64	; 0x40
 8002672:	d9f0      	bls.n	8002656 <SD_TxDataBlock+0x66>
 8002674:	e000      	b.n	8002678 <SD_TxDataBlock+0x88>
                break;
 8002676:	bf00      	nop
        }

        /* recv buffer clear */
        while (SPI_RxByte() == 0)
 8002678:	bf00      	nop
 800267a:	f7ff fed7 	bl	800242c <SPI_RxByte>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0fa      	beq.n	800267a <SD_TxDataBlock+0x8a>
            ;
    }

    if ((resp & 0x1F) == 0x05)
 8002684:	7bfb      	ldrb	r3, [r7, #15]
 8002686:	f003 031f 	and.w	r3, r3, #31
 800268a:	2b05      	cmp	r3, #5
 800268c:	d101      	bne.n	8002692 <SD_TxDataBlock+0xa2>
        return TRUE;
 800268e:	2301      	movs	r3, #1
 8002690:	e000      	b.n	8002694 <SD_TxDataBlock+0xa4>
    else
        return FALSE;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <SD_SendCmd>:
#endif /* _READONLY */
//-------------------------------------------------------------

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) {
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	6039      	str	r1, [r7, #0]
 80026a6:	71fb      	strb	r3, [r7, #7]
    uint8_t crc, res;

    /* wait SD ready */
    if (SD_ReadyWait() != 0xFF)
 80026a8:	f7ff feec 	bl	8002484 <SD_ReadyWait>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2bff      	cmp	r3, #255	; 0xff
 80026b0:	d001      	beq.n	80026b6 <SD_SendCmd+0x1a>
        return 0xFF;
 80026b2:	23ff      	movs	r3, #255	; 0xff
 80026b4:	e040      	b.n	8002738 <SD_SendCmd+0x9c>

    /* transmit command */
    SPI_TxByte(cmd);               /* Command */
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff fe9f 	bl	80023fc <SPI_TxByte>
    SPI_TxByte((BYTE)(arg >> 24)); /* Argument[31..24] */
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	0e1b      	lsrs	r3, r3, #24
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff fe99 	bl	80023fc <SPI_TxByte>
    SPI_TxByte((BYTE)(arg >> 16)); /* Argument[23..16] */
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	0c1b      	lsrs	r3, r3, #16
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff fe93 	bl	80023fc <SPI_TxByte>
    SPI_TxByte((BYTE)(arg >> 8));  /* Argument[15..8] */
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	0a1b      	lsrs	r3, r3, #8
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff fe8d 	bl	80023fc <SPI_TxByte>
    SPI_TxByte((BYTE)arg);         /* Argument[7..0] */
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff fe88 	bl	80023fc <SPI_TxByte>

    /* prepare CRC */
    crc = 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	73fb      	strb	r3, [r7, #15]
    if (cmd == CMD0)
 80026f0:	79fb      	ldrb	r3, [r7, #7]
 80026f2:	2b40      	cmp	r3, #64	; 0x40
 80026f4:	d101      	bne.n	80026fa <SD_SendCmd+0x5e>
        crc = 0x95; /* CRC for CMD0(0) */
 80026f6:	2395      	movs	r3, #149	; 0x95
 80026f8:	73fb      	strb	r3, [r7, #15]

    if (cmd == CMD8)
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	2b48      	cmp	r3, #72	; 0x48
 80026fe:	d101      	bne.n	8002704 <SD_SendCmd+0x68>
        crc = 0x87; /* CRC for CMD8(0x1AA) */
 8002700:	2387      	movs	r3, #135	; 0x87
 8002702:	73fb      	strb	r3, [r7, #15]

    /* transmit CRC */
    SPI_TxByte(crc);
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff fe78 	bl	80023fc <SPI_TxByte>

    /* Skip a stuff byte when STOP_TRANSMISSION */
    if (cmd == CMD12)
 800270c:	79fb      	ldrb	r3, [r7, #7]
 800270e:	2b4c      	cmp	r3, #76	; 0x4c
 8002710:	d101      	bne.n	8002716 <SD_SendCmd+0x7a>
        SPI_RxByte();
 8002712:	f7ff fe8b 	bl	800242c <SPI_RxByte>

    /* receive response */
    uint8_t n = 10;
 8002716:	230a      	movs	r3, #10
 8002718:	73bb      	strb	r3, [r7, #14]
    do {
        res = SPI_RxByte();
 800271a:	f7ff fe87 	bl	800242c <SPI_RxByte>
 800271e:	4603      	mov	r3, r0
 8002720:	737b      	strb	r3, [r7, #13]
    } while ((res & 0x80) && --n);
 8002722:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002726:	2b00      	cmp	r3, #0
 8002728:	da05      	bge.n	8002736 <SD_SendCmd+0x9a>
 800272a:	7bbb      	ldrb	r3, [r7, #14]
 800272c:	3b01      	subs	r3, #1
 800272e:	73bb      	strb	r3, [r7, #14]
 8002730:	7bbb      	ldrb	r3, [r7, #14]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f1      	bne.n	800271a <SD_SendCmd+0x7e>

    return res;
 8002736:	7b7b      	ldrb	r3, [r7, #13]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <microSD_create>:
    f_puts(NEW_LINE, &log_file);
    f_close(&log_file);
}

MicroSD * microSD_create(UART_HandleTypeDef * huart, const char * filename,
                         const char * directory) {
 8002740:	b580      	push	{r7, lr}
 8002742:	b098      	sub	sp, #96	; 0x60
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
    MicroSD * sd = (MicroSD *)malloc(sizeof(MicroSD));
 800274c:	f240 4074 	movw	r0, #1140	; 0x474
 8002750:	f009 fd82 	bl	800c258 <malloc>
 8002754:	4603      	mov	r3, r0
 8002756:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (sd == NULL) {
 8002758:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800275a:	2b00      	cmp	r3, #0
 800275c:	d104      	bne.n	8002768 <microSD_create+0x28>
        uart_print("❌ Error: no se pudo asignar memoria para MicroSD.\n");
 800275e:	4838      	ldr	r0, [pc, #224]	; (8002840 <microSD_create+0x100>)
 8002760:	f001 fbc4 	bl	8003eec <uart_print>
        return NULL;
 8002764:	2300      	movs	r3, #0
 8002766:	e067      	b.n	8002838 <microSD_create+0xf8>
    }

    sd->huart = huart;
 8002768:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	601a      	str	r2, [r3, #0]
    SAFE_STRCPY(sd->filename, filename, sizeof(sd->filename));
 800276e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002770:	3304      	adds	r3, #4
 8002772:	227f      	movs	r2, #127	; 0x7f
 8002774:	68b9      	ldr	r1, [r7, #8]
 8002776:	4618      	mov	r0, r3
 8002778:	f00a fe36 	bl	800d3e8 <strncpy>
 800277c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
    SAFE_STRCPY(sd->directory, directory, sizeof(sd->directory));
 8002784:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002786:	3384      	adds	r3, #132	; 0x84
 8002788:	227f      	movs	r2, #127	; 0x7f
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	4618      	mov	r0, r3
 800278e:	f00a fe2b 	bl	800d3e8 <strncpy>
 8002792:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103

    // Verificar si el directorio es válido
    const char * mount_path = (directory == NULL || strlen(directory) == 0) ? "" : sd->directory;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d006      	beq.n	80027ae <microSD_create+0x6e>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d002      	beq.n	80027ae <microSD_create+0x6e>
 80027a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027aa:	3384      	adds	r3, #132	; 0x84
 80027ac:	e000      	b.n	80027b0 <microSD_create+0x70>
 80027ae:	4b25      	ldr	r3, [pc, #148]	; (8002844 <microSD_create+0x104>)
 80027b0:	65bb      	str	r3, [r7, #88]	; 0x58

    sd->fresult = f_mount(&sd->fs, mount_path, 1);
 80027b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027b4:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80027b8:	2201      	movs	r2, #1
 80027ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80027bc:	4618      	mov	r0, r3
 80027be:	f008 fe2d 	bl	800b41c <f_mount>
 80027c2:	4603      	mov	r3, r0
 80027c4:	461a      	mov	r2, r3
 80027c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027c8:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
    if (sd->fresult == FR_OK) {
 80027cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ce:	f893 3368 	ldrb.w	r3, [r3, #872]	; 0x368
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d11d      	bne.n	8002812 <microSD_create+0xd2>
        uart_print("✅ SD montada correctamente.\n");
 80027d6:	481c      	ldr	r0, [pc, #112]	; (8002848 <microSD_create+0x108>)
 80027d8:	f001 fb88 	bl	8003eec <uart_print>

        // ⚡ Acelera SPI después del montaje exitoso
        HAL_SPI_DeInit(&hspi1);
 80027dc:	481b      	ldr	r0, [pc, #108]	; (800284c <microSD_create+0x10c>)
 80027de:	f005 fb87 	bl	8007ef0 <HAL_SPI_DeInit>
        hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80027e2:	4b1a      	ldr	r3, [pc, #104]	; (800284c <microSD_create+0x10c>)
 80027e4:	2210      	movs	r2, #16
 80027e6:	61da      	str	r2, [r3, #28]
        HAL_SPI_Init(&hspi1);
 80027e8:	4818      	ldr	r0, [pc, #96]	; (800284c <microSD_create+0x10c>)
 80027ea:	f005 faf8 	bl	8007dde <HAL_SPI_Init>
        uart_print("⚡ SPI acelerado a prescaler 8.\n");
 80027ee:	4818      	ldr	r0, [pc, #96]	; (8002850 <microSD_create+0x110>)
 80027f0:	f001 fb7c 	bl	8003eec <uart_print>
        free(sd);
        return NULL;
    }

    // Señal de éxito por UART
    SEND_UART(sd, MOUNT_SUCCESS);
 80027f4:	231f      	movs	r3, #31
 80027f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80027fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027fc:	6818      	ldr	r0, [r3, #0]
 80027fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002802:	b29a      	uxth	r2, r3
 8002804:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002808:	4912      	ldr	r1, [pc, #72]	; (8002854 <microSD_create+0x114>)
 800280a:	f005 ff9c 	bl	8008746 <HAL_UART_Transmit>

    return sd;
 800280e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002810:	e012      	b.n	8002838 <microSD_create+0xf8>
        sprintf(msg, "❌ Error al montar la SD (f_mount): %d\n", sd->fresult);
 8002812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002814:	f893 3368 	ldrb.w	r3, [r3, #872]	; 0x368
 8002818:	461a      	mov	r2, r3
 800281a:	f107 0314 	add.w	r3, r7, #20
 800281e:	490e      	ldr	r1, [pc, #56]	; (8002858 <microSD_create+0x118>)
 8002820:	4618      	mov	r0, r3
 8002822:	f00a fd59 	bl	800d2d8 <siprintf>
        uart_print(msg);
 8002826:	f107 0314 	add.w	r3, r7, #20
 800282a:	4618      	mov	r0, r3
 800282c:	f001 fb5e 	bl	8003eec <uart_print>
        free(sd);
 8002830:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002832:	f009 fd19 	bl	800c268 <free>
        return NULL;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3760      	adds	r7, #96	; 0x60
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	0801178c 	.word	0x0801178c
 8002844:	080117c4 	.word	0x080117c4
 8002848:	080117c8 	.word	0x080117c8
 800284c:	200021f4 	.word	0x200021f4
 8002850:	080117e8 	.word	0x080117e8
 8002854:	08011838 	.word	0x08011838
 8002858:	0801180c 	.word	0x0801180c

0800285c <microSD_setDirectory>:
        }
        free(sd);
    }
}

void microSD_setDirectory(MicroSD * sd, const char * directory) {
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
    SAFE_STRCPY(sd->directory, directory, sizeof(sd->directory));
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	3384      	adds	r3, #132	; 0x84
 800286a:	227f      	movs	r2, #127	; 0x7f
 800286c:	6839      	ldr	r1, [r7, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f00a fdba 	bl	800d3e8 <strncpy>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
}
 800287c:	bf00      	nop
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <microSD_appendLineAbsolute>:
 * @param filepath Ruta absoluta del archivo (ej. "/2025/05/24/RAW_20250524.CSV")
 * @param line Línea de texto a escribir (debe terminar en '\n' si se requiere)
 * @return true si se escribió correctamente, false si hubo error
 */

bool microSD_appendLineAbsolute(const char * filepath, const char * line) {
 8002884:	b580      	push	{r7, lr}
 8002886:	b092      	sub	sp, #72	; 0x48
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
    FIL file;
    FRESULT res;
    UINT bw;

    res = f_open(&file, filepath, FA_OPEN_ALWAYS | FA_WRITE);
 800288e:	f107 0310 	add.w	r3, r7, #16
 8002892:	2212      	movs	r2, #18
 8002894:	6879      	ldr	r1, [r7, #4]
 8002896:	4618      	mov	r0, r3
 8002898:	f008 fe06 	bl	800b4a8 <f_open>
 800289c:	4603      	mov	r3, r0
 800289e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (res != FR_OK) {
 80028a2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d006      	beq.n	80028b8 <microSD_appendLineAbsolute+0x34>
        print_fatfs_error(res);
 80028aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff f83a 	bl	8001928 <print_fatfs_error>
        return false;
 80028b4:	2300      	movs	r3, #0
 80028b6:	e065      	b.n	8002984 <microSD_appendLineAbsolute+0x100>
    }

    // Verificar si el archivo está vacío para escribir encabezado
    if (f_size(&file) == 0) {
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d124      	bne.n	8002908 <microSD_appendLineAbsolute+0x84>
        const char * header = "timestamp,sensor_id,pm1.0,pm2.5,pm4.0,pm10,temp,hum\n";
 80028be:	4b33      	ldr	r3, [pc, #204]	; (800298c <microSD_appendLineAbsolute+0x108>)
 80028c0:	643b      	str	r3, [r7, #64]	; 0x40
        res = f_write(&file, header, strlen(header), &bw);
 80028c2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80028c4:	f7fd fc94 	bl	80001f0 <strlen>
 80028c8:	4602      	mov	r2, r0
 80028ca:	f107 030c 	add.w	r3, r7, #12
 80028ce:	f107 0010 	add.w	r0, r7, #16
 80028d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80028d4:	f008 ff8d 	bl	800b7f2 <f_write>
 80028d8:	4603      	mov	r3, r0
 80028da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (res != FR_OK || bw != strlen(header)) {
 80028de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d106      	bne.n	80028f4 <microSD_appendLineAbsolute+0x70>
 80028e6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80028e8:	f7fd fc82 	bl	80001f0 <strlen>
 80028ec:	4602      	mov	r2, r0
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d009      	beq.n	8002908 <microSD_appendLineAbsolute+0x84>
            f_close(&file);
 80028f4:	f107 0310 	add.w	r3, r7, #16
 80028f8:	4618      	mov	r0, r3
 80028fa:	f009 f946 	bl	800bb8a <f_close>
            uart_print("Error al escribir encabezado CSV\r\n");
 80028fe:	4824      	ldr	r0, [pc, #144]	; (8002990 <microSD_appendLineAbsolute+0x10c>)
 8002900:	f001 faf4 	bl	8003eec <uart_print>
            return false;
 8002904:	2300      	movs	r3, #0
 8002906:	e03d      	b.n	8002984 <microSD_appendLineAbsolute+0x100>
        }
    }

    // Ir al final del archivo para agregar línea
    res = f_lseek(&file, f_size(&file));
 8002908:	69fa      	ldr	r2, [r7, #28]
 800290a:	f107 0310 	add.w	r3, r7, #16
 800290e:	4611      	mov	r1, r2
 8002910:	4618      	mov	r0, r3
 8002912:	f009 f964 	bl	800bbde <f_lseek>
 8002916:	4603      	mov	r3, r0
 8002918:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (res != FR_OK) {
 800291c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00b      	beq.n	800293c <microSD_appendLineAbsolute+0xb8>
        f_close(&file);
 8002924:	f107 0310 	add.w	r3, r7, #16
 8002928:	4618      	mov	r0, r3
 800292a:	f009 f92e 	bl	800bb8a <f_close>
        print_fatfs_error(res);
 800292e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002932:	4618      	mov	r0, r3
 8002934:	f7fe fff8 	bl	8001928 <print_fatfs_error>
        return false;
 8002938:	2300      	movs	r3, #0
 800293a:	e023      	b.n	8002984 <microSD_appendLineAbsolute+0x100>
    }

    res = f_write(&file, line, strlen(line), &bw);
 800293c:	6838      	ldr	r0, [r7, #0]
 800293e:	f7fd fc57 	bl	80001f0 <strlen>
 8002942:	4602      	mov	r2, r0
 8002944:	f107 030c 	add.w	r3, r7, #12
 8002948:	f107 0010 	add.w	r0, r7, #16
 800294c:	6839      	ldr	r1, [r7, #0]
 800294e:	f008 ff50 	bl	800b7f2 <f_write>
 8002952:	4603      	mov	r3, r0
 8002954:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    f_close(&file);
 8002958:	f107 0310 	add.w	r3, r7, #16
 800295c:	4618      	mov	r0, r3
 800295e:	f009 f914 	bl	800bb8a <f_close>

    return (res == FR_OK && bw == strlen(line));
 8002962:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002966:	2b00      	cmp	r3, #0
 8002968:	d108      	bne.n	800297c <microSD_appendLineAbsolute+0xf8>
 800296a:	6838      	ldr	r0, [r7, #0]
 800296c:	f7fd fc40 	bl	80001f0 <strlen>
 8002970:	4602      	mov	r2, r0
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	429a      	cmp	r2, r3
 8002976:	d101      	bne.n	800297c <microSD_appendLineAbsolute+0xf8>
 8002978:	2301      	movs	r3, #1
 800297a:	e000      	b.n	800297e <microSD_appendLineAbsolute+0xfa>
 800297c:	2300      	movs	r3, #0
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	b2db      	uxtb	r3, r3
}
 8002984:	4618      	mov	r0, r3
 8002986:	3748      	adds	r7, #72	; 0x48
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	08011a70 	.word	0x08011a70
 8002990:	08011aa8 	.word	0x08011aa8

08002994 <mp_sensors_info_init>:

/* === Private function implementation ========================================================= */

/* === Public function implementation ========================================================== */

void mp_sensors_info_init(void) {
 8002994:	b580      	push	{r7, lr}
 8002996:	b08a      	sub	sp, #40	; 0x28
 8002998:	af00      	add	r7, sp, #0
    for (int i = 0; i < sensores_disponibles; ++i) {
 800299a:	2300      	movs	r3, #0
 800299c:	627b      	str	r3, [r7, #36]	; 0x24
 800299e:	e082      	b.n	8002aa6 <mp_sensors_info_init+0x112>
        SPS30 * sensor = &sensores_sps30[i].sensor;
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	2258      	movs	r2, #88	; 0x58
 80029a4:	fb02 f303 	mul.w	r3, r2, r3
 80029a8:	4a44      	ldr	r2, [pc, #272]	; (8002abc <mp_sensors_info_init+0x128>)
 80029aa:	4413      	add	r3, r2
 80029ac:	623b      	str	r3, [r7, #32]
        char serial[SENSOR_SERIAL_MAX_LEN] = {0};
 80029ae:	2300      	movs	r3, #0
 80029b0:	603b      	str	r3, [r7, #0]
 80029b2:	1d3b      	adds	r3, r7, #4
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	60da      	str	r2, [r3, #12]
 80029be:	611a      	str	r2, [r3, #16]
 80029c0:	615a      	str	r2, [r3, #20]
 80029c2:	619a      	str	r2, [r3, #24]

        // Obtener serial dinámicamente
        if (sensor->serial_number(sensor, serial)) {
 80029c4:	6a3b      	ldr	r3, [r7, #32]
 80029c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c8:	463a      	mov	r2, r7
 80029ca:	4611      	mov	r1, r2
 80029cc:	6a38      	ldr	r0, [r7, #32]
 80029ce:	4798      	blx	r3
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d026      	beq.n	8002a24 <mp_sensors_info_init+0x90>
            // Guardar serial en metadatos
            strncpy(sensor_metadata[i].serial_number, serial, SENSOR_SERIAL_MAX_LEN - 1);
 80029d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d8:	4613      	mov	r3, r2
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	4413      	add	r3, r2
 80029de:	015b      	lsls	r3, r3, #5
 80029e0:	4413      	add	r3, r2
 80029e2:	4a37      	ldr	r2, [pc, #220]	; (8002ac0 <mp_sensors_info_init+0x12c>)
 80029e4:	4413      	add	r3, r2
 80029e6:	4639      	mov	r1, r7
 80029e8:	221f      	movs	r2, #31
 80029ea:	4618      	mov	r0, r3
 80029ec:	f00a fcfc 	bl	800d3e8 <strncpy>
            sensor_metadata[i].serial_number[SENSOR_SERIAL_MAX_LEN - 1] = '\0';
 80029f0:	4933      	ldr	r1, [pc, #204]	; (8002ac0 <mp_sensors_info_init+0x12c>)
 80029f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f4:	4613      	mov	r3, r2
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	4413      	add	r3, r2
 80029fa:	015b      	lsls	r3, r3, #5
 80029fc:	4413      	add	r3, r2
 80029fe:	440b      	add	r3, r1
 8002a00:	331f      	adds	r3, #31
 8002a02:	2200      	movs	r2, #0
 8002a04:	701a      	strb	r2, [r3, #0]

            // Mensaje UART de registro
            uart_print("Sensor ID: %d -> Serial: %s\n", sensores_sps30[i].id, serial);
 8002a06:	4a2d      	ldr	r2, [pc, #180]	; (8002abc <mp_sensors_info_init+0x128>)
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	2158      	movs	r1, #88	; 0x58
 8002a0c:	fb01 f303 	mul.w	r3, r1, r3
 8002a10:	4413      	add	r3, r2
 8002a12:	3350      	adds	r3, #80	; 0x50
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	4619      	mov	r1, r3
 8002a18:	463b      	mov	r3, r7
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	4829      	ldr	r0, [pc, #164]	; (8002ac4 <mp_sensors_info_init+0x130>)
 8002a1e:	f001 fa65 	bl	8003eec <uart_print>
 8002a22:	e023      	b.n	8002a6c <mp_sensors_info_init+0xd8>
        } else {
            strncpy(sensor_metadata[i].serial_number, "UNKNOWN", SENSOR_SERIAL_MAX_LEN - 1);
 8002a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a26:	4613      	mov	r3, r2
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	4413      	add	r3, r2
 8002a2c:	015b      	lsls	r3, r3, #5
 8002a2e:	4413      	add	r3, r2
 8002a30:	4a23      	ldr	r2, [pc, #140]	; (8002ac0 <mp_sensors_info_init+0x12c>)
 8002a32:	4413      	add	r3, r2
 8002a34:	221f      	movs	r2, #31
 8002a36:	4924      	ldr	r1, [pc, #144]	; (8002ac8 <mp_sensors_info_init+0x134>)
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f00a fcd5 	bl	800d3e8 <strncpy>
            sensor_metadata[i].serial_number[SENSOR_SERIAL_MAX_LEN - 1] = '\0';
 8002a3e:	4920      	ldr	r1, [pc, #128]	; (8002ac0 <mp_sensors_info_init+0x12c>)
 8002a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a42:	4613      	mov	r3, r2
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	4413      	add	r3, r2
 8002a48:	015b      	lsls	r3, r3, #5
 8002a4a:	4413      	add	r3, r2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	331f      	adds	r3, #31
 8002a50:	2200      	movs	r2, #0
 8002a52:	701a      	strb	r2, [r3, #0]
            uart_print("[WARN] Sensor ID: %d -> No se pudo obtener el número de serie\n", sensores_sps30[i].id);
 8002a54:	4a19      	ldr	r2, [pc, #100]	; (8002abc <mp_sensors_info_init+0x128>)
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	2158      	movs	r1, #88	; 0x58
 8002a5a:	fb01 f303 	mul.w	r3, r1, r3
 8002a5e:	4413      	add	r3, r2
 8002a60:	3350      	adds	r3, #80	; 0x50
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	4619      	mov	r1, r3
 8002a66:	4819      	ldr	r0, [pc, #100]	; (8002acc <mp_sensors_info_init+0x138>)
 8002a68:	f001 fa40 	bl	8003eec <uart_print>
        }

        // Nombre de ubicación fijo (puede adaptarse por sensor si es necesario)
        strncpy(sensor_metadata[i].location_name, LOCATION_NAME,
 8002a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a6e:	4613      	mov	r3, r2
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	4413      	add	r3, r2
 8002a74:	015b      	lsls	r3, r3, #5
 8002a76:	4413      	add	r3, r2
 8002a78:	3320      	adds	r3, #32
 8002a7a:	4a11      	ldr	r2, [pc, #68]	; (8002ac0 <mp_sensors_info_init+0x12c>)
 8002a7c:	4413      	add	r3, r2
 8002a7e:	3301      	adds	r3, #1
 8002a80:	223f      	movs	r2, #63	; 0x3f
 8002a82:	4913      	ldr	r1, [pc, #76]	; (8002ad0 <mp_sensors_info_init+0x13c>)
 8002a84:	4618      	mov	r0, r3
 8002a86:	f00a fcaf 	bl	800d3e8 <strncpy>
                sizeof(sensor_metadata[i].location_name) - 1);
        sensor_metadata[i].location_name[sizeof(sensor_metadata[i].location_name) - 1] = '\0';
 8002a8a:	490d      	ldr	r1, [pc, #52]	; (8002ac0 <mp_sensors_info_init+0x12c>)
 8002a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a8e:	4613      	mov	r3, r2
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	4413      	add	r3, r2
 8002a94:	015b      	lsls	r3, r3, #5
 8002a96:	4413      	add	r3, r2
 8002a98:	440b      	add	r3, r1
 8002a9a:	3360      	adds	r3, #96	; 0x60
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < sensores_disponibles; ++i) {
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa6:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <mp_sensors_info_init+0x140>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aac:	429a      	cmp	r2, r3
 8002aae:	f6ff af77 	blt.w	80029a0 <mp_sensors_info_init+0xc>
    }
}
 8002ab2:	bf00      	nop
 8002ab4:	bf00      	nop
 8002ab6:	3728      	adds	r7, #40	; 0x28
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	2000206c 	.word	0x2000206c
 8002ac0:	20000034 	.word	0x20000034
 8002ac4:	08011acc 	.word	0x08011acc
 8002ac8:	08011aec 	.word	0x08011aec
 8002acc:	08011af4 	.word	0x08011af4
 8002ad0:	08011b34 	.word	0x08011b34
 8002ad4:	20002174 	.word	0x20002174

08002ad8 <proceso_observador_3PM_2TH>:
    uart_print("%s", error_msg);
    return false;
}

bool proceso_observador_3PM_2TH(SPS30 * sensor, uint8_t sensor_id, const char * datetime_str,
                                float temp_amb, float hum_amb, float temp_cam, float hum_cam) {
 8002ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002adc:	b0fd      	sub	sp, #500	; 0x1f4
 8002ade:	af0a      	add	r7, sp, #40	; 0x28
 8002ae0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002ae4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002ae8:	6018      	str	r0, [r3, #0]
 8002aea:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002aee:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002af8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002afc:	ed83 0a00 	vstr	s0, [r3]
 8002b00:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002b04:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002b08:	edc3 0a00 	vstr	s1, [r3]
 8002b0c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002b10:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002b14:	ed83 1a00 	vstr	s2, [r3]
 8002b18:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002b1c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002b20:	edc3 1a00 	vstr	s3, [r3]
 8002b24:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002b28:	f2a3 13ad 	subw	r3, r3, #429	; 0x1ad
 8002b2c:	460a      	mov	r2, r1
 8002b2e:	701a      	strb	r2, [r3, #0]
    int reintentos = NUM_REINT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4

    while (reintentos--) {
 8002b36:	e14d      	b.n	8002dd4 <proceso_observador_3PM_2TH+0x2fc>
        sensor->start_measurement(sensor);
 8002b38:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002b3c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b44:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8002b48:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 8002b4c:	6810      	ldr	r0, [r2, #0]
 8002b4e:	4798      	blx	r3
        HAL_Delay(HAL_DELAY_SIGUIENTE_MEDICION);
 8002b50:	f241 3088 	movw	r0, #5000	; 0x1388
 8002b54:	f002 fa34 	bl	8004fc0 <HAL_Delay>

        ConcentracionesPM pm = sensor->get_concentrations(sensor);
 8002b58:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002b5c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b64:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8002b68:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 8002b6c:	6810      	ldr	r0, [r2, #0]
 8002b6e:	4798      	blx	r3
 8002b70:	eeb0 6a40 	vmov.f32	s12, s0
 8002b74:	eef0 6a60 	vmov.f32	s13, s1
 8002b78:	eeb0 7a41 	vmov.f32	s14, s2
 8002b7c:	eef0 7a61 	vmov.f32	s15, s3
 8002b80:	ed87 6a55 	vstr	s12, [r7, #340]	; 0x154
 8002b84:	edc7 6a56 	vstr	s13, [r7, #344]	; 0x158
 8002b88:	ed87 7a57 	vstr	s14, [r7, #348]	; 0x15c
 8002b8c:	edc7 7a58 	vstr	s15, [r7, #352]	; 0x160
        sensor->stop_measurement(sensor);
 8002b90:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002b94:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9c:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8002ba0:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 8002ba4:	6810      	ldr	r0, [r2, #0]
 8002ba6:	4798      	blx	r3

        if ((pm.pm1_0 > CONC_MIN_PM && pm.pm1_0 < CONC_MAX_PM) ||
 8002ba8:	edd7 7a55 	vldr	s15, [r7, #340]	; 0x154
 8002bac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb4:	dd08      	ble.n	8002bc8 <proceso_observador_3PM_2TH+0xf0>
 8002bb6:	edd7 7a55 	vldr	s15, [r7, #340]	; 0x154
 8002bba:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8002e20 <proceso_observador_3PM_2TH+0x348>
 8002bbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc6:	d431      	bmi.n	8002c2c <proceso_observador_3PM_2TH+0x154>
            (pm.pm2_5 > CONC_MIN_PM && pm.pm2_5 < CONC_MAX_PM) ||
 8002bc8:	edd7 7a56 	vldr	s15, [r7, #344]	; 0x158
        if ((pm.pm1_0 > CONC_MIN_PM && pm.pm1_0 < CONC_MAX_PM) ||
 8002bcc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd4:	dd08      	ble.n	8002be8 <proceso_observador_3PM_2TH+0x110>
            (pm.pm2_5 > CONC_MIN_PM && pm.pm2_5 < CONC_MAX_PM) ||
 8002bd6:	edd7 7a56 	vldr	s15, [r7, #344]	; 0x158
 8002bda:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8002e20 <proceso_observador_3PM_2TH+0x348>
 8002bde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be6:	d421      	bmi.n	8002c2c <proceso_observador_3PM_2TH+0x154>
            (pm.pm4_0 > CONC_MIN_PM && pm.pm4_0 < CONC_MAX_PM) ||
 8002be8:	edd7 7a57 	vldr	s15, [r7, #348]	; 0x15c
            (pm.pm2_5 > CONC_MIN_PM && pm.pm2_5 < CONC_MAX_PM) ||
 8002bec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf4:	dd08      	ble.n	8002c08 <proceso_observador_3PM_2TH+0x130>
            (pm.pm4_0 > CONC_MIN_PM && pm.pm4_0 < CONC_MAX_PM) ||
 8002bf6:	edd7 7a57 	vldr	s15, [r7, #348]	; 0x15c
 8002bfa:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8002e20 <proceso_observador_3PM_2TH+0x348>
 8002bfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c06:	d411      	bmi.n	8002c2c <proceso_observador_3PM_2TH+0x154>
            (pm.pm10 > CONC_MIN_PM && pm.pm10 < CONC_MAX_PM)) {
 8002c08:	edd7 7a58 	vldr	s15, [r7, #352]	; 0x160
            (pm.pm4_0 > CONC_MIN_PM && pm.pm4_0 < CONC_MAX_PM) ||
 8002c0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c14:	f340 80da 	ble.w	8002dcc <proceso_observador_3PM_2TH+0x2f4>
            (pm.pm10 > CONC_MIN_PM && pm.pm10 < CONC_MAX_PM)) {
 8002c18:	edd7 7a58 	vldr	s15, [r7, #352]	; 0x160
 8002c1c:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8002e20 <proceso_observador_3PM_2TH+0x348>
 8002c20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c28:	f140 80d0 	bpl.w	8002dcc <proceso_observador_3PM_2TH+0x2f4>

            ds3231_time_t dt;
            if (!ds3231_get_datetime(&dt)) {
 8002c2c:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8002c30:	4618      	mov	r0, r3
 8002c32:	f000 fad3 	bl	80031dc <ds3231_get_datetime>
 8002c36:	4603      	mov	r3, r0
 8002c38:	f083 0301 	eor.w	r3, r3, #1
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d004      	beq.n	8002c4c <proceso_observador_3PM_2TH+0x174>
                uart_print("⚠️ Error leyendo hora del RTC\r\n");
 8002c42:	4878      	ldr	r0, [pc, #480]	; (8002e24 <proceso_observador_3PM_2TH+0x34c>)
 8002c44:	f001 f952 	bl	8003eec <uart_print>
                return false;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	e0e3      	b.n	8002e14 <proceso_observador_3PM_2TH+0x33c>
            }

            // Formatear mensaje de depuración
            char buffer[BUFFER_SIZE_MSG_PM_FORMAT];
            snprintf(buffer, sizeof(buffer), MSG_PM_FORMAT_WITH_TIME, datetime_str, sensor_id,
 8002c4c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002c50:	f2a3 13ad 	subw	r3, r3, #429	; 0x1ad
 8002c54:	781e      	ldrb	r6, [r3, #0]
                     pm.pm1_0, pm.pm2_5, pm.pm4_0, pm.pm10);
 8002c56:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
            snprintf(buffer, sizeof(buffer), MSG_PM_FORMAT_WITH_TIME, datetime_str, sensor_id,
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fd fc84 	bl	8000568 <__aeabi_f2d>
 8002c60:	4604      	mov	r4, r0
 8002c62:	460d      	mov	r5, r1
                     pm.pm1_0, pm.pm2_5, pm.pm4_0, pm.pm10);
 8002c64:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
            snprintf(buffer, sizeof(buffer), MSG_PM_FORMAT_WITH_TIME, datetime_str, sensor_id,
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fd fc7d 	bl	8000568 <__aeabi_f2d>
 8002c6e:	4680      	mov	r8, r0
 8002c70:	4689      	mov	r9, r1
                     pm.pm1_0, pm.pm2_5, pm.pm4_0, pm.pm10);
 8002c72:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
            snprintf(buffer, sizeof(buffer), MSG_PM_FORMAT_WITH_TIME, datetime_str, sensor_id,
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fd fc76 	bl	8000568 <__aeabi_f2d>
 8002c7c:	4682      	mov	sl, r0
 8002c7e:	468b      	mov	fp, r1
                     pm.pm1_0, pm.pm2_5, pm.pm4_0, pm.pm10);
 8002c80:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
            snprintf(buffer, sizeof(buffer), MSG_PM_FORMAT_WITH_TIME, datetime_str, sensor_id,
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7fd fc6f 	bl	8000568 <__aeabi_f2d>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	f507 71e4 	add.w	r1, r7, #456	; 0x1c8
 8002c92:	f5a1 71da 	sub.w	r1, r1, #436	; 0x1b4
 8002c96:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8002c9a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002c9e:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8002ca2:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8002ca6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002caa:	9600      	str	r6, [sp, #0]
 8002cac:	680b      	ldr	r3, [r1, #0]
 8002cae:	4a5e      	ldr	r2, [pc, #376]	; (8002e28 <proceso_observador_3PM_2TH+0x350>)
 8002cb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cb4:	f00a fadc 	bl	800d270 <sniprintf>
            uart_print("%s", buffer);
 8002cb8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	485b      	ldr	r0, [pc, #364]	; (8002e2c <proceso_observador_3PM_2TH+0x354>)
 8002cc0:	f001 f914 	bl	8003eec <uart_print>

            // Cargar estructura
            ParticulateData data = {.sensor_id = sensor_id,
 8002cc4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002cc8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002ccc:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8002cd0:	f2a2 12ad 	subw	r2, r2, #429	; 0x1ad
 8002cd4:	7812      	ldrb	r2, [r2, #0]
 8002cd6:	701a      	strb	r2, [r3, #0]
                                    .pm1_0 = pm.pm1_0,
 8002cd8:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
            ParticulateData data = {.sensor_id = sensor_id,
 8002cdc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002ce0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002ce4:	605a      	str	r2, [r3, #4]
                                    .pm2_5 = pm.pm2_5,
 8002ce6:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
            ParticulateData data = {.sensor_id = sensor_id,
 8002cea:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002cee:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002cf2:	609a      	str	r2, [r3, #8]
                                    .pm4_0 = pm.pm4_0,
 8002cf4:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
            ParticulateData data = {.sensor_id = sensor_id,
 8002cf8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002cfc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002d00:	60da      	str	r2, [r3, #12]
                                    .pm10 = pm.pm10,
 8002d02:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
            ParticulateData data = {.sensor_id = sensor_id,
 8002d06:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002d0a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002d0e:	611a      	str	r2, [r3, #16]
 8002d10:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002d14:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002d18:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8002d1c:	f5a2 72dc 	sub.w	r2, r2, #440	; 0x1b8
 8002d20:	6812      	ldr	r2, [r2, #0]
 8002d22:	615a      	str	r2, [r3, #20]
 8002d24:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002d28:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002d2c:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8002d30:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 8002d34:	6812      	ldr	r2, [r2, #0]
 8002d36:	619a      	str	r2, [r3, #24]
 8002d38:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002d3c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002d40:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8002d44:	f5a2 72e0 	sub.w	r2, r2, #448	; 0x1c0
 8002d48:	6812      	ldr	r2, [r2, #0]
 8002d4a:	61da      	str	r2, [r3, #28]
 8002d4c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002d50:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002d54:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8002d58:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 8002d5c:	6812      	ldr	r2, [r2, #0]
 8002d5e:	621a      	str	r2, [r3, #32]
                                    .temp_amb = temp_amb,
                                    .hum_amb = hum_amb,
                                    .temp_cam = temp_cam,
                                    .hum_cam = hum_cam,
                                    .year = dt.year,
 8002d60:	f8b7 2152 	ldrh.w	r2, [r7, #338]	; 0x152
            ParticulateData data = {.sensor_id = sensor_id,
 8002d64:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002d68:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002d6c:	849a      	strh	r2, [r3, #36]	; 0x24
                                    .month = dt.month,
 8002d6e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
            ParticulateData data = {.sensor_id = sensor_id,
 8002d72:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002d76:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002d7a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
                                    .day = dt.day,
 8002d7e:	f897 214f 	ldrb.w	r2, [r7, #335]	; 0x14f
            ParticulateData data = {.sensor_id = sensor_id,
 8002d82:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002d86:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002d8a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
                                    .hour = dt.hour,
 8002d8e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
            ParticulateData data = {.sensor_id = sensor_id,
 8002d92:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002d96:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002d9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                    .min = dt.min,
 8002d9e:	f897 214d 	ldrb.w	r2, [r7, #333]	; 0x14d
            ParticulateData data = {.sensor_id = sensor_id,
 8002da2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002da6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002daa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                    .sec = dt.sec};
 8002dae:	f897 214e 	ldrb.w	r2, [r7, #334]	; 0x14e
            ParticulateData data = {.sensor_id = sensor_id,
 8002db2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002db6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002dba:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

            data_logger_store_raw(&data);
 8002dbe:	f107 0320 	add.w	r3, r7, #32
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fe fe56 	bl	8001a74 <data_logger_store_raw>
            return true;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e023      	b.n	8002e14 <proceso_observador_3PM_2TH+0x33c>
        }

        uart_print("%s", MSG_ERROR_REINT);
 8002dcc:	4918      	ldr	r1, [pc, #96]	; (8002e30 <proceso_observador_3PM_2TH+0x358>)
 8002dce:	4817      	ldr	r0, [pc, #92]	; (8002e2c <proceso_observador_3PM_2TH+0x354>)
 8002dd0:	f001 f88c 	bl	8003eec <uart_print>
    while (reintentos--) {
 8002dd4:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002dd8:	1e5a      	subs	r2, r3, #1
 8002dda:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f47f aeaa 	bne.w	8002b38 <proceso_observador_3PM_2TH+0x60>
    }

    char error_msg[BUFFER_SIZE_MSG_ERROR_FALLO];
    snprintf(error_msg, sizeof(error_msg), MSG_ERROR_FALLO, datetime_str, sensor_id);
 8002de4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002de8:	f2a3 13ad 	subw	r3, r3, #429	; 0x1ad
 8002dec:	781a      	ldrb	r2, [r3, #0]
 8002dee:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002df2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002df6:	f507 70b2 	add.w	r0, r7, #356	; 0x164
 8002dfa:	9200      	str	r2, [sp, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a0d      	ldr	r2, [pc, #52]	; (8002e34 <proceso_observador_3PM_2TH+0x35c>)
 8002e00:	2160      	movs	r1, #96	; 0x60
 8002e02:	f00a fa35 	bl	800d270 <sniprintf>
    uart_print("%s", error_msg);
 8002e06:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4807      	ldr	r0, [pc, #28]	; (8002e2c <proceso_observador_3PM_2TH+0x354>)
 8002e0e:	f001 f86d 	bl	8003eec <uart_print>
    return false;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	f507 77e6 	add.w	r7, r7, #460	; 0x1cc
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e20:	447a0000 	.word	0x447a0000
 8002e24:	08011c44 	.word	0x08011c44
 8002e28:	08011b70 	.word	0x08011b70
 8002e2c:	08011bc4 	.word	0x08011bc4
 8002e30:	08011bc8 	.word	0x08011bc8
 8002e34:	08011c00 	.word	0x08011c00

08002e38 <DS3231_Init>:
#include <string.h>
#include <stdlib.h>

static I2C_HandleTypeDef * _ds3231_i2c = NULL;

void DS3231_Init(I2C_HandleTypeDef * hi2c) {
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
    _ds3231_i2c = hi2c;
 8002e40:	4a04      	ldr	r2, [pc, #16]	; (8002e54 <DS3231_Init+0x1c>)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6013      	str	r3, [r2, #0]
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	20002058 	.word	0x20002058

08002e58 <DS3231_GetRegByte>:

bool DS3231_IsConnected(void) {
    return HAL_I2C_IsDeviceReady(_ds3231_i2c, DS3231_I2C_ADDR << 1, 3, DS3231_TIMEOUT) == HAL_OK;
}

uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af02      	add	r7, sp, #8
 8002e5e:	4603      	mov	r3, r0
 8002e60:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    HAL_I2C_Master_Transmit(_ds3231_i2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 8002e62:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <DS3231_GetRegByte+0x3c>)
 8002e64:	6818      	ldr	r0, [r3, #0]
 8002e66:	1dfa      	adds	r2, r7, #7
 8002e68:	2364      	movs	r3, #100	; 0x64
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	21d0      	movs	r1, #208	; 0xd0
 8002e70:	f002 fdde 	bl	8005a30 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(_ds3231_i2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 8002e74:	4b07      	ldr	r3, [pc, #28]	; (8002e94 <DS3231_GetRegByte+0x3c>)
 8002e76:	6818      	ldr	r0, [r3, #0]
 8002e78:	f107 020f 	add.w	r2, r7, #15
 8002e7c:	2364      	movs	r3, #100	; 0x64
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	2301      	movs	r3, #1
 8002e82:	21d0      	movs	r1, #208	; 0xd0
 8002e84:	f002 fed2 	bl	8005c2c <HAL_I2C_Master_Receive>
    return val;
 8002e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	20002058 	.word	0x20002058

08002e98 <DS3231_DecodeBCD>:
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
    uint8_t data[2] = {regAddr, val};
    HAL_I2C_Master_Transmit(_ds3231_i2c, DS3231_I2C_ADDR << 1, data, 2, DS3231_TIMEOUT);
}

uint8_t DS3231_DecodeBCD(uint8_t bcd) {
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	71fb      	strb	r3, [r7, #7]
    return ((bcd >> 4) * 10) + (bcd & 0x0F);
 8002ea2:	79fb      	ldrb	r3, [r7, #7]
 8002ea4:	091b      	lsrs	r3, r3, #4
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	0092      	lsls	r2, r2, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	79fb      	ldrb	r3, [r7, #7]
 8002eb4:	f003 030f 	and.w	r3, r3, #15
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	4413      	add	r3, r2
 8002ebc:	b2db      	uxtb	r3, r3
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
	...

08002ecc <DS3231_EncodeBCD>:

uint8_t DS3231_EncodeBCD(uint8_t dec) {
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	71fb      	strb	r3, [r7, #7]
    return ((dec / 10) << 4) | (dec % 10);
 8002ed6:	79fb      	ldrb	r3, [r7, #7]
 8002ed8:	4a0d      	ldr	r2, [pc, #52]	; (8002f10 <DS3231_EncodeBCD+0x44>)
 8002eda:	fba2 2303 	umull	r2, r3, r2, r3
 8002ede:	08db      	lsrs	r3, r3, #3
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	011b      	lsls	r3, r3, #4
 8002ee4:	b258      	sxtb	r0, r3
 8002ee6:	79fa      	ldrb	r2, [r7, #7]
 8002ee8:	4b09      	ldr	r3, [pc, #36]	; (8002f10 <DS3231_EncodeBCD+0x44>)
 8002eea:	fba3 1302 	umull	r1, r3, r3, r2
 8002eee:	08d9      	lsrs	r1, r3, #3
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	b25b      	sxtb	r3, r3
 8002efe:	4303      	orrs	r3, r0
 8002f00:	b25b      	sxtb	r3, r3
 8002f02:	b2db      	uxtb	r3, r3
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	cccccccd 	.word	0xcccccccd

08002f14 <DS3231_GetDateTime>:

bool DS3231_GetDateTime(DS3231_DateTime * dt) {
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
    uint8_t raw;

    raw = DS3231_GetRegByte(DS3231_REG_SECOND);
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	f7ff ff9b 	bl	8002e58 <DS3231_GetRegByte>
 8002f22:	4603      	mov	r3, r0
 8002f24:	73fb      	strb	r3, [r7, #15]
    if (raw == 0xFF)
 8002f26:	7bfb      	ldrb	r3, [r7, #15]
 8002f28:	2bff      	cmp	r3, #255	; 0xff
 8002f2a:	d101      	bne.n	8002f30 <DS3231_GetDateTime+0x1c>
        return false;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	e06b      	b.n	8003008 <DS3231_GetDateTime+0xf4>
    dt->seconds = DS3231_DecodeBCD(raw);
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff ffb0 	bl	8002e98 <DS3231_DecodeBCD>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	701a      	strb	r2, [r3, #0]

    raw = DS3231_GetRegByte(DS3231_REG_MINUTE);
 8002f40:	2001      	movs	r0, #1
 8002f42:	f7ff ff89 	bl	8002e58 <DS3231_GetRegByte>
 8002f46:	4603      	mov	r3, r0
 8002f48:	73fb      	strb	r3, [r7, #15]
    if (raw == 0xFF)
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
 8002f4c:	2bff      	cmp	r3, #255	; 0xff
 8002f4e:	d101      	bne.n	8002f54 <DS3231_GetDateTime+0x40>
        return false;
 8002f50:	2300      	movs	r3, #0
 8002f52:	e059      	b.n	8003008 <DS3231_GetDateTime+0xf4>
    dt->minutes = DS3231_DecodeBCD(raw);
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff ff9e 	bl	8002e98 <DS3231_DecodeBCD>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	461a      	mov	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	705a      	strb	r2, [r3, #1]

    raw = DS3231_GetRegByte(DS3231_REG_HOUR);
 8002f64:	2002      	movs	r0, #2
 8002f66:	f7ff ff77 	bl	8002e58 <DS3231_GetRegByte>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	73fb      	strb	r3, [r7, #15]
    if (raw == 0xFF)
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
 8002f70:	2bff      	cmp	r3, #255	; 0xff
 8002f72:	d101      	bne.n	8002f78 <DS3231_GetDateTime+0x64>
        return false;
 8002f74:	2300      	movs	r3, #0
 8002f76:	e047      	b.n	8003008 <DS3231_GetDateTime+0xf4>
    dt->hours = DS3231_DecodeBCD(raw & 0x3F); // Formato 24h, sin bit AM/PM
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
 8002f7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff ff89 	bl	8002e98 <DS3231_DecodeBCD>
 8002f86:	4603      	mov	r3, r0
 8002f88:	461a      	mov	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	709a      	strb	r2, [r3, #2]

    raw = DS3231_GetRegByte(DS3231_REG_DATE);
 8002f8e:	2004      	movs	r0, #4
 8002f90:	f7ff ff62 	bl	8002e58 <DS3231_GetRegByte>
 8002f94:	4603      	mov	r3, r0
 8002f96:	73fb      	strb	r3, [r7, #15]
    if (raw == 0xFF)
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
 8002f9a:	2bff      	cmp	r3, #255	; 0xff
 8002f9c:	d101      	bne.n	8002fa2 <DS3231_GetDateTime+0x8e>
        return false;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	e032      	b.n	8003008 <DS3231_GetDateTime+0xf4>
    dt->day = DS3231_DecodeBCD(raw);
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff ff77 	bl	8002e98 <DS3231_DecodeBCD>
 8002faa:	4603      	mov	r3, r0
 8002fac:	461a      	mov	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	70da      	strb	r2, [r3, #3]

    raw = DS3231_GetRegByte(DS3231_REG_MONTH);
 8002fb2:	2005      	movs	r0, #5
 8002fb4:	f7ff ff50 	bl	8002e58 <DS3231_GetRegByte>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	73fb      	strb	r3, [r7, #15]
    if (raw == 0xFF)
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
 8002fbe:	2bff      	cmp	r3, #255	; 0xff
 8002fc0:	d101      	bne.n	8002fc6 <DS3231_GetDateTime+0xb2>
        return false;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	e020      	b.n	8003008 <DS3231_GetDateTime+0xf4>
    dt->month = DS3231_DecodeBCD(raw & 0x1F); // Bit 7 = siglo (ignorado)
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
 8002fc8:	f003 031f 	and.w	r3, r3, #31
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff ff62 	bl	8002e98 <DS3231_DecodeBCD>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	711a      	strb	r2, [r3, #4]

    raw = DS3231_GetRegByte(DS3231_REG_YEAR);
 8002fdc:	2006      	movs	r0, #6
 8002fde:	f7ff ff3b 	bl	8002e58 <DS3231_GetRegByte>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	73fb      	strb	r3, [r7, #15]
    if (raw == 0xFF)
 8002fe6:	7bfb      	ldrb	r3, [r7, #15]
 8002fe8:	2bff      	cmp	r3, #255	; 0xff
 8002fea:	d101      	bne.n	8002ff0 <DS3231_GetDateTime+0xdc>
        return false;
 8002fec:	2300      	movs	r3, #0
 8002fee:	e00b      	b.n	8003008 <DS3231_GetDateTime+0xf4>
    dt->year = 2000 + DS3231_DecodeBCD(raw); // Año 20xx
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff ff50 	bl	8002e98 <DS3231_DecodeBCD>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003000:	b29a      	uxth	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	80da      	strh	r2, [r3, #6]

    return true;
 8003006:	2301      	movs	r3, #1
}
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <DS3231_SetDateTime>:

bool DS3231_SetDateTime(const DS3231_DateTime * dt) {
 8003010:	b580      	push	{r7, lr}
 8003012:	b088      	sub	sp, #32
 8003014:	af04      	add	r7, sp, #16
 8003016:	6078      	str	r0, [r7, #4]
    uint8_t buffer[7];

    buffer[0] = DS3231_EncodeBCD(dt->seconds);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff ff55 	bl	8002ecc <DS3231_EncodeBCD>
 8003022:	4603      	mov	r3, r0
 8003024:	723b      	strb	r3, [r7, #8]
    buffer[1] = DS3231_EncodeBCD(dt->minutes);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	785b      	ldrb	r3, [r3, #1]
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff ff4e 	bl	8002ecc <DS3231_EncodeBCD>
 8003030:	4603      	mov	r3, r0
 8003032:	727b      	strb	r3, [r7, #9]
    buffer[2] = DS3231_EncodeBCD(dt->hours);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	789b      	ldrb	r3, [r3, #2]
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff ff47 	bl	8002ecc <DS3231_EncodeBCD>
 800303e:	4603      	mov	r3, r0
 8003040:	72bb      	strb	r3, [r7, #10]
    buffer[3] = 1; // Día de la semana fijo
 8003042:	2301      	movs	r3, #1
 8003044:	72fb      	strb	r3, [r7, #11]
    buffer[4] = DS3231_EncodeBCD(dt->day);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	78db      	ldrb	r3, [r3, #3]
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff ff3e 	bl	8002ecc <DS3231_EncodeBCD>
 8003050:	4603      	mov	r3, r0
 8003052:	733b      	strb	r3, [r7, #12]
    buffer[5] = DS3231_EncodeBCD(dt->month);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	791b      	ldrb	r3, [r3, #4]
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff ff37 	bl	8002ecc <DS3231_EncodeBCD>
 800305e:	4603      	mov	r3, r0
 8003060:	737b      	strb	r3, [r7, #13]
    buffer[6] = DS3231_EncodeBCD(dt->year % 100);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	88db      	ldrh	r3, [r3, #6]
 8003066:	4a16      	ldr	r2, [pc, #88]	; (80030c0 <DS3231_SetDateTime+0xb0>)
 8003068:	fba2 1203 	umull	r1, r2, r2, r3
 800306c:	0952      	lsrs	r2, r2, #5
 800306e:	2164      	movs	r1, #100	; 0x64
 8003070:	fb01 f202 	mul.w	r2, r1, r2
 8003074:	1a9b      	subs	r3, r3, r2
 8003076:	b29b      	uxth	r3, r3
 8003078:	b2db      	uxtb	r3, r3
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff ff26 	bl	8002ecc <DS3231_EncodeBCD>
 8003080:	4603      	mov	r3, r0
 8003082:	73bb      	strb	r3, [r7, #14]

    HAL_StatusTypeDef status =
        HAL_I2C_Mem_Write(_ds3231_i2c, DS3231_I2C_ADDR << 1, DS3231_REG_SECOND,
 8003084:	4b0f      	ldr	r3, [pc, #60]	; (80030c4 <DS3231_SetDateTime+0xb4>)
 8003086:	6818      	ldr	r0, [r3, #0]
 8003088:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800308c:	9302      	str	r3, [sp, #8]
 800308e:	2307      	movs	r3, #7
 8003090:	9301      	str	r3, [sp, #4]
 8003092:	f107 0308 	add.w	r3, r7, #8
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	2301      	movs	r3, #1
 800309a:	2200      	movs	r2, #0
 800309c:	21d0      	movs	r1, #208	; 0xd0
 800309e:	f002 ffeb 	bl	8006078 <HAL_I2C_Mem_Write>
 80030a2:	4603      	mov	r3, r0
 80030a4:	73fb      	strb	r3, [r7, #15]
                          I2C_MEMADD_SIZE_8BIT, buffer, sizeof(buffer), HAL_MAX_DELAY);

    if (status != HAL_OK) {
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d004      	beq.n	80030b6 <DS3231_SetDateTime+0xa6>
        uart_print(RTC_MSG_SET_FAIL);
 80030ac:	4806      	ldr	r0, [pc, #24]	; (80030c8 <DS3231_SetDateTime+0xb8>)
 80030ae:	f000 ff1d 	bl	8003eec <uart_print>
        return false;
 80030b2:	2300      	movs	r3, #0
 80030b4:	e000      	b.n	80030b8 <DS3231_SetDateTime+0xa8>
    }
    return true;
 80030b6:	2301      	movs	r3, #1
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	51eb851f 	.word	0x51eb851f
 80030c4:	20002058 	.word	0x20002058
 80030c8:	08011c98 	.word	0x08011c98

080030cc <rtc_get_time>:
    int8_t msb = DS3231_GetRegByte(DS3231_REG_TEMP_MSB);
    uint8_t lsb = DS3231_GetRegByte(DS3231_REG_TEMP_LSB);
    return msb + ((lsb >> 6) * 0.25f);
}

void rtc_get_time(char * buffer, size_t len) {
 80030cc:	b5b0      	push	{r4, r5, r7, lr}
 80030ce:	b08a      	sub	sp, #40	; 0x28
 80030d0:	af06      	add	r7, sp, #24
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
    DS3231_DateTime dt;
    DS3231_GetDateTime(&dt);
 80030d6:	f107 0308 	add.w	r3, r7, #8
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff ff1a 	bl	8002f14 <DS3231_GetDateTime>
    snprintf(buffer, len, RTC_GET_FORMAT_DATETIME, dt.year, dt.month, dt.day, dt.hours, dt.minutes,
 80030e0:	89fb      	ldrh	r3, [r7, #14]
 80030e2:	461d      	mov	r5, r3
 80030e4:	7b3b      	ldrb	r3, [r7, #12]
 80030e6:	7afa      	ldrb	r2, [r7, #11]
 80030e8:	7ab9      	ldrb	r1, [r7, #10]
 80030ea:	7a78      	ldrb	r0, [r7, #9]
             dt.seconds);
 80030ec:	7a3c      	ldrb	r4, [r7, #8]
    snprintf(buffer, len, RTC_GET_FORMAT_DATETIME, dt.year, dt.month, dt.day, dt.hours, dt.minutes,
 80030ee:	9404      	str	r4, [sp, #16]
 80030f0:	9003      	str	r0, [sp, #12]
 80030f2:	9102      	str	r1, [sp, #8]
 80030f4:	9201      	str	r2, [sp, #4]
 80030f6:	9300      	str	r3, [sp, #0]
 80030f8:	462b      	mov	r3, r5
 80030fa:	4a04      	ldr	r2, [pc, #16]	; (800310c <rtc_get_time+0x40>)
 80030fc:	6839      	ldr	r1, [r7, #0]
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f00a f8b6 	bl	800d270 <sniprintf>
}
 8003104:	bf00      	nop
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bdb0      	pop	{r4, r5, r7, pc}
 800310c:	08011cbc 	.word	0x08011cbc

08003110 <RTC_DS3231_Set>:
    }

    return dt;
}

bool RTC_DS3231_Set(RTC_DateTypeDef * date, RTC_TimeTypeDef * time) {
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
    DS3231_DateTime dt;

    dt.year = 2000 + date->Year;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	78db      	ldrb	r3, [r3, #3]
 800311e:	b29b      	uxth	r3, r3
 8003120:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003124:	b29b      	uxth	r3, r3
 8003126:	827b      	strh	r3, [r7, #18]
    dt.month = date->Month;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	785b      	ldrb	r3, [r3, #1]
 800312c:	743b      	strb	r3, [r7, #16]
    dt.day = date->Date;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	789b      	ldrb	r3, [r3, #2]
 8003132:	73fb      	strb	r3, [r7, #15]
    dt.hours = time->Hours;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	73bb      	strb	r3, [r7, #14]
    dt.minutes = time->Minutes;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	785b      	ldrb	r3, [r3, #1]
 800313e:	737b      	strb	r3, [r7, #13]
    dt.seconds = time->Seconds;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	789b      	ldrb	r3, [r3, #2]
 8003144:	733b      	strb	r3, [r7, #12]

    bool resultado = DS3231_SetDateTime(&dt);
 8003146:	f107 030c 	add.w	r3, r7, #12
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff ff60 	bl	8003010 <DS3231_SetDateTime>
 8003150:	4603      	mov	r3, r0
 8003152:	75fb      	strb	r3, [r7, #23]

    if (!resultado) {
 8003154:	7dfb      	ldrb	r3, [r7, #23]
 8003156:	f083 0301 	eor.w	r3, r3, #1
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	d002      	beq.n	8003166 <RTC_DS3231_Set+0x56>
        uart_print(RTC_DS3231_WRITE_ERROR_MSG);
 8003160:	4803      	ldr	r0, [pc, #12]	; (8003170 <RTC_DS3231_Set+0x60>)
 8003162:	f000 fec3 	bl	8003eec <uart_print>
    }

    return resultado;
 8003166:	7dfb      	ldrb	r3, [r7, #23]
}
 8003168:	4618      	mov	r0, r3
 800316a:	3718      	adds	r7, #24
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	08011e68 	.word	0x08011e68

08003174 <RTC_DS3231_Get>:

bool RTC_DS3231_Get(RTC_DateTypeDef * date, RTC_TimeTypeDef * time) {
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
    DS3231_DateTime dt;

    if (!DS3231_GetDateTime(&dt)) {
 800317e:	f107 0308 	add.w	r3, r7, #8
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff fec6 	bl	8002f14 <DS3231_GetDateTime>
 8003188:	4603      	mov	r3, r0
 800318a:	f083 0301 	eor.w	r3, r3, #1
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d004      	beq.n	800319e <RTC_DS3231_Get+0x2a>
        uart_print(RTC_DS3231_READ_ERROR_MSG);
 8003194:	4810      	ldr	r0, [pc, #64]	; (80031d8 <RTC_DS3231_Get+0x64>)
 8003196:	f000 fea9 	bl	8003eec <uart_print>
        return false;
 800319a:	2300      	movs	r3, #0
 800319c:	e018      	b.n	80031d0 <RTC_DS3231_Get+0x5c>
    }

    // Convertir a estructuras HAL
    date->Year = (uint8_t)(dt.year - 2000);
 800319e:	89fb      	ldrh	r3, [r7, #14]
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	3330      	adds	r3, #48	; 0x30
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	70da      	strb	r2, [r3, #3]
    date->Month = dt.month;
 80031aa:	7b3a      	ldrb	r2, [r7, #12]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	705a      	strb	r2, [r3, #1]
    date->Date = dt.day;
 80031b0:	7afa      	ldrb	r2, [r7, #11]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	709a      	strb	r2, [r3, #2]
    date->WeekDay = 1; // opcionalmente se puede calcular
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	701a      	strb	r2, [r3, #0]

    time->Hours = dt.hours;
 80031bc:	7aba      	ldrb	r2, [r7, #10]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	701a      	strb	r2, [r3, #0]
    time->Minutes = dt.minutes;
 80031c2:	7a7a      	ldrb	r2, [r7, #9]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	705a      	strb	r2, [r3, #1]
    time->Seconds = dt.seconds;
 80031c8:	7a3a      	ldrb	r2, [r7, #8]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	709a      	strb	r2, [r3, #2]

    return true;
 80031ce:	2301      	movs	r3, #1
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	08011e88 	.word	0x08011e88

080031dc <ds3231_get_datetime>:
        *year = 2000 + date.Year;

    return true;
}

bool ds3231_get_datetime(ds3231_time_t * dt) {
 80031dc:	b580      	push	{r7, lr}
 80031de:	b088      	sub	sp, #32
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
    RTC_DateTypeDef date;
    RTC_TimeTypeDef time;

    if (!RTC_DS3231_Get(&date, &time)) {
 80031e4:	f107 0208 	add.w	r2, r7, #8
 80031e8:	f107 031c 	add.w	r3, r7, #28
 80031ec:	4611      	mov	r1, r2
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff ffc0 	bl	8003174 <RTC_DS3231_Get>
 80031f4:	4603      	mov	r3, r0
 80031f6:	f083 0301 	eor.w	r3, r3, #1
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <ds3231_get_datetime+0x28>
        return false;
 8003200:	2300      	movs	r3, #0
 8003202:	e016      	b.n	8003232 <ds3231_get_datetime+0x56>
    }

    dt->hour = time.Hours;
 8003204:	7a3a      	ldrb	r2, [r7, #8]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	701a      	strb	r2, [r3, #0]
    dt->min = time.Minutes;
 800320a:	7a7a      	ldrb	r2, [r7, #9]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	705a      	strb	r2, [r3, #1]
    dt->sec = time.Seconds;
 8003210:	7aba      	ldrb	r2, [r7, #10]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	709a      	strb	r2, [r3, #2]
    dt->day = date.Date;
 8003216:	7fba      	ldrb	r2, [r7, #30]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	70da      	strb	r2, [r3, #3]
    dt->month = date.Month;
 800321c:	7f7a      	ldrb	r2, [r7, #29]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	711a      	strb	r2, [r3, #4]
    dt->year = 2000 + date.Year;
 8003222:	7ffb      	ldrb	r3, [r7, #31]
 8003224:	b29b      	uxth	r3, r3
 8003226:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800322a:	b29a      	uxth	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	80da      	strh	r2, [r3, #6]

    return true;
 8003230:	2301      	movs	r3, #1
}
 8003232:	4618      	mov	r0, r3
 8003234:	3720      	adds	r7, #32
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <sensors_init_all>:

/* === Public function implementation ========================================================== */

/* === Función de inicialización ============================================================ */

void sensors_init_all(void) {
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
    // Inicializar sensores SPS30
    inicializar_sensores_sps30(); // <-- esta función sigue en sps30_multi.c
 8003240:	f000 fc36 	bl	8003ab0 <inicializar_sensores_sps30>

    // Inicialización de sensores DHT22 (definir los pines según tu hardware)
    DHT22_Init(&dhtA, GPIOB, GPIO_PIN_11); // Sensor A
 8003244:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003248:	4905      	ldr	r1, [pc, #20]	; (8003260 <sensors_init_all+0x24>)
 800324a:	4806      	ldr	r0, [pc, #24]	; (8003264 <sensors_init_all+0x28>)
 800324c:	f7fd fee4 	bl	8001018 <DHT22_Init>
    DHT22_Init(&dhtB, GPIOB, GPIO_PIN_12); // Sensor B
 8003250:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003254:	4902      	ldr	r1, [pc, #8]	; (8003260 <sensors_init_all+0x24>)
 8003256:	4804      	ldr	r0, [pc, #16]	; (8003268 <sensors_init_all+0x2c>)
 8003258:	f7fd fede 	bl	8001018 <DHT22_Init>
}
 800325c:	bf00      	nop
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40020400 	.word	0x40020400
 8003264:	2000205c 	.word	0x2000205c
 8003268:	20002064 	.word	0x20002064

0800326c <SHDLC_LoadMyVector>:
 * @param DataFrameSize El tamaño total del arreglo DataFrame para evitar
 *        desbordamientos de búfer.
 * @return void
 */

void SHDLC_LoadMyVector(Shdlc_FrameMiso * frame, const uint8_t * DataFrame, size_t DataFrameSize) {
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
    if (frame == NULL || DataFrame == NULL || DataFrameSize < 5) {
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <SHDLC_LoadMyVector+0x1e>
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <SHDLC_LoadMyVector+0x1e>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b04      	cmp	r3, #4
 8003288:	d803      	bhi.n	8003292 <SHDLC_LoadMyVector+0x26>
        // Validación básica para asegurarnos de que los parámetros son válidos y DataFrame tiene el
        // tamaño mínimo esperado.
        printf("Datos no válidos para cargar en myVector.\n");
 800328a:	4811      	ldr	r0, [pc, #68]	; (80032d0 <SHDLC_LoadMyVector+0x64>)
 800328c:	f009 ffd2 	bl	800d234 <puts>
        return;
 8003290:	e01b      	b.n	80032ca <SHDLC_LoadMyVector+0x5e>
    }

    uint8_t dataLength = DataFrame[4]; // Longitud de los datos útiles.
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	791b      	ldrb	r3, [r3, #4]
 8003296:	75fb      	strb	r3, [r7, #23]

    if (dataLength > FRAME_DATA_VECTOR_SIZE_MISO || (4 + dataLength) > DataFrameSize) {
 8003298:	7dfb      	ldrb	r3, [r7, #23]
 800329a:	2b3c      	cmp	r3, #60	; 0x3c
 800329c:	d805      	bhi.n	80032aa <SHDLC_LoadMyVector+0x3e>
 800329e:	7dfb      	ldrb	r3, [r7, #23]
 80032a0:	3304      	adds	r3, #4
 80032a2:	461a      	mov	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d203      	bcs.n	80032b2 <SHDLC_LoadMyVector+0x46>
        // Asegúrate de que la longitud de los datos no excede el tamaño de myVector ni los límites
        // de DataFrame.
        printf("Longitud de los datos excede el tamaño permitido de myVector o los límites de "
 80032aa:	480a      	ldr	r0, [pc, #40]	; (80032d4 <SHDLC_LoadMyVector+0x68>)
 80032ac:	f009 ffc2 	bl	800d234 <puts>
               "DataFrame.\n");
        return;
 80032b0:	e00b      	b.n	80032ca <SHDLC_LoadMyVector+0x5e>
    }

    // Copiar los datos útiles desde DataFrame a myVector en la estructura Shdlc_FrameMiso.
    memcpy(frame->myVector, &DataFrame[5], dataLength + 1);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	1cd8      	adds	r0, r3, #3
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	1d59      	adds	r1, r3, #5
 80032ba:	7dfb      	ldrb	r3, [r7, #23]
 80032bc:	3301      	adds	r3, #1
 80032be:	461a      	mov	r2, r3
 80032c0:	f008 ffda 	bl	800c278 <memcpy>

    // Actualizar el campo 'lon' con la longitud de los datos copiados.
    frame->lon = dataLength;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	7dfa      	ldrb	r2, [r7, #23]
 80032c8:	709a      	strb	r2, [r3, #2]

    // Asume que podrías querer también inicializar otros campos aquí.
}
 80032ca:	3718      	adds	r7, #24
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	08011ea8 	.word	0x08011ea8
 80032d4:	08011ed4 	.word	0x08011ed4

080032d8 <SHDLC_CalculateDataSize>:
 * @param inputSize Tamaño del arreglo de entrada.
 * @return int La longitud de los datos contenidos entre los dos delimitadores,
 *         o -1 si los delimitadores no se encuentran en la secuencia correcta.
 */

int SHDLC_CalculateDataSize(const uint8_t * input, size_t inputSize) {
 80032d8:	b480      	push	{r7}
 80032da:	b089      	sub	sp, #36	; 0x24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
    int start = -1;
 80032e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032e6:	61fb      	str	r3, [r7, #28]
    int end = -1;
 80032e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032ec:	61bb      	str	r3, [r7, #24]

    // Buscar el primer delimitador 0xE7.
    for (size_t i = 0; i < inputSize; ++i) {
 80032ee:	2300      	movs	r3, #0
 80032f0:	617b      	str	r3, [r7, #20]
 80032f2:	e00c      	b.n	800330e <SHDLC_CalculateDataSize+0x36>
        if (input[i] == 0x7E) {
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	4413      	add	r3, r2
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b7e      	cmp	r3, #126	; 0x7e
 80032fe:	d103      	bne.n	8003308 <SHDLC_CalculateDataSize+0x30>
            start = i + 1; // Comenzar después del primer 0xE7
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	3301      	adds	r3, #1
 8003304:	61fb      	str	r3, [r7, #28]
            break;
 8003306:	e006      	b.n	8003316 <SHDLC_CalculateDataSize+0x3e>
    for (size_t i = 0; i < inputSize; ++i) {
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	3301      	adds	r3, #1
 800330c:	617b      	str	r3, [r7, #20]
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d3ee      	bcc.n	80032f4 <SHDLC_CalculateDataSize+0x1c>
        }
    }

    // Buscar el segundo delimitador 0xE7.
    for (size_t i = start; i < inputSize; ++i) {
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	613b      	str	r3, [r7, #16]
 800331a:	e00b      	b.n	8003334 <SHDLC_CalculateDataSize+0x5c>
        if (input[i] == 0x7E) {
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	4413      	add	r3, r2
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2b7e      	cmp	r3, #126	; 0x7e
 8003326:	d102      	bne.n	800332e <SHDLC_CalculateDataSize+0x56>
            end = i;
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	61bb      	str	r3, [r7, #24]
            break;
 800332c:	e006      	b.n	800333c <SHDLC_CalculateDataSize+0x64>
    for (size_t i = start; i < inputSize; ++i) {
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	3301      	adds	r3, #1
 8003332:	613b      	str	r3, [r7, #16]
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d3ef      	bcc.n	800331c <SHDLC_CalculateDataSize+0x44>
        }
    }

    // Verificar si se encontraron ambos delimitadores.
    if (start == -1 || end == -1 || start >= end) {
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003342:	d007      	beq.n	8003354 <SHDLC_CalculateDataSize+0x7c>
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800334a:	d003      	beq.n	8003354 <SHDLC_CalculateDataSize+0x7c>
 800334c:	69fa      	ldr	r2, [r7, #28]
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	429a      	cmp	r2, r3
 8003352:	db02      	blt.n	800335a <SHDLC_CalculateDataSize+0x82>
        return -1; // No se encontró la secuencia válida.
 8003354:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003358:	e004      	b.n	8003364 <SHDLC_CalculateDataSize+0x8c>
    }

    // Calcular la longitud de los datos a copiar y asegurarse de que no
    // exceda el buffer de salida.
    size_t dataLength = end - start;
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	60fb      	str	r3, [r7, #12]
    return dataLength;
 8003362:	68fb      	ldr	r3, [r7, #12]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3724      	adds	r7, #36	; 0x24
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <SHDLC_revertByteStuffing>:
 * @param stuffedSize Tamaño del arreglo de bytes con byte-stuffing.
 * @param originalData Puntero al arreglo de bytes donde se almacenarán los datos revertidos.
 * @return El tamaño del arreglo de bytes revertido.
 */
size_t SHDLC_revertByteStuffing(const uint8_t * stuffedData, size_t stuffedSize,
                                uint8_t * originalData) {
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
    size_t originalIndex = 0;
 800337c:	2300      	movs	r3, #0
 800337e:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < stuffedSize; ++i) {
 8003380:	2300      	movs	r3, #0
 8003382:	613b      	str	r3, [r7, #16]
 8003384:	e04e      	b.n	8003424 <SHDLC_revertByteStuffing+0xb4>
        if (stuffedData[i] == 0x7D) { // Detecta el indicador de byte-stuffing
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	4413      	add	r3, r2
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b7d      	cmp	r3, #125	; 0x7d
 8003390:	d137      	bne.n	8003402 <SHDLC_revertByteStuffing+0x92>
            i++;                      // Avanza al siguiente byte para determinar el valor real
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	3301      	adds	r3, #1
 8003396:	613b      	str	r3, [r7, #16]
            if (i < stuffedSize) {
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	429a      	cmp	r2, r3
 800339e:	d23b      	bcs.n	8003418 <SHDLC_revertByteStuffing+0xa8>
                switch (stuffedData[i]) {
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	4413      	add	r3, r2
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	2b5e      	cmp	r3, #94	; 0x5e
 80033aa:	d00a      	beq.n	80033c2 <SHDLC_revertByteStuffing+0x52>
 80033ac:	2b5e      	cmp	r3, #94	; 0x5e
 80033ae:	dc35      	bgt.n	800341c <SHDLC_revertByteStuffing+0xac>
 80033b0:	2b5d      	cmp	r3, #93	; 0x5d
 80033b2:	d00e      	beq.n	80033d2 <SHDLC_revertByteStuffing+0x62>
 80033b4:	2b5d      	cmp	r3, #93	; 0x5d
 80033b6:	dc31      	bgt.n	800341c <SHDLC_revertByteStuffing+0xac>
 80033b8:	2b31      	cmp	r3, #49	; 0x31
 80033ba:	d012      	beq.n	80033e2 <SHDLC_revertByteStuffing+0x72>
 80033bc:	2b33      	cmp	r3, #51	; 0x33
 80033be:	d018      	beq.n	80033f2 <SHDLC_revertByteStuffing+0x82>
                    break;
                default:
                    // Trata el caso en que el byte siguiente a 0x7D no es uno esperado
                    // Esto podría indicar un error o una situación inesperada.
                    // Se podría manejar de manera especial si es necesario.
                    break;
 80033c0:	e02c      	b.n	800341c <SHDLC_revertByteStuffing+0xac>
                    originalData[originalIndex++] = 0x7E;
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	1c5a      	adds	r2, r3, #1
 80033c6:	617a      	str	r2, [r7, #20]
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	4413      	add	r3, r2
 80033cc:	227e      	movs	r2, #126	; 0x7e
 80033ce:	701a      	strb	r2, [r3, #0]
                    break;
 80033d0:	e025      	b.n	800341e <SHDLC_revertByteStuffing+0xae>
                    originalData[originalIndex++] = 0x7D;
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	617a      	str	r2, [r7, #20]
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	4413      	add	r3, r2
 80033dc:	227d      	movs	r2, #125	; 0x7d
 80033de:	701a      	strb	r2, [r3, #0]
                    break;
 80033e0:	e01d      	b.n	800341e <SHDLC_revertByteStuffing+0xae>
                    originalData[originalIndex++] = 0x11;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	1c5a      	adds	r2, r3, #1
 80033e6:	617a      	str	r2, [r7, #20]
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	4413      	add	r3, r2
 80033ec:	2211      	movs	r2, #17
 80033ee:	701a      	strb	r2, [r3, #0]
                    break;
 80033f0:	e015      	b.n	800341e <SHDLC_revertByteStuffing+0xae>
                    originalData[originalIndex++] = 0x13;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	1c5a      	adds	r2, r3, #1
 80033f6:	617a      	str	r2, [r7, #20]
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	4413      	add	r3, r2
 80033fc:	2213      	movs	r2, #19
 80033fe:	701a      	strb	r2, [r3, #0]
                    break;
 8003400:	e00d      	b.n	800341e <SHDLC_revertByteStuffing+0xae>
                }
            }
        } else {
            // Si no es un byte-stuffing, simplemente copia el byte
            originalData[originalIndex++] = stuffedData[i];
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	441a      	add	r2, r3
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	1c59      	adds	r1, r3, #1
 800340c:	6179      	str	r1, [r7, #20]
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	440b      	add	r3, r1
 8003412:	7812      	ldrb	r2, [r2, #0]
 8003414:	701a      	strb	r2, [r3, #0]
 8003416:	e002      	b.n	800341e <SHDLC_revertByteStuffing+0xae>
            }
 8003418:	bf00      	nop
 800341a:	e000      	b.n	800341e <SHDLC_revertByteStuffing+0xae>
                    break;
 800341c:	bf00      	nop
    for (size_t i = 0; i < stuffedSize; ++i) {
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	3301      	adds	r3, #1
 8003422:	613b      	str	r3, [r7, #16]
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	429a      	cmp	r2, r3
 800342a:	d3ac      	bcc.n	8003386 <SHDLC_revertByteStuffing+0x16>
        }
    }

    return originalIndex; // Retorna el tamaño del arreglo revertido
 800342c:	697b      	ldr	r3, [r7, #20]
}
 800342e:	4618      	mov	r0, r3
 8003430:	371c      	adds	r7, #28
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <SHDLC_bytesToFloat>:

// Función para convertir 4 bytes en big-endian a un valor float IEEE754
float SHDLC_bytesToFloat(uint8_t * bytes) {
 800343a:	b480      	push	{r7}
 800343c:	b087      	sub	sp, #28
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
    float value;
    uint8_t reversedBytes[sizeof(value)];

    // Revertir el orden de los bytes para big-endian
    for (int i = 0; i < sizeof(value); i++) {
 8003442:	2300      	movs	r3, #0
 8003444:	617b      	str	r3, [r7, #20]
 8003446:	e00e      	b.n	8003466 <SHDLC_bytesToFloat+0x2c>
        reversedBytes[i] = bytes[sizeof(value) - i - 1];
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f1c3 0303 	rsb	r3, r3, #3
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	4413      	add	r3, r2
 8003452:	7819      	ldrb	r1, [r3, #0]
 8003454:	f107 020c 	add.w	r2, r7, #12
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	4413      	add	r3, r2
 800345c:	460a      	mov	r2, r1
 800345e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < sizeof(value); i++) {
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	3301      	adds	r3, #1
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	2b03      	cmp	r3, #3
 800346a:	d9ed      	bls.n	8003448 <SHDLC_bytesToFloat+0xe>
 800346c:	68fb      	ldr	r3, [r7, #12]
    }

    // Copiar los bytes revertidos en la variable float
    memcpy(&value, reversedBytes, sizeof(value));
 800346e:	613b      	str	r3, [r7, #16]

    return value;
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	ee07 3a90 	vmov	s15, r3
}
 8003476:	eeb0 0a67 	vmov.f32	s0, s15
 800347a:	371c      	adds	r7, #28
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <SHDLC_llenarConcentraciones>:

// Función para llenar la estructura con los datos de concentración
void SHDLC_llenarConcentraciones(ConcentracionesPM * concentraciones, uint8_t * data) {
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
    if (!concentraciones || !data)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d029      	beq.n	80034e8 <SHDLC_llenarConcentraciones+0x64>
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d026      	beq.n	80034e8 <SHDLC_llenarConcentraciones+0x64>
        return;

    // Al menos 4 * sizeof(float) = 16 bytes
    concentraciones->pm1_0 = SHDLC_bytesToFloat(&data[0]);
 800349a:	6838      	ldr	r0, [r7, #0]
 800349c:	f7ff ffcd 	bl	800343a <SHDLC_bytesToFloat>
 80034a0:	eef0 7a40 	vmov.f32	s15, s0
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	edc3 7a00 	vstr	s15, [r3]
    concentraciones->pm2_5 = SHDLC_bytesToFloat(&data[4]);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	3304      	adds	r3, #4
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff ffc3 	bl	800343a <SHDLC_bytesToFloat>
 80034b4:	eef0 7a40 	vmov.f32	s15, s0
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	edc3 7a01 	vstr	s15, [r3, #4]
    concentraciones->pm4_0 = SHDLC_bytesToFloat(&data[8]);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	3308      	adds	r3, #8
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7ff ffb9 	bl	800343a <SHDLC_bytesToFloat>
 80034c8:	eef0 7a40 	vmov.f32	s15, s0
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	edc3 7a02 	vstr	s15, [r3, #8]
    concentraciones->pm10 = SHDLC_bytesToFloat(&data[12]);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	330c      	adds	r3, #12
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff ffaf 	bl	800343a <SHDLC_bytesToFloat>
 80034dc:	eef0 7a40 	vmov.f32	s15, s0
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	edc3 7a03 	vstr	s15, [r3, #12]
 80034e6:	e000      	b.n	80034ea <SHDLC_llenarConcentraciones+0x66>
        return;
 80034e8:	bf00      	nop
}
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <sistema_verificar_componentes>:
/* === Public function implementation ========================================================== */




bool sistema_verificar_componentes(void) {
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b08c      	sub	sp, #48	; 0x30
 80034f4:	af00      	add	r7, sp, #0
    bool estado_ok = true;
 80034f6:	2301      	movs	r3, #1
 80034f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (!data_logger_init()) {
 80034fc:	f7fe f870 	bl	80015e0 <data_logger_init>
 8003500:	4603      	mov	r3, r0
 8003502:	f083 0301 	eor.w	r3, r3, #1
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b00      	cmp	r3, #0
 800350a:	d006      	beq.n	800351a <sistema_verificar_componentes+0x2a>
        uart_print("[ERROR] microSD no pudo montarse\n");
 800350c:	4842      	ldr	r0, [pc, #264]	; (8003618 <sistema_verificar_componentes+0x128>)
 800350e:	f000 fced 	bl	8003eec <uart_print>
        estado_ok = false;
 8003512:	2300      	movs	r3, #0
 8003514:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003518:	e002      	b.n	8003520 <sistema_verificar_componentes+0x30>
    } else {
        uart_print("[OK] microSD montada correctamente\n");
 800351a:	4840      	ldr	r0, [pc, #256]	; (800361c <sistema_verificar_componentes+0x12c>)
 800351c:	f000 fce6 	bl	8003eec <uart_print>
    }

    if (!rtc_auto_init()) {
 8003520:	f000 fb56 	bl	8003bd0 <rtc_auto_init>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d106      	bne.n	8003538 <sistema_verificar_componentes+0x48>
        uart_print("[ERROR] RTC no inicializado correctamente\n");
 800352a:	483d      	ldr	r0, [pc, #244]	; (8003620 <sistema_verificar_componentes+0x130>)
 800352c:	f000 fcde 	bl	8003eec <uart_print>
        estado_ok = false;
 8003530:	2300      	movs	r3, #0
 8003532:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003536:	e002      	b.n	800353e <sistema_verificar_componentes+0x4e>
    } else {
        uart_print("[OK] RTC detectado y configurado\n");
 8003538:	483a      	ldr	r0, [pc, #232]	; (8003624 <sistema_verificar_componentes+0x134>)
 800353a:	f000 fcd7 	bl	8003eec <uart_print>
    }

    // Intentar inicializar sensores SPS30
    for (int i = 0; i < sensores_disponibles; ++i) {
 800353e:	2300      	movs	r3, #0
 8003540:	62bb      	str	r3, [r7, #40]	; 0x28
 8003542:	e034      	b.n	80035ae <sistema_verificar_componentes+0xbe>
        SPS30 * sensor = &sensores_sps30[i].sensor;
 8003544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003546:	2258      	movs	r2, #88	; 0x58
 8003548:	fb02 f303 	mul.w	r3, r2, r3
 800354c:	4a36      	ldr	r2, [pc, #216]	; (8003628 <sistema_verificar_componentes+0x138>)
 800354e:	4413      	add	r3, r2
 8003550:	627b      	str	r3, [r7, #36]	; 0x24
        char serial_tmp[SERIAL_BUFFER_LEN];

        if (sensor->serial_number && sensor->serial_number(sensor, serial_tmp)) {
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003556:	2b00      	cmp	r3, #0
 8003558:	d017      	beq.n	800358a <sistema_verificar_componentes+0x9a>
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355e:	463a      	mov	r2, r7
 8003560:	4611      	mov	r1, r2
 8003562:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003564:	4798      	blx	r3
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00e      	beq.n	800358a <sistema_verificar_componentes+0x9a>
            uart_print("[OK] Sensor SPS30 ID %d serial: %s\n", sensores_sps30[i].id, serial_tmp);
 800356c:	4a2e      	ldr	r2, [pc, #184]	; (8003628 <sistema_verificar_componentes+0x138>)
 800356e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003570:	2158      	movs	r1, #88	; 0x58
 8003572:	fb01 f303 	mul.w	r3, r1, r3
 8003576:	4413      	add	r3, r2
 8003578:	3350      	adds	r3, #80	; 0x50
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	4619      	mov	r1, r3
 800357e:	463b      	mov	r3, r7
 8003580:	461a      	mov	r2, r3
 8003582:	482a      	ldr	r0, [pc, #168]	; (800362c <sistema_verificar_componentes+0x13c>)
 8003584:	f000 fcb2 	bl	8003eec <uart_print>
 8003588:	e00e      	b.n	80035a8 <sistema_verificar_componentes+0xb8>
        } else {
            uart_print("[ERROR] No se pudo leer el numero de serie del sensor SPS30 ID %d\n", sensores_sps30[i].id);
 800358a:	4a27      	ldr	r2, [pc, #156]	; (8003628 <sistema_verificar_componentes+0x138>)
 800358c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358e:	2158      	movs	r1, #88	; 0x58
 8003590:	fb01 f303 	mul.w	r3, r1, r3
 8003594:	4413      	add	r3, r2
 8003596:	3350      	adds	r3, #80	; 0x50
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	4619      	mov	r1, r3
 800359c:	4824      	ldr	r0, [pc, #144]	; (8003630 <sistema_verificar_componentes+0x140>)
 800359e:	f000 fca5 	bl	8003eec <uart_print>
            estado_ok = false; // No bloquea, pero se registra el fallo
 80035a2:	2300      	movs	r3, #0
 80035a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int i = 0; i < sensores_disponibles; ++i) {
 80035a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035aa:	3301      	adds	r3, #1
 80035ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ae:	4b21      	ldr	r3, [pc, #132]	; (8003634 <sistema_verificar_componentes+0x144>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035b4:	429a      	cmp	r2, r3
 80035b6:	dbc5      	blt.n	8003544 <sistema_verificar_componentes+0x54>
        }
    }

    // Verificar sensores DHT22
    if (!DHT22_ReadSimple(&dhtA, NULL, NULL)) {
 80035b8:	2200      	movs	r2, #0
 80035ba:	2100      	movs	r1, #0
 80035bc:	481e      	ldr	r0, [pc, #120]	; (8003638 <sistema_verificar_componentes+0x148>)
 80035be:	f7fd fddd 	bl	800117c <DHT22_ReadSimple>
 80035c2:	4603      	mov	r3, r0
 80035c4:	f083 0301 	eor.w	r3, r3, #1
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d006      	beq.n	80035dc <sistema_verificar_componentes+0xec>
        uart_print("[ERROR] Sensor DHT22 ambiente no responde\n");
 80035ce:	481b      	ldr	r0, [pc, #108]	; (800363c <sistema_verificar_componentes+0x14c>)
 80035d0:	f000 fc8c 	bl	8003eec <uart_print>
        estado_ok = false;
 80035d4:	2300      	movs	r3, #0
 80035d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80035da:	e002      	b.n	80035e2 <sistema_verificar_componentes+0xf2>
    } else {
        uart_print("[OK] Sensor DHT22 ambiente funcionando\n");
 80035dc:	4818      	ldr	r0, [pc, #96]	; (8003640 <sistema_verificar_componentes+0x150>)
 80035de:	f000 fc85 	bl	8003eec <uart_print>
    }

    if (!DHT22_ReadSimple(&dhtB, NULL, NULL)) {
 80035e2:	2200      	movs	r2, #0
 80035e4:	2100      	movs	r1, #0
 80035e6:	4817      	ldr	r0, [pc, #92]	; (8003644 <sistema_verificar_componentes+0x154>)
 80035e8:	f7fd fdc8 	bl	800117c <DHT22_ReadSimple>
 80035ec:	4603      	mov	r3, r0
 80035ee:	f083 0301 	eor.w	r3, r3, #1
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d006      	beq.n	8003606 <sistema_verificar_componentes+0x116>
        uart_print("[ERROR] Sensor DHT22 camara no responde\n");
 80035f8:	4813      	ldr	r0, [pc, #76]	; (8003648 <sistema_verificar_componentes+0x158>)
 80035fa:	f000 fc77 	bl	8003eec <uart_print>
        estado_ok = false;
 80035fe:	2300      	movs	r3, #0
 8003600:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003604:	e002      	b.n	800360c <sistema_verificar_componentes+0x11c>
    } else {
        uart_print("[OK] Sensor DHT22 camara funcionando\n");
 8003606:	4811      	ldr	r0, [pc, #68]	; (800364c <sistema_verificar_componentes+0x15c>)
 8003608:	f000 fc70 	bl	8003eec <uart_print>
    }

    return estado_ok;  // Se puede ignorar si quieres que el sistema continúe de todos modos
 800360c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003610:	4618      	mov	r0, r3
 8003612:	3730      	adds	r7, #48	; 0x30
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	08011f30 	.word	0x08011f30
 800361c:	08011f54 	.word	0x08011f54
 8003620:	08011f78 	.word	0x08011f78
 8003624:	08011fa4 	.word	0x08011fa4
 8003628:	2000206c 	.word	0x2000206c
 800362c:	08011fc8 	.word	0x08011fc8
 8003630:	08011fec 	.word	0x08011fec
 8003634:	20002174 	.word	0x20002174
 8003638:	2000205c 	.word	0x2000205c
 800363c:	08012030 	.word	0x08012030
 8003640:	0801205c 	.word	0x0801205c
 8003644:	20002064 	.word	0x20002064
 8003648:	08012084 	.word	0x08012084
 800364c:	080120b0 	.word	0x080120b0

08003650 <sps30_send_command>:
#define DELAY_STOP_MEASUREMENT         0

#define CLEAR_VAR                      0

// Implementación de las funciones del objeto SPS30
void sps30_send_command(SPS30 * self, const uint8_t * command, uint16_t commandSize) {
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	4613      	mov	r3, r2
 800365c:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit(self->huart, command, commandSize, 100);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6818      	ldr	r0, [r3, #0]
 8003662:	88fa      	ldrh	r2, [r7, #6]
 8003664:	2364      	movs	r3, #100	; 0x64
 8003666:	68b9      	ldr	r1, [r7, #8]
 8003668:	f005 f86d 	bl	8008746 <HAL_UART_Transmit>
}
 800366c:	bf00      	nop
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <sps30_receive_async>:

void sps30_receive_async(SPS30 * self, uint8_t * dataBuffer, uint16_t bufferSize) {
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	4613      	mov	r3, r2
 8003680:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Receive(self->huart, dataBuffer, bufferSize, 100);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6818      	ldr	r0, [r3, #0]
 8003686:	88fa      	ldrh	r2, [r7, #6]
 8003688:	2364      	movs	r3, #100	; 0x64
 800368a:	68b9      	ldr	r1, [r7, #8]
 800368c:	f005 f8ed 	bl	800886a <HAL_UART_Receive>
}
 8003690:	bf00      	nop
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <sps30_send_receive>:

bool sps30_send_receive(SPS30 * self, const uint8_t * command, uint16_t commandSize,
                        uint8_t * dataBuffer, uint16_t bufferSize) {
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	603b      	str	r3, [r7, #0]
 80036a4:	4613      	mov	r3, r2
 80036a6:	80fb      	strh	r3, [r7, #6]
    if (HAL_UART_Transmit(self->huart, command, commandSize, 100) != HAL_OK) {
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6818      	ldr	r0, [r3, #0]
 80036ac:	88fa      	ldrh	r2, [r7, #6]
 80036ae:	2364      	movs	r3, #100	; 0x64
 80036b0:	68b9      	ldr	r1, [r7, #8]
 80036b2:	f005 f848 	bl	8008746 <HAL_UART_Transmit>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <sps30_send_receive+0x28>
        return false;
 80036bc:	2300      	movs	r3, #0
 80036be:	e00c      	b.n	80036da <sps30_send_receive+0x42>
    }

    if (HAL_UART_Receive(self->huart, dataBuffer, bufferSize, 100) != HAL_OK) {
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6818      	ldr	r0, [r3, #0]
 80036c4:	8b3a      	ldrh	r2, [r7, #24]
 80036c6:	2364      	movs	r3, #100	; 0x64
 80036c8:	6839      	ldr	r1, [r7, #0]
 80036ca:	f005 f8ce 	bl	800886a <HAL_UART_Receive>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <sps30_send_receive+0x40>
        return false;
 80036d4:	2300      	movs	r3, #0
 80036d6:	e000      	b.n	80036da <sps30_send_receive+0x42>
    }

    return true;
 80036d8:	2301      	movs	r3, #1
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
	...

080036e4 <sps30_start_measurement>:

void sps30_start_measurement(SPS30 * self) {
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
    uint8_t startCmd[] = SPS30_FRAME_START_MEASUREMENT; // Comando para iniciar la medición
 80036ec:	4a12      	ldr	r2, [pc, #72]	; (8003738 <sps30_start_measurement+0x54>)
 80036ee:	f107 0310 	add.w	r3, r7, #16
 80036f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80036f6:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t dataBuf[BUFFER_SIZE] = {0};      // Buffer para almacenar la respuesta del sensor
 80036fa:	2300      	movs	r3, #0
 80036fc:	60bb      	str	r3, [r7, #8]
 80036fe:	f107 030c 	add.w	r3, r7, #12
 8003702:	2100      	movs	r1, #0
 8003704:	460a      	mov	r2, r1
 8003706:	801a      	strh	r2, [r3, #0]
 8003708:	460a      	mov	r2, r1
 800370a:	709a      	strb	r2, [r3, #2]
    //char respuestaStr[BUFFER_SIZE_RESPONSE]; // Buffer para el mensaje de longitud de respuesta

    // Envío del comando de inicio de medición
    // uart_print(MSG_INICIO_MEDICION);               // Notifica por UART el inicio de la operación
    // uart_vector_print(sizeof(startCmd), startCmd); // Muestra el comando enviado
    self->send_command(self, startCmd, sizeof(startCmd)); // Envía el comando al sensor SPS30
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003710:	f107 0110 	add.w	r1, r7, #16
 8003714:	2208      	movs	r2, #8
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	4798      	blx	r3
    HAL_Delay(DELAY_START_MEASUREMENT); // Espera para el procesamiento del comando
 800371a:	2002      	movs	r0, #2
 800371c:	f001 fc50 	bl	8004fc0 <HAL_Delay>

    // Recepción y procesamiento de la respuesta
    self->receive_async(self, dataBuf, sizeof(dataBuf));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003724:	f107 0108 	add.w	r1, r7, #8
 8003728:	2207      	movs	r2, #7
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	4798      	blx	r3
 //   int longRespuesta = SHDLC_CalculateDataSize(
   //     dataBuf, sizeof(dataBuf)); // Calcula la longitud de los datos útiles
    // snprintf(respuestaStr, sizeof(respuestaStr), MENSAJE_SIZE_RESPUESTA, longRespuesta);  //
    // Formatea el mensaje de longitud uart_print(respuestaStr); // Imprime la longitud de la
    // respuesta
}
 800372e:	bf00      	nop
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	0801218c 	.word	0x0801218c

0800373c <sps30_stop_measurement>:

void sps30_stop_measurement(SPS30 * self) {
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
    uint8_t stopCmd[] = SPS30_FRAME_STOP_MEASUREMENT;
 8003744:	4a10      	ldr	r2, [pc, #64]	; (8003788 <sps30_stop_measurement+0x4c>)
 8003746:	f107 0310 	add.w	r3, r7, #16
 800374a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800374e:	6018      	str	r0, [r3, #0]
 8003750:	3304      	adds	r3, #4
 8003752:	8019      	strh	r1, [r3, #0]
    uint8_t dataBuf[BUFFER_SIZE_STOP_MEASUREMENT] = {0};
 8003754:	2300      	movs	r3, #0
 8003756:	60bb      	str	r3, [r7, #8]
 8003758:	2300      	movs	r3, #0
 800375a:	60fb      	str	r3, [r7, #12]
   // char respuestaStr[BUFFER_SIZE_RESPONSE];

    // uart_print(MSG_SOLICITAR);
    // uart_vector_print(sizeof(stopCmd), stopCmd);
    self->send_command(self, stopCmd, sizeof(stopCmd));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003760:	f107 0110 	add.w	r1, r7, #16
 8003764:	2206      	movs	r2, #6
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	4798      	blx	r3
    HAL_Delay(DELAY_STOP_MEASUREMENT);
 800376a:	2000      	movs	r0, #0
 800376c:	f001 fc28 	bl	8004fc0 <HAL_Delay>

    self->receive_async(self, dataBuf, sizeof(dataBuf));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003774:	f107 0108 	add.w	r1, r7, #8
 8003778:	2208      	movs	r2, #8
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	4798      	blx	r3
    // uart_vector_print(sizeof(dataBuf), dataBuf);

  //  int longRespuesta = SHDLC_CalculateDataSize(dataBuf, sizeof(dataBuf));
    // snprintf(respuestaStr, sizeof(respuestaStr), MENSAJE_SIZE_RESPUESTA, longRespuesta);
    // uart_print(respuestaStr);
}
 800377e:	bf00      	nop
 8003780:	3718      	adds	r7, #24
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	08012194 	.word	0x08012194

0800378c <sps30_sleep>:

void sps30_sleep(SPS30 * self) {
 800378c:	b590      	push	{r4, r7, lr}
 800378e:	b089      	sub	sp, #36	; 0x24
 8003790:	af02      	add	r7, sp, #8
 8003792:	6078      	str	r0, [r7, #4]
    uint8_t sleepCmd[] = SPS30_FRAME_SLEEP;
 8003794:	4a0d      	ldr	r2, [pc, #52]	; (80037cc <sps30_sleep+0x40>)
 8003796:	f107 0310 	add.w	r3, r7, #16
 800379a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800379e:	6018      	str	r0, [r3, #0]
 80037a0:	3304      	adds	r3, #4
 80037a2:	8019      	strh	r1, [r3, #0]
    uint8_t dataBuf[BUFFER_SIZE_SLEEP] = {0};
 80037a4:	2300      	movs	r3, #0
 80037a6:	60bb      	str	r3, [r7, #8]
 80037a8:	2300      	movs	r3, #0
 80037aa:	60fb      	str	r3, [r7, #12]
  //  char respuestaStr[BUFFER_SIZE_RESPONSE];

    // uart_print(MSG_SOLICITAR);
    // uart_vector_print(sizeof(sleepCmd), sleepCmd);
    self->send_receive(self, sleepCmd, sizeof(sleepCmd), dataBuf, sizeof(dataBuf));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80037b0:	f107 0308 	add.w	r3, r7, #8
 80037b4:	f107 0110 	add.w	r1, r7, #16
 80037b8:	2208      	movs	r2, #8
 80037ba:	9200      	str	r2, [sp, #0]
 80037bc:	2206      	movs	r2, #6
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	47a0      	blx	r4
    // uart_vector_print(sizeof(dataBuf), dataBuf);

//    int longRespuesta = SHDLC_CalculateDataSize(dataBuf, sizeof(dataBuf));
    // snprintf(respuestaStr, sizeof(respuestaStr), MENSAJE_SIZE_RESPUESTA, longRespuesta);
    // uart_print(respuestaStr);
}
 80037c2:	bf00      	nop
 80037c4:	371c      	adds	r7, #28
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd90      	pop	{r4, r7, pc}
 80037ca:	bf00      	nop
 80037cc:	0801219c 	.word	0x0801219c

080037d0 <sps30_read_data>:

void sps30_read_data(SPS30 * self) {
 80037d0:	b590      	push	{r4, r7, lr}
 80037d2:	b0bb      	sub	sp, #236	; 0xec
 80037d4:	af02      	add	r7, sp, #8
 80037d6:	6078      	str	r0, [r7, #4]
    uint8_t readCmd[] = SPS30_FRAME_READ_MEASUREMENT;
 80037d8:	4a29      	ldr	r2, [pc, #164]	; (8003880 <sps30_read_data+0xb0>)
 80037da:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80037de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80037e2:	6018      	str	r0, [r3, #0]
 80037e4:	3304      	adds	r3, #4
 80037e6:	8019      	strh	r1, [r3, #0]
    uint8_t dataBuf[BUFFER_SIZE_READ_DATA] = {0};
 80037e8:	2300      	movs	r3, #0
 80037ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80037ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80037f2:	2238      	movs	r2, #56	; 0x38
 80037f4:	2100      	movs	r1, #0
 80037f6:	4618      	mov	r0, r3
 80037f8:	f008 fd4c 	bl	800c294 <memset>
    uint8_t originalData[BUFFER_SIZE_READ_DATA] = {0};
 80037fc:	2300      	movs	r3, #0
 80037fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003800:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003804:	2238      	movs	r2, #56	; 0x38
 8003806:	2100      	movs	r1, #0
 8003808:	4618      	mov	r0, r3
 800380a:	f008 fd43 	bl	800c294 <memset>
    ConcentracionesPM concentraciones;
 //   char respuestaStr[BUFFER_SIZE_RESPONSE];

    // uart_print(MSG_SOLICITAR);
    // uart_vector_print(sizeof(readCmd), readCmd);
    self->send_receive(self, readCmd, sizeof(readCmd), dataBuf, sizeof(dataBuf));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8003812:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003816:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 800381a:	223c      	movs	r2, #60	; 0x3c
 800381c:	9200      	str	r2, [sp, #0]
 800381e:	2206      	movs	r2, #6
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	47a0      	blx	r4
    // uart_print(MSG_RESPUESTA);
    // uart_vector_print(sizeof(dataBuf), dataBuf);

    SHDLC_revertByteStuffing(dataBuf, sizeof(dataBuf), originalData);
 8003824:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003828:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800382c:	213c      	movs	r1, #60	; 0x3c
 800382e:	4618      	mov	r0, r3
 8003830:	f7ff fd9e 	bl	8003370 <SHDLC_revertByteStuffing>
    // uart_print(MSG_RESPUESTA_CON_BYTESTUFFING);
    // uart_vector_print(sizeof(originalData), originalData);

    int longRespuesta = SHDLC_CalculateDataSize(originalData, sizeof(originalData));
 8003834:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003838:	213c      	movs	r1, #60	; 0x3c
 800383a:	4618      	mov	r0, r3
 800383c:	f7ff fd4c 	bl	80032d8 <SHDLC_CalculateDataSize>
 8003840:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    // snprintf(respuestaStr, sizeof(respuestaStr), MSG_LONGITUD_RESPUESTA, longRespuesta);
    // uart_print(respuestaStr);

    Shdlc_FrameMiso Newframe = {};
 8003844:	f107 0308 	add.w	r3, r7, #8
 8003848:	2241      	movs	r2, #65	; 0x41
 800384a:	2100      	movs	r1, #0
 800384c:	4618      	mov	r0, r3
 800384e:	f008 fd21 	bl	800c294 <memset>
    SHDLC_LoadMyVector(&Newframe, originalData, longRespuesta);
 8003852:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003856:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800385a:	f107 0308 	add.w	r3, r7, #8
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff fd04 	bl	800326c <SHDLC_LoadMyVector>
    // uart_print(MSG_DATOS_RESPUESTA);
    // uart_vector_print(Newframe.lon, Newframe.myVector);

    SHDLC_llenarConcentraciones(&concentraciones, Newframe.myVector);
 8003864:	f107 0308 	add.w	r3, r7, #8
 8003868:	1cda      	adds	r2, r3, #3
 800386a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800386e:	4611      	mov	r1, r2
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff fe07 	bl	8003484 <SHDLC_llenarConcentraciones>
    // uart_print(buffer);
    // sprintf(buffer, FORMATO_CONCENTRACION_PM4_0, concentraciones.pm4_0);
    // uart_print(buffer);
    // sprintf(buffer, FORMATO_CONCENTRACION_PM10, concentraciones.pm10);
    // uart_print(buffer);
}
 8003876:	bf00      	nop
 8003878:	37e4      	adds	r7, #228	; 0xe4
 800387a:	46bd      	mov	sp, r7
 800387c:	bd90      	pop	{r4, r7, pc}
 800387e:	bf00      	nop
 8003880:	080121a4 	.word	0x080121a4

08003884 <sps30_get_concentrations>:

ConcentracionesPM sps30_get_concentrations(SPS30 * self) {
 8003884:	b590      	push	{r4, r7, lr}
 8003886:	b0c3      	sub	sp, #268	; 0x10c
 8003888:	af02      	add	r7, sp, #8
 800388a:	6178      	str	r0, [r7, #20]
    uint8_t readCmd[] = SPS30_FRAME_READ_MEASUREMENT;
 800388c:	4a37      	ldr	r2, [pc, #220]	; (800396c <sps30_get_concentrations+0xe8>)
 800388e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003892:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003896:	6018      	str	r0, [r3, #0]
 8003898:	3304      	adds	r3, #4
 800389a:	8019      	strh	r1, [r3, #0]
    uint8_t dataBuf[BUFFER_SIZE_READ_DATA] = {0};
 800389c:	2300      	movs	r3, #0
 800389e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80038a2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80038a6:	2238      	movs	r2, #56	; 0x38
 80038a8:	2100      	movs	r1, #0
 80038aa:	4618      	mov	r0, r3
 80038ac:	f008 fcf2 	bl	800c294 <memset>
    uint8_t originalData[BUFFER_SIZE_READ_DATA] = {0};
 80038b0:	2300      	movs	r3, #0
 80038b2:	673b      	str	r3, [r7, #112]	; 0x70
 80038b4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80038b8:	2238      	movs	r2, #56	; 0x38
 80038ba:	2100      	movs	r1, #0
 80038bc:	4618      	mov	r0, r3
 80038be:	f008 fce9 	bl	800c294 <memset>
    ConcentracionesPM concentraciones;

    self->send_receive(self, readCmd, sizeof(readCmd), dataBuf, sizeof(dataBuf));
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80038c6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038ca:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 80038ce:	223c      	movs	r2, #60	; 0x3c
 80038d0:	9200      	str	r2, [sp, #0]
 80038d2:	2206      	movs	r2, #6
 80038d4:	6978      	ldr	r0, [r7, #20]
 80038d6:	47a0      	blx	r4
    SHDLC_revertByteStuffing(dataBuf, sizeof(dataBuf), originalData);
 80038d8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80038dc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038e0:	213c      	movs	r1, #60	; 0x3c
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7ff fd44 	bl	8003370 <SHDLC_revertByteStuffing>

    Shdlc_FrameMiso Newframe = {};
 80038e8:	f107 031c 	add.w	r3, r7, #28
 80038ec:	2241      	movs	r2, #65	; 0x41
 80038ee:	2100      	movs	r1, #0
 80038f0:	4618      	mov	r0, r3
 80038f2:	f008 fccf 	bl	800c294 <memset>
    SHDLC_LoadMyVector(&Newframe, originalData,
                       SHDLC_CalculateDataSize(originalData, sizeof(originalData)));
 80038f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80038fa:	213c      	movs	r1, #60	; 0x3c
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff fceb 	bl	80032d8 <SHDLC_CalculateDataSize>
 8003902:	4603      	mov	r3, r0
    SHDLC_LoadMyVector(&Newframe, originalData,
 8003904:	461a      	mov	r2, r3
 8003906:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800390a:	f107 031c 	add.w	r3, r7, #28
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff fcac 	bl	800326c <SHDLC_LoadMyVector>
    SHDLC_llenarConcentraciones(&concentraciones, Newframe.myVector);
 8003914:	f107 031c 	add.w	r3, r7, #28
 8003918:	1cda      	adds	r2, r3, #3
 800391a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800391e:	4611      	mov	r1, r2
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff fdaf 	bl	8003484 <SHDLC_llenarConcentraciones>

    return concentraciones;
 8003926:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 800392a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800392e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003930:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003934:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8003938:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800393c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8003940:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003944:	ee06 0a10 	vmov	s12, r0
 8003948:	ee06 1a90 	vmov	s13, r1
 800394c:	ee07 2a10 	vmov	s14, r2
 8003950:	ee07 3a90 	vmov	s15, r3
}
 8003954:	eeb0 0a46 	vmov.f32	s0, s12
 8003958:	eef0 0a66 	vmov.f32	s1, s13
 800395c:	eeb0 1a47 	vmov.f32	s2, s14
 8003960:	eef0 1a67 	vmov.f32	s3, s15
 8003964:	f507 7782 	add.w	r7, r7, #260	; 0x104
 8003968:	46bd      	mov	sp, r7
 800396a:	bd90      	pop	{r4, r7, pc}
 800396c:	080121a4 	.word	0x080121a4

08003970 <sps30_serial_number>:

bool sps30_serial_number(SPS30 * self, char * out_serial) {
 8003970:	b590      	push	{r4, r7, lr}
 8003972:	b091      	sub	sp, #68	; 0x44
 8003974:	af02      	add	r7, sp, #8
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
    static const uint8_t cmd_serial[] = SPS30_FRAME_SERIAL_NUMBER;
    uint8_t respuesta[48] = {0};
 800397a:	2300      	movs	r3, #0
 800397c:	60bb      	str	r3, [r7, #8]
 800397e:	f107 030c 	add.w	r3, r7, #12
 8003982:	222c      	movs	r2, #44	; 0x2c
 8003984:	2100      	movs	r1, #0
 8003986:	4618      	mov	r0, r3
 8003988:	f008 fc84 	bl	800c294 <memset>
    if (respuesta[0] != 0xD3 || respuesta[1] != 0x00) {
        return false;
    }
*/

    self->send_receive(self, cmd_serial, sizeof(cmd_serial), respuesta, sizeof(respuesta));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8003990:	f107 0308 	add.w	r3, r7, #8
 8003994:	2230      	movs	r2, #48	; 0x30
 8003996:	9200      	str	r2, [sp, #0]
 8003998:	2207      	movs	r2, #7
 800399a:	490c      	ldr	r1, [pc, #48]	; (80039cc <sps30_serial_number+0x5c>)
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	47a0      	blx	r4

    if (respuesta[0] == '\0') {
 80039a0:	7a3b      	ldrb	r3, [r7, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <sps30_serial_number+0x3a>
        return false;
 80039a6:	2300      	movs	r3, #0
 80039a8:	e00c      	b.n	80039c4 <sps30_serial_number+0x54>
    }
    // Copiar serial: desde byte 4 hasta byte 4+32 (o menos)
    strncpy(out_serial, (const char *)&respuesta[5], SERIAL_BUFFER_LEN - 1);
 80039aa:	f107 0308 	add.w	r3, r7, #8
 80039ae:	3305      	adds	r3, #5
 80039b0:	2220      	movs	r2, #32
 80039b2:	4619      	mov	r1, r3
 80039b4:	6838      	ldr	r0, [r7, #0]
 80039b6:	f009 fd17 	bl	800d3e8 <strncpy>
    out_serial[SERIAL_BUFFER_LEN - 1] = '\0';  // Terminar manualmente por seguridad
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	3320      	adds	r3, #32
 80039be:	2200      	movs	r2, #0
 80039c0:	701a      	strb	r2, [r3, #0]

    return true;
 80039c2:	2301      	movs	r3, #1
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	373c      	adds	r7, #60	; 0x3c
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd90      	pop	{r4, r7, pc}
 80039cc:	08012684 	.word	0x08012684

080039d0 <sps30_wake_up>:



void sps30_wake_up(SPS30 * self) {
 80039d0:	b590      	push	{r4, r7, lr}
 80039d2:	b089      	sub	sp, #36	; 0x24
 80039d4:	af02      	add	r7, sp, #8
 80039d6:	6078      	str	r0, [r7, #4]
    uint8_t Pulse = SPS30_PULSE_WAKE_UP;
 80039d8:	23ff      	movs	r3, #255	; 0xff
 80039da:	75fb      	strb	r3, [r7, #23]
    uint8_t readCmd[] = SPS30_FRAME_WAKE_UP;
 80039dc:	4a13      	ldr	r2, [pc, #76]	; (8003a2c <sps30_wake_up+0x5c>)
 80039de:	f107 0310 	add.w	r3, r7, #16
 80039e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039e6:	6018      	str	r0, [r3, #0]
 80039e8:	3304      	adds	r3, #4
 80039ea:	8019      	strh	r1, [r3, #0]
 80039ec:	3302      	adds	r3, #2
 80039ee:	0c0a      	lsrs	r2, r1, #16
 80039f0:	701a      	strb	r2, [r3, #0]
    uint8_t dataBuf[BUFFER_SIZE_WAKEUP] = {0};
 80039f2:	2300      	movs	r3, #0
 80039f4:	60bb      	str	r3, [r7, #8]
 80039f6:	2300      	movs	r3, #0
 80039f8:	60fb      	str	r3, [r7, #12]
 //   char respuestaStr[BUFFER_SIZE_RESPONSE];

    // uart_print(MSG_SOLICITAR);
    // uart_vector_print(sizeof(readCmd), readCmd);
    self->send_command(self, &Pulse, sizeof(Pulse));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fe:	f107 0117 	add.w	r1, r7, #23
 8003a02:	2201      	movs	r2, #1
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	4798      	blx	r3
    HAL_Delay(DELAY_WAKEUP);
 8003a08:	2032      	movs	r0, #50	; 0x32
 8003a0a:	f001 fad9 	bl	8004fc0 <HAL_Delay>
    self->send_receive(self, readCmd, sizeof(readCmd), dataBuf, sizeof(dataBuf));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8003a12:	f107 0308 	add.w	r3, r7, #8
 8003a16:	f107 0110 	add.w	r1, r7, #16
 8003a1a:	2208      	movs	r2, #8
 8003a1c:	9200      	str	r2, [sp, #0]
 8003a1e:	2207      	movs	r2, #7
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	47a0      	blx	r4
    // uart_vector_print(sizeof(dataBuf), dataBuf);

 //   int longRespuesta = SHDLC_CalculateDataSize(dataBuf, sizeof(dataBuf));
    // snprintf(respuestaStr, sizeof(respuestaStr), MENSAJE_SIZE_RESPUESTA, longRespuesta);
    // uart_print(respuestaStr);
}
 8003a24:	bf00      	nop
 8003a26:	371c      	adds	r7, #28
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd90      	pop	{r4, r7, pc}
 8003a2c:	080121ac 	.word	0x080121ac

08003a30 <SPS30_init>:

void SPS30_init(SPS30 * self, UART_HandleTypeDef * huart) {
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
    self->huart = huart;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	601a      	str	r2, [r3, #0]
    self->send_command = sps30_send_command;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a11      	ldr	r2, [pc, #68]	; (8003a88 <SPS30_init+0x58>)
 8003a44:	629a      	str	r2, [r3, #40]	; 0x28
    self->receive_async = sps30_receive_async;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a10      	ldr	r2, [pc, #64]	; (8003a8c <SPS30_init+0x5c>)
 8003a4a:	62da      	str	r2, [r3, #44]	; 0x2c
    self->send_receive = sps30_send_receive;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a10      	ldr	r2, [pc, #64]	; (8003a90 <SPS30_init+0x60>)
 8003a50:	631a      	str	r2, [r3, #48]	; 0x30
    self->start_measurement = sps30_start_measurement;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a0f      	ldr	r2, [pc, #60]	; (8003a94 <SPS30_init+0x64>)
 8003a56:	635a      	str	r2, [r3, #52]	; 0x34
    self->stop_measurement = sps30_stop_measurement;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a0f      	ldr	r2, [pc, #60]	; (8003a98 <SPS30_init+0x68>)
 8003a5c:	639a      	str	r2, [r3, #56]	; 0x38
    self->sleep = sps30_sleep;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a0e      	ldr	r2, [pc, #56]	; (8003a9c <SPS30_init+0x6c>)
 8003a62:	63da      	str	r2, [r3, #60]	; 0x3c
    self->read_data = sps30_read_data;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a0e      	ldr	r2, [pc, #56]	; (8003aa0 <SPS30_init+0x70>)
 8003a68:	641a      	str	r2, [r3, #64]	; 0x40
    self->serial_number = sps30_serial_number;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a0d      	ldr	r2, [pc, #52]	; (8003aa4 <SPS30_init+0x74>)
 8003a6e:	645a      	str	r2, [r3, #68]	; 0x44
    self->wake_up = sps30_wake_up;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a0d      	ldr	r2, [pc, #52]	; (8003aa8 <SPS30_init+0x78>)
 8003a74:	649a      	str	r2, [r3, #72]	; 0x48
    self->get_concentrations = sps30_get_concentrations;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a0c      	ldr	r2, [pc, #48]	; (8003aac <SPS30_init+0x7c>)
 8003a7a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	08003651 	.word	0x08003651
 8003a8c:	08003675 	.word	0x08003675
 8003a90:	08003699 	.word	0x08003699
 8003a94:	080036e5 	.word	0x080036e5
 8003a98:	0800373d 	.word	0x0800373d
 8003a9c:	0800378d 	.word	0x0800378d
 8003aa0:	080037d1 	.word	0x080037d1
 8003aa4:	08003971 	.word	0x08003971
 8003aa8:	080039d1 	.word	0x080039d1
 8003aac:	08003885 	.word	0x08003885

08003ab0 <inicializar_sensores_sps30>:
SensorSPS30 sensores_sps30[NUM_SENSORES_SPS30];
int sensores_disponibles = 0;

/* === Funciones ============================================================================== */

void inicializar_sensores_sps30(void) {
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
    sensores_disponibles = 0;
 8003ab4:	4b38      	ldr	r3, [pc, #224]	; (8003b98 <inicializar_sensores_sps30+0xe8>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]

#if 1 // UART5 está habilitado
    sensores_sps30[sensores_disponibles].id = ID_SENSOR_UNO;
 8003aba:	4b37      	ldr	r3, [pc, #220]	; (8003b98 <inicializar_sensores_sps30+0xe8>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a37      	ldr	r2, [pc, #220]	; (8003b9c <inicializar_sensores_sps30+0xec>)
 8003ac0:	2158      	movs	r1, #88	; 0x58
 8003ac2:	fb01 f303 	mul.w	r3, r1, r3
 8003ac6:	4413      	add	r3, r2
 8003ac8:	3350      	adds	r3, #80	; 0x50
 8003aca:	2201      	movs	r2, #1
 8003acc:	701a      	strb	r2, [r3, #0]
    sensores_sps30[sensores_disponibles].uart = &huart5;
 8003ace:	4b32      	ldr	r3, [pc, #200]	; (8003b98 <inicializar_sensores_sps30+0xe8>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a32      	ldr	r2, [pc, #200]	; (8003b9c <inicializar_sensores_sps30+0xec>)
 8003ad4:	2158      	movs	r1, #88	; 0x58
 8003ad6:	fb01 f303 	mul.w	r3, r1, r3
 8003ada:	4413      	add	r3, r2
 8003adc:	3354      	adds	r3, #84	; 0x54
 8003ade:	4a30      	ldr	r2, [pc, #192]	; (8003ba0 <inicializar_sensores_sps30+0xf0>)
 8003ae0:	601a      	str	r2, [r3, #0]
    SPS30_init(&sensores_sps30[sensores_disponibles].sensor, &huart5);
 8003ae2:	4b2d      	ldr	r3, [pc, #180]	; (8003b98 <inicializar_sensores_sps30+0xe8>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2258      	movs	r2, #88	; 0x58
 8003ae8:	fb02 f303 	mul.w	r3, r2, r3
 8003aec:	4a2b      	ldr	r2, [pc, #172]	; (8003b9c <inicializar_sensores_sps30+0xec>)
 8003aee:	4413      	add	r3, r2
 8003af0:	492b      	ldr	r1, [pc, #172]	; (8003ba0 <inicializar_sensores_sps30+0xf0>)
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff ff9c 	bl	8003a30 <SPS30_init>
    sensores_disponibles++;
 8003af8:	4b27      	ldr	r3, [pc, #156]	; (8003b98 <inicializar_sensores_sps30+0xe8>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	3301      	adds	r3, #1
 8003afe:	4a26      	ldr	r2, [pc, #152]	; (8003b98 <inicializar_sensores_sps30+0xe8>)
 8003b00:	6013      	str	r3, [r2, #0]
#endif

#if 1 // Habilitar cuando uses UART7
    sensores_sps30[sensores_disponibles].id = ID_SENSOR_DOS;
 8003b02:	4b25      	ldr	r3, [pc, #148]	; (8003b98 <inicializar_sensores_sps30+0xe8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a25      	ldr	r2, [pc, #148]	; (8003b9c <inicializar_sensores_sps30+0xec>)
 8003b08:	2158      	movs	r1, #88	; 0x58
 8003b0a:	fb01 f303 	mul.w	r3, r1, r3
 8003b0e:	4413      	add	r3, r2
 8003b10:	3350      	adds	r3, #80	; 0x50
 8003b12:	2202      	movs	r2, #2
 8003b14:	701a      	strb	r2, [r3, #0]
    sensores_sps30[sensores_disponibles].uart = &huart7;
 8003b16:	4b20      	ldr	r3, [pc, #128]	; (8003b98 <inicializar_sensores_sps30+0xe8>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a20      	ldr	r2, [pc, #128]	; (8003b9c <inicializar_sensores_sps30+0xec>)
 8003b1c:	2158      	movs	r1, #88	; 0x58
 8003b1e:	fb01 f303 	mul.w	r3, r1, r3
 8003b22:	4413      	add	r3, r2
 8003b24:	3354      	adds	r3, #84	; 0x54
 8003b26:	4a1f      	ldr	r2, [pc, #124]	; (8003ba4 <inicializar_sensores_sps30+0xf4>)
 8003b28:	601a      	str	r2, [r3, #0]
    SPS30_init(&sensores_sps30[sensores_disponibles].sensor, &huart7);
 8003b2a:	4b1b      	ldr	r3, [pc, #108]	; (8003b98 <inicializar_sensores_sps30+0xe8>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2258      	movs	r2, #88	; 0x58
 8003b30:	fb02 f303 	mul.w	r3, r2, r3
 8003b34:	4a19      	ldr	r2, [pc, #100]	; (8003b9c <inicializar_sensores_sps30+0xec>)
 8003b36:	4413      	add	r3, r2
 8003b38:	491a      	ldr	r1, [pc, #104]	; (8003ba4 <inicializar_sensores_sps30+0xf4>)
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff ff78 	bl	8003a30 <SPS30_init>
    sensores_disponibles++;
 8003b40:	4b15      	ldr	r3, [pc, #84]	; (8003b98 <inicializar_sensores_sps30+0xe8>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	3301      	adds	r3, #1
 8003b46:	4a14      	ldr	r2, [pc, #80]	; (8003b98 <inicializar_sensores_sps30+0xe8>)
 8003b48:	6013      	str	r3, [r2, #0]
#endif

#if 1 // Habilitar cuando uses UART8
    sensores_sps30[sensores_disponibles].id = ID_SENSOR_TRES;
 8003b4a:	4b13      	ldr	r3, [pc, #76]	; (8003b98 <inicializar_sensores_sps30+0xe8>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a13      	ldr	r2, [pc, #76]	; (8003b9c <inicializar_sensores_sps30+0xec>)
 8003b50:	2158      	movs	r1, #88	; 0x58
 8003b52:	fb01 f303 	mul.w	r3, r1, r3
 8003b56:	4413      	add	r3, r2
 8003b58:	3350      	adds	r3, #80	; 0x50
 8003b5a:	2203      	movs	r2, #3
 8003b5c:	701a      	strb	r2, [r3, #0]
    sensores_sps30[sensores_disponibles].uart = &huart1;
 8003b5e:	4b0e      	ldr	r3, [pc, #56]	; (8003b98 <inicializar_sensores_sps30+0xe8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a0e      	ldr	r2, [pc, #56]	; (8003b9c <inicializar_sensores_sps30+0xec>)
 8003b64:	2158      	movs	r1, #88	; 0x58
 8003b66:	fb01 f303 	mul.w	r3, r1, r3
 8003b6a:	4413      	add	r3, r2
 8003b6c:	3354      	adds	r3, #84	; 0x54
 8003b6e:	4a0e      	ldr	r2, [pc, #56]	; (8003ba8 <inicializar_sensores_sps30+0xf8>)
 8003b70:	601a      	str	r2, [r3, #0]
    SPS30_init(&sensores_sps30[sensores_disponibles].sensor, &huart1);
 8003b72:	4b09      	ldr	r3, [pc, #36]	; (8003b98 <inicializar_sensores_sps30+0xe8>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2258      	movs	r2, #88	; 0x58
 8003b78:	fb02 f303 	mul.w	r3, r2, r3
 8003b7c:	4a07      	ldr	r2, [pc, #28]	; (8003b9c <inicializar_sensores_sps30+0xec>)
 8003b7e:	4413      	add	r3, r2
 8003b80:	4909      	ldr	r1, [pc, #36]	; (8003ba8 <inicializar_sensores_sps30+0xf8>)
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7ff ff54 	bl	8003a30 <SPS30_init>
    sensores_disponibles++;
 8003b88:	4b03      	ldr	r3, [pc, #12]	; (8003b98 <inicializar_sensores_sps30+0xe8>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	4a02      	ldr	r2, [pc, #8]	; (8003b98 <inicializar_sensores_sps30+0xe8>)
 8003b90:	6013      	str	r3, [r2, #0]
#endif
}
 8003b92:	bf00      	nop
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	20002174 	.word	0x20002174
 8003b9c:	2000206c 	.word	0x2000206c
 8003ba0:	20002258 	.word	0x20002258
 8003ba4:	2000229c 	.word	0x2000229c
 8003ba8:	200022e0 	.word	0x200022e0

08003bac <rtc_external_available>:

/* === Función interna ============================================================= */
/**
 * @brief Verifica si el RTC externo responde por I2C
 */
static bool rtc_external_available(void) {
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
    return (HAL_I2C_IsDeviceReady(&RTC_I2C_HANDLER, RTC_I2C_ADDRESS, RTC_RETRIES, RTC_TIMEOUT_MS) ==
 8003bb0:	2364      	movs	r3, #100	; 0x64
 8003bb2:	2203      	movs	r2, #3
 8003bb4:	21d0      	movs	r1, #208	; 0xd0
 8003bb6:	4805      	ldr	r0, [pc, #20]	; (8003bcc <rtc_external_available+0x20>)
 8003bb8:	f002 fb58 	bl	800626c <HAL_I2C_IsDeviceReady>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	bf0c      	ite	eq
 8003bc2:	2301      	moveq	r3, #1
 8003bc4:	2300      	movne	r3, #0
 8003bc6:	b2db      	uxtb	r3, r3
            HAL_OK);
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	20002180 	.word	0x20002180

08003bd0 <rtc_auto_init>:

/**
 * @brief Inicializa automáticamente el RTC (externo o interno), y si está habilitado,
 *        configura la hora con el timestamp de compilación en caso de ser necesario.
 */
void rtc_auto_init(void) {
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
    if (rtc_external_available()) {
 8003bd4:	f7ff ffea 	bl	8003bac <rtc_external_available>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d006      	beq.n	8003bec <rtc_auto_init+0x1c>
        DS3231_Init(&RTC_I2C_HANDLER);
 8003bde:	4807      	ldr	r0, [pc, #28]	; (8003bfc <rtc_auto_init+0x2c>)
 8003be0:	f7ff f92a 	bl	8002e38 <DS3231_Init>
        active_rtc = RTC_SOURCE_EXTERNAL;
 8003be4:	4b06      	ldr	r3, [pc, #24]	; (8003c00 <rtc_auto_init+0x30>)
 8003be6:	2201      	movs	r2, #1
 8003be8:	701a      	strb	r2, [r3, #0]
    } else {
        MX_RTC_Init(); // RTC interno
        active_rtc = RTC_SOURCE_INTERNAL;
        // Se puede extender con lógica similar para fallback en RTC interno
    }
}
 8003bea:	e004      	b.n	8003bf6 <rtc_auto_init+0x26>
        MX_RTC_Init(); // RTC interno
 8003bec:	f000 fc98 	bl	8004520 <MX_RTC_Init>
        active_rtc = RTC_SOURCE_INTERNAL;
 8003bf0:	4b03      	ldr	r3, [pc, #12]	; (8003c00 <rtc_auto_init+0x30>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	701a      	strb	r2, [r3, #0]
}
 8003bf6:	bf00      	nop
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	20002180 	.word	0x20002180
 8003c00:	20002178 	.word	0x20002178

08003c04 <RTC_ReceiveTimeFromTerminal>:

/* === Interfaz de usuario por UART ================================================== */

bool RTC_ReceiveTimeFromTerminal(UART_HandleTypeDef * huart) {
 8003c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c06:	b0c3      	sub	sp, #268	; 0x10c
 8003c08:	af06      	add	r7, sp, #24
 8003c0a:	6078      	str	r0, [r7, #4]
    char rx_buffer[UART_INPUT_BUFFER_LEN] = {0};
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c12:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003c16:	2200      	movs	r2, #0
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	605a      	str	r2, [r3, #4]
 8003c1c:	609a      	str	r2, [r3, #8]
 8003c1e:	60da      	str	r2, [r3, #12]
 8003c20:	611a      	str	r2, [r3, #16]
 8003c22:	615a      	str	r2, [r3, #20]
 8003c24:	619a      	str	r2, [r3, #24]
    char debug_buf[UART_DEBUG_BUFFER_LEN];
    uint8_t idx = 0;
 8003c26:	2300      	movs	r3, #0
 8003c28:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    uint32_t start_tick = HAL_GetTick();
 8003c2c:	f001 f9bc 	bl	8004fa8 <HAL_GetTick>
 8003c30:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
    HAL_StatusTypeDef status;

    uart_print(RTC_PROMPT_MSG);
 8003c34:	489d      	ldr	r0, [pc, #628]	; (8003eac <RTC_ReceiveTimeFromTerminal+0x2a8>)
 8003c36:	f000 f959 	bl	8003eec <uart_print>

    while ((HAL_GetTick() - start_tick) < UART_INPUT_TIMEOUT_MS) {
 8003c3a:	e026      	b.n	8003c8a <RTC_ReceiveTimeFromTerminal+0x86>
        uint8_t ch;
        status = HAL_UART_Receive(huart, &ch, 1, UART_TIMEOUT_MS);
 8003c3c:	f107 010f 	add.w	r1, r7, #15
 8003c40:	2364      	movs	r3, #100	; 0x64
 8003c42:	2201      	movs	r2, #1
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f004 fe10 	bl	800886a <HAL_UART_Receive>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
        if (status == HAL_OK) {
 8003c50:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d118      	bne.n	8003c8a <RTC_ReceiveTimeFromTerminal+0x86>
            if (ch == ';') {
 8003c58:	7bfb      	ldrb	r3, [r7, #15]
 8003c5a:	2b3b      	cmp	r3, #59	; 0x3b
 8003c5c:	d107      	bne.n	8003c6e <RTC_ReceiveTimeFromTerminal+0x6a>
                rx_buffer[idx] = '\0';
 8003c5e:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8003c62:	33f0      	adds	r3, #240	; 0xf0
 8003c64:	443b      	add	r3, r7
 8003c66:	2200      	movs	r2, #0
 8003c68:	f803 2c2c 	strb.w	r2, [r3, #-44]
 8003c6c:	e017      	b.n	8003c9e <RTC_ReceiveTimeFromTerminal+0x9a>
                break;
            }
            if (idx < UART_INPUT_BUFFER_LEN - 1) {
 8003c6e:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8003c72:	2b1e      	cmp	r3, #30
 8003c74:	d809      	bhi.n	8003c8a <RTC_ReceiveTimeFromTerminal+0x86>
                rx_buffer[idx++] = ch;
 8003c76:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8003c7a:	1c5a      	adds	r2, r3, #1
 8003c7c:	f887 20ef 	strb.w	r2, [r7, #239]	; 0xef
 8003c80:	7bfa      	ldrb	r2, [r7, #15]
 8003c82:	33f0      	adds	r3, #240	; 0xf0
 8003c84:	443b      	add	r3, r7
 8003c86:	f803 2c2c 	strb.w	r2, [r3, #-44]
    while ((HAL_GetTick() - start_tick) < UART_INPUT_TIMEOUT_MS) {
 8003c8a:	f001 f98d 	bl	8004fa8 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	f247 522f 	movw	r2, #29999	; 0x752f
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d9ce      	bls.n	8003c3c <RTC_ReceiveTimeFromTerminal+0x38>
            }
        }
    }

    if (idx < 14) {
 8003c9e:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8003ca2:	2b0d      	cmp	r3, #13
 8003ca4:	d804      	bhi.n	8003cb0 <RTC_ReceiveTimeFromTerminal+0xac>
        uart_print(RTC_PARSE_FAIL_MSG);
 8003ca6:	4882      	ldr	r0, [pc, #520]	; (8003eb0 <RTC_ReceiveTimeFromTerminal+0x2ac>)
 8003ca8:	f000 f920 	bl	8003eec <uart_print>
        return false;
 8003cac:	2300      	movs	r3, #0
 8003cae:	e0f9      	b.n	8003ea4 <RTC_ReceiveTimeFromTerminal+0x2a0>
    }

    snprintf(debug_buf, sizeof(debug_buf), "[DEBUG] Entrada recibida: %s\r\n", rx_buffer);
 8003cb0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003cb4:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8003cb8:	4a7e      	ldr	r2, [pc, #504]	; (8003eb4 <RTC_ReceiveTimeFromTerminal+0x2b0>)
 8003cba:	2180      	movs	r1, #128	; 0x80
 8003cbc:	f009 fad8 	bl	800d270 <sniprintf>
    uart_print(debug_buf);
 8003cc0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f000 f911 	bl	8003eec <uart_print>

    rx_buffer[strcspn(rx_buffer, "\r\n;")] = '\0';
 8003cca:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003cce:	497a      	ldr	r1, [pc, #488]	; (8003eb8 <RTC_ReceiveTimeFromTerminal+0x2b4>)
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f009 fb64 	bl	800d39e <strcspn>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	33f0      	adds	r3, #240	; 0xf0
 8003cda:	443b      	add	r3, r7
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f803 2c2c 	strb.w	r2, [r3, #-44]

    char year_str[5] = {0}, month_str[3] = {0}, day_str[3] = {0};
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8003cec:	4b73      	ldr	r3, [pc, #460]	; (8003ebc <RTC_ReceiveTimeFromTerminal+0x2b8>)
 8003cee:	881b      	ldrh	r3, [r3, #0]
 8003cf0:	873b      	strh	r3, [r7, #56]	; 0x38
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8003cf8:	4b70      	ldr	r3, [pc, #448]	; (8003ebc <RTC_ReceiveTimeFromTerminal+0x2b8>)
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003cfe:	2300      	movs	r3, #0
 8003d00:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    char hour_str[3] = {0}, min_str[3] = {0}, sec_str[3] = {0};
 8003d04:	4b6d      	ldr	r3, [pc, #436]	; (8003ebc <RTC_ReceiveTimeFromTerminal+0x2b8>)
 8003d06:	881b      	ldrh	r3, [r3, #0]
 8003d08:	863b      	strh	r3, [r7, #48]	; 0x30
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8003d10:	4b6a      	ldr	r3, [pc, #424]	; (8003ebc <RTC_ReceiveTimeFromTerminal+0x2b8>)
 8003d12:	881b      	ldrh	r3, [r3, #0]
 8003d14:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003d16:	2300      	movs	r3, #0
 8003d18:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003d1c:	4b67      	ldr	r3, [pc, #412]	; (8003ebc <RTC_ReceiveTimeFromTerminal+0x2b8>)
 8003d1e:	881b      	ldrh	r3, [r3, #0]
 8003d20:	853b      	strh	r3, [r7, #40]	; 0x28
 8003d22:	2300      	movs	r3, #0
 8003d24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

    strncpy(year_str, rx_buffer + 0, 4);
 8003d28:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8003d2c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d30:	2204      	movs	r2, #4
 8003d32:	4618      	mov	r0, r3
 8003d34:	f009 fb58 	bl	800d3e8 <strncpy>
    strncpy(month_str, rx_buffer + 4, 2);
 8003d38:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003d42:	2202      	movs	r2, #2
 8003d44:	4619      	mov	r1, r3
 8003d46:	f009 fb4f 	bl	800d3e8 <strncpy>
    strncpy(day_str, rx_buffer + 6, 2);
 8003d4a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003d4e:	3306      	adds	r3, #6
 8003d50:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8003d54:	2202      	movs	r2, #2
 8003d56:	4619      	mov	r1, r3
 8003d58:	f009 fb46 	bl	800d3e8 <strncpy>
    strncpy(hour_str, rx_buffer + 8, 2);
 8003d5c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003d60:	3308      	adds	r3, #8
 8003d62:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8003d66:	2202      	movs	r2, #2
 8003d68:	4619      	mov	r1, r3
 8003d6a:	f009 fb3d 	bl	800d3e8 <strncpy>
    strncpy(min_str, rx_buffer + 10, 2);
 8003d6e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003d72:	330a      	adds	r3, #10
 8003d74:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003d78:	2202      	movs	r2, #2
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	f009 fb34 	bl	800d3e8 <strncpy>
    strncpy(sec_str, rx_buffer + 12, 2);
 8003d80:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003d84:	330c      	adds	r3, #12
 8003d86:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	f009 fb2b 	bl	800d3e8 <strncpy>

    uint16_t year = atoi(year_str);
 8003d92:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d96:	4618      	mov	r0, r3
 8003d98:	f008 fa2f 	bl	800c1fa <atoi>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
    RTC_DateTypeDef date = {0};
 8003da2:	2300      	movs	r3, #0
 8003da4:	627b      	str	r3, [r7, #36]	; 0x24
    RTC_TimeTypeDef time = {0};
 8003da6:	f107 0310 	add.w	r3, r7, #16
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	605a      	str	r2, [r3, #4]
 8003db0:	609a      	str	r2, [r3, #8]
 8003db2:	60da      	str	r2, [r3, #12]
 8003db4:	611a      	str	r2, [r3, #16]

    date.Month = atoi(month_str);
 8003db6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f008 fa1d 	bl	800c1fa <atoi>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    date.Date = atoi(day_str);
 8003dc8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f008 fa14 	bl	800c1fa <atoi>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    time.Hours = atoi(hour_str);
 8003dda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003dde:	4618      	mov	r0, r3
 8003de0:	f008 fa0b 	bl	800c1fa <atoi>
 8003de4:	4603      	mov	r3, r0
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	743b      	strb	r3, [r7, #16]
    time.Minutes = atoi(min_str);
 8003dea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dee:	4618      	mov	r0, r3
 8003df0:	f008 fa03 	bl	800c1fa <atoi>
 8003df4:	4603      	mov	r3, r0
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	747b      	strb	r3, [r7, #17]
    time.Seconds = atoi(sec_str);
 8003dfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f008 f9fb 	bl	800c1fa <atoi>
 8003e04:	4603      	mov	r3, r0
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	74bb      	strb	r3, [r7, #18]

    snprintf(debug_buf, sizeof(debug_buf), "Fecha parseada: %04u-%02u-%02u %02u:%02u:%02u\r\n",
 8003e0a:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
             year, date.Month, date.Date, time.Hours, time.Minutes, time.Seconds);
 8003e0e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003e12:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8003e16:	7c38      	ldrb	r0, [r7, #16]
    snprintf(debug_buf, sizeof(debug_buf), "Fecha parseada: %04u-%02u-%02u %02u:%02u:%02u\r\n",
 8003e18:	4604      	mov	r4, r0
             year, date.Month, date.Date, time.Hours, time.Minutes, time.Seconds);
 8003e1a:	7c78      	ldrb	r0, [r7, #17]
    snprintf(debug_buf, sizeof(debug_buf), "Fecha parseada: %04u-%02u-%02u %02u:%02u:%02u\r\n",
 8003e1c:	4605      	mov	r5, r0
             year, date.Month, date.Date, time.Hours, time.Minutes, time.Seconds);
 8003e1e:	7cb8      	ldrb	r0, [r7, #18]
    snprintf(debug_buf, sizeof(debug_buf), "Fecha parseada: %04u-%02u-%02u %02u:%02u:%02u\r\n",
 8003e20:	4606      	mov	r6, r0
 8003e22:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8003e26:	9604      	str	r6, [sp, #16]
 8003e28:	9503      	str	r5, [sp, #12]
 8003e2a:	9402      	str	r4, [sp, #8]
 8003e2c:	9101      	str	r1, [sp, #4]
 8003e2e:	9200      	str	r2, [sp, #0]
 8003e30:	4a23      	ldr	r2, [pc, #140]	; (8003ec0 <RTC_ReceiveTimeFromTerminal+0x2bc>)
 8003e32:	2180      	movs	r1, #128	; 0x80
 8003e34:	f009 fa1c 	bl	800d270 <sniprintf>
    uart_print(debug_buf);
 8003e38:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 f855 	bl	8003eec <uart_print>

    if (year < RTC_YEAR_MIN || year > RTC_YEAR_MAX) {
 8003e42:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8003e46:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003e4a:	d305      	bcc.n	8003e58 <RTC_ReceiveTimeFromTerminal+0x254>
 8003e4c:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8003e50:	f640 0233 	movw	r2, #2099	; 0x833
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d904      	bls.n	8003e62 <RTC_ReceiveTimeFromTerminal+0x25e>
        uart_print(RTC_YEAR_ERROR_MSG);
 8003e58:	481a      	ldr	r0, [pc, #104]	; (8003ec4 <RTC_ReceiveTimeFromTerminal+0x2c0>)
 8003e5a:	f000 f847 	bl	8003eec <uart_print>
        return false;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	e020      	b.n	8003ea4 <RTC_ReceiveTimeFromTerminal+0x2a0>
    }

    date.Year = (uint8_t)(year - 2000);
 8003e62:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	3330      	adds	r3, #48	; 0x30
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    date.WeekDay = 1;
 8003e70:	2301      	movs	r3, #1
 8003e72:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

    if (!RTC_DS3231_Set(&date, &time)) {
 8003e76:	f107 0210 	add.w	r2, r7, #16
 8003e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e7e:	4611      	mov	r1, r2
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7ff f945 	bl	8003110 <RTC_DS3231_Set>
 8003e86:	4603      	mov	r3, r0
 8003e88:	f083 0301 	eor.w	r3, r3, #1
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d004      	beq.n	8003e9c <RTC_ReceiveTimeFromTerminal+0x298>
        uart_print(RTC_SET_ERROR_MSG);
 8003e92:	480d      	ldr	r0, [pc, #52]	; (8003ec8 <RTC_ReceiveTimeFromTerminal+0x2c4>)
 8003e94:	f000 f82a 	bl	8003eec <uart_print>
        return false;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	e003      	b.n	8003ea4 <RTC_ReceiveTimeFromTerminal+0x2a0>
    }

    uart_print(RTC_SUCCESS_MSG);
 8003e9c:	480b      	ldr	r0, [pc, #44]	; (8003ecc <RTC_ReceiveTimeFromTerminal+0x2c8>)
 8003e9e:	f000 f825 	bl	8003eec <uart_print>
    return true;
 8003ea2:	2301      	movs	r3, #1
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	37f4      	adds	r7, #244	; 0xf4
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eac:	080121b4 	.word	0x080121b4
 8003eb0:	080121e0 	.word	0x080121e0
 8003eb4:	08012228 	.word	0x08012228
 8003eb8:	08012248 	.word	0x08012248
 8003ebc:	080122d4 	.word	0x080122d4
 8003ec0:	0801224c 	.word	0x0801224c
 8003ec4:	0801227c 	.word	0x0801227c
 8003ec8:	08012294 	.word	0x08012294
 8003ecc:	080122b4 	.word	0x080122b4

08003ed0 <time_rtc_GetFormattedDateTime>:

void time_rtc_Init(void) {
    rtc_auto_init();
}

void time_rtc_GetFormattedDateTime(char * buffer, size_t len) {
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
    rtc_get_time(buffer, len);
 8003eda:	6839      	ldr	r1, [r7, #0]
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7ff f8f5 	bl	80030cc <rtc_get_time>
}
 8003ee2:	bf00      	nop
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
	...

08003eec <uart_print>:

/**
 * @brief Envía un mensaje a través de UART3.
 * @param message Mensaje a enviar.
 */
void uart_print(const char * format, ...) {
 8003eec:	b40f      	push	{r0, r1, r2, r3}
 8003eee:	b590      	push	{r4, r7, lr}
 8003ef0:	b0c3      	sub	sp, #268	; 0x10c
 8003ef2:	af00      	add	r7, sp, #0
    char buffer[256];
    va_list args;
    va_start(args, format);
 8003ef4:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8003ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003efc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f00:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8003f02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f0a:	f107 0008 	add.w	r0, r7, #8
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003f14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f18:	f00a f95c 	bl	800e1d4 <vsniprintf>
    va_end(args);

    if (uart_debug != NULL) {
 8003f1c:	4b0d      	ldr	r3, [pc, #52]	; (8003f54 <uart_print+0x68>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00f      	beq.n	8003f44 <uart_print+0x58>
        HAL_UART_Transmit(uart_debug, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8003f24:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <uart_print+0x68>)
 8003f26:	681c      	ldr	r4, [r3, #0]
 8003f28:	f107 0308 	add.w	r3, r7, #8
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7fc f95f 	bl	80001f0 <strlen>
 8003f32:	4603      	mov	r3, r0
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	f107 0108 	add.w	r1, r7, #8
 8003f3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f3e:	4620      	mov	r0, r4
 8003f40:	f004 fc01 	bl	8008746 <HAL_UART_Transmit>
    }
}
 8003f44:	bf00      	nop
 8003f46:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003f50:	b004      	add	sp, #16
 8003f52:	4770      	bx	lr
 8003f54:	2000217c 	.word	0x2000217c

08003f58 <MX_GPIO_Init>:
 * Input
 * Output
 * EVENT_OUT
 * EXTI
 */
void MX_GPIO_Init(void) {
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b08a      	sub	sp, #40	; 0x28
 8003f5c:	af00      	add	r7, sp, #0

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f5e:	f107 0314 	add.w	r3, r7, #20
 8003f62:	2200      	movs	r2, #0
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	605a      	str	r2, [r3, #4]
 8003f68:	609a      	str	r2, [r3, #8]
 8003f6a:	60da      	str	r2, [r3, #12]
 8003f6c:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f6e:	2300      	movs	r3, #0
 8003f70:	613b      	str	r3, [r7, #16]
 8003f72:	4b36      	ldr	r3, [pc, #216]	; (800404c <MX_GPIO_Init+0xf4>)
 8003f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f76:	4a35      	ldr	r2, [pc, #212]	; (800404c <MX_GPIO_Init+0xf4>)
 8003f78:	f043 0320 	orr.w	r3, r3, #32
 8003f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f7e:	4b33      	ldr	r3, [pc, #204]	; (800404c <MX_GPIO_Init+0xf4>)
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	f003 0320 	and.w	r3, r3, #32
 8003f86:	613b      	str	r3, [r7, #16]
 8003f88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	4b2f      	ldr	r3, [pc, #188]	; (800404c <MX_GPIO_Init+0xf4>)
 8003f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f92:	4a2e      	ldr	r2, [pc, #184]	; (800404c <MX_GPIO_Init+0xf4>)
 8003f94:	f043 0301 	orr.w	r3, r3, #1
 8003f98:	6313      	str	r3, [r2, #48]	; 0x30
 8003f9a:	4b2c      	ldr	r3, [pc, #176]	; (800404c <MX_GPIO_Init+0xf4>)
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60bb      	str	r3, [r7, #8]
 8003faa:	4b28      	ldr	r3, [pc, #160]	; (800404c <MX_GPIO_Init+0xf4>)
 8003fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fae:	4a27      	ldr	r2, [pc, #156]	; (800404c <MX_GPIO_Init+0xf4>)
 8003fb0:	f043 0302 	orr.w	r3, r3, #2
 8003fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8003fb6:	4b25      	ldr	r3, [pc, #148]	; (800404c <MX_GPIO_Init+0xf4>)
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	60bb      	str	r3, [r7, #8]
 8003fc0:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	607b      	str	r3, [r7, #4]
 8003fc6:	4b21      	ldr	r3, [pc, #132]	; (800404c <MX_GPIO_Init+0xf4>)
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fca:	4a20      	ldr	r2, [pc, #128]	; (800404c <MX_GPIO_Init+0xf4>)
 8003fcc:	f043 0308 	orr.w	r3, r3, #8
 8003fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8003fd2:	4b1e      	ldr	r3, [pc, #120]	; (800404c <MX_GPIO_Init+0xf4>)
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd6:	f003 0308 	and.w	r3, r3, #8
 8003fda:	607b      	str	r3, [r7, #4]
 8003fdc:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fde:	2300      	movs	r3, #0
 8003fe0:	603b      	str	r3, [r7, #0]
 8003fe2:	4b1a      	ldr	r3, [pc, #104]	; (800404c <MX_GPIO_Init+0xf4>)
 8003fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe6:	4a19      	ldr	r2, [pc, #100]	; (800404c <MX_GPIO_Init+0xf4>)
 8003fe8:	f043 0304 	orr.w	r3, r3, #4
 8003fec:	6313      	str	r3, [r2, #48]	; 0x30
 8003fee:	4b17      	ldr	r3, [pc, #92]	; (800404c <MX_GPIO_Init+0xf4>)
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff2:	f003 0304 	and.w	r3, r3, #4
 8003ff6:	603b      	str	r3, [r7, #0]
 8003ff8:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	2101      	movs	r1, #1
 8003ffe:	4814      	ldr	r0, [pc, #80]	; (8004050 <MX_GPIO_Init+0xf8>)
 8004000:	f001 fbb8 	bl	8005774 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1 | GPIO_PIN_4, GPIO_PIN_SET);
 8004004:	2201      	movs	r2, #1
 8004006:	2112      	movs	r1, #18
 8004008:	4811      	ldr	r0, [pc, #68]	; (8004050 <MX_GPIO_Init+0xf8>)
 800400a:	f001 fbb3 	bl	8005774 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : PBPin PB1 PB4 */
    GPIO_InitStruct.Pin = SD_CS_Pin | GPIO_PIN_1 | GPIO_PIN_4;
 800400e:	2313      	movs	r3, #19
 8004010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004012:	2301      	movs	r3, #1
 8004014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004016:	2300      	movs	r3, #0
 8004018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800401a:	2300      	movs	r3, #0
 800401c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800401e:	f107 0314 	add.w	r3, r7, #20
 8004022:	4619      	mov	r1, r3
 8004024:	480a      	ldr	r0, [pc, #40]	; (8004050 <MX_GPIO_Init+0xf8>)
 8004026:	f001 f8d5 	bl	80051d4 <HAL_GPIO_Init>

    /*Configure GPIO pins : PB11 PB12 */
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 800402a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800402e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004030:	2300      	movs	r3, #0
 8004032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004034:	2301      	movs	r3, #1
 8004036:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004038:	f107 0314 	add.w	r3, r7, #20
 800403c:	4619      	mov	r1, r3
 800403e:	4804      	ldr	r0, [pc, #16]	; (8004050 <MX_GPIO_Init+0xf8>)
 8004040:	f001 f8c8 	bl	80051d4 <HAL_GPIO_Init>
}
 8004044:	bf00      	nop
 8004046:	3728      	adds	r7, #40	; 0x28
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40023800 	.word	0x40023800
 8004050:	40020400 	.word	0x40020400

08004054 <MX_I2C2_Init>:
/* USER CODE END 0 */

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void) {
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
    /* USER CODE END I2C2_Init 0 */

    /* USER CODE BEGIN I2C2_Init 1 */

    /* USER CODE END I2C2_Init 1 */
    hi2c2.Instance = I2C2;
 8004058:	4b1b      	ldr	r3, [pc, #108]	; (80040c8 <MX_I2C2_Init+0x74>)
 800405a:	4a1c      	ldr	r2, [pc, #112]	; (80040cc <MX_I2C2_Init+0x78>)
 800405c:	601a      	str	r2, [r3, #0]
    hi2c2.Init.ClockSpeed = 100000;
 800405e:	4b1a      	ldr	r3, [pc, #104]	; (80040c8 <MX_I2C2_Init+0x74>)
 8004060:	4a1b      	ldr	r2, [pc, #108]	; (80040d0 <MX_I2C2_Init+0x7c>)
 8004062:	605a      	str	r2, [r3, #4]
    hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004064:	4b18      	ldr	r3, [pc, #96]	; (80040c8 <MX_I2C2_Init+0x74>)
 8004066:	2200      	movs	r2, #0
 8004068:	609a      	str	r2, [r3, #8]
    hi2c2.Init.OwnAddress1 = 0;
 800406a:	4b17      	ldr	r3, [pc, #92]	; (80040c8 <MX_I2C2_Init+0x74>)
 800406c:	2200      	movs	r2, #0
 800406e:	60da      	str	r2, [r3, #12]
    hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004070:	4b15      	ldr	r3, [pc, #84]	; (80040c8 <MX_I2C2_Init+0x74>)
 8004072:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004076:	611a      	str	r2, [r3, #16]
    hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004078:	4b13      	ldr	r3, [pc, #76]	; (80040c8 <MX_I2C2_Init+0x74>)
 800407a:	2200      	movs	r2, #0
 800407c:	615a      	str	r2, [r3, #20]
    hi2c2.Init.OwnAddress2 = 0;
 800407e:	4b12      	ldr	r3, [pc, #72]	; (80040c8 <MX_I2C2_Init+0x74>)
 8004080:	2200      	movs	r2, #0
 8004082:	619a      	str	r2, [r3, #24]
    hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004084:	4b10      	ldr	r3, [pc, #64]	; (80040c8 <MX_I2C2_Init+0x74>)
 8004086:	2200      	movs	r2, #0
 8004088:	61da      	str	r2, [r3, #28]
    hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800408a:	4b0f      	ldr	r3, [pc, #60]	; (80040c8 <MX_I2C2_Init+0x74>)
 800408c:	2200      	movs	r2, #0
 800408e:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8004090:	480d      	ldr	r0, [pc, #52]	; (80040c8 <MX_I2C2_Init+0x74>)
 8004092:	f001 fb89 	bl	80057a8 <HAL_I2C_Init>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <MX_I2C2_Init+0x4c>
        Error_Handler();
 800409c:	f000 fa3a 	bl	8004514 <Error_Handler>
    }

    /** Configure Analogue filter
     */
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 80040a0:	2100      	movs	r1, #0
 80040a2:	4809      	ldr	r0, [pc, #36]	; (80040c8 <MX_I2C2_Init+0x74>)
 80040a4:	f002 fdd3 	bl	8006c4e <HAL_I2CEx_ConfigAnalogFilter>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <MX_I2C2_Init+0x5e>
        Error_Handler();
 80040ae:	f000 fa31 	bl	8004514 <Error_Handler>
    }

    /** Configure Digital filter
     */
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 80040b2:	2100      	movs	r1, #0
 80040b4:	4804      	ldr	r0, [pc, #16]	; (80040c8 <MX_I2C2_Init+0x74>)
 80040b6:	f002 fe06 	bl	8006cc6 <HAL_I2CEx_ConfigDigitalFilter>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <MX_I2C2_Init+0x70>
        Error_Handler();
 80040c0:	f000 fa28 	bl	8004514 <Error_Handler>
    }
    /* USER CODE BEGIN I2C2_Init 2 */

    /* USER CODE END I2C2_Init 2 */
}
 80040c4:	bf00      	nop
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	20002180 	.word	0x20002180
 80040cc:	40005800 	.word	0x40005800
 80040d0:	000186a0 	.word	0x000186a0

080040d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef * i2cHandle) {
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b08a      	sub	sp, #40	; 0x28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040dc:	f107 0314 	add.w	r3, r7, #20
 80040e0:	2200      	movs	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	605a      	str	r2, [r3, #4]
 80040e6:	609a      	str	r2, [r3, #8]
 80040e8:	60da      	str	r2, [r3, #12]
 80040ea:	611a      	str	r2, [r3, #16]
    if (i2cHandle->Instance == I2C2) {
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a19      	ldr	r2, [pc, #100]	; (8004158 <HAL_I2C_MspInit+0x84>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d12b      	bne.n	800414e <HAL_I2C_MspInit+0x7a>
        /* USER CODE BEGIN I2C2_MspInit 0 */

        /* USER CODE END I2C2_MspInit 0 */

        __HAL_RCC_GPIOF_CLK_ENABLE();
 80040f6:	2300      	movs	r3, #0
 80040f8:	613b      	str	r3, [r7, #16]
 80040fa:	4b18      	ldr	r3, [pc, #96]	; (800415c <HAL_I2C_MspInit+0x88>)
 80040fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fe:	4a17      	ldr	r2, [pc, #92]	; (800415c <HAL_I2C_MspInit+0x88>)
 8004100:	f043 0320 	orr.w	r3, r3, #32
 8004104:	6313      	str	r3, [r2, #48]	; 0x30
 8004106:	4b15      	ldr	r3, [pc, #84]	; (800415c <HAL_I2C_MspInit+0x88>)
 8004108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410a:	f003 0320 	and.w	r3, r3, #32
 800410e:	613b      	str	r3, [r7, #16]
 8004110:	693b      	ldr	r3, [r7, #16]
        /**I2C2 GPIO Configuration
        PF0     ------> I2C2_SDA
        PF1     ------> I2C2_SCL
        */
        GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8004112:	2303      	movs	r3, #3
 8004114:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004116:	2312      	movs	r3, #18
 8004118:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800411a:	2300      	movs	r3, #0
 800411c:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800411e:	2303      	movs	r3, #3
 8004120:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004122:	2304      	movs	r3, #4
 8004124:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004126:	f107 0314 	add.w	r3, r7, #20
 800412a:	4619      	mov	r1, r3
 800412c:	480c      	ldr	r0, [pc, #48]	; (8004160 <HAL_I2C_MspInit+0x8c>)
 800412e:	f001 f851 	bl	80051d4 <HAL_GPIO_Init>

        /* I2C2 clock enable */
        __HAL_RCC_I2C2_CLK_ENABLE();
 8004132:	2300      	movs	r3, #0
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	4b09      	ldr	r3, [pc, #36]	; (800415c <HAL_I2C_MspInit+0x88>)
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	4a08      	ldr	r2, [pc, #32]	; (800415c <HAL_I2C_MspInit+0x88>)
 800413c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004140:	6413      	str	r3, [r2, #64]	; 0x40
 8004142:	4b06      	ldr	r3, [pc, #24]	; (800415c <HAL_I2C_MspInit+0x88>)
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	68fb      	ldr	r3, [r7, #12]
        /* USER CODE BEGIN I2C2_MspInit 1 */

        /* USER CODE END I2C2_MspInit 1 */
    }
}
 800414e:	bf00      	nop
 8004150:	3728      	adds	r7, #40	; 0x28
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	40005800 	.word	0x40005800
 800415c:	40023800 	.word	0x40023800
 8004160:	40021400 	.word	0x40021400

08004164 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8004164:	b5b0      	push	{r4, r5, r7, lr}
 8004166:	b0b6      	sub	sp, #216	; 0xd8
 8004168:	af02      	add	r7, sp, #8
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800416a:	f000 feb7 	bl	8004edc <HAL_Init>

    /* USER CODE BEGIN Init */

    sensors_init_all();
 800416e:	f7ff f865 	bl	800323c <sensors_init_all>
    // SPS30_Init(&huart5);

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8004172:	f000 f96d 	bl	8004450 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8004176:	f7ff feef 	bl	8003f58 <MX_GPIO_Init>
    MX_RTC_Init();
 800417a:	f000 f9d1 	bl	8004520 <MX_RTC_Init>
    MX_UART5_Init();
 800417e:	f000 fc51 	bl	8004a24 <MX_UART5_Init>
    MX_USART3_UART_Init();
 8004182:	f000 fccd 	bl	8004b20 <MX_USART3_UART_Init>
    MX_UART7_Init();
 8004186:	f000 fc77 	bl	8004a78 <MX_UART7_Init>
    MX_USART6_UART_Init();
 800418a:	f000 fcf3 	bl	8004b74 <MX_USART6_UART_Init>
    MX_USART1_UART_Init();
 800418e:	f000 fc9d 	bl	8004acc <MX_USART1_UART_Init>
    MX_I2C2_Init();
 8004192:	f7ff ff5f 	bl	8004054 <MX_I2C2_Init>
    MX_SPI1_Init();
 8004196:	f000 fa47 	bl	8004628 <MX_SPI1_Init>
    MX_FATFS_Init();
 800419a:	f004 feeb 	bl	8008f74 <MX_FATFS_Init>
    /* USER CODE BEGIN 2 */

    uart_debug = &huart3;
 800419e:	4b92      	ldr	r3, [pc, #584]	; (80043e8 <main+0x284>)
 80041a0:	4a92      	ldr	r2, [pc, #584]	; (80043ec <main+0x288>)
 80041a2:	601a      	str	r2, [r3, #0]

    /* Initialization welcome message */
    uart_print("\n\n-------------------------------------------------------------------\n");
 80041a4:	4892      	ldr	r0, [pc, #584]	; (80043f0 <main+0x28c>)
 80041a6:	f7ff fea1 	bl	8003eec <uart_print>
    uart_print("|   Sistema de Monitoreo de Material Particulado  |\n");
 80041aa:	4892      	ldr	r0, [pc, #584]	; (80043f4 <main+0x290>)
 80041ac:	f7ff fe9e 	bl	8003eec <uart_print>
    uart_print("---------------------------------------------------------------------\n");
 80041b0:	4891      	ldr	r0, [pc, #580]	; (80043f8 <main+0x294>)
 80041b2:	f7ff fe9b 	bl	8003eec <uart_print>


    bool sistema_ok = sistema_verificar_componentes();
 80041b6:	f7ff f99b 	bl	80034f0 <sistema_verificar_componentes>
 80041ba:	4603      	mov	r3, r0
 80041bc:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

    if (!sistema_ok) {
 80041c0:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80041c4:	f083 0301 	eor.w	r3, r3, #1
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <main+0x72>
        uart_print("[WARN] Error en la verificación del sistema. Algunos componentes no están operativos.\r\n");
 80041ce:	488b      	ldr	r0, [pc, #556]	; (80043fc <main+0x298>)
 80041d0:	f7ff fe8c 	bl	8003eec <uart_print>
 80041d4:	e002      	b.n	80041dc <main+0x78>
        // Aquí podrías registrar el error, encender un LED de advertencia o guardar en un log.
    } else {
        uart_print("[INFO] Todos los componentes verificados correctamente.\r\n");
 80041d6:	488a      	ldr	r0, [pc, #552]	; (8004400 <main+0x29c>)
 80041d8:	f7ff fe88 	bl	8003eec <uart_print>
    }


    // Crea una nueva instancia de MicroSD
    MicroSD * sd = microSD_create(&huart3, "initlog.txt", "/"); // Inicialización con el directorio raíz
 80041dc:	4a89      	ldr	r2, [pc, #548]	; (8004404 <main+0x2a0>)
 80041de:	498a      	ldr	r1, [pc, #552]	; (8004408 <main+0x2a4>)
 80041e0:	4882      	ldr	r0, [pc, #520]	; (80043ec <main+0x288>)
 80041e2:	f7fe faad 	bl	8002740 <microSD_create>
 80041e6:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
    uart_print("Inicializando sistema de almacenamiento de datos 1A ...\n");
 80041ea:	4888      	ldr	r0, [pc, #544]	; (800440c <main+0x2a8>)
 80041ec:	f7ff fe7e 	bl	8003eec <uart_print>

    if (sd == NULL) {
 80041f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <main+0x98>
        // Manejar error de creación
        Error_Handler();
 80041f8:	f000 f98c 	bl	8004514 <Error_Handler>
    }

    uart_print("fin Inicializando sistema de almacenamiento de datos 4...\n");
 80041fc:	4884      	ldr	r0, [pc, #528]	; (8004410 <main+0x2ac>)
 80041fe:	f7ff fe75 	bl	8003eec <uart_print>
    microSD_setDirectory(sd, "/"); // Cambia el directorio según sea necesario
 8004202:	4980      	ldr	r1, [pc, #512]	; (8004404 <main+0x2a0>)
 8004204:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8004208:	f7fe fb28 	bl	800285c <microSD_setDirectory>

    uart_print("Inicializando sistema de almacenamiento de datos 3 ...\n");
 800420c:	4881      	ldr	r0, [pc, #516]	; (8004414 <main+0x2b0>)
 800420e:	f7ff fe6d 	bl	8003eec <uart_print>
    if (!data_logger_init()) {
 8004212:	f7fd f9e5 	bl	80015e0 <data_logger_init>
 8004216:	4603      	mov	r3, r0
 8004218:	f083 0301 	eor.w	r3, r3, #1
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d002      	beq.n	8004228 <main+0xc4>
        uart_print("¡Error al inicializar el sistema de almacenamiento!\n");
 8004222:	487d      	ldr	r0, [pc, #500]	; (8004418 <main+0x2b4>)
 8004224:	f7ff fe62 	bl	8003eec <uart_print>
    }

    HAL_Delay(200);
 8004228:	20c8      	movs	r0, #200	; 0xc8
 800422a:	f000 fec9 	bl	8004fc0 <HAL_Delay>

    /* Inicializar sensores SPS30 disponibles*/

    rtc_auto_init(); // Detecta y configura el RTC correcto
 800422e:	f7ff fccf 	bl	8003bd0 <rtc_auto_init>

    //    test_format_csv_line();

    RTC_ReceiveTimeFromTerminal(&huart3);
 8004232:	486e      	ldr	r0, [pc, #440]	; (80043ec <main+0x288>)
 8004234:	f7ff fce6 	bl	8003c04 <RTC_ReceiveTimeFromTerminal>


    /* Initialize SPS30 sensors array */

    uart_print("Inicializando sensores SPS30...\n");
 8004238:	4878      	ldr	r0, [pc, #480]	; (800441c <main+0x2b8>)
 800423a:	f7ff fe57 	bl	8003eec <uart_print>
    inicializar_sensores_sps30();
 800423e:	f7ff fc37 	bl	8003ab0 <inicializar_sensores_sps30>

    mp_sensors_info_init(); // ← Aquí obtienes y guardas los seriales
 8004242:	f7fe fba7 	bl	8002994 <mp_sensors_info_init>

    /* Buffer de Mensajes */

    uint32_t ciclo_contador = 0;
 8004246:	2300      	movs	r3, #0
 8004248:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    while (1) {

        /* === Medición de sensores DHT22 (ambiente y cámara) ========================== */

        DHT22_Data sensorData;
        float temp_amb = -99.9f;
 800424c:	4b74      	ldr	r3, [pc, #464]	; (8004420 <main+0x2bc>)
 800424e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        float hum_amb = -99.9f;
 8004252:	4b73      	ldr	r3, [pc, #460]	; (8004420 <main+0x2bc>)
 8004254:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
        float temp_cam = -99.9f;
 8004258:	4b71      	ldr	r3, [pc, #452]	; (8004420 <main+0x2bc>)
 800425a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        float hum_cam = -99.9f;
 800425e:	4b70      	ldr	r3, [pc, #448]	; (8004420 <main+0x2bc>)
 8004260:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

        if (DHT22_Read(&dhtA, &sensorData) == DHT22_OK) {
 8004264:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004268:	4619      	mov	r1, r3
 800426a:	486e      	ldr	r0, [pc, #440]	; (8004424 <main+0x2c0>)
 800426c:	f7fc fee8 	bl	8001040 <DHT22_Read>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d11b      	bne.n	80042ae <main+0x14a>
            temp_amb = sensorData.temperatura;
 8004276:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800427a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            hum_amb = sensorData.humedad;
 800427e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004282:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            uart_print("Ambiente: Temp: %.1f C, Hum: %.1f%%\n", temp_amb, hum_amb);
 8004286:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800428a:	f7fc f96d 	bl	8000568 <__aeabi_f2d>
 800428e:	4604      	mov	r4, r0
 8004290:	460d      	mov	r5, r1
 8004292:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8004296:	f7fc f967 	bl	8000568 <__aeabi_f2d>
 800429a:	4602      	mov	r2, r0
 800429c:	460b      	mov	r3, r1
 800429e:	e9cd 2300 	strd	r2, r3, [sp]
 80042a2:	4622      	mov	r2, r4
 80042a4:	462b      	mov	r3, r5
 80042a6:	4860      	ldr	r0, [pc, #384]	; (8004428 <main+0x2c4>)
 80042a8:	f7ff fe20 	bl	8003eec <uart_print>
 80042ac:	e002      	b.n	80042b4 <main+0x150>
        } else {
            uart_print("Error leyendo DHT22 ambiente\n");
 80042ae:	485f      	ldr	r0, [pc, #380]	; (800442c <main+0x2c8>)
 80042b0:	f7ff fe1c 	bl	8003eec <uart_print>
        }

        if (DHT22_Read(&dhtB, &sensorData) == DHT22_OK) {
 80042b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80042b8:	4619      	mov	r1, r3
 80042ba:	485d      	ldr	r0, [pc, #372]	; (8004430 <main+0x2cc>)
 80042bc:	f7fc fec0 	bl	8001040 <DHT22_Read>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d11b      	bne.n	80042fe <main+0x19a>
            temp_cam = sensorData.temperatura;
 80042c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80042ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            hum_cam = sensorData.humedad;
 80042ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80042d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            uart_print("Camara: Temp: %.1f C, Hum: %.1f%%\n", temp_cam, hum_cam);
 80042d6:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80042da:	f7fc f945 	bl	8000568 <__aeabi_f2d>
 80042de:	4604      	mov	r4, r0
 80042e0:	460d      	mov	r5, r1
 80042e2:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80042e6:	f7fc f93f 	bl	8000568 <__aeabi_f2d>
 80042ea:	4602      	mov	r2, r0
 80042ec:	460b      	mov	r3, r1
 80042ee:	e9cd 2300 	strd	r2, r3, [sp]
 80042f2:	4622      	mov	r2, r4
 80042f4:	462b      	mov	r3, r5
 80042f6:	484f      	ldr	r0, [pc, #316]	; (8004434 <main+0x2d0>)
 80042f8:	f7ff fdf8 	bl	8003eec <uart_print>
 80042fc:	e002      	b.n	8004304 <main+0x1a0>
        } else {
            uart_print("Error leyendo DHT22 cámara\n");
 80042fe:	484e      	ldr	r0, [pc, #312]	; (8004438 <main+0x2d4>)
 8004300:	f7ff fdf4 	bl	8003eec <uart_print>
        }

        /* === Timestamp y encabezado de ciclo ========================================= */
        char datetime_buffer[32];
        char msg_buffer[128];
        time_rtc_GetFormattedDateTime(datetime_buffer, sizeof(datetime_buffer));
 8004304:	1d3b      	adds	r3, r7, #4
 8004306:	2120      	movs	r1, #32
 8004308:	4618      	mov	r0, r3
 800430a:	f7ff fde1 	bl	8003ed0 <time_rtc_GetFormattedDateTime>

        snprintf(msg_buffer, sizeof(msg_buffer), "\n=== Ciclo de medicion #%lu: %s ===\n",
 800430e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004312:	3301      	adds	r3, #1
 8004314:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004318:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800431c:	1d3b      	adds	r3, r7, #4
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004324:	4a45      	ldr	r2, [pc, #276]	; (800443c <main+0x2d8>)
 8004326:	2180      	movs	r1, #128	; 0x80
 8004328:	f008 ffa2 	bl	800d270 <sniprintf>
                 ++ciclo_contador, datetime_buffer);
        uart_print(msg_buffer);
 800432c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004330:	4618      	mov	r0, r3
 8004332:	f7ff fddb 	bl	8003eec <uart_print>

        /* === Ciclo de medición SPS30 ================================================= */
        for (int i = 0; i < sensores_disponibles; i++) {
 8004336:	2300      	movs	r3, #0
 8004338:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800433c:	e020      	b.n	8004380 <main+0x21c>
            proceso_observador_3PM_2TH(&sensores_sps30[i].sensor, sensores_sps30[i].id,
 800433e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004342:	2258      	movs	r2, #88	; 0x58
 8004344:	fb02 f303 	mul.w	r3, r2, r3
 8004348:	4a3d      	ldr	r2, [pc, #244]	; (8004440 <main+0x2dc>)
 800434a:	1898      	adds	r0, r3, r2
 800434c:	4a3c      	ldr	r2, [pc, #240]	; (8004440 <main+0x2dc>)
 800434e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004352:	2158      	movs	r1, #88	; 0x58
 8004354:	fb01 f303 	mul.w	r3, r1, r3
 8004358:	4413      	add	r3, r2
 800435a:	3350      	adds	r3, #80	; 0x50
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	1d3a      	adds	r2, r7, #4
 8004360:	edd7 1a2f 	vldr	s3, [r7, #188]	; 0xbc
 8004364:	ed97 1a30 	vldr	s2, [r7, #192]	; 0xc0
 8004368:	edd7 0a31 	vldr	s1, [r7, #196]	; 0xc4
 800436c:	ed97 0a32 	vldr	s0, [r7, #200]	; 0xc8
 8004370:	4619      	mov	r1, r3
 8004372:	f7fe fbb1 	bl	8002ad8 <proceso_observador_3PM_2TH>
        for (int i = 0; i < sensores_disponibles; i++) {
 8004376:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800437a:	3301      	adds	r3, #1
 800437c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004380:	4b30      	ldr	r3, [pc, #192]	; (8004444 <main+0x2e0>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004388:	429a      	cmp	r2, r3
 800438a:	dbd8      	blt.n	800433e <main+0x1da>
                                       datetime_buffer, temp_amb, hum_amb, temp_cam, hum_cam);
        }

        /* === Reporte de resumen cada 10 ciclos ======================================= */
        if (ciclo_contador % 10U == 0U) {
 800438c:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8004390:	4b2d      	ldr	r3, [pc, #180]	; (8004448 <main+0x2e4>)
 8004392:	fba3 2301 	umull	r2, r3, r3, r1
 8004396:	08da      	lsrs	r2, r3, #3
 8004398:	4613      	mov	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4413      	add	r3, r2
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	1aca      	subs	r2, r1, r3
 80043a2:	2a00      	cmp	r2, #0
 80043a4:	d11a      	bne.n	80043dc <main+0x278>
            data_logger_print_summary();
 80043a6:	f7fd f9b5 	bl	8001714 <data_logger_print_summary>

            float pm25_avg = data_logger_get_average_pm25(0U, 10U);
 80043aa:	210a      	movs	r1, #10
 80043ac:	2000      	movs	r0, #0
 80043ae:	f7fd f941 	bl	8001634 <data_logger_get_average_pm25>
 80043b2:	ed87 0a2b 	vstr	s0, [r7, #172]	; 0xac
            snprintf(msg_buffer, sizeof(msg_buffer),
 80043b6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80043ba:	f7fc f8d5 	bl	8000568 <__aeabi_f2d>
 80043be:	4602      	mov	r2, r0
 80043c0:	460b      	mov	r3, r1
 80043c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80043c6:	e9cd 2300 	strd	r2, r3, [sp]
 80043ca:	4a20      	ldr	r2, [pc, #128]	; (800444c <main+0x2e8>)
 80043cc:	2180      	movs	r1, #128	; 0x80
 80043ce:	f008 ff4f 	bl	800d270 <sniprintf>
                     "Promedio PM2.5 (ultimas 10 mediciones): %.2f ug/m3\n", pm25_avg);
            uart_print(msg_buffer);
 80043d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7ff fd88 	bl	8003eec <uart_print>

        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */

        HAL_Delay(10000); // Espera 10 segundos antes de la próxima lectura
 80043dc:	f242 7010 	movw	r0, #10000	; 0x2710
 80043e0:	f000 fdee 	bl	8004fc0 <HAL_Delay>
    while (1) {
 80043e4:	e732      	b.n	800424c <main+0xe8>
 80043e6:	bf00      	nop
 80043e8:	2000217c 	.word	0x2000217c
 80043ec:	20002324 	.word	0x20002324
 80043f0:	080122d8 	.word	0x080122d8
 80043f4:	08012320 	.word	0x08012320
 80043f8:	08012358 	.word	0x08012358
 80043fc:	080123a0 	.word	0x080123a0
 8004400:	080123fc 	.word	0x080123fc
 8004404:	08012438 	.word	0x08012438
 8004408:	0801243c 	.word	0x0801243c
 800440c:	08012448 	.word	0x08012448
 8004410:	08012484 	.word	0x08012484
 8004414:	080124c0 	.word	0x080124c0
 8004418:	080124f8 	.word	0x080124f8
 800441c:	08012530 	.word	0x08012530
 8004420:	c2c7cccd 	.word	0xc2c7cccd
 8004424:	2000205c 	.word	0x2000205c
 8004428:	08012554 	.word	0x08012554
 800442c:	0801257c 	.word	0x0801257c
 8004430:	20002064 	.word	0x20002064
 8004434:	0801259c 	.word	0x0801259c
 8004438:	080125c0 	.word	0x080125c0
 800443c:	080125e0 	.word	0x080125e0
 8004440:	2000206c 	.word	0x2000206c
 8004444:	20002174 	.word	0x20002174
 8004448:	cccccccd 	.word	0xcccccccd
 800444c:	08012608 	.word	0x08012608

08004450 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004450:	b580      	push	{r7, lr}
 8004452:	b094      	sub	sp, #80	; 0x50
 8004454:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004456:	f107 0320 	add.w	r3, r7, #32
 800445a:	2230      	movs	r2, #48	; 0x30
 800445c:	2100      	movs	r1, #0
 800445e:	4618      	mov	r0, r3
 8004460:	f007 ff18 	bl	800c294 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004464:	f107 030c 	add.w	r3, r7, #12
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	605a      	str	r2, [r3, #4]
 800446e:	609a      	str	r2, [r3, #8]
 8004470:	60da      	str	r2, [r3, #12]
 8004472:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8004474:	2300      	movs	r3, #0
 8004476:	60bb      	str	r3, [r7, #8]
 8004478:	4b24      	ldr	r3, [pc, #144]	; (800450c <SystemClock_Config+0xbc>)
 800447a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447c:	4a23      	ldr	r2, [pc, #140]	; (800450c <SystemClock_Config+0xbc>)
 800447e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004482:	6413      	str	r3, [r2, #64]	; 0x40
 8004484:	4b21      	ldr	r3, [pc, #132]	; (800450c <SystemClock_Config+0xbc>)
 8004486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800448c:	60bb      	str	r3, [r7, #8]
 800448e:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004490:	2300      	movs	r3, #0
 8004492:	607b      	str	r3, [r7, #4]
 8004494:	4b1e      	ldr	r3, [pc, #120]	; (8004510 <SystemClock_Config+0xc0>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800449c:	4a1c      	ldr	r2, [pc, #112]	; (8004510 <SystemClock_Config+0xc0>)
 800449e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044a2:	6013      	str	r3, [r2, #0]
 80044a4:	4b1a      	ldr	r3, [pc, #104]	; (8004510 <SystemClock_Config+0xc0>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80044ac:	607b      	str	r3, [r7, #4]
 80044ae:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI;
 80044b0:	230a      	movs	r3, #10
 80044b2:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80044b4:	2301      	movs	r3, #1
 80044b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80044b8:	2310      	movs	r3, #16
 80044ba:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80044bc:	2301      	movs	r3, #1
 80044be:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80044c0:	2300      	movs	r3, #0
 80044c2:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80044c4:	f107 0320 	add.w	r3, r7, #32
 80044c8:	4618      	mov	r0, r3
 80044ca:	f002 fc3b 	bl	8006d44 <HAL_RCC_OscConfig>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <SystemClock_Config+0x88>
        Error_Handler();
 80044d4:	f000 f81e 	bl	8004514 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType =
 80044d8:	230f      	movs	r3, #15
 80044da:	60fb      	str	r3, [r7, #12]
        RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80044dc:	2300      	movs	r3, #0
 80044de:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80044e0:	2300      	movs	r3, #0
 80044e2:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80044e4:	2300      	movs	r3, #0
 80044e6:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80044e8:	2300      	movs	r3, #0
 80044ea:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80044ec:	f107 030c 	add.w	r3, r7, #12
 80044f0:	2100      	movs	r1, #0
 80044f2:	4618      	mov	r0, r3
 80044f4:	f002 fe9e 	bl	8007234 <HAL_RCC_ClockConfig>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <SystemClock_Config+0xb2>
        Error_Handler();
 80044fe:	f000 f809 	bl	8004514 <Error_Handler>
    }
}
 8004502:	bf00      	nop
 8004504:	3750      	adds	r7, #80	; 0x50
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	40023800 	.word	0x40023800
 8004510:	40007000 	.word	0x40007000

08004514 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004518:	b672      	cpsid	i
}
 800451a:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 800451c:	e7fe      	b.n	800451c <Error_Handler+0x8>
	...

08004520 <MX_RTC_Init>:
/* USER CODE END 0 */

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void) {
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN RTC_Init 0 */

    /* USER CODE END RTC_Init 0 */

    RTC_TimeTypeDef sTime = {0};
 8004526:	1d3b      	adds	r3, r7, #4
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	605a      	str	r2, [r3, #4]
 800452e:	609a      	str	r2, [r3, #8]
 8004530:	60da      	str	r2, [r3, #12]
 8004532:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 8004534:	2300      	movs	r3, #0
 8004536:	603b      	str	r3, [r7, #0]

    /* USER CODE END RTC_Init 1 */

    /** Initialize RTC Only
     */
    hrtc.Instance = RTC;
 8004538:	4b24      	ldr	r3, [pc, #144]	; (80045cc <MX_RTC_Init+0xac>)
 800453a:	4a25      	ldr	r2, [pc, #148]	; (80045d0 <MX_RTC_Init+0xb0>)
 800453c:	601a      	str	r2, [r3, #0]
    hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800453e:	4b23      	ldr	r3, [pc, #140]	; (80045cc <MX_RTC_Init+0xac>)
 8004540:	2200      	movs	r2, #0
 8004542:	605a      	str	r2, [r3, #4]
    hrtc.Init.AsynchPrediv = 127;
 8004544:	4b21      	ldr	r3, [pc, #132]	; (80045cc <MX_RTC_Init+0xac>)
 8004546:	227f      	movs	r2, #127	; 0x7f
 8004548:	609a      	str	r2, [r3, #8]
    hrtc.Init.SynchPrediv = 255;
 800454a:	4b20      	ldr	r3, [pc, #128]	; (80045cc <MX_RTC_Init+0xac>)
 800454c:	22ff      	movs	r2, #255	; 0xff
 800454e:	60da      	str	r2, [r3, #12]
    hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004550:	4b1e      	ldr	r3, [pc, #120]	; (80045cc <MX_RTC_Init+0xac>)
 8004552:	2200      	movs	r2, #0
 8004554:	611a      	str	r2, [r3, #16]
    hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004556:	4b1d      	ldr	r3, [pc, #116]	; (80045cc <MX_RTC_Init+0xac>)
 8004558:	2200      	movs	r2, #0
 800455a:	615a      	str	r2, [r3, #20]
    hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800455c:	4b1b      	ldr	r3, [pc, #108]	; (80045cc <MX_RTC_Init+0xac>)
 800455e:	2200      	movs	r2, #0
 8004560:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8004562:	481a      	ldr	r0, [pc, #104]	; (80045cc <MX_RTC_Init+0xac>)
 8004564:	f003 fa06 	bl	8007974 <HAL_RTC_Init>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <MX_RTC_Init+0x52>
        Error_Handler();
 800456e:	f7ff ffd1 	bl	8004514 <Error_Handler>

    /* USER CODE END Check_RTC_BKUP */

    /** Initialize RTC and set the Time and Date
     */
    sTime.Hours = 0x0;
 8004572:	2300      	movs	r3, #0
 8004574:	713b      	strb	r3, [r7, #4]
    sTime.Minutes = 0x0;
 8004576:	2300      	movs	r3, #0
 8004578:	717b      	strb	r3, [r7, #5]
    sTime.Seconds = 0x0;
 800457a:	2300      	movs	r3, #0
 800457c:	71bb      	strb	r3, [r7, #6]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800457e:	2300      	movs	r3, #0
 8004580:	613b      	str	r3, [r7, #16]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004582:	2300      	movs	r3, #0
 8004584:	617b      	str	r3, [r7, #20]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8004586:	1d3b      	adds	r3, r7, #4
 8004588:	2201      	movs	r2, #1
 800458a:	4619      	mov	r1, r3
 800458c:	480f      	ldr	r0, [pc, #60]	; (80045cc <MX_RTC_Init+0xac>)
 800458e:	f003 fa67 	bl	8007a60 <HAL_RTC_SetTime>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <MX_RTC_Init+0x7c>
        Error_Handler();
 8004598:	f7ff ffbc 	bl	8004514 <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800459c:	2301      	movs	r3, #1
 800459e:	703b      	strb	r3, [r7, #0]
    sDate.Month = RTC_MONTH_JANUARY;
 80045a0:	2301      	movs	r3, #1
 80045a2:	707b      	strb	r3, [r7, #1]
    sDate.Date = 0x1;
 80045a4:	2301      	movs	r3, #1
 80045a6:	70bb      	strb	r3, [r7, #2]
    sDate.Year = 0x0;
 80045a8:	2300      	movs	r3, #0
 80045aa:	70fb      	strb	r3, [r7, #3]

    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 80045ac:	463b      	mov	r3, r7
 80045ae:	2201      	movs	r2, #1
 80045b0:	4619      	mov	r1, r3
 80045b2:	4806      	ldr	r0, [pc, #24]	; (80045cc <MX_RTC_Init+0xac>)
 80045b4:	f003 faee 	bl	8007b94 <HAL_RTC_SetDate>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <MX_RTC_Init+0xa2>
        Error_Handler();
 80045be:	f7ff ffa9 	bl	8004514 <Error_Handler>
    }
    /* USER CODE BEGIN RTC_Init 2 */

    /* USER CODE END RTC_Init 2 */
}
 80045c2:	bf00      	nop
 80045c4:	3718      	adds	r7, #24
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	200021d4 	.word	0x200021d4
 80045d0:	40002800 	.word	0x40002800

080045d4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef * rtcHandle) {
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08e      	sub	sp, #56	; 0x38
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]

    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80045dc:	f107 0308 	add.w	r3, r7, #8
 80045e0:	2230      	movs	r2, #48	; 0x30
 80045e2:	2100      	movs	r1, #0
 80045e4:	4618      	mov	r0, r3
 80045e6:	f007 fe55 	bl	800c294 <memset>
    if (rtcHandle->Instance == RTC) {
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a0c      	ldr	r2, [pc, #48]	; (8004620 <HAL_RTC_MspInit+0x4c>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d111      	bne.n	8004618 <HAL_RTC_MspInit+0x44>

        /* USER CODE END RTC_MspInit 0 */

        /** Initializes the peripherals clock
         */
        PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80045f4:	2320      	movs	r3, #32
 80045f6:	60bb      	str	r3, [r7, #8]
        PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80045f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045fc:	633b      	str	r3, [r7, #48]	; 0x30
        if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80045fe:	f107 0308 	add.w	r3, r7, #8
 8004602:	4618      	mov	r0, r3
 8004604:	f002 fff6 	bl	80075f4 <HAL_RCCEx_PeriphCLKConfig>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <HAL_RTC_MspInit+0x3e>
            Error_Handler();
 800460e:	f7ff ff81 	bl	8004514 <Error_Handler>
        }

        /* RTC clock enable */
        __HAL_RCC_RTC_ENABLE();
 8004612:	4b04      	ldr	r3, [pc, #16]	; (8004624 <HAL_RTC_MspInit+0x50>)
 8004614:	2201      	movs	r2, #1
 8004616:	601a      	str	r2, [r3, #0]
        /* USER CODE BEGIN RTC_MspInit 1 */

        /* USER CODE END RTC_MspInit 1 */
    }
}
 8004618:	bf00      	nop
 800461a:	3738      	adds	r7, #56	; 0x38
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	40002800 	.word	0x40002800
 8004624:	42470e3c 	.word	0x42470e3c

08004628 <MX_SPI1_Init>:
/* USER CODE END 0 */

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void) {
 8004628:	b580      	push	{r7, lr}
 800462a:	af00      	add	r7, sp, #0
    /* USER CODE END SPI1_Init 0 */

    /* USER CODE BEGIN SPI1_Init 1 */

    /* USER CODE END SPI1_Init 1 */
    hspi1.Instance = SPI1;
 800462c:	4b17      	ldr	r3, [pc, #92]	; (800468c <MX_SPI1_Init+0x64>)
 800462e:	4a18      	ldr	r2, [pc, #96]	; (8004690 <MX_SPI1_Init+0x68>)
 8004630:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8004632:	4b16      	ldr	r3, [pc, #88]	; (800468c <MX_SPI1_Init+0x64>)
 8004634:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004638:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800463a:	4b14      	ldr	r3, [pc, #80]	; (800468c <MX_SPI1_Init+0x64>)
 800463c:	2200      	movs	r2, #0
 800463e:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004640:	4b12      	ldr	r3, [pc, #72]	; (800468c <MX_SPI1_Init+0x64>)
 8004642:	2200      	movs	r2, #0
 8004644:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004646:	4b11      	ldr	r3, [pc, #68]	; (800468c <MX_SPI1_Init+0x64>)
 8004648:	2200      	movs	r2, #0
 800464a:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800464c:	4b0f      	ldr	r3, [pc, #60]	; (800468c <MX_SPI1_Init+0x64>)
 800464e:	2200      	movs	r2, #0
 8004650:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8004652:	4b0e      	ldr	r3, [pc, #56]	; (800468c <MX_SPI1_Init+0x64>)
 8004654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004658:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800465a:	4b0c      	ldr	r3, [pc, #48]	; (800468c <MX_SPI1_Init+0x64>)
 800465c:	2210      	movs	r2, #16
 800465e:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004660:	4b0a      	ldr	r3, [pc, #40]	; (800468c <MX_SPI1_Init+0x64>)
 8004662:	2200      	movs	r2, #0
 8004664:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004666:	4b09      	ldr	r3, [pc, #36]	; (800468c <MX_SPI1_Init+0x64>)
 8004668:	2200      	movs	r2, #0
 800466a:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800466c:	4b07      	ldr	r3, [pc, #28]	; (800468c <MX_SPI1_Init+0x64>)
 800466e:	2200      	movs	r2, #0
 8004670:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 10;
 8004672:	4b06      	ldr	r3, [pc, #24]	; (800468c <MX_SPI1_Init+0x64>)
 8004674:	220a      	movs	r2, #10
 8004676:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8004678:	4804      	ldr	r0, [pc, #16]	; (800468c <MX_SPI1_Init+0x64>)
 800467a:	f003 fbb0 	bl	8007dde <HAL_SPI_Init>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <MX_SPI1_Init+0x60>
        Error_Handler();
 8004684:	f7ff ff46 	bl	8004514 <Error_Handler>
    }
    /* USER CODE BEGIN SPI1_Init 2 */

    /* USER CODE END SPI1_Init 2 */
}
 8004688:	bf00      	nop
 800468a:	bd80      	pop	{r7, pc}
 800468c:	200021f4 	.word	0x200021f4
 8004690:	40013000 	.word	0x40013000

08004694 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef * spiHandle) {
 8004694:	b580      	push	{r7, lr}
 8004696:	b08a      	sub	sp, #40	; 0x28
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800469c:	f107 0314 	add.w	r3, r7, #20
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	605a      	str	r2, [r3, #4]
 80046a6:	609a      	str	r2, [r3, #8]
 80046a8:	60da      	str	r2, [r3, #12]
 80046aa:	611a      	str	r2, [r3, #16]
    if (spiHandle->Instance == SPI1) {
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a19      	ldr	r2, [pc, #100]	; (8004718 <HAL_SPI_MspInit+0x84>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d12b      	bne.n	800470e <HAL_SPI_MspInit+0x7a>
        /* USER CODE BEGIN SPI1_MspInit 0 */

        /* USER CODE END SPI1_MspInit 0 */
        /* SPI1 clock enable */
        __HAL_RCC_SPI1_CLK_ENABLE();
 80046b6:	2300      	movs	r3, #0
 80046b8:	613b      	str	r3, [r7, #16]
 80046ba:	4b18      	ldr	r3, [pc, #96]	; (800471c <HAL_SPI_MspInit+0x88>)
 80046bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046be:	4a17      	ldr	r2, [pc, #92]	; (800471c <HAL_SPI_MspInit+0x88>)
 80046c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80046c4:	6453      	str	r3, [r2, #68]	; 0x44
 80046c6:	4b15      	ldr	r3, [pc, #84]	; (800471c <HAL_SPI_MspInit+0x88>)
 80046c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046ce:	613b      	str	r3, [r7, #16]
 80046d0:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 80046d2:	2300      	movs	r3, #0
 80046d4:	60fb      	str	r3, [r7, #12]
 80046d6:	4b11      	ldr	r3, [pc, #68]	; (800471c <HAL_SPI_MspInit+0x88>)
 80046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046da:	4a10      	ldr	r2, [pc, #64]	; (800471c <HAL_SPI_MspInit+0x88>)
 80046dc:	f043 0301 	orr.w	r3, r3, #1
 80046e0:	6313      	str	r3, [r2, #48]	; 0x30
 80046e2:	4b0e      	ldr	r3, [pc, #56]	; (800471c <HAL_SPI_MspInit+0x88>)
 80046e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	60fb      	str	r3, [r7, #12]
 80046ec:	68fb      	ldr	r3, [r7, #12]
        /**SPI1 GPIO Configuration
        PA5     ------> SPI1_SCK
        PA6     ------> SPI1_MISO
        PA7     ------> SPI1_MOSI
        */
        GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 80046ee:	23e0      	movs	r3, #224	; 0xe0
 80046f0:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046f2:	2302      	movs	r3, #2
 80046f4:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f6:	2300      	movs	r3, #0
 80046f8:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046fa:	2303      	movs	r3, #3
 80046fc:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80046fe:	2305      	movs	r3, #5
 8004700:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004702:	f107 0314 	add.w	r3, r7, #20
 8004706:	4619      	mov	r1, r3
 8004708:	4805      	ldr	r0, [pc, #20]	; (8004720 <HAL_SPI_MspInit+0x8c>)
 800470a:	f000 fd63 	bl	80051d4 <HAL_GPIO_Init>

        /* USER CODE BEGIN SPI1_MspInit 1 */

        /* USER CODE END SPI1_MspInit 1 */
    }
}
 800470e:	bf00      	nop
 8004710:	3728      	adds	r7, #40	; 0x28
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	40013000 	.word	0x40013000
 800471c:	40023800 	.word	0x40023800
 8004720:	40020000 	.word	0x40020000

08004724 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef * spiHandle) {
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]

    if (spiHandle->Instance == SPI1) {
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a08      	ldr	r2, [pc, #32]	; (8004754 <HAL_SPI_MspDeInit+0x30>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d109      	bne.n	800474a <HAL_SPI_MspDeInit+0x26>
        /* USER CODE BEGIN SPI1_MspDeInit 0 */

        /* USER CODE END SPI1_MspDeInit 0 */
        /* Peripheral clock disable */
        __HAL_RCC_SPI1_CLK_DISABLE();
 8004736:	4b08      	ldr	r3, [pc, #32]	; (8004758 <HAL_SPI_MspDeInit+0x34>)
 8004738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473a:	4a07      	ldr	r2, [pc, #28]	; (8004758 <HAL_SPI_MspDeInit+0x34>)
 800473c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004740:	6453      	str	r3, [r2, #68]	; 0x44
        /**SPI1 GPIO Configuration
        PA5     ------> SPI1_SCK
        PA6     ------> SPI1_MISO
        PA7     ------> SPI1_MOSI
        */
        HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7);
 8004742:	21e0      	movs	r1, #224	; 0xe0
 8004744:	4805      	ldr	r0, [pc, #20]	; (800475c <HAL_SPI_MspDeInit+0x38>)
 8004746:	f000 fef1 	bl	800552c <HAL_GPIO_DeInit>

        /* USER CODE BEGIN SPI1_MspDeInit 1 */

        /* USER CODE END SPI1_MspDeInit 1 */
    }
}
 800474a:	bf00      	nop
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	40013000 	.word	0x40013000
 8004758:	40023800 	.word	0x40023800
 800475c:	40020000 	.word	0x40020000

08004760 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004766:	2300      	movs	r3, #0
 8004768:	607b      	str	r3, [r7, #4]
 800476a:	4b10      	ldr	r3, [pc, #64]	; (80047ac <HAL_MspInit+0x4c>)
 800476c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476e:	4a0f      	ldr	r2, [pc, #60]	; (80047ac <HAL_MspInit+0x4c>)
 8004770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004774:	6453      	str	r3, [r2, #68]	; 0x44
 8004776:	4b0d      	ldr	r3, [pc, #52]	; (80047ac <HAL_MspInit+0x4c>)
 8004778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800477a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800477e:	607b      	str	r3, [r7, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 8004782:	2300      	movs	r3, #0
 8004784:	603b      	str	r3, [r7, #0]
 8004786:	4b09      	ldr	r3, [pc, #36]	; (80047ac <HAL_MspInit+0x4c>)
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	4a08      	ldr	r2, [pc, #32]	; (80047ac <HAL_MspInit+0x4c>)
 800478c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004790:	6413      	str	r3, [r2, #64]	; 0x40
 8004792:	4b06      	ldr	r3, [pc, #24]	; (80047ac <HAL_MspInit+0x4c>)
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800479a:	603b      	str	r3, [r7, #0]
 800479c:	683b      	ldr	r3, [r7, #0]
    /* System interrupt init*/

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	40023800 	.word	0x40023800

080047b0 <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void) {
 80047b0:	b480      	push	{r7}
 80047b2:	af00      	add	r7, sp, #0
    if (Timer1 > 0)
 80047b4:	4b0e      	ldr	r3, [pc, #56]	; (80047f0 <SDTimer_Handler+0x40>)
 80047b6:	881b      	ldrh	r3, [r3, #0]
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d006      	beq.n	80047cc <SDTimer_Handler+0x1c>
        Timer1--;
 80047be:	4b0c      	ldr	r3, [pc, #48]	; (80047f0 <SDTimer_Handler+0x40>)
 80047c0:	881b      	ldrh	r3, [r3, #0]
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	4b09      	ldr	r3, [pc, #36]	; (80047f0 <SDTimer_Handler+0x40>)
 80047ca:	801a      	strh	r2, [r3, #0]
    if (Timer2 > 0)
 80047cc:	4b09      	ldr	r3, [pc, #36]	; (80047f4 <SDTimer_Handler+0x44>)
 80047ce:	881b      	ldrh	r3, [r3, #0]
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d006      	beq.n	80047e4 <SDTimer_Handler+0x34>
        Timer2--;
 80047d6:	4b07      	ldr	r3, [pc, #28]	; (80047f4 <SDTimer_Handler+0x44>)
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	b29b      	uxth	r3, r3
 80047dc:	3b01      	subs	r3, #1
 80047de:	b29a      	uxth	r2, r3
 80047e0:	4b04      	ldr	r3, [pc, #16]	; (80047f4 <SDTimer_Handler+0x44>)
 80047e2:	801a      	strh	r2, [r3, #0]
}
 80047e4:	bf00      	nop
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	2000224e 	.word	0x2000224e
 80047f4:	20002250 	.word	0x20002250

080047f8 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 80047fc:	e7fe      	b.n	80047fc <NMI_Handler+0x4>

080047fe <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80047fe:	b480      	push	{r7}
 8004800:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1) {
 8004802:	e7fe      	b.n	8004802 <HardFault_Handler+0x4>

08004804 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8004804:	b480      	push	{r7}
 8004806:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1) {
 8004808:	e7fe      	b.n	8004808 <MemManage_Handler+0x4>

0800480a <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 800480a:	b480      	push	{r7}
 800480c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1) {
 800480e:	e7fe      	b.n	800480e <BusFault_Handler+0x4>

08004810 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1) {
 8004814:	e7fe      	b.n	8004814 <UsageFault_Handler+0x4>

08004816 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8004816:	b480      	push	{r7}
 8004818:	af00      	add	r7, sp, #0

    /* USER CODE END SVCall_IRQn 0 */
    /* USER CODE BEGIN SVCall_IRQn 1 */

    /* USER CODE END SVCall_IRQn 1 */
}
 800481a:	bf00      	nop
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8004824:	b480      	push	{r7}
 8004826:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004828:	bf00      	nop
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8004832:	b480      	push	{r7}
 8004834:	af00      	add	r7, sp, #0

    /* USER CODE END PendSV_IRQn 0 */
    /* USER CODE BEGIN PendSV_IRQn 1 */

    /* USER CODE END PendSV_IRQn 1 */
}
 8004836:	bf00      	nop
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */
    FatFsCnt++;
 8004844:	4b0a      	ldr	r3, [pc, #40]	; (8004870 <SysTick_Handler+0x30>)
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	b2db      	uxtb	r3, r3
 800484a:	3301      	adds	r3, #1
 800484c:	b2da      	uxtb	r2, r3
 800484e:	4b08      	ldr	r3, [pc, #32]	; (8004870 <SysTick_Handler+0x30>)
 8004850:	701a      	strb	r2, [r3, #0]
    if (FatFsCnt > 10) {
 8004852:	4b07      	ldr	r3, [pc, #28]	; (8004870 <SysTick_Handler+0x30>)
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b0a      	cmp	r3, #10
 800485a:	d904      	bls.n	8004866 <SysTick_Handler+0x26>
        FatFsCnt = 0;
 800485c:	4b04      	ldr	r3, [pc, #16]	; (8004870 <SysTick_Handler+0x30>)
 800485e:	2200      	movs	r2, #0
 8004860:	701a      	strb	r2, [r3, #0]
        SDTimer_Handler();
 8004862:	f7ff ffa5 	bl	80047b0 <SDTimer_Handler>
    }

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 8004866:	f000 fb8b 	bl	8004f80 <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 800486a:	bf00      	nop
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	2000224c 	.word	0x2000224c

08004874 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8004874:	b480      	push	{r7}
 8004876:	af00      	add	r7, sp, #0
    return 1;
 8004878:	2301      	movs	r3, #1
}
 800487a:	4618      	mov	r0, r3
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <_kill>:

int _kill(int pid, int sig) {
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
    (void)pid;
    (void)sig;
    errno = EINVAL;
 800488e:	f007 fcb9 	bl	800c204 <__errno>
 8004892:	4603      	mov	r3, r0
 8004894:	2216      	movs	r2, #22
 8004896:	601a      	str	r2, [r3, #0]
    return -1;
 8004898:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800489c:	4618      	mov	r0, r3
 800489e:	3708      	adds	r7, #8
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <_exit>:

void _exit(int status) {
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
    _kill(status, -1);
 80048ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f7ff ffe7 	bl	8004884 <_kill>
    while (1) {
 80048b6:	e7fe      	b.n	80048b6 <_exit+0x12>

080048b8 <_read>:
    } /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char * ptr, int len) {
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80048c4:	2300      	movs	r3, #0
 80048c6:	617b      	str	r3, [r7, #20]
 80048c8:	e00a      	b.n	80048e0 <_read+0x28>
        *ptr++ = __io_getchar();
 80048ca:	f3af 8000 	nop.w
 80048ce:	4601      	mov	r1, r0
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	1c5a      	adds	r2, r3, #1
 80048d4:	60ba      	str	r2, [r7, #8]
 80048d6:	b2ca      	uxtb	r2, r1
 80048d8:	701a      	strb	r2, [r3, #0]
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	3301      	adds	r3, #1
 80048de:	617b      	str	r3, [r7, #20]
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	dbf0      	blt.n	80048ca <_read+0x12>
    }

    return len;
 80048e8:	687b      	ldr	r3, [r7, #4]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3718      	adds	r7, #24
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <_write>:

__attribute__((weak)) int _write(int file, char * ptr, int len) {
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b086      	sub	sp, #24
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	60f8      	str	r0, [r7, #12]
 80048fa:	60b9      	str	r1, [r7, #8]
 80048fc:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80048fe:	2300      	movs	r3, #0
 8004900:	617b      	str	r3, [r7, #20]
 8004902:	e009      	b.n	8004918 <_write+0x26>
        __io_putchar(*ptr++);
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	1c5a      	adds	r2, r3, #1
 8004908:	60ba      	str	r2, [r7, #8]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	4618      	mov	r0, r3
 800490e:	f3af 8000 	nop.w
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	3301      	adds	r3, #1
 8004916:	617b      	str	r3, [r7, #20]
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	429a      	cmp	r2, r3
 800491e:	dbf1      	blt.n	8004904 <_write+0x12>
    }
    return len;
 8004920:	687b      	ldr	r3, [r7, #4]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3718      	adds	r7, #24
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <_close>:

int _close(int file) {
 800492a:	b480      	push	{r7}
 800492c:	b083      	sub	sp, #12
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
    (void)file;
    return -1;
 8004932:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004936:	4618      	mov	r0, r3
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <_fstat>:

int _fstat(int file, struct stat * st) {
 8004942:	b480      	push	{r7}
 8004944:	b083      	sub	sp, #12
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
 800494a:	6039      	str	r1, [r7, #0]
    (void)file;
    st->st_mode = S_IFCHR;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004952:	605a      	str	r2, [r3, #4]
    return 0;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <_isatty>:

int _isatty(int file) {
 8004962:	b480      	push	{r7}
 8004964:	b083      	sub	sp, #12
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
    (void)file;
    return 1;
 800496a:	2301      	movs	r3, #1
}
 800496c:	4618      	mov	r0, r3
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
    (void)file;
    (void)ptr;
    (void)dir;
    return 0;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3714      	adds	r7, #20
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
	...

08004994 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void * _sbrk(ptrdiff_t incr) {
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800499c:	4a14      	ldr	r2, [pc, #80]	; (80049f0 <_sbrk+0x5c>)
 800499e:	4b15      	ldr	r3, [pc, #84]	; (80049f4 <_sbrk+0x60>)
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	617b      	str	r3, [r7, #20]
    const uint8_t * max_heap = (uint8_t *)stack_limit;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	613b      	str	r3, [r7, #16]
    uint8_t * prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 80049a8:	4b13      	ldr	r3, [pc, #76]	; (80049f8 <_sbrk+0x64>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d102      	bne.n	80049b6 <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 80049b0:	4b11      	ldr	r3, [pc, #68]	; (80049f8 <_sbrk+0x64>)
 80049b2:	4a12      	ldr	r2, [pc, #72]	; (80049fc <_sbrk+0x68>)
 80049b4:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 80049b6:	4b10      	ldr	r3, [pc, #64]	; (80049f8 <_sbrk+0x64>)
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4413      	add	r3, r2
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d207      	bcs.n	80049d4 <_sbrk+0x40>
        errno = ENOMEM;
 80049c4:	f007 fc1e 	bl	800c204 <__errno>
 80049c8:	4603      	mov	r3, r0
 80049ca:	220c      	movs	r2, #12
 80049cc:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 80049ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049d2:	e009      	b.n	80049e8 <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 80049d4:	4b08      	ldr	r3, [pc, #32]	; (80049f8 <_sbrk+0x64>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 80049da:	4b07      	ldr	r3, [pc, #28]	; (80049f8 <_sbrk+0x64>)
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4413      	add	r3, r2
 80049e2:	4a05      	ldr	r2, [pc, #20]	; (80049f8 <_sbrk+0x64>)
 80049e4:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 80049e6:	68fb      	ldr	r3, [r7, #12]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3718      	adds	r7, #24
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	20030000 	.word	0x20030000
 80049f4:	00000400 	.word	0x00000400
 80049f8:	20002254 	.word	0x20002254
 80049fc:	20002600 	.word	0x20002600

08004a00 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8004a00:	b480      	push	{r7}
 8004a02:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8004a04:	4b06      	ldr	r3, [pc, #24]	; (8004a20 <SystemInit+0x20>)
 8004a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a0a:	4a05      	ldr	r2, [pc, #20]	; (8004a20 <SystemInit+0x20>)
 8004a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 8004a14:	bf00      	nop
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	e000ed00 	.word	0xe000ed00

08004a24 <MX_UART5_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART5 init function */
void MX_UART5_Init(void) {
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0
    /* USER CODE END UART5_Init 0 */

    /* USER CODE BEGIN UART5_Init 1 */

    /* USER CODE END UART5_Init 1 */
    huart5.Instance = UART5;
 8004a28:	4b11      	ldr	r3, [pc, #68]	; (8004a70 <MX_UART5_Init+0x4c>)
 8004a2a:	4a12      	ldr	r2, [pc, #72]	; (8004a74 <MX_UART5_Init+0x50>)
 8004a2c:	601a      	str	r2, [r3, #0]
    huart5.Init.BaudRate = 115200;
 8004a2e:	4b10      	ldr	r3, [pc, #64]	; (8004a70 <MX_UART5_Init+0x4c>)
 8004a30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004a34:	605a      	str	r2, [r3, #4]
    huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8004a36:	4b0e      	ldr	r3, [pc, #56]	; (8004a70 <MX_UART5_Init+0x4c>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	609a      	str	r2, [r3, #8]
    huart5.Init.StopBits = UART_STOPBITS_1;
 8004a3c:	4b0c      	ldr	r3, [pc, #48]	; (8004a70 <MX_UART5_Init+0x4c>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	60da      	str	r2, [r3, #12]
    huart5.Init.Parity = UART_PARITY_NONE;
 8004a42:	4b0b      	ldr	r3, [pc, #44]	; (8004a70 <MX_UART5_Init+0x4c>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	611a      	str	r2, [r3, #16]
    huart5.Init.Mode = UART_MODE_TX_RX;
 8004a48:	4b09      	ldr	r3, [pc, #36]	; (8004a70 <MX_UART5_Init+0x4c>)
 8004a4a:	220c      	movs	r2, #12
 8004a4c:	615a      	str	r2, [r3, #20]
    huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a4e:	4b08      	ldr	r3, [pc, #32]	; (8004a70 <MX_UART5_Init+0x4c>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	619a      	str	r2, [r3, #24]
    huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a54:	4b06      	ldr	r3, [pc, #24]	; (8004a70 <MX_UART5_Init+0x4c>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart5) != HAL_OK) {
 8004a5a:	4805      	ldr	r0, [pc, #20]	; (8004a70 <MX_UART5_Init+0x4c>)
 8004a5c:	f003 fe26 	bl	80086ac <HAL_UART_Init>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <MX_UART5_Init+0x46>
        Error_Handler();
 8004a66:	f7ff fd55 	bl	8004514 <Error_Handler>
    }
    /* USER CODE BEGIN UART5_Init 2 */

    /* USER CODE END UART5_Init 2 */
}
 8004a6a:	bf00      	nop
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	20002258 	.word	0x20002258
 8004a74:	40005000 	.word	0x40005000

08004a78 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void) {
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
    /* USER CODE END UART7_Init 0 */

    /* USER CODE BEGIN UART7_Init 1 */

    /* USER CODE END UART7_Init 1 */
    huart7.Instance = UART7;
 8004a7c:	4b11      	ldr	r3, [pc, #68]	; (8004ac4 <MX_UART7_Init+0x4c>)
 8004a7e:	4a12      	ldr	r2, [pc, #72]	; (8004ac8 <MX_UART7_Init+0x50>)
 8004a80:	601a      	str	r2, [r3, #0]
    huart7.Init.BaudRate = 115200;
 8004a82:	4b10      	ldr	r3, [pc, #64]	; (8004ac4 <MX_UART7_Init+0x4c>)
 8004a84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004a88:	605a      	str	r2, [r3, #4]
    huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8004a8a:	4b0e      	ldr	r3, [pc, #56]	; (8004ac4 <MX_UART7_Init+0x4c>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	609a      	str	r2, [r3, #8]
    huart7.Init.StopBits = UART_STOPBITS_1;
 8004a90:	4b0c      	ldr	r3, [pc, #48]	; (8004ac4 <MX_UART7_Init+0x4c>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	60da      	str	r2, [r3, #12]
    huart7.Init.Parity = UART_PARITY_NONE;
 8004a96:	4b0b      	ldr	r3, [pc, #44]	; (8004ac4 <MX_UART7_Init+0x4c>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	611a      	str	r2, [r3, #16]
    huart7.Init.Mode = UART_MODE_TX_RX;
 8004a9c:	4b09      	ldr	r3, [pc, #36]	; (8004ac4 <MX_UART7_Init+0x4c>)
 8004a9e:	220c      	movs	r2, #12
 8004aa0:	615a      	str	r2, [r3, #20]
    huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004aa2:	4b08      	ldr	r3, [pc, #32]	; (8004ac4 <MX_UART7_Init+0x4c>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	619a      	str	r2, [r3, #24]
    huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8004aa8:	4b06      	ldr	r3, [pc, #24]	; (8004ac4 <MX_UART7_Init+0x4c>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart7) != HAL_OK) {
 8004aae:	4805      	ldr	r0, [pc, #20]	; (8004ac4 <MX_UART7_Init+0x4c>)
 8004ab0:	f003 fdfc 	bl	80086ac <HAL_UART_Init>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <MX_UART7_Init+0x46>
        Error_Handler();
 8004aba:	f7ff fd2b 	bl	8004514 <Error_Handler>
    }
    /* USER CODE BEGIN UART7_Init 2 */

    /* USER CODE END UART7_Init 2 */
}
 8004abe:	bf00      	nop
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	2000229c 	.word	0x2000229c
 8004ac8:	40007800 	.word	0x40007800

08004acc <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void) {
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8004ad0:	4b11      	ldr	r3, [pc, #68]	; (8004b18 <MX_USART1_UART_Init+0x4c>)
 8004ad2:	4a12      	ldr	r2, [pc, #72]	; (8004b1c <MX_USART1_UART_Init+0x50>)
 8004ad4:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8004ad6:	4b10      	ldr	r3, [pc, #64]	; (8004b18 <MX_USART1_UART_Init+0x4c>)
 8004ad8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004adc:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004ade:	4b0e      	ldr	r3, [pc, #56]	; (8004b18 <MX_USART1_UART_Init+0x4c>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8004ae4:	4b0c      	ldr	r3, [pc, #48]	; (8004b18 <MX_USART1_UART_Init+0x4c>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8004aea:	4b0b      	ldr	r3, [pc, #44]	; (8004b18 <MX_USART1_UART_Init+0x4c>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8004af0:	4b09      	ldr	r3, [pc, #36]	; (8004b18 <MX_USART1_UART_Init+0x4c>)
 8004af2:	220c      	movs	r2, #12
 8004af4:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004af6:	4b08      	ldr	r3, [pc, #32]	; (8004b18 <MX_USART1_UART_Init+0x4c>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004afc:	4b06      	ldr	r3, [pc, #24]	; (8004b18 <MX_USART1_UART_Init+0x4c>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 8004b02:	4805      	ldr	r0, [pc, #20]	; (8004b18 <MX_USART1_UART_Init+0x4c>)
 8004b04:	f003 fdd2 	bl	80086ac <HAL_UART_Init>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <MX_USART1_UART_Init+0x46>
        Error_Handler();
 8004b0e:	f7ff fd01 	bl	8004514 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */
}
 8004b12:	bf00      	nop
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	200022e0 	.word	0x200022e0
 8004b1c:	40011000 	.word	0x40011000

08004b20 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void) {
 8004b20:	b580      	push	{r7, lr}
 8004b22:	af00      	add	r7, sp, #0
    /* USER CODE END USART3_Init 0 */

    /* USER CODE BEGIN USART3_Init 1 */

    /* USER CODE END USART3_Init 1 */
    huart3.Instance = USART3;
 8004b24:	4b11      	ldr	r3, [pc, #68]	; (8004b6c <MX_USART3_UART_Init+0x4c>)
 8004b26:	4a12      	ldr	r2, [pc, #72]	; (8004b70 <MX_USART3_UART_Init+0x50>)
 8004b28:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate = 115200;
 8004b2a:	4b10      	ldr	r3, [pc, #64]	; (8004b6c <MX_USART3_UART_Init+0x4c>)
 8004b2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004b30:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004b32:	4b0e      	ldr	r3, [pc, #56]	; (8004b6c <MX_USART3_UART_Init+0x4c>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits = UART_STOPBITS_1;
 8004b38:	4b0c      	ldr	r3, [pc, #48]	; (8004b6c <MX_USART3_UART_Init+0x4c>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity = UART_PARITY_NONE;
 8004b3e:	4b0b      	ldr	r3, [pc, #44]	; (8004b6c <MX_USART3_UART_Init+0x4c>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	611a      	str	r2, [r3, #16]
    huart3.Init.Mode = UART_MODE_TX_RX;
 8004b44:	4b09      	ldr	r3, [pc, #36]	; (8004b6c <MX_USART3_UART_Init+0x4c>)
 8004b46:	220c      	movs	r2, #12
 8004b48:	615a      	str	r2, [r3, #20]
    huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b4a:	4b08      	ldr	r3, [pc, #32]	; (8004b6c <MX_USART3_UART_Init+0x4c>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	619a      	str	r2, [r3, #24]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b50:	4b06      	ldr	r3, [pc, #24]	; (8004b6c <MX_USART3_UART_Init+0x4c>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart3) != HAL_OK) {
 8004b56:	4805      	ldr	r0, [pc, #20]	; (8004b6c <MX_USART3_UART_Init+0x4c>)
 8004b58:	f003 fda8 	bl	80086ac <HAL_UART_Init>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <MX_USART3_UART_Init+0x46>
        Error_Handler();
 8004b62:	f7ff fcd7 	bl	8004514 <Error_Handler>
    }
    /* USER CODE BEGIN USART3_Init 2 */

    /* USER CODE END USART3_Init 2 */
}
 8004b66:	bf00      	nop
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	20002324 	.word	0x20002324
 8004b70:	40004800 	.word	0x40004800

08004b74 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void) {
 8004b74:	b580      	push	{r7, lr}
 8004b76:	af00      	add	r7, sp, #0
    /* USER CODE END USART6_Init 0 */

    /* USER CODE BEGIN USART6_Init 1 */

    /* USER CODE END USART6_Init 1 */
    huart6.Instance = USART6;
 8004b78:	4b11      	ldr	r3, [pc, #68]	; (8004bc0 <MX_USART6_UART_Init+0x4c>)
 8004b7a:	4a12      	ldr	r2, [pc, #72]	; (8004bc4 <MX_USART6_UART_Init+0x50>)
 8004b7c:	601a      	str	r2, [r3, #0]
    huart6.Init.BaudRate = 115200;
 8004b7e:	4b10      	ldr	r3, [pc, #64]	; (8004bc0 <MX_USART6_UART_Init+0x4c>)
 8004b80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004b84:	605a      	str	r2, [r3, #4]
    huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004b86:	4b0e      	ldr	r3, [pc, #56]	; (8004bc0 <MX_USART6_UART_Init+0x4c>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	609a      	str	r2, [r3, #8]
    huart6.Init.StopBits = UART_STOPBITS_1;
 8004b8c:	4b0c      	ldr	r3, [pc, #48]	; (8004bc0 <MX_USART6_UART_Init+0x4c>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	60da      	str	r2, [r3, #12]
    huart6.Init.Parity = UART_PARITY_NONE;
 8004b92:	4b0b      	ldr	r3, [pc, #44]	; (8004bc0 <MX_USART6_UART_Init+0x4c>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	611a      	str	r2, [r3, #16]
    huart6.Init.Mode = UART_MODE_TX_RX;
 8004b98:	4b09      	ldr	r3, [pc, #36]	; (8004bc0 <MX_USART6_UART_Init+0x4c>)
 8004b9a:	220c      	movs	r2, #12
 8004b9c:	615a      	str	r2, [r3, #20]
    huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b9e:	4b08      	ldr	r3, [pc, #32]	; (8004bc0 <MX_USART6_UART_Init+0x4c>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	619a      	str	r2, [r3, #24]
    huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ba4:	4b06      	ldr	r3, [pc, #24]	; (8004bc0 <MX_USART6_UART_Init+0x4c>)
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart6) != HAL_OK) {
 8004baa:	4805      	ldr	r0, [pc, #20]	; (8004bc0 <MX_USART6_UART_Init+0x4c>)
 8004bac:	f003 fd7e 	bl	80086ac <HAL_UART_Init>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <MX_USART6_UART_Init+0x46>
        Error_Handler();
 8004bb6:	f7ff fcad 	bl	8004514 <Error_Handler>
    }
    /* USER CODE BEGIN USART6_Init 2 */

    /* USER CODE END USART6_Init 2 */
}
 8004bba:	bf00      	nop
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	20002368 	.word	0x20002368
 8004bc4:	40011400 	.word	0x40011400

08004bc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef * uartHandle) {
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b092      	sub	sp, #72	; 0x48
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bd0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	605a      	str	r2, [r3, #4]
 8004bda:	609a      	str	r2, [r3, #8]
 8004bdc:	60da      	str	r2, [r3, #12]
 8004bde:	611a      	str	r2, [r3, #16]
    if (uartHandle->Instance == UART5) {
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a9e      	ldr	r2, [pc, #632]	; (8004e60 <HAL_UART_MspInit+0x298>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d14b      	bne.n	8004c82 <HAL_UART_MspInit+0xba>
        /* USER CODE BEGIN UART5_MspInit 0 */

        /* USER CODE END UART5_MspInit 0 */
        /* UART5 clock enable */
        __HAL_RCC_UART5_CLK_ENABLE();
 8004bea:	2300      	movs	r3, #0
 8004bec:	633b      	str	r3, [r7, #48]	; 0x30
 8004bee:	4b9d      	ldr	r3, [pc, #628]	; (8004e64 <HAL_UART_MspInit+0x29c>)
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	4a9c      	ldr	r2, [pc, #624]	; (8004e64 <HAL_UART_MspInit+0x29c>)
 8004bf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bfa:	4b9a      	ldr	r3, [pc, #616]	; (8004e64 <HAL_UART_MspInit+0x29c>)
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c02:	633b      	str	r3, [r7, #48]	; 0x30
 8004c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30

        __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c06:	2300      	movs	r3, #0
 8004c08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c0a:	4b96      	ldr	r3, [pc, #600]	; (8004e64 <HAL_UART_MspInit+0x29c>)
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0e:	4a95      	ldr	r2, [pc, #596]	; (8004e64 <HAL_UART_MspInit+0x29c>)
 8004c10:	f043 0304 	orr.w	r3, r3, #4
 8004c14:	6313      	str	r3, [r2, #48]	; 0x30
 8004c16:	4b93      	ldr	r3, [pc, #588]	; (8004e64 <HAL_UART_MspInit+0x29c>)
 8004c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1a:	f003 0304 	and.w	r3, r3, #4
 8004c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c22:	2300      	movs	r3, #0
 8004c24:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c26:	4b8f      	ldr	r3, [pc, #572]	; (8004e64 <HAL_UART_MspInit+0x29c>)
 8004c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2a:	4a8e      	ldr	r2, [pc, #568]	; (8004e64 <HAL_UART_MspInit+0x29c>)
 8004c2c:	f043 0308 	orr.w	r3, r3, #8
 8004c30:	6313      	str	r3, [r2, #48]	; 0x30
 8004c32:	4b8c      	ldr	r3, [pc, #560]	; (8004e64 <HAL_UART_MspInit+0x29c>)
 8004c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c36:	f003 0308 	and.w	r3, r3, #8
 8004c3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
        /**UART5 GPIO Configuration
        PC12     ------> UART5_TX
        PD2     ------> UART5_RX
        */
        GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004c3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c42:	637b      	str	r3, [r7, #52]	; 0x34
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c44:	2302      	movs	r3, #2
 8004c46:	63bb      	str	r3, [r7, #56]	; 0x38
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	643b      	str	r3, [r7, #64]	; 0x40
        GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004c50:	2308      	movs	r3, #8
 8004c52:	647b      	str	r3, [r7, #68]	; 0x44
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c54:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004c58:	4619      	mov	r1, r3
 8004c5a:	4883      	ldr	r0, [pc, #524]	; (8004e68 <HAL_UART_MspInit+0x2a0>)
 8004c5c:	f000 faba 	bl	80051d4 <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004c60:	2304      	movs	r3, #4
 8004c62:	637b      	str	r3, [r7, #52]	; 0x34
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c64:	2302      	movs	r3, #2
 8004c66:	63bb      	str	r3, [r7, #56]	; 0x38
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	643b      	str	r3, [r7, #64]	; 0x40
        GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004c70:	2308      	movs	r3, #8
 8004c72:	647b      	str	r3, [r7, #68]	; 0x44
        HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004c78:	4619      	mov	r1, r3
 8004c7a:	487c      	ldr	r0, [pc, #496]	; (8004e6c <HAL_UART_MspInit+0x2a4>)
 8004c7c:	f000 faaa 	bl	80051d4 <HAL_GPIO_Init>

        /* USER CODE BEGIN USART6_MspInit 1 */

        /* USER CODE END USART6_MspInit 1 */
    }
}
 8004c80:	e0e9      	b.n	8004e56 <HAL_UART_MspInit+0x28e>
    } else if (uartHandle->Instance == UART7) {
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a7a      	ldr	r2, [pc, #488]	; (8004e70 <HAL_UART_MspInit+0x2a8>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d13c      	bne.n	8004d06 <HAL_UART_MspInit+0x13e>
        __HAL_RCC_UART7_CLK_ENABLE();
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c90:	4b74      	ldr	r3, [pc, #464]	; (8004e64 <HAL_UART_MspInit+0x29c>)
 8004c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c94:	4a73      	ldr	r2, [pc, #460]	; (8004e64 <HAL_UART_MspInit+0x29c>)
 8004c96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c9a:	6413      	str	r3, [r2, #64]	; 0x40
 8004c9c:	4b71      	ldr	r3, [pc, #452]	; (8004e64 <HAL_UART_MspInit+0x29c>)
 8004c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        __HAL_RCC_GPIOF_CLK_ENABLE();
 8004ca8:	2300      	movs	r3, #0
 8004caa:	623b      	str	r3, [r7, #32]
 8004cac:	4b6d      	ldr	r3, [pc, #436]	; (8004e64 <HAL_UART_MspInit+0x29c>)
 8004cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb0:	4a6c      	ldr	r2, [pc, #432]	; (8004e64 <HAL_UART_MspInit+0x29c>)
 8004cb2:	f043 0320 	orr.w	r3, r3, #32
 8004cb6:	6313      	str	r3, [r2, #48]	; 0x30
 8004cb8:	4b6a      	ldr	r3, [pc, #424]	; (8004e64 <HAL_UART_MspInit+0x29c>)
 8004cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbc:	f003 0320 	and.w	r3, r3, #32
 8004cc0:	623b      	str	r3, [r7, #32]
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
        GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004cc4:	2340      	movs	r3, #64	; 0x40
 8004cc6:	637b      	str	r3, [r7, #52]	; 0x34
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cc8:	2302      	movs	r3, #2
 8004cca:	63bb      	str	r3, [r7, #56]	; 0x38
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	63fb      	str	r3, [r7, #60]	; 0x3c
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	643b      	str	r3, [r7, #64]	; 0x40
        GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8004cd4:	2308      	movs	r3, #8
 8004cd6:	647b      	str	r3, [r7, #68]	; 0x44
        HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004cd8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004cdc:	4619      	mov	r1, r3
 8004cde:	4865      	ldr	r0, [pc, #404]	; (8004e74 <HAL_UART_MspInit+0x2ac>)
 8004ce0:	f000 fa78 	bl	80051d4 <HAL_GPIO_Init>
        GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004ce4:	2380      	movs	r3, #128	; 0x80
 8004ce6:	637b      	str	r3, [r7, #52]	; 0x34
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ce8:	2302      	movs	r3, #2
 8004cea:	63bb      	str	r3, [r7, #56]	; 0x38
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cec:	2300      	movs	r3, #0
 8004cee:	63fb      	str	r3, [r7, #60]	; 0x3c
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	643b      	str	r3, [r7, #64]	; 0x40
        GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8004cf4:	2308      	movs	r3, #8
 8004cf6:	647b      	str	r3, [r7, #68]	; 0x44
        HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004cf8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	485d      	ldr	r0, [pc, #372]	; (8004e74 <HAL_UART_MspInit+0x2ac>)
 8004d00:	f000 fa68 	bl	80051d4 <HAL_GPIO_Init>
}
 8004d04:	e0a7      	b.n	8004e56 <HAL_UART_MspInit+0x28e>
    } else if (uartHandle->Instance == USART1) {
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a5b      	ldr	r2, [pc, #364]	; (8004e78 <HAL_UART_MspInit+0x2b0>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d13e      	bne.n	8004d8e <HAL_UART_MspInit+0x1c6>
        __HAL_RCC_USART1_CLK_ENABLE();
 8004d10:	2300      	movs	r3, #0
 8004d12:	61fb      	str	r3, [r7, #28]
 8004d14:	4b53      	ldr	r3, [pc, #332]	; (8004e64 <HAL_UART_MspInit+0x29c>)
 8004d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d18:	4a52      	ldr	r2, [pc, #328]	; (8004e64 <HAL_UART_MspInit+0x29c>)
 8004d1a:	f043 0310 	orr.w	r3, r3, #16
 8004d1e:	6453      	str	r3, [r2, #68]	; 0x44
 8004d20:	4b50      	ldr	r3, [pc, #320]	; (8004e64 <HAL_UART_MspInit+0x29c>)
 8004d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d24:	f003 0310 	and.w	r3, r3, #16
 8004d28:	61fb      	str	r3, [r7, #28]
 8004d2a:	69fb      	ldr	r3, [r7, #28]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	61bb      	str	r3, [r7, #24]
 8004d30:	4b4c      	ldr	r3, [pc, #304]	; (8004e64 <HAL_UART_MspInit+0x29c>)
 8004d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d34:	4a4b      	ldr	r2, [pc, #300]	; (8004e64 <HAL_UART_MspInit+0x29c>)
 8004d36:	f043 0301 	orr.w	r3, r3, #1
 8004d3a:	6313      	str	r3, [r2, #48]	; 0x30
 8004d3c:	4b49      	ldr	r3, [pc, #292]	; (8004e64 <HAL_UART_MspInit+0x29c>)
 8004d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	61bb      	str	r3, [r7, #24]
 8004d46:	69bb      	ldr	r3, [r7, #24]
        GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004d48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d4c:	637b      	str	r3, [r7, #52]	; 0x34
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d4e:	2302      	movs	r3, #2
 8004d50:	63bb      	str	r3, [r7, #56]	; 0x38
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d52:	2300      	movs	r3, #0
 8004d54:	63fb      	str	r3, [r7, #60]	; 0x3c
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d56:	2303      	movs	r3, #3
 8004d58:	643b      	str	r3, [r7, #64]	; 0x40
        GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004d5a:	2307      	movs	r3, #7
 8004d5c:	647b      	str	r3, [r7, #68]	; 0x44
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d5e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004d62:	4619      	mov	r1, r3
 8004d64:	4845      	ldr	r0, [pc, #276]	; (8004e7c <HAL_UART_MspInit+0x2b4>)
 8004d66:	f000 fa35 	bl	80051d4 <HAL_GPIO_Init>
        GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004d6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d6e:	637b      	str	r3, [r7, #52]	; 0x34
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d70:	2302      	movs	r3, #2
 8004d72:	63bb      	str	r3, [r7, #56]	; 0x38
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d74:	2301      	movs	r3, #1
 8004d76:	63fb      	str	r3, [r7, #60]	; 0x3c
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	643b      	str	r3, [r7, #64]	; 0x40
        GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004d7c:	2307      	movs	r3, #7
 8004d7e:	647b      	str	r3, [r7, #68]	; 0x44
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d80:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004d84:	4619      	mov	r1, r3
 8004d86:	483d      	ldr	r0, [pc, #244]	; (8004e7c <HAL_UART_MspInit+0x2b4>)
 8004d88:	f000 fa24 	bl	80051d4 <HAL_GPIO_Init>
}
 8004d8c:	e063      	b.n	8004e56 <HAL_UART_MspInit+0x28e>
    } else if (uartHandle->Instance == USART3) {
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a3b      	ldr	r2, [pc, #236]	; (8004e80 <HAL_UART_MspInit+0x2b8>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d12d      	bne.n	8004df4 <HAL_UART_MspInit+0x22c>
        __HAL_RCC_USART3_CLK_ENABLE();
 8004d98:	2300      	movs	r3, #0
 8004d9a:	617b      	str	r3, [r7, #20]
 8004d9c:	4b31      	ldr	r3, [pc, #196]	; (8004e64 <HAL_UART_MspInit+0x29c>)
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da0:	4a30      	ldr	r2, [pc, #192]	; (8004e64 <HAL_UART_MspInit+0x29c>)
 8004da2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004da6:	6413      	str	r3, [r2, #64]	; 0x40
 8004da8:	4b2e      	ldr	r3, [pc, #184]	; (8004e64 <HAL_UART_MspInit+0x29c>)
 8004daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004db0:	617b      	str	r3, [r7, #20]
 8004db2:	697b      	ldr	r3, [r7, #20]
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8004db4:	2300      	movs	r3, #0
 8004db6:	613b      	str	r3, [r7, #16]
 8004db8:	4b2a      	ldr	r3, [pc, #168]	; (8004e64 <HAL_UART_MspInit+0x29c>)
 8004dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbc:	4a29      	ldr	r2, [pc, #164]	; (8004e64 <HAL_UART_MspInit+0x29c>)
 8004dbe:	f043 0308 	orr.w	r3, r3, #8
 8004dc2:	6313      	str	r3, [r2, #48]	; 0x30
 8004dc4:	4b27      	ldr	r3, [pc, #156]	; (8004e64 <HAL_UART_MspInit+0x29c>)
 8004dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc8:	f003 0308 	and.w	r3, r3, #8
 8004dcc:	613b      	str	r3, [r7, #16]
 8004dce:	693b      	ldr	r3, [r7, #16]
        GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8004dd0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004dd4:	637b      	str	r3, [r7, #52]	; 0x34
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	63bb      	str	r3, [r7, #56]	; 0x38
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dde:	2303      	movs	r3, #3
 8004de0:	643b      	str	r3, [r7, #64]	; 0x40
        GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004de2:	2307      	movs	r3, #7
 8004de4:	647b      	str	r3, [r7, #68]	; 0x44
        HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004de6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004dea:	4619      	mov	r1, r3
 8004dec:	481f      	ldr	r0, [pc, #124]	; (8004e6c <HAL_UART_MspInit+0x2a4>)
 8004dee:	f000 f9f1 	bl	80051d4 <HAL_GPIO_Init>
}
 8004df2:	e030      	b.n	8004e56 <HAL_UART_MspInit+0x28e>
    } else if (uartHandle->Instance == USART6) {
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a22      	ldr	r2, [pc, #136]	; (8004e84 <HAL_UART_MspInit+0x2bc>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d12b      	bne.n	8004e56 <HAL_UART_MspInit+0x28e>
        __HAL_RCC_USART6_CLK_ENABLE();
 8004dfe:	2300      	movs	r3, #0
 8004e00:	60fb      	str	r3, [r7, #12]
 8004e02:	4b18      	ldr	r3, [pc, #96]	; (8004e64 <HAL_UART_MspInit+0x29c>)
 8004e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e06:	4a17      	ldr	r2, [pc, #92]	; (8004e64 <HAL_UART_MspInit+0x29c>)
 8004e08:	f043 0320 	orr.w	r3, r3, #32
 8004e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8004e0e:	4b15      	ldr	r3, [pc, #84]	; (8004e64 <HAL_UART_MspInit+0x29c>)
 8004e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e12:	f003 0320 	and.w	r3, r3, #32
 8004e16:	60fb      	str	r3, [r7, #12]
 8004e18:	68fb      	ldr	r3, [r7, #12]
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	60bb      	str	r3, [r7, #8]
 8004e1e:	4b11      	ldr	r3, [pc, #68]	; (8004e64 <HAL_UART_MspInit+0x29c>)
 8004e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e22:	4a10      	ldr	r2, [pc, #64]	; (8004e64 <HAL_UART_MspInit+0x29c>)
 8004e24:	f043 0304 	orr.w	r3, r3, #4
 8004e28:	6313      	str	r3, [r2, #48]	; 0x30
 8004e2a:	4b0e      	ldr	r3, [pc, #56]	; (8004e64 <HAL_UART_MspInit+0x29c>)
 8004e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2e:	f003 0304 	and.w	r3, r3, #4
 8004e32:	60bb      	str	r3, [r7, #8]
 8004e34:	68bb      	ldr	r3, [r7, #8]
        GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8004e36:	23c0      	movs	r3, #192	; 0xc0
 8004e38:	637b      	str	r3, [r7, #52]	; 0x34
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e3a:	2302      	movs	r3, #2
 8004e3c:	63bb      	str	r3, [r7, #56]	; 0x38
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	63fb      	str	r3, [r7, #60]	; 0x3c
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e42:	2303      	movs	r3, #3
 8004e44:	643b      	str	r3, [r7, #64]	; 0x40
        GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004e46:	2308      	movs	r3, #8
 8004e48:	647b      	str	r3, [r7, #68]	; 0x44
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004e4e:	4619      	mov	r1, r3
 8004e50:	4805      	ldr	r0, [pc, #20]	; (8004e68 <HAL_UART_MspInit+0x2a0>)
 8004e52:	f000 f9bf 	bl	80051d4 <HAL_GPIO_Init>
}
 8004e56:	bf00      	nop
 8004e58:	3748      	adds	r7, #72	; 0x48
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	40005000 	.word	0x40005000
 8004e64:	40023800 	.word	0x40023800
 8004e68:	40020800 	.word	0x40020800
 8004e6c:	40020c00 	.word	0x40020c00
 8004e70:	40007800 	.word	0x40007800
 8004e74:	40021400 	.word	0x40021400
 8004e78:	40011000 	.word	0x40011000
 8004e7c:	40020000 	.word	0x40020000
 8004e80:	40004800 	.word	0x40004800
 8004e84:	40011400 	.word	0x40011400

08004e88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack       /* set stack pointer */
 8004e88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ec0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004e8c:	480d      	ldr	r0, [pc, #52]	; (8004ec4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004e8e:	490e      	ldr	r1, [pc, #56]	; (8004ec8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004e90:	4a0e      	ldr	r2, [pc, #56]	; (8004ecc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e94:	e002      	b.n	8004e9c <LoopCopyDataInit>

08004e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e9a:	3304      	adds	r3, #4

08004e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ea0:	d3f9      	bcc.n	8004e96 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ea2:	4a0b      	ldr	r2, [pc, #44]	; (8004ed0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004ea4:	4c0b      	ldr	r4, [pc, #44]	; (8004ed4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ea8:	e001      	b.n	8004eae <LoopFillZerobss>

08004eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004eac:	3204      	adds	r2, #4

08004eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004eb0:	d3fb      	bcc.n	8004eaa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004eb2:	f7ff fda5 	bl	8004a00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004eb6:	f007 f9ab 	bl	800c210 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004eba:	f7ff f953 	bl	8004164 <main>
  bx  lr
 8004ebe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004ec0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ec8:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 8004ecc:	08012f9c 	.word	0x08012f9c
  ldr r2, =_sbss
 8004ed0:	2000034c 	.word	0x2000034c
  ldr r4, =_ebss
 8004ed4:	200025fc 	.word	0x200025fc

08004ed8 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ed8:	e7fe      	b.n	8004ed8 <ADC_IRQHandler>
	...

08004edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ee0:	4b0e      	ldr	r3, [pc, #56]	; (8004f1c <HAL_Init+0x40>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a0d      	ldr	r2, [pc, #52]	; (8004f1c <HAL_Init+0x40>)
 8004ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004eea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004eec:	4b0b      	ldr	r3, [pc, #44]	; (8004f1c <HAL_Init+0x40>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a0a      	ldr	r2, [pc, #40]	; (8004f1c <HAL_Init+0x40>)
 8004ef2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ef6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ef8:	4b08      	ldr	r3, [pc, #32]	; (8004f1c <HAL_Init+0x40>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a07      	ldr	r2, [pc, #28]	; (8004f1c <HAL_Init+0x40>)
 8004efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f04:	2003      	movs	r0, #3
 8004f06:	f000 f931 	bl	800516c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f0a:	200f      	movs	r0, #15
 8004f0c:	f000 f808 	bl	8004f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f10:	f7ff fc26 	bl	8004760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	40023c00 	.word	0x40023c00

08004f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004f28:	4b12      	ldr	r3, [pc, #72]	; (8004f74 <HAL_InitTick+0x54>)
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	4b12      	ldr	r3, [pc, #72]	; (8004f78 <HAL_InitTick+0x58>)
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	4619      	mov	r1, r3
 8004f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 f93b 	bl	80051ba <HAL_SYSTICK_Config>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e00e      	b.n	8004f6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b0f      	cmp	r3, #15
 8004f52:	d80a      	bhi.n	8004f6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f54:	2200      	movs	r2, #0
 8004f56:	6879      	ldr	r1, [r7, #4]
 8004f58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f5c:	f000 f911 	bl	8005182 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004f60:	4a06      	ldr	r2, [pc, #24]	; (8004f7c <HAL_InitTick+0x5c>)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
 8004f68:	e000      	b.n	8004f6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3708      	adds	r7, #8
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	20000158 	.word	0x20000158
 8004f78:	20000160 	.word	0x20000160
 8004f7c:	2000015c 	.word	0x2000015c

08004f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f80:	b480      	push	{r7}
 8004f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004f84:	4b06      	ldr	r3, [pc, #24]	; (8004fa0 <HAL_IncTick+0x20>)
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	461a      	mov	r2, r3
 8004f8a:	4b06      	ldr	r3, [pc, #24]	; (8004fa4 <HAL_IncTick+0x24>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4413      	add	r3, r2
 8004f90:	4a04      	ldr	r2, [pc, #16]	; (8004fa4 <HAL_IncTick+0x24>)
 8004f92:	6013      	str	r3, [r2, #0]
}
 8004f94:	bf00      	nop
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	20000160 	.word	0x20000160
 8004fa4:	200023ac 	.word	0x200023ac

08004fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
  return uwTick;
 8004fac:	4b03      	ldr	r3, [pc, #12]	; (8004fbc <HAL_GetTick+0x14>)
 8004fae:	681b      	ldr	r3, [r3, #0]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	200023ac 	.word	0x200023ac

08004fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004fc8:	f7ff ffee 	bl	8004fa8 <HAL_GetTick>
 8004fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fd8:	d005      	beq.n	8004fe6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004fda:	4b0a      	ldr	r3, [pc, #40]	; (8005004 <HAL_Delay+0x44>)
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004fe6:	bf00      	nop
 8004fe8:	f7ff ffde 	bl	8004fa8 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d8f7      	bhi.n	8004fe8 <HAL_Delay+0x28>
  {
  }
}
 8004ff8:	bf00      	nop
 8004ffa:	bf00      	nop
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	20000160 	.word	0x20000160

08005008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f003 0307 	and.w	r3, r3, #7
 8005016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005018:	4b0c      	ldr	r3, [pc, #48]	; (800504c <__NVIC_SetPriorityGrouping+0x44>)
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005024:	4013      	ands	r3, r2
 8005026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005030:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800503a:	4a04      	ldr	r2, [pc, #16]	; (800504c <__NVIC_SetPriorityGrouping+0x44>)
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	60d3      	str	r3, [r2, #12]
}
 8005040:	bf00      	nop
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	e000ed00 	.word	0xe000ed00

08005050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005050:	b480      	push	{r7}
 8005052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005054:	4b04      	ldr	r3, [pc, #16]	; (8005068 <__NVIC_GetPriorityGrouping+0x18>)
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	0a1b      	lsrs	r3, r3, #8
 800505a:	f003 0307 	and.w	r3, r3, #7
}
 800505e:	4618      	mov	r0, r3
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	e000ed00 	.word	0xe000ed00

0800506c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	4603      	mov	r3, r0
 8005074:	6039      	str	r1, [r7, #0]
 8005076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800507c:	2b00      	cmp	r3, #0
 800507e:	db0a      	blt.n	8005096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	b2da      	uxtb	r2, r3
 8005084:	490c      	ldr	r1, [pc, #48]	; (80050b8 <__NVIC_SetPriority+0x4c>)
 8005086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800508a:	0112      	lsls	r2, r2, #4
 800508c:	b2d2      	uxtb	r2, r2
 800508e:	440b      	add	r3, r1
 8005090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005094:	e00a      	b.n	80050ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	b2da      	uxtb	r2, r3
 800509a:	4908      	ldr	r1, [pc, #32]	; (80050bc <__NVIC_SetPriority+0x50>)
 800509c:	79fb      	ldrb	r3, [r7, #7]
 800509e:	f003 030f 	and.w	r3, r3, #15
 80050a2:	3b04      	subs	r3, #4
 80050a4:	0112      	lsls	r2, r2, #4
 80050a6:	b2d2      	uxtb	r2, r2
 80050a8:	440b      	add	r3, r1
 80050aa:	761a      	strb	r2, [r3, #24]
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr
 80050b8:	e000e100 	.word	0xe000e100
 80050bc:	e000ed00 	.word	0xe000ed00

080050c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b089      	sub	sp, #36	; 0x24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f003 0307 	and.w	r3, r3, #7
 80050d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	f1c3 0307 	rsb	r3, r3, #7
 80050da:	2b04      	cmp	r3, #4
 80050dc:	bf28      	it	cs
 80050de:	2304      	movcs	r3, #4
 80050e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	3304      	adds	r3, #4
 80050e6:	2b06      	cmp	r3, #6
 80050e8:	d902      	bls.n	80050f0 <NVIC_EncodePriority+0x30>
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	3b03      	subs	r3, #3
 80050ee:	e000      	b.n	80050f2 <NVIC_EncodePriority+0x32>
 80050f0:	2300      	movs	r3, #0
 80050f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	fa02 f303 	lsl.w	r3, r2, r3
 80050fe:	43da      	mvns	r2, r3
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	401a      	ands	r2, r3
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005108:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	fa01 f303 	lsl.w	r3, r1, r3
 8005112:	43d9      	mvns	r1, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005118:	4313      	orrs	r3, r2
         );
}
 800511a:	4618      	mov	r0, r3
 800511c:	3724      	adds	r7, #36	; 0x24
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
	...

08005128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	3b01      	subs	r3, #1
 8005134:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005138:	d301      	bcc.n	800513e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800513a:	2301      	movs	r3, #1
 800513c:	e00f      	b.n	800515e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800513e:	4a0a      	ldr	r2, [pc, #40]	; (8005168 <SysTick_Config+0x40>)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	3b01      	subs	r3, #1
 8005144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005146:	210f      	movs	r1, #15
 8005148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800514c:	f7ff ff8e 	bl	800506c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005150:	4b05      	ldr	r3, [pc, #20]	; (8005168 <SysTick_Config+0x40>)
 8005152:	2200      	movs	r2, #0
 8005154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005156:	4b04      	ldr	r3, [pc, #16]	; (8005168 <SysTick_Config+0x40>)
 8005158:	2207      	movs	r2, #7
 800515a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	e000e010 	.word	0xe000e010

0800516c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f7ff ff47 	bl	8005008 <__NVIC_SetPriorityGrouping>
}
 800517a:	bf00      	nop
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b086      	sub	sp, #24
 8005186:	af00      	add	r7, sp, #0
 8005188:	4603      	mov	r3, r0
 800518a:	60b9      	str	r1, [r7, #8]
 800518c:	607a      	str	r2, [r7, #4]
 800518e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005190:	2300      	movs	r3, #0
 8005192:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005194:	f7ff ff5c 	bl	8005050 <__NVIC_GetPriorityGrouping>
 8005198:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	68b9      	ldr	r1, [r7, #8]
 800519e:	6978      	ldr	r0, [r7, #20]
 80051a0:	f7ff ff8e 	bl	80050c0 <NVIC_EncodePriority>
 80051a4:	4602      	mov	r2, r0
 80051a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051aa:	4611      	mov	r1, r2
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7ff ff5d 	bl	800506c <__NVIC_SetPriority>
}
 80051b2:	bf00      	nop
 80051b4:	3718      	adds	r7, #24
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b082      	sub	sp, #8
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f7ff ffb0 	bl	8005128 <SysTick_Config>
 80051c8:	4603      	mov	r3, r0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3708      	adds	r7, #8
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
	...

080051d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b089      	sub	sp, #36	; 0x24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80051de:	2300      	movs	r3, #0
 80051e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80051e2:	2300      	movs	r3, #0
 80051e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80051e6:	2300      	movs	r3, #0
 80051e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051ea:	2300      	movs	r3, #0
 80051ec:	61fb      	str	r3, [r7, #28]
 80051ee:	e177      	b.n	80054e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80051f0:	2201      	movs	r2, #1
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	fa02 f303 	lsl.w	r3, r2, r3
 80051f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	4013      	ands	r3, r2
 8005202:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	429a      	cmp	r2, r3
 800520a:	f040 8166 	bne.w	80054da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f003 0303 	and.w	r3, r3, #3
 8005216:	2b01      	cmp	r3, #1
 8005218:	d005      	beq.n	8005226 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005222:	2b02      	cmp	r3, #2
 8005224:	d130      	bne.n	8005288 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	005b      	lsls	r3, r3, #1
 8005230:	2203      	movs	r2, #3
 8005232:	fa02 f303 	lsl.w	r3, r2, r3
 8005236:	43db      	mvns	r3, r3
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	4013      	ands	r3, r2
 800523c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	68da      	ldr	r2, [r3, #12]
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	005b      	lsls	r3, r3, #1
 8005246:	fa02 f303 	lsl.w	r3, r2, r3
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	4313      	orrs	r3, r2
 800524e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800525c:	2201      	movs	r2, #1
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	fa02 f303 	lsl.w	r3, r2, r3
 8005264:	43db      	mvns	r3, r3
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	4013      	ands	r3, r2
 800526a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	091b      	lsrs	r3, r3, #4
 8005272:	f003 0201 	and.w	r2, r3, #1
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	fa02 f303 	lsl.w	r3, r2, r3
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	4313      	orrs	r3, r2
 8005280:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f003 0303 	and.w	r3, r3, #3
 8005290:	2b03      	cmp	r3, #3
 8005292:	d017      	beq.n	80052c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	2203      	movs	r2, #3
 80052a0:	fa02 f303 	lsl.w	r3, r2, r3
 80052a4:	43db      	mvns	r3, r3
 80052a6:	69ba      	ldr	r2, [r7, #24]
 80052a8:	4013      	ands	r3, r2
 80052aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	005b      	lsls	r3, r3, #1
 80052b4:	fa02 f303 	lsl.w	r3, r2, r3
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f003 0303 	and.w	r3, r3, #3
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d123      	bne.n	8005318 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	08da      	lsrs	r2, r3, #3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	3208      	adds	r2, #8
 80052d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	f003 0307 	and.w	r3, r3, #7
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	220f      	movs	r2, #15
 80052e8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ec:	43db      	mvns	r3, r3
 80052ee:	69ba      	ldr	r2, [r7, #24]
 80052f0:	4013      	ands	r3, r2
 80052f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	691a      	ldr	r2, [r3, #16]
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	f003 0307 	and.w	r3, r3, #7
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	fa02 f303 	lsl.w	r3, r2, r3
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	4313      	orrs	r3, r2
 8005308:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	08da      	lsrs	r2, r3, #3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	3208      	adds	r2, #8
 8005312:	69b9      	ldr	r1, [r7, #24]
 8005314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	2203      	movs	r2, #3
 8005324:	fa02 f303 	lsl.w	r3, r2, r3
 8005328:	43db      	mvns	r3, r3
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	4013      	ands	r3, r2
 800532e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f003 0203 	and.w	r2, r3, #3
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	005b      	lsls	r3, r3, #1
 800533c:	fa02 f303 	lsl.w	r3, r2, r3
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	4313      	orrs	r3, r2
 8005344:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005354:	2b00      	cmp	r3, #0
 8005356:	f000 80c0 	beq.w	80054da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800535a:	2300      	movs	r3, #0
 800535c:	60fb      	str	r3, [r7, #12]
 800535e:	4b66      	ldr	r3, [pc, #408]	; (80054f8 <HAL_GPIO_Init+0x324>)
 8005360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005362:	4a65      	ldr	r2, [pc, #404]	; (80054f8 <HAL_GPIO_Init+0x324>)
 8005364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005368:	6453      	str	r3, [r2, #68]	; 0x44
 800536a:	4b63      	ldr	r3, [pc, #396]	; (80054f8 <HAL_GPIO_Init+0x324>)
 800536c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800536e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005372:	60fb      	str	r3, [r7, #12]
 8005374:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005376:	4a61      	ldr	r2, [pc, #388]	; (80054fc <HAL_GPIO_Init+0x328>)
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	089b      	lsrs	r3, r3, #2
 800537c:	3302      	adds	r3, #2
 800537e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	f003 0303 	and.w	r3, r3, #3
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	220f      	movs	r2, #15
 800538e:	fa02 f303 	lsl.w	r3, r2, r3
 8005392:	43db      	mvns	r3, r3
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	4013      	ands	r3, r2
 8005398:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a58      	ldr	r2, [pc, #352]	; (8005500 <HAL_GPIO_Init+0x32c>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d037      	beq.n	8005412 <HAL_GPIO_Init+0x23e>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a57      	ldr	r2, [pc, #348]	; (8005504 <HAL_GPIO_Init+0x330>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d031      	beq.n	800540e <HAL_GPIO_Init+0x23a>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a56      	ldr	r2, [pc, #344]	; (8005508 <HAL_GPIO_Init+0x334>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d02b      	beq.n	800540a <HAL_GPIO_Init+0x236>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a55      	ldr	r2, [pc, #340]	; (800550c <HAL_GPIO_Init+0x338>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d025      	beq.n	8005406 <HAL_GPIO_Init+0x232>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a54      	ldr	r2, [pc, #336]	; (8005510 <HAL_GPIO_Init+0x33c>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d01f      	beq.n	8005402 <HAL_GPIO_Init+0x22e>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a53      	ldr	r2, [pc, #332]	; (8005514 <HAL_GPIO_Init+0x340>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d019      	beq.n	80053fe <HAL_GPIO_Init+0x22a>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a52      	ldr	r2, [pc, #328]	; (8005518 <HAL_GPIO_Init+0x344>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d013      	beq.n	80053fa <HAL_GPIO_Init+0x226>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a51      	ldr	r2, [pc, #324]	; (800551c <HAL_GPIO_Init+0x348>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d00d      	beq.n	80053f6 <HAL_GPIO_Init+0x222>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a50      	ldr	r2, [pc, #320]	; (8005520 <HAL_GPIO_Init+0x34c>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d007      	beq.n	80053f2 <HAL_GPIO_Init+0x21e>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a4f      	ldr	r2, [pc, #316]	; (8005524 <HAL_GPIO_Init+0x350>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d101      	bne.n	80053ee <HAL_GPIO_Init+0x21a>
 80053ea:	2309      	movs	r3, #9
 80053ec:	e012      	b.n	8005414 <HAL_GPIO_Init+0x240>
 80053ee:	230a      	movs	r3, #10
 80053f0:	e010      	b.n	8005414 <HAL_GPIO_Init+0x240>
 80053f2:	2308      	movs	r3, #8
 80053f4:	e00e      	b.n	8005414 <HAL_GPIO_Init+0x240>
 80053f6:	2307      	movs	r3, #7
 80053f8:	e00c      	b.n	8005414 <HAL_GPIO_Init+0x240>
 80053fa:	2306      	movs	r3, #6
 80053fc:	e00a      	b.n	8005414 <HAL_GPIO_Init+0x240>
 80053fe:	2305      	movs	r3, #5
 8005400:	e008      	b.n	8005414 <HAL_GPIO_Init+0x240>
 8005402:	2304      	movs	r3, #4
 8005404:	e006      	b.n	8005414 <HAL_GPIO_Init+0x240>
 8005406:	2303      	movs	r3, #3
 8005408:	e004      	b.n	8005414 <HAL_GPIO_Init+0x240>
 800540a:	2302      	movs	r3, #2
 800540c:	e002      	b.n	8005414 <HAL_GPIO_Init+0x240>
 800540e:	2301      	movs	r3, #1
 8005410:	e000      	b.n	8005414 <HAL_GPIO_Init+0x240>
 8005412:	2300      	movs	r3, #0
 8005414:	69fa      	ldr	r2, [r7, #28]
 8005416:	f002 0203 	and.w	r2, r2, #3
 800541a:	0092      	lsls	r2, r2, #2
 800541c:	4093      	lsls	r3, r2
 800541e:	69ba      	ldr	r2, [r7, #24]
 8005420:	4313      	orrs	r3, r2
 8005422:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005424:	4935      	ldr	r1, [pc, #212]	; (80054fc <HAL_GPIO_Init+0x328>)
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	089b      	lsrs	r3, r3, #2
 800542a:	3302      	adds	r3, #2
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005432:	4b3d      	ldr	r3, [pc, #244]	; (8005528 <HAL_GPIO_Init+0x354>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	43db      	mvns	r3, r3
 800543c:	69ba      	ldr	r2, [r7, #24]
 800543e:	4013      	ands	r3, r2
 8005440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800544e:	69ba      	ldr	r2, [r7, #24]
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	4313      	orrs	r3, r2
 8005454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005456:	4a34      	ldr	r2, [pc, #208]	; (8005528 <HAL_GPIO_Init+0x354>)
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800545c:	4b32      	ldr	r3, [pc, #200]	; (8005528 <HAL_GPIO_Init+0x354>)
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	43db      	mvns	r3, r3
 8005466:	69ba      	ldr	r2, [r7, #24]
 8005468:	4013      	ands	r3, r2
 800546a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d003      	beq.n	8005480 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	4313      	orrs	r3, r2
 800547e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005480:	4a29      	ldr	r2, [pc, #164]	; (8005528 <HAL_GPIO_Init+0x354>)
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005486:	4b28      	ldr	r3, [pc, #160]	; (8005528 <HAL_GPIO_Init+0x354>)
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	43db      	mvns	r3, r3
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	4013      	ands	r3, r2
 8005494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80054aa:	4a1f      	ldr	r2, [pc, #124]	; (8005528 <HAL_GPIO_Init+0x354>)
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80054b0:	4b1d      	ldr	r3, [pc, #116]	; (8005528 <HAL_GPIO_Init+0x354>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	43db      	mvns	r3, r3
 80054ba:	69ba      	ldr	r2, [r7, #24]
 80054bc:	4013      	ands	r3, r2
 80054be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d003      	beq.n	80054d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80054d4:	4a14      	ldr	r2, [pc, #80]	; (8005528 <HAL_GPIO_Init+0x354>)
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	3301      	adds	r3, #1
 80054de:	61fb      	str	r3, [r7, #28]
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	2b0f      	cmp	r3, #15
 80054e4:	f67f ae84 	bls.w	80051f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80054e8:	bf00      	nop
 80054ea:	bf00      	nop
 80054ec:	3724      	adds	r7, #36	; 0x24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	40023800 	.word	0x40023800
 80054fc:	40013800 	.word	0x40013800
 8005500:	40020000 	.word	0x40020000
 8005504:	40020400 	.word	0x40020400
 8005508:	40020800 	.word	0x40020800
 800550c:	40020c00 	.word	0x40020c00
 8005510:	40021000 	.word	0x40021000
 8005514:	40021400 	.word	0x40021400
 8005518:	40021800 	.word	0x40021800
 800551c:	40021c00 	.word	0x40021c00
 8005520:	40022000 	.word	0x40022000
 8005524:	40022400 	.word	0x40022400
 8005528:	40013c00 	.word	0x40013c00

0800552c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800552c:	b480      	push	{r7}
 800552e:	b087      	sub	sp, #28
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005536:	2300      	movs	r3, #0
 8005538:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800553a:	2300      	movs	r3, #0
 800553c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800553e:	2300      	movs	r3, #0
 8005540:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005542:	2300      	movs	r3, #0
 8005544:	617b      	str	r3, [r7, #20]
 8005546:	e0d9      	b.n	80056fc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005548:	2201      	movs	r2, #1
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	fa02 f303 	lsl.w	r3, r2, r3
 8005550:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	4013      	ands	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	429a      	cmp	r2, r3
 8005560:	f040 80c9 	bne.w	80056f6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005564:	4a6b      	ldr	r2, [pc, #428]	; (8005714 <HAL_GPIO_DeInit+0x1e8>)
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	089b      	lsrs	r3, r3, #2
 800556a:	3302      	adds	r3, #2
 800556c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005570:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f003 0303 	and.w	r3, r3, #3
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	220f      	movs	r2, #15
 800557c:	fa02 f303 	lsl.w	r3, r2, r3
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	4013      	ands	r3, r2
 8005584:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a63      	ldr	r2, [pc, #396]	; (8005718 <HAL_GPIO_DeInit+0x1ec>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d037      	beq.n	80055fe <HAL_GPIO_DeInit+0xd2>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a62      	ldr	r2, [pc, #392]	; (800571c <HAL_GPIO_DeInit+0x1f0>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d031      	beq.n	80055fa <HAL_GPIO_DeInit+0xce>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a61      	ldr	r2, [pc, #388]	; (8005720 <HAL_GPIO_DeInit+0x1f4>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d02b      	beq.n	80055f6 <HAL_GPIO_DeInit+0xca>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a60      	ldr	r2, [pc, #384]	; (8005724 <HAL_GPIO_DeInit+0x1f8>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d025      	beq.n	80055f2 <HAL_GPIO_DeInit+0xc6>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a5f      	ldr	r2, [pc, #380]	; (8005728 <HAL_GPIO_DeInit+0x1fc>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d01f      	beq.n	80055ee <HAL_GPIO_DeInit+0xc2>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a5e      	ldr	r2, [pc, #376]	; (800572c <HAL_GPIO_DeInit+0x200>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d019      	beq.n	80055ea <HAL_GPIO_DeInit+0xbe>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a5d      	ldr	r2, [pc, #372]	; (8005730 <HAL_GPIO_DeInit+0x204>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d013      	beq.n	80055e6 <HAL_GPIO_DeInit+0xba>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a5c      	ldr	r2, [pc, #368]	; (8005734 <HAL_GPIO_DeInit+0x208>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d00d      	beq.n	80055e2 <HAL_GPIO_DeInit+0xb6>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a5b      	ldr	r2, [pc, #364]	; (8005738 <HAL_GPIO_DeInit+0x20c>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d007      	beq.n	80055de <HAL_GPIO_DeInit+0xb2>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a5a      	ldr	r2, [pc, #360]	; (800573c <HAL_GPIO_DeInit+0x210>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d101      	bne.n	80055da <HAL_GPIO_DeInit+0xae>
 80055d6:	2309      	movs	r3, #9
 80055d8:	e012      	b.n	8005600 <HAL_GPIO_DeInit+0xd4>
 80055da:	230a      	movs	r3, #10
 80055dc:	e010      	b.n	8005600 <HAL_GPIO_DeInit+0xd4>
 80055de:	2308      	movs	r3, #8
 80055e0:	e00e      	b.n	8005600 <HAL_GPIO_DeInit+0xd4>
 80055e2:	2307      	movs	r3, #7
 80055e4:	e00c      	b.n	8005600 <HAL_GPIO_DeInit+0xd4>
 80055e6:	2306      	movs	r3, #6
 80055e8:	e00a      	b.n	8005600 <HAL_GPIO_DeInit+0xd4>
 80055ea:	2305      	movs	r3, #5
 80055ec:	e008      	b.n	8005600 <HAL_GPIO_DeInit+0xd4>
 80055ee:	2304      	movs	r3, #4
 80055f0:	e006      	b.n	8005600 <HAL_GPIO_DeInit+0xd4>
 80055f2:	2303      	movs	r3, #3
 80055f4:	e004      	b.n	8005600 <HAL_GPIO_DeInit+0xd4>
 80055f6:	2302      	movs	r3, #2
 80055f8:	e002      	b.n	8005600 <HAL_GPIO_DeInit+0xd4>
 80055fa:	2301      	movs	r3, #1
 80055fc:	e000      	b.n	8005600 <HAL_GPIO_DeInit+0xd4>
 80055fe:	2300      	movs	r3, #0
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	f002 0203 	and.w	r2, r2, #3
 8005606:	0092      	lsls	r2, r2, #2
 8005608:	4093      	lsls	r3, r2
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	429a      	cmp	r2, r3
 800560e:	d132      	bne.n	8005676 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005610:	4b4b      	ldr	r3, [pc, #300]	; (8005740 <HAL_GPIO_DeInit+0x214>)
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	43db      	mvns	r3, r3
 8005618:	4949      	ldr	r1, [pc, #292]	; (8005740 <HAL_GPIO_DeInit+0x214>)
 800561a:	4013      	ands	r3, r2
 800561c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800561e:	4b48      	ldr	r3, [pc, #288]	; (8005740 <HAL_GPIO_DeInit+0x214>)
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	43db      	mvns	r3, r3
 8005626:	4946      	ldr	r1, [pc, #280]	; (8005740 <HAL_GPIO_DeInit+0x214>)
 8005628:	4013      	ands	r3, r2
 800562a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800562c:	4b44      	ldr	r3, [pc, #272]	; (8005740 <HAL_GPIO_DeInit+0x214>)
 800562e:	68da      	ldr	r2, [r3, #12]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	43db      	mvns	r3, r3
 8005634:	4942      	ldr	r1, [pc, #264]	; (8005740 <HAL_GPIO_DeInit+0x214>)
 8005636:	4013      	ands	r3, r2
 8005638:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800563a:	4b41      	ldr	r3, [pc, #260]	; (8005740 <HAL_GPIO_DeInit+0x214>)
 800563c:	689a      	ldr	r2, [r3, #8]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	43db      	mvns	r3, r3
 8005642:	493f      	ldr	r1, [pc, #252]	; (8005740 <HAL_GPIO_DeInit+0x214>)
 8005644:	4013      	ands	r3, r2
 8005646:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	f003 0303 	and.w	r3, r3, #3
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	220f      	movs	r2, #15
 8005652:	fa02 f303 	lsl.w	r3, r2, r3
 8005656:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005658:	4a2e      	ldr	r2, [pc, #184]	; (8005714 <HAL_GPIO_DeInit+0x1e8>)
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	089b      	lsrs	r3, r3, #2
 800565e:	3302      	adds	r3, #2
 8005660:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	43da      	mvns	r2, r3
 8005668:	482a      	ldr	r0, [pc, #168]	; (8005714 <HAL_GPIO_DeInit+0x1e8>)
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	089b      	lsrs	r3, r3, #2
 800566e:	400a      	ands	r2, r1
 8005670:	3302      	adds	r3, #2
 8005672:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	005b      	lsls	r3, r3, #1
 800567e:	2103      	movs	r1, #3
 8005680:	fa01 f303 	lsl.w	r3, r1, r3
 8005684:	43db      	mvns	r3, r3
 8005686:	401a      	ands	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	08da      	lsrs	r2, r3, #3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3208      	adds	r2, #8
 8005694:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	f003 0307 	and.w	r3, r3, #7
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	220f      	movs	r2, #15
 80056a2:	fa02 f303 	lsl.w	r3, r2, r3
 80056a6:	43db      	mvns	r3, r3
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	08d2      	lsrs	r2, r2, #3
 80056ac:	4019      	ands	r1, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	3208      	adds	r2, #8
 80056b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68da      	ldr	r2, [r3, #12]
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	005b      	lsls	r3, r3, #1
 80056be:	2103      	movs	r1, #3
 80056c0:	fa01 f303 	lsl.w	r3, r1, r3
 80056c4:	43db      	mvns	r3, r3
 80056c6:	401a      	ands	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	2101      	movs	r1, #1
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	fa01 f303 	lsl.w	r3, r1, r3
 80056d8:	43db      	mvns	r3, r3
 80056da:	401a      	ands	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689a      	ldr	r2, [r3, #8]
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	005b      	lsls	r3, r3, #1
 80056e8:	2103      	movs	r1, #3
 80056ea:	fa01 f303 	lsl.w	r3, r1, r3
 80056ee:	43db      	mvns	r3, r3
 80056f0:	401a      	ands	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	3301      	adds	r3, #1
 80056fa:	617b      	str	r3, [r7, #20]
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	2b0f      	cmp	r3, #15
 8005700:	f67f af22 	bls.w	8005548 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005704:	bf00      	nop
 8005706:	bf00      	nop
 8005708:	371c      	adds	r7, #28
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	40013800 	.word	0x40013800
 8005718:	40020000 	.word	0x40020000
 800571c:	40020400 	.word	0x40020400
 8005720:	40020800 	.word	0x40020800
 8005724:	40020c00 	.word	0x40020c00
 8005728:	40021000 	.word	0x40021000
 800572c:	40021400 	.word	0x40021400
 8005730:	40021800 	.word	0x40021800
 8005734:	40021c00 	.word	0x40021c00
 8005738:	40022000 	.word	0x40022000
 800573c:	40022400 	.word	0x40022400
 8005740:	40013c00 	.word	0x40013c00

08005744 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	460b      	mov	r3, r1
 800574e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	691a      	ldr	r2, [r3, #16]
 8005754:	887b      	ldrh	r3, [r7, #2]
 8005756:	4013      	ands	r3, r2
 8005758:	2b00      	cmp	r3, #0
 800575a:	d002      	beq.n	8005762 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800575c:	2301      	movs	r3, #1
 800575e:	73fb      	strb	r3, [r7, #15]
 8005760:	e001      	b.n	8005766 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005762:	2300      	movs	r3, #0
 8005764:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005766:	7bfb      	ldrb	r3, [r7, #15]
}
 8005768:	4618      	mov	r0, r3
 800576a:	3714      	adds	r7, #20
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	460b      	mov	r3, r1
 800577e:	807b      	strh	r3, [r7, #2]
 8005780:	4613      	mov	r3, r2
 8005782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005784:	787b      	ldrb	r3, [r7, #1]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d003      	beq.n	8005792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800578a:	887a      	ldrh	r2, [r7, #2]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005790:	e003      	b.n	800579a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005792:	887b      	ldrh	r3, [r7, #2]
 8005794:	041a      	lsls	r2, r3, #16
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	619a      	str	r2, [r3, #24]
}
 800579a:	bf00      	nop
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
	...

080057a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d101      	bne.n	80057ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e12b      	b.n	8005a12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d106      	bne.n	80057d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f7fe fc80 	bl	80040d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2224      	movs	r2, #36	; 0x24
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f022 0201 	bic.w	r2, r2, #1
 80057ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800580a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800580c:	f001 feca 	bl	80075a4 <HAL_RCC_GetPCLK1Freq>
 8005810:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	4a81      	ldr	r2, [pc, #516]	; (8005a1c <HAL_I2C_Init+0x274>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d807      	bhi.n	800582c <HAL_I2C_Init+0x84>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	4a80      	ldr	r2, [pc, #512]	; (8005a20 <HAL_I2C_Init+0x278>)
 8005820:	4293      	cmp	r3, r2
 8005822:	bf94      	ite	ls
 8005824:	2301      	movls	r3, #1
 8005826:	2300      	movhi	r3, #0
 8005828:	b2db      	uxtb	r3, r3
 800582a:	e006      	b.n	800583a <HAL_I2C_Init+0x92>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	4a7d      	ldr	r2, [pc, #500]	; (8005a24 <HAL_I2C_Init+0x27c>)
 8005830:	4293      	cmp	r3, r2
 8005832:	bf94      	ite	ls
 8005834:	2301      	movls	r3, #1
 8005836:	2300      	movhi	r3, #0
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d001      	beq.n	8005842 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e0e7      	b.n	8005a12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	4a78      	ldr	r2, [pc, #480]	; (8005a28 <HAL_I2C_Init+0x280>)
 8005846:	fba2 2303 	umull	r2, r3, r2, r3
 800584a:	0c9b      	lsrs	r3, r3, #18
 800584c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	430a      	orrs	r2, r1
 8005860:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	4a6a      	ldr	r2, [pc, #424]	; (8005a1c <HAL_I2C_Init+0x274>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d802      	bhi.n	800587c <HAL_I2C_Init+0xd4>
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	3301      	adds	r3, #1
 800587a:	e009      	b.n	8005890 <HAL_I2C_Init+0xe8>
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005882:	fb02 f303 	mul.w	r3, r2, r3
 8005886:	4a69      	ldr	r2, [pc, #420]	; (8005a2c <HAL_I2C_Init+0x284>)
 8005888:	fba2 2303 	umull	r2, r3, r2, r3
 800588c:	099b      	lsrs	r3, r3, #6
 800588e:	3301      	adds	r3, #1
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	6812      	ldr	r2, [r2, #0]
 8005894:	430b      	orrs	r3, r1
 8005896:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	69db      	ldr	r3, [r3, #28]
 800589e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80058a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	495c      	ldr	r1, [pc, #368]	; (8005a1c <HAL_I2C_Init+0x274>)
 80058ac:	428b      	cmp	r3, r1
 80058ae:	d819      	bhi.n	80058e4 <HAL_I2C_Init+0x13c>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	1e59      	subs	r1, r3, #1
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	005b      	lsls	r3, r3, #1
 80058ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80058be:	1c59      	adds	r1, r3, #1
 80058c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80058c4:	400b      	ands	r3, r1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00a      	beq.n	80058e0 <HAL_I2C_Init+0x138>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	1e59      	subs	r1, r3, #1
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	005b      	lsls	r3, r3, #1
 80058d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80058d8:	3301      	adds	r3, #1
 80058da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058de:	e051      	b.n	8005984 <HAL_I2C_Init+0x1dc>
 80058e0:	2304      	movs	r3, #4
 80058e2:	e04f      	b.n	8005984 <HAL_I2C_Init+0x1dc>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d111      	bne.n	8005910 <HAL_I2C_Init+0x168>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	1e58      	subs	r0, r3, #1
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6859      	ldr	r1, [r3, #4]
 80058f4:	460b      	mov	r3, r1
 80058f6:	005b      	lsls	r3, r3, #1
 80058f8:	440b      	add	r3, r1
 80058fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80058fe:	3301      	adds	r3, #1
 8005900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005904:	2b00      	cmp	r3, #0
 8005906:	bf0c      	ite	eq
 8005908:	2301      	moveq	r3, #1
 800590a:	2300      	movne	r3, #0
 800590c:	b2db      	uxtb	r3, r3
 800590e:	e012      	b.n	8005936 <HAL_I2C_Init+0x18e>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	1e58      	subs	r0, r3, #1
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6859      	ldr	r1, [r3, #4]
 8005918:	460b      	mov	r3, r1
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	440b      	add	r3, r1
 800591e:	0099      	lsls	r1, r3, #2
 8005920:	440b      	add	r3, r1
 8005922:	fbb0 f3f3 	udiv	r3, r0, r3
 8005926:	3301      	adds	r3, #1
 8005928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800592c:	2b00      	cmp	r3, #0
 800592e:	bf0c      	ite	eq
 8005930:	2301      	moveq	r3, #1
 8005932:	2300      	movne	r3, #0
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <HAL_I2C_Init+0x196>
 800593a:	2301      	movs	r3, #1
 800593c:	e022      	b.n	8005984 <HAL_I2C_Init+0x1dc>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10e      	bne.n	8005964 <HAL_I2C_Init+0x1bc>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	1e58      	subs	r0, r3, #1
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6859      	ldr	r1, [r3, #4]
 800594e:	460b      	mov	r3, r1
 8005950:	005b      	lsls	r3, r3, #1
 8005952:	440b      	add	r3, r1
 8005954:	fbb0 f3f3 	udiv	r3, r0, r3
 8005958:	3301      	adds	r3, #1
 800595a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800595e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005962:	e00f      	b.n	8005984 <HAL_I2C_Init+0x1dc>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	1e58      	subs	r0, r3, #1
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6859      	ldr	r1, [r3, #4]
 800596c:	460b      	mov	r3, r1
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	440b      	add	r3, r1
 8005972:	0099      	lsls	r1, r3, #2
 8005974:	440b      	add	r3, r1
 8005976:	fbb0 f3f3 	udiv	r3, r0, r3
 800597a:	3301      	adds	r3, #1
 800597c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005980:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005984:	6879      	ldr	r1, [r7, #4]
 8005986:	6809      	ldr	r1, [r1, #0]
 8005988:	4313      	orrs	r3, r2
 800598a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	69da      	ldr	r2, [r3, #28]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	431a      	orrs	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	430a      	orrs	r2, r1
 80059a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80059b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	6911      	ldr	r1, [r2, #16]
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	68d2      	ldr	r2, [r2, #12]
 80059be:	4311      	orrs	r1, r2
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	6812      	ldr	r2, [r2, #0]
 80059c4:	430b      	orrs	r3, r1
 80059c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	695a      	ldr	r2, [r3, #20]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	431a      	orrs	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0201 	orr.w	r2, r2, #1
 80059f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2220      	movs	r2, #32
 80059fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	000186a0 	.word	0x000186a0
 8005a20:	001e847f 	.word	0x001e847f
 8005a24:	003d08ff 	.word	0x003d08ff
 8005a28:	431bde83 	.word	0x431bde83
 8005a2c:	10624dd3 	.word	0x10624dd3

08005a30 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b088      	sub	sp, #32
 8005a34:	af02      	add	r7, sp, #8
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	607a      	str	r2, [r7, #4]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	817b      	strh	r3, [r7, #10]
 8005a40:	4613      	mov	r3, r2
 8005a42:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a44:	f7ff fab0 	bl	8004fa8 <HAL_GetTick>
 8005a48:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b20      	cmp	r3, #32
 8005a54:	f040 80e0 	bne.w	8005c18 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	9300      	str	r3, [sp, #0]
 8005a5c:	2319      	movs	r3, #25
 8005a5e:	2201      	movs	r2, #1
 8005a60:	4970      	ldr	r1, [pc, #448]	; (8005c24 <HAL_I2C_Master_Transmit+0x1f4>)
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f000 ff16 	bl	8006894 <I2C_WaitOnFlagUntilTimeout>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d001      	beq.n	8005a72 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005a6e:	2302      	movs	r3, #2
 8005a70:	e0d3      	b.n	8005c1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d101      	bne.n	8005a80 <HAL_I2C_Master_Transmit+0x50>
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	e0cc      	b.n	8005c1a <HAL_I2C_Master_Transmit+0x1ea>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d007      	beq.n	8005aa6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f042 0201 	orr.w	r2, r2, #1
 8005aa4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ab4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2221      	movs	r2, #33	; 0x21
 8005aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2210      	movs	r2, #16
 8005ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	893a      	ldrh	r2, [r7, #8]
 8005ad6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	4a50      	ldr	r2, [pc, #320]	; (8005c28 <HAL_I2C_Master_Transmit+0x1f8>)
 8005ae6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005ae8:	8979      	ldrh	r1, [r7, #10]
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	6a3a      	ldr	r2, [r7, #32]
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f000 fcea 	bl	80064c8 <I2C_MasterRequestWrite>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e08d      	b.n	8005c1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005afe:	2300      	movs	r3, #0
 8005b00:	613b      	str	r3, [r7, #16]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	613b      	str	r3, [r7, #16]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	613b      	str	r3, [r7, #16]
 8005b12:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005b14:	e066      	b.n	8005be4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	6a39      	ldr	r1, [r7, #32]
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f000 ff90 	bl	8006a40 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00d      	beq.n	8005b42 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2a:	2b04      	cmp	r3, #4
 8005b2c:	d107      	bne.n	8005b3e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e06b      	b.n	8005c1a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b46:	781a      	ldrb	r2, [r3, #0]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b52:	1c5a      	adds	r2, r3, #1
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	2b04      	cmp	r3, #4
 8005b7e:	d11b      	bne.n	8005bb8 <HAL_I2C_Master_Transmit+0x188>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d017      	beq.n	8005bb8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8c:	781a      	ldrb	r2, [r3, #0]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b98:	1c5a      	adds	r2, r3, #1
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bb8:	697a      	ldr	r2, [r7, #20]
 8005bba:	6a39      	ldr	r1, [r7, #32]
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f000 ff80 	bl	8006ac2 <I2C_WaitOnBTFFlagUntilTimeout>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00d      	beq.n	8005be4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bcc:	2b04      	cmp	r3, #4
 8005bce:	d107      	bne.n	8005be0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bde:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e01a      	b.n	8005c1a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d194      	bne.n	8005b16 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c14:	2300      	movs	r3, #0
 8005c16:	e000      	b.n	8005c1a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005c18:	2302      	movs	r3, #2
  }
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3718      	adds	r7, #24
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	00100002 	.word	0x00100002
 8005c28:	ffff0000 	.word	0xffff0000

08005c2c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b08c      	sub	sp, #48	; 0x30
 8005c30:	af02      	add	r7, sp, #8
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	607a      	str	r2, [r7, #4]
 8005c36:	461a      	mov	r2, r3
 8005c38:	460b      	mov	r3, r1
 8005c3a:	817b      	strh	r3, [r7, #10]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c40:	f7ff f9b2 	bl	8004fa8 <HAL_GetTick>
 8005c44:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b20      	cmp	r3, #32
 8005c50:	f040 820b 	bne.w	800606a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c56:	9300      	str	r3, [sp, #0]
 8005c58:	2319      	movs	r3, #25
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	497c      	ldr	r1, [pc, #496]	; (8005e50 <HAL_I2C_Master_Receive+0x224>)
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f000 fe18 	bl	8006894 <I2C_WaitOnFlagUntilTimeout>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d001      	beq.n	8005c6e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005c6a:	2302      	movs	r3, #2
 8005c6c:	e1fe      	b.n	800606c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d101      	bne.n	8005c7c <HAL_I2C_Master_Receive+0x50>
 8005c78:	2302      	movs	r3, #2
 8005c7a:	e1f7      	b.n	800606c <HAL_I2C_Master_Receive+0x440>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d007      	beq.n	8005ca2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f042 0201 	orr.w	r2, r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cb0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2222      	movs	r2, #34	; 0x22
 8005cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2210      	movs	r2, #16
 8005cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	893a      	ldrh	r2, [r7, #8]
 8005cd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	4a5c      	ldr	r2, [pc, #368]	; (8005e54 <HAL_I2C_Master_Receive+0x228>)
 8005ce2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005ce4:	8979      	ldrh	r1, [r7, #10]
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	f000 fc6e 	bl	80065cc <I2C_MasterRequestRead>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d001      	beq.n	8005cfa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e1b8      	b.n	800606c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d113      	bne.n	8005d2a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d02:	2300      	movs	r3, #0
 8005d04:	623b      	str	r3, [r7, #32]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	695b      	ldr	r3, [r3, #20]
 8005d0c:	623b      	str	r3, [r7, #32]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	623b      	str	r3, [r7, #32]
 8005d16:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d26:	601a      	str	r2, [r3, #0]
 8005d28:	e18c      	b.n	8006044 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d11b      	bne.n	8005d6a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d42:	2300      	movs	r3, #0
 8005d44:	61fb      	str	r3, [r7, #28]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	61fb      	str	r3, [r7, #28]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	61fb      	str	r3, [r7, #28]
 8005d56:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	e16c      	b.n	8006044 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d11b      	bne.n	8005daa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d80:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d92:	2300      	movs	r3, #0
 8005d94:	61bb      	str	r3, [r7, #24]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	695b      	ldr	r3, [r3, #20]
 8005d9c:	61bb      	str	r3, [r7, #24]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	61bb      	str	r3, [r7, #24]
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	e14c      	b.n	8006044 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005db8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dba:	2300      	movs	r3, #0
 8005dbc:	617b      	str	r3, [r7, #20]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	695b      	ldr	r3, [r3, #20]
 8005dc4:	617b      	str	r3, [r7, #20]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	699b      	ldr	r3, [r3, #24]
 8005dcc:	617b      	str	r3, [r7, #20]
 8005dce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005dd0:	e138      	b.n	8006044 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dd6:	2b03      	cmp	r3, #3
 8005dd8:	f200 80f1 	bhi.w	8005fbe <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d123      	bne.n	8005e2c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005de6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f000 feab 	bl	8006b44 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d001      	beq.n	8005df8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e139      	b.n	800606c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	691a      	ldr	r2, [r3, #16]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e02:	b2d2      	uxtb	r2, r2
 8005e04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0a:	1c5a      	adds	r2, r3, #1
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e14:	3b01      	subs	r3, #1
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	3b01      	subs	r3, #1
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e2a:	e10b      	b.n	8006044 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d14e      	bne.n	8005ed2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	4906      	ldr	r1, [pc, #24]	; (8005e58 <HAL_I2C_Master_Receive+0x22c>)
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f000 fd28 	bl	8006894 <I2C_WaitOnFlagUntilTimeout>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d008      	beq.n	8005e5c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e10e      	b.n	800606c <HAL_I2C_Master_Receive+0x440>
 8005e4e:	bf00      	nop
 8005e50:	00100002 	.word	0x00100002
 8005e54:	ffff0000 	.word	0xffff0000
 8005e58:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	691a      	ldr	r2, [r3, #16]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e76:	b2d2      	uxtb	r2, r2
 8005e78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7e:	1c5a      	adds	r2, r3, #1
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	3b01      	subs	r3, #1
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	691a      	ldr	r2, [r3, #16]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea8:	b2d2      	uxtb	r2, r2
 8005eaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb0:	1c5a      	adds	r2, r3, #1
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ed0:	e0b8      	b.n	8006044 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed4:	9300      	str	r3, [sp, #0]
 8005ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed8:	2200      	movs	r2, #0
 8005eda:	4966      	ldr	r1, [pc, #408]	; (8006074 <HAL_I2C_Master_Receive+0x448>)
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f000 fcd9 	bl	8006894 <I2C_WaitOnFlagUntilTimeout>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d001      	beq.n	8005eec <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e0bf      	b.n	800606c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005efa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	691a      	ldr	r2, [r3, #16]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f06:	b2d2      	uxtb	r2, r2
 8005f08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0e:	1c5a      	adds	r2, r3, #1
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	3b01      	subs	r3, #1
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f34:	2200      	movs	r2, #0
 8005f36:	494f      	ldr	r1, [pc, #316]	; (8006074 <HAL_I2C_Master_Receive+0x448>)
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f000 fcab 	bl	8006894 <I2C_WaitOnFlagUntilTimeout>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d001      	beq.n	8005f48 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e091      	b.n	800606c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	691a      	ldr	r2, [r3, #16]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f62:	b2d2      	uxtb	r2, r2
 8005f64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6a:	1c5a      	adds	r2, r3, #1
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f74:	3b01      	subs	r3, #1
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	3b01      	subs	r3, #1
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	691a      	ldr	r2, [r3, #16]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f94:	b2d2      	uxtb	r2, r2
 8005f96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9c:	1c5a      	adds	r2, r3, #1
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005fbc:	e042      	b.n	8006044 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f000 fdbe 	bl	8006b44 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d001      	beq.n	8005fd2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e04c      	b.n	800606c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	691a      	ldr	r2, [r3, #16]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fdc:	b2d2      	uxtb	r2, r2
 8005fde:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe4:	1c5a      	adds	r2, r3, #1
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	f003 0304 	and.w	r3, r3, #4
 800600e:	2b04      	cmp	r3, #4
 8006010:	d118      	bne.n	8006044 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	691a      	ldr	r2, [r3, #16]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601c:	b2d2      	uxtb	r2, r2
 800601e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006024:	1c5a      	adds	r2, r3, #1
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800602e:	3b01      	subs	r3, #1
 8006030:	b29a      	uxth	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800603a:	b29b      	uxth	r3, r3
 800603c:	3b01      	subs	r3, #1
 800603e:	b29a      	uxth	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006048:	2b00      	cmp	r3, #0
 800604a:	f47f aec2 	bne.w	8005dd2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2220      	movs	r2, #32
 8006052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006066:	2300      	movs	r3, #0
 8006068:	e000      	b.n	800606c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800606a:	2302      	movs	r3, #2
  }
}
 800606c:	4618      	mov	r0, r3
 800606e:	3728      	adds	r7, #40	; 0x28
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	00010004 	.word	0x00010004

08006078 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b088      	sub	sp, #32
 800607c:	af02      	add	r7, sp, #8
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	4608      	mov	r0, r1
 8006082:	4611      	mov	r1, r2
 8006084:	461a      	mov	r2, r3
 8006086:	4603      	mov	r3, r0
 8006088:	817b      	strh	r3, [r7, #10]
 800608a:	460b      	mov	r3, r1
 800608c:	813b      	strh	r3, [r7, #8]
 800608e:	4613      	mov	r3, r2
 8006090:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006092:	f7fe ff89 	bl	8004fa8 <HAL_GetTick>
 8006096:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	2b20      	cmp	r3, #32
 80060a2:	f040 80d9 	bne.w	8006258 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	2319      	movs	r3, #25
 80060ac:	2201      	movs	r2, #1
 80060ae:	496d      	ldr	r1, [pc, #436]	; (8006264 <HAL_I2C_Mem_Write+0x1ec>)
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f000 fbef 	bl	8006894 <I2C_WaitOnFlagUntilTimeout>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d001      	beq.n	80060c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80060bc:	2302      	movs	r3, #2
 80060be:	e0cc      	b.n	800625a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d101      	bne.n	80060ce <HAL_I2C_Mem_Write+0x56>
 80060ca:	2302      	movs	r3, #2
 80060cc:	e0c5      	b.n	800625a <HAL_I2C_Mem_Write+0x1e2>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d007      	beq.n	80060f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f042 0201 	orr.w	r2, r2, #1
 80060f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006102:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2221      	movs	r2, #33	; 0x21
 8006108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2240      	movs	r2, #64	; 0x40
 8006110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6a3a      	ldr	r2, [r7, #32]
 800611e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006124:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800612a:	b29a      	uxth	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	4a4d      	ldr	r2, [pc, #308]	; (8006268 <HAL_I2C_Mem_Write+0x1f0>)
 8006134:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006136:	88f8      	ldrh	r0, [r7, #6]
 8006138:	893a      	ldrh	r2, [r7, #8]
 800613a:	8979      	ldrh	r1, [r7, #10]
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	9301      	str	r3, [sp, #4]
 8006140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	4603      	mov	r3, r0
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f000 fb0e 	bl	8006768 <I2C_RequestMemoryWrite>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d052      	beq.n	80061f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e081      	b.n	800625a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f000 fc70 	bl	8006a40 <I2C_WaitOnTXEFlagUntilTimeout>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00d      	beq.n	8006182 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616a:	2b04      	cmp	r3, #4
 800616c:	d107      	bne.n	800617e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800617c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e06b      	b.n	800625a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006186:	781a      	ldrb	r2, [r3, #0]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006192:	1c5a      	adds	r2, r3, #1
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800619c:	3b01      	subs	r3, #1
 800619e:	b29a      	uxth	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	3b01      	subs	r3, #1
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	695b      	ldr	r3, [r3, #20]
 80061b8:	f003 0304 	and.w	r3, r3, #4
 80061bc:	2b04      	cmp	r3, #4
 80061be:	d11b      	bne.n	80061f8 <HAL_I2C_Mem_Write+0x180>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d017      	beq.n	80061f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061cc:	781a      	ldrb	r2, [r3, #0]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d8:	1c5a      	adds	r2, r3, #1
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061e2:	3b01      	subs	r3, #1
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	3b01      	subs	r3, #1
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1aa      	bne.n	8006156 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f000 fc5c 	bl	8006ac2 <I2C_WaitOnBTFFlagUntilTimeout>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00d      	beq.n	800622c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006214:	2b04      	cmp	r3, #4
 8006216:	d107      	bne.n	8006228 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006226:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e016      	b.n	800625a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800623a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2220      	movs	r2, #32
 8006240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006254:	2300      	movs	r3, #0
 8006256:	e000      	b.n	800625a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006258:	2302      	movs	r3, #2
  }
}
 800625a:	4618      	mov	r0, r3
 800625c:	3718      	adds	r7, #24
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	00100002 	.word	0x00100002
 8006268:	ffff0000 	.word	0xffff0000

0800626c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b08a      	sub	sp, #40	; 0x28
 8006270:	af02      	add	r7, sp, #8
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	607a      	str	r2, [r7, #4]
 8006276:	603b      	str	r3, [r7, #0]
 8006278:	460b      	mov	r3, r1
 800627a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800627c:	f7fe fe94 	bl	8004fa8 <HAL_GetTick>
 8006280:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8006282:	2300      	movs	r3, #0
 8006284:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b20      	cmp	r3, #32
 8006290:	f040 8111 	bne.w	80064b6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	2319      	movs	r3, #25
 800629a:	2201      	movs	r2, #1
 800629c:	4988      	ldr	r1, [pc, #544]	; (80064c0 <HAL_I2C_IsDeviceReady+0x254>)
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f000 faf8 	bl	8006894 <I2C_WaitOnFlagUntilTimeout>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d001      	beq.n	80062ae <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80062aa:	2302      	movs	r3, #2
 80062ac:	e104      	b.n	80064b8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d101      	bne.n	80062bc <HAL_I2C_IsDeviceReady+0x50>
 80062b8:	2302      	movs	r3, #2
 80062ba:	e0fd      	b.n	80064b8 <HAL_I2C_IsDeviceReady+0x24c>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d007      	beq.n	80062e2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f042 0201 	orr.w	r2, r2, #1
 80062e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2224      	movs	r2, #36	; 0x24
 80062f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	4a70      	ldr	r2, [pc, #448]	; (80064c4 <HAL_I2C_IsDeviceReady+0x258>)
 8006304:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006314:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2200      	movs	r2, #0
 800631e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f000 fab6 	bl	8006894 <I2C_WaitOnFlagUntilTimeout>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00d      	beq.n	800634a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006338:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800633c:	d103      	bne.n	8006346 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006344:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e0b6      	b.n	80064b8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800634a:	897b      	ldrh	r3, [r7, #10]
 800634c:	b2db      	uxtb	r3, r3
 800634e:	461a      	mov	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006358:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800635a:	f7fe fe25 	bl	8004fa8 <HAL_GetTick>
 800635e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b02      	cmp	r3, #2
 800636c:	bf0c      	ite	eq
 800636e:	2301      	moveq	r3, #1
 8006370:	2300      	movne	r3, #0
 8006372:	b2db      	uxtb	r3, r3
 8006374:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	695b      	ldr	r3, [r3, #20]
 800637c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006384:	bf0c      	ite	eq
 8006386:	2301      	moveq	r3, #1
 8006388:	2300      	movne	r3, #0
 800638a:	b2db      	uxtb	r3, r3
 800638c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800638e:	e025      	b.n	80063dc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006390:	f7fe fe0a 	bl	8004fa8 <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	429a      	cmp	r2, r3
 800639e:	d302      	bcc.n	80063a6 <HAL_I2C_IsDeviceReady+0x13a>
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d103      	bne.n	80063ae <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	22a0      	movs	r2, #160	; 0xa0
 80063aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	f003 0302 	and.w	r3, r3, #2
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	bf0c      	ite	eq
 80063bc:	2301      	moveq	r3, #1
 80063be:	2300      	movne	r3, #0
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063d2:	bf0c      	ite	eq
 80063d4:	2301      	moveq	r3, #1
 80063d6:	2300      	movne	r3, #0
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	2ba0      	cmp	r3, #160	; 0xa0
 80063e6:	d005      	beq.n	80063f4 <HAL_I2C_IsDeviceReady+0x188>
 80063e8:	7dfb      	ldrb	r3, [r7, #23]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d102      	bne.n	80063f4 <HAL_I2C_IsDeviceReady+0x188>
 80063ee:	7dbb      	ldrb	r3, [r7, #22]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d0cd      	beq.n	8006390 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2220      	movs	r2, #32
 80063f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b02      	cmp	r3, #2
 8006408:	d129      	bne.n	800645e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006418:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800641a:	2300      	movs	r3, #0
 800641c:	613b      	str	r3, [r7, #16]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	695b      	ldr	r3, [r3, #20]
 8006424:	613b      	str	r3, [r7, #16]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	699b      	ldr	r3, [r3, #24]
 800642c:	613b      	str	r3, [r7, #16]
 800642e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	9300      	str	r3, [sp, #0]
 8006434:	2319      	movs	r3, #25
 8006436:	2201      	movs	r2, #1
 8006438:	4921      	ldr	r1, [pc, #132]	; (80064c0 <HAL_I2C_IsDeviceReady+0x254>)
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f000 fa2a 	bl	8006894 <I2C_WaitOnFlagUntilTimeout>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d001      	beq.n	800644a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e036      	b.n	80064b8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2220      	movs	r2, #32
 800644e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800645a:	2300      	movs	r3, #0
 800645c:	e02c      	b.n	80064b8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800646c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006476:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	2319      	movs	r3, #25
 800647e:	2201      	movs	r2, #1
 8006480:	490f      	ldr	r1, [pc, #60]	; (80064c0 <HAL_I2C_IsDeviceReady+0x254>)
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f000 fa06 	bl	8006894 <I2C_WaitOnFlagUntilTimeout>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d001      	beq.n	8006492 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e012      	b.n	80064b8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	3301      	adds	r3, #1
 8006496:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006498:	69ba      	ldr	r2, [r7, #24]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	429a      	cmp	r2, r3
 800649e:	f4ff af32 	bcc.w	8006306 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2220      	movs	r2, #32
 80064a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e000      	b.n	80064b8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80064b6:	2302      	movs	r3, #2
  }
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3720      	adds	r7, #32
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	00100002 	.word	0x00100002
 80064c4:	ffff0000 	.word	0xffff0000

080064c8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b088      	sub	sp, #32
 80064cc:	af02      	add	r7, sp, #8
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	607a      	str	r2, [r7, #4]
 80064d2:	603b      	str	r3, [r7, #0]
 80064d4:	460b      	mov	r3, r1
 80064d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064dc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	2b08      	cmp	r3, #8
 80064e2:	d006      	beq.n	80064f2 <I2C_MasterRequestWrite+0x2a>
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d003      	beq.n	80064f2 <I2C_MasterRequestWrite+0x2a>
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80064f0:	d108      	bne.n	8006504 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006500:	601a      	str	r2, [r3, #0]
 8006502:	e00b      	b.n	800651c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006508:	2b12      	cmp	r3, #18
 800650a:	d107      	bne.n	800651c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800651a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	f000 f9b3 	bl	8006894 <I2C_WaitOnFlagUntilTimeout>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00d      	beq.n	8006550 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800653e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006542:	d103      	bne.n	800654c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f44f 7200 	mov.w	r2, #512	; 0x200
 800654a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e035      	b.n	80065bc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006558:	d108      	bne.n	800656c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800655a:	897b      	ldrh	r3, [r7, #10]
 800655c:	b2db      	uxtb	r3, r3
 800655e:	461a      	mov	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006568:	611a      	str	r2, [r3, #16]
 800656a:	e01b      	b.n	80065a4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800656c:	897b      	ldrh	r3, [r7, #10]
 800656e:	11db      	asrs	r3, r3, #7
 8006570:	b2db      	uxtb	r3, r3
 8006572:	f003 0306 	and.w	r3, r3, #6
 8006576:	b2db      	uxtb	r3, r3
 8006578:	f063 030f 	orn	r3, r3, #15
 800657c:	b2da      	uxtb	r2, r3
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	490e      	ldr	r1, [pc, #56]	; (80065c4 <I2C_MasterRequestWrite+0xfc>)
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f000 f9d9 	bl	8006942 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e010      	b.n	80065bc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800659a:	897b      	ldrh	r3, [r7, #10]
 800659c:	b2da      	uxtb	r2, r3
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	4907      	ldr	r1, [pc, #28]	; (80065c8 <I2C_MasterRequestWrite+0x100>)
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f000 f9c9 	bl	8006942 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d001      	beq.n	80065ba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e000      	b.n	80065bc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3718      	adds	r7, #24
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	00010008 	.word	0x00010008
 80065c8:	00010002 	.word	0x00010002

080065cc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b088      	sub	sp, #32
 80065d0:	af02      	add	r7, sp, #8
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	607a      	str	r2, [r7, #4]
 80065d6:	603b      	str	r3, [r7, #0]
 80065d8:	460b      	mov	r3, r1
 80065da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065f0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	2b08      	cmp	r3, #8
 80065f6:	d006      	beq.n	8006606 <I2C_MasterRequestRead+0x3a>
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d003      	beq.n	8006606 <I2C_MasterRequestRead+0x3a>
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006604:	d108      	bne.n	8006618 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006614:	601a      	str	r2, [r3, #0]
 8006616:	e00b      	b.n	8006630 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661c:	2b11      	cmp	r3, #17
 800661e:	d107      	bne.n	8006630 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800662e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	9300      	str	r3, [sp, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f000 f929 	bl	8006894 <I2C_WaitOnFlagUntilTimeout>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00d      	beq.n	8006664 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006656:	d103      	bne.n	8006660 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800665e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e079      	b.n	8006758 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800666c:	d108      	bne.n	8006680 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800666e:	897b      	ldrh	r3, [r7, #10]
 8006670:	b2db      	uxtb	r3, r3
 8006672:	f043 0301 	orr.w	r3, r3, #1
 8006676:	b2da      	uxtb	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	611a      	str	r2, [r3, #16]
 800667e:	e05f      	b.n	8006740 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006680:	897b      	ldrh	r3, [r7, #10]
 8006682:	11db      	asrs	r3, r3, #7
 8006684:	b2db      	uxtb	r3, r3
 8006686:	f003 0306 	and.w	r3, r3, #6
 800668a:	b2db      	uxtb	r3, r3
 800668c:	f063 030f 	orn	r3, r3, #15
 8006690:	b2da      	uxtb	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	4930      	ldr	r1, [pc, #192]	; (8006760 <I2C_MasterRequestRead+0x194>)
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f000 f94f 	bl	8006942 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d001      	beq.n	80066ae <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e054      	b.n	8006758 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80066ae:	897b      	ldrh	r3, [r7, #10]
 80066b0:	b2da      	uxtb	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	4929      	ldr	r1, [pc, #164]	; (8006764 <I2C_MasterRequestRead+0x198>)
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	f000 f93f 	bl	8006942 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d001      	beq.n	80066ce <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e044      	b.n	8006758 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066ce:	2300      	movs	r3, #0
 80066d0:	613b      	str	r3, [r7, #16]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	695b      	ldr	r3, [r3, #20]
 80066d8:	613b      	str	r3, [r7, #16]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	613b      	str	r3, [r7, #16]
 80066e2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066f2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	9300      	str	r3, [sp, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f000 f8c7 	bl	8006894 <I2C_WaitOnFlagUntilTimeout>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00d      	beq.n	8006728 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800671a:	d103      	bne.n	8006724 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006722:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e017      	b.n	8006758 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006728:	897b      	ldrh	r3, [r7, #10]
 800672a:	11db      	asrs	r3, r3, #7
 800672c:	b2db      	uxtb	r3, r3
 800672e:	f003 0306 	and.w	r3, r3, #6
 8006732:	b2db      	uxtb	r3, r3
 8006734:	f063 030e 	orn	r3, r3, #14
 8006738:	b2da      	uxtb	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	4907      	ldr	r1, [pc, #28]	; (8006764 <I2C_MasterRequestRead+0x198>)
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f000 f8fb 	bl	8006942 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d001      	beq.n	8006756 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e000      	b.n	8006758 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3718      	adds	r7, #24
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	00010008 	.word	0x00010008
 8006764:	00010002 	.word	0x00010002

08006768 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b088      	sub	sp, #32
 800676c:	af02      	add	r7, sp, #8
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	4608      	mov	r0, r1
 8006772:	4611      	mov	r1, r2
 8006774:	461a      	mov	r2, r3
 8006776:	4603      	mov	r3, r0
 8006778:	817b      	strh	r3, [r7, #10]
 800677a:	460b      	mov	r3, r1
 800677c:	813b      	strh	r3, [r7, #8]
 800677e:	4613      	mov	r3, r2
 8006780:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006790:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	6a3b      	ldr	r3, [r7, #32]
 8006798:	2200      	movs	r2, #0
 800679a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f000 f878 	bl	8006894 <I2C_WaitOnFlagUntilTimeout>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00d      	beq.n	80067c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067b8:	d103      	bne.n	80067c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e05f      	b.n	8006886 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80067c6:	897b      	ldrh	r3, [r7, #10]
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	461a      	mov	r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80067d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d8:	6a3a      	ldr	r2, [r7, #32]
 80067da:	492d      	ldr	r1, [pc, #180]	; (8006890 <I2C_RequestMemoryWrite+0x128>)
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f000 f8b0 	bl	8006942 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d001      	beq.n	80067ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e04c      	b.n	8006886 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067ec:	2300      	movs	r3, #0
 80067ee:	617b      	str	r3, [r7, #20]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	617b      	str	r3, [r7, #20]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	617b      	str	r3, [r7, #20]
 8006800:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006804:	6a39      	ldr	r1, [r7, #32]
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f000 f91a 	bl	8006a40 <I2C_WaitOnTXEFlagUntilTimeout>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00d      	beq.n	800682e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006816:	2b04      	cmp	r3, #4
 8006818:	d107      	bne.n	800682a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006828:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e02b      	b.n	8006886 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800682e:	88fb      	ldrh	r3, [r7, #6]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d105      	bne.n	8006840 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006834:	893b      	ldrh	r3, [r7, #8]
 8006836:	b2da      	uxtb	r2, r3
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	611a      	str	r2, [r3, #16]
 800683e:	e021      	b.n	8006884 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006840:	893b      	ldrh	r3, [r7, #8]
 8006842:	0a1b      	lsrs	r3, r3, #8
 8006844:	b29b      	uxth	r3, r3
 8006846:	b2da      	uxtb	r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800684e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006850:	6a39      	ldr	r1, [r7, #32]
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f000 f8f4 	bl	8006a40 <I2C_WaitOnTXEFlagUntilTimeout>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00d      	beq.n	800687a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006862:	2b04      	cmp	r3, #4
 8006864:	d107      	bne.n	8006876 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006874:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e005      	b.n	8006886 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800687a:	893b      	ldrh	r3, [r7, #8]
 800687c:	b2da      	uxtb	r2, r3
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3718      	adds	r7, #24
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	00010002 	.word	0x00010002

08006894 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	603b      	str	r3, [r7, #0]
 80068a0:	4613      	mov	r3, r2
 80068a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068a4:	e025      	b.n	80068f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068ac:	d021      	beq.n	80068f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ae:	f7fe fb7b 	bl	8004fa8 <HAL_GetTick>
 80068b2:	4602      	mov	r2, r0
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	683a      	ldr	r2, [r7, #0]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d302      	bcc.n	80068c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d116      	bne.n	80068f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2220      	movs	r2, #32
 80068ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068de:	f043 0220 	orr.w	r2, r3, #32
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e023      	b.n	800693a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	0c1b      	lsrs	r3, r3, #16
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d10d      	bne.n	8006918 <I2C_WaitOnFlagUntilTimeout+0x84>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	43da      	mvns	r2, r3
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	4013      	ands	r3, r2
 8006908:	b29b      	uxth	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	bf0c      	ite	eq
 800690e:	2301      	moveq	r3, #1
 8006910:	2300      	movne	r3, #0
 8006912:	b2db      	uxtb	r3, r3
 8006914:	461a      	mov	r2, r3
 8006916:	e00c      	b.n	8006932 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	43da      	mvns	r2, r3
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	4013      	ands	r3, r2
 8006924:	b29b      	uxth	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	bf0c      	ite	eq
 800692a:	2301      	moveq	r3, #1
 800692c:	2300      	movne	r3, #0
 800692e:	b2db      	uxtb	r3, r3
 8006930:	461a      	mov	r2, r3
 8006932:	79fb      	ldrb	r3, [r7, #7]
 8006934:	429a      	cmp	r2, r3
 8006936:	d0b6      	beq.n	80068a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3710      	adds	r7, #16
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b084      	sub	sp, #16
 8006946:	af00      	add	r7, sp, #0
 8006948:	60f8      	str	r0, [r7, #12]
 800694a:	60b9      	str	r1, [r7, #8]
 800694c:	607a      	str	r2, [r7, #4]
 800694e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006950:	e051      	b.n	80069f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	695b      	ldr	r3, [r3, #20]
 8006958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800695c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006960:	d123      	bne.n	80069aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006970:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800697a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2220      	movs	r2, #32
 8006986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006996:	f043 0204 	orr.w	r2, r3, #4
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e046      	b.n	8006a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069b0:	d021      	beq.n	80069f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069b2:	f7fe faf9 	bl	8004fa8 <HAL_GetTick>
 80069b6:	4602      	mov	r2, r0
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d302      	bcc.n	80069c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d116      	bne.n	80069f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2200      	movs	r2, #0
 80069cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2220      	movs	r2, #32
 80069d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e2:	f043 0220 	orr.w	r2, r3, #32
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e020      	b.n	8006a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	0c1b      	lsrs	r3, r3, #16
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d10c      	bne.n	8006a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	43da      	mvns	r2, r3
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	bf14      	ite	ne
 8006a12:	2301      	movne	r3, #1
 8006a14:	2300      	moveq	r3, #0
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	e00b      	b.n	8006a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	43da      	mvns	r2, r3
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	4013      	ands	r3, r2
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	bf14      	ite	ne
 8006a2c:	2301      	movne	r3, #1
 8006a2e:	2300      	moveq	r3, #0
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d18d      	bne.n	8006952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a4c:	e02d      	b.n	8006aaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f000 f8ce 	bl	8006bf0 <I2C_IsAcknowledgeFailed>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d001      	beq.n	8006a5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e02d      	b.n	8006aba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a64:	d021      	beq.n	8006aaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a66:	f7fe fa9f 	bl	8004fa8 <HAL_GetTick>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	68ba      	ldr	r2, [r7, #8]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d302      	bcc.n	8006a7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d116      	bne.n	8006aaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2220      	movs	r2, #32
 8006a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a96:	f043 0220 	orr.w	r2, r3, #32
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e007      	b.n	8006aba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	695b      	ldr	r3, [r3, #20]
 8006ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ab4:	2b80      	cmp	r3, #128	; 0x80
 8006ab6:	d1ca      	bne.n	8006a4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b084      	sub	sp, #16
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	60f8      	str	r0, [r7, #12]
 8006aca:	60b9      	str	r1, [r7, #8]
 8006acc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ace:	e02d      	b.n	8006b2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ad0:	68f8      	ldr	r0, [r7, #12]
 8006ad2:	f000 f88d 	bl	8006bf0 <I2C_IsAcknowledgeFailed>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d001      	beq.n	8006ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e02d      	b.n	8006b3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ae6:	d021      	beq.n	8006b2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ae8:	f7fe fa5e 	bl	8004fa8 <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d302      	bcc.n	8006afe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d116      	bne.n	8006b2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2220      	movs	r2, #32
 8006b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b18:	f043 0220 	orr.w	r2, r3, #32
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e007      	b.n	8006b3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	695b      	ldr	r3, [r3, #20]
 8006b32:	f003 0304 	and.w	r3, r3, #4
 8006b36:	2b04      	cmp	r3, #4
 8006b38:	d1ca      	bne.n	8006ad0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b50:	e042      	b.n	8006bd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	695b      	ldr	r3, [r3, #20]
 8006b58:	f003 0310 	and.w	r3, r3, #16
 8006b5c:	2b10      	cmp	r3, #16
 8006b5e:	d119      	bne.n	8006b94 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f06f 0210 	mvn.w	r2, #16
 8006b68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2220      	movs	r2, #32
 8006b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e029      	b.n	8006be8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b94:	f7fe fa08 	bl	8004fa8 <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	68ba      	ldr	r2, [r7, #8]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d302      	bcc.n	8006baa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d116      	bne.n	8006bd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2220      	movs	r2, #32
 8006bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc4:	f043 0220 	orr.w	r2, r3, #32
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e007      	b.n	8006be8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be2:	2b40      	cmp	r3, #64	; 0x40
 8006be4:	d1b5      	bne.n	8006b52 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3710      	adds	r7, #16
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c06:	d11b      	bne.n	8006c40 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c10:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2220      	movs	r2, #32
 8006c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2c:	f043 0204 	orr.w	r2, r3, #4
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e000      	b.n	8006c42 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b083      	sub	sp, #12
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
 8006c56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	2b20      	cmp	r3, #32
 8006c62:	d129      	bne.n	8006cb8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2224      	movs	r2, #36	; 0x24
 8006c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f022 0201 	bic.w	r2, r2, #1
 8006c7a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f022 0210 	bic.w	r2, r2, #16
 8006c8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	683a      	ldr	r2, [r7, #0]
 8006c98:	430a      	orrs	r2, r1
 8006c9a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f042 0201 	orr.w	r2, r2, #1
 8006caa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2220      	movs	r2, #32
 8006cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	e000      	b.n	8006cba <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006cb8:	2302      	movs	r3, #2
  }
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	370c      	adds	r7, #12
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr

08006cc6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006cc6:	b480      	push	{r7}
 8006cc8:	b085      	sub	sp, #20
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
 8006cce:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	2b20      	cmp	r3, #32
 8006cde:	d12a      	bne.n	8006d36 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2224      	movs	r2, #36	; 0x24
 8006ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f022 0201 	bic.w	r2, r2, #1
 8006cf6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfe:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006d00:	89fb      	ldrh	r3, [r7, #14]
 8006d02:	f023 030f 	bic.w	r3, r3, #15
 8006d06:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	89fb      	ldrh	r3, [r7, #14]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	89fa      	ldrh	r2, [r7, #14]
 8006d18:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f042 0201 	orr.w	r2, r2, #1
 8006d28:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2220      	movs	r2, #32
 8006d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006d32:	2300      	movs	r3, #0
 8006d34:	e000      	b.n	8006d38 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006d36:	2302      	movs	r3, #2
  }
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3714      	adds	r7, #20
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b086      	sub	sp, #24
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d101      	bne.n	8006d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e267      	b.n	8007226 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d075      	beq.n	8006e4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d62:	4b88      	ldr	r3, [pc, #544]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f003 030c 	and.w	r3, r3, #12
 8006d6a:	2b04      	cmp	r3, #4
 8006d6c:	d00c      	beq.n	8006d88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d6e:	4b85      	ldr	r3, [pc, #532]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d76:	2b08      	cmp	r3, #8
 8006d78:	d112      	bne.n	8006da0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d7a:	4b82      	ldr	r3, [pc, #520]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d86:	d10b      	bne.n	8006da0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d88:	4b7e      	ldr	r3, [pc, #504]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d05b      	beq.n	8006e4c <HAL_RCC_OscConfig+0x108>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d157      	bne.n	8006e4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e242      	b.n	8007226 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006da8:	d106      	bne.n	8006db8 <HAL_RCC_OscConfig+0x74>
 8006daa:	4b76      	ldr	r3, [pc, #472]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a75      	ldr	r2, [pc, #468]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006db4:	6013      	str	r3, [r2, #0]
 8006db6:	e01d      	b.n	8006df4 <HAL_RCC_OscConfig+0xb0>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006dc0:	d10c      	bne.n	8006ddc <HAL_RCC_OscConfig+0x98>
 8006dc2:	4b70      	ldr	r3, [pc, #448]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a6f      	ldr	r2, [pc, #444]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006dc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006dcc:	6013      	str	r3, [r2, #0]
 8006dce:	4b6d      	ldr	r3, [pc, #436]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a6c      	ldr	r2, [pc, #432]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dd8:	6013      	str	r3, [r2, #0]
 8006dda:	e00b      	b.n	8006df4 <HAL_RCC_OscConfig+0xb0>
 8006ddc:	4b69      	ldr	r3, [pc, #420]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a68      	ldr	r2, [pc, #416]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006de6:	6013      	str	r3, [r2, #0]
 8006de8:	4b66      	ldr	r3, [pc, #408]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a65      	ldr	r2, [pc, #404]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006dee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006df2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d013      	beq.n	8006e24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dfc:	f7fe f8d4 	bl	8004fa8 <HAL_GetTick>
 8006e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e02:	e008      	b.n	8006e16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e04:	f7fe f8d0 	bl	8004fa8 <HAL_GetTick>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	2b64      	cmp	r3, #100	; 0x64
 8006e10:	d901      	bls.n	8006e16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006e12:	2303      	movs	r3, #3
 8006e14:	e207      	b.n	8007226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e16:	4b5b      	ldr	r3, [pc, #364]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d0f0      	beq.n	8006e04 <HAL_RCC_OscConfig+0xc0>
 8006e22:	e014      	b.n	8006e4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e24:	f7fe f8c0 	bl	8004fa8 <HAL_GetTick>
 8006e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e2a:	e008      	b.n	8006e3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e2c:	f7fe f8bc 	bl	8004fa8 <HAL_GetTick>
 8006e30:	4602      	mov	r2, r0
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	2b64      	cmp	r3, #100	; 0x64
 8006e38:	d901      	bls.n	8006e3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e1f3      	b.n	8007226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e3e:	4b51      	ldr	r3, [pc, #324]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1f0      	bne.n	8006e2c <HAL_RCC_OscConfig+0xe8>
 8006e4a:	e000      	b.n	8006e4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0302 	and.w	r3, r3, #2
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d063      	beq.n	8006f22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e5a:	4b4a      	ldr	r3, [pc, #296]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f003 030c 	and.w	r3, r3, #12
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00b      	beq.n	8006e7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e66:	4b47      	ldr	r3, [pc, #284]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e6e:	2b08      	cmp	r3, #8
 8006e70:	d11c      	bne.n	8006eac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e72:	4b44      	ldr	r3, [pc, #272]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d116      	bne.n	8006eac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e7e:	4b41      	ldr	r3, [pc, #260]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0302 	and.w	r3, r3, #2
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d005      	beq.n	8006e96 <HAL_RCC_OscConfig+0x152>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d001      	beq.n	8006e96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e1c7      	b.n	8007226 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e96:	4b3b      	ldr	r3, [pc, #236]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	00db      	lsls	r3, r3, #3
 8006ea4:	4937      	ldr	r1, [pc, #220]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006eaa:	e03a      	b.n	8006f22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d020      	beq.n	8006ef6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006eb4:	4b34      	ldr	r3, [pc, #208]	; (8006f88 <HAL_RCC_OscConfig+0x244>)
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eba:	f7fe f875 	bl	8004fa8 <HAL_GetTick>
 8006ebe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ec0:	e008      	b.n	8006ed4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ec2:	f7fe f871 	bl	8004fa8 <HAL_GetTick>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d901      	bls.n	8006ed4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e1a8      	b.n	8007226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ed4:	4b2b      	ldr	r3, [pc, #172]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0302 	and.w	r3, r3, #2
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d0f0      	beq.n	8006ec2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ee0:	4b28      	ldr	r3, [pc, #160]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	00db      	lsls	r3, r3, #3
 8006eee:	4925      	ldr	r1, [pc, #148]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	600b      	str	r3, [r1, #0]
 8006ef4:	e015      	b.n	8006f22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ef6:	4b24      	ldr	r3, [pc, #144]	; (8006f88 <HAL_RCC_OscConfig+0x244>)
 8006ef8:	2200      	movs	r2, #0
 8006efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006efc:	f7fe f854 	bl	8004fa8 <HAL_GetTick>
 8006f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f02:	e008      	b.n	8006f16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f04:	f7fe f850 	bl	8004fa8 <HAL_GetTick>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d901      	bls.n	8006f16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e187      	b.n	8007226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f16:	4b1b      	ldr	r3, [pc, #108]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0302 	and.w	r3, r3, #2
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1f0      	bne.n	8006f04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 0308 	and.w	r3, r3, #8
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d036      	beq.n	8006f9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d016      	beq.n	8006f64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f36:	4b15      	ldr	r3, [pc, #84]	; (8006f8c <HAL_RCC_OscConfig+0x248>)
 8006f38:	2201      	movs	r2, #1
 8006f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f3c:	f7fe f834 	bl	8004fa8 <HAL_GetTick>
 8006f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f42:	e008      	b.n	8006f56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f44:	f7fe f830 	bl	8004fa8 <HAL_GetTick>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d901      	bls.n	8006f56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006f52:	2303      	movs	r3, #3
 8006f54:	e167      	b.n	8007226 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f56:	4b0b      	ldr	r3, [pc, #44]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f5a:	f003 0302 	and.w	r3, r3, #2
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d0f0      	beq.n	8006f44 <HAL_RCC_OscConfig+0x200>
 8006f62:	e01b      	b.n	8006f9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f64:	4b09      	ldr	r3, [pc, #36]	; (8006f8c <HAL_RCC_OscConfig+0x248>)
 8006f66:	2200      	movs	r2, #0
 8006f68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f6a:	f7fe f81d 	bl	8004fa8 <HAL_GetTick>
 8006f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f70:	e00e      	b.n	8006f90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f72:	f7fe f819 	bl	8004fa8 <HAL_GetTick>
 8006f76:	4602      	mov	r2, r0
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d907      	bls.n	8006f90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006f80:	2303      	movs	r3, #3
 8006f82:	e150      	b.n	8007226 <HAL_RCC_OscConfig+0x4e2>
 8006f84:	40023800 	.word	0x40023800
 8006f88:	42470000 	.word	0x42470000
 8006f8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f90:	4b88      	ldr	r3, [pc, #544]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 8006f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f94:	f003 0302 	and.w	r3, r3, #2
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1ea      	bne.n	8006f72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0304 	and.w	r3, r3, #4
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 8097 	beq.w	80070d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006faa:	2300      	movs	r3, #0
 8006fac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fae:	4b81      	ldr	r3, [pc, #516]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 8006fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d10f      	bne.n	8006fda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fba:	2300      	movs	r3, #0
 8006fbc:	60bb      	str	r3, [r7, #8]
 8006fbe:	4b7d      	ldr	r3, [pc, #500]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 8006fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc2:	4a7c      	ldr	r2, [pc, #496]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 8006fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8006fca:	4b7a      	ldr	r3, [pc, #488]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 8006fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fd2:	60bb      	str	r3, [r7, #8]
 8006fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fda:	4b77      	ldr	r3, [pc, #476]	; (80071b8 <HAL_RCC_OscConfig+0x474>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d118      	bne.n	8007018 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006fe6:	4b74      	ldr	r3, [pc, #464]	; (80071b8 <HAL_RCC_OscConfig+0x474>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a73      	ldr	r2, [pc, #460]	; (80071b8 <HAL_RCC_OscConfig+0x474>)
 8006fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ff0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ff2:	f7fd ffd9 	bl	8004fa8 <HAL_GetTick>
 8006ff6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ff8:	e008      	b.n	800700c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ffa:	f7fd ffd5 	bl	8004fa8 <HAL_GetTick>
 8006ffe:	4602      	mov	r2, r0
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	2b02      	cmp	r3, #2
 8007006:	d901      	bls.n	800700c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007008:	2303      	movs	r3, #3
 800700a:	e10c      	b.n	8007226 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800700c:	4b6a      	ldr	r3, [pc, #424]	; (80071b8 <HAL_RCC_OscConfig+0x474>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007014:	2b00      	cmp	r3, #0
 8007016:	d0f0      	beq.n	8006ffa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d106      	bne.n	800702e <HAL_RCC_OscConfig+0x2ea>
 8007020:	4b64      	ldr	r3, [pc, #400]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 8007022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007024:	4a63      	ldr	r2, [pc, #396]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 8007026:	f043 0301 	orr.w	r3, r3, #1
 800702a:	6713      	str	r3, [r2, #112]	; 0x70
 800702c:	e01c      	b.n	8007068 <HAL_RCC_OscConfig+0x324>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	2b05      	cmp	r3, #5
 8007034:	d10c      	bne.n	8007050 <HAL_RCC_OscConfig+0x30c>
 8007036:	4b5f      	ldr	r3, [pc, #380]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 8007038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800703a:	4a5e      	ldr	r2, [pc, #376]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 800703c:	f043 0304 	orr.w	r3, r3, #4
 8007040:	6713      	str	r3, [r2, #112]	; 0x70
 8007042:	4b5c      	ldr	r3, [pc, #368]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 8007044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007046:	4a5b      	ldr	r2, [pc, #364]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 8007048:	f043 0301 	orr.w	r3, r3, #1
 800704c:	6713      	str	r3, [r2, #112]	; 0x70
 800704e:	e00b      	b.n	8007068 <HAL_RCC_OscConfig+0x324>
 8007050:	4b58      	ldr	r3, [pc, #352]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 8007052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007054:	4a57      	ldr	r2, [pc, #348]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 8007056:	f023 0301 	bic.w	r3, r3, #1
 800705a:	6713      	str	r3, [r2, #112]	; 0x70
 800705c:	4b55      	ldr	r3, [pc, #340]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 800705e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007060:	4a54      	ldr	r2, [pc, #336]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 8007062:	f023 0304 	bic.w	r3, r3, #4
 8007066:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d015      	beq.n	800709c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007070:	f7fd ff9a 	bl	8004fa8 <HAL_GetTick>
 8007074:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007076:	e00a      	b.n	800708e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007078:	f7fd ff96 	bl	8004fa8 <HAL_GetTick>
 800707c:	4602      	mov	r2, r0
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	f241 3288 	movw	r2, #5000	; 0x1388
 8007086:	4293      	cmp	r3, r2
 8007088:	d901      	bls.n	800708e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e0cb      	b.n	8007226 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800708e:	4b49      	ldr	r3, [pc, #292]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 8007090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007092:	f003 0302 	and.w	r3, r3, #2
 8007096:	2b00      	cmp	r3, #0
 8007098:	d0ee      	beq.n	8007078 <HAL_RCC_OscConfig+0x334>
 800709a:	e014      	b.n	80070c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800709c:	f7fd ff84 	bl	8004fa8 <HAL_GetTick>
 80070a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070a2:	e00a      	b.n	80070ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070a4:	f7fd ff80 	bl	8004fa8 <HAL_GetTick>
 80070a8:	4602      	mov	r2, r0
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d901      	bls.n	80070ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e0b5      	b.n	8007226 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070ba:	4b3e      	ldr	r3, [pc, #248]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 80070bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070be:	f003 0302 	and.w	r3, r3, #2
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1ee      	bne.n	80070a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80070c6:	7dfb      	ldrb	r3, [r7, #23]
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d105      	bne.n	80070d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070cc:	4b39      	ldr	r3, [pc, #228]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 80070ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d0:	4a38      	ldr	r2, [pc, #224]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 80070d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	699b      	ldr	r3, [r3, #24]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f000 80a1 	beq.w	8007224 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80070e2:	4b34      	ldr	r3, [pc, #208]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	f003 030c 	and.w	r3, r3, #12
 80070ea:	2b08      	cmp	r3, #8
 80070ec:	d05c      	beq.n	80071a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d141      	bne.n	800717a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070f6:	4b31      	ldr	r3, [pc, #196]	; (80071bc <HAL_RCC_OscConfig+0x478>)
 80070f8:	2200      	movs	r2, #0
 80070fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070fc:	f7fd ff54 	bl	8004fa8 <HAL_GetTick>
 8007100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007102:	e008      	b.n	8007116 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007104:	f7fd ff50 	bl	8004fa8 <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	2b02      	cmp	r3, #2
 8007110:	d901      	bls.n	8007116 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e087      	b.n	8007226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007116:	4b27      	ldr	r3, [pc, #156]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1f0      	bne.n	8007104 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	69da      	ldr	r2, [r3, #28]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a1b      	ldr	r3, [r3, #32]
 800712a:	431a      	orrs	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007130:	019b      	lsls	r3, r3, #6
 8007132:	431a      	orrs	r2, r3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007138:	085b      	lsrs	r3, r3, #1
 800713a:	3b01      	subs	r3, #1
 800713c:	041b      	lsls	r3, r3, #16
 800713e:	431a      	orrs	r2, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007144:	061b      	lsls	r3, r3, #24
 8007146:	491b      	ldr	r1, [pc, #108]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 8007148:	4313      	orrs	r3, r2
 800714a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800714c:	4b1b      	ldr	r3, [pc, #108]	; (80071bc <HAL_RCC_OscConfig+0x478>)
 800714e:	2201      	movs	r2, #1
 8007150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007152:	f7fd ff29 	bl	8004fa8 <HAL_GetTick>
 8007156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007158:	e008      	b.n	800716c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800715a:	f7fd ff25 	bl	8004fa8 <HAL_GetTick>
 800715e:	4602      	mov	r2, r0
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	2b02      	cmp	r3, #2
 8007166:	d901      	bls.n	800716c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	e05c      	b.n	8007226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800716c:	4b11      	ldr	r3, [pc, #68]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007174:	2b00      	cmp	r3, #0
 8007176:	d0f0      	beq.n	800715a <HAL_RCC_OscConfig+0x416>
 8007178:	e054      	b.n	8007224 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800717a:	4b10      	ldr	r3, [pc, #64]	; (80071bc <HAL_RCC_OscConfig+0x478>)
 800717c:	2200      	movs	r2, #0
 800717e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007180:	f7fd ff12 	bl	8004fa8 <HAL_GetTick>
 8007184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007186:	e008      	b.n	800719a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007188:	f7fd ff0e 	bl	8004fa8 <HAL_GetTick>
 800718c:	4602      	mov	r2, r0
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	2b02      	cmp	r3, #2
 8007194:	d901      	bls.n	800719a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007196:	2303      	movs	r3, #3
 8007198:	e045      	b.n	8007226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800719a:	4b06      	ldr	r3, [pc, #24]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1f0      	bne.n	8007188 <HAL_RCC_OscConfig+0x444>
 80071a6:	e03d      	b.n	8007224 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	699b      	ldr	r3, [r3, #24]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d107      	bne.n	80071c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e038      	b.n	8007226 <HAL_RCC_OscConfig+0x4e2>
 80071b4:	40023800 	.word	0x40023800
 80071b8:	40007000 	.word	0x40007000
 80071bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80071c0:	4b1b      	ldr	r3, [pc, #108]	; (8007230 <HAL_RCC_OscConfig+0x4ec>)
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d028      	beq.n	8007220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071d8:	429a      	cmp	r2, r3
 80071da:	d121      	bne.n	8007220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d11a      	bne.n	8007220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80071f0:	4013      	ands	r3, r2
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80071f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d111      	bne.n	8007220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007206:	085b      	lsrs	r3, r3, #1
 8007208:	3b01      	subs	r3, #1
 800720a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800720c:	429a      	cmp	r2, r3
 800720e:	d107      	bne.n	8007220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800721a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800721c:	429a      	cmp	r2, r3
 800721e:	d001      	beq.n	8007224 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e000      	b.n	8007226 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3718      	adds	r7, #24
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	40023800 	.word	0x40023800

08007234 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d101      	bne.n	8007248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e0cc      	b.n	80073e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007248:	4b68      	ldr	r3, [pc, #416]	; (80073ec <HAL_RCC_ClockConfig+0x1b8>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 030f 	and.w	r3, r3, #15
 8007250:	683a      	ldr	r2, [r7, #0]
 8007252:	429a      	cmp	r2, r3
 8007254:	d90c      	bls.n	8007270 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007256:	4b65      	ldr	r3, [pc, #404]	; (80073ec <HAL_RCC_ClockConfig+0x1b8>)
 8007258:	683a      	ldr	r2, [r7, #0]
 800725a:	b2d2      	uxtb	r2, r2
 800725c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800725e:	4b63      	ldr	r3, [pc, #396]	; (80073ec <HAL_RCC_ClockConfig+0x1b8>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 030f 	and.w	r3, r3, #15
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	429a      	cmp	r2, r3
 800726a:	d001      	beq.n	8007270 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	e0b8      	b.n	80073e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0302 	and.w	r3, r3, #2
 8007278:	2b00      	cmp	r3, #0
 800727a:	d020      	beq.n	80072be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0304 	and.w	r3, r3, #4
 8007284:	2b00      	cmp	r3, #0
 8007286:	d005      	beq.n	8007294 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007288:	4b59      	ldr	r3, [pc, #356]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	4a58      	ldr	r2, [pc, #352]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 800728e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007292:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 0308 	and.w	r3, r3, #8
 800729c:	2b00      	cmp	r3, #0
 800729e:	d005      	beq.n	80072ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80072a0:	4b53      	ldr	r3, [pc, #332]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	4a52      	ldr	r2, [pc, #328]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 80072a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80072aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072ac:	4b50      	ldr	r3, [pc, #320]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	494d      	ldr	r1, [pc, #308]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 80072ba:	4313      	orrs	r3, r2
 80072bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 0301 	and.w	r3, r3, #1
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d044      	beq.n	8007354 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d107      	bne.n	80072e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072d2:	4b47      	ldr	r3, [pc, #284]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d119      	bne.n	8007312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e07f      	b.n	80073e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	d003      	beq.n	80072f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072ee:	2b03      	cmp	r3, #3
 80072f0:	d107      	bne.n	8007302 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072f2:	4b3f      	ldr	r3, [pc, #252]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d109      	bne.n	8007312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e06f      	b.n	80073e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007302:	4b3b      	ldr	r3, [pc, #236]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f003 0302 	and.w	r3, r3, #2
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e067      	b.n	80073e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007312:	4b37      	ldr	r3, [pc, #220]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	f023 0203 	bic.w	r2, r3, #3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	4934      	ldr	r1, [pc, #208]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007320:	4313      	orrs	r3, r2
 8007322:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007324:	f7fd fe40 	bl	8004fa8 <HAL_GetTick>
 8007328:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800732a:	e00a      	b.n	8007342 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800732c:	f7fd fe3c 	bl	8004fa8 <HAL_GetTick>
 8007330:	4602      	mov	r2, r0
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	f241 3288 	movw	r2, #5000	; 0x1388
 800733a:	4293      	cmp	r3, r2
 800733c:	d901      	bls.n	8007342 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e04f      	b.n	80073e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007342:	4b2b      	ldr	r3, [pc, #172]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	f003 020c 	and.w	r2, r3, #12
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	429a      	cmp	r2, r3
 8007352:	d1eb      	bne.n	800732c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007354:	4b25      	ldr	r3, [pc, #148]	; (80073ec <HAL_RCC_ClockConfig+0x1b8>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 030f 	and.w	r3, r3, #15
 800735c:	683a      	ldr	r2, [r7, #0]
 800735e:	429a      	cmp	r2, r3
 8007360:	d20c      	bcs.n	800737c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007362:	4b22      	ldr	r3, [pc, #136]	; (80073ec <HAL_RCC_ClockConfig+0x1b8>)
 8007364:	683a      	ldr	r2, [r7, #0]
 8007366:	b2d2      	uxtb	r2, r2
 8007368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800736a:	4b20      	ldr	r3, [pc, #128]	; (80073ec <HAL_RCC_ClockConfig+0x1b8>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 030f 	and.w	r3, r3, #15
 8007372:	683a      	ldr	r2, [r7, #0]
 8007374:	429a      	cmp	r2, r3
 8007376:	d001      	beq.n	800737c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e032      	b.n	80073e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0304 	and.w	r3, r3, #4
 8007384:	2b00      	cmp	r3, #0
 8007386:	d008      	beq.n	800739a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007388:	4b19      	ldr	r3, [pc, #100]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	4916      	ldr	r1, [pc, #88]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007396:	4313      	orrs	r3, r2
 8007398:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 0308 	and.w	r3, r3, #8
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d009      	beq.n	80073ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80073a6:	4b12      	ldr	r3, [pc, #72]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	00db      	lsls	r3, r3, #3
 80073b4:	490e      	ldr	r1, [pc, #56]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 80073b6:	4313      	orrs	r3, r2
 80073b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80073ba:	f000 f821 	bl	8007400 <HAL_RCC_GetSysClockFreq>
 80073be:	4602      	mov	r2, r0
 80073c0:	4b0b      	ldr	r3, [pc, #44]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	091b      	lsrs	r3, r3, #4
 80073c6:	f003 030f 	and.w	r3, r3, #15
 80073ca:	490a      	ldr	r1, [pc, #40]	; (80073f4 <HAL_RCC_ClockConfig+0x1c0>)
 80073cc:	5ccb      	ldrb	r3, [r1, r3]
 80073ce:	fa22 f303 	lsr.w	r3, r2, r3
 80073d2:	4a09      	ldr	r2, [pc, #36]	; (80073f8 <HAL_RCC_ClockConfig+0x1c4>)
 80073d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80073d6:	4b09      	ldr	r3, [pc, #36]	; (80073fc <HAL_RCC_ClockConfig+0x1c8>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4618      	mov	r0, r3
 80073dc:	f7fd fda0 	bl	8004f20 <HAL_InitTick>

  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	40023c00 	.word	0x40023c00
 80073f0:	40023800 	.word	0x40023800
 80073f4:	0801268c 	.word	0x0801268c
 80073f8:	20000158 	.word	0x20000158
 80073fc:	2000015c 	.word	0x2000015c

08007400 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007400:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007404:	b090      	sub	sp, #64	; 0x40
 8007406:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007408:	2300      	movs	r3, #0
 800740a:	637b      	str	r3, [r7, #52]	; 0x34
 800740c:	2300      	movs	r3, #0
 800740e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007410:	2300      	movs	r3, #0
 8007412:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007414:	2300      	movs	r3, #0
 8007416:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007418:	4b59      	ldr	r3, [pc, #356]	; (8007580 <HAL_RCC_GetSysClockFreq+0x180>)
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	f003 030c 	and.w	r3, r3, #12
 8007420:	2b08      	cmp	r3, #8
 8007422:	d00d      	beq.n	8007440 <HAL_RCC_GetSysClockFreq+0x40>
 8007424:	2b08      	cmp	r3, #8
 8007426:	f200 80a1 	bhi.w	800756c <HAL_RCC_GetSysClockFreq+0x16c>
 800742a:	2b00      	cmp	r3, #0
 800742c:	d002      	beq.n	8007434 <HAL_RCC_GetSysClockFreq+0x34>
 800742e:	2b04      	cmp	r3, #4
 8007430:	d003      	beq.n	800743a <HAL_RCC_GetSysClockFreq+0x3a>
 8007432:	e09b      	b.n	800756c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007434:	4b53      	ldr	r3, [pc, #332]	; (8007584 <HAL_RCC_GetSysClockFreq+0x184>)
 8007436:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007438:	e09b      	b.n	8007572 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800743a:	4b53      	ldr	r3, [pc, #332]	; (8007588 <HAL_RCC_GetSysClockFreq+0x188>)
 800743c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800743e:	e098      	b.n	8007572 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007440:	4b4f      	ldr	r3, [pc, #316]	; (8007580 <HAL_RCC_GetSysClockFreq+0x180>)
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007448:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800744a:	4b4d      	ldr	r3, [pc, #308]	; (8007580 <HAL_RCC_GetSysClockFreq+0x180>)
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007452:	2b00      	cmp	r3, #0
 8007454:	d028      	beq.n	80074a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007456:	4b4a      	ldr	r3, [pc, #296]	; (8007580 <HAL_RCC_GetSysClockFreq+0x180>)
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	099b      	lsrs	r3, r3, #6
 800745c:	2200      	movs	r2, #0
 800745e:	623b      	str	r3, [r7, #32]
 8007460:	627a      	str	r2, [r7, #36]	; 0x24
 8007462:	6a3b      	ldr	r3, [r7, #32]
 8007464:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007468:	2100      	movs	r1, #0
 800746a:	4b47      	ldr	r3, [pc, #284]	; (8007588 <HAL_RCC_GetSysClockFreq+0x188>)
 800746c:	fb03 f201 	mul.w	r2, r3, r1
 8007470:	2300      	movs	r3, #0
 8007472:	fb00 f303 	mul.w	r3, r0, r3
 8007476:	4413      	add	r3, r2
 8007478:	4a43      	ldr	r2, [pc, #268]	; (8007588 <HAL_RCC_GetSysClockFreq+0x188>)
 800747a:	fba0 1202 	umull	r1, r2, r0, r2
 800747e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007480:	460a      	mov	r2, r1
 8007482:	62ba      	str	r2, [r7, #40]	; 0x28
 8007484:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007486:	4413      	add	r3, r2
 8007488:	62fb      	str	r3, [r7, #44]	; 0x2c
 800748a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800748c:	2200      	movs	r2, #0
 800748e:	61bb      	str	r3, [r7, #24]
 8007490:	61fa      	str	r2, [r7, #28]
 8007492:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007496:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800749a:	f7f9 fc05 	bl	8000ca8 <__aeabi_uldivmod>
 800749e:	4602      	mov	r2, r0
 80074a0:	460b      	mov	r3, r1
 80074a2:	4613      	mov	r3, r2
 80074a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074a6:	e053      	b.n	8007550 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074a8:	4b35      	ldr	r3, [pc, #212]	; (8007580 <HAL_RCC_GetSysClockFreq+0x180>)
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	099b      	lsrs	r3, r3, #6
 80074ae:	2200      	movs	r2, #0
 80074b0:	613b      	str	r3, [r7, #16]
 80074b2:	617a      	str	r2, [r7, #20]
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80074ba:	f04f 0b00 	mov.w	fp, #0
 80074be:	4652      	mov	r2, sl
 80074c0:	465b      	mov	r3, fp
 80074c2:	f04f 0000 	mov.w	r0, #0
 80074c6:	f04f 0100 	mov.w	r1, #0
 80074ca:	0159      	lsls	r1, r3, #5
 80074cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80074d0:	0150      	lsls	r0, r2, #5
 80074d2:	4602      	mov	r2, r0
 80074d4:	460b      	mov	r3, r1
 80074d6:	ebb2 080a 	subs.w	r8, r2, sl
 80074da:	eb63 090b 	sbc.w	r9, r3, fp
 80074de:	f04f 0200 	mov.w	r2, #0
 80074e2:	f04f 0300 	mov.w	r3, #0
 80074e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80074ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80074ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80074f2:	ebb2 0408 	subs.w	r4, r2, r8
 80074f6:	eb63 0509 	sbc.w	r5, r3, r9
 80074fa:	f04f 0200 	mov.w	r2, #0
 80074fe:	f04f 0300 	mov.w	r3, #0
 8007502:	00eb      	lsls	r3, r5, #3
 8007504:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007508:	00e2      	lsls	r2, r4, #3
 800750a:	4614      	mov	r4, r2
 800750c:	461d      	mov	r5, r3
 800750e:	eb14 030a 	adds.w	r3, r4, sl
 8007512:	603b      	str	r3, [r7, #0]
 8007514:	eb45 030b 	adc.w	r3, r5, fp
 8007518:	607b      	str	r3, [r7, #4]
 800751a:	f04f 0200 	mov.w	r2, #0
 800751e:	f04f 0300 	mov.w	r3, #0
 8007522:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007526:	4629      	mov	r1, r5
 8007528:	028b      	lsls	r3, r1, #10
 800752a:	4621      	mov	r1, r4
 800752c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007530:	4621      	mov	r1, r4
 8007532:	028a      	lsls	r2, r1, #10
 8007534:	4610      	mov	r0, r2
 8007536:	4619      	mov	r1, r3
 8007538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800753a:	2200      	movs	r2, #0
 800753c:	60bb      	str	r3, [r7, #8]
 800753e:	60fa      	str	r2, [r7, #12]
 8007540:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007544:	f7f9 fbb0 	bl	8000ca8 <__aeabi_uldivmod>
 8007548:	4602      	mov	r2, r0
 800754a:	460b      	mov	r3, r1
 800754c:	4613      	mov	r3, r2
 800754e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007550:	4b0b      	ldr	r3, [pc, #44]	; (8007580 <HAL_RCC_GetSysClockFreq+0x180>)
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	0c1b      	lsrs	r3, r3, #16
 8007556:	f003 0303 	and.w	r3, r3, #3
 800755a:	3301      	adds	r3, #1
 800755c:	005b      	lsls	r3, r3, #1
 800755e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007560:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007564:	fbb2 f3f3 	udiv	r3, r2, r3
 8007568:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800756a:	e002      	b.n	8007572 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800756c:	4b05      	ldr	r3, [pc, #20]	; (8007584 <HAL_RCC_GetSysClockFreq+0x184>)
 800756e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007570:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007574:	4618      	mov	r0, r3
 8007576:	3740      	adds	r7, #64	; 0x40
 8007578:	46bd      	mov	sp, r7
 800757a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800757e:	bf00      	nop
 8007580:	40023800 	.word	0x40023800
 8007584:	00f42400 	.word	0x00f42400
 8007588:	017d7840 	.word	0x017d7840

0800758c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800758c:	b480      	push	{r7}
 800758e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007590:	4b03      	ldr	r3, [pc, #12]	; (80075a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007592:	681b      	ldr	r3, [r3, #0]
}
 8007594:	4618      	mov	r0, r3
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	20000158 	.word	0x20000158

080075a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80075a8:	f7ff fff0 	bl	800758c <HAL_RCC_GetHCLKFreq>
 80075ac:	4602      	mov	r2, r0
 80075ae:	4b05      	ldr	r3, [pc, #20]	; (80075c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	0a9b      	lsrs	r3, r3, #10
 80075b4:	f003 0307 	and.w	r3, r3, #7
 80075b8:	4903      	ldr	r1, [pc, #12]	; (80075c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80075ba:	5ccb      	ldrb	r3, [r1, r3]
 80075bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	40023800 	.word	0x40023800
 80075c8:	0801269c 	.word	0x0801269c

080075cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80075d0:	f7ff ffdc 	bl	800758c <HAL_RCC_GetHCLKFreq>
 80075d4:	4602      	mov	r2, r0
 80075d6:	4b05      	ldr	r3, [pc, #20]	; (80075ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	0b5b      	lsrs	r3, r3, #13
 80075dc:	f003 0307 	and.w	r3, r3, #7
 80075e0:	4903      	ldr	r1, [pc, #12]	; (80075f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80075e2:	5ccb      	ldrb	r3, [r1, r3]
 80075e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	40023800 	.word	0x40023800
 80075f0:	0801269c 	.word	0x0801269c

080075f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b086      	sub	sp, #24
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80075fc:	2300      	movs	r3, #0
 80075fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007600:	2300      	movs	r3, #0
 8007602:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 0301 	and.w	r3, r3, #1
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10b      	bne.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007618:	2b00      	cmp	r3, #0
 800761a:	d105      	bne.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007624:	2b00      	cmp	r3, #0
 8007626:	d075      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007628:	4b91      	ldr	r3, [pc, #580]	; (8007870 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800762a:	2200      	movs	r2, #0
 800762c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800762e:	f7fd fcbb 	bl	8004fa8 <HAL_GetTick>
 8007632:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007634:	e008      	b.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007636:	f7fd fcb7 	bl	8004fa8 <HAL_GetTick>
 800763a:	4602      	mov	r2, r0
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	1ad3      	subs	r3, r2, r3
 8007640:	2b02      	cmp	r3, #2
 8007642:	d901      	bls.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007644:	2303      	movs	r3, #3
 8007646:	e189      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007648:	4b8a      	ldr	r3, [pc, #552]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1f0      	bne.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 0301 	and.w	r3, r3, #1
 800765c:	2b00      	cmp	r3, #0
 800765e:	d009      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	019a      	lsls	r2, r3, #6
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	071b      	lsls	r3, r3, #28
 800766c:	4981      	ldr	r1, [pc, #516]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800766e:	4313      	orrs	r3, r2
 8007670:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 0302 	and.w	r3, r3, #2
 800767c:	2b00      	cmp	r3, #0
 800767e:	d01f      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007680:	4b7c      	ldr	r3, [pc, #496]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007682:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007686:	0f1b      	lsrs	r3, r3, #28
 8007688:	f003 0307 	and.w	r3, r3, #7
 800768c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	019a      	lsls	r2, r3, #6
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	061b      	lsls	r3, r3, #24
 800769a:	431a      	orrs	r2, r3
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	071b      	lsls	r3, r3, #28
 80076a0:	4974      	ldr	r1, [pc, #464]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80076a2:	4313      	orrs	r3, r2
 80076a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80076a8:	4b72      	ldr	r3, [pc, #456]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80076aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076ae:	f023 021f 	bic.w	r2, r3, #31
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	69db      	ldr	r3, [r3, #28]
 80076b6:	3b01      	subs	r3, #1
 80076b8:	496e      	ldr	r1, [pc, #440]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80076ba:	4313      	orrs	r3, r2
 80076bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d00d      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	019a      	lsls	r2, r3, #6
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	061b      	lsls	r3, r3, #24
 80076d8:	431a      	orrs	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	071b      	lsls	r3, r3, #28
 80076e0:	4964      	ldr	r1, [pc, #400]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80076e2:	4313      	orrs	r3, r2
 80076e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80076e8:	4b61      	ldr	r3, [pc, #388]	; (8007870 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80076ea:	2201      	movs	r2, #1
 80076ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80076ee:	f7fd fc5b 	bl	8004fa8 <HAL_GetTick>
 80076f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80076f4:	e008      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80076f6:	f7fd fc57 	bl	8004fa8 <HAL_GetTick>
 80076fa:	4602      	mov	r2, r0
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	1ad3      	subs	r3, r2, r3
 8007700:	2b02      	cmp	r3, #2
 8007702:	d901      	bls.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007704:	2303      	movs	r3, #3
 8007706:	e129      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007708:	4b5a      	ldr	r3, [pc, #360]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007710:	2b00      	cmp	r3, #0
 8007712:	d0f0      	beq.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0304 	and.w	r3, r3, #4
 800771c:	2b00      	cmp	r3, #0
 800771e:	d105      	bne.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007728:	2b00      	cmp	r3, #0
 800772a:	d079      	beq.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800772c:	4b52      	ldr	r3, [pc, #328]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800772e:	2200      	movs	r2, #0
 8007730:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007732:	f7fd fc39 	bl	8004fa8 <HAL_GetTick>
 8007736:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007738:	e008      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800773a:	f7fd fc35 	bl	8004fa8 <HAL_GetTick>
 800773e:	4602      	mov	r2, r0
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	1ad3      	subs	r3, r2, r3
 8007744:	2b02      	cmp	r3, #2
 8007746:	d901      	bls.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007748:	2303      	movs	r3, #3
 800774a:	e107      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800774c:	4b49      	ldr	r3, [pc, #292]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007758:	d0ef      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 0304 	and.w	r3, r3, #4
 8007762:	2b00      	cmp	r3, #0
 8007764:	d020      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007766:	4b43      	ldr	r3, [pc, #268]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800776c:	0f1b      	lsrs	r3, r3, #28
 800776e:	f003 0307 	and.w	r3, r3, #7
 8007772:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	691b      	ldr	r3, [r3, #16]
 8007778:	019a      	lsls	r2, r3, #6
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	695b      	ldr	r3, [r3, #20]
 800777e:	061b      	lsls	r3, r3, #24
 8007780:	431a      	orrs	r2, r3
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	071b      	lsls	r3, r3, #28
 8007786:	493b      	ldr	r1, [pc, #236]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007788:	4313      	orrs	r3, r2
 800778a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800778e:	4b39      	ldr	r3, [pc, #228]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007790:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007794:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a1b      	ldr	r3, [r3, #32]
 800779c:	3b01      	subs	r3, #1
 800779e:	021b      	lsls	r3, r3, #8
 80077a0:	4934      	ldr	r1, [pc, #208]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80077a2:	4313      	orrs	r3, r2
 80077a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 0308 	and.w	r3, r3, #8
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d01e      	beq.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80077b4:	4b2f      	ldr	r3, [pc, #188]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80077b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077ba:	0e1b      	lsrs	r3, r3, #24
 80077bc:	f003 030f 	and.w	r3, r3, #15
 80077c0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	019a      	lsls	r2, r3, #6
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	061b      	lsls	r3, r3, #24
 80077cc:	431a      	orrs	r2, r3
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	699b      	ldr	r3, [r3, #24]
 80077d2:	071b      	lsls	r3, r3, #28
 80077d4:	4927      	ldr	r1, [pc, #156]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80077d6:	4313      	orrs	r3, r2
 80077d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80077dc:	4b25      	ldr	r3, [pc, #148]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80077de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ea:	4922      	ldr	r1, [pc, #136]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80077ec:	4313      	orrs	r3, r2
 80077ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80077f2:	4b21      	ldr	r3, [pc, #132]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80077f4:	2201      	movs	r2, #1
 80077f6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80077f8:	f7fd fbd6 	bl	8004fa8 <HAL_GetTick>
 80077fc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80077fe:	e008      	b.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007800:	f7fd fbd2 	bl	8004fa8 <HAL_GetTick>
 8007804:	4602      	mov	r2, r0
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	1ad3      	subs	r3, r2, r3
 800780a:	2b02      	cmp	r3, #2
 800780c:	d901      	bls.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800780e:	2303      	movs	r3, #3
 8007810:	e0a4      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007812:	4b18      	ldr	r3, [pc, #96]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800781a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800781e:	d1ef      	bne.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 0320 	and.w	r3, r3, #32
 8007828:	2b00      	cmp	r3, #0
 800782a:	f000 808b 	beq.w	8007944 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800782e:	2300      	movs	r3, #0
 8007830:	60fb      	str	r3, [r7, #12]
 8007832:	4b10      	ldr	r3, [pc, #64]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007836:	4a0f      	ldr	r2, [pc, #60]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800783c:	6413      	str	r3, [r2, #64]	; 0x40
 800783e:	4b0d      	ldr	r3, [pc, #52]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007846:	60fb      	str	r3, [r7, #12]
 8007848:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800784a:	4b0c      	ldr	r3, [pc, #48]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a0b      	ldr	r2, [pc, #44]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007854:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007856:	f7fd fba7 	bl	8004fa8 <HAL_GetTick>
 800785a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800785c:	e010      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800785e:	f7fd fba3 	bl	8004fa8 <HAL_GetTick>
 8007862:	4602      	mov	r2, r0
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	1ad3      	subs	r3, r2, r3
 8007868:	2b02      	cmp	r3, #2
 800786a:	d909      	bls.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800786c:	2303      	movs	r3, #3
 800786e:	e075      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8007870:	42470068 	.word	0x42470068
 8007874:	40023800 	.word	0x40023800
 8007878:	42470070 	.word	0x42470070
 800787c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007880:	4b38      	ldr	r3, [pc, #224]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007888:	2b00      	cmp	r3, #0
 800788a:	d0e8      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800788c:	4b36      	ldr	r3, [pc, #216]	; (8007968 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800788e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007890:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007894:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d02f      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x308>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078a4:	693a      	ldr	r2, [r7, #16]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d028      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80078aa:	4b2f      	ldr	r3, [pc, #188]	; (8007968 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80078ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078b2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80078b4:	4b2d      	ldr	r3, [pc, #180]	; (800796c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80078b6:	2201      	movs	r2, #1
 80078b8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80078ba:	4b2c      	ldr	r3, [pc, #176]	; (800796c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80078bc:	2200      	movs	r2, #0
 80078be:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80078c0:	4a29      	ldr	r2, [pc, #164]	; (8007968 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80078c6:	4b28      	ldr	r3, [pc, #160]	; (8007968 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80078c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ca:	f003 0301 	and.w	r3, r3, #1
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d114      	bne.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80078d2:	f7fd fb69 	bl	8004fa8 <HAL_GetTick>
 80078d6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078d8:	e00a      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078da:	f7fd fb65 	bl	8004fa8 <HAL_GetTick>
 80078de:	4602      	mov	r2, r0
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d901      	bls.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80078ec:	2303      	movs	r3, #3
 80078ee:	e035      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078f0:	4b1d      	ldr	r3, [pc, #116]	; (8007968 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80078f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078f4:	f003 0302 	and.w	r3, r3, #2
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d0ee      	beq.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007900:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007904:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007908:	d10d      	bne.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800790a:	4b17      	ldr	r3, [pc, #92]	; (8007968 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007916:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800791a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800791e:	4912      	ldr	r1, [pc, #72]	; (8007968 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007920:	4313      	orrs	r3, r2
 8007922:	608b      	str	r3, [r1, #8]
 8007924:	e005      	b.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8007926:	4b10      	ldr	r3, [pc, #64]	; (8007968 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	4a0f      	ldr	r2, [pc, #60]	; (8007968 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800792c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007930:	6093      	str	r3, [r2, #8]
 8007932:	4b0d      	ldr	r3, [pc, #52]	; (8007968 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007934:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800793a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800793e:	490a      	ldr	r1, [pc, #40]	; (8007968 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007940:	4313      	orrs	r3, r2
 8007942:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 0310 	and.w	r3, r3, #16
 800794c:	2b00      	cmp	r3, #0
 800794e:	d004      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007956:	4b06      	ldr	r3, [pc, #24]	; (8007970 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007958:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	3718      	adds	r7, #24
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	40007000 	.word	0x40007000
 8007968:	40023800 	.word	0x40023800
 800796c:	42470e40 	.word	0x42470e40
 8007970:	424711e0 	.word	0x424711e0

08007974 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d101      	bne.n	800798a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e066      	b.n	8007a58 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	7f5b      	ldrb	r3, [r3, #29]
 800798e:	b2db      	uxtb	r3, r3
 8007990:	2b00      	cmp	r3, #0
 8007992:	d105      	bne.n	80079a0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f7fc fe1a 	bl	80045d4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2202      	movs	r2, #2
 80079a4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	22ca      	movs	r2, #202	; 0xca
 80079ac:	625a      	str	r2, [r3, #36]	; 0x24
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2253      	movs	r2, #83	; 0x53
 80079b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 f998 	bl	8007cec <RTC_EnterInitMode>
 80079bc:	4603      	mov	r3, r0
 80079be:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80079c0:	7bfb      	ldrb	r3, [r7, #15]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d12c      	bne.n	8007a20 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	6812      	ldr	r2, [r2, #0]
 80079d0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80079d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079d8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	6899      	ldr	r1, [r3, #8]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	685a      	ldr	r2, [r3, #4]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	431a      	orrs	r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	695b      	ldr	r3, [r3, #20]
 80079ee:	431a      	orrs	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	430a      	orrs	r2, r1
 80079f6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	68d2      	ldr	r2, [r2, #12]
 8007a00:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	6919      	ldr	r1, [r3, #16]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	041a      	lsls	r2, r3, #16
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	430a      	orrs	r2, r1
 8007a14:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 f99f 	bl	8007d5a <RTC_ExitInitMode>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007a20:	7bfb      	ldrb	r3, [r7, #15]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d113      	bne.n	8007a4e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007a34:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	699a      	ldr	r2, [r3, #24]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	430a      	orrs	r2, r1
 8007a46:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	22ff      	movs	r2, #255	; 0xff
 8007a54:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8007a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007a60:	b590      	push	{r4, r7, lr}
 8007a62:	b087      	sub	sp, #28
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	7f1b      	ldrb	r3, [r3, #28]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d101      	bne.n	8007a7c <HAL_RTC_SetTime+0x1c>
 8007a78:	2302      	movs	r3, #2
 8007a7a:	e087      	b.n	8007b8c <HAL_RTC_SetTime+0x12c>
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2202      	movs	r2, #2
 8007a86:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d126      	bne.n	8007adc <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d102      	bne.n	8007aa2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f000 f97c 	bl	8007da4 <RTC_ByteToBcd2>
 8007aac:	4603      	mov	r3, r0
 8007aae:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	785b      	ldrb	r3, [r3, #1]
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f000 f975 	bl	8007da4 <RTC_ByteToBcd2>
 8007aba:	4603      	mov	r3, r0
 8007abc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007abe:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	789b      	ldrb	r3, [r3, #2]
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f000 f96d 	bl	8007da4 <RTC_ByteToBcd2>
 8007aca:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007acc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	78db      	ldrb	r3, [r3, #3]
 8007ad4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	617b      	str	r3, [r7, #20]
 8007ada:	e018      	b.n	8007b0e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d102      	bne.n	8007af0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	2200      	movs	r2, #0
 8007aee:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	785b      	ldrb	r3, [r3, #1]
 8007afa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007afc:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8007afe:	68ba      	ldr	r2, [r7, #8]
 8007b00:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007b02:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	78db      	ldrb	r3, [r3, #3]
 8007b08:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	22ca      	movs	r2, #202	; 0xca
 8007b14:	625a      	str	r2, [r3, #36]	; 0x24
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2253      	movs	r2, #83	; 0x53
 8007b1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	f000 f8e4 	bl	8007cec <RTC_EnterInitMode>
 8007b24:	4603      	mov	r3, r0
 8007b26:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007b28:	7cfb      	ldrb	r3, [r7, #19]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d120      	bne.n	8007b70 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007b38:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007b3c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	689a      	ldr	r2, [r3, #8]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007b4c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	6899      	ldr	r1, [r3, #8]
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	68da      	ldr	r2, [r3, #12]
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	431a      	orrs	r2, r3
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	430a      	orrs	r2, r1
 8007b64:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f000 f8f7 	bl	8007d5a <RTC_ExitInitMode>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007b70:	7cfb      	ldrb	r3, [r7, #19]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d102      	bne.n	8007b7c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	22ff      	movs	r2, #255	; 0xff
 8007b82:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2200      	movs	r2, #0
 8007b88:	771a      	strb	r2, [r3, #28]

  return status;
 8007b8a:	7cfb      	ldrb	r3, [r7, #19]
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	371c      	adds	r7, #28
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd90      	pop	{r4, r7, pc}

08007b94 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007b94:	b590      	push	{r4, r7, lr}
 8007b96:	b087      	sub	sp, #28
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	7f1b      	ldrb	r3, [r3, #28]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d101      	bne.n	8007bb0 <HAL_RTC_SetDate+0x1c>
 8007bac:	2302      	movs	r3, #2
 8007bae:	e071      	b.n	8007c94 <HAL_RTC_SetDate+0x100>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2202      	movs	r2, #2
 8007bba:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d10e      	bne.n	8007be0 <HAL_RTC_SetDate+0x4c>
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	785b      	ldrb	r3, [r3, #1]
 8007bc6:	f003 0310 	and.w	r3, r3, #16
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d008      	beq.n	8007be0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	785b      	ldrb	r3, [r3, #1]
 8007bd2:	f023 0310 	bic.w	r3, r3, #16
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	330a      	adds	r3, #10
 8007bda:	b2da      	uxtb	r2, r3
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d11c      	bne.n	8007c20 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	78db      	ldrb	r3, [r3, #3]
 8007bea:	4618      	mov	r0, r3
 8007bec:	f000 f8da 	bl	8007da4 <RTC_ByteToBcd2>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	785b      	ldrb	r3, [r3, #1]
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f000 f8d3 	bl	8007da4 <RTC_ByteToBcd2>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007c02:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	789b      	ldrb	r3, [r3, #2]
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f000 f8cb 	bl	8007da4 <RTC_ByteToBcd2>
 8007c0e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007c10:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	617b      	str	r3, [r7, #20]
 8007c1e:	e00e      	b.n	8007c3e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	78db      	ldrb	r3, [r3, #3]
 8007c24:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	785b      	ldrb	r3, [r3, #1]
 8007c2a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007c2c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8007c2e:	68ba      	ldr	r2, [r7, #8]
 8007c30:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007c32:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	22ca      	movs	r2, #202	; 0xca
 8007c44:	625a      	str	r2, [r3, #36]	; 0x24
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2253      	movs	r2, #83	; 0x53
 8007c4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f000 f84c 	bl	8007cec <RTC_EnterInitMode>
 8007c54:	4603      	mov	r3, r0
 8007c56:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007c58:	7cfb      	ldrb	r3, [r7, #19]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d10c      	bne.n	8007c78 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007c68:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007c6c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	f000 f873 	bl	8007d5a <RTC_ExitInitMode>
 8007c74:	4603      	mov	r3, r0
 8007c76:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007c78:	7cfb      	ldrb	r3, [r7, #19]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d102      	bne.n	8007c84 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2201      	movs	r2, #1
 8007c82:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	22ff      	movs	r2, #255	; 0xff
 8007c8a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	771a      	strb	r2, [r3, #28]

  return status;
 8007c92:	7cfb      	ldrb	r3, [r7, #19]
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	371c      	adds	r7, #28
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd90      	pop	{r4, r7, pc}

08007c9c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68da      	ldr	r2, [r3, #12]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007cb6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007cb8:	f7fd f976 	bl	8004fa8 <HAL_GetTick>
 8007cbc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007cbe:	e009      	b.n	8007cd4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007cc0:	f7fd f972 	bl	8004fa8 <HAL_GetTick>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007cce:	d901      	bls.n	8007cd4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007cd0:	2303      	movs	r3, #3
 8007cd2:	e007      	b.n	8007ce4 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	f003 0320 	and.w	r3, r3, #32
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d0ee      	beq.n	8007cc0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007ce2:	2300      	movs	r3, #0
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d122      	bne.n	8007d50 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	68da      	ldr	r2, [r3, #12]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007d18:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007d1a:	f7fd f945 	bl	8004fa8 <HAL_GetTick>
 8007d1e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007d20:	e00c      	b.n	8007d3c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007d22:	f7fd f941 	bl	8004fa8 <HAL_GetTick>
 8007d26:	4602      	mov	r2, r0
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	1ad3      	subs	r3, r2, r3
 8007d2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d30:	d904      	bls.n	8007d3c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2204      	movs	r2, #4
 8007d36:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d102      	bne.n	8007d50 <RTC_EnterInitMode+0x64>
 8007d4a:	7bfb      	ldrb	r3, [r7, #15]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d1e8      	bne.n	8007d22 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b084      	sub	sp, #16
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d62:	2300      	movs	r3, #0
 8007d64:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68da      	ldr	r2, [r3, #12]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d74:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	f003 0320 	and.w	r3, r3, #32
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d10a      	bne.n	8007d9a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f7ff ff89 	bl	8007c9c <HAL_RTC_WaitForSynchro>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d004      	beq.n	8007d9a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2204      	movs	r2, #4
 8007d94:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b085      	sub	sp, #20
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	4603      	mov	r3, r0
 8007dac:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8007dae:	2300      	movs	r3, #0
 8007db0:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8007db2:	e005      	b.n	8007dc0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007db4:	7bfb      	ldrb	r3, [r7, #15]
 8007db6:	3301      	adds	r3, #1
 8007db8:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8007dba:	79fb      	ldrb	r3, [r7, #7]
 8007dbc:	3b0a      	subs	r3, #10
 8007dbe:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007dc0:	79fb      	ldrb	r3, [r7, #7]
 8007dc2:	2b09      	cmp	r3, #9
 8007dc4:	d8f6      	bhi.n	8007db4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8007dc6:	7bfb      	ldrb	r3, [r7, #15]
 8007dc8:	011b      	lsls	r3, r3, #4
 8007dca:	b2da      	uxtb	r2, r3
 8007dcc:	79fb      	ldrb	r3, [r7, #7]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	b2db      	uxtb	r3, r3
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3714      	adds	r7, #20
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr

08007dde <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b082      	sub	sp, #8
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d101      	bne.n	8007df0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e07b      	b.n	8007ee8 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d108      	bne.n	8007e0a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e00:	d009      	beq.n	8007e16 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	61da      	str	r2, [r3, #28]
 8007e08:	e005      	b.n	8007e16 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d106      	bne.n	8007e36 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f7fc fc2f 	bl	8004694 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2202      	movs	r2, #2
 8007e3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e4c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007e5e:	431a      	orrs	r2, r3
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e68:	431a      	orrs	r2, r3
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	f003 0302 	and.w	r3, r3, #2
 8007e72:	431a      	orrs	r2, r3
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	695b      	ldr	r3, [r3, #20]
 8007e78:	f003 0301 	and.w	r3, r3, #1
 8007e7c:	431a      	orrs	r2, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	699b      	ldr	r3, [r3, #24]
 8007e82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e86:	431a      	orrs	r2, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	69db      	ldr	r3, [r3, #28]
 8007e8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e90:	431a      	orrs	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a1b      	ldr	r3, [r3, #32]
 8007e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e9a:	ea42 0103 	orr.w	r1, r2, r3
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	430a      	orrs	r2, r1
 8007eac:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	699b      	ldr	r3, [r3, #24]
 8007eb2:	0c1b      	lsrs	r3, r3, #16
 8007eb4:	f003 0104 	and.w	r1, r3, #4
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ebc:	f003 0210 	and.w	r2, r3, #16
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	430a      	orrs	r2, r1
 8007ec6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	69da      	ldr	r2, [r3, #28]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ed6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3708      	adds	r7, #8
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d101      	bne.n	8007f02 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	e01a      	b.n	8007f38 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2202      	movs	r2, #2
 8007f06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f18:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f7fc fc02 	bl	8004724 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3708      	adds	r7, #8
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b088      	sub	sp, #32
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	603b      	str	r3, [r7, #0]
 8007f4c:	4613      	mov	r3, r2
 8007f4e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f50:	2300      	movs	r3, #0
 8007f52:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d101      	bne.n	8007f62 <HAL_SPI_Transmit+0x22>
 8007f5e:	2302      	movs	r3, #2
 8007f60:	e126      	b.n	80081b0 <HAL_SPI_Transmit+0x270>
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2201      	movs	r2, #1
 8007f66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f6a:	f7fd f81d 	bl	8004fa8 <HAL_GetTick>
 8007f6e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007f70:	88fb      	ldrh	r3, [r7, #6]
 8007f72:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d002      	beq.n	8007f86 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007f80:	2302      	movs	r3, #2
 8007f82:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007f84:	e10b      	b.n	800819e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d002      	beq.n	8007f92 <HAL_SPI_Transmit+0x52>
 8007f8c:	88fb      	ldrh	r3, [r7, #6]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d102      	bne.n	8007f98 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007f96:	e102      	b.n	800819e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2203      	movs	r2, #3
 8007f9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	68ba      	ldr	r2, [r7, #8]
 8007faa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	88fa      	ldrh	r2, [r7, #6]
 8007fb0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	88fa      	ldrh	r2, [r7, #6]
 8007fb6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fde:	d10f      	bne.n	8008000 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ffe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800800a:	2b40      	cmp	r3, #64	; 0x40
 800800c:	d007      	beq.n	800801e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800801c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	68db      	ldr	r3, [r3, #12]
 8008022:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008026:	d14b      	bne.n	80080c0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d002      	beq.n	8008036 <HAL_SPI_Transmit+0xf6>
 8008030:	8afb      	ldrh	r3, [r7, #22]
 8008032:	2b01      	cmp	r3, #1
 8008034:	d13e      	bne.n	80080b4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800803a:	881a      	ldrh	r2, [r3, #0]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008046:	1c9a      	adds	r2, r3, #2
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008050:	b29b      	uxth	r3, r3
 8008052:	3b01      	subs	r3, #1
 8008054:	b29a      	uxth	r2, r3
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800805a:	e02b      	b.n	80080b4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	f003 0302 	and.w	r3, r3, #2
 8008066:	2b02      	cmp	r3, #2
 8008068:	d112      	bne.n	8008090 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800806e:	881a      	ldrh	r2, [r3, #0]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800807a:	1c9a      	adds	r2, r3, #2
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008084:	b29b      	uxth	r3, r3
 8008086:	3b01      	subs	r3, #1
 8008088:	b29a      	uxth	r2, r3
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	86da      	strh	r2, [r3, #54]	; 0x36
 800808e:	e011      	b.n	80080b4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008090:	f7fc ff8a 	bl	8004fa8 <HAL_GetTick>
 8008094:	4602      	mov	r2, r0
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	1ad3      	subs	r3, r2, r3
 800809a:	683a      	ldr	r2, [r7, #0]
 800809c:	429a      	cmp	r2, r3
 800809e:	d803      	bhi.n	80080a8 <HAL_SPI_Transmit+0x168>
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080a6:	d102      	bne.n	80080ae <HAL_SPI_Transmit+0x16e>
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d102      	bne.n	80080b4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80080ae:	2303      	movs	r3, #3
 80080b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80080b2:	e074      	b.n	800819e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d1ce      	bne.n	800805c <HAL_SPI_Transmit+0x11c>
 80080be:	e04c      	b.n	800815a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d002      	beq.n	80080ce <HAL_SPI_Transmit+0x18e>
 80080c8:	8afb      	ldrh	r3, [r7, #22]
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d140      	bne.n	8008150 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	330c      	adds	r3, #12
 80080d8:	7812      	ldrb	r2, [r2, #0]
 80080da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e0:	1c5a      	adds	r2, r3, #1
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	3b01      	subs	r3, #1
 80080ee:	b29a      	uxth	r2, r3
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80080f4:	e02c      	b.n	8008150 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	f003 0302 	and.w	r3, r3, #2
 8008100:	2b02      	cmp	r3, #2
 8008102:	d113      	bne.n	800812c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	330c      	adds	r3, #12
 800810e:	7812      	ldrb	r2, [r2, #0]
 8008110:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008116:	1c5a      	adds	r2, r3, #1
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008120:	b29b      	uxth	r3, r3
 8008122:	3b01      	subs	r3, #1
 8008124:	b29a      	uxth	r2, r3
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	86da      	strh	r2, [r3, #54]	; 0x36
 800812a:	e011      	b.n	8008150 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800812c:	f7fc ff3c 	bl	8004fa8 <HAL_GetTick>
 8008130:	4602      	mov	r2, r0
 8008132:	69bb      	ldr	r3, [r7, #24]
 8008134:	1ad3      	subs	r3, r2, r3
 8008136:	683a      	ldr	r2, [r7, #0]
 8008138:	429a      	cmp	r2, r3
 800813a:	d803      	bhi.n	8008144 <HAL_SPI_Transmit+0x204>
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008142:	d102      	bne.n	800814a <HAL_SPI_Transmit+0x20a>
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d102      	bne.n	8008150 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800814a:	2303      	movs	r3, #3
 800814c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800814e:	e026      	b.n	800819e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008154:	b29b      	uxth	r3, r3
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1cd      	bne.n	80080f6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800815a:	69ba      	ldr	r2, [r7, #24]
 800815c:	6839      	ldr	r1, [r7, #0]
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f000 fa62 	bl	8008628 <SPI_EndRxTxTransaction>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d002      	beq.n	8008170 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2220      	movs	r2, #32
 800816e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d10a      	bne.n	800818e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008178:	2300      	movs	r3, #0
 800817a:	613b      	str	r3, [r7, #16]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	613b      	str	r3, [r7, #16]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	613b      	str	r3, [r7, #16]
 800818c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008192:	2b00      	cmp	r3, #0
 8008194:	d002      	beq.n	800819c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	77fb      	strb	r3, [r7, #31]
 800819a:	e000      	b.n	800819e <HAL_SPI_Transmit+0x25e>
  }

error:
 800819c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2201      	movs	r2, #1
 80081a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80081ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3720      	adds	r7, #32
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b08c      	sub	sp, #48	; 0x30
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	607a      	str	r2, [r7, #4]
 80081c4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80081c6:	2301      	movs	r3, #1
 80081c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80081ca:	2300      	movs	r3, #0
 80081cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d101      	bne.n	80081de <HAL_SPI_TransmitReceive+0x26>
 80081da:	2302      	movs	r3, #2
 80081dc:	e18a      	b.n	80084f4 <HAL_SPI_TransmitReceive+0x33c>
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2201      	movs	r2, #1
 80081e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80081e6:	f7fc fedf 	bl	8004fa8 <HAL_GetTick>
 80081ea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80081f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80081fc:	887b      	ldrh	r3, [r7, #2]
 80081fe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008200:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008204:	2b01      	cmp	r3, #1
 8008206:	d00f      	beq.n	8008228 <HAL_SPI_TransmitReceive+0x70>
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800820e:	d107      	bne.n	8008220 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d103      	bne.n	8008220 <HAL_SPI_TransmitReceive+0x68>
 8008218:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800821c:	2b04      	cmp	r3, #4
 800821e:	d003      	beq.n	8008228 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008220:	2302      	movs	r3, #2
 8008222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008226:	e15b      	b.n	80084e0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d005      	beq.n	800823a <HAL_SPI_TransmitReceive+0x82>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d002      	beq.n	800823a <HAL_SPI_TransmitReceive+0x82>
 8008234:	887b      	ldrh	r3, [r7, #2]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d103      	bne.n	8008242 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008240:	e14e      	b.n	80084e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008248:	b2db      	uxtb	r3, r3
 800824a:	2b04      	cmp	r3, #4
 800824c:	d003      	beq.n	8008256 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2205      	movs	r2, #5
 8008252:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2200      	movs	r2, #0
 800825a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	887a      	ldrh	r2, [r7, #2]
 8008266:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	887a      	ldrh	r2, [r7, #2]
 800826c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	68ba      	ldr	r2, [r7, #8]
 8008272:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	887a      	ldrh	r2, [r7, #2]
 8008278:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	887a      	ldrh	r2, [r7, #2]
 800827e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2200      	movs	r2, #0
 800828a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008296:	2b40      	cmp	r3, #64	; 0x40
 8008298:	d007      	beq.n	80082aa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082b2:	d178      	bne.n	80083a6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d002      	beq.n	80082c2 <HAL_SPI_TransmitReceive+0x10a>
 80082bc:	8b7b      	ldrh	r3, [r7, #26]
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d166      	bne.n	8008390 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c6:	881a      	ldrh	r2, [r3, #0]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d2:	1c9a      	adds	r2, r3, #2
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082dc:	b29b      	uxth	r3, r3
 80082de:	3b01      	subs	r3, #1
 80082e0:	b29a      	uxth	r2, r3
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80082e6:	e053      	b.n	8008390 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	f003 0302 	and.w	r3, r3, #2
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	d11b      	bne.n	800832e <HAL_SPI_TransmitReceive+0x176>
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d016      	beq.n	800832e <HAL_SPI_TransmitReceive+0x176>
 8008300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008302:	2b01      	cmp	r3, #1
 8008304:	d113      	bne.n	800832e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800830a:	881a      	ldrh	r2, [r3, #0]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008316:	1c9a      	adds	r2, r3, #2
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008320:	b29b      	uxth	r3, r3
 8008322:	3b01      	subs	r3, #1
 8008324:	b29a      	uxth	r2, r3
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800832a:	2300      	movs	r3, #0
 800832c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	f003 0301 	and.w	r3, r3, #1
 8008338:	2b01      	cmp	r3, #1
 800833a:	d119      	bne.n	8008370 <HAL_SPI_TransmitReceive+0x1b8>
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008340:	b29b      	uxth	r3, r3
 8008342:	2b00      	cmp	r3, #0
 8008344:	d014      	beq.n	8008370 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	68da      	ldr	r2, [r3, #12]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008350:	b292      	uxth	r2, r2
 8008352:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008358:	1c9a      	adds	r2, r3, #2
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008362:	b29b      	uxth	r3, r3
 8008364:	3b01      	subs	r3, #1
 8008366:	b29a      	uxth	r2, r3
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800836c:	2301      	movs	r3, #1
 800836e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008370:	f7fc fe1a 	bl	8004fa8 <HAL_GetTick>
 8008374:	4602      	mov	r2, r0
 8008376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800837c:	429a      	cmp	r2, r3
 800837e:	d807      	bhi.n	8008390 <HAL_SPI_TransmitReceive+0x1d8>
 8008380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008382:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008386:	d003      	beq.n	8008390 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008388:	2303      	movs	r3, #3
 800838a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800838e:	e0a7      	b.n	80084e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008394:	b29b      	uxth	r3, r3
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1a6      	bne.n	80082e8 <HAL_SPI_TransmitReceive+0x130>
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800839e:	b29b      	uxth	r3, r3
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d1a1      	bne.n	80082e8 <HAL_SPI_TransmitReceive+0x130>
 80083a4:	e07c      	b.n	80084a0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d002      	beq.n	80083b4 <HAL_SPI_TransmitReceive+0x1fc>
 80083ae:	8b7b      	ldrh	r3, [r7, #26]
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d16b      	bne.n	800848c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	330c      	adds	r3, #12
 80083be:	7812      	ldrb	r2, [r2, #0]
 80083c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083c6:	1c5a      	adds	r2, r3, #1
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	3b01      	subs	r3, #1
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083da:	e057      	b.n	800848c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	f003 0302 	and.w	r3, r3, #2
 80083e6:	2b02      	cmp	r3, #2
 80083e8:	d11c      	bne.n	8008424 <HAL_SPI_TransmitReceive+0x26c>
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d017      	beq.n	8008424 <HAL_SPI_TransmitReceive+0x26c>
 80083f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d114      	bne.n	8008424 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	330c      	adds	r3, #12
 8008404:	7812      	ldrb	r2, [r2, #0]
 8008406:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800840c:	1c5a      	adds	r2, r3, #1
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008416:	b29b      	uxth	r3, r3
 8008418:	3b01      	subs	r3, #1
 800841a:	b29a      	uxth	r2, r3
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008420:	2300      	movs	r3, #0
 8008422:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	f003 0301 	and.w	r3, r3, #1
 800842e:	2b01      	cmp	r3, #1
 8008430:	d119      	bne.n	8008466 <HAL_SPI_TransmitReceive+0x2ae>
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008436:	b29b      	uxth	r3, r3
 8008438:	2b00      	cmp	r3, #0
 800843a:	d014      	beq.n	8008466 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	68da      	ldr	r2, [r3, #12]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008446:	b2d2      	uxtb	r2, r2
 8008448:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844e:	1c5a      	adds	r2, r3, #1
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008458:	b29b      	uxth	r3, r3
 800845a:	3b01      	subs	r3, #1
 800845c:	b29a      	uxth	r2, r3
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008462:	2301      	movs	r3, #1
 8008464:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008466:	f7fc fd9f 	bl	8004fa8 <HAL_GetTick>
 800846a:	4602      	mov	r2, r0
 800846c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846e:	1ad3      	subs	r3, r2, r3
 8008470:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008472:	429a      	cmp	r2, r3
 8008474:	d803      	bhi.n	800847e <HAL_SPI_TransmitReceive+0x2c6>
 8008476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008478:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800847c:	d102      	bne.n	8008484 <HAL_SPI_TransmitReceive+0x2cc>
 800847e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008480:	2b00      	cmp	r3, #0
 8008482:	d103      	bne.n	800848c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008484:	2303      	movs	r3, #3
 8008486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800848a:	e029      	b.n	80084e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008490:	b29b      	uxth	r3, r3
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1a2      	bne.n	80083dc <HAL_SPI_TransmitReceive+0x224>
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800849a:	b29b      	uxth	r3, r3
 800849c:	2b00      	cmp	r3, #0
 800849e:	d19d      	bne.n	80083dc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80084a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	f000 f8bf 	bl	8008628 <SPI_EndRxTxTransaction>
 80084aa:	4603      	mov	r3, r0
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d006      	beq.n	80084be <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2220      	movs	r2, #32
 80084ba:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80084bc:	e010      	b.n	80084e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d10b      	bne.n	80084de <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80084c6:	2300      	movs	r3, #0
 80084c8:	617b      	str	r3, [r7, #20]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	617b      	str	r3, [r7, #20]
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	617b      	str	r3, [r7, #20]
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	e000      	b.n	80084e0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80084de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80084f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3730      	adds	r7, #48	; 0x30
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800850a:	b2db      	uxtb	r3, r3
}
 800850c:	4618      	mov	r0, r3
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b088      	sub	sp, #32
 800851c:	af00      	add	r7, sp, #0
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	603b      	str	r3, [r7, #0]
 8008524:	4613      	mov	r3, r2
 8008526:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008528:	f7fc fd3e 	bl	8004fa8 <HAL_GetTick>
 800852c:	4602      	mov	r2, r0
 800852e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008530:	1a9b      	subs	r3, r3, r2
 8008532:	683a      	ldr	r2, [r7, #0]
 8008534:	4413      	add	r3, r2
 8008536:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008538:	f7fc fd36 	bl	8004fa8 <HAL_GetTick>
 800853c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800853e:	4b39      	ldr	r3, [pc, #228]	; (8008624 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	015b      	lsls	r3, r3, #5
 8008544:	0d1b      	lsrs	r3, r3, #20
 8008546:	69fa      	ldr	r2, [r7, #28]
 8008548:	fb02 f303 	mul.w	r3, r2, r3
 800854c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800854e:	e054      	b.n	80085fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008556:	d050      	beq.n	80085fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008558:	f7fc fd26 	bl	8004fa8 <HAL_GetTick>
 800855c:	4602      	mov	r2, r0
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	69fa      	ldr	r2, [r7, #28]
 8008564:	429a      	cmp	r2, r3
 8008566:	d902      	bls.n	800856e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d13d      	bne.n	80085ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	685a      	ldr	r2, [r3, #4]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800857c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008586:	d111      	bne.n	80085ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008590:	d004      	beq.n	800859c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800859a:	d107      	bne.n	80085ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085b4:	d10f      	bne.n	80085d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80085c4:	601a      	str	r2, [r3, #0]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80085d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2201      	movs	r2, #1
 80085da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2200      	movs	r2, #0
 80085e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80085e6:	2303      	movs	r3, #3
 80085e8:	e017      	b.n	800861a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d101      	bne.n	80085f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80085f0:	2300      	movs	r3, #0
 80085f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	3b01      	subs	r3, #1
 80085f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	689a      	ldr	r2, [r3, #8]
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	4013      	ands	r3, r2
 8008604:	68ba      	ldr	r2, [r7, #8]
 8008606:	429a      	cmp	r2, r3
 8008608:	bf0c      	ite	eq
 800860a:	2301      	moveq	r3, #1
 800860c:	2300      	movne	r3, #0
 800860e:	b2db      	uxtb	r3, r3
 8008610:	461a      	mov	r2, r3
 8008612:	79fb      	ldrb	r3, [r7, #7]
 8008614:	429a      	cmp	r2, r3
 8008616:	d19b      	bne.n	8008550 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008618:	2300      	movs	r3, #0
}
 800861a:	4618      	mov	r0, r3
 800861c:	3720      	adds	r7, #32
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	20000158 	.word	0x20000158

08008628 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b088      	sub	sp, #32
 800862c:	af02      	add	r7, sp, #8
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008634:	4b1b      	ldr	r3, [pc, #108]	; (80086a4 <SPI_EndRxTxTransaction+0x7c>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a1b      	ldr	r2, [pc, #108]	; (80086a8 <SPI_EndRxTxTransaction+0x80>)
 800863a:	fba2 2303 	umull	r2, r3, r2, r3
 800863e:	0d5b      	lsrs	r3, r3, #21
 8008640:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008644:	fb02 f303 	mul.w	r3, r2, r3
 8008648:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008652:	d112      	bne.n	800867a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	9300      	str	r3, [sp, #0]
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	2200      	movs	r2, #0
 800865c:	2180      	movs	r1, #128	; 0x80
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f7ff ff5a 	bl	8008518 <SPI_WaitFlagStateUntilTimeout>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d016      	beq.n	8008698 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800866e:	f043 0220 	orr.w	r2, r3, #32
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008676:	2303      	movs	r3, #3
 8008678:	e00f      	b.n	800869a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d00a      	beq.n	8008696 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	3b01      	subs	r3, #1
 8008684:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008690:	2b80      	cmp	r3, #128	; 0x80
 8008692:	d0f2      	beq.n	800867a <SPI_EndRxTxTransaction+0x52>
 8008694:	e000      	b.n	8008698 <SPI_EndRxTxTransaction+0x70>
        break;
 8008696:	bf00      	nop
  }

  return HAL_OK;
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	3718      	adds	r7, #24
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	20000158 	.word	0x20000158
 80086a8:	165e9f81 	.word	0x165e9f81

080086ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d101      	bne.n	80086be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	e03f      	b.n	800873e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d106      	bne.n	80086d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f7fc fa78 	bl	8004bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2224      	movs	r2, #36	; 0x24
 80086dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	68da      	ldr	r2, [r3, #12]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80086ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 f9cb 	bl	8008a8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	691a      	ldr	r2, [r3, #16]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008704:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	695a      	ldr	r2, [r3, #20]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008714:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	68da      	ldr	r2, [r3, #12]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008724:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2220      	movs	r2, #32
 8008730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2220      	movs	r2, #32
 8008738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	3708      	adds	r7, #8
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}

08008746 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008746:	b580      	push	{r7, lr}
 8008748:	b08a      	sub	sp, #40	; 0x28
 800874a:	af02      	add	r7, sp, #8
 800874c:	60f8      	str	r0, [r7, #12]
 800874e:	60b9      	str	r1, [r7, #8]
 8008750:	603b      	str	r3, [r7, #0]
 8008752:	4613      	mov	r3, r2
 8008754:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008756:	2300      	movs	r3, #0
 8008758:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008760:	b2db      	uxtb	r3, r3
 8008762:	2b20      	cmp	r3, #32
 8008764:	d17c      	bne.n	8008860 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d002      	beq.n	8008772 <HAL_UART_Transmit+0x2c>
 800876c:	88fb      	ldrh	r3, [r7, #6]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d101      	bne.n	8008776 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	e075      	b.n	8008862 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800877c:	2b01      	cmp	r3, #1
 800877e:	d101      	bne.n	8008784 <HAL_UART_Transmit+0x3e>
 8008780:	2302      	movs	r3, #2
 8008782:	e06e      	b.n	8008862 <HAL_UART_Transmit+0x11c>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2200      	movs	r2, #0
 8008790:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2221      	movs	r2, #33	; 0x21
 8008796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800879a:	f7fc fc05 	bl	8004fa8 <HAL_GetTick>
 800879e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	88fa      	ldrh	r2, [r7, #6]
 80087a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	88fa      	ldrh	r2, [r7, #6]
 80087aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087b4:	d108      	bne.n	80087c8 <HAL_UART_Transmit+0x82>
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	691b      	ldr	r3, [r3, #16]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d104      	bne.n	80087c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80087be:	2300      	movs	r3, #0
 80087c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	61bb      	str	r3, [r7, #24]
 80087c6:	e003      	b.n	80087d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80087cc:	2300      	movs	r3, #0
 80087ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80087d8:	e02a      	b.n	8008830 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	9300      	str	r3, [sp, #0]
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	2200      	movs	r2, #0
 80087e2:	2180      	movs	r1, #128	; 0x80
 80087e4:	68f8      	ldr	r0, [r7, #12]
 80087e6:	f000 f8e2 	bl	80089ae <UART_WaitOnFlagUntilTimeout>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d001      	beq.n	80087f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80087f0:	2303      	movs	r3, #3
 80087f2:	e036      	b.n	8008862 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d10b      	bne.n	8008812 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	881b      	ldrh	r3, [r3, #0]
 80087fe:	461a      	mov	r2, r3
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008808:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800880a:	69bb      	ldr	r3, [r7, #24]
 800880c:	3302      	adds	r3, #2
 800880e:	61bb      	str	r3, [r7, #24]
 8008810:	e007      	b.n	8008822 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008812:	69fb      	ldr	r3, [r7, #28]
 8008814:	781a      	ldrb	r2, [r3, #0]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	3301      	adds	r3, #1
 8008820:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008826:	b29b      	uxth	r3, r3
 8008828:	3b01      	subs	r3, #1
 800882a:	b29a      	uxth	r2, r3
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008834:	b29b      	uxth	r3, r3
 8008836:	2b00      	cmp	r3, #0
 8008838:	d1cf      	bne.n	80087da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	9300      	str	r3, [sp, #0]
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	2200      	movs	r2, #0
 8008842:	2140      	movs	r1, #64	; 0x40
 8008844:	68f8      	ldr	r0, [r7, #12]
 8008846:	f000 f8b2 	bl	80089ae <UART_WaitOnFlagUntilTimeout>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d001      	beq.n	8008854 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008850:	2303      	movs	r3, #3
 8008852:	e006      	b.n	8008862 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2220      	movs	r2, #32
 8008858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800885c:	2300      	movs	r3, #0
 800885e:	e000      	b.n	8008862 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008860:	2302      	movs	r3, #2
  }
}
 8008862:	4618      	mov	r0, r3
 8008864:	3720      	adds	r7, #32
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b08a      	sub	sp, #40	; 0x28
 800886e:	af02      	add	r7, sp, #8
 8008870:	60f8      	str	r0, [r7, #12]
 8008872:	60b9      	str	r1, [r7, #8]
 8008874:	603b      	str	r3, [r7, #0]
 8008876:	4613      	mov	r3, r2
 8008878:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800887a:	2300      	movs	r3, #0
 800887c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008884:	b2db      	uxtb	r3, r3
 8008886:	2b20      	cmp	r3, #32
 8008888:	f040 808c 	bne.w	80089a4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d002      	beq.n	8008898 <HAL_UART_Receive+0x2e>
 8008892:	88fb      	ldrh	r3, [r7, #6]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d101      	bne.n	800889c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	e084      	b.n	80089a6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d101      	bne.n	80088aa <HAL_UART_Receive+0x40>
 80088a6:	2302      	movs	r3, #2
 80088a8:	e07d      	b.n	80089a6 <HAL_UART_Receive+0x13c>
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2201      	movs	r2, #1
 80088ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2200      	movs	r2, #0
 80088b6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2222      	movs	r2, #34	; 0x22
 80088bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2200      	movs	r2, #0
 80088c4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80088c6:	f7fc fb6f 	bl	8004fa8 <HAL_GetTick>
 80088ca:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	88fa      	ldrh	r2, [r7, #6]
 80088d0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	88fa      	ldrh	r2, [r7, #6]
 80088d6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088e0:	d108      	bne.n	80088f4 <HAL_UART_Receive+0x8a>
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d104      	bne.n	80088f4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80088ea:	2300      	movs	r3, #0
 80088ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	61bb      	str	r3, [r7, #24]
 80088f2:	e003      	b.n	80088fc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80088f8:	2300      	movs	r3, #0
 80088fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2200      	movs	r2, #0
 8008900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008904:	e043      	b.n	800898e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	9300      	str	r3, [sp, #0]
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	2200      	movs	r2, #0
 800890e:	2120      	movs	r1, #32
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f000 f84c 	bl	80089ae <UART_WaitOnFlagUntilTimeout>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d001      	beq.n	8008920 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800891c:	2303      	movs	r3, #3
 800891e:	e042      	b.n	80089a6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8008920:	69fb      	ldr	r3, [r7, #28]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d10c      	bne.n	8008940 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	b29b      	uxth	r3, r3
 800892e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008932:	b29a      	uxth	r2, r3
 8008934:	69bb      	ldr	r3, [r7, #24]
 8008936:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	3302      	adds	r3, #2
 800893c:	61bb      	str	r3, [r7, #24]
 800893e:	e01f      	b.n	8008980 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008948:	d007      	beq.n	800895a <HAL_UART_Receive+0xf0>
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d10a      	bne.n	8008968 <HAL_UART_Receive+0xfe>
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	691b      	ldr	r3, [r3, #16]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d106      	bne.n	8008968 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	b2da      	uxtb	r2, r3
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	701a      	strb	r2, [r3, #0]
 8008966:	e008      	b.n	800897a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	b2db      	uxtb	r3, r3
 8008970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008974:	b2da      	uxtb	r2, r3
 8008976:	69fb      	ldr	r3, [r7, #28]
 8008978:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	3301      	adds	r3, #1
 800897e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008984:	b29b      	uxth	r3, r3
 8008986:	3b01      	subs	r3, #1
 8008988:	b29a      	uxth	r2, r3
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008992:	b29b      	uxth	r3, r3
 8008994:	2b00      	cmp	r3, #0
 8008996:	d1b6      	bne.n	8008906 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2220      	movs	r2, #32
 800899c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80089a0:	2300      	movs	r3, #0
 80089a2:	e000      	b.n	80089a6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80089a4:	2302      	movs	r3, #2
  }
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3720      	adds	r7, #32
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b090      	sub	sp, #64	; 0x40
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	60f8      	str	r0, [r7, #12]
 80089b6:	60b9      	str	r1, [r7, #8]
 80089b8:	603b      	str	r3, [r7, #0]
 80089ba:	4613      	mov	r3, r2
 80089bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089be:	e050      	b.n	8008a62 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089c6:	d04c      	beq.n	8008a62 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80089c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d007      	beq.n	80089de <UART_WaitOnFlagUntilTimeout+0x30>
 80089ce:	f7fc faeb 	bl	8004fa8 <HAL_GetTick>
 80089d2:	4602      	mov	r2, r0
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	1ad3      	subs	r3, r2, r3
 80089d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089da:	429a      	cmp	r2, r3
 80089dc:	d241      	bcs.n	8008a62 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	330c      	adds	r3, #12
 80089e4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e8:	e853 3f00 	ldrex	r3, [r3]
 80089ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80089f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	330c      	adds	r3, #12
 80089fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80089fe:	637a      	str	r2, [r7, #52]	; 0x34
 8008a00:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008a04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a06:	e841 2300 	strex	r3, r2, [r1]
 8008a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d1e5      	bne.n	80089de <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	3314      	adds	r3, #20
 8008a18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	e853 3f00 	ldrex	r3, [r3]
 8008a20:	613b      	str	r3, [r7, #16]
   return(result);
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	f023 0301 	bic.w	r3, r3, #1
 8008a28:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	3314      	adds	r3, #20
 8008a30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a32:	623a      	str	r2, [r7, #32]
 8008a34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a36:	69f9      	ldr	r1, [r7, #28]
 8008a38:	6a3a      	ldr	r2, [r7, #32]
 8008a3a:	e841 2300 	strex	r3, r2, [r1]
 8008a3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a40:	69bb      	ldr	r3, [r7, #24]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1e5      	bne.n	8008a12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2220      	movs	r2, #32
 8008a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2220      	movs	r2, #32
 8008a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008a5e:	2303      	movs	r3, #3
 8008a60:	e00f      	b.n	8008a82 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	68ba      	ldr	r2, [r7, #8]
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	bf0c      	ite	eq
 8008a72:	2301      	moveq	r3, #1
 8008a74:	2300      	movne	r3, #0
 8008a76:	b2db      	uxtb	r3, r3
 8008a78:	461a      	mov	r2, r3
 8008a7a:	79fb      	ldrb	r3, [r7, #7]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d09f      	beq.n	80089c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3740      	adds	r7, #64	; 0x40
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
	...

08008a8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a90:	b0c0      	sub	sp, #256	; 0x100
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	691b      	ldr	r3, [r3, #16]
 8008aa0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aa8:	68d9      	ldr	r1, [r3, #12]
 8008aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	ea40 0301 	orr.w	r3, r0, r1
 8008ab4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aba:	689a      	ldr	r2, [r3, #8]
 8008abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ac0:	691b      	ldr	r3, [r3, #16]
 8008ac2:	431a      	orrs	r2, r3
 8008ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ac8:	695b      	ldr	r3, [r3, #20]
 8008aca:	431a      	orrs	r2, r3
 8008acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ad0:	69db      	ldr	r3, [r3, #28]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008ae4:	f021 010c 	bic.w	r1, r1, #12
 8008ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008af2:	430b      	orrs	r3, r1
 8008af4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	695b      	ldr	r3, [r3, #20]
 8008afe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b06:	6999      	ldr	r1, [r3, #24]
 8008b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	ea40 0301 	orr.w	r3, r0, r1
 8008b12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	4b8f      	ldr	r3, [pc, #572]	; (8008d58 <UART_SetConfig+0x2cc>)
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d005      	beq.n	8008b2c <UART_SetConfig+0xa0>
 8008b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	4b8d      	ldr	r3, [pc, #564]	; (8008d5c <UART_SetConfig+0x2d0>)
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d104      	bne.n	8008b36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b2c:	f7fe fd4e 	bl	80075cc <HAL_RCC_GetPCLK2Freq>
 8008b30:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008b34:	e003      	b.n	8008b3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b36:	f7fe fd35 	bl	80075a4 <HAL_RCC_GetPCLK1Freq>
 8008b3a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b42:	69db      	ldr	r3, [r3, #28]
 8008b44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b48:	f040 810c 	bne.w	8008d64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b50:	2200      	movs	r2, #0
 8008b52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008b56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008b5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008b5e:	4622      	mov	r2, r4
 8008b60:	462b      	mov	r3, r5
 8008b62:	1891      	adds	r1, r2, r2
 8008b64:	65b9      	str	r1, [r7, #88]	; 0x58
 8008b66:	415b      	adcs	r3, r3
 8008b68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008b6e:	4621      	mov	r1, r4
 8008b70:	eb12 0801 	adds.w	r8, r2, r1
 8008b74:	4629      	mov	r1, r5
 8008b76:	eb43 0901 	adc.w	r9, r3, r1
 8008b7a:	f04f 0200 	mov.w	r2, #0
 8008b7e:	f04f 0300 	mov.w	r3, #0
 8008b82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008b86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008b8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008b8e:	4690      	mov	r8, r2
 8008b90:	4699      	mov	r9, r3
 8008b92:	4623      	mov	r3, r4
 8008b94:	eb18 0303 	adds.w	r3, r8, r3
 8008b98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008b9c:	462b      	mov	r3, r5
 8008b9e:	eb49 0303 	adc.w	r3, r9, r3
 8008ba2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008bb2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008bb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008bba:	460b      	mov	r3, r1
 8008bbc:	18db      	adds	r3, r3, r3
 8008bbe:	653b      	str	r3, [r7, #80]	; 0x50
 8008bc0:	4613      	mov	r3, r2
 8008bc2:	eb42 0303 	adc.w	r3, r2, r3
 8008bc6:	657b      	str	r3, [r7, #84]	; 0x54
 8008bc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008bcc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008bd0:	f7f8 f86a 	bl	8000ca8 <__aeabi_uldivmod>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	460b      	mov	r3, r1
 8008bd8:	4b61      	ldr	r3, [pc, #388]	; (8008d60 <UART_SetConfig+0x2d4>)
 8008bda:	fba3 2302 	umull	r2, r3, r3, r2
 8008bde:	095b      	lsrs	r3, r3, #5
 8008be0:	011c      	lsls	r4, r3, #4
 8008be2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008be6:	2200      	movs	r2, #0
 8008be8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008bec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008bf0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008bf4:	4642      	mov	r2, r8
 8008bf6:	464b      	mov	r3, r9
 8008bf8:	1891      	adds	r1, r2, r2
 8008bfa:	64b9      	str	r1, [r7, #72]	; 0x48
 8008bfc:	415b      	adcs	r3, r3
 8008bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008c04:	4641      	mov	r1, r8
 8008c06:	eb12 0a01 	adds.w	sl, r2, r1
 8008c0a:	4649      	mov	r1, r9
 8008c0c:	eb43 0b01 	adc.w	fp, r3, r1
 8008c10:	f04f 0200 	mov.w	r2, #0
 8008c14:	f04f 0300 	mov.w	r3, #0
 8008c18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008c1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008c20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c24:	4692      	mov	sl, r2
 8008c26:	469b      	mov	fp, r3
 8008c28:	4643      	mov	r3, r8
 8008c2a:	eb1a 0303 	adds.w	r3, sl, r3
 8008c2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c32:	464b      	mov	r3, r9
 8008c34:	eb4b 0303 	adc.w	r3, fp, r3
 8008c38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c48:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008c4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008c50:	460b      	mov	r3, r1
 8008c52:	18db      	adds	r3, r3, r3
 8008c54:	643b      	str	r3, [r7, #64]	; 0x40
 8008c56:	4613      	mov	r3, r2
 8008c58:	eb42 0303 	adc.w	r3, r2, r3
 8008c5c:	647b      	str	r3, [r7, #68]	; 0x44
 8008c5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008c62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008c66:	f7f8 f81f 	bl	8000ca8 <__aeabi_uldivmod>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	4611      	mov	r1, r2
 8008c70:	4b3b      	ldr	r3, [pc, #236]	; (8008d60 <UART_SetConfig+0x2d4>)
 8008c72:	fba3 2301 	umull	r2, r3, r3, r1
 8008c76:	095b      	lsrs	r3, r3, #5
 8008c78:	2264      	movs	r2, #100	; 0x64
 8008c7a:	fb02 f303 	mul.w	r3, r2, r3
 8008c7e:	1acb      	subs	r3, r1, r3
 8008c80:	00db      	lsls	r3, r3, #3
 8008c82:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008c86:	4b36      	ldr	r3, [pc, #216]	; (8008d60 <UART_SetConfig+0x2d4>)
 8008c88:	fba3 2302 	umull	r2, r3, r3, r2
 8008c8c:	095b      	lsrs	r3, r3, #5
 8008c8e:	005b      	lsls	r3, r3, #1
 8008c90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008c94:	441c      	add	r4, r3
 8008c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ca0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008ca4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008ca8:	4642      	mov	r2, r8
 8008caa:	464b      	mov	r3, r9
 8008cac:	1891      	adds	r1, r2, r2
 8008cae:	63b9      	str	r1, [r7, #56]	; 0x38
 8008cb0:	415b      	adcs	r3, r3
 8008cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008cb8:	4641      	mov	r1, r8
 8008cba:	1851      	adds	r1, r2, r1
 8008cbc:	6339      	str	r1, [r7, #48]	; 0x30
 8008cbe:	4649      	mov	r1, r9
 8008cc0:	414b      	adcs	r3, r1
 8008cc2:	637b      	str	r3, [r7, #52]	; 0x34
 8008cc4:	f04f 0200 	mov.w	r2, #0
 8008cc8:	f04f 0300 	mov.w	r3, #0
 8008ccc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008cd0:	4659      	mov	r1, fp
 8008cd2:	00cb      	lsls	r3, r1, #3
 8008cd4:	4651      	mov	r1, sl
 8008cd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008cda:	4651      	mov	r1, sl
 8008cdc:	00ca      	lsls	r2, r1, #3
 8008cde:	4610      	mov	r0, r2
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	4642      	mov	r2, r8
 8008ce6:	189b      	adds	r3, r3, r2
 8008ce8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008cec:	464b      	mov	r3, r9
 8008cee:	460a      	mov	r2, r1
 8008cf0:	eb42 0303 	adc.w	r3, r2, r3
 8008cf4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008d04:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008d08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	18db      	adds	r3, r3, r3
 8008d10:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d12:	4613      	mov	r3, r2
 8008d14:	eb42 0303 	adc.w	r3, r2, r3
 8008d18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008d22:	f7f7 ffc1 	bl	8000ca8 <__aeabi_uldivmod>
 8008d26:	4602      	mov	r2, r0
 8008d28:	460b      	mov	r3, r1
 8008d2a:	4b0d      	ldr	r3, [pc, #52]	; (8008d60 <UART_SetConfig+0x2d4>)
 8008d2c:	fba3 1302 	umull	r1, r3, r3, r2
 8008d30:	095b      	lsrs	r3, r3, #5
 8008d32:	2164      	movs	r1, #100	; 0x64
 8008d34:	fb01 f303 	mul.w	r3, r1, r3
 8008d38:	1ad3      	subs	r3, r2, r3
 8008d3a:	00db      	lsls	r3, r3, #3
 8008d3c:	3332      	adds	r3, #50	; 0x32
 8008d3e:	4a08      	ldr	r2, [pc, #32]	; (8008d60 <UART_SetConfig+0x2d4>)
 8008d40:	fba2 2303 	umull	r2, r3, r2, r3
 8008d44:	095b      	lsrs	r3, r3, #5
 8008d46:	f003 0207 	and.w	r2, r3, #7
 8008d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4422      	add	r2, r4
 8008d52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008d54:	e105      	b.n	8008f62 <UART_SetConfig+0x4d6>
 8008d56:	bf00      	nop
 8008d58:	40011000 	.word	0x40011000
 8008d5c:	40011400 	.word	0x40011400
 8008d60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008d6e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008d72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008d76:	4642      	mov	r2, r8
 8008d78:	464b      	mov	r3, r9
 8008d7a:	1891      	adds	r1, r2, r2
 8008d7c:	6239      	str	r1, [r7, #32]
 8008d7e:	415b      	adcs	r3, r3
 8008d80:	627b      	str	r3, [r7, #36]	; 0x24
 8008d82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008d86:	4641      	mov	r1, r8
 8008d88:	1854      	adds	r4, r2, r1
 8008d8a:	4649      	mov	r1, r9
 8008d8c:	eb43 0501 	adc.w	r5, r3, r1
 8008d90:	f04f 0200 	mov.w	r2, #0
 8008d94:	f04f 0300 	mov.w	r3, #0
 8008d98:	00eb      	lsls	r3, r5, #3
 8008d9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d9e:	00e2      	lsls	r2, r4, #3
 8008da0:	4614      	mov	r4, r2
 8008da2:	461d      	mov	r5, r3
 8008da4:	4643      	mov	r3, r8
 8008da6:	18e3      	adds	r3, r4, r3
 8008da8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008dac:	464b      	mov	r3, r9
 8008dae:	eb45 0303 	adc.w	r3, r5, r3
 8008db2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008dc2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008dc6:	f04f 0200 	mov.w	r2, #0
 8008dca:	f04f 0300 	mov.w	r3, #0
 8008dce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008dd2:	4629      	mov	r1, r5
 8008dd4:	008b      	lsls	r3, r1, #2
 8008dd6:	4621      	mov	r1, r4
 8008dd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ddc:	4621      	mov	r1, r4
 8008dde:	008a      	lsls	r2, r1, #2
 8008de0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008de4:	f7f7 ff60 	bl	8000ca8 <__aeabi_uldivmod>
 8008de8:	4602      	mov	r2, r0
 8008dea:	460b      	mov	r3, r1
 8008dec:	4b60      	ldr	r3, [pc, #384]	; (8008f70 <UART_SetConfig+0x4e4>)
 8008dee:	fba3 2302 	umull	r2, r3, r3, r2
 8008df2:	095b      	lsrs	r3, r3, #5
 8008df4:	011c      	lsls	r4, r3, #4
 8008df6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008e00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008e04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008e08:	4642      	mov	r2, r8
 8008e0a:	464b      	mov	r3, r9
 8008e0c:	1891      	adds	r1, r2, r2
 8008e0e:	61b9      	str	r1, [r7, #24]
 8008e10:	415b      	adcs	r3, r3
 8008e12:	61fb      	str	r3, [r7, #28]
 8008e14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e18:	4641      	mov	r1, r8
 8008e1a:	1851      	adds	r1, r2, r1
 8008e1c:	6139      	str	r1, [r7, #16]
 8008e1e:	4649      	mov	r1, r9
 8008e20:	414b      	adcs	r3, r1
 8008e22:	617b      	str	r3, [r7, #20]
 8008e24:	f04f 0200 	mov.w	r2, #0
 8008e28:	f04f 0300 	mov.w	r3, #0
 8008e2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008e30:	4659      	mov	r1, fp
 8008e32:	00cb      	lsls	r3, r1, #3
 8008e34:	4651      	mov	r1, sl
 8008e36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e3a:	4651      	mov	r1, sl
 8008e3c:	00ca      	lsls	r2, r1, #3
 8008e3e:	4610      	mov	r0, r2
 8008e40:	4619      	mov	r1, r3
 8008e42:	4603      	mov	r3, r0
 8008e44:	4642      	mov	r2, r8
 8008e46:	189b      	adds	r3, r3, r2
 8008e48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e4c:	464b      	mov	r3, r9
 8008e4e:	460a      	mov	r2, r1
 8008e50:	eb42 0303 	adc.w	r3, r2, r3
 8008e54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e62:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008e64:	f04f 0200 	mov.w	r2, #0
 8008e68:	f04f 0300 	mov.w	r3, #0
 8008e6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008e70:	4649      	mov	r1, r9
 8008e72:	008b      	lsls	r3, r1, #2
 8008e74:	4641      	mov	r1, r8
 8008e76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e7a:	4641      	mov	r1, r8
 8008e7c:	008a      	lsls	r2, r1, #2
 8008e7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008e82:	f7f7 ff11 	bl	8000ca8 <__aeabi_uldivmod>
 8008e86:	4602      	mov	r2, r0
 8008e88:	460b      	mov	r3, r1
 8008e8a:	4b39      	ldr	r3, [pc, #228]	; (8008f70 <UART_SetConfig+0x4e4>)
 8008e8c:	fba3 1302 	umull	r1, r3, r3, r2
 8008e90:	095b      	lsrs	r3, r3, #5
 8008e92:	2164      	movs	r1, #100	; 0x64
 8008e94:	fb01 f303 	mul.w	r3, r1, r3
 8008e98:	1ad3      	subs	r3, r2, r3
 8008e9a:	011b      	lsls	r3, r3, #4
 8008e9c:	3332      	adds	r3, #50	; 0x32
 8008e9e:	4a34      	ldr	r2, [pc, #208]	; (8008f70 <UART_SetConfig+0x4e4>)
 8008ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ea4:	095b      	lsrs	r3, r3, #5
 8008ea6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008eaa:	441c      	add	r4, r3
 8008eac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	673b      	str	r3, [r7, #112]	; 0x70
 8008eb4:	677a      	str	r2, [r7, #116]	; 0x74
 8008eb6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008eba:	4642      	mov	r2, r8
 8008ebc:	464b      	mov	r3, r9
 8008ebe:	1891      	adds	r1, r2, r2
 8008ec0:	60b9      	str	r1, [r7, #8]
 8008ec2:	415b      	adcs	r3, r3
 8008ec4:	60fb      	str	r3, [r7, #12]
 8008ec6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008eca:	4641      	mov	r1, r8
 8008ecc:	1851      	adds	r1, r2, r1
 8008ece:	6039      	str	r1, [r7, #0]
 8008ed0:	4649      	mov	r1, r9
 8008ed2:	414b      	adcs	r3, r1
 8008ed4:	607b      	str	r3, [r7, #4]
 8008ed6:	f04f 0200 	mov.w	r2, #0
 8008eda:	f04f 0300 	mov.w	r3, #0
 8008ede:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008ee2:	4659      	mov	r1, fp
 8008ee4:	00cb      	lsls	r3, r1, #3
 8008ee6:	4651      	mov	r1, sl
 8008ee8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008eec:	4651      	mov	r1, sl
 8008eee:	00ca      	lsls	r2, r1, #3
 8008ef0:	4610      	mov	r0, r2
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	4642      	mov	r2, r8
 8008ef8:	189b      	adds	r3, r3, r2
 8008efa:	66bb      	str	r3, [r7, #104]	; 0x68
 8008efc:	464b      	mov	r3, r9
 8008efe:	460a      	mov	r2, r1
 8008f00:	eb42 0303 	adc.w	r3, r2, r3
 8008f04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	663b      	str	r3, [r7, #96]	; 0x60
 8008f10:	667a      	str	r2, [r7, #100]	; 0x64
 8008f12:	f04f 0200 	mov.w	r2, #0
 8008f16:	f04f 0300 	mov.w	r3, #0
 8008f1a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008f1e:	4649      	mov	r1, r9
 8008f20:	008b      	lsls	r3, r1, #2
 8008f22:	4641      	mov	r1, r8
 8008f24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f28:	4641      	mov	r1, r8
 8008f2a:	008a      	lsls	r2, r1, #2
 8008f2c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008f30:	f7f7 feba 	bl	8000ca8 <__aeabi_uldivmod>
 8008f34:	4602      	mov	r2, r0
 8008f36:	460b      	mov	r3, r1
 8008f38:	4b0d      	ldr	r3, [pc, #52]	; (8008f70 <UART_SetConfig+0x4e4>)
 8008f3a:	fba3 1302 	umull	r1, r3, r3, r2
 8008f3e:	095b      	lsrs	r3, r3, #5
 8008f40:	2164      	movs	r1, #100	; 0x64
 8008f42:	fb01 f303 	mul.w	r3, r1, r3
 8008f46:	1ad3      	subs	r3, r2, r3
 8008f48:	011b      	lsls	r3, r3, #4
 8008f4a:	3332      	adds	r3, #50	; 0x32
 8008f4c:	4a08      	ldr	r2, [pc, #32]	; (8008f70 <UART_SetConfig+0x4e4>)
 8008f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f52:	095b      	lsrs	r3, r3, #5
 8008f54:	f003 020f 	and.w	r2, r3, #15
 8008f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4422      	add	r2, r4
 8008f60:	609a      	str	r2, [r3, #8]
}
 8008f62:	bf00      	nop
 8008f64:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f6e:	bf00      	nop
 8008f70:	51eb851f 	.word	0x51eb851f

08008f74 <MX_FATFS_Init>:

/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void) {
 8008f74:	b580      	push	{r7, lr}
 8008f76:	af00      	add	r7, sp, #0
    /*## FatFS: Link the USER driver ###########################*/
    retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008f78:	4904      	ldr	r1, [pc, #16]	; (8008f8c <MX_FATFS_Init+0x18>)
 8008f7a:	4805      	ldr	r0, [pc, #20]	; (8008f90 <MX_FATFS_Init+0x1c>)
 8008f7c:	f003 f92e 	bl	800c1dc <FATFS_LinkDriver>
 8008f80:	4603      	mov	r3, r0
 8008f82:	461a      	mov	r2, r3
 8008f84:	4b03      	ldr	r3, [pc, #12]	; (8008f94 <MX_FATFS_Init+0x20>)
 8008f86:	701a      	strb	r2, [r3, #0]

    /* USER CODE BEGIN Init */
    /* additional user code for init */
    /* USER CODE END Init */
}
 8008f88:	bf00      	nop
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	200023b4 	.word	0x200023b4
 8008f90:	20000164 	.word	0x20000164
 8008f94:	200023b0 	.word	0x200023b0

08008f98 <get_fattime>:
/**
 * @brief  Gets Time from RTC
 * @param  None
 * @retval Time in DWORD
 */
DWORD get_fattime(void) {
 8008f98:	b480      	push	{r7}
 8008f9a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN get_fattime */
    return 0;
 8008f9c:	2300      	movs	r3, #0
    /* USER CODE END get_fattime */
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr

08008fa8 <USER_initialize>:
 * @brief  Initializes a Drive
 * @param  pdrv: Physical drive number (0..)
 * @retval DSTATUS: Operation status
 */
DSTATUS USER_initialize(BYTE pdrv /* Physical drive nmuber to identify the drive */
) {
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	4603      	mov	r3, r0
 8008fb0:	71fb      	strb	r3, [r7, #7]
    /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8008fb2:	79fb      	ldrb	r3, [r7, #7]
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7f8 fee9 	bl	8001d8c <SD_disk_initialize>
 8008fba:	4603      	mov	r3, r0
    /* USER CODE END INIT */
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3708      	adds	r7, #8
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <USER_status>:
 * @brief  Gets Disk Status
 * @param  pdrv: Physical drive number (0..)
 * @retval DSTATUS: Operation status
 */
DSTATUS USER_status(BYTE pdrv /* Physical drive number to identify the drive */
) {
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	4603      	mov	r3, r0
 8008fcc:	71fb      	strb	r3, [r7, #7]
    /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8008fce:	79fb      	ldrb	r3, [r7, #7]
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f7f8 ffc5 	bl	8001f60 <SD_disk_status>
 8008fd6:	4603      	mov	r3, r0
    /* USER CODE END STATUS */
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3708      	adds	r7, #8
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <USER_read>:
 */
DRESULT USER_read(BYTE pdrv,    /* Physical drive nmuber to identify the drive */
                  BYTE * buff,  /* Data buffer to store read data */
                  DWORD sector, /* Sector address in LBA */
                  UINT count    /* Number of sectors to read */
) {
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	60b9      	str	r1, [r7, #8]
 8008fe8:	607a      	str	r2, [r7, #4]
 8008fea:	603b      	str	r3, [r7, #0]
 8008fec:	4603      	mov	r3, r0
 8008fee:	73fb      	strb	r3, [r7, #15]
    /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8008ff0:	7bf8      	ldrb	r0, [r7, #15]
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	68b9      	ldr	r1, [r7, #8]
 8008ff8:	f7f8 ffc8 	bl	8001f8c <SD_disk_read>
 8008ffc:	4603      	mov	r3, r0
    /* USER CODE END READ */
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <USER_write>:
#if _USE_WRITE == 1
DRESULT USER_write(BYTE pdrv,         /* Physical drive nmuber to identify the drive */
                   const BYTE * buff, /* Data to be written */
                   DWORD sector,      /* Sector address in LBA */
                   UINT count         /* Number of sectors to write */
) {
 8009006:	b580      	push	{r7, lr}
 8009008:	b084      	sub	sp, #16
 800900a:	af00      	add	r7, sp, #0
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	607a      	str	r2, [r7, #4]
 8009010:	603b      	str	r3, [r7, #0]
 8009012:	4603      	mov	r3, r0
 8009014:	73fb      	strb	r3, [r7, #15]
    /* USER CODE BEGIN WRITE */
    /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8009016:	7bf8      	ldrb	r0, [r7, #15]
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	68b9      	ldr	r1, [r7, #8]
 800901e:	f7f9 f81f 	bl	8002060 <SD_disk_write>
 8009022:	4603      	mov	r3, r0
    /* USER CODE END WRITE */
}
 8009024:	4618      	mov	r0, r3
 8009026:	3710      	adds	r7, #16
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <USER_ioctl>:
 */
#if _USE_IOCTL == 1
DRESULT USER_ioctl(BYTE pdrv,  /* Physical drive nmuber (0..) */
                   BYTE cmd,   /* Control code */
                   void * buff /* Buffer to send/receive control data */
) {
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	4603      	mov	r3, r0
 8009034:	603a      	str	r2, [r7, #0]
 8009036:	71fb      	strb	r3, [r7, #7]
 8009038:	460b      	mov	r3, r1
 800903a:	71bb      	strb	r3, [r7, #6]
    /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800903c:	79b9      	ldrb	r1, [r7, #6]
 800903e:	79fb      	ldrb	r3, [r7, #7]
 8009040:	683a      	ldr	r2, [r7, #0]
 8009042:	4618      	mov	r0, r3
 8009044:	f7f9 f890 	bl	8002168 <SD_disk_ioctl>
 8009048:	4603      	mov	r3, r0
    /* USER CODE END IOCTL */
}
 800904a:	4618      	mov	r0, r3
 800904c:	3708      	adds	r7, #8
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
	...

08009054 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8009054:	b480      	push	{r7}
 8009056:	b085      	sub	sp, #20
 8009058:	af00      	add	r7, sp, #0
 800905a:	4603      	mov	r3, r0
 800905c:	6039      	str	r1, [r7, #0]
 800905e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009060:	88fb      	ldrh	r3, [r7, #6]
 8009062:	2b7f      	cmp	r3, #127	; 0x7f
 8009064:	d802      	bhi.n	800906c <ff_convert+0x18>
		c = chr;
 8009066:	88fb      	ldrh	r3, [r7, #6]
 8009068:	81fb      	strh	r3, [r7, #14]
 800906a:	e025      	b.n	80090b8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00b      	beq.n	800908a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009072:	88fb      	ldrh	r3, [r7, #6]
 8009074:	2bff      	cmp	r3, #255	; 0xff
 8009076:	d805      	bhi.n	8009084 <ff_convert+0x30>
 8009078:	88fb      	ldrh	r3, [r7, #6]
 800907a:	3b80      	subs	r3, #128	; 0x80
 800907c:	4a12      	ldr	r2, [pc, #72]	; (80090c8 <ff_convert+0x74>)
 800907e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009082:	e000      	b.n	8009086 <ff_convert+0x32>
 8009084:	2300      	movs	r3, #0
 8009086:	81fb      	strh	r3, [r7, #14]
 8009088:	e016      	b.n	80090b8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800908a:	2300      	movs	r3, #0
 800908c:	81fb      	strh	r3, [r7, #14]
 800908e:	e009      	b.n	80090a4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009090:	89fb      	ldrh	r3, [r7, #14]
 8009092:	4a0d      	ldr	r2, [pc, #52]	; (80090c8 <ff_convert+0x74>)
 8009094:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009098:	88fa      	ldrh	r2, [r7, #6]
 800909a:	429a      	cmp	r2, r3
 800909c:	d006      	beq.n	80090ac <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800909e:	89fb      	ldrh	r3, [r7, #14]
 80090a0:	3301      	adds	r3, #1
 80090a2:	81fb      	strh	r3, [r7, #14]
 80090a4:	89fb      	ldrh	r3, [r7, #14]
 80090a6:	2b7f      	cmp	r3, #127	; 0x7f
 80090a8:	d9f2      	bls.n	8009090 <ff_convert+0x3c>
 80090aa:	e000      	b.n	80090ae <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80090ac:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80090ae:	89fb      	ldrh	r3, [r7, #14]
 80090b0:	3380      	adds	r3, #128	; 0x80
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80090b8:	89fb      	ldrh	r3, [r7, #14]
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3714      	adds	r7, #20
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr
 80090c6:	bf00      	nop
 80090c8:	080126a4 	.word	0x080126a4

080090cc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b087      	sub	sp, #28
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	4603      	mov	r3, r0
 80090d4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80090d6:	88fb      	ldrh	r3, [r7, #6]
 80090d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090dc:	d201      	bcs.n	80090e2 <ff_wtoupper+0x16>
 80090de:	4b3e      	ldr	r3, [pc, #248]	; (80091d8 <ff_wtoupper+0x10c>)
 80090e0:	e000      	b.n	80090e4 <ff_wtoupper+0x18>
 80090e2:	4b3e      	ldr	r3, [pc, #248]	; (80091dc <ff_wtoupper+0x110>)
 80090e4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	1c9a      	adds	r2, r3, #2
 80090ea:	617a      	str	r2, [r7, #20]
 80090ec:	881b      	ldrh	r3, [r3, #0]
 80090ee:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80090f0:	8a7b      	ldrh	r3, [r7, #18]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d068      	beq.n	80091c8 <ff_wtoupper+0xfc>
 80090f6:	88fa      	ldrh	r2, [r7, #6]
 80090f8:	8a7b      	ldrh	r3, [r7, #18]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d364      	bcc.n	80091c8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	1c9a      	adds	r2, r3, #2
 8009102:	617a      	str	r2, [r7, #20]
 8009104:	881b      	ldrh	r3, [r3, #0]
 8009106:	823b      	strh	r3, [r7, #16]
 8009108:	8a3b      	ldrh	r3, [r7, #16]
 800910a:	0a1b      	lsrs	r3, r3, #8
 800910c:	81fb      	strh	r3, [r7, #14]
 800910e:	8a3b      	ldrh	r3, [r7, #16]
 8009110:	b2db      	uxtb	r3, r3
 8009112:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8009114:	88fa      	ldrh	r2, [r7, #6]
 8009116:	8a79      	ldrh	r1, [r7, #18]
 8009118:	8a3b      	ldrh	r3, [r7, #16]
 800911a:	440b      	add	r3, r1
 800911c:	429a      	cmp	r2, r3
 800911e:	da49      	bge.n	80091b4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8009120:	89fb      	ldrh	r3, [r7, #14]
 8009122:	2b08      	cmp	r3, #8
 8009124:	d84f      	bhi.n	80091c6 <ff_wtoupper+0xfa>
 8009126:	a201      	add	r2, pc, #4	; (adr r2, 800912c <ff_wtoupper+0x60>)
 8009128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800912c:	08009151 	.word	0x08009151
 8009130:	08009163 	.word	0x08009163
 8009134:	08009179 	.word	0x08009179
 8009138:	08009181 	.word	0x08009181
 800913c:	08009189 	.word	0x08009189
 8009140:	08009191 	.word	0x08009191
 8009144:	08009199 	.word	0x08009199
 8009148:	080091a1 	.word	0x080091a1
 800914c:	080091a9 	.word	0x080091a9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8009150:	88fa      	ldrh	r2, [r7, #6]
 8009152:	8a7b      	ldrh	r3, [r7, #18]
 8009154:	1ad3      	subs	r3, r2, r3
 8009156:	005b      	lsls	r3, r3, #1
 8009158:	697a      	ldr	r2, [r7, #20]
 800915a:	4413      	add	r3, r2
 800915c:	881b      	ldrh	r3, [r3, #0]
 800915e:	80fb      	strh	r3, [r7, #6]
 8009160:	e027      	b.n	80091b2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8009162:	88fa      	ldrh	r2, [r7, #6]
 8009164:	8a7b      	ldrh	r3, [r7, #18]
 8009166:	1ad3      	subs	r3, r2, r3
 8009168:	b29b      	uxth	r3, r3
 800916a:	f003 0301 	and.w	r3, r3, #1
 800916e:	b29b      	uxth	r3, r3
 8009170:	88fa      	ldrh	r2, [r7, #6]
 8009172:	1ad3      	subs	r3, r2, r3
 8009174:	80fb      	strh	r3, [r7, #6]
 8009176:	e01c      	b.n	80091b2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8009178:	88fb      	ldrh	r3, [r7, #6]
 800917a:	3b10      	subs	r3, #16
 800917c:	80fb      	strh	r3, [r7, #6]
 800917e:	e018      	b.n	80091b2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8009180:	88fb      	ldrh	r3, [r7, #6]
 8009182:	3b20      	subs	r3, #32
 8009184:	80fb      	strh	r3, [r7, #6]
 8009186:	e014      	b.n	80091b2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009188:	88fb      	ldrh	r3, [r7, #6]
 800918a:	3b30      	subs	r3, #48	; 0x30
 800918c:	80fb      	strh	r3, [r7, #6]
 800918e:	e010      	b.n	80091b2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8009190:	88fb      	ldrh	r3, [r7, #6]
 8009192:	3b1a      	subs	r3, #26
 8009194:	80fb      	strh	r3, [r7, #6]
 8009196:	e00c      	b.n	80091b2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8009198:	88fb      	ldrh	r3, [r7, #6]
 800919a:	3308      	adds	r3, #8
 800919c:	80fb      	strh	r3, [r7, #6]
 800919e:	e008      	b.n	80091b2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80091a0:	88fb      	ldrh	r3, [r7, #6]
 80091a2:	3b50      	subs	r3, #80	; 0x50
 80091a4:	80fb      	strh	r3, [r7, #6]
 80091a6:	e004      	b.n	80091b2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80091a8:	88fb      	ldrh	r3, [r7, #6]
 80091aa:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80091ae:	80fb      	strh	r3, [r7, #6]
 80091b0:	bf00      	nop
			}
			break;
 80091b2:	e008      	b.n	80091c6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80091b4:	89fb      	ldrh	r3, [r7, #14]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d195      	bne.n	80090e6 <ff_wtoupper+0x1a>
 80091ba:	8a3b      	ldrh	r3, [r7, #16]
 80091bc:	005b      	lsls	r3, r3, #1
 80091be:	697a      	ldr	r2, [r7, #20]
 80091c0:	4413      	add	r3, r2
 80091c2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80091c4:	e78f      	b.n	80090e6 <ff_wtoupper+0x1a>
			break;
 80091c6:	bf00      	nop
	}

	return chr;
 80091c8:	88fb      	ldrh	r3, [r7, #6]
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	371c      	adds	r7, #28
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr
 80091d6:	bf00      	nop
 80091d8:	080127a4 	.word	0x080127a4
 80091dc:	08012998 	.word	0x08012998

080091e0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	4603      	mov	r3, r0
 80091e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80091ea:	79fb      	ldrb	r3, [r7, #7]
 80091ec:	4a08      	ldr	r2, [pc, #32]	; (8009210 <disk_status+0x30>)
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	4413      	add	r3, r2
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	79fa      	ldrb	r2, [r7, #7]
 80091f8:	4905      	ldr	r1, [pc, #20]	; (8009210 <disk_status+0x30>)
 80091fa:	440a      	add	r2, r1
 80091fc:	7a12      	ldrb	r2, [r2, #8]
 80091fe:	4610      	mov	r0, r2
 8009200:	4798      	blx	r3
 8009202:	4603      	mov	r3, r0
 8009204:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009206:	7bfb      	ldrb	r3, [r7, #15]
}
 8009208:	4618      	mov	r0, r3
 800920a:	3710      	adds	r7, #16
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}
 8009210:	200025e0 	.word	0x200025e0

08009214 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	4603      	mov	r3, r0
 800921c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800921e:	2300      	movs	r3, #0
 8009220:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009222:	79fb      	ldrb	r3, [r7, #7]
 8009224:	4a0d      	ldr	r2, [pc, #52]	; (800925c <disk_initialize+0x48>)
 8009226:	5cd3      	ldrb	r3, [r2, r3]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d111      	bne.n	8009250 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800922c:	79fb      	ldrb	r3, [r7, #7]
 800922e:	4a0b      	ldr	r2, [pc, #44]	; (800925c <disk_initialize+0x48>)
 8009230:	2101      	movs	r1, #1
 8009232:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009234:	79fb      	ldrb	r3, [r7, #7]
 8009236:	4a09      	ldr	r2, [pc, #36]	; (800925c <disk_initialize+0x48>)
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	4413      	add	r3, r2
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	79fa      	ldrb	r2, [r7, #7]
 8009242:	4906      	ldr	r1, [pc, #24]	; (800925c <disk_initialize+0x48>)
 8009244:	440a      	add	r2, r1
 8009246:	7a12      	ldrb	r2, [r2, #8]
 8009248:	4610      	mov	r0, r2
 800924a:	4798      	blx	r3
 800924c:	4603      	mov	r3, r0
 800924e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009250:	7bfb      	ldrb	r3, [r7, #15]
}
 8009252:	4618      	mov	r0, r3
 8009254:	3710      	adds	r7, #16
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	200025e0 	.word	0x200025e0

08009260 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009260:	b590      	push	{r4, r7, lr}
 8009262:	b087      	sub	sp, #28
 8009264:	af00      	add	r7, sp, #0
 8009266:	60b9      	str	r1, [r7, #8]
 8009268:	607a      	str	r2, [r7, #4]
 800926a:	603b      	str	r3, [r7, #0]
 800926c:	4603      	mov	r3, r0
 800926e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009270:	7bfb      	ldrb	r3, [r7, #15]
 8009272:	4a0a      	ldr	r2, [pc, #40]	; (800929c <disk_read+0x3c>)
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	4413      	add	r3, r2
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	689c      	ldr	r4, [r3, #8]
 800927c:	7bfb      	ldrb	r3, [r7, #15]
 800927e:	4a07      	ldr	r2, [pc, #28]	; (800929c <disk_read+0x3c>)
 8009280:	4413      	add	r3, r2
 8009282:	7a18      	ldrb	r0, [r3, #8]
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	68b9      	ldr	r1, [r7, #8]
 800928a:	47a0      	blx	r4
 800928c:	4603      	mov	r3, r0
 800928e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009290:	7dfb      	ldrb	r3, [r7, #23]
}
 8009292:	4618      	mov	r0, r3
 8009294:	371c      	adds	r7, #28
 8009296:	46bd      	mov	sp, r7
 8009298:	bd90      	pop	{r4, r7, pc}
 800929a:	bf00      	nop
 800929c:	200025e0 	.word	0x200025e0

080092a0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80092a0:	b590      	push	{r4, r7, lr}
 80092a2:	b087      	sub	sp, #28
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60b9      	str	r1, [r7, #8]
 80092a8:	607a      	str	r2, [r7, #4]
 80092aa:	603b      	str	r3, [r7, #0]
 80092ac:	4603      	mov	r3, r0
 80092ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80092b0:	7bfb      	ldrb	r3, [r7, #15]
 80092b2:	4a0a      	ldr	r2, [pc, #40]	; (80092dc <disk_write+0x3c>)
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	4413      	add	r3, r2
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	68dc      	ldr	r4, [r3, #12]
 80092bc:	7bfb      	ldrb	r3, [r7, #15]
 80092be:	4a07      	ldr	r2, [pc, #28]	; (80092dc <disk_write+0x3c>)
 80092c0:	4413      	add	r3, r2
 80092c2:	7a18      	ldrb	r0, [r3, #8]
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	68b9      	ldr	r1, [r7, #8]
 80092ca:	47a0      	blx	r4
 80092cc:	4603      	mov	r3, r0
 80092ce:	75fb      	strb	r3, [r7, #23]
  return res;
 80092d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	371c      	adds	r7, #28
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd90      	pop	{r4, r7, pc}
 80092da:	bf00      	nop
 80092dc:	200025e0 	.word	0x200025e0

080092e0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	4603      	mov	r3, r0
 80092e8:	603a      	str	r2, [r7, #0]
 80092ea:	71fb      	strb	r3, [r7, #7]
 80092ec:	460b      	mov	r3, r1
 80092ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80092f0:	79fb      	ldrb	r3, [r7, #7]
 80092f2:	4a09      	ldr	r2, [pc, #36]	; (8009318 <disk_ioctl+0x38>)
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	4413      	add	r3, r2
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	691b      	ldr	r3, [r3, #16]
 80092fc:	79fa      	ldrb	r2, [r7, #7]
 80092fe:	4906      	ldr	r1, [pc, #24]	; (8009318 <disk_ioctl+0x38>)
 8009300:	440a      	add	r2, r1
 8009302:	7a10      	ldrb	r0, [r2, #8]
 8009304:	79b9      	ldrb	r1, [r7, #6]
 8009306:	683a      	ldr	r2, [r7, #0]
 8009308:	4798      	blx	r3
 800930a:	4603      	mov	r3, r0
 800930c:	73fb      	strb	r3, [r7, #15]
  return res;
 800930e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009310:	4618      	mov	r0, r3
 8009312:	3710      	adds	r7, #16
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}
 8009318:	200025e0 	.word	0x200025e0

0800931c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800931c:	b480      	push	{r7}
 800931e:	b085      	sub	sp, #20
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	3301      	adds	r3, #1
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800932c:	89fb      	ldrh	r3, [r7, #14]
 800932e:	021b      	lsls	r3, r3, #8
 8009330:	b21a      	sxth	r2, r3
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	b21b      	sxth	r3, r3
 8009338:	4313      	orrs	r3, r2
 800933a:	b21b      	sxth	r3, r3
 800933c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800933e:	89fb      	ldrh	r3, [r7, #14]
}
 8009340:	4618      	mov	r0, r3
 8009342:	3714      	adds	r7, #20
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800934c:	b480      	push	{r7}
 800934e:	b085      	sub	sp, #20
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	3303      	adds	r3, #3
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	021b      	lsls	r3, r3, #8
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	3202      	adds	r2, #2
 8009364:	7812      	ldrb	r2, [r2, #0]
 8009366:	4313      	orrs	r3, r2
 8009368:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	021b      	lsls	r3, r3, #8
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	3201      	adds	r2, #1
 8009372:	7812      	ldrb	r2, [r2, #0]
 8009374:	4313      	orrs	r3, r2
 8009376:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	021b      	lsls	r3, r3, #8
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	7812      	ldrb	r2, [r2, #0]
 8009380:	4313      	orrs	r3, r2
 8009382:	60fb      	str	r3, [r7, #12]
	return rv;
 8009384:	68fb      	ldr	r3, [r7, #12]
}
 8009386:	4618      	mov	r0, r3
 8009388:	3714      	adds	r7, #20
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr

08009392 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009392:	b480      	push	{r7}
 8009394:	b083      	sub	sp, #12
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
 800939a:	460b      	mov	r3, r1
 800939c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	1c5a      	adds	r2, r3, #1
 80093a2:	607a      	str	r2, [r7, #4]
 80093a4:	887a      	ldrh	r2, [r7, #2]
 80093a6:	b2d2      	uxtb	r2, r2
 80093a8:	701a      	strb	r2, [r3, #0]
 80093aa:	887b      	ldrh	r3, [r7, #2]
 80093ac:	0a1b      	lsrs	r3, r3, #8
 80093ae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	1c5a      	adds	r2, r3, #1
 80093b4:	607a      	str	r2, [r7, #4]
 80093b6:	887a      	ldrh	r2, [r7, #2]
 80093b8:	b2d2      	uxtb	r2, r2
 80093ba:	701a      	strb	r2, [r3, #0]
}
 80093bc:	bf00      	nop
 80093be:	370c      	adds	r7, #12
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr

080093c8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80093c8:	b480      	push	{r7}
 80093ca:	b083      	sub	sp, #12
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	1c5a      	adds	r2, r3, #1
 80093d6:	607a      	str	r2, [r7, #4]
 80093d8:	683a      	ldr	r2, [r7, #0]
 80093da:	b2d2      	uxtb	r2, r2
 80093dc:	701a      	strb	r2, [r3, #0]
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	0a1b      	lsrs	r3, r3, #8
 80093e2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	1c5a      	adds	r2, r3, #1
 80093e8:	607a      	str	r2, [r7, #4]
 80093ea:	683a      	ldr	r2, [r7, #0]
 80093ec:	b2d2      	uxtb	r2, r2
 80093ee:	701a      	strb	r2, [r3, #0]
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	0a1b      	lsrs	r3, r3, #8
 80093f4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	1c5a      	adds	r2, r3, #1
 80093fa:	607a      	str	r2, [r7, #4]
 80093fc:	683a      	ldr	r2, [r7, #0]
 80093fe:	b2d2      	uxtb	r2, r2
 8009400:	701a      	strb	r2, [r3, #0]
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	0a1b      	lsrs	r3, r3, #8
 8009406:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	1c5a      	adds	r2, r3, #1
 800940c:	607a      	str	r2, [r7, #4]
 800940e:	683a      	ldr	r2, [r7, #0]
 8009410:	b2d2      	uxtb	r2, r2
 8009412:	701a      	strb	r2, [r3, #0]
}
 8009414:	bf00      	nop
 8009416:	370c      	adds	r7, #12
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009420:	b480      	push	{r7}
 8009422:	b087      	sub	sp, #28
 8009424:	af00      	add	r7, sp, #0
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d00d      	beq.n	8009456 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800943a:	693a      	ldr	r2, [r7, #16]
 800943c:	1c53      	adds	r3, r2, #1
 800943e:	613b      	str	r3, [r7, #16]
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	1c59      	adds	r1, r3, #1
 8009444:	6179      	str	r1, [r7, #20]
 8009446:	7812      	ldrb	r2, [r2, #0]
 8009448:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	3b01      	subs	r3, #1
 800944e:	607b      	str	r3, [r7, #4]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d1f1      	bne.n	800943a <mem_cpy+0x1a>
	}
}
 8009456:	bf00      	nop
 8009458:	371c      	adds	r7, #28
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr

08009462 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009462:	b480      	push	{r7}
 8009464:	b087      	sub	sp, #28
 8009466:	af00      	add	r7, sp, #0
 8009468:	60f8      	str	r0, [r7, #12]
 800946a:	60b9      	str	r1, [r7, #8]
 800946c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	1c5a      	adds	r2, r3, #1
 8009476:	617a      	str	r2, [r7, #20]
 8009478:	68ba      	ldr	r2, [r7, #8]
 800947a:	b2d2      	uxtb	r2, r2
 800947c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	3b01      	subs	r3, #1
 8009482:	607b      	str	r3, [r7, #4]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d1f3      	bne.n	8009472 <mem_set+0x10>
}
 800948a:	bf00      	nop
 800948c:	bf00      	nop
 800948e:	371c      	adds	r7, #28
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009498:	b480      	push	{r7}
 800949a:	b089      	sub	sp, #36	; 0x24
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	61fb      	str	r3, [r7, #28]
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80094ac:	2300      	movs	r3, #0
 80094ae:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80094b0:	69fb      	ldr	r3, [r7, #28]
 80094b2:	1c5a      	adds	r2, r3, #1
 80094b4:	61fa      	str	r2, [r7, #28]
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	4619      	mov	r1, r3
 80094ba:	69bb      	ldr	r3, [r7, #24]
 80094bc:	1c5a      	adds	r2, r3, #1
 80094be:	61ba      	str	r2, [r7, #24]
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	1acb      	subs	r3, r1, r3
 80094c4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	3b01      	subs	r3, #1
 80094ca:	607b      	str	r3, [r7, #4]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d002      	beq.n	80094d8 <mem_cmp+0x40>
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d0eb      	beq.n	80094b0 <mem_cmp+0x18>

	return r;
 80094d8:	697b      	ldr	r3, [r7, #20]
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3724      	adds	r7, #36	; 0x24
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr

080094e6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80094e6:	b480      	push	{r7}
 80094e8:	b083      	sub	sp, #12
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
 80094ee:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80094f0:	e002      	b.n	80094f8 <chk_chr+0x12>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	3301      	adds	r3, #1
 80094f6:	607b      	str	r3, [r7, #4]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d005      	beq.n	800950c <chk_chr+0x26>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	461a      	mov	r2, r3
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	4293      	cmp	r3, r2
 800950a:	d1f2      	bne.n	80094f2 <chk_chr+0xc>
	return *str;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	781b      	ldrb	r3, [r3, #0]
}
 8009510:	4618      	mov	r0, r3
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800951c:	b480      	push	{r7}
 800951e:	b085      	sub	sp, #20
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009526:	2300      	movs	r3, #0
 8009528:	60bb      	str	r3, [r7, #8]
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	60fb      	str	r3, [r7, #12]
 800952e:	e029      	b.n	8009584 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009530:	4a27      	ldr	r2, [pc, #156]	; (80095d0 <chk_lock+0xb4>)
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	011b      	lsls	r3, r3, #4
 8009536:	4413      	add	r3, r2
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d01d      	beq.n	800957a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800953e:	4a24      	ldr	r2, [pc, #144]	; (80095d0 <chk_lock+0xb4>)
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	011b      	lsls	r3, r3, #4
 8009544:	4413      	add	r3, r2
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	429a      	cmp	r2, r3
 800954e:	d116      	bne.n	800957e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009550:	4a1f      	ldr	r2, [pc, #124]	; (80095d0 <chk_lock+0xb4>)
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	011b      	lsls	r3, r3, #4
 8009556:	4413      	add	r3, r2
 8009558:	3304      	adds	r3, #4
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009560:	429a      	cmp	r2, r3
 8009562:	d10c      	bne.n	800957e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009564:	4a1a      	ldr	r2, [pc, #104]	; (80095d0 <chk_lock+0xb4>)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	011b      	lsls	r3, r3, #4
 800956a:	4413      	add	r3, r2
 800956c:	3308      	adds	r3, #8
 800956e:	681a      	ldr	r2, [r3, #0]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009574:	429a      	cmp	r2, r3
 8009576:	d102      	bne.n	800957e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009578:	e007      	b.n	800958a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800957a:	2301      	movs	r3, #1
 800957c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	3301      	adds	r3, #1
 8009582:	60fb      	str	r3, [r7, #12]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2b01      	cmp	r3, #1
 8009588:	d9d2      	bls.n	8009530 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2b02      	cmp	r3, #2
 800958e:	d109      	bne.n	80095a4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d102      	bne.n	800959c <chk_lock+0x80>
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	2b02      	cmp	r3, #2
 800959a:	d101      	bne.n	80095a0 <chk_lock+0x84>
 800959c:	2300      	movs	r3, #0
 800959e:	e010      	b.n	80095c2 <chk_lock+0xa6>
 80095a0:	2312      	movs	r3, #18
 80095a2:	e00e      	b.n	80095c2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d108      	bne.n	80095bc <chk_lock+0xa0>
 80095aa:	4a09      	ldr	r2, [pc, #36]	; (80095d0 <chk_lock+0xb4>)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	011b      	lsls	r3, r3, #4
 80095b0:	4413      	add	r3, r2
 80095b2:	330c      	adds	r3, #12
 80095b4:	881b      	ldrh	r3, [r3, #0]
 80095b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095ba:	d101      	bne.n	80095c0 <chk_lock+0xa4>
 80095bc:	2310      	movs	r3, #16
 80095be:	e000      	b.n	80095c2 <chk_lock+0xa6>
 80095c0:	2300      	movs	r3, #0
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3714      	adds	r7, #20
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	200023c0 	.word	0x200023c0

080095d4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80095da:	2300      	movs	r3, #0
 80095dc:	607b      	str	r3, [r7, #4]
 80095de:	e002      	b.n	80095e6 <enq_lock+0x12>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	3301      	adds	r3, #1
 80095e4:	607b      	str	r3, [r7, #4]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d806      	bhi.n	80095fa <enq_lock+0x26>
 80095ec:	4a09      	ldr	r2, [pc, #36]	; (8009614 <enq_lock+0x40>)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	011b      	lsls	r3, r3, #4
 80095f2:	4413      	add	r3, r2
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d1f2      	bne.n	80095e0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2b02      	cmp	r3, #2
 80095fe:	bf14      	ite	ne
 8009600:	2301      	movne	r3, #1
 8009602:	2300      	moveq	r3, #0
 8009604:	b2db      	uxtb	r3, r3
}
 8009606:	4618      	mov	r0, r3
 8009608:	370c      	adds	r7, #12
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	200023c0 	.word	0x200023c0

08009618 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009618:	b480      	push	{r7}
 800961a:	b085      	sub	sp, #20
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009622:	2300      	movs	r3, #0
 8009624:	60fb      	str	r3, [r7, #12]
 8009626:	e01f      	b.n	8009668 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009628:	4a41      	ldr	r2, [pc, #260]	; (8009730 <inc_lock+0x118>)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	011b      	lsls	r3, r3, #4
 800962e:	4413      	add	r3, r2
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	429a      	cmp	r2, r3
 8009638:	d113      	bne.n	8009662 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800963a:	4a3d      	ldr	r2, [pc, #244]	; (8009730 <inc_lock+0x118>)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	011b      	lsls	r3, r3, #4
 8009640:	4413      	add	r3, r2
 8009642:	3304      	adds	r3, #4
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800964a:	429a      	cmp	r2, r3
 800964c:	d109      	bne.n	8009662 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800964e:	4a38      	ldr	r2, [pc, #224]	; (8009730 <inc_lock+0x118>)
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	011b      	lsls	r3, r3, #4
 8009654:	4413      	add	r3, r2
 8009656:	3308      	adds	r3, #8
 8009658:	681a      	ldr	r2, [r3, #0]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800965e:	429a      	cmp	r2, r3
 8009660:	d006      	beq.n	8009670 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	3301      	adds	r3, #1
 8009666:	60fb      	str	r3, [r7, #12]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2b01      	cmp	r3, #1
 800966c:	d9dc      	bls.n	8009628 <inc_lock+0x10>
 800966e:	e000      	b.n	8009672 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009670:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2b02      	cmp	r3, #2
 8009676:	d132      	bne.n	80096de <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009678:	2300      	movs	r3, #0
 800967a:	60fb      	str	r3, [r7, #12]
 800967c:	e002      	b.n	8009684 <inc_lock+0x6c>
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	3301      	adds	r3, #1
 8009682:	60fb      	str	r3, [r7, #12]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2b01      	cmp	r3, #1
 8009688:	d806      	bhi.n	8009698 <inc_lock+0x80>
 800968a:	4a29      	ldr	r2, [pc, #164]	; (8009730 <inc_lock+0x118>)
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	011b      	lsls	r3, r3, #4
 8009690:	4413      	add	r3, r2
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d1f2      	bne.n	800967e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2b02      	cmp	r3, #2
 800969c:	d101      	bne.n	80096a2 <inc_lock+0x8a>
 800969e:	2300      	movs	r3, #0
 80096a0:	e040      	b.n	8009724 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	4922      	ldr	r1, [pc, #136]	; (8009730 <inc_lock+0x118>)
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	011b      	lsls	r3, r3, #4
 80096ac:	440b      	add	r3, r1
 80096ae:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	689a      	ldr	r2, [r3, #8]
 80096b4:	491e      	ldr	r1, [pc, #120]	; (8009730 <inc_lock+0x118>)
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	011b      	lsls	r3, r3, #4
 80096ba:	440b      	add	r3, r1
 80096bc:	3304      	adds	r3, #4
 80096be:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	695a      	ldr	r2, [r3, #20]
 80096c4:	491a      	ldr	r1, [pc, #104]	; (8009730 <inc_lock+0x118>)
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	011b      	lsls	r3, r3, #4
 80096ca:	440b      	add	r3, r1
 80096cc:	3308      	adds	r3, #8
 80096ce:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80096d0:	4a17      	ldr	r2, [pc, #92]	; (8009730 <inc_lock+0x118>)
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	011b      	lsls	r3, r3, #4
 80096d6:	4413      	add	r3, r2
 80096d8:	330c      	adds	r3, #12
 80096da:	2200      	movs	r2, #0
 80096dc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d009      	beq.n	80096f8 <inc_lock+0xe0>
 80096e4:	4a12      	ldr	r2, [pc, #72]	; (8009730 <inc_lock+0x118>)
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	011b      	lsls	r3, r3, #4
 80096ea:	4413      	add	r3, r2
 80096ec:	330c      	adds	r3, #12
 80096ee:	881b      	ldrh	r3, [r3, #0]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d001      	beq.n	80096f8 <inc_lock+0xe0>
 80096f4:	2300      	movs	r3, #0
 80096f6:	e015      	b.n	8009724 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d108      	bne.n	8009710 <inc_lock+0xf8>
 80096fe:	4a0c      	ldr	r2, [pc, #48]	; (8009730 <inc_lock+0x118>)
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	011b      	lsls	r3, r3, #4
 8009704:	4413      	add	r3, r2
 8009706:	330c      	adds	r3, #12
 8009708:	881b      	ldrh	r3, [r3, #0]
 800970a:	3301      	adds	r3, #1
 800970c:	b29a      	uxth	r2, r3
 800970e:	e001      	b.n	8009714 <inc_lock+0xfc>
 8009710:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009714:	4906      	ldr	r1, [pc, #24]	; (8009730 <inc_lock+0x118>)
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	011b      	lsls	r3, r3, #4
 800971a:	440b      	add	r3, r1
 800971c:	330c      	adds	r3, #12
 800971e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	3301      	adds	r3, #1
}
 8009724:	4618      	mov	r0, r3
 8009726:	3714      	adds	r7, #20
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr
 8009730:	200023c0 	.word	0x200023c0

08009734 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009734:	b480      	push	{r7}
 8009736:	b085      	sub	sp, #20
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	3b01      	subs	r3, #1
 8009740:	607b      	str	r3, [r7, #4]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2b01      	cmp	r3, #1
 8009746:	d825      	bhi.n	8009794 <dec_lock+0x60>
		n = Files[i].ctr;
 8009748:	4a17      	ldr	r2, [pc, #92]	; (80097a8 <dec_lock+0x74>)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	011b      	lsls	r3, r3, #4
 800974e:	4413      	add	r3, r2
 8009750:	330c      	adds	r3, #12
 8009752:	881b      	ldrh	r3, [r3, #0]
 8009754:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009756:	89fb      	ldrh	r3, [r7, #14]
 8009758:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800975c:	d101      	bne.n	8009762 <dec_lock+0x2e>
 800975e:	2300      	movs	r3, #0
 8009760:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009762:	89fb      	ldrh	r3, [r7, #14]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d002      	beq.n	800976e <dec_lock+0x3a>
 8009768:	89fb      	ldrh	r3, [r7, #14]
 800976a:	3b01      	subs	r3, #1
 800976c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800976e:	4a0e      	ldr	r2, [pc, #56]	; (80097a8 <dec_lock+0x74>)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	011b      	lsls	r3, r3, #4
 8009774:	4413      	add	r3, r2
 8009776:	330c      	adds	r3, #12
 8009778:	89fa      	ldrh	r2, [r7, #14]
 800977a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800977c:	89fb      	ldrh	r3, [r7, #14]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d105      	bne.n	800978e <dec_lock+0x5a>
 8009782:	4a09      	ldr	r2, [pc, #36]	; (80097a8 <dec_lock+0x74>)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	011b      	lsls	r3, r3, #4
 8009788:	4413      	add	r3, r2
 800978a:	2200      	movs	r2, #0
 800978c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800978e:	2300      	movs	r3, #0
 8009790:	737b      	strb	r3, [r7, #13]
 8009792:	e001      	b.n	8009798 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009794:	2302      	movs	r3, #2
 8009796:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009798:	7b7b      	ldrb	r3, [r7, #13]
}
 800979a:	4618      	mov	r0, r3
 800979c:	3714      	adds	r7, #20
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr
 80097a6:	bf00      	nop
 80097a8:	200023c0 	.word	0x200023c0

080097ac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b085      	sub	sp, #20
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80097b4:	2300      	movs	r3, #0
 80097b6:	60fb      	str	r3, [r7, #12]
 80097b8:	e010      	b.n	80097dc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80097ba:	4a0d      	ldr	r2, [pc, #52]	; (80097f0 <clear_lock+0x44>)
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	011b      	lsls	r3, r3, #4
 80097c0:	4413      	add	r3, r2
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d105      	bne.n	80097d6 <clear_lock+0x2a>
 80097ca:	4a09      	ldr	r2, [pc, #36]	; (80097f0 <clear_lock+0x44>)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	011b      	lsls	r3, r3, #4
 80097d0:	4413      	add	r3, r2
 80097d2:	2200      	movs	r2, #0
 80097d4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	3301      	adds	r3, #1
 80097da:	60fb      	str	r3, [r7, #12]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d9eb      	bls.n	80097ba <clear_lock+0xe>
	}
}
 80097e2:	bf00      	nop
 80097e4:	bf00      	nop
 80097e6:	3714      	adds	r7, #20
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr
 80097f0:	200023c0 	.word	0x200023c0

080097f4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b086      	sub	sp, #24
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80097fc:	2300      	movs	r3, #0
 80097fe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	78db      	ldrb	r3, [r3, #3]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d034      	beq.n	8009872 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800980c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	7858      	ldrb	r0, [r3, #1]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009818:	2301      	movs	r3, #1
 800981a:	697a      	ldr	r2, [r7, #20]
 800981c:	f7ff fd40 	bl	80092a0 <disk_write>
 8009820:	4603      	mov	r3, r0
 8009822:	2b00      	cmp	r3, #0
 8009824:	d002      	beq.n	800982c <sync_window+0x38>
			res = FR_DISK_ERR;
 8009826:	2301      	movs	r3, #1
 8009828:	73fb      	strb	r3, [r7, #15]
 800982a:	e022      	b.n	8009872 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009836:	697a      	ldr	r2, [r7, #20]
 8009838:	1ad2      	subs	r2, r2, r3
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	69db      	ldr	r3, [r3, #28]
 800983e:	429a      	cmp	r2, r3
 8009840:	d217      	bcs.n	8009872 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	789b      	ldrb	r3, [r3, #2]
 8009846:	613b      	str	r3, [r7, #16]
 8009848:	e010      	b.n	800986c <sync_window+0x78>
					wsect += fs->fsize;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	69db      	ldr	r3, [r3, #28]
 800984e:	697a      	ldr	r2, [r7, #20]
 8009850:	4413      	add	r3, r2
 8009852:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	7858      	ldrb	r0, [r3, #1]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800985e:	2301      	movs	r3, #1
 8009860:	697a      	ldr	r2, [r7, #20]
 8009862:	f7ff fd1d 	bl	80092a0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	3b01      	subs	r3, #1
 800986a:	613b      	str	r3, [r7, #16]
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	2b01      	cmp	r3, #1
 8009870:	d8eb      	bhi.n	800984a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009872:	7bfb      	ldrb	r3, [r7, #15]
}
 8009874:	4618      	mov	r0, r3
 8009876:	3718      	adds	r7, #24
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009886:	2300      	movs	r3, #0
 8009888:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800988e:	683a      	ldr	r2, [r7, #0]
 8009890:	429a      	cmp	r2, r3
 8009892:	d01b      	beq.n	80098cc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f7ff ffad 	bl	80097f4 <sync_window>
 800989a:	4603      	mov	r3, r0
 800989c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800989e:	7bfb      	ldrb	r3, [r7, #15]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d113      	bne.n	80098cc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	7858      	ldrb	r0, [r3, #1]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80098ae:	2301      	movs	r3, #1
 80098b0:	683a      	ldr	r2, [r7, #0]
 80098b2:	f7ff fcd5 	bl	8009260 <disk_read>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d004      	beq.n	80098c6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80098bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098c0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80098c2:	2301      	movs	r3, #1
 80098c4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	683a      	ldr	r2, [r7, #0]
 80098ca:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80098cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3710      	adds	r7, #16
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
	...

080098d8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b084      	sub	sp, #16
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f7ff ff87 	bl	80097f4 <sync_window>
 80098e6:	4603      	mov	r3, r0
 80098e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80098ea:	7bfb      	ldrb	r3, [r7, #15]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d158      	bne.n	80099a2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	2b03      	cmp	r3, #3
 80098f6:	d148      	bne.n	800998a <sync_fs+0xb2>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	791b      	ldrb	r3, [r3, #4]
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d144      	bne.n	800998a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	3334      	adds	r3, #52	; 0x34
 8009904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009908:	2100      	movs	r1, #0
 800990a:	4618      	mov	r0, r3
 800990c:	f7ff fda9 	bl	8009462 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	3334      	adds	r3, #52	; 0x34
 8009914:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009918:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800991c:	4618      	mov	r0, r3
 800991e:	f7ff fd38 	bl	8009392 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	3334      	adds	r3, #52	; 0x34
 8009926:	4921      	ldr	r1, [pc, #132]	; (80099ac <sync_fs+0xd4>)
 8009928:	4618      	mov	r0, r3
 800992a:	f7ff fd4d 	bl	80093c8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	3334      	adds	r3, #52	; 0x34
 8009932:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009936:	491e      	ldr	r1, [pc, #120]	; (80099b0 <sync_fs+0xd8>)
 8009938:	4618      	mov	r0, r3
 800993a:	f7ff fd45 	bl	80093c8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	3334      	adds	r3, #52	; 0x34
 8009942:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	695b      	ldr	r3, [r3, #20]
 800994a:	4619      	mov	r1, r3
 800994c:	4610      	mov	r0, r2
 800994e:	f7ff fd3b 	bl	80093c8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	3334      	adds	r3, #52	; 0x34
 8009956:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	691b      	ldr	r3, [r3, #16]
 800995e:	4619      	mov	r1, r3
 8009960:	4610      	mov	r0, r2
 8009962:	f7ff fd31 	bl	80093c8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6a1b      	ldr	r3, [r3, #32]
 800996a:	1c5a      	adds	r2, r3, #1
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	7858      	ldrb	r0, [r3, #1]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800997e:	2301      	movs	r3, #1
 8009980:	f7ff fc8e 	bl	80092a0 <disk_write>
			fs->fsi_flag = 0;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	785b      	ldrb	r3, [r3, #1]
 800998e:	2200      	movs	r2, #0
 8009990:	2100      	movs	r1, #0
 8009992:	4618      	mov	r0, r3
 8009994:	f7ff fca4 	bl	80092e0 <disk_ioctl>
 8009998:	4603      	mov	r3, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d001      	beq.n	80099a2 <sync_fs+0xca>
 800999e:	2301      	movs	r3, #1
 80099a0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80099a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3710      	adds	r7, #16
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	41615252 	.word	0x41615252
 80099b0:	61417272 	.word	0x61417272

080099b4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	3b02      	subs	r3, #2
 80099c2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	699b      	ldr	r3, [r3, #24]
 80099c8:	3b02      	subs	r3, #2
 80099ca:	683a      	ldr	r2, [r7, #0]
 80099cc:	429a      	cmp	r2, r3
 80099ce:	d301      	bcc.n	80099d4 <clust2sect+0x20>
 80099d0:	2300      	movs	r3, #0
 80099d2:	e008      	b.n	80099e6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	895b      	ldrh	r3, [r3, #10]
 80099d8:	461a      	mov	r2, r3
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	fb03 f202 	mul.w	r2, r3, r2
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e4:	4413      	add	r3, r2
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	370c      	adds	r7, #12
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr

080099f2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b086      	sub	sp, #24
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
 80099fa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d904      	bls.n	8009a12 <get_fat+0x20>
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	699b      	ldr	r3, [r3, #24]
 8009a0c:	683a      	ldr	r2, [r7, #0]
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d302      	bcc.n	8009a18 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009a12:	2301      	movs	r3, #1
 8009a14:	617b      	str	r3, [r7, #20]
 8009a16:	e08f      	b.n	8009b38 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009a18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a1c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	2b03      	cmp	r3, #3
 8009a24:	d062      	beq.n	8009aec <get_fat+0xfa>
 8009a26:	2b03      	cmp	r3, #3
 8009a28:	dc7c      	bgt.n	8009b24 <get_fat+0x132>
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d002      	beq.n	8009a34 <get_fat+0x42>
 8009a2e:	2b02      	cmp	r3, #2
 8009a30:	d042      	beq.n	8009ab8 <get_fat+0xc6>
 8009a32:	e077      	b.n	8009b24 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	60fb      	str	r3, [r7, #12]
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	085b      	lsrs	r3, r3, #1
 8009a3c:	68fa      	ldr	r2, [r7, #12]
 8009a3e:	4413      	add	r3, r2
 8009a40:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	0a5b      	lsrs	r3, r3, #9
 8009a4a:	4413      	add	r3, r2
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	6938      	ldr	r0, [r7, #16]
 8009a50:	f7ff ff14 	bl	800987c <move_window>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d167      	bne.n	8009b2a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	1c5a      	adds	r2, r3, #1
 8009a5e:	60fa      	str	r2, [r7, #12]
 8009a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a64:	693a      	ldr	r2, [r7, #16]
 8009a66:	4413      	add	r3, r2
 8009a68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009a6c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	0a5b      	lsrs	r3, r3, #9
 8009a76:	4413      	add	r3, r2
 8009a78:	4619      	mov	r1, r3
 8009a7a:	6938      	ldr	r0, [r7, #16]
 8009a7c:	f7ff fefe 	bl	800987c <move_window>
 8009a80:	4603      	mov	r3, r0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d153      	bne.n	8009b2e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a8c:	693a      	ldr	r2, [r7, #16]
 8009a8e:	4413      	add	r3, r2
 8009a90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009a94:	021b      	lsls	r3, r3, #8
 8009a96:	461a      	mov	r2, r3
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	f003 0301 	and.w	r3, r3, #1
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d002      	beq.n	8009aae <get_fat+0xbc>
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	091b      	lsrs	r3, r3, #4
 8009aac:	e002      	b.n	8009ab4 <get_fat+0xc2>
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ab4:	617b      	str	r3, [r7, #20]
			break;
 8009ab6:	e03f      	b.n	8009b38 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	0a1b      	lsrs	r3, r3, #8
 8009ac0:	4413      	add	r3, r2
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	6938      	ldr	r0, [r7, #16]
 8009ac6:	f7ff fed9 	bl	800987c <move_window>
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d130      	bne.n	8009b32 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	005b      	lsls	r3, r3, #1
 8009ada:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009ade:	4413      	add	r3, r2
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f7ff fc1b 	bl	800931c <ld_word>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	617b      	str	r3, [r7, #20]
			break;
 8009aea:	e025      	b.n	8009b38 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	09db      	lsrs	r3, r3, #7
 8009af4:	4413      	add	r3, r2
 8009af6:	4619      	mov	r1, r3
 8009af8:	6938      	ldr	r0, [r7, #16]
 8009afa:	f7ff febf 	bl	800987c <move_window>
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d118      	bne.n	8009b36 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009b12:	4413      	add	r3, r2
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7ff fc19 	bl	800934c <ld_dword>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009b20:	617b      	str	r3, [r7, #20]
			break;
 8009b22:	e009      	b.n	8009b38 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009b24:	2301      	movs	r3, #1
 8009b26:	617b      	str	r3, [r7, #20]
 8009b28:	e006      	b.n	8009b38 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009b2a:	bf00      	nop
 8009b2c:	e004      	b.n	8009b38 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009b2e:	bf00      	nop
 8009b30:	e002      	b.n	8009b38 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009b32:	bf00      	nop
 8009b34:	e000      	b.n	8009b38 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009b36:	bf00      	nop
		}
	}

	return val;
 8009b38:	697b      	ldr	r3, [r7, #20]
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3718      	adds	r7, #24
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}

08009b42 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009b42:	b590      	push	{r4, r7, lr}
 8009b44:	b089      	sub	sp, #36	; 0x24
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	60f8      	str	r0, [r7, #12]
 8009b4a:	60b9      	str	r1, [r7, #8]
 8009b4c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009b4e:	2302      	movs	r3, #2
 8009b50:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	2b01      	cmp	r3, #1
 8009b56:	f240 80d2 	bls.w	8009cfe <put_fat+0x1bc>
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	699b      	ldr	r3, [r3, #24]
 8009b5e:	68ba      	ldr	r2, [r7, #8]
 8009b60:	429a      	cmp	r2, r3
 8009b62:	f080 80cc 	bcs.w	8009cfe <put_fat+0x1bc>
		switch (fs->fs_type) {
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	2b03      	cmp	r3, #3
 8009b6c:	f000 8096 	beq.w	8009c9c <put_fat+0x15a>
 8009b70:	2b03      	cmp	r3, #3
 8009b72:	f300 80cd 	bgt.w	8009d10 <put_fat+0x1ce>
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d002      	beq.n	8009b80 <put_fat+0x3e>
 8009b7a:	2b02      	cmp	r3, #2
 8009b7c:	d06e      	beq.n	8009c5c <put_fat+0x11a>
 8009b7e:	e0c7      	b.n	8009d10 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	61bb      	str	r3, [r7, #24]
 8009b84:	69bb      	ldr	r3, [r7, #24]
 8009b86:	085b      	lsrs	r3, r3, #1
 8009b88:	69ba      	ldr	r2, [r7, #24]
 8009b8a:	4413      	add	r3, r2
 8009b8c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b92:	69bb      	ldr	r3, [r7, #24]
 8009b94:	0a5b      	lsrs	r3, r3, #9
 8009b96:	4413      	add	r3, r2
 8009b98:	4619      	mov	r1, r3
 8009b9a:	68f8      	ldr	r0, [r7, #12]
 8009b9c:	f7ff fe6e 	bl	800987c <move_window>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009ba4:	7ffb      	ldrb	r3, [r7, #31]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	f040 80ab 	bne.w	8009d02 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009bb2:	69bb      	ldr	r3, [r7, #24]
 8009bb4:	1c59      	adds	r1, r3, #1
 8009bb6:	61b9      	str	r1, [r7, #24]
 8009bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bbc:	4413      	add	r3, r2
 8009bbe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	f003 0301 	and.w	r3, r3, #1
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d00d      	beq.n	8009be6 <put_fat+0xa4>
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	b25b      	sxtb	r3, r3
 8009bd0:	f003 030f 	and.w	r3, r3, #15
 8009bd4:	b25a      	sxtb	r2, r3
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	b2db      	uxtb	r3, r3
 8009bda:	011b      	lsls	r3, r3, #4
 8009bdc:	b25b      	sxtb	r3, r3
 8009bde:	4313      	orrs	r3, r2
 8009be0:	b25b      	sxtb	r3, r3
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	e001      	b.n	8009bea <put_fat+0xa8>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	b2db      	uxtb	r3, r3
 8009bea:	697a      	ldr	r2, [r7, #20]
 8009bec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009bf8:	69bb      	ldr	r3, [r7, #24]
 8009bfa:	0a5b      	lsrs	r3, r3, #9
 8009bfc:	4413      	add	r3, r2
 8009bfe:	4619      	mov	r1, r3
 8009c00:	68f8      	ldr	r0, [r7, #12]
 8009c02:	f7ff fe3b 	bl	800987c <move_window>
 8009c06:	4603      	mov	r3, r0
 8009c08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009c0a:	7ffb      	ldrb	r3, [r7, #31]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d17a      	bne.n	8009d06 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009c16:	69bb      	ldr	r3, [r7, #24]
 8009c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c1c:	4413      	add	r3, r2
 8009c1e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	f003 0301 	and.w	r3, r3, #1
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d003      	beq.n	8009c32 <put_fat+0xf0>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	091b      	lsrs	r3, r3, #4
 8009c2e:	b2db      	uxtb	r3, r3
 8009c30:	e00e      	b.n	8009c50 <put_fat+0x10e>
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	b25b      	sxtb	r3, r3
 8009c38:	f023 030f 	bic.w	r3, r3, #15
 8009c3c:	b25a      	sxtb	r2, r3
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	0a1b      	lsrs	r3, r3, #8
 8009c42:	b25b      	sxtb	r3, r3
 8009c44:	f003 030f 	and.w	r3, r3, #15
 8009c48:	b25b      	sxtb	r3, r3
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	b25b      	sxtb	r3, r3
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	697a      	ldr	r2, [r7, #20]
 8009c52:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2201      	movs	r2, #1
 8009c58:	70da      	strb	r2, [r3, #3]
			break;
 8009c5a:	e059      	b.n	8009d10 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	0a1b      	lsrs	r3, r3, #8
 8009c64:	4413      	add	r3, r2
 8009c66:	4619      	mov	r1, r3
 8009c68:	68f8      	ldr	r0, [r7, #12]
 8009c6a:	f7ff fe07 	bl	800987c <move_window>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009c72:	7ffb      	ldrb	r3, [r7, #31]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d148      	bne.n	8009d0a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	005b      	lsls	r3, r3, #1
 8009c82:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009c86:	4413      	add	r3, r2
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	b292      	uxth	r2, r2
 8009c8c:	4611      	mov	r1, r2
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7ff fb7f 	bl	8009392 <st_word>
			fs->wflag = 1;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2201      	movs	r2, #1
 8009c98:	70da      	strb	r2, [r3, #3]
			break;
 8009c9a:	e039      	b.n	8009d10 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	09db      	lsrs	r3, r3, #7
 8009ca4:	4413      	add	r3, r2
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f7ff fde7 	bl	800987c <move_window>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009cb2:	7ffb      	ldrb	r3, [r7, #31]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d12a      	bne.n	8009d0e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	009b      	lsls	r3, r3, #2
 8009cc8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009ccc:	4413      	add	r3, r2
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f7ff fb3c 	bl	800934c <ld_dword>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009cda:	4323      	orrs	r3, r4
 8009cdc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009cec:	4413      	add	r3, r2
 8009cee:	6879      	ldr	r1, [r7, #4]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7ff fb69 	bl	80093c8 <st_dword>
			fs->wflag = 1;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	70da      	strb	r2, [r3, #3]
			break;
 8009cfc:	e008      	b.n	8009d10 <put_fat+0x1ce>
		}
	}
 8009cfe:	bf00      	nop
 8009d00:	e006      	b.n	8009d10 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009d02:	bf00      	nop
 8009d04:	e004      	b.n	8009d10 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009d06:	bf00      	nop
 8009d08:	e002      	b.n	8009d10 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009d0a:	bf00      	nop
 8009d0c:	e000      	b.n	8009d10 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009d0e:	bf00      	nop
	return res;
 8009d10:	7ffb      	ldrb	r3, [r7, #31]
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3724      	adds	r7, #36	; 0x24
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd90      	pop	{r4, r7, pc}

08009d1a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b088      	sub	sp, #32
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	60f8      	str	r0, [r7, #12]
 8009d22:	60b9      	str	r1, [r7, #8]
 8009d24:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009d26:	2300      	movs	r3, #0
 8009d28:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d904      	bls.n	8009d40 <remove_chain+0x26>
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	699b      	ldr	r3, [r3, #24]
 8009d3a:	68ba      	ldr	r2, [r7, #8]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d301      	bcc.n	8009d44 <remove_chain+0x2a>
 8009d40:	2302      	movs	r3, #2
 8009d42:	e04b      	b.n	8009ddc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d00c      	beq.n	8009d64 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009d4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d4e:	6879      	ldr	r1, [r7, #4]
 8009d50:	69b8      	ldr	r0, [r7, #24]
 8009d52:	f7ff fef6 	bl	8009b42 <put_fat>
 8009d56:	4603      	mov	r3, r0
 8009d58:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009d5a:	7ffb      	ldrb	r3, [r7, #31]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d001      	beq.n	8009d64 <remove_chain+0x4a>
 8009d60:	7ffb      	ldrb	r3, [r7, #31]
 8009d62:	e03b      	b.n	8009ddc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009d64:	68b9      	ldr	r1, [r7, #8]
 8009d66:	68f8      	ldr	r0, [r7, #12]
 8009d68:	f7ff fe43 	bl	80099f2 <get_fat>
 8009d6c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d031      	beq.n	8009dd8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d101      	bne.n	8009d7e <remove_chain+0x64>
 8009d7a:	2302      	movs	r3, #2
 8009d7c:	e02e      	b.n	8009ddc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d84:	d101      	bne.n	8009d8a <remove_chain+0x70>
 8009d86:	2301      	movs	r3, #1
 8009d88:	e028      	b.n	8009ddc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	68b9      	ldr	r1, [r7, #8]
 8009d8e:	69b8      	ldr	r0, [r7, #24]
 8009d90:	f7ff fed7 	bl	8009b42 <put_fat>
 8009d94:	4603      	mov	r3, r0
 8009d96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009d98:	7ffb      	ldrb	r3, [r7, #31]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d001      	beq.n	8009da2 <remove_chain+0x88>
 8009d9e:	7ffb      	ldrb	r3, [r7, #31]
 8009da0:	e01c      	b.n	8009ddc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009da2:	69bb      	ldr	r3, [r7, #24]
 8009da4:	695a      	ldr	r2, [r3, #20]
 8009da6:	69bb      	ldr	r3, [r7, #24]
 8009da8:	699b      	ldr	r3, [r3, #24]
 8009daa:	3b02      	subs	r3, #2
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d20b      	bcs.n	8009dc8 <remove_chain+0xae>
			fs->free_clst++;
 8009db0:	69bb      	ldr	r3, [r7, #24]
 8009db2:	695b      	ldr	r3, [r3, #20]
 8009db4:	1c5a      	adds	r2, r3, #1
 8009db6:	69bb      	ldr	r3, [r7, #24]
 8009db8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	791b      	ldrb	r3, [r3, #4]
 8009dbe:	f043 0301 	orr.w	r3, r3, #1
 8009dc2:	b2da      	uxtb	r2, r3
 8009dc4:	69bb      	ldr	r3, [r7, #24]
 8009dc6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	699b      	ldr	r3, [r3, #24]
 8009dd0:	68ba      	ldr	r2, [r7, #8]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d3c6      	bcc.n	8009d64 <remove_chain+0x4a>
 8009dd6:	e000      	b.n	8009dda <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009dd8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009dda:	2300      	movs	r3, #0
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3720      	adds	r7, #32
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b088      	sub	sp, #32
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d10d      	bne.n	8009e16 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	691b      	ldr	r3, [r3, #16]
 8009dfe:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009e00:	69bb      	ldr	r3, [r7, #24]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d004      	beq.n	8009e10 <create_chain+0x2c>
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	699b      	ldr	r3, [r3, #24]
 8009e0a:	69ba      	ldr	r2, [r7, #24]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d31b      	bcc.n	8009e48 <create_chain+0x64>
 8009e10:	2301      	movs	r3, #1
 8009e12:	61bb      	str	r3, [r7, #24]
 8009e14:	e018      	b.n	8009e48 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009e16:	6839      	ldr	r1, [r7, #0]
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f7ff fdea 	bl	80099f2 <get_fat>
 8009e1e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d801      	bhi.n	8009e2a <create_chain+0x46>
 8009e26:	2301      	movs	r3, #1
 8009e28:	e070      	b.n	8009f0c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e30:	d101      	bne.n	8009e36 <create_chain+0x52>
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	e06a      	b.n	8009f0c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	699b      	ldr	r3, [r3, #24]
 8009e3a:	68fa      	ldr	r2, [r7, #12]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d201      	bcs.n	8009e44 <create_chain+0x60>
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	e063      	b.n	8009f0c <create_chain+0x128>
		scl = clst;
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009e48:	69bb      	ldr	r3, [r7, #24]
 8009e4a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009e4c:	69fb      	ldr	r3, [r7, #28]
 8009e4e:	3301      	adds	r3, #1
 8009e50:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	699b      	ldr	r3, [r3, #24]
 8009e56:	69fa      	ldr	r2, [r7, #28]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d307      	bcc.n	8009e6c <create_chain+0x88>
				ncl = 2;
 8009e5c:	2302      	movs	r3, #2
 8009e5e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009e60:	69fa      	ldr	r2, [r7, #28]
 8009e62:	69bb      	ldr	r3, [r7, #24]
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d901      	bls.n	8009e6c <create_chain+0x88>
 8009e68:	2300      	movs	r3, #0
 8009e6a:	e04f      	b.n	8009f0c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009e6c:	69f9      	ldr	r1, [r7, #28]
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f7ff fdbf 	bl	80099f2 <get_fat>
 8009e74:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d00e      	beq.n	8009e9a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d003      	beq.n	8009e8a <create_chain+0xa6>
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e88:	d101      	bne.n	8009e8e <create_chain+0xaa>
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	e03e      	b.n	8009f0c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009e8e:	69fa      	ldr	r2, [r7, #28]
 8009e90:	69bb      	ldr	r3, [r7, #24]
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d1da      	bne.n	8009e4c <create_chain+0x68>
 8009e96:	2300      	movs	r3, #0
 8009e98:	e038      	b.n	8009f0c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009e9a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009e9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ea0:	69f9      	ldr	r1, [r7, #28]
 8009ea2:	6938      	ldr	r0, [r7, #16]
 8009ea4:	f7ff fe4d 	bl	8009b42 <put_fat>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009eac:	7dfb      	ldrb	r3, [r7, #23]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d109      	bne.n	8009ec6 <create_chain+0xe2>
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d006      	beq.n	8009ec6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009eb8:	69fa      	ldr	r2, [r7, #28]
 8009eba:	6839      	ldr	r1, [r7, #0]
 8009ebc:	6938      	ldr	r0, [r7, #16]
 8009ebe:	f7ff fe40 	bl	8009b42 <put_fat>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009ec6:	7dfb      	ldrb	r3, [r7, #23]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d116      	bne.n	8009efa <create_chain+0x116>
		fs->last_clst = ncl;
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	69fa      	ldr	r2, [r7, #28]
 8009ed0:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	695a      	ldr	r2, [r3, #20]
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	699b      	ldr	r3, [r3, #24]
 8009eda:	3b02      	subs	r3, #2
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d804      	bhi.n	8009eea <create_chain+0x106>
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	695b      	ldr	r3, [r3, #20]
 8009ee4:	1e5a      	subs	r2, r3, #1
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	791b      	ldrb	r3, [r3, #4]
 8009eee:	f043 0301 	orr.w	r3, r3, #1
 8009ef2:	b2da      	uxtb	r2, r3
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	711a      	strb	r2, [r3, #4]
 8009ef8:	e007      	b.n	8009f0a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009efa:	7dfb      	ldrb	r3, [r7, #23]
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d102      	bne.n	8009f06 <create_chain+0x122>
 8009f00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f04:	e000      	b.n	8009f08 <create_chain+0x124>
 8009f06:	2301      	movs	r3, #1
 8009f08:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009f0a:	69fb      	ldr	r3, [r7, #28]
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3720      	adds	r7, #32
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b087      	sub	sp, #28
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f28:	3304      	adds	r3, #4
 8009f2a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	0a5b      	lsrs	r3, r3, #9
 8009f30:	68fa      	ldr	r2, [r7, #12]
 8009f32:	8952      	ldrh	r2, [r2, #10]
 8009f34:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f38:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	1d1a      	adds	r2, r3, #4
 8009f3e:	613a      	str	r2, [r7, #16]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d101      	bne.n	8009f4e <clmt_clust+0x3a>
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	e010      	b.n	8009f70 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009f4e:	697a      	ldr	r2, [r7, #20]
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d307      	bcc.n	8009f66 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009f56:	697a      	ldr	r2, [r7, #20]
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	1ad3      	subs	r3, r2, r3
 8009f5c:	617b      	str	r3, [r7, #20]
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	3304      	adds	r3, #4
 8009f62:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009f64:	e7e9      	b.n	8009f3a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009f66:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	4413      	add	r3, r2
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	371c      	adds	r7, #28
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr

08009f7c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b086      	sub	sp, #24
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f92:	d204      	bcs.n	8009f9e <dir_sdi+0x22>
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	f003 031f 	and.w	r3, r3, #31
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d001      	beq.n	8009fa2 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009f9e:	2302      	movs	r3, #2
 8009fa0:	e063      	b.n	800a06a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	683a      	ldr	r2, [r7, #0]
 8009fa6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	689b      	ldr	r3, [r3, #8]
 8009fac:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d106      	bne.n	8009fc2 <dir_sdi+0x46>
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	2b02      	cmp	r3, #2
 8009fba:	d902      	bls.n	8009fc2 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fc0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d10c      	bne.n	8009fe2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	095b      	lsrs	r3, r3, #5
 8009fcc:	693a      	ldr	r2, [r7, #16]
 8009fce:	8912      	ldrh	r2, [r2, #8]
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d301      	bcc.n	8009fd8 <dir_sdi+0x5c>
 8009fd4:	2302      	movs	r3, #2
 8009fd6:	e048      	b.n	800a06a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	61da      	str	r2, [r3, #28]
 8009fe0:	e029      	b.n	800a036 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	895b      	ldrh	r3, [r3, #10]
 8009fe6:	025b      	lsls	r3, r3, #9
 8009fe8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009fea:	e019      	b.n	800a020 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6979      	ldr	r1, [r7, #20]
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f7ff fcfe 	bl	80099f2 <get_fat>
 8009ff6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ffe:	d101      	bne.n	800a004 <dir_sdi+0x88>
 800a000:	2301      	movs	r3, #1
 800a002:	e032      	b.n	800a06a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	2b01      	cmp	r3, #1
 800a008:	d904      	bls.n	800a014 <dir_sdi+0x98>
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	699b      	ldr	r3, [r3, #24]
 800a00e:	697a      	ldr	r2, [r7, #20]
 800a010:	429a      	cmp	r2, r3
 800a012:	d301      	bcc.n	800a018 <dir_sdi+0x9c>
 800a014:	2302      	movs	r3, #2
 800a016:	e028      	b.n	800a06a <dir_sdi+0xee>
			ofs -= csz;
 800a018:	683a      	ldr	r2, [r7, #0]
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	1ad3      	subs	r3, r2, r3
 800a01e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a020:	683a      	ldr	r2, [r7, #0]
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	429a      	cmp	r2, r3
 800a026:	d2e1      	bcs.n	8009fec <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a028:	6979      	ldr	r1, [r7, #20]
 800a02a:	6938      	ldr	r0, [r7, #16]
 800a02c:	f7ff fcc2 	bl	80099b4 <clust2sect>
 800a030:	4602      	mov	r2, r0
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	697a      	ldr	r2, [r7, #20]
 800a03a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	69db      	ldr	r3, [r3, #28]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d101      	bne.n	800a048 <dir_sdi+0xcc>
 800a044:	2302      	movs	r3, #2
 800a046:	e010      	b.n	800a06a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	69da      	ldr	r2, [r3, #28]
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	0a5b      	lsrs	r3, r3, #9
 800a050:	441a      	add	r2, r3
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a062:	441a      	add	r2, r3
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a068:	2300      	movs	r3, #0
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3718      	adds	r7, #24
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}

0800a072 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a072:	b580      	push	{r7, lr}
 800a074:	b086      	sub	sp, #24
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
 800a07a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	695b      	ldr	r3, [r3, #20]
 800a086:	3320      	adds	r3, #32
 800a088:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	69db      	ldr	r3, [r3, #28]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d003      	beq.n	800a09a <dir_next+0x28>
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a098:	d301      	bcc.n	800a09e <dir_next+0x2c>
 800a09a:	2304      	movs	r3, #4
 800a09c:	e0aa      	b.n	800a1f4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	f040 8098 	bne.w	800a1da <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	69db      	ldr	r3, [r3, #28]
 800a0ae:	1c5a      	adds	r2, r3, #1
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	699b      	ldr	r3, [r3, #24]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d10b      	bne.n	800a0d4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	095b      	lsrs	r3, r3, #5
 800a0c0:	68fa      	ldr	r2, [r7, #12]
 800a0c2:	8912      	ldrh	r2, [r2, #8]
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	f0c0 8088 	bcc.w	800a1da <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	61da      	str	r2, [r3, #28]
 800a0d0:	2304      	movs	r3, #4
 800a0d2:	e08f      	b.n	800a1f4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	0a5b      	lsrs	r3, r3, #9
 800a0d8:	68fa      	ldr	r2, [r7, #12]
 800a0da:	8952      	ldrh	r2, [r2, #10]
 800a0dc:	3a01      	subs	r2, #1
 800a0de:	4013      	ands	r3, r2
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d17a      	bne.n	800a1da <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	699b      	ldr	r3, [r3, #24]
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	4610      	mov	r0, r2
 800a0ee:	f7ff fc80 	bl	80099f2 <get_fat>
 800a0f2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	d801      	bhi.n	800a0fe <dir_next+0x8c>
 800a0fa:	2302      	movs	r3, #2
 800a0fc:	e07a      	b.n	800a1f4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a104:	d101      	bne.n	800a10a <dir_next+0x98>
 800a106:	2301      	movs	r3, #1
 800a108:	e074      	b.n	800a1f4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	699b      	ldr	r3, [r3, #24]
 800a10e:	697a      	ldr	r2, [r7, #20]
 800a110:	429a      	cmp	r2, r3
 800a112:	d358      	bcc.n	800a1c6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d104      	bne.n	800a124 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2200      	movs	r2, #0
 800a11e:	61da      	str	r2, [r3, #28]
 800a120:	2304      	movs	r3, #4
 800a122:	e067      	b.n	800a1f4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a124:	687a      	ldr	r2, [r7, #4]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	699b      	ldr	r3, [r3, #24]
 800a12a:	4619      	mov	r1, r3
 800a12c:	4610      	mov	r0, r2
 800a12e:	f7ff fe59 	bl	8009de4 <create_chain>
 800a132:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d101      	bne.n	800a13e <dir_next+0xcc>
 800a13a:	2307      	movs	r3, #7
 800a13c:	e05a      	b.n	800a1f4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	2b01      	cmp	r3, #1
 800a142:	d101      	bne.n	800a148 <dir_next+0xd6>
 800a144:	2302      	movs	r3, #2
 800a146:	e055      	b.n	800a1f4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a14e:	d101      	bne.n	800a154 <dir_next+0xe2>
 800a150:	2301      	movs	r3, #1
 800a152:	e04f      	b.n	800a1f4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a154:	68f8      	ldr	r0, [r7, #12]
 800a156:	f7ff fb4d 	bl	80097f4 <sync_window>
 800a15a:	4603      	mov	r3, r0
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d001      	beq.n	800a164 <dir_next+0xf2>
 800a160:	2301      	movs	r3, #1
 800a162:	e047      	b.n	800a1f4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	3334      	adds	r3, #52	; 0x34
 800a168:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a16c:	2100      	movs	r1, #0
 800a16e:	4618      	mov	r0, r3
 800a170:	f7ff f977 	bl	8009462 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a174:	2300      	movs	r3, #0
 800a176:	613b      	str	r3, [r7, #16]
 800a178:	6979      	ldr	r1, [r7, #20]
 800a17a:	68f8      	ldr	r0, [r7, #12]
 800a17c:	f7ff fc1a 	bl	80099b4 <clust2sect>
 800a180:	4602      	mov	r2, r0
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	631a      	str	r2, [r3, #48]	; 0x30
 800a186:	e012      	b.n	800a1ae <dir_next+0x13c>
						fs->wflag = 1;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2201      	movs	r2, #1
 800a18c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a18e:	68f8      	ldr	r0, [r7, #12]
 800a190:	f7ff fb30 	bl	80097f4 <sync_window>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d001      	beq.n	800a19e <dir_next+0x12c>
 800a19a:	2301      	movs	r3, #1
 800a19c:	e02a      	b.n	800a1f4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	613b      	str	r3, [r7, #16]
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1a8:	1c5a      	adds	r2, r3, #1
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	631a      	str	r2, [r3, #48]	; 0x30
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	895b      	ldrh	r3, [r3, #10]
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d3e6      	bcc.n	800a188 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	1ad2      	subs	r2, r2, r3
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	697a      	ldr	r2, [r7, #20]
 800a1ca:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a1cc:	6979      	ldr	r1, [r7, #20]
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	f7ff fbf0 	bl	80099b4 <clust2sect>
 800a1d4:	4602      	mov	r2, r0
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	68ba      	ldr	r2, [r7, #8]
 800a1de:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ec:	441a      	add	r2, r3
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a1f2:	2300      	movs	r3, #0
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3718      	adds	r7, #24
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b086      	sub	sp, #24
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a20c:	2100      	movs	r1, #0
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f7ff feb4 	bl	8009f7c <dir_sdi>
 800a214:	4603      	mov	r3, r0
 800a216:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a218:	7dfb      	ldrb	r3, [r7, #23]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d12b      	bne.n	800a276 <dir_alloc+0x7a>
		n = 0;
 800a21e:	2300      	movs	r3, #0
 800a220:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	69db      	ldr	r3, [r3, #28]
 800a226:	4619      	mov	r1, r3
 800a228:	68f8      	ldr	r0, [r7, #12]
 800a22a:	f7ff fb27 	bl	800987c <move_window>
 800a22e:	4603      	mov	r3, r0
 800a230:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a232:	7dfb      	ldrb	r3, [r7, #23]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d11d      	bne.n	800a274 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6a1b      	ldr	r3, [r3, #32]
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	2be5      	cmp	r3, #229	; 0xe5
 800a240:	d004      	beq.n	800a24c <dir_alloc+0x50>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6a1b      	ldr	r3, [r3, #32]
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d107      	bne.n	800a25c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	3301      	adds	r3, #1
 800a250:	613b      	str	r3, [r7, #16]
 800a252:	693a      	ldr	r2, [r7, #16]
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	429a      	cmp	r2, r3
 800a258:	d102      	bne.n	800a260 <dir_alloc+0x64>
 800a25a:	e00c      	b.n	800a276 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a25c:	2300      	movs	r3, #0
 800a25e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a260:	2101      	movs	r1, #1
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f7ff ff05 	bl	800a072 <dir_next>
 800a268:	4603      	mov	r3, r0
 800a26a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a26c:	7dfb      	ldrb	r3, [r7, #23]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d0d7      	beq.n	800a222 <dir_alloc+0x26>
 800a272:	e000      	b.n	800a276 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a274:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a276:	7dfb      	ldrb	r3, [r7, #23]
 800a278:	2b04      	cmp	r3, #4
 800a27a:	d101      	bne.n	800a280 <dir_alloc+0x84>
 800a27c:	2307      	movs	r3, #7
 800a27e:	75fb      	strb	r3, [r7, #23]
	return res;
 800a280:	7dfb      	ldrb	r3, [r7, #23]
}
 800a282:	4618      	mov	r0, r3
 800a284:	3718      	adds	r7, #24
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}

0800a28a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b084      	sub	sp, #16
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
 800a292:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	331a      	adds	r3, #26
 800a298:	4618      	mov	r0, r3
 800a29a:	f7ff f83f 	bl	800931c <ld_word>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	2b03      	cmp	r3, #3
 800a2a8:	d109      	bne.n	800a2be <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	3314      	adds	r3, #20
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f7ff f834 	bl	800931c <ld_word>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	041b      	lsls	r3, r3, #16
 800a2b8:	68fa      	ldr	r2, [r7, #12]
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a2be:	68fb      	ldr	r3, [r7, #12]
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3710      	adds	r7, #16
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	331a      	adds	r3, #26
 800a2d8:	687a      	ldr	r2, [r7, #4]
 800a2da:	b292      	uxth	r2, r2
 800a2dc:	4611      	mov	r1, r2
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7ff f857 	bl	8009392 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	2b03      	cmp	r3, #3
 800a2ea:	d109      	bne.n	800a300 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	f103 0214 	add.w	r2, r3, #20
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	0c1b      	lsrs	r3, r3, #16
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	4610      	mov	r0, r2
 800a2fc:	f7ff f849 	bl	8009392 <st_word>
	}
}
 800a300:	bf00      	nop
 800a302:	3710      	adds	r7, #16
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800a308:	b590      	push	{r4, r7, lr}
 800a30a:	b087      	sub	sp, #28
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	331a      	adds	r3, #26
 800a316:	4618      	mov	r0, r3
 800a318:	f7ff f800 	bl	800931c <ld_word>
 800a31c:	4603      	mov	r3, r0
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d001      	beq.n	800a326 <cmp_lfn+0x1e>
 800a322:	2300      	movs	r3, #0
 800a324:	e059      	b.n	800a3da <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a32e:	1e5a      	subs	r2, r3, #1
 800a330:	4613      	mov	r3, r2
 800a332:	005b      	lsls	r3, r3, #1
 800a334:	4413      	add	r3, r2
 800a336:	009b      	lsls	r3, r3, #2
 800a338:	4413      	add	r3, r2
 800a33a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a33c:	2301      	movs	r3, #1
 800a33e:	81fb      	strh	r3, [r7, #14]
 800a340:	2300      	movs	r3, #0
 800a342:	613b      	str	r3, [r7, #16]
 800a344:	e033      	b.n	800a3ae <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a346:	4a27      	ldr	r2, [pc, #156]	; (800a3e4 <cmp_lfn+0xdc>)
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	4413      	add	r3, r2
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	461a      	mov	r2, r3
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	4413      	add	r3, r2
 800a354:	4618      	mov	r0, r3
 800a356:	f7fe ffe1 	bl	800931c <ld_word>
 800a35a:	4603      	mov	r3, r0
 800a35c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a35e:	89fb      	ldrh	r3, [r7, #14]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d01a      	beq.n	800a39a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	2bfe      	cmp	r3, #254	; 0xfe
 800a368:	d812      	bhi.n	800a390 <cmp_lfn+0x88>
 800a36a:	89bb      	ldrh	r3, [r7, #12]
 800a36c:	4618      	mov	r0, r3
 800a36e:	f7fe fead 	bl	80090cc <ff_wtoupper>
 800a372:	4603      	mov	r3, r0
 800a374:	461c      	mov	r4, r3
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	1c5a      	adds	r2, r3, #1
 800a37a:	617a      	str	r2, [r7, #20]
 800a37c:	005b      	lsls	r3, r3, #1
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	4413      	add	r3, r2
 800a382:	881b      	ldrh	r3, [r3, #0]
 800a384:	4618      	mov	r0, r3
 800a386:	f7fe fea1 	bl	80090cc <ff_wtoupper>
 800a38a:	4603      	mov	r3, r0
 800a38c:	429c      	cmp	r4, r3
 800a38e:	d001      	beq.n	800a394 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800a390:	2300      	movs	r3, #0
 800a392:	e022      	b.n	800a3da <cmp_lfn+0xd2>
			}
			wc = uc;
 800a394:	89bb      	ldrh	r3, [r7, #12]
 800a396:	81fb      	strh	r3, [r7, #14]
 800a398:	e006      	b.n	800a3a8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a39a:	89bb      	ldrh	r3, [r7, #12]
 800a39c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d001      	beq.n	800a3a8 <cmp_lfn+0xa0>
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	e018      	b.n	800a3da <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	613b      	str	r3, [r7, #16]
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	2b0c      	cmp	r3, #12
 800a3b2:	d9c8      	bls.n	800a346 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d00b      	beq.n	800a3d8 <cmp_lfn+0xd0>
 800a3c0:	89fb      	ldrh	r3, [r7, #14]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d008      	beq.n	800a3d8 <cmp_lfn+0xd0>
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	005b      	lsls	r3, r3, #1
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	4413      	add	r3, r2
 800a3ce:	881b      	ldrh	r3, [r3, #0]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d001      	beq.n	800a3d8 <cmp_lfn+0xd0>
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	e000      	b.n	800a3da <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800a3d8:	2301      	movs	r3, #1
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	371c      	adds	r7, #28
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd90      	pop	{r4, r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	08012ad4 	.word	0x08012ad4

0800a3e8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b088      	sub	sp, #32
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	60f8      	str	r0, [r7, #12]
 800a3f0:	60b9      	str	r1, [r7, #8]
 800a3f2:	4611      	mov	r1, r2
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	71fb      	strb	r3, [r7, #7]
 800a3fa:	4613      	mov	r3, r2
 800a3fc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	330d      	adds	r3, #13
 800a402:	79ba      	ldrb	r2, [r7, #6]
 800a404:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	330b      	adds	r3, #11
 800a40a:	220f      	movs	r2, #15
 800a40c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	330c      	adds	r3, #12
 800a412:	2200      	movs	r2, #0
 800a414:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	331a      	adds	r3, #26
 800a41a:	2100      	movs	r1, #0
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7fe ffb8 	bl	8009392 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800a422:	79fb      	ldrb	r3, [r7, #7]
 800a424:	1e5a      	subs	r2, r3, #1
 800a426:	4613      	mov	r3, r2
 800a428:	005b      	lsls	r3, r3, #1
 800a42a:	4413      	add	r3, r2
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	4413      	add	r3, r2
 800a430:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800a432:	2300      	movs	r3, #0
 800a434:	82fb      	strh	r3, [r7, #22]
 800a436:	2300      	movs	r3, #0
 800a438:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a43a:	8afb      	ldrh	r3, [r7, #22]
 800a43c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a440:	4293      	cmp	r3, r2
 800a442:	d007      	beq.n	800a454 <put_lfn+0x6c>
 800a444:	69fb      	ldr	r3, [r7, #28]
 800a446:	1c5a      	adds	r2, r3, #1
 800a448:	61fa      	str	r2, [r7, #28]
 800a44a:	005b      	lsls	r3, r3, #1
 800a44c:	68fa      	ldr	r2, [r7, #12]
 800a44e:	4413      	add	r3, r2
 800a450:	881b      	ldrh	r3, [r3, #0]
 800a452:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800a454:	4a17      	ldr	r2, [pc, #92]	; (800a4b4 <put_lfn+0xcc>)
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	4413      	add	r3, r2
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	461a      	mov	r2, r3
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	4413      	add	r3, r2
 800a462:	8afa      	ldrh	r2, [r7, #22]
 800a464:	4611      	mov	r1, r2
 800a466:	4618      	mov	r0, r3
 800a468:	f7fe ff93 	bl	8009392 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a46c:	8afb      	ldrh	r3, [r7, #22]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d102      	bne.n	800a478 <put_lfn+0x90>
 800a472:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a476:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a478:	69bb      	ldr	r3, [r7, #24]
 800a47a:	3301      	adds	r3, #1
 800a47c:	61bb      	str	r3, [r7, #24]
 800a47e:	69bb      	ldr	r3, [r7, #24]
 800a480:	2b0c      	cmp	r3, #12
 800a482:	d9da      	bls.n	800a43a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800a484:	8afb      	ldrh	r3, [r7, #22]
 800a486:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d006      	beq.n	800a49c <put_lfn+0xb4>
 800a48e:	69fb      	ldr	r3, [r7, #28]
 800a490:	005b      	lsls	r3, r3, #1
 800a492:	68fa      	ldr	r2, [r7, #12]
 800a494:	4413      	add	r3, r2
 800a496:	881b      	ldrh	r3, [r3, #0]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d103      	bne.n	800a4a4 <put_lfn+0xbc>
 800a49c:	79fb      	ldrb	r3, [r7, #7]
 800a49e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4a2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	79fa      	ldrb	r2, [r7, #7]
 800a4a8:	701a      	strb	r2, [r3, #0]
}
 800a4aa:	bf00      	nop
 800a4ac:	3720      	adds	r7, #32
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	08012ad4 	.word	0x08012ad4

0800a4b8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b08c      	sub	sp, #48	; 0x30
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	60f8      	str	r0, [r7, #12]
 800a4c0:	60b9      	str	r1, [r7, #8]
 800a4c2:	607a      	str	r2, [r7, #4]
 800a4c4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800a4c6:	220b      	movs	r2, #11
 800a4c8:	68b9      	ldr	r1, [r7, #8]
 800a4ca:	68f8      	ldr	r0, [r7, #12]
 800a4cc:	f7fe ffa8 	bl	8009420 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	2b05      	cmp	r3, #5
 800a4d4:	d92b      	bls.n	800a52e <gen_numname+0x76>
		sr = seq;
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a4da:	e022      	b.n	800a522 <gen_numname+0x6a>
			wc = *lfn++;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	1c9a      	adds	r2, r3, #2
 800a4e0:	607a      	str	r2, [r7, #4]
 800a4e2:	881b      	ldrh	r3, [r3, #0]
 800a4e4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4ea:	e017      	b.n	800a51c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800a4ec:	69fb      	ldr	r3, [r7, #28]
 800a4ee:	005a      	lsls	r2, r3, #1
 800a4f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a4f2:	f003 0301 	and.w	r3, r3, #1
 800a4f6:	4413      	add	r3, r2
 800a4f8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a4fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a4fc:	085b      	lsrs	r3, r3, #1
 800a4fe:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a500:	69fb      	ldr	r3, [r7, #28]
 800a502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a506:	2b00      	cmp	r3, #0
 800a508:	d005      	beq.n	800a516 <gen_numname+0x5e>
 800a50a:	69fb      	ldr	r3, [r7, #28]
 800a50c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800a510:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800a514:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800a516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a518:	3301      	adds	r3, #1
 800a51a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a51e:	2b0f      	cmp	r3, #15
 800a520:	d9e4      	bls.n	800a4ec <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	881b      	ldrh	r3, [r3, #0]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d1d8      	bne.n	800a4dc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800a52a:	69fb      	ldr	r3, [r7, #28]
 800a52c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800a52e:	2307      	movs	r3, #7
 800a530:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	b2db      	uxtb	r3, r3
 800a536:	f003 030f 	and.w	r3, r3, #15
 800a53a:	b2db      	uxtb	r3, r3
 800a53c:	3330      	adds	r3, #48	; 0x30
 800a53e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800a542:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a546:	2b39      	cmp	r3, #57	; 0x39
 800a548:	d904      	bls.n	800a554 <gen_numname+0x9c>
 800a54a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a54e:	3307      	adds	r3, #7
 800a550:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800a554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a556:	1e5a      	subs	r2, r3, #1
 800a558:	62ba      	str	r2, [r7, #40]	; 0x28
 800a55a:	3330      	adds	r3, #48	; 0x30
 800a55c:	443b      	add	r3, r7
 800a55e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a562:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	091b      	lsrs	r3, r3, #4
 800a56a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d1df      	bne.n	800a532 <gen_numname+0x7a>
	ns[i] = '~';
 800a572:	f107 0214 	add.w	r2, r7, #20
 800a576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a578:	4413      	add	r3, r2
 800a57a:	227e      	movs	r2, #126	; 0x7e
 800a57c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a57e:	2300      	movs	r3, #0
 800a580:	627b      	str	r3, [r7, #36]	; 0x24
 800a582:	e002      	b.n	800a58a <gen_numname+0xd2>
 800a584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a586:	3301      	adds	r3, #1
 800a588:	627b      	str	r3, [r7, #36]	; 0x24
 800a58a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a58e:	429a      	cmp	r2, r3
 800a590:	d205      	bcs.n	800a59e <gen_numname+0xe6>
 800a592:	68fa      	ldr	r2, [r7, #12]
 800a594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a596:	4413      	add	r3, r2
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	2b20      	cmp	r3, #32
 800a59c:	d1f2      	bne.n	800a584 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a0:	2b07      	cmp	r3, #7
 800a5a2:	d807      	bhi.n	800a5b4 <gen_numname+0xfc>
 800a5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a6:	1c5a      	adds	r2, r3, #1
 800a5a8:	62ba      	str	r2, [r7, #40]	; 0x28
 800a5aa:	3330      	adds	r3, #48	; 0x30
 800a5ac:	443b      	add	r3, r7
 800a5ae:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800a5b2:	e000      	b.n	800a5b6 <gen_numname+0xfe>
 800a5b4:	2120      	movs	r1, #32
 800a5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b8:	1c5a      	adds	r2, r3, #1
 800a5ba:	627a      	str	r2, [r7, #36]	; 0x24
 800a5bc:	68fa      	ldr	r2, [r7, #12]
 800a5be:	4413      	add	r3, r2
 800a5c0:	460a      	mov	r2, r1
 800a5c2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800a5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c6:	2b07      	cmp	r3, #7
 800a5c8:	d9e9      	bls.n	800a59e <gen_numname+0xe6>
}
 800a5ca:	bf00      	nop
 800a5cc:	bf00      	nop
 800a5ce:	3730      	adds	r7, #48	; 0x30
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b085      	sub	sp, #20
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800a5e0:	230b      	movs	r3, #11
 800a5e2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800a5e4:	7bfb      	ldrb	r3, [r7, #15]
 800a5e6:	b2da      	uxtb	r2, r3
 800a5e8:	0852      	lsrs	r2, r2, #1
 800a5ea:	01db      	lsls	r3, r3, #7
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	b2da      	uxtb	r2, r3
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	1c59      	adds	r1, r3, #1
 800a5f4:	6079      	str	r1, [r7, #4]
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	4413      	add	r3, r2
 800a5fa:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	3b01      	subs	r3, #1
 800a600:	60bb      	str	r3, [r7, #8]
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d1ed      	bne.n	800a5e4 <sum_sfn+0x10>
	return sum;
 800a608:	7bfb      	ldrb	r3, [r7, #15]
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3714      	adds	r7, #20
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr

0800a616 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a616:	b580      	push	{r7, lr}
 800a618:	b086      	sub	sp, #24
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a624:	2100      	movs	r1, #0
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f7ff fca8 	bl	8009f7c <dir_sdi>
 800a62c:	4603      	mov	r3, r0
 800a62e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a630:	7dfb      	ldrb	r3, [r7, #23]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d001      	beq.n	800a63a <dir_find+0x24>
 800a636:	7dfb      	ldrb	r3, [r7, #23]
 800a638:	e0a9      	b.n	800a78e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a63a:	23ff      	movs	r3, #255	; 0xff
 800a63c:	753b      	strb	r3, [r7, #20]
 800a63e:	7d3b      	ldrb	r3, [r7, #20]
 800a640:	757b      	strb	r3, [r7, #21]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a648:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	69db      	ldr	r3, [r3, #28]
 800a64e:	4619      	mov	r1, r3
 800a650:	6938      	ldr	r0, [r7, #16]
 800a652:	f7ff f913 	bl	800987c <move_window>
 800a656:	4603      	mov	r3, r0
 800a658:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a65a:	7dfb      	ldrb	r3, [r7, #23]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	f040 8090 	bne.w	800a782 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6a1b      	ldr	r3, [r3, #32]
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a66a:	7dbb      	ldrb	r3, [r7, #22]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d102      	bne.n	800a676 <dir_find+0x60>
 800a670:	2304      	movs	r3, #4
 800a672:	75fb      	strb	r3, [r7, #23]
 800a674:	e08a      	b.n	800a78c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6a1b      	ldr	r3, [r3, #32]
 800a67a:	330b      	adds	r3, #11
 800a67c:	781b      	ldrb	r3, [r3, #0]
 800a67e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a682:	73fb      	strb	r3, [r7, #15]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	7bfa      	ldrb	r2, [r7, #15]
 800a688:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800a68a:	7dbb      	ldrb	r3, [r7, #22]
 800a68c:	2be5      	cmp	r3, #229	; 0xe5
 800a68e:	d007      	beq.n	800a6a0 <dir_find+0x8a>
 800a690:	7bfb      	ldrb	r3, [r7, #15]
 800a692:	f003 0308 	and.w	r3, r3, #8
 800a696:	2b00      	cmp	r3, #0
 800a698:	d009      	beq.n	800a6ae <dir_find+0x98>
 800a69a:	7bfb      	ldrb	r3, [r7, #15]
 800a69c:	2b0f      	cmp	r3, #15
 800a69e:	d006      	beq.n	800a6ae <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a6a0:	23ff      	movs	r3, #255	; 0xff
 800a6a2:	757b      	strb	r3, [r7, #21]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a6aa:	631a      	str	r2, [r3, #48]	; 0x30
 800a6ac:	e05e      	b.n	800a76c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800a6ae:	7bfb      	ldrb	r3, [r7, #15]
 800a6b0:	2b0f      	cmp	r3, #15
 800a6b2:	d136      	bne.n	800a722 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a6ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d154      	bne.n	800a76c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800a6c2:	7dbb      	ldrb	r3, [r7, #22]
 800a6c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d00d      	beq.n	800a6e8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6a1b      	ldr	r3, [r3, #32]
 800a6d0:	7b5b      	ldrb	r3, [r3, #13]
 800a6d2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800a6d4:	7dbb      	ldrb	r3, [r7, #22]
 800a6d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6da:	75bb      	strb	r3, [r7, #22]
 800a6dc:	7dbb      	ldrb	r3, [r7, #22]
 800a6de:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	695a      	ldr	r2, [r3, #20]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800a6e8:	7dba      	ldrb	r2, [r7, #22]
 800a6ea:	7d7b      	ldrb	r3, [r7, #21]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d115      	bne.n	800a71c <dir_find+0x106>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6a1b      	ldr	r3, [r3, #32]
 800a6f4:	330d      	adds	r3, #13
 800a6f6:	781b      	ldrb	r3, [r3, #0]
 800a6f8:	7d3a      	ldrb	r2, [r7, #20]
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	d10e      	bne.n	800a71c <dir_find+0x106>
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	68da      	ldr	r2, [r3, #12]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6a1b      	ldr	r3, [r3, #32]
 800a706:	4619      	mov	r1, r3
 800a708:	4610      	mov	r0, r2
 800a70a:	f7ff fdfd 	bl	800a308 <cmp_lfn>
 800a70e:	4603      	mov	r3, r0
 800a710:	2b00      	cmp	r3, #0
 800a712:	d003      	beq.n	800a71c <dir_find+0x106>
 800a714:	7d7b      	ldrb	r3, [r7, #21]
 800a716:	3b01      	subs	r3, #1
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	e000      	b.n	800a71e <dir_find+0x108>
 800a71c:	23ff      	movs	r3, #255	; 0xff
 800a71e:	757b      	strb	r3, [r7, #21]
 800a720:	e024      	b.n	800a76c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a722:	7d7b      	ldrb	r3, [r7, #21]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d109      	bne.n	800a73c <dir_find+0x126>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6a1b      	ldr	r3, [r3, #32]
 800a72c:	4618      	mov	r0, r3
 800a72e:	f7ff ff51 	bl	800a5d4 <sum_sfn>
 800a732:	4603      	mov	r3, r0
 800a734:	461a      	mov	r2, r3
 800a736:	7d3b      	ldrb	r3, [r7, #20]
 800a738:	4293      	cmp	r3, r2
 800a73a:	d024      	beq.n	800a786 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a742:	f003 0301 	and.w	r3, r3, #1
 800a746:	2b00      	cmp	r3, #0
 800a748:	d10a      	bne.n	800a760 <dir_find+0x14a>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6a18      	ldr	r0, [r3, #32]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	3324      	adds	r3, #36	; 0x24
 800a752:	220b      	movs	r2, #11
 800a754:	4619      	mov	r1, r3
 800a756:	f7fe fe9f 	bl	8009498 <mem_cmp>
 800a75a:	4603      	mov	r3, r0
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d014      	beq.n	800a78a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a760:	23ff      	movs	r3, #255	; 0xff
 800a762:	757b      	strb	r3, [r7, #21]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a76a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a76c:	2100      	movs	r1, #0
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f7ff fc7f 	bl	800a072 <dir_next>
 800a774:	4603      	mov	r3, r0
 800a776:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a778:	7dfb      	ldrb	r3, [r7, #23]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	f43f af65 	beq.w	800a64a <dir_find+0x34>
 800a780:	e004      	b.n	800a78c <dir_find+0x176>
		if (res != FR_OK) break;
 800a782:	bf00      	nop
 800a784:	e002      	b.n	800a78c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a786:	bf00      	nop
 800a788:	e000      	b.n	800a78c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a78a:	bf00      	nop

	return res;
 800a78c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3718      	adds	r7, #24
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
	...

0800a798 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b08c      	sub	sp, #48	; 0x30
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a7ac:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d001      	beq.n	800a7b8 <dir_register+0x20>
 800a7b4:	2306      	movs	r3, #6
 800a7b6:	e0e0      	b.n	800a97a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	627b      	str	r3, [r7, #36]	; 0x24
 800a7bc:	e002      	b.n	800a7c4 <dir_register+0x2c>
 800a7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c0:	3301      	adds	r3, #1
 800a7c2:	627b      	str	r3, [r7, #36]	; 0x24
 800a7c4:	69fb      	ldr	r3, [r7, #28]
 800a7c6:	68da      	ldr	r2, [r3, #12]
 800a7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ca:	005b      	lsls	r3, r3, #1
 800a7cc:	4413      	add	r3, r2
 800a7ce:	881b      	ldrh	r3, [r3, #0]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d1f4      	bne.n	800a7be <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800a7da:	f107 030c 	add.w	r3, r7, #12
 800a7de:	220c      	movs	r2, #12
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f7fe fe1d 	bl	8009420 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800a7e6:	7dfb      	ldrb	r3, [r7, #23]
 800a7e8:	f003 0301 	and.w	r3, r3, #1
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d032      	beq.n	800a856 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2240      	movs	r2, #64	; 0x40
 800a7f4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	62bb      	str	r3, [r7, #40]	; 0x28
 800a7fc:	e016      	b.n	800a82c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800a804:	69fb      	ldr	r3, [r7, #28]
 800a806:	68da      	ldr	r2, [r3, #12]
 800a808:	f107 010c 	add.w	r1, r7, #12
 800a80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80e:	f7ff fe53 	bl	800a4b8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f7ff feff 	bl	800a616 <dir_find>
 800a818:	4603      	mov	r3, r0
 800a81a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800a81e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a822:	2b00      	cmp	r3, #0
 800a824:	d106      	bne.n	800a834 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800a826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a828:	3301      	adds	r3, #1
 800a82a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a82e:	2b63      	cmp	r3, #99	; 0x63
 800a830:	d9e5      	bls.n	800a7fe <dir_register+0x66>
 800a832:	e000      	b.n	800a836 <dir_register+0x9e>
			if (res != FR_OK) break;
 800a834:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800a836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a838:	2b64      	cmp	r3, #100	; 0x64
 800a83a:	d101      	bne.n	800a840 <dir_register+0xa8>
 800a83c:	2307      	movs	r3, #7
 800a83e:	e09c      	b.n	800a97a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800a840:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a844:	2b04      	cmp	r3, #4
 800a846:	d002      	beq.n	800a84e <dir_register+0xb6>
 800a848:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a84c:	e095      	b.n	800a97a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800a84e:	7dfa      	ldrb	r2, [r7, #23]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800a856:	7dfb      	ldrb	r3, [r7, #23]
 800a858:	f003 0302 	and.w	r3, r3, #2
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d007      	beq.n	800a870 <dir_register+0xd8>
 800a860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a862:	330c      	adds	r3, #12
 800a864:	4a47      	ldr	r2, [pc, #284]	; (800a984 <dir_register+0x1ec>)
 800a866:	fba2 2303 	umull	r2, r3, r2, r3
 800a86a:	089b      	lsrs	r3, r3, #2
 800a86c:	3301      	adds	r3, #1
 800a86e:	e000      	b.n	800a872 <dir_register+0xda>
 800a870:	2301      	movs	r3, #1
 800a872:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800a874:	6a39      	ldr	r1, [r7, #32]
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f7ff fcc0 	bl	800a1fc <dir_alloc>
 800a87c:	4603      	mov	r3, r0
 800a87e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800a882:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a886:	2b00      	cmp	r3, #0
 800a888:	d148      	bne.n	800a91c <dir_register+0x184>
 800a88a:	6a3b      	ldr	r3, [r7, #32]
 800a88c:	3b01      	subs	r3, #1
 800a88e:	623b      	str	r3, [r7, #32]
 800a890:	6a3b      	ldr	r3, [r7, #32]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d042      	beq.n	800a91c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	695a      	ldr	r2, [r3, #20]
 800a89a:	6a3b      	ldr	r3, [r7, #32]
 800a89c:	015b      	lsls	r3, r3, #5
 800a89e:	1ad3      	subs	r3, r2, r3
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f7ff fb6a 	bl	8009f7c <dir_sdi>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800a8ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d132      	bne.n	800a91c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	3324      	adds	r3, #36	; 0x24
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f7ff fe8a 	bl	800a5d4 <sum_sfn>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	69db      	ldr	r3, [r3, #28]
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	69f8      	ldr	r0, [r7, #28]
 800a8cc:	f7fe ffd6 	bl	800987c <move_window>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800a8d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d11d      	bne.n	800a91a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800a8de:	69fb      	ldr	r3, [r7, #28]
 800a8e0:	68d8      	ldr	r0, [r3, #12]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6a19      	ldr	r1, [r3, #32]
 800a8e6:	6a3b      	ldr	r3, [r7, #32]
 800a8e8:	b2da      	uxtb	r2, r3
 800a8ea:	7efb      	ldrb	r3, [r7, #27]
 800a8ec:	f7ff fd7c 	bl	800a3e8 <put_lfn>
				fs->wflag = 1;
 800a8f0:	69fb      	ldr	r3, [r7, #28]
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800a8f6:	2100      	movs	r1, #0
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f7ff fbba 	bl	800a072 <dir_next>
 800a8fe:	4603      	mov	r3, r0
 800a900:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800a904:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d107      	bne.n	800a91c <dir_register+0x184>
 800a90c:	6a3b      	ldr	r3, [r7, #32]
 800a90e:	3b01      	subs	r3, #1
 800a910:	623b      	str	r3, [r7, #32]
 800a912:	6a3b      	ldr	r3, [r7, #32]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d1d5      	bne.n	800a8c4 <dir_register+0x12c>
 800a918:	e000      	b.n	800a91c <dir_register+0x184>
				if (res != FR_OK) break;
 800a91a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a91c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a920:	2b00      	cmp	r3, #0
 800a922:	d128      	bne.n	800a976 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	69db      	ldr	r3, [r3, #28]
 800a928:	4619      	mov	r1, r3
 800a92a:	69f8      	ldr	r0, [r7, #28]
 800a92c:	f7fe ffa6 	bl	800987c <move_window>
 800a930:	4603      	mov	r3, r0
 800a932:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800a936:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d11b      	bne.n	800a976 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6a1b      	ldr	r3, [r3, #32]
 800a942:	2220      	movs	r2, #32
 800a944:	2100      	movs	r1, #0
 800a946:	4618      	mov	r0, r3
 800a948:	f7fe fd8b 	bl	8009462 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6a18      	ldr	r0, [r3, #32]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	3324      	adds	r3, #36	; 0x24
 800a954:	220b      	movs	r2, #11
 800a956:	4619      	mov	r1, r3
 800a958:	f7fe fd62 	bl	8009420 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6a1b      	ldr	r3, [r3, #32]
 800a966:	330c      	adds	r3, #12
 800a968:	f002 0218 	and.w	r2, r2, #24
 800a96c:	b2d2      	uxtb	r2, r2
 800a96e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800a970:	69fb      	ldr	r3, [r7, #28]
 800a972:	2201      	movs	r2, #1
 800a974:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a976:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3730      	adds	r7, #48	; 0x30
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	4ec4ec4f 	.word	0x4ec4ec4f

0800a988 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b08a      	sub	sp, #40	; 0x28
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	613b      	str	r3, [r7, #16]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	68db      	ldr	r3, [r3, #12]
 800a99e:	60fb      	str	r3, [r7, #12]
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	617b      	str	r3, [r7, #20]
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800a9a8:	69bb      	ldr	r3, [r7, #24]
 800a9aa:	1c5a      	adds	r2, r3, #1
 800a9ac:	61ba      	str	r2, [r7, #24]
 800a9ae:	693a      	ldr	r2, [r7, #16]
 800a9b0:	4413      	add	r3, r2
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800a9b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a9b8:	2b1f      	cmp	r3, #31
 800a9ba:	d940      	bls.n	800aa3e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800a9bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a9be:	2b2f      	cmp	r3, #47	; 0x2f
 800a9c0:	d006      	beq.n	800a9d0 <create_name+0x48>
 800a9c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a9c4:	2b5c      	cmp	r3, #92	; 0x5c
 800a9c6:	d110      	bne.n	800a9ea <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a9c8:	e002      	b.n	800a9d0 <create_name+0x48>
 800a9ca:	69bb      	ldr	r3, [r7, #24]
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	61bb      	str	r3, [r7, #24]
 800a9d0:	693a      	ldr	r2, [r7, #16]
 800a9d2:	69bb      	ldr	r3, [r7, #24]
 800a9d4:	4413      	add	r3, r2
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	2b2f      	cmp	r3, #47	; 0x2f
 800a9da:	d0f6      	beq.n	800a9ca <create_name+0x42>
 800a9dc:	693a      	ldr	r2, [r7, #16]
 800a9de:	69bb      	ldr	r3, [r7, #24]
 800a9e0:	4413      	add	r3, r2
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	2b5c      	cmp	r3, #92	; 0x5c
 800a9e6:	d0f0      	beq.n	800a9ca <create_name+0x42>
			break;
 800a9e8:	e02a      	b.n	800aa40 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	2bfe      	cmp	r3, #254	; 0xfe
 800a9ee:	d901      	bls.n	800a9f4 <create_name+0x6c>
 800a9f0:	2306      	movs	r3, #6
 800a9f2:	e17d      	b.n	800acf0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800a9f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800a9fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a9fc:	2101      	movs	r1, #1
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7fe fb28 	bl	8009054 <ff_convert>
 800aa04:	4603      	mov	r3, r0
 800aa06:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800aa08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d101      	bne.n	800aa12 <create_name+0x8a>
 800aa0e:	2306      	movs	r3, #6
 800aa10:	e16e      	b.n	800acf0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800aa12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa14:	2b7f      	cmp	r3, #127	; 0x7f
 800aa16:	d809      	bhi.n	800aa2c <create_name+0xa4>
 800aa18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	488d      	ldr	r0, [pc, #564]	; (800ac54 <create_name+0x2cc>)
 800aa1e:	f7fe fd62 	bl	80094e6 <chk_chr>
 800aa22:	4603      	mov	r3, r0
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d001      	beq.n	800aa2c <create_name+0xa4>
 800aa28:	2306      	movs	r3, #6
 800aa2a:	e161      	b.n	800acf0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	1c5a      	adds	r2, r3, #1
 800aa30:	617a      	str	r2, [r7, #20]
 800aa32:	005b      	lsls	r3, r3, #1
 800aa34:	68fa      	ldr	r2, [r7, #12]
 800aa36:	4413      	add	r3, r2
 800aa38:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800aa3a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800aa3c:	e7b4      	b.n	800a9a8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800aa3e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800aa40:	693a      	ldr	r2, [r7, #16]
 800aa42:	69bb      	ldr	r3, [r7, #24]
 800aa44:	441a      	add	r2, r3
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800aa4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa4c:	2b1f      	cmp	r3, #31
 800aa4e:	d801      	bhi.n	800aa54 <create_name+0xcc>
 800aa50:	2304      	movs	r3, #4
 800aa52:	e000      	b.n	800aa56 <create_name+0xce>
 800aa54:	2300      	movs	r3, #0
 800aa56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800aa5a:	e011      	b.n	800aa80 <create_name+0xf8>
		w = lfn[di - 1];
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800aa62:	3b01      	subs	r3, #1
 800aa64:	005b      	lsls	r3, r3, #1
 800aa66:	68fa      	ldr	r2, [r7, #12]
 800aa68:	4413      	add	r3, r2
 800aa6a:	881b      	ldrh	r3, [r3, #0]
 800aa6c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800aa6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa70:	2b20      	cmp	r3, #32
 800aa72:	d002      	beq.n	800aa7a <create_name+0xf2>
 800aa74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa76:	2b2e      	cmp	r3, #46	; 0x2e
 800aa78:	d106      	bne.n	800aa88 <create_name+0x100>
		di--;
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	3b01      	subs	r3, #1
 800aa7e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d1ea      	bne.n	800aa5c <create_name+0xd4>
 800aa86:	e000      	b.n	800aa8a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800aa88:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	005b      	lsls	r3, r3, #1
 800aa8e:	68fa      	ldr	r2, [r7, #12]
 800aa90:	4413      	add	r3, r2
 800aa92:	2200      	movs	r2, #0
 800aa94:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d101      	bne.n	800aaa0 <create_name+0x118>
 800aa9c:	2306      	movs	r3, #6
 800aa9e:	e127      	b.n	800acf0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	3324      	adds	r3, #36	; 0x24
 800aaa4:	220b      	movs	r2, #11
 800aaa6:	2120      	movs	r1, #32
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f7fe fcda 	bl	8009462 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800aaae:	2300      	movs	r3, #0
 800aab0:	61bb      	str	r3, [r7, #24]
 800aab2:	e002      	b.n	800aaba <create_name+0x132>
 800aab4:	69bb      	ldr	r3, [r7, #24]
 800aab6:	3301      	adds	r3, #1
 800aab8:	61bb      	str	r3, [r7, #24]
 800aaba:	69bb      	ldr	r3, [r7, #24]
 800aabc:	005b      	lsls	r3, r3, #1
 800aabe:	68fa      	ldr	r2, [r7, #12]
 800aac0:	4413      	add	r3, r2
 800aac2:	881b      	ldrh	r3, [r3, #0]
 800aac4:	2b20      	cmp	r3, #32
 800aac6:	d0f5      	beq.n	800aab4 <create_name+0x12c>
 800aac8:	69bb      	ldr	r3, [r7, #24]
 800aaca:	005b      	lsls	r3, r3, #1
 800aacc:	68fa      	ldr	r2, [r7, #12]
 800aace:	4413      	add	r3, r2
 800aad0:	881b      	ldrh	r3, [r3, #0]
 800aad2:	2b2e      	cmp	r3, #46	; 0x2e
 800aad4:	d0ee      	beq.n	800aab4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800aad6:	69bb      	ldr	r3, [r7, #24]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d009      	beq.n	800aaf0 <create_name+0x168>
 800aadc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aae0:	f043 0303 	orr.w	r3, r3, #3
 800aae4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800aae8:	e002      	b.n	800aaf0 <create_name+0x168>
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	3b01      	subs	r3, #1
 800aaee:	617b      	str	r3, [r7, #20]
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d009      	beq.n	800ab0a <create_name+0x182>
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800aafc:	3b01      	subs	r3, #1
 800aafe:	005b      	lsls	r3, r3, #1
 800ab00:	68fa      	ldr	r2, [r7, #12]
 800ab02:	4413      	add	r3, r2
 800ab04:	881b      	ldrh	r3, [r3, #0]
 800ab06:	2b2e      	cmp	r3, #46	; 0x2e
 800ab08:	d1ef      	bne.n	800aaea <create_name+0x162>

	i = b = 0; ni = 8;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ab10:	2300      	movs	r3, #0
 800ab12:	623b      	str	r3, [r7, #32]
 800ab14:	2308      	movs	r3, #8
 800ab16:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800ab18:	69bb      	ldr	r3, [r7, #24]
 800ab1a:	1c5a      	adds	r2, r3, #1
 800ab1c:	61ba      	str	r2, [r7, #24]
 800ab1e:	005b      	lsls	r3, r3, #1
 800ab20:	68fa      	ldr	r2, [r7, #12]
 800ab22:	4413      	add	r3, r2
 800ab24:	881b      	ldrh	r3, [r3, #0]
 800ab26:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800ab28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	f000 8090 	beq.w	800ac50 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800ab30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ab32:	2b20      	cmp	r3, #32
 800ab34:	d006      	beq.n	800ab44 <create_name+0x1bc>
 800ab36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ab38:	2b2e      	cmp	r3, #46	; 0x2e
 800ab3a:	d10a      	bne.n	800ab52 <create_name+0x1ca>
 800ab3c:	69ba      	ldr	r2, [r7, #24]
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d006      	beq.n	800ab52 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800ab44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab48:	f043 0303 	orr.w	r3, r3, #3
 800ab4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ab50:	e07d      	b.n	800ac4e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800ab52:	6a3a      	ldr	r2, [r7, #32]
 800ab54:	69fb      	ldr	r3, [r7, #28]
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d203      	bcs.n	800ab62 <create_name+0x1da>
 800ab5a:	69ba      	ldr	r2, [r7, #24]
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	429a      	cmp	r2, r3
 800ab60:	d123      	bne.n	800abaa <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800ab62:	69fb      	ldr	r3, [r7, #28]
 800ab64:	2b0b      	cmp	r3, #11
 800ab66:	d106      	bne.n	800ab76 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800ab68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab6c:	f043 0303 	orr.w	r3, r3, #3
 800ab70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ab74:	e075      	b.n	800ac62 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800ab76:	69ba      	ldr	r2, [r7, #24]
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d005      	beq.n	800ab8a <create_name+0x202>
 800ab7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab82:	f043 0303 	orr.w	r3, r3, #3
 800ab86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800ab8a:	69ba      	ldr	r2, [r7, #24]
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d866      	bhi.n	800ac60 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	61bb      	str	r3, [r7, #24]
 800ab96:	2308      	movs	r3, #8
 800ab98:	623b      	str	r3, [r7, #32]
 800ab9a:	230b      	movs	r3, #11
 800ab9c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800ab9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aba2:	009b      	lsls	r3, r3, #2
 800aba4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800aba8:	e051      	b.n	800ac4e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800abaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800abac:	2b7f      	cmp	r3, #127	; 0x7f
 800abae:	d914      	bls.n	800abda <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800abb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800abb2:	2100      	movs	r1, #0
 800abb4:	4618      	mov	r0, r3
 800abb6:	f7fe fa4d 	bl	8009054 <ff_convert>
 800abba:	4603      	mov	r3, r0
 800abbc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800abbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d004      	beq.n	800abce <create_name+0x246>
 800abc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800abc6:	3b80      	subs	r3, #128	; 0x80
 800abc8:	4a23      	ldr	r2, [pc, #140]	; (800ac58 <create_name+0x2d0>)
 800abca:	5cd3      	ldrb	r3, [r2, r3]
 800abcc:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800abce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abd2:	f043 0302 	orr.w	r3, r3, #2
 800abd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800abda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d007      	beq.n	800abf0 <create_name+0x268>
 800abe0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800abe2:	4619      	mov	r1, r3
 800abe4:	481d      	ldr	r0, [pc, #116]	; (800ac5c <create_name+0x2d4>)
 800abe6:	f7fe fc7e 	bl	80094e6 <chk_chr>
 800abea:	4603      	mov	r3, r0
 800abec:	2b00      	cmp	r3, #0
 800abee:	d008      	beq.n	800ac02 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800abf0:	235f      	movs	r3, #95	; 0x5f
 800abf2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800abf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abf8:	f043 0303 	orr.w	r3, r3, #3
 800abfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ac00:	e01b      	b.n	800ac3a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800ac02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac04:	2b40      	cmp	r3, #64	; 0x40
 800ac06:	d909      	bls.n	800ac1c <create_name+0x294>
 800ac08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac0a:	2b5a      	cmp	r3, #90	; 0x5a
 800ac0c:	d806      	bhi.n	800ac1c <create_name+0x294>
					b |= 2;
 800ac0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ac12:	f043 0302 	orr.w	r3, r3, #2
 800ac16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ac1a:	e00e      	b.n	800ac3a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800ac1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac1e:	2b60      	cmp	r3, #96	; 0x60
 800ac20:	d90b      	bls.n	800ac3a <create_name+0x2b2>
 800ac22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac24:	2b7a      	cmp	r3, #122	; 0x7a
 800ac26:	d808      	bhi.n	800ac3a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800ac28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ac2c:	f043 0301 	orr.w	r3, r3, #1
 800ac30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ac34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac36:	3b20      	subs	r3, #32
 800ac38:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800ac3a:	6a3b      	ldr	r3, [r7, #32]
 800ac3c:	1c5a      	adds	r2, r3, #1
 800ac3e:	623a      	str	r2, [r7, #32]
 800ac40:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ac42:	b2d1      	uxtb	r1, r2
 800ac44:	687a      	ldr	r2, [r7, #4]
 800ac46:	4413      	add	r3, r2
 800ac48:	460a      	mov	r2, r1
 800ac4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800ac4e:	e763      	b.n	800ab18 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800ac50:	bf00      	nop
 800ac52:	e006      	b.n	800ac62 <create_name+0x2da>
 800ac54:	0801263c 	.word	0x0801263c
 800ac58:	08012a54 	.word	0x08012a54
 800ac5c:	08012648 	.word	0x08012648
			if (si > di) break;			/* No extension */
 800ac60:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ac68:	2be5      	cmp	r3, #229	; 0xe5
 800ac6a:	d103      	bne.n	800ac74 <create_name+0x2ec>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2205      	movs	r2, #5
 800ac70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800ac74:	69fb      	ldr	r3, [r7, #28]
 800ac76:	2b08      	cmp	r3, #8
 800ac78:	d104      	bne.n	800ac84 <create_name+0x2fc>
 800ac7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ac7e:	009b      	lsls	r3, r3, #2
 800ac80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800ac84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ac88:	f003 030c 	and.w	r3, r3, #12
 800ac8c:	2b0c      	cmp	r3, #12
 800ac8e:	d005      	beq.n	800ac9c <create_name+0x314>
 800ac90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ac94:	f003 0303 	and.w	r3, r3, #3
 800ac98:	2b03      	cmp	r3, #3
 800ac9a:	d105      	bne.n	800aca8 <create_name+0x320>
 800ac9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aca0:	f043 0302 	orr.w	r3, r3, #2
 800aca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800aca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800acac:	f003 0302 	and.w	r3, r3, #2
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d117      	bne.n	800ace4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800acb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800acb8:	f003 0303 	and.w	r3, r3, #3
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d105      	bne.n	800accc <create_name+0x344>
 800acc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800acc4:	f043 0310 	orr.w	r3, r3, #16
 800acc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800accc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800acd0:	f003 030c 	and.w	r3, r3, #12
 800acd4:	2b04      	cmp	r3, #4
 800acd6:	d105      	bne.n	800ace4 <create_name+0x35c>
 800acd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800acdc:	f043 0308 	orr.w	r3, r3, #8
 800ace0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800acea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800acee:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3728      	adds	r7, #40	; 0x28
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b086      	sub	sp, #24
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ad0c:	e002      	b.n	800ad14 <follow_path+0x1c>
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	3301      	adds	r3, #1
 800ad12:	603b      	str	r3, [r7, #0]
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	2b2f      	cmp	r3, #47	; 0x2f
 800ad1a:	d0f8      	beq.n	800ad0e <follow_path+0x16>
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	781b      	ldrb	r3, [r3, #0]
 800ad20:	2b5c      	cmp	r3, #92	; 0x5c
 800ad22:	d0f4      	beq.n	800ad0e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	2200      	movs	r2, #0
 800ad28:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	781b      	ldrb	r3, [r3, #0]
 800ad2e:	2b1f      	cmp	r3, #31
 800ad30:	d80a      	bhi.n	800ad48 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2280      	movs	r2, #128	; 0x80
 800ad36:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ad3a:	2100      	movs	r1, #0
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f7ff f91d 	bl	8009f7c <dir_sdi>
 800ad42:	4603      	mov	r3, r0
 800ad44:	75fb      	strb	r3, [r7, #23]
 800ad46:	e043      	b.n	800add0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ad48:	463b      	mov	r3, r7
 800ad4a:	4619      	mov	r1, r3
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f7ff fe1b 	bl	800a988 <create_name>
 800ad52:	4603      	mov	r3, r0
 800ad54:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ad56:	7dfb      	ldrb	r3, [r7, #23]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d134      	bne.n	800adc6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f7ff fc5a 	bl	800a616 <dir_find>
 800ad62:	4603      	mov	r3, r0
 800ad64:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ad6c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ad6e:	7dfb      	ldrb	r3, [r7, #23]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d00a      	beq.n	800ad8a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ad74:	7dfb      	ldrb	r3, [r7, #23]
 800ad76:	2b04      	cmp	r3, #4
 800ad78:	d127      	bne.n	800adca <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ad7a:	7afb      	ldrb	r3, [r7, #11]
 800ad7c:	f003 0304 	and.w	r3, r3, #4
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d122      	bne.n	800adca <follow_path+0xd2>
 800ad84:	2305      	movs	r3, #5
 800ad86:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ad88:	e01f      	b.n	800adca <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ad8a:	7afb      	ldrb	r3, [r7, #11]
 800ad8c:	f003 0304 	and.w	r3, r3, #4
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d11c      	bne.n	800adce <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	799b      	ldrb	r3, [r3, #6]
 800ad98:	f003 0310 	and.w	r3, r3, #16
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d102      	bne.n	800ada6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ada0:	2305      	movs	r3, #5
 800ada2:	75fb      	strb	r3, [r7, #23]
 800ada4:	e014      	b.n	800add0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	695b      	ldr	r3, [r3, #20]
 800adb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adb4:	4413      	add	r3, r2
 800adb6:	4619      	mov	r1, r3
 800adb8:	68f8      	ldr	r0, [r7, #12]
 800adba:	f7ff fa66 	bl	800a28a <ld_clust>
 800adbe:	4602      	mov	r2, r0
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800adc4:	e7c0      	b.n	800ad48 <follow_path+0x50>
			if (res != FR_OK) break;
 800adc6:	bf00      	nop
 800adc8:	e002      	b.n	800add0 <follow_path+0xd8>
				break;
 800adca:	bf00      	nop
 800adcc:	e000      	b.n	800add0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800adce:	bf00      	nop
			}
		}
	}

	return res;
 800add0:	7dfb      	ldrb	r3, [r7, #23]
}
 800add2:	4618      	mov	r0, r3
 800add4:	3718      	adds	r7, #24
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}

0800adda <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800adda:	b480      	push	{r7}
 800addc:	b087      	sub	sp, #28
 800adde:	af00      	add	r7, sp, #0
 800ade0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ade2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ade6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d031      	beq.n	800ae54 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	617b      	str	r3, [r7, #20]
 800adf6:	e002      	b.n	800adfe <get_ldnumber+0x24>
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	3301      	adds	r3, #1
 800adfc:	617b      	str	r3, [r7, #20]
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	2b1f      	cmp	r3, #31
 800ae04:	d903      	bls.n	800ae0e <get_ldnumber+0x34>
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	781b      	ldrb	r3, [r3, #0]
 800ae0a:	2b3a      	cmp	r3, #58	; 0x3a
 800ae0c:	d1f4      	bne.n	800adf8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	2b3a      	cmp	r3, #58	; 0x3a
 800ae14:	d11c      	bne.n	800ae50 <get_ldnumber+0x76>
			tp = *path;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	1c5a      	adds	r2, r3, #1
 800ae20:	60fa      	str	r2, [r7, #12]
 800ae22:	781b      	ldrb	r3, [r3, #0]
 800ae24:	3b30      	subs	r3, #48	; 0x30
 800ae26:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	2b09      	cmp	r3, #9
 800ae2c:	d80e      	bhi.n	800ae4c <get_ldnumber+0x72>
 800ae2e:	68fa      	ldr	r2, [r7, #12]
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d10a      	bne.n	800ae4c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d107      	bne.n	800ae4c <get_ldnumber+0x72>
					vol = (int)i;
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	3301      	adds	r3, #1
 800ae44:	617b      	str	r3, [r7, #20]
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	697a      	ldr	r2, [r7, #20]
 800ae4a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	e002      	b.n	800ae56 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ae50:	2300      	movs	r3, #0
 800ae52:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ae54:	693b      	ldr	r3, [r7, #16]
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	371c      	adds	r7, #28
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr
	...

0800ae64 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b082      	sub	sp, #8
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2200      	movs	r2, #0
 800ae72:	70da      	strb	r2, [r3, #3]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae7a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ae7c:	6839      	ldr	r1, [r7, #0]
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f7fe fcfc 	bl	800987c <move_window>
 800ae84:	4603      	mov	r3, r0
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d001      	beq.n	800ae8e <check_fs+0x2a>
 800ae8a:	2304      	movs	r3, #4
 800ae8c:	e038      	b.n	800af00 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	3334      	adds	r3, #52	; 0x34
 800ae92:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ae96:	4618      	mov	r0, r3
 800ae98:	f7fe fa40 	bl	800931c <ld_word>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	461a      	mov	r2, r3
 800aea0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d001      	beq.n	800aeac <check_fs+0x48>
 800aea8:	2303      	movs	r3, #3
 800aeaa:	e029      	b.n	800af00 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aeb2:	2be9      	cmp	r3, #233	; 0xe9
 800aeb4:	d009      	beq.n	800aeca <check_fs+0x66>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aebc:	2beb      	cmp	r3, #235	; 0xeb
 800aebe:	d11e      	bne.n	800aefe <check_fs+0x9a>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800aec6:	2b90      	cmp	r3, #144	; 0x90
 800aec8:	d119      	bne.n	800aefe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	3334      	adds	r3, #52	; 0x34
 800aece:	3336      	adds	r3, #54	; 0x36
 800aed0:	4618      	mov	r0, r3
 800aed2:	f7fe fa3b 	bl	800934c <ld_dword>
 800aed6:	4603      	mov	r3, r0
 800aed8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800aedc:	4a0a      	ldr	r2, [pc, #40]	; (800af08 <check_fs+0xa4>)
 800aede:	4293      	cmp	r3, r2
 800aee0:	d101      	bne.n	800aee6 <check_fs+0x82>
 800aee2:	2300      	movs	r3, #0
 800aee4:	e00c      	b.n	800af00 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	3334      	adds	r3, #52	; 0x34
 800aeea:	3352      	adds	r3, #82	; 0x52
 800aeec:	4618      	mov	r0, r3
 800aeee:	f7fe fa2d 	bl	800934c <ld_dword>
 800aef2:	4603      	mov	r3, r0
 800aef4:	4a05      	ldr	r2, [pc, #20]	; (800af0c <check_fs+0xa8>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d101      	bne.n	800aefe <check_fs+0x9a>
 800aefa:	2300      	movs	r3, #0
 800aefc:	e000      	b.n	800af00 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800aefe:	2302      	movs	r3, #2
}
 800af00:	4618      	mov	r0, r3
 800af02:	3708      	adds	r7, #8
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}
 800af08:	00544146 	.word	0x00544146
 800af0c:	33544146 	.word	0x33544146

0800af10 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b096      	sub	sp, #88	; 0x58
 800af14:	af00      	add	r7, sp, #0
 800af16:	60f8      	str	r0, [r7, #12]
 800af18:	60b9      	str	r1, [r7, #8]
 800af1a:	4613      	mov	r3, r2
 800af1c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	2200      	movs	r2, #0
 800af22:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800af24:	68f8      	ldr	r0, [r7, #12]
 800af26:	f7ff ff58 	bl	800adda <get_ldnumber>
 800af2a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800af2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af2e:	2b00      	cmp	r3, #0
 800af30:	da01      	bge.n	800af36 <find_volume+0x26>
 800af32:	230b      	movs	r3, #11
 800af34:	e230      	b.n	800b398 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800af36:	4aa1      	ldr	r2, [pc, #644]	; (800b1bc <find_volume+0x2ac>)
 800af38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af3e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800af40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af42:	2b00      	cmp	r3, #0
 800af44:	d101      	bne.n	800af4a <find_volume+0x3a>
 800af46:	230c      	movs	r3, #12
 800af48:	e226      	b.n	800b398 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af4e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800af50:	79fb      	ldrb	r3, [r7, #7]
 800af52:	f023 0301 	bic.w	r3, r3, #1
 800af56:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800af58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d01a      	beq.n	800af96 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800af60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af62:	785b      	ldrb	r3, [r3, #1]
 800af64:	4618      	mov	r0, r3
 800af66:	f7fe f93b 	bl	80091e0 <disk_status>
 800af6a:	4603      	mov	r3, r0
 800af6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800af70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800af74:	f003 0301 	and.w	r3, r3, #1
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d10c      	bne.n	800af96 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800af7c:	79fb      	ldrb	r3, [r7, #7]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d007      	beq.n	800af92 <find_volume+0x82>
 800af82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800af86:	f003 0304 	and.w	r3, r3, #4
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d001      	beq.n	800af92 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800af8e:	230a      	movs	r3, #10
 800af90:	e202      	b.n	800b398 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800af92:	2300      	movs	r3, #0
 800af94:	e200      	b.n	800b398 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800af96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af98:	2200      	movs	r2, #0
 800af9a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800af9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af9e:	b2da      	uxtb	r2, r3
 800afa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800afa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa6:	785b      	ldrb	r3, [r3, #1]
 800afa8:	4618      	mov	r0, r3
 800afaa:	f7fe f933 	bl	8009214 <disk_initialize>
 800afae:	4603      	mov	r3, r0
 800afb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800afb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800afb8:	f003 0301 	and.w	r3, r3, #1
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d001      	beq.n	800afc4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800afc0:	2303      	movs	r3, #3
 800afc2:	e1e9      	b.n	800b398 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800afc4:	79fb      	ldrb	r3, [r7, #7]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d007      	beq.n	800afda <find_volume+0xca>
 800afca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800afce:	f003 0304 	and.w	r3, r3, #4
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d001      	beq.n	800afda <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800afd6:	230a      	movs	r3, #10
 800afd8:	e1de      	b.n	800b398 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800afda:	2300      	movs	r3, #0
 800afdc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800afde:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800afe0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800afe2:	f7ff ff3f 	bl	800ae64 <check_fs>
 800afe6:	4603      	mov	r3, r0
 800afe8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800afec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aff0:	2b02      	cmp	r3, #2
 800aff2:	d149      	bne.n	800b088 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800aff4:	2300      	movs	r3, #0
 800aff6:	643b      	str	r3, [r7, #64]	; 0x40
 800aff8:	e01e      	b.n	800b038 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800affa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800affc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b002:	011b      	lsls	r3, r3, #4
 800b004:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b008:	4413      	add	r3, r2
 800b00a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b00e:	3304      	adds	r3, #4
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d006      	beq.n	800b024 <find_volume+0x114>
 800b016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b018:	3308      	adds	r3, #8
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7fe f996 	bl	800934c <ld_dword>
 800b020:	4602      	mov	r2, r0
 800b022:	e000      	b.n	800b026 <find_volume+0x116>
 800b024:	2200      	movs	r2, #0
 800b026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b028:	009b      	lsls	r3, r3, #2
 800b02a:	3358      	adds	r3, #88	; 0x58
 800b02c:	443b      	add	r3, r7
 800b02e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b034:	3301      	adds	r3, #1
 800b036:	643b      	str	r3, [r7, #64]	; 0x40
 800b038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b03a:	2b03      	cmp	r3, #3
 800b03c:	d9dd      	bls.n	800affa <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b03e:	2300      	movs	r3, #0
 800b040:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b044:	2b00      	cmp	r3, #0
 800b046:	d002      	beq.n	800b04e <find_volume+0x13e>
 800b048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b04a:	3b01      	subs	r3, #1
 800b04c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b04e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	3358      	adds	r3, #88	; 0x58
 800b054:	443b      	add	r3, r7
 800b056:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b05a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b05c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d005      	beq.n	800b06e <find_volume+0x15e>
 800b062:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b064:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b066:	f7ff fefd 	bl	800ae64 <check_fs>
 800b06a:	4603      	mov	r3, r0
 800b06c:	e000      	b.n	800b070 <find_volume+0x160>
 800b06e:	2303      	movs	r3, #3
 800b070:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b074:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b078:	2b01      	cmp	r3, #1
 800b07a:	d905      	bls.n	800b088 <find_volume+0x178>
 800b07c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b07e:	3301      	adds	r3, #1
 800b080:	643b      	str	r3, [r7, #64]	; 0x40
 800b082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b084:	2b03      	cmp	r3, #3
 800b086:	d9e2      	bls.n	800b04e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b088:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b08c:	2b04      	cmp	r3, #4
 800b08e:	d101      	bne.n	800b094 <find_volume+0x184>
 800b090:	2301      	movs	r3, #1
 800b092:	e181      	b.n	800b398 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b094:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d901      	bls.n	800b0a0 <find_volume+0x190>
 800b09c:	230d      	movs	r3, #13
 800b09e:	e17b      	b.n	800b398 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a2:	3334      	adds	r3, #52	; 0x34
 800b0a4:	330b      	adds	r3, #11
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f7fe f938 	bl	800931c <ld_word>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0b2:	d001      	beq.n	800b0b8 <find_volume+0x1a8>
 800b0b4:	230d      	movs	r3, #13
 800b0b6:	e16f      	b.n	800b398 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ba:	3334      	adds	r3, #52	; 0x34
 800b0bc:	3316      	adds	r3, #22
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f7fe f92c 	bl	800931c <ld_word>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b0c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d106      	bne.n	800b0dc <find_volume+0x1cc>
 800b0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d0:	3334      	adds	r3, #52	; 0x34
 800b0d2:	3324      	adds	r3, #36	; 0x24
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f7fe f939 	bl	800934c <ld_dword>
 800b0da:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b0e0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b0e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ea:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ee:	789b      	ldrb	r3, [r3, #2]
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d005      	beq.n	800b100 <find_volume+0x1f0>
 800b0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f6:	789b      	ldrb	r3, [r3, #2]
 800b0f8:	2b02      	cmp	r3, #2
 800b0fa:	d001      	beq.n	800b100 <find_volume+0x1f0>
 800b0fc:	230d      	movs	r3, #13
 800b0fe:	e14b      	b.n	800b398 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b102:	789b      	ldrb	r3, [r3, #2]
 800b104:	461a      	mov	r2, r3
 800b106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b108:	fb02 f303 	mul.w	r3, r2, r3
 800b10c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b110:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b114:	b29a      	uxth	r2, r3
 800b116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b118:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b11c:	895b      	ldrh	r3, [r3, #10]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d008      	beq.n	800b134 <find_volume+0x224>
 800b122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b124:	895b      	ldrh	r3, [r3, #10]
 800b126:	461a      	mov	r2, r3
 800b128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b12a:	895b      	ldrh	r3, [r3, #10]
 800b12c:	3b01      	subs	r3, #1
 800b12e:	4013      	ands	r3, r2
 800b130:	2b00      	cmp	r3, #0
 800b132:	d001      	beq.n	800b138 <find_volume+0x228>
 800b134:	230d      	movs	r3, #13
 800b136:	e12f      	b.n	800b398 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b13a:	3334      	adds	r3, #52	; 0x34
 800b13c:	3311      	adds	r3, #17
 800b13e:	4618      	mov	r0, r3
 800b140:	f7fe f8ec 	bl	800931c <ld_word>
 800b144:	4603      	mov	r3, r0
 800b146:	461a      	mov	r2, r3
 800b148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b14a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b14e:	891b      	ldrh	r3, [r3, #8]
 800b150:	f003 030f 	and.w	r3, r3, #15
 800b154:	b29b      	uxth	r3, r3
 800b156:	2b00      	cmp	r3, #0
 800b158:	d001      	beq.n	800b15e <find_volume+0x24e>
 800b15a:	230d      	movs	r3, #13
 800b15c:	e11c      	b.n	800b398 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b160:	3334      	adds	r3, #52	; 0x34
 800b162:	3313      	adds	r3, #19
 800b164:	4618      	mov	r0, r3
 800b166:	f7fe f8d9 	bl	800931c <ld_word>
 800b16a:	4603      	mov	r3, r0
 800b16c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b16e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b170:	2b00      	cmp	r3, #0
 800b172:	d106      	bne.n	800b182 <find_volume+0x272>
 800b174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b176:	3334      	adds	r3, #52	; 0x34
 800b178:	3320      	adds	r3, #32
 800b17a:	4618      	mov	r0, r3
 800b17c:	f7fe f8e6 	bl	800934c <ld_dword>
 800b180:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b184:	3334      	adds	r3, #52	; 0x34
 800b186:	330e      	adds	r3, #14
 800b188:	4618      	mov	r0, r3
 800b18a:	f7fe f8c7 	bl	800931c <ld_word>
 800b18e:	4603      	mov	r3, r0
 800b190:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b192:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b194:	2b00      	cmp	r3, #0
 800b196:	d101      	bne.n	800b19c <find_volume+0x28c>
 800b198:	230d      	movs	r3, #13
 800b19a:	e0fd      	b.n	800b398 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b19c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b19e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1a0:	4413      	add	r3, r2
 800b1a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1a4:	8912      	ldrh	r2, [r2, #8]
 800b1a6:	0912      	lsrs	r2, r2, #4
 800b1a8:	b292      	uxth	r2, r2
 800b1aa:	4413      	add	r3, r2
 800b1ac:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b1ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	d204      	bcs.n	800b1c0 <find_volume+0x2b0>
 800b1b6:	230d      	movs	r3, #13
 800b1b8:	e0ee      	b.n	800b398 <find_volume+0x488>
 800b1ba:	bf00      	nop
 800b1bc:	200023b8 	.word	0x200023b8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b1c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c4:	1ad3      	subs	r3, r2, r3
 800b1c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1c8:	8952      	ldrh	r2, [r2, #10]
 800b1ca:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1ce:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d101      	bne.n	800b1da <find_volume+0x2ca>
 800b1d6:	230d      	movs	r3, #13
 800b1d8:	e0de      	b.n	800b398 <find_volume+0x488>
		fmt = FS_FAT32;
 800b1da:	2303      	movs	r3, #3
 800b1dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d802      	bhi.n	800b1f0 <find_volume+0x2e0>
 800b1ea:	2302      	movs	r3, #2
 800b1ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d802      	bhi.n	800b200 <find_volume+0x2f0>
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b202:	1c9a      	adds	r2, r3, #2
 800b204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b206:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800b208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b20a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b20c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b20e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b212:	441a      	add	r2, r3
 800b214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b216:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800b218:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b21c:	441a      	add	r2, r3
 800b21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b220:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800b222:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b226:	2b03      	cmp	r3, #3
 800b228:	d11e      	bne.n	800b268 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b22a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b22c:	3334      	adds	r3, #52	; 0x34
 800b22e:	332a      	adds	r3, #42	; 0x2a
 800b230:	4618      	mov	r0, r3
 800b232:	f7fe f873 	bl	800931c <ld_word>
 800b236:	4603      	mov	r3, r0
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d001      	beq.n	800b240 <find_volume+0x330>
 800b23c:	230d      	movs	r3, #13
 800b23e:	e0ab      	b.n	800b398 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b242:	891b      	ldrh	r3, [r3, #8]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d001      	beq.n	800b24c <find_volume+0x33c>
 800b248:	230d      	movs	r3, #13
 800b24a:	e0a5      	b.n	800b398 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b24e:	3334      	adds	r3, #52	; 0x34
 800b250:	332c      	adds	r3, #44	; 0x2c
 800b252:	4618      	mov	r0, r3
 800b254:	f7fe f87a 	bl	800934c <ld_dword>
 800b258:	4602      	mov	r2, r0
 800b25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b25c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b260:	699b      	ldr	r3, [r3, #24]
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	647b      	str	r3, [r7, #68]	; 0x44
 800b266:	e01f      	b.n	800b2a8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b26a:	891b      	ldrh	r3, [r3, #8]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d101      	bne.n	800b274 <find_volume+0x364>
 800b270:	230d      	movs	r3, #13
 800b272:	e091      	b.n	800b398 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b276:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b27a:	441a      	add	r2, r3
 800b27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b27e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b280:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b284:	2b02      	cmp	r3, #2
 800b286:	d103      	bne.n	800b290 <find_volume+0x380>
 800b288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b28a:	699b      	ldr	r3, [r3, #24]
 800b28c:	005b      	lsls	r3, r3, #1
 800b28e:	e00a      	b.n	800b2a6 <find_volume+0x396>
 800b290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b292:	699a      	ldr	r2, [r3, #24]
 800b294:	4613      	mov	r3, r2
 800b296:	005b      	lsls	r3, r3, #1
 800b298:	4413      	add	r3, r2
 800b29a:	085a      	lsrs	r2, r3, #1
 800b29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b29e:	699b      	ldr	r3, [r3, #24]
 800b2a0:	f003 0301 	and.w	r3, r3, #1
 800b2a4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b2a6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2aa:	69da      	ldr	r2, [r3, #28]
 800b2ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2ae:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b2b2:	0a5b      	lsrs	r3, r3, #9
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d201      	bcs.n	800b2bc <find_volume+0x3ac>
 800b2b8:	230d      	movs	r3, #13
 800b2ba:	e06d      	b.n	800b398 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b2c2:	615a      	str	r2, [r3, #20]
 800b2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c6:	695a      	ldr	r2, [r3, #20]
 800b2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ca:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800b2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ce:	2280      	movs	r2, #128	; 0x80
 800b2d0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b2d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b2d6:	2b03      	cmp	r3, #3
 800b2d8:	d149      	bne.n	800b36e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2dc:	3334      	adds	r3, #52	; 0x34
 800b2de:	3330      	adds	r3, #48	; 0x30
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f7fe f81b 	bl	800931c <ld_word>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d140      	bne.n	800b36e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b2ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b2f4:	f7fe fac2 	bl	800987c <move_window>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d137      	bne.n	800b36e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800b2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b300:	2200      	movs	r2, #0
 800b302:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b306:	3334      	adds	r3, #52	; 0x34
 800b308:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b30c:	4618      	mov	r0, r3
 800b30e:	f7fe f805 	bl	800931c <ld_word>
 800b312:	4603      	mov	r3, r0
 800b314:	461a      	mov	r2, r3
 800b316:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d127      	bne.n	800b36e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b320:	3334      	adds	r3, #52	; 0x34
 800b322:	4618      	mov	r0, r3
 800b324:	f7fe f812 	bl	800934c <ld_dword>
 800b328:	4603      	mov	r3, r0
 800b32a:	4a1d      	ldr	r2, [pc, #116]	; (800b3a0 <find_volume+0x490>)
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d11e      	bne.n	800b36e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b332:	3334      	adds	r3, #52	; 0x34
 800b334:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b338:	4618      	mov	r0, r3
 800b33a:	f7fe f807 	bl	800934c <ld_dword>
 800b33e:	4603      	mov	r3, r0
 800b340:	4a18      	ldr	r2, [pc, #96]	; (800b3a4 <find_volume+0x494>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d113      	bne.n	800b36e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b348:	3334      	adds	r3, #52	; 0x34
 800b34a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b34e:	4618      	mov	r0, r3
 800b350:	f7fd fffc 	bl	800934c <ld_dword>
 800b354:	4602      	mov	r2, r0
 800b356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b358:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b35c:	3334      	adds	r3, #52	; 0x34
 800b35e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b362:	4618      	mov	r0, r3
 800b364:	f7fd fff2 	bl	800934c <ld_dword>
 800b368:	4602      	mov	r2, r0
 800b36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b36c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b370:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b374:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b376:	4b0c      	ldr	r3, [pc, #48]	; (800b3a8 <find_volume+0x498>)
 800b378:	881b      	ldrh	r3, [r3, #0]
 800b37a:	3301      	adds	r3, #1
 800b37c:	b29a      	uxth	r2, r3
 800b37e:	4b0a      	ldr	r3, [pc, #40]	; (800b3a8 <find_volume+0x498>)
 800b380:	801a      	strh	r2, [r3, #0]
 800b382:	4b09      	ldr	r3, [pc, #36]	; (800b3a8 <find_volume+0x498>)
 800b384:	881a      	ldrh	r2, [r3, #0]
 800b386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b388:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800b38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b38c:	4a07      	ldr	r2, [pc, #28]	; (800b3ac <find_volume+0x49c>)
 800b38e:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b390:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b392:	f7fe fa0b 	bl	80097ac <clear_lock>
#endif
	return FR_OK;
 800b396:	2300      	movs	r3, #0
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3758      	adds	r7, #88	; 0x58
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}
 800b3a0:	41615252 	.word	0x41615252
 800b3a4:	61417272 	.word	0x61417272
 800b3a8:	200023bc 	.word	0x200023bc
 800b3ac:	200023e0 	.word	0x200023e0

0800b3b0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b084      	sub	sp, #16
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b3ba:	2309      	movs	r3, #9
 800b3bc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d01c      	beq.n	800b3fe <validate+0x4e>
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d018      	beq.n	800b3fe <validate+0x4e>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d013      	beq.n	800b3fe <validate+0x4e>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	889a      	ldrh	r2, [r3, #4]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	88db      	ldrh	r3, [r3, #6]
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d10c      	bne.n	800b3fe <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	785b      	ldrb	r3, [r3, #1]
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f7fd fef8 	bl	80091e0 <disk_status>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	f003 0301 	and.w	r3, r3, #1
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d101      	bne.n	800b3fe <validate+0x4e>
			res = FR_OK;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b3fe:	7bfb      	ldrb	r3, [r7, #15]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d102      	bne.n	800b40a <validate+0x5a>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	e000      	b.n	800b40c <validate+0x5c>
 800b40a:	2300      	movs	r3, #0
 800b40c:	683a      	ldr	r2, [r7, #0]
 800b40e:	6013      	str	r3, [r2, #0]
	return res;
 800b410:	7bfb      	ldrb	r3, [r7, #15]
}
 800b412:	4618      	mov	r0, r3
 800b414:	3710      	adds	r7, #16
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}
	...

0800b41c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b088      	sub	sp, #32
 800b420:	af00      	add	r7, sp, #0
 800b422:	60f8      	str	r0, [r7, #12]
 800b424:	60b9      	str	r1, [r7, #8]
 800b426:	4613      	mov	r3, r2
 800b428:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b42e:	f107 0310 	add.w	r3, r7, #16
 800b432:	4618      	mov	r0, r3
 800b434:	f7ff fcd1 	bl	800adda <get_ldnumber>
 800b438:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b43a:	69fb      	ldr	r3, [r7, #28]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	da01      	bge.n	800b444 <f_mount+0x28>
 800b440:	230b      	movs	r3, #11
 800b442:	e02b      	b.n	800b49c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b444:	4a17      	ldr	r2, [pc, #92]	; (800b4a4 <f_mount+0x88>)
 800b446:	69fb      	ldr	r3, [r7, #28]
 800b448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b44c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b44e:	69bb      	ldr	r3, [r7, #24]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d005      	beq.n	800b460 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b454:	69b8      	ldr	r0, [r7, #24]
 800b456:	f7fe f9a9 	bl	80097ac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b45a:	69bb      	ldr	r3, [r7, #24]
 800b45c:	2200      	movs	r2, #0
 800b45e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d002      	beq.n	800b46c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	2200      	movs	r2, #0
 800b46a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b46c:	68fa      	ldr	r2, [r7, #12]
 800b46e:	490d      	ldr	r1, [pc, #52]	; (800b4a4 <f_mount+0x88>)
 800b470:	69fb      	ldr	r3, [r7, #28]
 800b472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d002      	beq.n	800b482 <f_mount+0x66>
 800b47c:	79fb      	ldrb	r3, [r7, #7]
 800b47e:	2b01      	cmp	r3, #1
 800b480:	d001      	beq.n	800b486 <f_mount+0x6a>
 800b482:	2300      	movs	r3, #0
 800b484:	e00a      	b.n	800b49c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b486:	f107 010c 	add.w	r1, r7, #12
 800b48a:	f107 0308 	add.w	r3, r7, #8
 800b48e:	2200      	movs	r2, #0
 800b490:	4618      	mov	r0, r3
 800b492:	f7ff fd3d 	bl	800af10 <find_volume>
 800b496:	4603      	mov	r3, r0
 800b498:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b49a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3720      	adds	r7, #32
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	200023b8 	.word	0x200023b8

0800b4a8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b09a      	sub	sp, #104	; 0x68
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	60f8      	str	r0, [r7, #12]
 800b4b0:	60b9      	str	r1, [r7, #8]
 800b4b2:	4613      	mov	r3, r2
 800b4b4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d101      	bne.n	800b4c0 <f_open+0x18>
 800b4bc:	2309      	movs	r3, #9
 800b4be:	e194      	b.n	800b7ea <f_open+0x342>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b4c0:	79fb      	ldrb	r3, [r7, #7]
 800b4c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b4c6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b4c8:	79fa      	ldrb	r2, [r7, #7]
 800b4ca:	f107 0114 	add.w	r1, r7, #20
 800b4ce:	f107 0308 	add.w	r3, r7, #8
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7ff fd1c 	bl	800af10 <find_volume>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800b4de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	f040 8178 	bne.w	800b7d8 <f_open+0x330>
		dj.obj.fs = fs;
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b4ec:	68ba      	ldr	r2, [r7, #8]
 800b4ee:	f107 0318 	add.w	r3, r7, #24
 800b4f2:	4611      	mov	r1, r2
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f7ff fbff 	bl	800acf8 <follow_path>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b500:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b504:	2b00      	cmp	r3, #0
 800b506:	d11a      	bne.n	800b53e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b508:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b50c:	b25b      	sxtb	r3, r3
 800b50e:	2b00      	cmp	r3, #0
 800b510:	da03      	bge.n	800b51a <f_open+0x72>
				res = FR_INVALID_NAME;
 800b512:	2306      	movs	r3, #6
 800b514:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b518:	e011      	b.n	800b53e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b51a:	79fb      	ldrb	r3, [r7, #7]
 800b51c:	f023 0301 	bic.w	r3, r3, #1
 800b520:	2b00      	cmp	r3, #0
 800b522:	bf14      	ite	ne
 800b524:	2301      	movne	r3, #1
 800b526:	2300      	moveq	r3, #0
 800b528:	b2db      	uxtb	r3, r3
 800b52a:	461a      	mov	r2, r3
 800b52c:	f107 0318 	add.w	r3, r7, #24
 800b530:	4611      	mov	r1, r2
 800b532:	4618      	mov	r0, r3
 800b534:	f7fd fff2 	bl	800951c <chk_lock>
 800b538:	4603      	mov	r3, r0
 800b53a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b53e:	79fb      	ldrb	r3, [r7, #7]
 800b540:	f003 031c 	and.w	r3, r3, #28
 800b544:	2b00      	cmp	r3, #0
 800b546:	d07f      	beq.n	800b648 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b548:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d017      	beq.n	800b580 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b550:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b554:	2b04      	cmp	r3, #4
 800b556:	d10e      	bne.n	800b576 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b558:	f7fe f83c 	bl	80095d4 <enq_lock>
 800b55c:	4603      	mov	r3, r0
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d006      	beq.n	800b570 <f_open+0xc8>
 800b562:	f107 0318 	add.w	r3, r7, #24
 800b566:	4618      	mov	r0, r3
 800b568:	f7ff f916 	bl	800a798 <dir_register>
 800b56c:	4603      	mov	r3, r0
 800b56e:	e000      	b.n	800b572 <f_open+0xca>
 800b570:	2312      	movs	r3, #18
 800b572:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b576:	79fb      	ldrb	r3, [r7, #7]
 800b578:	f043 0308 	orr.w	r3, r3, #8
 800b57c:	71fb      	strb	r3, [r7, #7]
 800b57e:	e010      	b.n	800b5a2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b580:	7fbb      	ldrb	r3, [r7, #30]
 800b582:	f003 0311 	and.w	r3, r3, #17
 800b586:	2b00      	cmp	r3, #0
 800b588:	d003      	beq.n	800b592 <f_open+0xea>
					res = FR_DENIED;
 800b58a:	2307      	movs	r3, #7
 800b58c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b590:	e007      	b.n	800b5a2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b592:	79fb      	ldrb	r3, [r7, #7]
 800b594:	f003 0304 	and.w	r3, r3, #4
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d002      	beq.n	800b5a2 <f_open+0xfa>
 800b59c:	2308      	movs	r3, #8
 800b59e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b5a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d168      	bne.n	800b67c <f_open+0x1d4>
 800b5aa:	79fb      	ldrb	r3, [r7, #7]
 800b5ac:	f003 0308 	and.w	r3, r3, #8
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d063      	beq.n	800b67c <f_open+0x1d4>
				dw = GET_FATTIME();
 800b5b4:	f7fd fcf0 	bl	8008f98 <get_fattime>
 800b5b8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b5ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5bc:	330e      	adds	r3, #14
 800b5be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f7fd ff01 	bl	80093c8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c8:	3316      	adds	r3, #22
 800b5ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f7fd fefb 	bl	80093c8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b5d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d4:	330b      	adds	r3, #11
 800b5d6:	2220      	movs	r2, #32
 800b5d8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b5de:	4611      	mov	r1, r2
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f7fe fe52 	bl	800a28a <ld_clust>
 800b5e6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f7fe fe6a 	bl	800a2c8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f6:	331c      	adds	r3, #28
 800b5f8:	2100      	movs	r1, #0
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f7fd fee4 	bl	80093c8 <st_dword>
					fs->wflag = 1;
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	2201      	movs	r2, #1
 800b604:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d037      	beq.n	800b67c <f_open+0x1d4>
						dw = fs->winsect;
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b610:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800b612:	f107 0318 	add.w	r3, r7, #24
 800b616:	2200      	movs	r2, #0
 800b618:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b61a:	4618      	mov	r0, r3
 800b61c:	f7fe fb7d 	bl	8009d1a <remove_chain>
 800b620:	4603      	mov	r3, r0
 800b622:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800b626:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d126      	bne.n	800b67c <f_open+0x1d4>
							res = move_window(fs, dw);
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b632:	4618      	mov	r0, r3
 800b634:	f7fe f922 	bl	800987c <move_window>
 800b638:	4603      	mov	r3, r0
 800b63a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b642:	3a01      	subs	r2, #1
 800b644:	611a      	str	r2, [r3, #16]
 800b646:	e019      	b.n	800b67c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b648:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d115      	bne.n	800b67c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b650:	7fbb      	ldrb	r3, [r7, #30]
 800b652:	f003 0310 	and.w	r3, r3, #16
 800b656:	2b00      	cmp	r3, #0
 800b658:	d003      	beq.n	800b662 <f_open+0x1ba>
					res = FR_NO_FILE;
 800b65a:	2304      	movs	r3, #4
 800b65c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b660:	e00c      	b.n	800b67c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b662:	79fb      	ldrb	r3, [r7, #7]
 800b664:	f003 0302 	and.w	r3, r3, #2
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d007      	beq.n	800b67c <f_open+0x1d4>
 800b66c:	7fbb      	ldrb	r3, [r7, #30]
 800b66e:	f003 0301 	and.w	r3, r3, #1
 800b672:	2b00      	cmp	r3, #0
 800b674:	d002      	beq.n	800b67c <f_open+0x1d4>
						res = FR_DENIED;
 800b676:	2307      	movs	r3, #7
 800b678:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800b67c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b680:	2b00      	cmp	r3, #0
 800b682:	d128      	bne.n	800b6d6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b684:	79fb      	ldrb	r3, [r7, #7]
 800b686:	f003 0308 	and.w	r3, r3, #8
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d003      	beq.n	800b696 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b68e:	79fb      	ldrb	r3, [r7, #7]
 800b690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b694:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b69e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b6a4:	79fb      	ldrb	r3, [r7, #7]
 800b6a6:	f023 0301 	bic.w	r3, r3, #1
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	bf14      	ite	ne
 800b6ae:	2301      	movne	r3, #1
 800b6b0:	2300      	moveq	r3, #0
 800b6b2:	b2db      	uxtb	r3, r3
 800b6b4:	461a      	mov	r2, r3
 800b6b6:	f107 0318 	add.w	r3, r7, #24
 800b6ba:	4611      	mov	r1, r2
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f7fd ffab 	bl	8009618 <inc_lock>
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	691b      	ldr	r3, [r3, #16]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d102      	bne.n	800b6d6 <f_open+0x22e>
 800b6d0:	2302      	movs	r3, #2
 800b6d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b6d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d17c      	bne.n	800b7d8 <f_open+0x330>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6e2:	4611      	mov	r1, r2
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f7fe fdd0 	bl	800a28a <ld_clust>
 800b6ea:	4602      	mov	r2, r0
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6f2:	331c      	adds	r3, #28
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f7fd fe29 	bl	800934c <ld_dword>
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	2200      	movs	r2, #0
 800b704:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b706:	697a      	ldr	r2, [r7, #20]
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	88da      	ldrh	r2, [r3, #6]
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	79fa      	ldrb	r2, [r7, #7]
 800b718:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2200      	movs	r2, #0
 800b71e:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2200      	movs	r2, #0
 800b724:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	2200      	movs	r2, #0
 800b72a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b72c:	79fb      	ldrb	r3, [r7, #7]
 800b72e:	f003 0320 	and.w	r3, r3, #32
 800b732:	2b00      	cmp	r3, #0
 800b734:	d050      	beq.n	800b7d8 <f_open+0x330>
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	68db      	ldr	r3, [r3, #12]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d04c      	beq.n	800b7d8 <f_open+0x330>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	68da      	ldr	r2, [r3, #12]
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	895b      	ldrh	r3, [r3, #10]
 800b74a:	025b      	lsls	r3, r3, #9
 800b74c:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	689b      	ldr	r3, [r3, #8]
 800b752:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	68db      	ldr	r3, [r3, #12]
 800b758:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b75a:	e016      	b.n	800b78a <f_open+0x2e2>
					clst = get_fat(&fp->obj, clst);
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b760:	4618      	mov	r0, r3
 800b762:	f7fe f946 	bl	80099f2 <get_fat>
 800b766:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800b768:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b76a:	2b01      	cmp	r3, #1
 800b76c:	d802      	bhi.n	800b774 <f_open+0x2cc>
 800b76e:	2302      	movs	r3, #2
 800b770:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b774:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b776:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b77a:	d102      	bne.n	800b782 <f_open+0x2da>
 800b77c:	2301      	movs	r3, #1
 800b77e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b782:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b786:	1ad3      	subs	r3, r2, r3
 800b788:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b78a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d103      	bne.n	800b79a <f_open+0x2f2>
 800b792:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b794:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b796:	429a      	cmp	r2, r3
 800b798:	d8e0      	bhi.n	800b75c <f_open+0x2b4>
				}
				fp->clust = clst;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b79e:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b7a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d117      	bne.n	800b7d8 <f_open+0x330>
 800b7a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b7aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d012      	beq.n	800b7d8 <f_open+0x330>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f7fe f8fc 	bl	80099b4 <clust2sect>
 800b7bc:	64f8      	str	r0, [r7, #76]	; 0x4c
 800b7be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d103      	bne.n	800b7cc <f_open+0x324>
						res = FR_INT_ERR;
 800b7c4:	2302      	movs	r3, #2
 800b7c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b7ca:	e005      	b.n	800b7d8 <f_open+0x330>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b7cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b7ce:	0a5a      	lsrs	r2, r3, #9
 800b7d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7d2:	441a      	add	r2, r3
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	621a      	str	r2, [r3, #32]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b7d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d002      	beq.n	800b7e6 <f_open+0x33e>
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b7e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3768      	adds	r7, #104	; 0x68
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}

0800b7f2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b7f2:	b580      	push	{r7, lr}
 800b7f4:	b08c      	sub	sp, #48	; 0x30
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	60f8      	str	r0, [r7, #12]
 800b7fa:	60b9      	str	r1, [r7, #8]
 800b7fc:	607a      	str	r2, [r7, #4]
 800b7fe:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	2200      	movs	r2, #0
 800b808:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	f107 0210 	add.w	r2, r7, #16
 800b810:	4611      	mov	r1, r2
 800b812:	4618      	mov	r0, r3
 800b814:	f7ff fdcc 	bl	800b3b0 <validate>
 800b818:	4603      	mov	r3, r0
 800b81a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b81e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b822:	2b00      	cmp	r3, #0
 800b824:	d107      	bne.n	800b836 <f_write+0x44>
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	7d5b      	ldrb	r3, [r3, #21]
 800b82a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b82e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b832:	2b00      	cmp	r3, #0
 800b834:	d002      	beq.n	800b83c <f_write+0x4a>
 800b836:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b83a:	e13f      	b.n	800babc <f_write+0x2ca>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	7d1b      	ldrb	r3, [r3, #20]
 800b840:	f003 0302 	and.w	r3, r3, #2
 800b844:	2b00      	cmp	r3, #0
 800b846:	d101      	bne.n	800b84c <f_write+0x5a>
 800b848:	2307      	movs	r3, #7
 800b84a:	e137      	b.n	800babc <f_write+0x2ca>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	699a      	ldr	r2, [r3, #24]
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	441a      	add	r2, r3
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	699b      	ldr	r3, [r3, #24]
 800b858:	429a      	cmp	r2, r3
 800b85a:	f080 8121 	bcs.w	800baa0 <f_write+0x2ae>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	699b      	ldr	r3, [r3, #24]
 800b862:	43db      	mvns	r3, r3
 800b864:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b866:	e11b      	b.n	800baa0 <f_write+0x2ae>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	699b      	ldr	r3, [r3, #24]
 800b86c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b870:	2b00      	cmp	r3, #0
 800b872:	f040 80cc 	bne.w	800ba0e <f_write+0x21c>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	699b      	ldr	r3, [r3, #24]
 800b87a:	0a5b      	lsrs	r3, r3, #9
 800b87c:	693a      	ldr	r2, [r7, #16]
 800b87e:	8952      	ldrh	r2, [r2, #10]
 800b880:	3a01      	subs	r2, #1
 800b882:	4013      	ands	r3, r2
 800b884:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b886:	69bb      	ldr	r3, [r7, #24]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d143      	bne.n	800b914 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	699b      	ldr	r3, [r3, #24]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d10c      	bne.n	800b8ae <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	689b      	ldr	r3, [r3, #8]
 800b898:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d11a      	bne.n	800b8d6 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2100      	movs	r1, #0
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	f7fe fa9d 	bl	8009de4 <create_chain>
 800b8aa:	62b8      	str	r0, [r7, #40]	; 0x28
 800b8ac:	e013      	b.n	800b8d6 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d007      	beq.n	800b8c6 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	699b      	ldr	r3, [r3, #24]
 800b8ba:	4619      	mov	r1, r3
 800b8bc:	68f8      	ldr	r0, [r7, #12]
 800b8be:	f7fe fb29 	bl	8009f14 <clmt_clust>
 800b8c2:	62b8      	str	r0, [r7, #40]	; 0x28
 800b8c4:	e007      	b.n	800b8d6 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b8c6:	68fa      	ldr	r2, [r7, #12]
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	69db      	ldr	r3, [r3, #28]
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	4610      	mov	r0, r2
 800b8d0:	f7fe fa88 	bl	8009de4 <create_chain>
 800b8d4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	f000 80e6 	beq.w	800baaa <f_write+0x2b8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e0:	2b01      	cmp	r3, #1
 800b8e2:	d104      	bne.n	800b8ee <f_write+0xfc>
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	2202      	movs	r2, #2
 800b8e8:	755a      	strb	r2, [r3, #21]
 800b8ea:	2302      	movs	r3, #2
 800b8ec:	e0e6      	b.n	800babc <f_write+0x2ca>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b8f4:	d104      	bne.n	800b900 <f_write+0x10e>
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	755a      	strb	r2, [r3, #21]
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	e0dd      	b.n	800babc <f_write+0x2ca>
				fp->clust = clst;			/* Update current cluster */
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b904:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	689b      	ldr	r3, [r3, #8]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d102      	bne.n	800b914 <f_write+0x122>
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b912:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	6a1b      	ldr	r3, [r3, #32]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d10b      	bne.n	800b938 <f_write+0x146>
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	4618      	mov	r0, r3
 800b924:	f7fd ff66 	bl	80097f4 <sync_window>
 800b928:	4603      	mov	r3, r0
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d004      	beq.n	800b938 <f_write+0x146>
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	2201      	movs	r2, #1
 800b932:	755a      	strb	r2, [r3, #21]
 800b934:	2301      	movs	r3, #1
 800b936:	e0c1      	b.n	800babc <f_write+0x2ca>
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b938:	693a      	ldr	r2, [r7, #16]
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	69db      	ldr	r3, [r3, #28]
 800b93e:	4619      	mov	r1, r3
 800b940:	4610      	mov	r0, r2
 800b942:	f7fe f837 	bl	80099b4 <clust2sect>
 800b946:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d104      	bne.n	800b958 <f_write+0x166>
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2202      	movs	r2, #2
 800b952:	755a      	strb	r2, [r3, #21]
 800b954:	2302      	movs	r3, #2
 800b956:	e0b1      	b.n	800babc <f_write+0x2ca>
			sect += csect;
 800b958:	697a      	ldr	r2, [r7, #20]
 800b95a:	69bb      	ldr	r3, [r7, #24]
 800b95c:	4413      	add	r3, r2
 800b95e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	0a5b      	lsrs	r3, r3, #9
 800b964:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b966:	6a3b      	ldr	r3, [r7, #32]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d038      	beq.n	800b9de <f_write+0x1ec>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b96c:	69ba      	ldr	r2, [r7, #24]
 800b96e:	6a3b      	ldr	r3, [r7, #32]
 800b970:	4413      	add	r3, r2
 800b972:	693a      	ldr	r2, [r7, #16]
 800b974:	8952      	ldrh	r2, [r2, #10]
 800b976:	4293      	cmp	r3, r2
 800b978:	d905      	bls.n	800b986 <f_write+0x194>
					cc = fs->csize - csect;
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	895b      	ldrh	r3, [r3, #10]
 800b97e:	461a      	mov	r2, r3
 800b980:	69bb      	ldr	r3, [r7, #24]
 800b982:	1ad3      	subs	r3, r2, r3
 800b984:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	7858      	ldrb	r0, [r3, #1]
 800b98a:	6a3b      	ldr	r3, [r7, #32]
 800b98c:	697a      	ldr	r2, [r7, #20]
 800b98e:	69f9      	ldr	r1, [r7, #28]
 800b990:	f7fd fc86 	bl	80092a0 <disk_write>
 800b994:	4603      	mov	r3, r0
 800b996:	2b00      	cmp	r3, #0
 800b998:	d004      	beq.n	800b9a4 <f_write+0x1b2>
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2201      	movs	r2, #1
 800b99e:	755a      	strb	r2, [r3, #21]
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	e08b      	b.n	800babc <f_write+0x2ca>
#if _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	1ad3      	subs	r3, r2, r3
 800b9ac:	6a3a      	ldr	r2, [r7, #32]
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d911      	bls.n	800b9d6 <f_write+0x1e4>
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	1ad3      	subs	r3, r2, r3
 800b9c0:	025b      	lsls	r3, r3, #9
 800b9c2:	69fa      	ldr	r2, [r7, #28]
 800b9c4:	4413      	add	r3, r2
 800b9c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b9ca:	4619      	mov	r1, r3
 800b9cc:	f7fd fd28 	bl	8009420 <mem_cpy>
					fs->wflag = 0;
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	70da      	strb	r2, [r3, #3]
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b9d6:	6a3b      	ldr	r3, [r7, #32]
 800b9d8:	025b      	lsls	r3, r3, #9
 800b9da:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b9dc:	e043      	b.n	800ba66 <f_write+0x274>
			}
#if _FS_TINY
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	699a      	ldr	r2, [r3, #24]
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	68db      	ldr	r3, [r3, #12]
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d30e      	bcc.n	800ba08 <f_write+0x216>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f7fd ff01 	bl	80097f4 <sync_window>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d004      	beq.n	800ba02 <f_write+0x210>
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	755a      	strb	r2, [r3, #21]
 800b9fe:	2301      	movs	r3, #1
 800ba00:	e05c      	b.n	800babc <f_write+0x2ca>
				fs->winsect = sect;
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	697a      	ldr	r2, [r7, #20]
 800ba06:	631a      	str	r2, [r3, #48]	; 0x30
				fp->fptr < fp->obj.objsize &&
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
					ABORT(fs, FR_DISK_ERR);
			}
#endif
			fp->sect = sect;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	697a      	ldr	r2, [r7, #20]
 800ba0c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	699b      	ldr	r3, [r3, #24]
 800ba12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba16:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ba1a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ba1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d901      	bls.n	800ba28 <f_write+0x236>
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 800ba28:	693a      	ldr	r2, [r7, #16]
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	6a1b      	ldr	r3, [r3, #32]
 800ba2e:	4619      	mov	r1, r3
 800ba30:	4610      	mov	r0, r2
 800ba32:	f7fd ff23 	bl	800987c <move_window>
 800ba36:	4603      	mov	r3, r0
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d004      	beq.n	800ba46 <f_write+0x254>
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2201      	movs	r2, #1
 800ba40:	755a      	strb	r2, [r3, #21]
 800ba42:	2301      	movs	r3, #1
 800ba44:	e03a      	b.n	800babc <f_write+0x2ca>
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	699b      	ldr	r3, [r3, #24]
 800ba50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba54:	4413      	add	r3, r2
 800ba56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba58:	69f9      	ldr	r1, [r7, #28]
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7fd fce0 	bl	8009420 <mem_cpy>
		fs->wflag = 1;
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	2201      	movs	r2, #1
 800ba64:	70da      	strb	r2, [r3, #3]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ba66:	69fa      	ldr	r2, [r7, #28]
 800ba68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba6a:	4413      	add	r3, r2
 800ba6c:	61fb      	str	r3, [r7, #28]
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	699a      	ldr	r2, [r3, #24]
 800ba72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba74:	441a      	add	r2, r3
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	619a      	str	r2, [r3, #24]
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	68da      	ldr	r2, [r3, #12]
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	699b      	ldr	r3, [r3, #24]
 800ba82:	429a      	cmp	r2, r3
 800ba84:	bf38      	it	cc
 800ba86:	461a      	movcc	r2, r3
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	60da      	str	r2, [r3, #12]
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	681a      	ldr	r2, [r3, #0]
 800ba90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba92:	441a      	add	r2, r3
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	601a      	str	r2, [r3, #0]
 800ba98:	687a      	ldr	r2, [r7, #4]
 800ba9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba9c:	1ad3      	subs	r3, r2, r3
 800ba9e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	f47f aee0 	bne.w	800b868 <f_write+0x76>
 800baa8:	e000      	b.n	800baac <f_write+0x2ba>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800baaa:	bf00      	nop
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	7d1b      	ldrb	r3, [r3, #20]
 800bab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bab4:	b2da      	uxtb	r2, r3
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800baba:	2300      	movs	r3, #0
}
 800babc:	4618      	mov	r0, r3
 800babe:	3730      	adds	r7, #48	; 0x30
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}

0800bac4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b086      	sub	sp, #24
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f107 0208 	add.w	r2, r7, #8
 800bad2:	4611      	mov	r1, r2
 800bad4:	4618      	mov	r0, r3
 800bad6:	f7ff fc6b 	bl	800b3b0 <validate>
 800bada:	4603      	mov	r3, r0
 800badc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bade:	7dfb      	ldrb	r3, [r7, #23]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d14d      	bne.n	800bb80 <f_sync+0xbc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	7d1b      	ldrb	r3, [r3, #20]
 800bae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baec:	2b00      	cmp	r3, #0
 800baee:	d047      	beq.n	800bb80 <f_sync+0xbc>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800baf0:	f7fd fa52 	bl	8008f98 <get_fattime>
 800baf4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800baf6:	68ba      	ldr	r2, [r7, #8]
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bafc:	4619      	mov	r1, r3
 800bafe:	4610      	mov	r0, r2
 800bb00:	f7fd febc 	bl	800987c <move_window>
 800bb04:	4603      	mov	r3, r0
 800bb06:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800bb08:	7dfb      	ldrb	r3, [r7, #23]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d138      	bne.n	800bb80 <f_sync+0xbc>
					dir = fp->dir_ptr;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb12:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	330b      	adds	r3, #11
 800bb18:	781a      	ldrb	r2, [r3, #0]
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	330b      	adds	r3, #11
 800bb1e:	f042 0220 	orr.w	r2, r2, #32
 800bb22:	b2d2      	uxtb	r2, r2
 800bb24:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6818      	ldr	r0, [r3, #0]
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	689b      	ldr	r3, [r3, #8]
 800bb2e:	461a      	mov	r2, r3
 800bb30:	68f9      	ldr	r1, [r7, #12]
 800bb32:	f7fe fbc9 	bl	800a2c8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	f103 021c 	add.w	r2, r3, #28
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	68db      	ldr	r3, [r3, #12]
 800bb40:	4619      	mov	r1, r3
 800bb42:	4610      	mov	r0, r2
 800bb44:	f7fd fc40 	bl	80093c8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	3316      	adds	r3, #22
 800bb4c:	6939      	ldr	r1, [r7, #16]
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f7fd fc3a 	bl	80093c8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	3312      	adds	r3, #18
 800bb58:	2100      	movs	r1, #0
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f7fd fc19 	bl	8009392 <st_word>
					fs->wflag = 1;
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	2201      	movs	r2, #1
 800bb64:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f7fd feb5 	bl	80098d8 <sync_fs>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	7d1b      	ldrb	r3, [r3, #20]
 800bb76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb7a:	b2da      	uxtb	r2, r3
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bb80:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3718      	adds	r7, #24
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}

0800bb8a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bb8a:	b580      	push	{r7, lr}
 800bb8c:	b084      	sub	sp, #16
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f7ff ff96 	bl	800bac4 <f_sync>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bb9c:	7bfb      	ldrb	r3, [r7, #15]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d118      	bne.n	800bbd4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f107 0208 	add.w	r2, r7, #8
 800bba8:	4611      	mov	r1, r2
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7ff fc00 	bl	800b3b0 <validate>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bbb4:	7bfb      	ldrb	r3, [r7, #15]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d10c      	bne.n	800bbd4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	691b      	ldr	r3, [r3, #16]
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f7fd fdb8 	bl	8009734 <dec_lock>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bbc8:	7bfb      	ldrb	r3, [r7, #15]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d102      	bne.n	800bbd4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800bbd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3710      	adds	r7, #16
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}

0800bbde <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800bbde:	b580      	push	{r7, lr}
 800bbe0:	b090      	sub	sp, #64	; 0x40
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	6078      	str	r0, [r7, #4]
 800bbe6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f107 0208 	add.w	r2, r7, #8
 800bbee:	4611      	mov	r1, r2
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f7ff fbdd 	bl	800b3b0 <validate>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800bbfc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d103      	bne.n	800bc0c <f_lseek+0x2e>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	7d5b      	ldrb	r3, [r3, #21]
 800bc08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800bc0c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d002      	beq.n	800bc1a <f_lseek+0x3c>
 800bc14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bc18:	e188      	b.n	800bf2c <f_lseek+0x34e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	f000 80a2 	beq.w	800bd68 <f_lseek+0x18a>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc2a:	d15a      	bne.n	800bce2 <f_lseek+0x104>
			tbl = fp->cltbl;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc30:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800bc32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc34:	1d1a      	adds	r2, r3, #4
 800bc36:	627a      	str	r2, [r7, #36]	; 0x24
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	617b      	str	r3, [r7, #20]
 800bc3c:	2302      	movs	r3, #2
 800bc3e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	689b      	ldr	r3, [r3, #8]
 800bc44:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800bc46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d03a      	beq.n	800bcc2 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800bc4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc4e:	613b      	str	r3, [r7, #16]
 800bc50:	2300      	movs	r3, #0
 800bc52:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc56:	3302      	adds	r3, #2
 800bc58:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800bc5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc5c:	60fb      	str	r3, [r7, #12]
 800bc5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc60:	3301      	adds	r3, #1
 800bc62:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f7fd fec2 	bl	80099f2 <get_fat>
 800bc6e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800bc70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc72:	2b01      	cmp	r3, #1
 800bc74:	d804      	bhi.n	800bc80 <f_lseek+0xa2>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2202      	movs	r2, #2
 800bc7a:	755a      	strb	r2, [r3, #21]
 800bc7c:	2302      	movs	r3, #2
 800bc7e:	e155      	b.n	800bf2c <f_lseek+0x34e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bc80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc86:	d104      	bne.n	800bc92 <f_lseek+0xb4>
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2201      	movs	r2, #1
 800bc8c:	755a      	strb	r2, [r3, #21]
 800bc8e:	2301      	movs	r3, #1
 800bc90:	e14c      	b.n	800bf2c <f_lseek+0x34e>
					} while (cl == pcl + 1);
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	3301      	adds	r3, #1
 800bc96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	d0de      	beq.n	800bc5a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800bc9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d809      	bhi.n	800bcb8 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800bca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca6:	1d1a      	adds	r2, r3, #4
 800bca8:	627a      	str	r2, [r7, #36]	; 0x24
 800bcaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcac:	601a      	str	r2, [r3, #0]
 800bcae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb0:	1d1a      	adds	r2, r3, #4
 800bcb2:	627a      	str	r2, [r7, #36]	; 0x24
 800bcb4:	693a      	ldr	r2, [r7, #16]
 800bcb6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	699b      	ldr	r3, [r3, #24]
 800bcbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d3c4      	bcc.n	800bc4c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcc8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800bcca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	d803      	bhi.n	800bcda <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800bcd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	601a      	str	r2, [r3, #0]
 800bcd8:	e126      	b.n	800bf28 <f_lseek+0x34a>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800bcda:	2311      	movs	r3, #17
 800bcdc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800bce0:	e122      	b.n	800bf28 <f_lseek+0x34a>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	68db      	ldr	r3, [r3, #12]
 800bce6:	683a      	ldr	r2, [r7, #0]
 800bce8:	429a      	cmp	r2, r3
 800bcea:	d902      	bls.n	800bcf2 <f_lseek+0x114>
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	68db      	ldr	r3, [r3, #12]
 800bcf0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	683a      	ldr	r2, [r7, #0]
 800bcf6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	f000 8114 	beq.w	800bf28 <f_lseek+0x34a>
				fp->clust = clmt_clust(fp, ofs - 1);
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	3b01      	subs	r3, #1
 800bd04:	4619      	mov	r1, r3
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f7fe f904 	bl	8009f14 <clmt_clust>
 800bd0c:	4602      	mov	r2, r0
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800bd12:	68ba      	ldr	r2, [r7, #8]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	69db      	ldr	r3, [r3, #28]
 800bd18:	4619      	mov	r1, r3
 800bd1a:	4610      	mov	r0, r2
 800bd1c:	f7fd fe4a 	bl	80099b4 <clust2sect>
 800bd20:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800bd22:	69bb      	ldr	r3, [r7, #24]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d104      	bne.n	800bd32 <f_lseek+0x154>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2202      	movs	r2, #2
 800bd2c:	755a      	strb	r2, [r3, #21]
 800bd2e:	2302      	movs	r3, #2
 800bd30:	e0fc      	b.n	800bf2c <f_lseek+0x34e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	3b01      	subs	r3, #1
 800bd36:	0a5b      	lsrs	r3, r3, #9
 800bd38:	68ba      	ldr	r2, [r7, #8]
 800bd3a:	8952      	ldrh	r2, [r2, #10]
 800bd3c:	3a01      	subs	r2, #1
 800bd3e:	4013      	ands	r3, r2
 800bd40:	69ba      	ldr	r2, [r7, #24]
 800bd42:	4413      	add	r3, r2
 800bd44:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	699b      	ldr	r3, [r3, #24]
 800bd4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	f000 80ea 	beq.w	800bf28 <f_lseek+0x34a>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6a1b      	ldr	r3, [r3, #32]
 800bd58:	69ba      	ldr	r2, [r7, #24]
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	f000 80e4 	beq.w	800bf28 <f_lseek+0x34a>
						fp->flag &= (BYTE)~FA_DIRTY;
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
#endif
					fp->sect = dsc;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	69ba      	ldr	r2, [r7, #24]
 800bd64:	621a      	str	r2, [r3, #32]
 800bd66:	e0df      	b.n	800bf28 <f_lseek+0x34a>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	68db      	ldr	r3, [r3, #12]
 800bd6c:	683a      	ldr	r2, [r7, #0]
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	d908      	bls.n	800bd84 <f_lseek+0x1a6>
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	7d1b      	ldrb	r3, [r3, #20]
 800bd76:	f003 0302 	and.w	r3, r3, #2
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d102      	bne.n	800bd84 <f_lseek+0x1a6>
			ofs = fp->obj.objsize;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	68db      	ldr	r3, [r3, #12]
 800bd82:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	699b      	ldr	r3, [r3, #24]
 800bd88:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	637b      	str	r3, [r7, #52]	; 0x34
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd92:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	f000 80a7 	beq.w	800beea <f_lseek+0x30c>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	895b      	ldrh	r3, [r3, #10]
 800bda0:	025b      	lsls	r3, r3, #9
 800bda2:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800bda4:	6a3b      	ldr	r3, [r7, #32]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d01b      	beq.n	800bde2 <f_lseek+0x204>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	1e5a      	subs	r2, r3, #1
 800bdae:	69fb      	ldr	r3, [r7, #28]
 800bdb0:	fbb2 f2f3 	udiv	r2, r2, r3
 800bdb4:	6a3b      	ldr	r3, [r7, #32]
 800bdb6:	1e59      	subs	r1, r3, #1
 800bdb8:	69fb      	ldr	r3, [r7, #28]
 800bdba:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	d30f      	bcc.n	800bde2 <f_lseek+0x204>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800bdc2:	6a3b      	ldr	r3, [r7, #32]
 800bdc4:	1e5a      	subs	r2, r3, #1
 800bdc6:	69fb      	ldr	r3, [r7, #28]
 800bdc8:	425b      	negs	r3, r3
 800bdca:	401a      	ands	r2, r3
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	699b      	ldr	r3, [r3, #24]
 800bdd4:	683a      	ldr	r2, [r7, #0]
 800bdd6:	1ad3      	subs	r3, r2, r3
 800bdd8:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	69db      	ldr	r3, [r3, #28]
 800bdde:	63bb      	str	r3, [r7, #56]	; 0x38
 800bde0:	e022      	b.n	800be28 <f_lseek+0x24a>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	689b      	ldr	r3, [r3, #8]
 800bde6:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800bde8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d119      	bne.n	800be22 <f_lseek+0x244>
					clst = create_chain(&fp->obj, 0);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2100      	movs	r1, #0
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f7fd fff6 	bl	8009de4 <create_chain>
 800bdf8:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bdfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdfc:	2b01      	cmp	r3, #1
 800bdfe:	d104      	bne.n	800be0a <f_lseek+0x22c>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2202      	movs	r2, #2
 800be04:	755a      	strb	r2, [r3, #21]
 800be06:	2302      	movs	r3, #2
 800be08:	e090      	b.n	800bf2c <f_lseek+0x34e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800be0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be10:	d104      	bne.n	800be1c <f_lseek+0x23e>
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2201      	movs	r2, #1
 800be16:	755a      	strb	r2, [r3, #21]
 800be18:	2301      	movs	r3, #1
 800be1a:	e087      	b.n	800bf2c <f_lseek+0x34e>
					fp->obj.sclust = clst;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be20:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be26:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800be28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d05d      	beq.n	800beea <f_lseek+0x30c>
				while (ofs > bcs) {						/* Cluster following loop */
 800be2e:	e03a      	b.n	800bea6 <f_lseek+0x2c8>
					ofs -= bcs; fp->fptr += bcs;
 800be30:	683a      	ldr	r2, [r7, #0]
 800be32:	69fb      	ldr	r3, [r7, #28]
 800be34:	1ad3      	subs	r3, r2, r3
 800be36:	603b      	str	r3, [r7, #0]
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	699a      	ldr	r2, [r3, #24]
 800be3c:	69fb      	ldr	r3, [r7, #28]
 800be3e:	441a      	add	r2, r3
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	7d1b      	ldrb	r3, [r3, #20]
 800be48:	f003 0302 	and.w	r3, r3, #2
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d00b      	beq.n	800be68 <f_lseek+0x28a>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800be54:	4618      	mov	r0, r3
 800be56:	f7fd ffc5 	bl	8009de4 <create_chain>
 800be5a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800be5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d108      	bne.n	800be74 <f_lseek+0x296>
							ofs = 0; break;
 800be62:	2300      	movs	r3, #0
 800be64:	603b      	str	r3, [r7, #0]
 800be66:	e022      	b.n	800beae <f_lseek+0x2d0>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800be6c:	4618      	mov	r0, r3
 800be6e:	f7fd fdc0 	bl	80099f2 <get_fat>
 800be72:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800be74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be7a:	d104      	bne.n	800be86 <f_lseek+0x2a8>
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2201      	movs	r2, #1
 800be80:	755a      	strb	r2, [r3, #21]
 800be82:	2301      	movs	r3, #1
 800be84:	e052      	b.n	800bf2c <f_lseek+0x34e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800be86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be88:	2b01      	cmp	r3, #1
 800be8a:	d904      	bls.n	800be96 <f_lseek+0x2b8>
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	699b      	ldr	r3, [r3, #24]
 800be90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be92:	429a      	cmp	r2, r3
 800be94:	d304      	bcc.n	800bea0 <f_lseek+0x2c2>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2202      	movs	r2, #2
 800be9a:	755a      	strb	r2, [r3, #21]
 800be9c:	2302      	movs	r3, #2
 800be9e:	e045      	b.n	800bf2c <f_lseek+0x34e>
					fp->clust = clst;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bea4:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800bea6:	683a      	ldr	r2, [r7, #0]
 800bea8:	69fb      	ldr	r3, [r7, #28]
 800beaa:	429a      	cmp	r2, r3
 800beac:	d8c0      	bhi.n	800be30 <f_lseek+0x252>
				}
				fp->fptr += ofs;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	699a      	ldr	r2, [r3, #24]
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	441a      	add	r2, r3
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d012      	beq.n	800beea <f_lseek+0x30c>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bec8:	4618      	mov	r0, r3
 800beca:	f7fd fd73 	bl	80099b4 <clust2sect>
 800bece:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800bed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d104      	bne.n	800bee0 <f_lseek+0x302>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2202      	movs	r2, #2
 800beda:	755a      	strb	r2, [r3, #21]
 800bedc:	2302      	movs	r3, #2
 800bede:	e025      	b.n	800bf2c <f_lseek+0x34e>
					nsect += (DWORD)(ofs / SS(fs));
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	0a5b      	lsrs	r3, r3, #9
 800bee4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bee6:	4413      	add	r3, r2
 800bee8:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	699a      	ldr	r2, [r3, #24]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	68db      	ldr	r3, [r3, #12]
 800bef2:	429a      	cmp	r2, r3
 800bef4:	d90a      	bls.n	800bf0c <f_lseek+0x32e>
			fp->obj.objsize = fp->fptr;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	699a      	ldr	r2, [r3, #24]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	7d1b      	ldrb	r3, [r3, #20]
 800bf02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf06:	b2da      	uxtb	r2, r3
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	699b      	ldr	r3, [r3, #24]
 800bf10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d007      	beq.n	800bf28 <f_lseek+0x34a>
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6a1b      	ldr	r3, [r3, #32]
 800bf1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf1e:	429a      	cmp	r2, r3
 800bf20:	d002      	beq.n	800bf28 <f_lseek+0x34a>
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
#endif
			fp->sect = nsect;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf26:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800bf28:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3740      	adds	r7, #64	; 0x40
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}

0800bf34 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b098      	sub	sp, #96	; 0x60
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800bf3c:	f107 010c 	add.w	r1, r7, #12
 800bf40:	1d3b      	adds	r3, r7, #4
 800bf42:	2202      	movs	r2, #2
 800bf44:	4618      	mov	r0, r3
 800bf46:	f7fe ffe3 	bl	800af10 <find_volume>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 800bf54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	f040 80ec 	bne.w	800c136 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	f107 0310 	add.w	r3, r7, #16
 800bf64:	4611      	mov	r1, r2
 800bf66:	4618      	mov	r0, r3
 800bf68:	f7fe fec6 	bl	800acf8 <follow_path>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800bf72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d102      	bne.n	800bf80 <f_mkdir+0x4c>
 800bf7a:	2308      	movs	r3, #8
 800bf7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800bf80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf84:	2b04      	cmp	r3, #4
 800bf86:	f040 80d6 	bne.w	800c136 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800bf8a:	f107 0310 	add.w	r3, r7, #16
 800bf8e:	2100      	movs	r1, #0
 800bf90:	4618      	mov	r0, r3
 800bf92:	f7fd ff27 	bl	8009de4 <create_chain>
 800bf96:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	895b      	ldrh	r3, [r3, #10]
 800bf9c:	025b      	lsls	r3, r3, #9
 800bf9e:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800bfa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d102      	bne.n	800bfb2 <f_mkdir+0x7e>
 800bfac:	2307      	movs	r3, #7
 800bfae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 800bfb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d102      	bne.n	800bfbe <f_mkdir+0x8a>
 800bfb8:	2302      	movs	r3, #2
 800bfba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800bfbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bfc4:	d102      	bne.n	800bfcc <f_mkdir+0x98>
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800bfcc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d106      	bne.n	800bfe2 <f_mkdir+0xae>
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f7fd fc0c 	bl	80097f4 <sync_window>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 800bfe2:	f7fc ffd9 	bl	8008f98 <get_fattime>
 800bfe6:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 800bfe8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d16a      	bne.n	800c0c6 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bff4:	4618      	mov	r0, r3
 800bff6:	f7fd fcdd 	bl	80099b4 <clust2sect>
 800bffa:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	3334      	adds	r3, #52	; 0x34
 800c000:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 800c002:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c006:	2100      	movs	r1, #0
 800c008:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c00a:	f7fd fa2a 	bl	8009462 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800c00e:	220b      	movs	r2, #11
 800c010:	2120      	movs	r1, #32
 800c012:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c014:	f7fd fa25 	bl	8009462 <mem_set>
					dir[DIR_Name] = '.';
 800c018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c01a:	222e      	movs	r2, #46	; 0x2e
 800c01c:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800c01e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c020:	330b      	adds	r3, #11
 800c022:	2210      	movs	r2, #16
 800c024:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800c026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c028:	3316      	adds	r3, #22
 800c02a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c02c:	4618      	mov	r0, r3
 800c02e:	f7fd f9cb 	bl	80093c8 <st_dword>
					st_clust(fs, dir, dcl);
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c036:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c038:	4618      	mov	r0, r3
 800c03a:	f7fe f945 	bl	800a2c8 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800c03e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c040:	3320      	adds	r3, #32
 800c042:	2220      	movs	r2, #32
 800c044:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c046:	4618      	mov	r0, r3
 800c048:	f7fd f9ea 	bl	8009420 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800c04c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c04e:	3321      	adds	r3, #33	; 0x21
 800c050:	222e      	movs	r2, #46	; 0x2e
 800c052:	701a      	strb	r2, [r3, #0]
 800c054:	69bb      	ldr	r3, [r7, #24]
 800c056:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	781b      	ldrb	r3, [r3, #0]
 800c05c:	2b03      	cmp	r3, #3
 800c05e:	d106      	bne.n	800c06e <f_mkdir+0x13a>
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c064:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c066:	429a      	cmp	r2, r3
 800c068:	d101      	bne.n	800c06e <f_mkdir+0x13a>
 800c06a:	2300      	movs	r3, #0
 800c06c:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 800c06e:	68f8      	ldr	r0, [r7, #12]
 800c070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c072:	3320      	adds	r3, #32
 800c074:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c076:	4619      	mov	r1, r3
 800c078:	f7fe f926 	bl	800a2c8 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	895b      	ldrh	r3, [r3, #10]
 800c080:	65bb      	str	r3, [r7, #88]	; 0x58
 800c082:	e01b      	b.n	800c0bc <f_mkdir+0x188>
					fs->winsect = dsc++;
 800c084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c086:	1c5a      	adds	r2, r3, #1
 800c088:	657a      	str	r2, [r7, #84]	; 0x54
 800c08a:	68fa      	ldr	r2, [r7, #12]
 800c08c:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	2201      	movs	r2, #1
 800c092:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	4618      	mov	r0, r3
 800c098:	f7fd fbac 	bl	80097f4 <sync_window>
 800c09c:	4603      	mov	r3, r0
 800c09e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 800c0a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d10c      	bne.n	800c0c4 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 800c0aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c0ae:	2100      	movs	r1, #0
 800c0b0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c0b2:	f7fd f9d6 	bl	8009462 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800c0b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c0b8:	3b01      	subs	r3, #1
 800c0ba:	65bb      	str	r3, [r7, #88]	; 0x58
 800c0bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d1e0      	bne.n	800c084 <f_mkdir+0x150>
 800c0c2:	e000      	b.n	800c0c6 <f_mkdir+0x192>
					if (res != FR_OK) break;
 800c0c4:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800c0c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d107      	bne.n	800c0de <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800c0ce:	f107 0310 	add.w	r3, r7, #16
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f7fe fb60 	bl	800a798 <dir_register>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 800c0de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d120      	bne.n	800c128 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800c0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e8:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800c0ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0ec:	3316      	adds	r3, #22
 800c0ee:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f7fd f969 	bl	80093c8 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c0fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f7fe f8e3 	bl	800a2c8 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800c102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c104:	330b      	adds	r3, #11
 800c106:	2210      	movs	r2, #16
 800c108:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	2201      	movs	r2, #1
 800c10e:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800c110:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c114:	2b00      	cmp	r3, #0
 800c116:	d10e      	bne.n	800c136 <f_mkdir+0x202>
					res = sync_fs(fs);
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	4618      	mov	r0, r3
 800c11c:	f7fd fbdc 	bl	80098d8 <sync_fs>
 800c120:	4603      	mov	r3, r0
 800c122:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c126:	e006      	b.n	800c136 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800c128:	f107 0310 	add.w	r3, r7, #16
 800c12c:	2200      	movs	r2, #0
 800c12e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c130:	4618      	mov	r0, r3
 800c132:	f7fd fdf2 	bl	8009d1a <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800c136:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	3760      	adds	r7, #96	; 0x60
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}
	...

0800c144 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c144:	b480      	push	{r7}
 800c146:	b087      	sub	sp, #28
 800c148:	af00      	add	r7, sp, #0
 800c14a:	60f8      	str	r0, [r7, #12]
 800c14c:	60b9      	str	r1, [r7, #8]
 800c14e:	4613      	mov	r3, r2
 800c150:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c152:	2301      	movs	r3, #1
 800c154:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c156:	2300      	movs	r3, #0
 800c158:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c15a:	4b1f      	ldr	r3, [pc, #124]	; (800c1d8 <FATFS_LinkDriverEx+0x94>)
 800c15c:	7a5b      	ldrb	r3, [r3, #9]
 800c15e:	b2db      	uxtb	r3, r3
 800c160:	2b00      	cmp	r3, #0
 800c162:	d131      	bne.n	800c1c8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c164:	4b1c      	ldr	r3, [pc, #112]	; (800c1d8 <FATFS_LinkDriverEx+0x94>)
 800c166:	7a5b      	ldrb	r3, [r3, #9]
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	461a      	mov	r2, r3
 800c16c:	4b1a      	ldr	r3, [pc, #104]	; (800c1d8 <FATFS_LinkDriverEx+0x94>)
 800c16e:	2100      	movs	r1, #0
 800c170:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c172:	4b19      	ldr	r3, [pc, #100]	; (800c1d8 <FATFS_LinkDriverEx+0x94>)
 800c174:	7a5b      	ldrb	r3, [r3, #9]
 800c176:	b2db      	uxtb	r3, r3
 800c178:	4a17      	ldr	r2, [pc, #92]	; (800c1d8 <FATFS_LinkDriverEx+0x94>)
 800c17a:	009b      	lsls	r3, r3, #2
 800c17c:	4413      	add	r3, r2
 800c17e:	68fa      	ldr	r2, [r7, #12]
 800c180:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c182:	4b15      	ldr	r3, [pc, #84]	; (800c1d8 <FATFS_LinkDriverEx+0x94>)
 800c184:	7a5b      	ldrb	r3, [r3, #9]
 800c186:	b2db      	uxtb	r3, r3
 800c188:	461a      	mov	r2, r3
 800c18a:	4b13      	ldr	r3, [pc, #76]	; (800c1d8 <FATFS_LinkDriverEx+0x94>)
 800c18c:	4413      	add	r3, r2
 800c18e:	79fa      	ldrb	r2, [r7, #7]
 800c190:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c192:	4b11      	ldr	r3, [pc, #68]	; (800c1d8 <FATFS_LinkDriverEx+0x94>)
 800c194:	7a5b      	ldrb	r3, [r3, #9]
 800c196:	b2db      	uxtb	r3, r3
 800c198:	1c5a      	adds	r2, r3, #1
 800c19a:	b2d1      	uxtb	r1, r2
 800c19c:	4a0e      	ldr	r2, [pc, #56]	; (800c1d8 <FATFS_LinkDriverEx+0x94>)
 800c19e:	7251      	strb	r1, [r2, #9]
 800c1a0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c1a2:	7dbb      	ldrb	r3, [r7, #22]
 800c1a4:	3330      	adds	r3, #48	; 0x30
 800c1a6:	b2da      	uxtb	r2, r3
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	3301      	adds	r3, #1
 800c1b0:	223a      	movs	r2, #58	; 0x3a
 800c1b2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	3302      	adds	r3, #2
 800c1b8:	222f      	movs	r2, #47	; 0x2f
 800c1ba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	3303      	adds	r3, #3
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c1c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	371c      	adds	r7, #28
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d4:	4770      	bx	lr
 800c1d6:	bf00      	nop
 800c1d8:	200025e0 	.word	0x200025e0

0800c1dc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b082      	sub	sp, #8
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
 800c1e4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	6839      	ldr	r1, [r7, #0]
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f7ff ffaa 	bl	800c144 <FATFS_LinkDriverEx>
 800c1f0:	4603      	mov	r3, r0
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3708      	adds	r7, #8
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}

0800c1fa <atoi>:
 800c1fa:	220a      	movs	r2, #10
 800c1fc:	2100      	movs	r1, #0
 800c1fe:	f001 bfb3 	b.w	800e168 <strtol>
	...

0800c204 <__errno>:
 800c204:	4b01      	ldr	r3, [pc, #4]	; (800c20c <__errno+0x8>)
 800c206:	6818      	ldr	r0, [r3, #0]
 800c208:	4770      	bx	lr
 800c20a:	bf00      	nop
 800c20c:	20000178 	.word	0x20000178

0800c210 <__libc_init_array>:
 800c210:	b570      	push	{r4, r5, r6, lr}
 800c212:	4d0d      	ldr	r5, [pc, #52]	; (800c248 <__libc_init_array+0x38>)
 800c214:	4c0d      	ldr	r4, [pc, #52]	; (800c24c <__libc_init_array+0x3c>)
 800c216:	1b64      	subs	r4, r4, r5
 800c218:	10a4      	asrs	r4, r4, #2
 800c21a:	2600      	movs	r6, #0
 800c21c:	42a6      	cmp	r6, r4
 800c21e:	d109      	bne.n	800c234 <__libc_init_array+0x24>
 800c220:	4d0b      	ldr	r5, [pc, #44]	; (800c250 <__libc_init_array+0x40>)
 800c222:	4c0c      	ldr	r4, [pc, #48]	; (800c254 <__libc_init_array+0x44>)
 800c224:	f004 fdaa 	bl	8010d7c <_init>
 800c228:	1b64      	subs	r4, r4, r5
 800c22a:	10a4      	asrs	r4, r4, #2
 800c22c:	2600      	movs	r6, #0
 800c22e:	42a6      	cmp	r6, r4
 800c230:	d105      	bne.n	800c23e <__libc_init_array+0x2e>
 800c232:	bd70      	pop	{r4, r5, r6, pc}
 800c234:	f855 3b04 	ldr.w	r3, [r5], #4
 800c238:	4798      	blx	r3
 800c23a:	3601      	adds	r6, #1
 800c23c:	e7ee      	b.n	800c21c <__libc_init_array+0xc>
 800c23e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c242:	4798      	blx	r3
 800c244:	3601      	adds	r6, #1
 800c246:	e7f2      	b.n	800c22e <__libc_init_array+0x1e>
 800c248:	08012f94 	.word	0x08012f94
 800c24c:	08012f94 	.word	0x08012f94
 800c250:	08012f94 	.word	0x08012f94
 800c254:	08012f98 	.word	0x08012f98

0800c258 <malloc>:
 800c258:	4b02      	ldr	r3, [pc, #8]	; (800c264 <malloc+0xc>)
 800c25a:	4601      	mov	r1, r0
 800c25c:	6818      	ldr	r0, [r3, #0]
 800c25e:	f000 b88d 	b.w	800c37c <_malloc_r>
 800c262:	bf00      	nop
 800c264:	20000178 	.word	0x20000178

0800c268 <free>:
 800c268:	4b02      	ldr	r3, [pc, #8]	; (800c274 <free+0xc>)
 800c26a:	4601      	mov	r1, r0
 800c26c:	6818      	ldr	r0, [r3, #0]
 800c26e:	f000 b819 	b.w	800c2a4 <_free_r>
 800c272:	bf00      	nop
 800c274:	20000178 	.word	0x20000178

0800c278 <memcpy>:
 800c278:	440a      	add	r2, r1
 800c27a:	4291      	cmp	r1, r2
 800c27c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c280:	d100      	bne.n	800c284 <memcpy+0xc>
 800c282:	4770      	bx	lr
 800c284:	b510      	push	{r4, lr}
 800c286:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c28a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c28e:	4291      	cmp	r1, r2
 800c290:	d1f9      	bne.n	800c286 <memcpy+0xe>
 800c292:	bd10      	pop	{r4, pc}

0800c294 <memset>:
 800c294:	4402      	add	r2, r0
 800c296:	4603      	mov	r3, r0
 800c298:	4293      	cmp	r3, r2
 800c29a:	d100      	bne.n	800c29e <memset+0xa>
 800c29c:	4770      	bx	lr
 800c29e:	f803 1b01 	strb.w	r1, [r3], #1
 800c2a2:	e7f9      	b.n	800c298 <memset+0x4>

0800c2a4 <_free_r>:
 800c2a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c2a6:	2900      	cmp	r1, #0
 800c2a8:	d044      	beq.n	800c334 <_free_r+0x90>
 800c2aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2ae:	9001      	str	r0, [sp, #4]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	f1a1 0404 	sub.w	r4, r1, #4
 800c2b6:	bfb8      	it	lt
 800c2b8:	18e4      	addlt	r4, r4, r3
 800c2ba:	f003 fcaf 	bl	800fc1c <__malloc_lock>
 800c2be:	4a1e      	ldr	r2, [pc, #120]	; (800c338 <_free_r+0x94>)
 800c2c0:	9801      	ldr	r0, [sp, #4]
 800c2c2:	6813      	ldr	r3, [r2, #0]
 800c2c4:	b933      	cbnz	r3, 800c2d4 <_free_r+0x30>
 800c2c6:	6063      	str	r3, [r4, #4]
 800c2c8:	6014      	str	r4, [r2, #0]
 800c2ca:	b003      	add	sp, #12
 800c2cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c2d0:	f003 bcaa 	b.w	800fc28 <__malloc_unlock>
 800c2d4:	42a3      	cmp	r3, r4
 800c2d6:	d908      	bls.n	800c2ea <_free_r+0x46>
 800c2d8:	6825      	ldr	r5, [r4, #0]
 800c2da:	1961      	adds	r1, r4, r5
 800c2dc:	428b      	cmp	r3, r1
 800c2de:	bf01      	itttt	eq
 800c2e0:	6819      	ldreq	r1, [r3, #0]
 800c2e2:	685b      	ldreq	r3, [r3, #4]
 800c2e4:	1949      	addeq	r1, r1, r5
 800c2e6:	6021      	streq	r1, [r4, #0]
 800c2e8:	e7ed      	b.n	800c2c6 <_free_r+0x22>
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	685b      	ldr	r3, [r3, #4]
 800c2ee:	b10b      	cbz	r3, 800c2f4 <_free_r+0x50>
 800c2f0:	42a3      	cmp	r3, r4
 800c2f2:	d9fa      	bls.n	800c2ea <_free_r+0x46>
 800c2f4:	6811      	ldr	r1, [r2, #0]
 800c2f6:	1855      	adds	r5, r2, r1
 800c2f8:	42a5      	cmp	r5, r4
 800c2fa:	d10b      	bne.n	800c314 <_free_r+0x70>
 800c2fc:	6824      	ldr	r4, [r4, #0]
 800c2fe:	4421      	add	r1, r4
 800c300:	1854      	adds	r4, r2, r1
 800c302:	42a3      	cmp	r3, r4
 800c304:	6011      	str	r1, [r2, #0]
 800c306:	d1e0      	bne.n	800c2ca <_free_r+0x26>
 800c308:	681c      	ldr	r4, [r3, #0]
 800c30a:	685b      	ldr	r3, [r3, #4]
 800c30c:	6053      	str	r3, [r2, #4]
 800c30e:	4421      	add	r1, r4
 800c310:	6011      	str	r1, [r2, #0]
 800c312:	e7da      	b.n	800c2ca <_free_r+0x26>
 800c314:	d902      	bls.n	800c31c <_free_r+0x78>
 800c316:	230c      	movs	r3, #12
 800c318:	6003      	str	r3, [r0, #0]
 800c31a:	e7d6      	b.n	800c2ca <_free_r+0x26>
 800c31c:	6825      	ldr	r5, [r4, #0]
 800c31e:	1961      	adds	r1, r4, r5
 800c320:	428b      	cmp	r3, r1
 800c322:	bf04      	itt	eq
 800c324:	6819      	ldreq	r1, [r3, #0]
 800c326:	685b      	ldreq	r3, [r3, #4]
 800c328:	6063      	str	r3, [r4, #4]
 800c32a:	bf04      	itt	eq
 800c32c:	1949      	addeq	r1, r1, r5
 800c32e:	6021      	streq	r1, [r4, #0]
 800c330:	6054      	str	r4, [r2, #4]
 800c332:	e7ca      	b.n	800c2ca <_free_r+0x26>
 800c334:	b003      	add	sp, #12
 800c336:	bd30      	pop	{r4, r5, pc}
 800c338:	200025ec 	.word	0x200025ec

0800c33c <sbrk_aligned>:
 800c33c:	b570      	push	{r4, r5, r6, lr}
 800c33e:	4e0e      	ldr	r6, [pc, #56]	; (800c378 <sbrk_aligned+0x3c>)
 800c340:	460c      	mov	r4, r1
 800c342:	6831      	ldr	r1, [r6, #0]
 800c344:	4605      	mov	r5, r0
 800c346:	b911      	cbnz	r1, 800c34e <sbrk_aligned+0x12>
 800c348:	f000 ff7c 	bl	800d244 <_sbrk_r>
 800c34c:	6030      	str	r0, [r6, #0]
 800c34e:	4621      	mov	r1, r4
 800c350:	4628      	mov	r0, r5
 800c352:	f000 ff77 	bl	800d244 <_sbrk_r>
 800c356:	1c43      	adds	r3, r0, #1
 800c358:	d00a      	beq.n	800c370 <sbrk_aligned+0x34>
 800c35a:	1cc4      	adds	r4, r0, #3
 800c35c:	f024 0403 	bic.w	r4, r4, #3
 800c360:	42a0      	cmp	r0, r4
 800c362:	d007      	beq.n	800c374 <sbrk_aligned+0x38>
 800c364:	1a21      	subs	r1, r4, r0
 800c366:	4628      	mov	r0, r5
 800c368:	f000 ff6c 	bl	800d244 <_sbrk_r>
 800c36c:	3001      	adds	r0, #1
 800c36e:	d101      	bne.n	800c374 <sbrk_aligned+0x38>
 800c370:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c374:	4620      	mov	r0, r4
 800c376:	bd70      	pop	{r4, r5, r6, pc}
 800c378:	200025f0 	.word	0x200025f0

0800c37c <_malloc_r>:
 800c37c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c380:	1ccd      	adds	r5, r1, #3
 800c382:	f025 0503 	bic.w	r5, r5, #3
 800c386:	3508      	adds	r5, #8
 800c388:	2d0c      	cmp	r5, #12
 800c38a:	bf38      	it	cc
 800c38c:	250c      	movcc	r5, #12
 800c38e:	2d00      	cmp	r5, #0
 800c390:	4607      	mov	r7, r0
 800c392:	db01      	blt.n	800c398 <_malloc_r+0x1c>
 800c394:	42a9      	cmp	r1, r5
 800c396:	d905      	bls.n	800c3a4 <_malloc_r+0x28>
 800c398:	230c      	movs	r3, #12
 800c39a:	603b      	str	r3, [r7, #0]
 800c39c:	2600      	movs	r6, #0
 800c39e:	4630      	mov	r0, r6
 800c3a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3a4:	4e2e      	ldr	r6, [pc, #184]	; (800c460 <_malloc_r+0xe4>)
 800c3a6:	f003 fc39 	bl	800fc1c <__malloc_lock>
 800c3aa:	6833      	ldr	r3, [r6, #0]
 800c3ac:	461c      	mov	r4, r3
 800c3ae:	bb34      	cbnz	r4, 800c3fe <_malloc_r+0x82>
 800c3b0:	4629      	mov	r1, r5
 800c3b2:	4638      	mov	r0, r7
 800c3b4:	f7ff ffc2 	bl	800c33c <sbrk_aligned>
 800c3b8:	1c43      	adds	r3, r0, #1
 800c3ba:	4604      	mov	r4, r0
 800c3bc:	d14d      	bne.n	800c45a <_malloc_r+0xde>
 800c3be:	6834      	ldr	r4, [r6, #0]
 800c3c0:	4626      	mov	r6, r4
 800c3c2:	2e00      	cmp	r6, #0
 800c3c4:	d140      	bne.n	800c448 <_malloc_r+0xcc>
 800c3c6:	6823      	ldr	r3, [r4, #0]
 800c3c8:	4631      	mov	r1, r6
 800c3ca:	4638      	mov	r0, r7
 800c3cc:	eb04 0803 	add.w	r8, r4, r3
 800c3d0:	f000 ff38 	bl	800d244 <_sbrk_r>
 800c3d4:	4580      	cmp	r8, r0
 800c3d6:	d13a      	bne.n	800c44e <_malloc_r+0xd2>
 800c3d8:	6821      	ldr	r1, [r4, #0]
 800c3da:	3503      	adds	r5, #3
 800c3dc:	1a6d      	subs	r5, r5, r1
 800c3de:	f025 0503 	bic.w	r5, r5, #3
 800c3e2:	3508      	adds	r5, #8
 800c3e4:	2d0c      	cmp	r5, #12
 800c3e6:	bf38      	it	cc
 800c3e8:	250c      	movcc	r5, #12
 800c3ea:	4629      	mov	r1, r5
 800c3ec:	4638      	mov	r0, r7
 800c3ee:	f7ff ffa5 	bl	800c33c <sbrk_aligned>
 800c3f2:	3001      	adds	r0, #1
 800c3f4:	d02b      	beq.n	800c44e <_malloc_r+0xd2>
 800c3f6:	6823      	ldr	r3, [r4, #0]
 800c3f8:	442b      	add	r3, r5
 800c3fa:	6023      	str	r3, [r4, #0]
 800c3fc:	e00e      	b.n	800c41c <_malloc_r+0xa0>
 800c3fe:	6822      	ldr	r2, [r4, #0]
 800c400:	1b52      	subs	r2, r2, r5
 800c402:	d41e      	bmi.n	800c442 <_malloc_r+0xc6>
 800c404:	2a0b      	cmp	r2, #11
 800c406:	d916      	bls.n	800c436 <_malloc_r+0xba>
 800c408:	1961      	adds	r1, r4, r5
 800c40a:	42a3      	cmp	r3, r4
 800c40c:	6025      	str	r5, [r4, #0]
 800c40e:	bf18      	it	ne
 800c410:	6059      	strne	r1, [r3, #4]
 800c412:	6863      	ldr	r3, [r4, #4]
 800c414:	bf08      	it	eq
 800c416:	6031      	streq	r1, [r6, #0]
 800c418:	5162      	str	r2, [r4, r5]
 800c41a:	604b      	str	r3, [r1, #4]
 800c41c:	4638      	mov	r0, r7
 800c41e:	f104 060b 	add.w	r6, r4, #11
 800c422:	f003 fc01 	bl	800fc28 <__malloc_unlock>
 800c426:	f026 0607 	bic.w	r6, r6, #7
 800c42a:	1d23      	adds	r3, r4, #4
 800c42c:	1af2      	subs	r2, r6, r3
 800c42e:	d0b6      	beq.n	800c39e <_malloc_r+0x22>
 800c430:	1b9b      	subs	r3, r3, r6
 800c432:	50a3      	str	r3, [r4, r2]
 800c434:	e7b3      	b.n	800c39e <_malloc_r+0x22>
 800c436:	6862      	ldr	r2, [r4, #4]
 800c438:	42a3      	cmp	r3, r4
 800c43a:	bf0c      	ite	eq
 800c43c:	6032      	streq	r2, [r6, #0]
 800c43e:	605a      	strne	r2, [r3, #4]
 800c440:	e7ec      	b.n	800c41c <_malloc_r+0xa0>
 800c442:	4623      	mov	r3, r4
 800c444:	6864      	ldr	r4, [r4, #4]
 800c446:	e7b2      	b.n	800c3ae <_malloc_r+0x32>
 800c448:	4634      	mov	r4, r6
 800c44a:	6876      	ldr	r6, [r6, #4]
 800c44c:	e7b9      	b.n	800c3c2 <_malloc_r+0x46>
 800c44e:	230c      	movs	r3, #12
 800c450:	603b      	str	r3, [r7, #0]
 800c452:	4638      	mov	r0, r7
 800c454:	f003 fbe8 	bl	800fc28 <__malloc_unlock>
 800c458:	e7a1      	b.n	800c39e <_malloc_r+0x22>
 800c45a:	6025      	str	r5, [r4, #0]
 800c45c:	e7de      	b.n	800c41c <_malloc_r+0xa0>
 800c45e:	bf00      	nop
 800c460:	200025ec 	.word	0x200025ec

0800c464 <__cvt>:
 800c464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c468:	ec55 4b10 	vmov	r4, r5, d0
 800c46c:	2d00      	cmp	r5, #0
 800c46e:	460e      	mov	r6, r1
 800c470:	4619      	mov	r1, r3
 800c472:	462b      	mov	r3, r5
 800c474:	bfbb      	ittet	lt
 800c476:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c47a:	461d      	movlt	r5, r3
 800c47c:	2300      	movge	r3, #0
 800c47e:	232d      	movlt	r3, #45	; 0x2d
 800c480:	700b      	strb	r3, [r1, #0]
 800c482:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c484:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c488:	4691      	mov	r9, r2
 800c48a:	f023 0820 	bic.w	r8, r3, #32
 800c48e:	bfbc      	itt	lt
 800c490:	4622      	movlt	r2, r4
 800c492:	4614      	movlt	r4, r2
 800c494:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c498:	d005      	beq.n	800c4a6 <__cvt+0x42>
 800c49a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c49e:	d100      	bne.n	800c4a2 <__cvt+0x3e>
 800c4a0:	3601      	adds	r6, #1
 800c4a2:	2102      	movs	r1, #2
 800c4a4:	e000      	b.n	800c4a8 <__cvt+0x44>
 800c4a6:	2103      	movs	r1, #3
 800c4a8:	ab03      	add	r3, sp, #12
 800c4aa:	9301      	str	r3, [sp, #4]
 800c4ac:	ab02      	add	r3, sp, #8
 800c4ae:	9300      	str	r3, [sp, #0]
 800c4b0:	ec45 4b10 	vmov	d0, r4, r5
 800c4b4:	4653      	mov	r3, sl
 800c4b6:	4632      	mov	r2, r6
 800c4b8:	f002 f80a 	bl	800e4d0 <_dtoa_r>
 800c4bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c4c0:	4607      	mov	r7, r0
 800c4c2:	d102      	bne.n	800c4ca <__cvt+0x66>
 800c4c4:	f019 0f01 	tst.w	r9, #1
 800c4c8:	d022      	beq.n	800c510 <__cvt+0xac>
 800c4ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c4ce:	eb07 0906 	add.w	r9, r7, r6
 800c4d2:	d110      	bne.n	800c4f6 <__cvt+0x92>
 800c4d4:	783b      	ldrb	r3, [r7, #0]
 800c4d6:	2b30      	cmp	r3, #48	; 0x30
 800c4d8:	d10a      	bne.n	800c4f0 <__cvt+0x8c>
 800c4da:	2200      	movs	r2, #0
 800c4dc:	2300      	movs	r3, #0
 800c4de:	4620      	mov	r0, r4
 800c4e0:	4629      	mov	r1, r5
 800c4e2:	f7f4 fb01 	bl	8000ae8 <__aeabi_dcmpeq>
 800c4e6:	b918      	cbnz	r0, 800c4f0 <__cvt+0x8c>
 800c4e8:	f1c6 0601 	rsb	r6, r6, #1
 800c4ec:	f8ca 6000 	str.w	r6, [sl]
 800c4f0:	f8da 3000 	ldr.w	r3, [sl]
 800c4f4:	4499      	add	r9, r3
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	4620      	mov	r0, r4
 800c4fc:	4629      	mov	r1, r5
 800c4fe:	f7f4 faf3 	bl	8000ae8 <__aeabi_dcmpeq>
 800c502:	b108      	cbz	r0, 800c508 <__cvt+0xa4>
 800c504:	f8cd 900c 	str.w	r9, [sp, #12]
 800c508:	2230      	movs	r2, #48	; 0x30
 800c50a:	9b03      	ldr	r3, [sp, #12]
 800c50c:	454b      	cmp	r3, r9
 800c50e:	d307      	bcc.n	800c520 <__cvt+0xbc>
 800c510:	9b03      	ldr	r3, [sp, #12]
 800c512:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c514:	1bdb      	subs	r3, r3, r7
 800c516:	4638      	mov	r0, r7
 800c518:	6013      	str	r3, [r2, #0]
 800c51a:	b004      	add	sp, #16
 800c51c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c520:	1c59      	adds	r1, r3, #1
 800c522:	9103      	str	r1, [sp, #12]
 800c524:	701a      	strb	r2, [r3, #0]
 800c526:	e7f0      	b.n	800c50a <__cvt+0xa6>

0800c528 <__exponent>:
 800c528:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c52a:	4603      	mov	r3, r0
 800c52c:	2900      	cmp	r1, #0
 800c52e:	bfb8      	it	lt
 800c530:	4249      	neglt	r1, r1
 800c532:	f803 2b02 	strb.w	r2, [r3], #2
 800c536:	bfb4      	ite	lt
 800c538:	222d      	movlt	r2, #45	; 0x2d
 800c53a:	222b      	movge	r2, #43	; 0x2b
 800c53c:	2909      	cmp	r1, #9
 800c53e:	7042      	strb	r2, [r0, #1]
 800c540:	dd2a      	ble.n	800c598 <__exponent+0x70>
 800c542:	f10d 0407 	add.w	r4, sp, #7
 800c546:	46a4      	mov	ip, r4
 800c548:	270a      	movs	r7, #10
 800c54a:	46a6      	mov	lr, r4
 800c54c:	460a      	mov	r2, r1
 800c54e:	fb91 f6f7 	sdiv	r6, r1, r7
 800c552:	fb07 1516 	mls	r5, r7, r6, r1
 800c556:	3530      	adds	r5, #48	; 0x30
 800c558:	2a63      	cmp	r2, #99	; 0x63
 800c55a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800c55e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c562:	4631      	mov	r1, r6
 800c564:	dcf1      	bgt.n	800c54a <__exponent+0x22>
 800c566:	3130      	adds	r1, #48	; 0x30
 800c568:	f1ae 0502 	sub.w	r5, lr, #2
 800c56c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c570:	1c44      	adds	r4, r0, #1
 800c572:	4629      	mov	r1, r5
 800c574:	4561      	cmp	r1, ip
 800c576:	d30a      	bcc.n	800c58e <__exponent+0x66>
 800c578:	f10d 0209 	add.w	r2, sp, #9
 800c57c:	eba2 020e 	sub.w	r2, r2, lr
 800c580:	4565      	cmp	r5, ip
 800c582:	bf88      	it	hi
 800c584:	2200      	movhi	r2, #0
 800c586:	4413      	add	r3, r2
 800c588:	1a18      	subs	r0, r3, r0
 800c58a:	b003      	add	sp, #12
 800c58c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c58e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c592:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c596:	e7ed      	b.n	800c574 <__exponent+0x4c>
 800c598:	2330      	movs	r3, #48	; 0x30
 800c59a:	3130      	adds	r1, #48	; 0x30
 800c59c:	7083      	strb	r3, [r0, #2]
 800c59e:	70c1      	strb	r1, [r0, #3]
 800c5a0:	1d03      	adds	r3, r0, #4
 800c5a2:	e7f1      	b.n	800c588 <__exponent+0x60>

0800c5a4 <_printf_float>:
 800c5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5a8:	ed2d 8b02 	vpush	{d8}
 800c5ac:	b08d      	sub	sp, #52	; 0x34
 800c5ae:	460c      	mov	r4, r1
 800c5b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c5b4:	4616      	mov	r6, r2
 800c5b6:	461f      	mov	r7, r3
 800c5b8:	4605      	mov	r5, r0
 800c5ba:	f003 fa9d 	bl	800faf8 <_localeconv_r>
 800c5be:	f8d0 a000 	ldr.w	sl, [r0]
 800c5c2:	4650      	mov	r0, sl
 800c5c4:	f7f3 fe14 	bl	80001f0 <strlen>
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	930a      	str	r3, [sp, #40]	; 0x28
 800c5cc:	6823      	ldr	r3, [r4, #0]
 800c5ce:	9305      	str	r3, [sp, #20]
 800c5d0:	f8d8 3000 	ldr.w	r3, [r8]
 800c5d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c5d8:	3307      	adds	r3, #7
 800c5da:	f023 0307 	bic.w	r3, r3, #7
 800c5de:	f103 0208 	add.w	r2, r3, #8
 800c5e2:	f8c8 2000 	str.w	r2, [r8]
 800c5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c5ee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c5f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c5f6:	9307      	str	r3, [sp, #28]
 800c5f8:	f8cd 8018 	str.w	r8, [sp, #24]
 800c5fc:	ee08 0a10 	vmov	s16, r0
 800c600:	4b9f      	ldr	r3, [pc, #636]	; (800c880 <_printf_float+0x2dc>)
 800c602:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c606:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c60a:	f7f4 fa9f 	bl	8000b4c <__aeabi_dcmpun>
 800c60e:	bb88      	cbnz	r0, 800c674 <_printf_float+0xd0>
 800c610:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c614:	4b9a      	ldr	r3, [pc, #616]	; (800c880 <_printf_float+0x2dc>)
 800c616:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c61a:	f7f4 fa79 	bl	8000b10 <__aeabi_dcmple>
 800c61e:	bb48      	cbnz	r0, 800c674 <_printf_float+0xd0>
 800c620:	2200      	movs	r2, #0
 800c622:	2300      	movs	r3, #0
 800c624:	4640      	mov	r0, r8
 800c626:	4649      	mov	r1, r9
 800c628:	f7f4 fa68 	bl	8000afc <__aeabi_dcmplt>
 800c62c:	b110      	cbz	r0, 800c634 <_printf_float+0x90>
 800c62e:	232d      	movs	r3, #45	; 0x2d
 800c630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c634:	4b93      	ldr	r3, [pc, #588]	; (800c884 <_printf_float+0x2e0>)
 800c636:	4894      	ldr	r0, [pc, #592]	; (800c888 <_printf_float+0x2e4>)
 800c638:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c63c:	bf94      	ite	ls
 800c63e:	4698      	movls	r8, r3
 800c640:	4680      	movhi	r8, r0
 800c642:	2303      	movs	r3, #3
 800c644:	6123      	str	r3, [r4, #16]
 800c646:	9b05      	ldr	r3, [sp, #20]
 800c648:	f023 0204 	bic.w	r2, r3, #4
 800c64c:	6022      	str	r2, [r4, #0]
 800c64e:	f04f 0900 	mov.w	r9, #0
 800c652:	9700      	str	r7, [sp, #0]
 800c654:	4633      	mov	r3, r6
 800c656:	aa0b      	add	r2, sp, #44	; 0x2c
 800c658:	4621      	mov	r1, r4
 800c65a:	4628      	mov	r0, r5
 800c65c:	f000 f9d8 	bl	800ca10 <_printf_common>
 800c660:	3001      	adds	r0, #1
 800c662:	f040 8090 	bne.w	800c786 <_printf_float+0x1e2>
 800c666:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c66a:	b00d      	add	sp, #52	; 0x34
 800c66c:	ecbd 8b02 	vpop	{d8}
 800c670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c674:	4642      	mov	r2, r8
 800c676:	464b      	mov	r3, r9
 800c678:	4640      	mov	r0, r8
 800c67a:	4649      	mov	r1, r9
 800c67c:	f7f4 fa66 	bl	8000b4c <__aeabi_dcmpun>
 800c680:	b140      	cbz	r0, 800c694 <_printf_float+0xf0>
 800c682:	464b      	mov	r3, r9
 800c684:	2b00      	cmp	r3, #0
 800c686:	bfbc      	itt	lt
 800c688:	232d      	movlt	r3, #45	; 0x2d
 800c68a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c68e:	487f      	ldr	r0, [pc, #508]	; (800c88c <_printf_float+0x2e8>)
 800c690:	4b7f      	ldr	r3, [pc, #508]	; (800c890 <_printf_float+0x2ec>)
 800c692:	e7d1      	b.n	800c638 <_printf_float+0x94>
 800c694:	6863      	ldr	r3, [r4, #4]
 800c696:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c69a:	9206      	str	r2, [sp, #24]
 800c69c:	1c5a      	adds	r2, r3, #1
 800c69e:	d13f      	bne.n	800c720 <_printf_float+0x17c>
 800c6a0:	2306      	movs	r3, #6
 800c6a2:	6063      	str	r3, [r4, #4]
 800c6a4:	9b05      	ldr	r3, [sp, #20]
 800c6a6:	6861      	ldr	r1, [r4, #4]
 800c6a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	9303      	str	r3, [sp, #12]
 800c6b0:	ab0a      	add	r3, sp, #40	; 0x28
 800c6b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c6b6:	ab09      	add	r3, sp, #36	; 0x24
 800c6b8:	ec49 8b10 	vmov	d0, r8, r9
 800c6bc:	9300      	str	r3, [sp, #0]
 800c6be:	6022      	str	r2, [r4, #0]
 800c6c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c6c4:	4628      	mov	r0, r5
 800c6c6:	f7ff fecd 	bl	800c464 <__cvt>
 800c6ca:	9b06      	ldr	r3, [sp, #24]
 800c6cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c6ce:	2b47      	cmp	r3, #71	; 0x47
 800c6d0:	4680      	mov	r8, r0
 800c6d2:	d108      	bne.n	800c6e6 <_printf_float+0x142>
 800c6d4:	1cc8      	adds	r0, r1, #3
 800c6d6:	db02      	blt.n	800c6de <_printf_float+0x13a>
 800c6d8:	6863      	ldr	r3, [r4, #4]
 800c6da:	4299      	cmp	r1, r3
 800c6dc:	dd41      	ble.n	800c762 <_printf_float+0x1be>
 800c6de:	f1ab 0b02 	sub.w	fp, fp, #2
 800c6e2:	fa5f fb8b 	uxtb.w	fp, fp
 800c6e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c6ea:	d820      	bhi.n	800c72e <_printf_float+0x18a>
 800c6ec:	3901      	subs	r1, #1
 800c6ee:	465a      	mov	r2, fp
 800c6f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c6f4:	9109      	str	r1, [sp, #36]	; 0x24
 800c6f6:	f7ff ff17 	bl	800c528 <__exponent>
 800c6fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c6fc:	1813      	adds	r3, r2, r0
 800c6fe:	2a01      	cmp	r2, #1
 800c700:	4681      	mov	r9, r0
 800c702:	6123      	str	r3, [r4, #16]
 800c704:	dc02      	bgt.n	800c70c <_printf_float+0x168>
 800c706:	6822      	ldr	r2, [r4, #0]
 800c708:	07d2      	lsls	r2, r2, #31
 800c70a:	d501      	bpl.n	800c710 <_printf_float+0x16c>
 800c70c:	3301      	adds	r3, #1
 800c70e:	6123      	str	r3, [r4, #16]
 800c710:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c714:	2b00      	cmp	r3, #0
 800c716:	d09c      	beq.n	800c652 <_printf_float+0xae>
 800c718:	232d      	movs	r3, #45	; 0x2d
 800c71a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c71e:	e798      	b.n	800c652 <_printf_float+0xae>
 800c720:	9a06      	ldr	r2, [sp, #24]
 800c722:	2a47      	cmp	r2, #71	; 0x47
 800c724:	d1be      	bne.n	800c6a4 <_printf_float+0x100>
 800c726:	2b00      	cmp	r3, #0
 800c728:	d1bc      	bne.n	800c6a4 <_printf_float+0x100>
 800c72a:	2301      	movs	r3, #1
 800c72c:	e7b9      	b.n	800c6a2 <_printf_float+0xfe>
 800c72e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c732:	d118      	bne.n	800c766 <_printf_float+0x1c2>
 800c734:	2900      	cmp	r1, #0
 800c736:	6863      	ldr	r3, [r4, #4]
 800c738:	dd0b      	ble.n	800c752 <_printf_float+0x1ae>
 800c73a:	6121      	str	r1, [r4, #16]
 800c73c:	b913      	cbnz	r3, 800c744 <_printf_float+0x1a0>
 800c73e:	6822      	ldr	r2, [r4, #0]
 800c740:	07d0      	lsls	r0, r2, #31
 800c742:	d502      	bpl.n	800c74a <_printf_float+0x1a6>
 800c744:	3301      	adds	r3, #1
 800c746:	440b      	add	r3, r1
 800c748:	6123      	str	r3, [r4, #16]
 800c74a:	65a1      	str	r1, [r4, #88]	; 0x58
 800c74c:	f04f 0900 	mov.w	r9, #0
 800c750:	e7de      	b.n	800c710 <_printf_float+0x16c>
 800c752:	b913      	cbnz	r3, 800c75a <_printf_float+0x1b6>
 800c754:	6822      	ldr	r2, [r4, #0]
 800c756:	07d2      	lsls	r2, r2, #31
 800c758:	d501      	bpl.n	800c75e <_printf_float+0x1ba>
 800c75a:	3302      	adds	r3, #2
 800c75c:	e7f4      	b.n	800c748 <_printf_float+0x1a4>
 800c75e:	2301      	movs	r3, #1
 800c760:	e7f2      	b.n	800c748 <_printf_float+0x1a4>
 800c762:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c768:	4299      	cmp	r1, r3
 800c76a:	db05      	blt.n	800c778 <_printf_float+0x1d4>
 800c76c:	6823      	ldr	r3, [r4, #0]
 800c76e:	6121      	str	r1, [r4, #16]
 800c770:	07d8      	lsls	r0, r3, #31
 800c772:	d5ea      	bpl.n	800c74a <_printf_float+0x1a6>
 800c774:	1c4b      	adds	r3, r1, #1
 800c776:	e7e7      	b.n	800c748 <_printf_float+0x1a4>
 800c778:	2900      	cmp	r1, #0
 800c77a:	bfd4      	ite	le
 800c77c:	f1c1 0202 	rsble	r2, r1, #2
 800c780:	2201      	movgt	r2, #1
 800c782:	4413      	add	r3, r2
 800c784:	e7e0      	b.n	800c748 <_printf_float+0x1a4>
 800c786:	6823      	ldr	r3, [r4, #0]
 800c788:	055a      	lsls	r2, r3, #21
 800c78a:	d407      	bmi.n	800c79c <_printf_float+0x1f8>
 800c78c:	6923      	ldr	r3, [r4, #16]
 800c78e:	4642      	mov	r2, r8
 800c790:	4631      	mov	r1, r6
 800c792:	4628      	mov	r0, r5
 800c794:	47b8      	blx	r7
 800c796:	3001      	adds	r0, #1
 800c798:	d12c      	bne.n	800c7f4 <_printf_float+0x250>
 800c79a:	e764      	b.n	800c666 <_printf_float+0xc2>
 800c79c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c7a0:	f240 80e0 	bls.w	800c964 <_printf_float+0x3c0>
 800c7a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	f7f4 f99c 	bl	8000ae8 <__aeabi_dcmpeq>
 800c7b0:	2800      	cmp	r0, #0
 800c7b2:	d034      	beq.n	800c81e <_printf_float+0x27a>
 800c7b4:	4a37      	ldr	r2, [pc, #220]	; (800c894 <_printf_float+0x2f0>)
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	4631      	mov	r1, r6
 800c7ba:	4628      	mov	r0, r5
 800c7bc:	47b8      	blx	r7
 800c7be:	3001      	adds	r0, #1
 800c7c0:	f43f af51 	beq.w	800c666 <_printf_float+0xc2>
 800c7c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	db02      	blt.n	800c7d2 <_printf_float+0x22e>
 800c7cc:	6823      	ldr	r3, [r4, #0]
 800c7ce:	07d8      	lsls	r0, r3, #31
 800c7d0:	d510      	bpl.n	800c7f4 <_printf_float+0x250>
 800c7d2:	ee18 3a10 	vmov	r3, s16
 800c7d6:	4652      	mov	r2, sl
 800c7d8:	4631      	mov	r1, r6
 800c7da:	4628      	mov	r0, r5
 800c7dc:	47b8      	blx	r7
 800c7de:	3001      	adds	r0, #1
 800c7e0:	f43f af41 	beq.w	800c666 <_printf_float+0xc2>
 800c7e4:	f04f 0800 	mov.w	r8, #0
 800c7e8:	f104 091a 	add.w	r9, r4, #26
 800c7ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7ee:	3b01      	subs	r3, #1
 800c7f0:	4543      	cmp	r3, r8
 800c7f2:	dc09      	bgt.n	800c808 <_printf_float+0x264>
 800c7f4:	6823      	ldr	r3, [r4, #0]
 800c7f6:	079b      	lsls	r3, r3, #30
 800c7f8:	f100 8105 	bmi.w	800ca06 <_printf_float+0x462>
 800c7fc:	68e0      	ldr	r0, [r4, #12]
 800c7fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c800:	4298      	cmp	r0, r3
 800c802:	bfb8      	it	lt
 800c804:	4618      	movlt	r0, r3
 800c806:	e730      	b.n	800c66a <_printf_float+0xc6>
 800c808:	2301      	movs	r3, #1
 800c80a:	464a      	mov	r2, r9
 800c80c:	4631      	mov	r1, r6
 800c80e:	4628      	mov	r0, r5
 800c810:	47b8      	blx	r7
 800c812:	3001      	adds	r0, #1
 800c814:	f43f af27 	beq.w	800c666 <_printf_float+0xc2>
 800c818:	f108 0801 	add.w	r8, r8, #1
 800c81c:	e7e6      	b.n	800c7ec <_printf_float+0x248>
 800c81e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c820:	2b00      	cmp	r3, #0
 800c822:	dc39      	bgt.n	800c898 <_printf_float+0x2f4>
 800c824:	4a1b      	ldr	r2, [pc, #108]	; (800c894 <_printf_float+0x2f0>)
 800c826:	2301      	movs	r3, #1
 800c828:	4631      	mov	r1, r6
 800c82a:	4628      	mov	r0, r5
 800c82c:	47b8      	blx	r7
 800c82e:	3001      	adds	r0, #1
 800c830:	f43f af19 	beq.w	800c666 <_printf_float+0xc2>
 800c834:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c838:	4313      	orrs	r3, r2
 800c83a:	d102      	bne.n	800c842 <_printf_float+0x29e>
 800c83c:	6823      	ldr	r3, [r4, #0]
 800c83e:	07d9      	lsls	r1, r3, #31
 800c840:	d5d8      	bpl.n	800c7f4 <_printf_float+0x250>
 800c842:	ee18 3a10 	vmov	r3, s16
 800c846:	4652      	mov	r2, sl
 800c848:	4631      	mov	r1, r6
 800c84a:	4628      	mov	r0, r5
 800c84c:	47b8      	blx	r7
 800c84e:	3001      	adds	r0, #1
 800c850:	f43f af09 	beq.w	800c666 <_printf_float+0xc2>
 800c854:	f04f 0900 	mov.w	r9, #0
 800c858:	f104 0a1a 	add.w	sl, r4, #26
 800c85c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c85e:	425b      	negs	r3, r3
 800c860:	454b      	cmp	r3, r9
 800c862:	dc01      	bgt.n	800c868 <_printf_float+0x2c4>
 800c864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c866:	e792      	b.n	800c78e <_printf_float+0x1ea>
 800c868:	2301      	movs	r3, #1
 800c86a:	4652      	mov	r2, sl
 800c86c:	4631      	mov	r1, r6
 800c86e:	4628      	mov	r0, r5
 800c870:	47b8      	blx	r7
 800c872:	3001      	adds	r0, #1
 800c874:	f43f aef7 	beq.w	800c666 <_printf_float+0xc2>
 800c878:	f109 0901 	add.w	r9, r9, #1
 800c87c:	e7ee      	b.n	800c85c <_printf_float+0x2b8>
 800c87e:	bf00      	nop
 800c880:	7fefffff 	.word	0x7fefffff
 800c884:	08012be8 	.word	0x08012be8
 800c888:	08012bec 	.word	0x08012bec
 800c88c:	08012bf4 	.word	0x08012bf4
 800c890:	08012bf0 	.word	0x08012bf0
 800c894:	08012bf8 	.word	0x08012bf8
 800c898:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c89a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c89c:	429a      	cmp	r2, r3
 800c89e:	bfa8      	it	ge
 800c8a0:	461a      	movge	r2, r3
 800c8a2:	2a00      	cmp	r2, #0
 800c8a4:	4691      	mov	r9, r2
 800c8a6:	dc37      	bgt.n	800c918 <_printf_float+0x374>
 800c8a8:	f04f 0b00 	mov.w	fp, #0
 800c8ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c8b0:	f104 021a 	add.w	r2, r4, #26
 800c8b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c8b6:	9305      	str	r3, [sp, #20]
 800c8b8:	eba3 0309 	sub.w	r3, r3, r9
 800c8bc:	455b      	cmp	r3, fp
 800c8be:	dc33      	bgt.n	800c928 <_printf_float+0x384>
 800c8c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	db3b      	blt.n	800c940 <_printf_float+0x39c>
 800c8c8:	6823      	ldr	r3, [r4, #0]
 800c8ca:	07da      	lsls	r2, r3, #31
 800c8cc:	d438      	bmi.n	800c940 <_printf_float+0x39c>
 800c8ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8d0:	9a05      	ldr	r2, [sp, #20]
 800c8d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c8d4:	1a9a      	subs	r2, r3, r2
 800c8d6:	eba3 0901 	sub.w	r9, r3, r1
 800c8da:	4591      	cmp	r9, r2
 800c8dc:	bfa8      	it	ge
 800c8de:	4691      	movge	r9, r2
 800c8e0:	f1b9 0f00 	cmp.w	r9, #0
 800c8e4:	dc35      	bgt.n	800c952 <_printf_float+0x3ae>
 800c8e6:	f04f 0800 	mov.w	r8, #0
 800c8ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c8ee:	f104 0a1a 	add.w	sl, r4, #26
 800c8f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c8f6:	1a9b      	subs	r3, r3, r2
 800c8f8:	eba3 0309 	sub.w	r3, r3, r9
 800c8fc:	4543      	cmp	r3, r8
 800c8fe:	f77f af79 	ble.w	800c7f4 <_printf_float+0x250>
 800c902:	2301      	movs	r3, #1
 800c904:	4652      	mov	r2, sl
 800c906:	4631      	mov	r1, r6
 800c908:	4628      	mov	r0, r5
 800c90a:	47b8      	blx	r7
 800c90c:	3001      	adds	r0, #1
 800c90e:	f43f aeaa 	beq.w	800c666 <_printf_float+0xc2>
 800c912:	f108 0801 	add.w	r8, r8, #1
 800c916:	e7ec      	b.n	800c8f2 <_printf_float+0x34e>
 800c918:	4613      	mov	r3, r2
 800c91a:	4631      	mov	r1, r6
 800c91c:	4642      	mov	r2, r8
 800c91e:	4628      	mov	r0, r5
 800c920:	47b8      	blx	r7
 800c922:	3001      	adds	r0, #1
 800c924:	d1c0      	bne.n	800c8a8 <_printf_float+0x304>
 800c926:	e69e      	b.n	800c666 <_printf_float+0xc2>
 800c928:	2301      	movs	r3, #1
 800c92a:	4631      	mov	r1, r6
 800c92c:	4628      	mov	r0, r5
 800c92e:	9205      	str	r2, [sp, #20]
 800c930:	47b8      	blx	r7
 800c932:	3001      	adds	r0, #1
 800c934:	f43f ae97 	beq.w	800c666 <_printf_float+0xc2>
 800c938:	9a05      	ldr	r2, [sp, #20]
 800c93a:	f10b 0b01 	add.w	fp, fp, #1
 800c93e:	e7b9      	b.n	800c8b4 <_printf_float+0x310>
 800c940:	ee18 3a10 	vmov	r3, s16
 800c944:	4652      	mov	r2, sl
 800c946:	4631      	mov	r1, r6
 800c948:	4628      	mov	r0, r5
 800c94a:	47b8      	blx	r7
 800c94c:	3001      	adds	r0, #1
 800c94e:	d1be      	bne.n	800c8ce <_printf_float+0x32a>
 800c950:	e689      	b.n	800c666 <_printf_float+0xc2>
 800c952:	9a05      	ldr	r2, [sp, #20]
 800c954:	464b      	mov	r3, r9
 800c956:	4442      	add	r2, r8
 800c958:	4631      	mov	r1, r6
 800c95a:	4628      	mov	r0, r5
 800c95c:	47b8      	blx	r7
 800c95e:	3001      	adds	r0, #1
 800c960:	d1c1      	bne.n	800c8e6 <_printf_float+0x342>
 800c962:	e680      	b.n	800c666 <_printf_float+0xc2>
 800c964:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c966:	2a01      	cmp	r2, #1
 800c968:	dc01      	bgt.n	800c96e <_printf_float+0x3ca>
 800c96a:	07db      	lsls	r3, r3, #31
 800c96c:	d538      	bpl.n	800c9e0 <_printf_float+0x43c>
 800c96e:	2301      	movs	r3, #1
 800c970:	4642      	mov	r2, r8
 800c972:	4631      	mov	r1, r6
 800c974:	4628      	mov	r0, r5
 800c976:	47b8      	blx	r7
 800c978:	3001      	adds	r0, #1
 800c97a:	f43f ae74 	beq.w	800c666 <_printf_float+0xc2>
 800c97e:	ee18 3a10 	vmov	r3, s16
 800c982:	4652      	mov	r2, sl
 800c984:	4631      	mov	r1, r6
 800c986:	4628      	mov	r0, r5
 800c988:	47b8      	blx	r7
 800c98a:	3001      	adds	r0, #1
 800c98c:	f43f ae6b 	beq.w	800c666 <_printf_float+0xc2>
 800c990:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c994:	2200      	movs	r2, #0
 800c996:	2300      	movs	r3, #0
 800c998:	f7f4 f8a6 	bl	8000ae8 <__aeabi_dcmpeq>
 800c99c:	b9d8      	cbnz	r0, 800c9d6 <_printf_float+0x432>
 800c99e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9a0:	f108 0201 	add.w	r2, r8, #1
 800c9a4:	3b01      	subs	r3, #1
 800c9a6:	4631      	mov	r1, r6
 800c9a8:	4628      	mov	r0, r5
 800c9aa:	47b8      	blx	r7
 800c9ac:	3001      	adds	r0, #1
 800c9ae:	d10e      	bne.n	800c9ce <_printf_float+0x42a>
 800c9b0:	e659      	b.n	800c666 <_printf_float+0xc2>
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	4652      	mov	r2, sl
 800c9b6:	4631      	mov	r1, r6
 800c9b8:	4628      	mov	r0, r5
 800c9ba:	47b8      	blx	r7
 800c9bc:	3001      	adds	r0, #1
 800c9be:	f43f ae52 	beq.w	800c666 <_printf_float+0xc2>
 800c9c2:	f108 0801 	add.w	r8, r8, #1
 800c9c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9c8:	3b01      	subs	r3, #1
 800c9ca:	4543      	cmp	r3, r8
 800c9cc:	dcf1      	bgt.n	800c9b2 <_printf_float+0x40e>
 800c9ce:	464b      	mov	r3, r9
 800c9d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c9d4:	e6dc      	b.n	800c790 <_printf_float+0x1ec>
 800c9d6:	f04f 0800 	mov.w	r8, #0
 800c9da:	f104 0a1a 	add.w	sl, r4, #26
 800c9de:	e7f2      	b.n	800c9c6 <_printf_float+0x422>
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	4642      	mov	r2, r8
 800c9e4:	e7df      	b.n	800c9a6 <_printf_float+0x402>
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	464a      	mov	r2, r9
 800c9ea:	4631      	mov	r1, r6
 800c9ec:	4628      	mov	r0, r5
 800c9ee:	47b8      	blx	r7
 800c9f0:	3001      	adds	r0, #1
 800c9f2:	f43f ae38 	beq.w	800c666 <_printf_float+0xc2>
 800c9f6:	f108 0801 	add.w	r8, r8, #1
 800c9fa:	68e3      	ldr	r3, [r4, #12]
 800c9fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c9fe:	1a5b      	subs	r3, r3, r1
 800ca00:	4543      	cmp	r3, r8
 800ca02:	dcf0      	bgt.n	800c9e6 <_printf_float+0x442>
 800ca04:	e6fa      	b.n	800c7fc <_printf_float+0x258>
 800ca06:	f04f 0800 	mov.w	r8, #0
 800ca0a:	f104 0919 	add.w	r9, r4, #25
 800ca0e:	e7f4      	b.n	800c9fa <_printf_float+0x456>

0800ca10 <_printf_common>:
 800ca10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca14:	4616      	mov	r6, r2
 800ca16:	4699      	mov	r9, r3
 800ca18:	688a      	ldr	r2, [r1, #8]
 800ca1a:	690b      	ldr	r3, [r1, #16]
 800ca1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ca20:	4293      	cmp	r3, r2
 800ca22:	bfb8      	it	lt
 800ca24:	4613      	movlt	r3, r2
 800ca26:	6033      	str	r3, [r6, #0]
 800ca28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ca2c:	4607      	mov	r7, r0
 800ca2e:	460c      	mov	r4, r1
 800ca30:	b10a      	cbz	r2, 800ca36 <_printf_common+0x26>
 800ca32:	3301      	adds	r3, #1
 800ca34:	6033      	str	r3, [r6, #0]
 800ca36:	6823      	ldr	r3, [r4, #0]
 800ca38:	0699      	lsls	r1, r3, #26
 800ca3a:	bf42      	ittt	mi
 800ca3c:	6833      	ldrmi	r3, [r6, #0]
 800ca3e:	3302      	addmi	r3, #2
 800ca40:	6033      	strmi	r3, [r6, #0]
 800ca42:	6825      	ldr	r5, [r4, #0]
 800ca44:	f015 0506 	ands.w	r5, r5, #6
 800ca48:	d106      	bne.n	800ca58 <_printf_common+0x48>
 800ca4a:	f104 0a19 	add.w	sl, r4, #25
 800ca4e:	68e3      	ldr	r3, [r4, #12]
 800ca50:	6832      	ldr	r2, [r6, #0]
 800ca52:	1a9b      	subs	r3, r3, r2
 800ca54:	42ab      	cmp	r3, r5
 800ca56:	dc26      	bgt.n	800caa6 <_printf_common+0x96>
 800ca58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ca5c:	1e13      	subs	r3, r2, #0
 800ca5e:	6822      	ldr	r2, [r4, #0]
 800ca60:	bf18      	it	ne
 800ca62:	2301      	movne	r3, #1
 800ca64:	0692      	lsls	r2, r2, #26
 800ca66:	d42b      	bmi.n	800cac0 <_printf_common+0xb0>
 800ca68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca6c:	4649      	mov	r1, r9
 800ca6e:	4638      	mov	r0, r7
 800ca70:	47c0      	blx	r8
 800ca72:	3001      	adds	r0, #1
 800ca74:	d01e      	beq.n	800cab4 <_printf_common+0xa4>
 800ca76:	6823      	ldr	r3, [r4, #0]
 800ca78:	68e5      	ldr	r5, [r4, #12]
 800ca7a:	6832      	ldr	r2, [r6, #0]
 800ca7c:	f003 0306 	and.w	r3, r3, #6
 800ca80:	2b04      	cmp	r3, #4
 800ca82:	bf08      	it	eq
 800ca84:	1aad      	subeq	r5, r5, r2
 800ca86:	68a3      	ldr	r3, [r4, #8]
 800ca88:	6922      	ldr	r2, [r4, #16]
 800ca8a:	bf0c      	ite	eq
 800ca8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca90:	2500      	movne	r5, #0
 800ca92:	4293      	cmp	r3, r2
 800ca94:	bfc4      	itt	gt
 800ca96:	1a9b      	subgt	r3, r3, r2
 800ca98:	18ed      	addgt	r5, r5, r3
 800ca9a:	2600      	movs	r6, #0
 800ca9c:	341a      	adds	r4, #26
 800ca9e:	42b5      	cmp	r5, r6
 800caa0:	d11a      	bne.n	800cad8 <_printf_common+0xc8>
 800caa2:	2000      	movs	r0, #0
 800caa4:	e008      	b.n	800cab8 <_printf_common+0xa8>
 800caa6:	2301      	movs	r3, #1
 800caa8:	4652      	mov	r2, sl
 800caaa:	4649      	mov	r1, r9
 800caac:	4638      	mov	r0, r7
 800caae:	47c0      	blx	r8
 800cab0:	3001      	adds	r0, #1
 800cab2:	d103      	bne.n	800cabc <_printf_common+0xac>
 800cab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cabc:	3501      	adds	r5, #1
 800cabe:	e7c6      	b.n	800ca4e <_printf_common+0x3e>
 800cac0:	18e1      	adds	r1, r4, r3
 800cac2:	1c5a      	adds	r2, r3, #1
 800cac4:	2030      	movs	r0, #48	; 0x30
 800cac6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800caca:	4422      	add	r2, r4
 800cacc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cad0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cad4:	3302      	adds	r3, #2
 800cad6:	e7c7      	b.n	800ca68 <_printf_common+0x58>
 800cad8:	2301      	movs	r3, #1
 800cada:	4622      	mov	r2, r4
 800cadc:	4649      	mov	r1, r9
 800cade:	4638      	mov	r0, r7
 800cae0:	47c0      	blx	r8
 800cae2:	3001      	adds	r0, #1
 800cae4:	d0e6      	beq.n	800cab4 <_printf_common+0xa4>
 800cae6:	3601      	adds	r6, #1
 800cae8:	e7d9      	b.n	800ca9e <_printf_common+0x8e>
	...

0800caec <_printf_i>:
 800caec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800caf0:	7e0f      	ldrb	r7, [r1, #24]
 800caf2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800caf4:	2f78      	cmp	r7, #120	; 0x78
 800caf6:	4691      	mov	r9, r2
 800caf8:	4680      	mov	r8, r0
 800cafa:	460c      	mov	r4, r1
 800cafc:	469a      	mov	sl, r3
 800cafe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cb02:	d807      	bhi.n	800cb14 <_printf_i+0x28>
 800cb04:	2f62      	cmp	r7, #98	; 0x62
 800cb06:	d80a      	bhi.n	800cb1e <_printf_i+0x32>
 800cb08:	2f00      	cmp	r7, #0
 800cb0a:	f000 80d8 	beq.w	800ccbe <_printf_i+0x1d2>
 800cb0e:	2f58      	cmp	r7, #88	; 0x58
 800cb10:	f000 80a3 	beq.w	800cc5a <_printf_i+0x16e>
 800cb14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cb1c:	e03a      	b.n	800cb94 <_printf_i+0xa8>
 800cb1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cb22:	2b15      	cmp	r3, #21
 800cb24:	d8f6      	bhi.n	800cb14 <_printf_i+0x28>
 800cb26:	a101      	add	r1, pc, #4	; (adr r1, 800cb2c <_printf_i+0x40>)
 800cb28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cb2c:	0800cb85 	.word	0x0800cb85
 800cb30:	0800cb99 	.word	0x0800cb99
 800cb34:	0800cb15 	.word	0x0800cb15
 800cb38:	0800cb15 	.word	0x0800cb15
 800cb3c:	0800cb15 	.word	0x0800cb15
 800cb40:	0800cb15 	.word	0x0800cb15
 800cb44:	0800cb99 	.word	0x0800cb99
 800cb48:	0800cb15 	.word	0x0800cb15
 800cb4c:	0800cb15 	.word	0x0800cb15
 800cb50:	0800cb15 	.word	0x0800cb15
 800cb54:	0800cb15 	.word	0x0800cb15
 800cb58:	0800cca5 	.word	0x0800cca5
 800cb5c:	0800cbc9 	.word	0x0800cbc9
 800cb60:	0800cc87 	.word	0x0800cc87
 800cb64:	0800cb15 	.word	0x0800cb15
 800cb68:	0800cb15 	.word	0x0800cb15
 800cb6c:	0800ccc7 	.word	0x0800ccc7
 800cb70:	0800cb15 	.word	0x0800cb15
 800cb74:	0800cbc9 	.word	0x0800cbc9
 800cb78:	0800cb15 	.word	0x0800cb15
 800cb7c:	0800cb15 	.word	0x0800cb15
 800cb80:	0800cc8f 	.word	0x0800cc8f
 800cb84:	682b      	ldr	r3, [r5, #0]
 800cb86:	1d1a      	adds	r2, r3, #4
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	602a      	str	r2, [r5, #0]
 800cb8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb94:	2301      	movs	r3, #1
 800cb96:	e0a3      	b.n	800cce0 <_printf_i+0x1f4>
 800cb98:	6820      	ldr	r0, [r4, #0]
 800cb9a:	6829      	ldr	r1, [r5, #0]
 800cb9c:	0606      	lsls	r6, r0, #24
 800cb9e:	f101 0304 	add.w	r3, r1, #4
 800cba2:	d50a      	bpl.n	800cbba <_printf_i+0xce>
 800cba4:	680e      	ldr	r6, [r1, #0]
 800cba6:	602b      	str	r3, [r5, #0]
 800cba8:	2e00      	cmp	r6, #0
 800cbaa:	da03      	bge.n	800cbb4 <_printf_i+0xc8>
 800cbac:	232d      	movs	r3, #45	; 0x2d
 800cbae:	4276      	negs	r6, r6
 800cbb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbb4:	485e      	ldr	r0, [pc, #376]	; (800cd30 <_printf_i+0x244>)
 800cbb6:	230a      	movs	r3, #10
 800cbb8:	e019      	b.n	800cbee <_printf_i+0x102>
 800cbba:	680e      	ldr	r6, [r1, #0]
 800cbbc:	602b      	str	r3, [r5, #0]
 800cbbe:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cbc2:	bf18      	it	ne
 800cbc4:	b236      	sxthne	r6, r6
 800cbc6:	e7ef      	b.n	800cba8 <_printf_i+0xbc>
 800cbc8:	682b      	ldr	r3, [r5, #0]
 800cbca:	6820      	ldr	r0, [r4, #0]
 800cbcc:	1d19      	adds	r1, r3, #4
 800cbce:	6029      	str	r1, [r5, #0]
 800cbd0:	0601      	lsls	r1, r0, #24
 800cbd2:	d501      	bpl.n	800cbd8 <_printf_i+0xec>
 800cbd4:	681e      	ldr	r6, [r3, #0]
 800cbd6:	e002      	b.n	800cbde <_printf_i+0xf2>
 800cbd8:	0646      	lsls	r6, r0, #25
 800cbda:	d5fb      	bpl.n	800cbd4 <_printf_i+0xe8>
 800cbdc:	881e      	ldrh	r6, [r3, #0]
 800cbde:	4854      	ldr	r0, [pc, #336]	; (800cd30 <_printf_i+0x244>)
 800cbe0:	2f6f      	cmp	r7, #111	; 0x6f
 800cbe2:	bf0c      	ite	eq
 800cbe4:	2308      	moveq	r3, #8
 800cbe6:	230a      	movne	r3, #10
 800cbe8:	2100      	movs	r1, #0
 800cbea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cbee:	6865      	ldr	r5, [r4, #4]
 800cbf0:	60a5      	str	r5, [r4, #8]
 800cbf2:	2d00      	cmp	r5, #0
 800cbf4:	bfa2      	ittt	ge
 800cbf6:	6821      	ldrge	r1, [r4, #0]
 800cbf8:	f021 0104 	bicge.w	r1, r1, #4
 800cbfc:	6021      	strge	r1, [r4, #0]
 800cbfe:	b90e      	cbnz	r6, 800cc04 <_printf_i+0x118>
 800cc00:	2d00      	cmp	r5, #0
 800cc02:	d04d      	beq.n	800cca0 <_printf_i+0x1b4>
 800cc04:	4615      	mov	r5, r2
 800cc06:	fbb6 f1f3 	udiv	r1, r6, r3
 800cc0a:	fb03 6711 	mls	r7, r3, r1, r6
 800cc0e:	5dc7      	ldrb	r7, [r0, r7]
 800cc10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cc14:	4637      	mov	r7, r6
 800cc16:	42bb      	cmp	r3, r7
 800cc18:	460e      	mov	r6, r1
 800cc1a:	d9f4      	bls.n	800cc06 <_printf_i+0x11a>
 800cc1c:	2b08      	cmp	r3, #8
 800cc1e:	d10b      	bne.n	800cc38 <_printf_i+0x14c>
 800cc20:	6823      	ldr	r3, [r4, #0]
 800cc22:	07de      	lsls	r6, r3, #31
 800cc24:	d508      	bpl.n	800cc38 <_printf_i+0x14c>
 800cc26:	6923      	ldr	r3, [r4, #16]
 800cc28:	6861      	ldr	r1, [r4, #4]
 800cc2a:	4299      	cmp	r1, r3
 800cc2c:	bfde      	ittt	le
 800cc2e:	2330      	movle	r3, #48	; 0x30
 800cc30:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cc34:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cc38:	1b52      	subs	r2, r2, r5
 800cc3a:	6122      	str	r2, [r4, #16]
 800cc3c:	f8cd a000 	str.w	sl, [sp]
 800cc40:	464b      	mov	r3, r9
 800cc42:	aa03      	add	r2, sp, #12
 800cc44:	4621      	mov	r1, r4
 800cc46:	4640      	mov	r0, r8
 800cc48:	f7ff fee2 	bl	800ca10 <_printf_common>
 800cc4c:	3001      	adds	r0, #1
 800cc4e:	d14c      	bne.n	800ccea <_printf_i+0x1fe>
 800cc50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc54:	b004      	add	sp, #16
 800cc56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc5a:	4835      	ldr	r0, [pc, #212]	; (800cd30 <_printf_i+0x244>)
 800cc5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cc60:	6829      	ldr	r1, [r5, #0]
 800cc62:	6823      	ldr	r3, [r4, #0]
 800cc64:	f851 6b04 	ldr.w	r6, [r1], #4
 800cc68:	6029      	str	r1, [r5, #0]
 800cc6a:	061d      	lsls	r5, r3, #24
 800cc6c:	d514      	bpl.n	800cc98 <_printf_i+0x1ac>
 800cc6e:	07df      	lsls	r7, r3, #31
 800cc70:	bf44      	itt	mi
 800cc72:	f043 0320 	orrmi.w	r3, r3, #32
 800cc76:	6023      	strmi	r3, [r4, #0]
 800cc78:	b91e      	cbnz	r6, 800cc82 <_printf_i+0x196>
 800cc7a:	6823      	ldr	r3, [r4, #0]
 800cc7c:	f023 0320 	bic.w	r3, r3, #32
 800cc80:	6023      	str	r3, [r4, #0]
 800cc82:	2310      	movs	r3, #16
 800cc84:	e7b0      	b.n	800cbe8 <_printf_i+0xfc>
 800cc86:	6823      	ldr	r3, [r4, #0]
 800cc88:	f043 0320 	orr.w	r3, r3, #32
 800cc8c:	6023      	str	r3, [r4, #0]
 800cc8e:	2378      	movs	r3, #120	; 0x78
 800cc90:	4828      	ldr	r0, [pc, #160]	; (800cd34 <_printf_i+0x248>)
 800cc92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cc96:	e7e3      	b.n	800cc60 <_printf_i+0x174>
 800cc98:	0659      	lsls	r1, r3, #25
 800cc9a:	bf48      	it	mi
 800cc9c:	b2b6      	uxthmi	r6, r6
 800cc9e:	e7e6      	b.n	800cc6e <_printf_i+0x182>
 800cca0:	4615      	mov	r5, r2
 800cca2:	e7bb      	b.n	800cc1c <_printf_i+0x130>
 800cca4:	682b      	ldr	r3, [r5, #0]
 800cca6:	6826      	ldr	r6, [r4, #0]
 800cca8:	6961      	ldr	r1, [r4, #20]
 800ccaa:	1d18      	adds	r0, r3, #4
 800ccac:	6028      	str	r0, [r5, #0]
 800ccae:	0635      	lsls	r5, r6, #24
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	d501      	bpl.n	800ccb8 <_printf_i+0x1cc>
 800ccb4:	6019      	str	r1, [r3, #0]
 800ccb6:	e002      	b.n	800ccbe <_printf_i+0x1d2>
 800ccb8:	0670      	lsls	r0, r6, #25
 800ccba:	d5fb      	bpl.n	800ccb4 <_printf_i+0x1c8>
 800ccbc:	8019      	strh	r1, [r3, #0]
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	6123      	str	r3, [r4, #16]
 800ccc2:	4615      	mov	r5, r2
 800ccc4:	e7ba      	b.n	800cc3c <_printf_i+0x150>
 800ccc6:	682b      	ldr	r3, [r5, #0]
 800ccc8:	1d1a      	adds	r2, r3, #4
 800ccca:	602a      	str	r2, [r5, #0]
 800cccc:	681d      	ldr	r5, [r3, #0]
 800ccce:	6862      	ldr	r2, [r4, #4]
 800ccd0:	2100      	movs	r1, #0
 800ccd2:	4628      	mov	r0, r5
 800ccd4:	f7f3 fa94 	bl	8000200 <memchr>
 800ccd8:	b108      	cbz	r0, 800ccde <_printf_i+0x1f2>
 800ccda:	1b40      	subs	r0, r0, r5
 800ccdc:	6060      	str	r0, [r4, #4]
 800ccde:	6863      	ldr	r3, [r4, #4]
 800cce0:	6123      	str	r3, [r4, #16]
 800cce2:	2300      	movs	r3, #0
 800cce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cce8:	e7a8      	b.n	800cc3c <_printf_i+0x150>
 800ccea:	6923      	ldr	r3, [r4, #16]
 800ccec:	462a      	mov	r2, r5
 800ccee:	4649      	mov	r1, r9
 800ccf0:	4640      	mov	r0, r8
 800ccf2:	47d0      	blx	sl
 800ccf4:	3001      	adds	r0, #1
 800ccf6:	d0ab      	beq.n	800cc50 <_printf_i+0x164>
 800ccf8:	6823      	ldr	r3, [r4, #0]
 800ccfa:	079b      	lsls	r3, r3, #30
 800ccfc:	d413      	bmi.n	800cd26 <_printf_i+0x23a>
 800ccfe:	68e0      	ldr	r0, [r4, #12]
 800cd00:	9b03      	ldr	r3, [sp, #12]
 800cd02:	4298      	cmp	r0, r3
 800cd04:	bfb8      	it	lt
 800cd06:	4618      	movlt	r0, r3
 800cd08:	e7a4      	b.n	800cc54 <_printf_i+0x168>
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	4632      	mov	r2, r6
 800cd0e:	4649      	mov	r1, r9
 800cd10:	4640      	mov	r0, r8
 800cd12:	47d0      	blx	sl
 800cd14:	3001      	adds	r0, #1
 800cd16:	d09b      	beq.n	800cc50 <_printf_i+0x164>
 800cd18:	3501      	adds	r5, #1
 800cd1a:	68e3      	ldr	r3, [r4, #12]
 800cd1c:	9903      	ldr	r1, [sp, #12]
 800cd1e:	1a5b      	subs	r3, r3, r1
 800cd20:	42ab      	cmp	r3, r5
 800cd22:	dcf2      	bgt.n	800cd0a <_printf_i+0x21e>
 800cd24:	e7eb      	b.n	800ccfe <_printf_i+0x212>
 800cd26:	2500      	movs	r5, #0
 800cd28:	f104 0619 	add.w	r6, r4, #25
 800cd2c:	e7f5      	b.n	800cd1a <_printf_i+0x22e>
 800cd2e:	bf00      	nop
 800cd30:	08012bfa 	.word	0x08012bfa
 800cd34:	08012c0b 	.word	0x08012c0b

0800cd38 <_scanf_float>:
 800cd38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd3c:	b087      	sub	sp, #28
 800cd3e:	4617      	mov	r7, r2
 800cd40:	9303      	str	r3, [sp, #12]
 800cd42:	688b      	ldr	r3, [r1, #8]
 800cd44:	1e5a      	subs	r2, r3, #1
 800cd46:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cd4a:	bf83      	ittte	hi
 800cd4c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cd50:	195b      	addhi	r3, r3, r5
 800cd52:	9302      	strhi	r3, [sp, #8]
 800cd54:	2300      	movls	r3, #0
 800cd56:	bf86      	itte	hi
 800cd58:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cd5c:	608b      	strhi	r3, [r1, #8]
 800cd5e:	9302      	strls	r3, [sp, #8]
 800cd60:	680b      	ldr	r3, [r1, #0]
 800cd62:	468b      	mov	fp, r1
 800cd64:	2500      	movs	r5, #0
 800cd66:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800cd6a:	f84b 3b1c 	str.w	r3, [fp], #28
 800cd6e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cd72:	4680      	mov	r8, r0
 800cd74:	460c      	mov	r4, r1
 800cd76:	465e      	mov	r6, fp
 800cd78:	46aa      	mov	sl, r5
 800cd7a:	46a9      	mov	r9, r5
 800cd7c:	9501      	str	r5, [sp, #4]
 800cd7e:	68a2      	ldr	r2, [r4, #8]
 800cd80:	b152      	cbz	r2, 800cd98 <_scanf_float+0x60>
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	781b      	ldrb	r3, [r3, #0]
 800cd86:	2b4e      	cmp	r3, #78	; 0x4e
 800cd88:	d864      	bhi.n	800ce54 <_scanf_float+0x11c>
 800cd8a:	2b40      	cmp	r3, #64	; 0x40
 800cd8c:	d83c      	bhi.n	800ce08 <_scanf_float+0xd0>
 800cd8e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800cd92:	b2c8      	uxtb	r0, r1
 800cd94:	280e      	cmp	r0, #14
 800cd96:	d93a      	bls.n	800ce0e <_scanf_float+0xd6>
 800cd98:	f1b9 0f00 	cmp.w	r9, #0
 800cd9c:	d003      	beq.n	800cda6 <_scanf_float+0x6e>
 800cd9e:	6823      	ldr	r3, [r4, #0]
 800cda0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cda4:	6023      	str	r3, [r4, #0]
 800cda6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800cdaa:	f1ba 0f01 	cmp.w	sl, #1
 800cdae:	f200 8113 	bhi.w	800cfd8 <_scanf_float+0x2a0>
 800cdb2:	455e      	cmp	r6, fp
 800cdb4:	f200 8105 	bhi.w	800cfc2 <_scanf_float+0x28a>
 800cdb8:	2501      	movs	r5, #1
 800cdba:	4628      	mov	r0, r5
 800cdbc:	b007      	add	sp, #28
 800cdbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdc2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800cdc6:	2a0d      	cmp	r2, #13
 800cdc8:	d8e6      	bhi.n	800cd98 <_scanf_float+0x60>
 800cdca:	a101      	add	r1, pc, #4	; (adr r1, 800cdd0 <_scanf_float+0x98>)
 800cdcc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cdd0:	0800cf0f 	.word	0x0800cf0f
 800cdd4:	0800cd99 	.word	0x0800cd99
 800cdd8:	0800cd99 	.word	0x0800cd99
 800cddc:	0800cd99 	.word	0x0800cd99
 800cde0:	0800cf6f 	.word	0x0800cf6f
 800cde4:	0800cf47 	.word	0x0800cf47
 800cde8:	0800cd99 	.word	0x0800cd99
 800cdec:	0800cd99 	.word	0x0800cd99
 800cdf0:	0800cf1d 	.word	0x0800cf1d
 800cdf4:	0800cd99 	.word	0x0800cd99
 800cdf8:	0800cd99 	.word	0x0800cd99
 800cdfc:	0800cd99 	.word	0x0800cd99
 800ce00:	0800cd99 	.word	0x0800cd99
 800ce04:	0800ced5 	.word	0x0800ced5
 800ce08:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ce0c:	e7db      	b.n	800cdc6 <_scanf_float+0x8e>
 800ce0e:	290e      	cmp	r1, #14
 800ce10:	d8c2      	bhi.n	800cd98 <_scanf_float+0x60>
 800ce12:	a001      	add	r0, pc, #4	; (adr r0, 800ce18 <_scanf_float+0xe0>)
 800ce14:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ce18:	0800cec7 	.word	0x0800cec7
 800ce1c:	0800cd99 	.word	0x0800cd99
 800ce20:	0800cec7 	.word	0x0800cec7
 800ce24:	0800cf5b 	.word	0x0800cf5b
 800ce28:	0800cd99 	.word	0x0800cd99
 800ce2c:	0800ce75 	.word	0x0800ce75
 800ce30:	0800ceb1 	.word	0x0800ceb1
 800ce34:	0800ceb1 	.word	0x0800ceb1
 800ce38:	0800ceb1 	.word	0x0800ceb1
 800ce3c:	0800ceb1 	.word	0x0800ceb1
 800ce40:	0800ceb1 	.word	0x0800ceb1
 800ce44:	0800ceb1 	.word	0x0800ceb1
 800ce48:	0800ceb1 	.word	0x0800ceb1
 800ce4c:	0800ceb1 	.word	0x0800ceb1
 800ce50:	0800ceb1 	.word	0x0800ceb1
 800ce54:	2b6e      	cmp	r3, #110	; 0x6e
 800ce56:	d809      	bhi.n	800ce6c <_scanf_float+0x134>
 800ce58:	2b60      	cmp	r3, #96	; 0x60
 800ce5a:	d8b2      	bhi.n	800cdc2 <_scanf_float+0x8a>
 800ce5c:	2b54      	cmp	r3, #84	; 0x54
 800ce5e:	d077      	beq.n	800cf50 <_scanf_float+0x218>
 800ce60:	2b59      	cmp	r3, #89	; 0x59
 800ce62:	d199      	bne.n	800cd98 <_scanf_float+0x60>
 800ce64:	2d07      	cmp	r5, #7
 800ce66:	d197      	bne.n	800cd98 <_scanf_float+0x60>
 800ce68:	2508      	movs	r5, #8
 800ce6a:	e029      	b.n	800cec0 <_scanf_float+0x188>
 800ce6c:	2b74      	cmp	r3, #116	; 0x74
 800ce6e:	d06f      	beq.n	800cf50 <_scanf_float+0x218>
 800ce70:	2b79      	cmp	r3, #121	; 0x79
 800ce72:	e7f6      	b.n	800ce62 <_scanf_float+0x12a>
 800ce74:	6821      	ldr	r1, [r4, #0]
 800ce76:	05c8      	lsls	r0, r1, #23
 800ce78:	d51a      	bpl.n	800ceb0 <_scanf_float+0x178>
 800ce7a:	9b02      	ldr	r3, [sp, #8]
 800ce7c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ce80:	6021      	str	r1, [r4, #0]
 800ce82:	f109 0901 	add.w	r9, r9, #1
 800ce86:	b11b      	cbz	r3, 800ce90 <_scanf_float+0x158>
 800ce88:	3b01      	subs	r3, #1
 800ce8a:	3201      	adds	r2, #1
 800ce8c:	9302      	str	r3, [sp, #8]
 800ce8e:	60a2      	str	r2, [r4, #8]
 800ce90:	68a3      	ldr	r3, [r4, #8]
 800ce92:	3b01      	subs	r3, #1
 800ce94:	60a3      	str	r3, [r4, #8]
 800ce96:	6923      	ldr	r3, [r4, #16]
 800ce98:	3301      	adds	r3, #1
 800ce9a:	6123      	str	r3, [r4, #16]
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	3b01      	subs	r3, #1
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	607b      	str	r3, [r7, #4]
 800cea4:	f340 8084 	ble.w	800cfb0 <_scanf_float+0x278>
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	3301      	adds	r3, #1
 800ceac:	603b      	str	r3, [r7, #0]
 800ceae:	e766      	b.n	800cd7e <_scanf_float+0x46>
 800ceb0:	eb1a 0f05 	cmn.w	sl, r5
 800ceb4:	f47f af70 	bne.w	800cd98 <_scanf_float+0x60>
 800ceb8:	6822      	ldr	r2, [r4, #0]
 800ceba:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800cebe:	6022      	str	r2, [r4, #0]
 800cec0:	f806 3b01 	strb.w	r3, [r6], #1
 800cec4:	e7e4      	b.n	800ce90 <_scanf_float+0x158>
 800cec6:	6822      	ldr	r2, [r4, #0]
 800cec8:	0610      	lsls	r0, r2, #24
 800ceca:	f57f af65 	bpl.w	800cd98 <_scanf_float+0x60>
 800cece:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ced2:	e7f4      	b.n	800cebe <_scanf_float+0x186>
 800ced4:	f1ba 0f00 	cmp.w	sl, #0
 800ced8:	d10e      	bne.n	800cef8 <_scanf_float+0x1c0>
 800ceda:	f1b9 0f00 	cmp.w	r9, #0
 800cede:	d10e      	bne.n	800cefe <_scanf_float+0x1c6>
 800cee0:	6822      	ldr	r2, [r4, #0]
 800cee2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800cee6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ceea:	d108      	bne.n	800cefe <_scanf_float+0x1c6>
 800ceec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cef0:	6022      	str	r2, [r4, #0]
 800cef2:	f04f 0a01 	mov.w	sl, #1
 800cef6:	e7e3      	b.n	800cec0 <_scanf_float+0x188>
 800cef8:	f1ba 0f02 	cmp.w	sl, #2
 800cefc:	d055      	beq.n	800cfaa <_scanf_float+0x272>
 800cefe:	2d01      	cmp	r5, #1
 800cf00:	d002      	beq.n	800cf08 <_scanf_float+0x1d0>
 800cf02:	2d04      	cmp	r5, #4
 800cf04:	f47f af48 	bne.w	800cd98 <_scanf_float+0x60>
 800cf08:	3501      	adds	r5, #1
 800cf0a:	b2ed      	uxtb	r5, r5
 800cf0c:	e7d8      	b.n	800cec0 <_scanf_float+0x188>
 800cf0e:	f1ba 0f01 	cmp.w	sl, #1
 800cf12:	f47f af41 	bne.w	800cd98 <_scanf_float+0x60>
 800cf16:	f04f 0a02 	mov.w	sl, #2
 800cf1a:	e7d1      	b.n	800cec0 <_scanf_float+0x188>
 800cf1c:	b97d      	cbnz	r5, 800cf3e <_scanf_float+0x206>
 800cf1e:	f1b9 0f00 	cmp.w	r9, #0
 800cf22:	f47f af3c 	bne.w	800cd9e <_scanf_float+0x66>
 800cf26:	6822      	ldr	r2, [r4, #0]
 800cf28:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800cf2c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800cf30:	f47f af39 	bne.w	800cda6 <_scanf_float+0x6e>
 800cf34:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cf38:	6022      	str	r2, [r4, #0]
 800cf3a:	2501      	movs	r5, #1
 800cf3c:	e7c0      	b.n	800cec0 <_scanf_float+0x188>
 800cf3e:	2d03      	cmp	r5, #3
 800cf40:	d0e2      	beq.n	800cf08 <_scanf_float+0x1d0>
 800cf42:	2d05      	cmp	r5, #5
 800cf44:	e7de      	b.n	800cf04 <_scanf_float+0x1cc>
 800cf46:	2d02      	cmp	r5, #2
 800cf48:	f47f af26 	bne.w	800cd98 <_scanf_float+0x60>
 800cf4c:	2503      	movs	r5, #3
 800cf4e:	e7b7      	b.n	800cec0 <_scanf_float+0x188>
 800cf50:	2d06      	cmp	r5, #6
 800cf52:	f47f af21 	bne.w	800cd98 <_scanf_float+0x60>
 800cf56:	2507      	movs	r5, #7
 800cf58:	e7b2      	b.n	800cec0 <_scanf_float+0x188>
 800cf5a:	6822      	ldr	r2, [r4, #0]
 800cf5c:	0591      	lsls	r1, r2, #22
 800cf5e:	f57f af1b 	bpl.w	800cd98 <_scanf_float+0x60>
 800cf62:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800cf66:	6022      	str	r2, [r4, #0]
 800cf68:	f8cd 9004 	str.w	r9, [sp, #4]
 800cf6c:	e7a8      	b.n	800cec0 <_scanf_float+0x188>
 800cf6e:	6822      	ldr	r2, [r4, #0]
 800cf70:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800cf74:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800cf78:	d006      	beq.n	800cf88 <_scanf_float+0x250>
 800cf7a:	0550      	lsls	r0, r2, #21
 800cf7c:	f57f af0c 	bpl.w	800cd98 <_scanf_float+0x60>
 800cf80:	f1b9 0f00 	cmp.w	r9, #0
 800cf84:	f43f af0f 	beq.w	800cda6 <_scanf_float+0x6e>
 800cf88:	0591      	lsls	r1, r2, #22
 800cf8a:	bf58      	it	pl
 800cf8c:	9901      	ldrpl	r1, [sp, #4]
 800cf8e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cf92:	bf58      	it	pl
 800cf94:	eba9 0101 	subpl.w	r1, r9, r1
 800cf98:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800cf9c:	bf58      	it	pl
 800cf9e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cfa2:	6022      	str	r2, [r4, #0]
 800cfa4:	f04f 0900 	mov.w	r9, #0
 800cfa8:	e78a      	b.n	800cec0 <_scanf_float+0x188>
 800cfaa:	f04f 0a03 	mov.w	sl, #3
 800cfae:	e787      	b.n	800cec0 <_scanf_float+0x188>
 800cfb0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cfb4:	4639      	mov	r1, r7
 800cfb6:	4640      	mov	r0, r8
 800cfb8:	4798      	blx	r3
 800cfba:	2800      	cmp	r0, #0
 800cfbc:	f43f aedf 	beq.w	800cd7e <_scanf_float+0x46>
 800cfc0:	e6ea      	b.n	800cd98 <_scanf_float+0x60>
 800cfc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cfc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cfca:	463a      	mov	r2, r7
 800cfcc:	4640      	mov	r0, r8
 800cfce:	4798      	blx	r3
 800cfd0:	6923      	ldr	r3, [r4, #16]
 800cfd2:	3b01      	subs	r3, #1
 800cfd4:	6123      	str	r3, [r4, #16]
 800cfd6:	e6ec      	b.n	800cdb2 <_scanf_float+0x7a>
 800cfd8:	1e6b      	subs	r3, r5, #1
 800cfda:	2b06      	cmp	r3, #6
 800cfdc:	d825      	bhi.n	800d02a <_scanf_float+0x2f2>
 800cfde:	2d02      	cmp	r5, #2
 800cfe0:	d836      	bhi.n	800d050 <_scanf_float+0x318>
 800cfe2:	455e      	cmp	r6, fp
 800cfe4:	f67f aee8 	bls.w	800cdb8 <_scanf_float+0x80>
 800cfe8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cfec:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cff0:	463a      	mov	r2, r7
 800cff2:	4640      	mov	r0, r8
 800cff4:	4798      	blx	r3
 800cff6:	6923      	ldr	r3, [r4, #16]
 800cff8:	3b01      	subs	r3, #1
 800cffa:	6123      	str	r3, [r4, #16]
 800cffc:	e7f1      	b.n	800cfe2 <_scanf_float+0x2aa>
 800cffe:	9802      	ldr	r0, [sp, #8]
 800d000:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d004:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800d008:	9002      	str	r0, [sp, #8]
 800d00a:	463a      	mov	r2, r7
 800d00c:	4640      	mov	r0, r8
 800d00e:	4798      	blx	r3
 800d010:	6923      	ldr	r3, [r4, #16]
 800d012:	3b01      	subs	r3, #1
 800d014:	6123      	str	r3, [r4, #16]
 800d016:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d01a:	fa5f fa8a 	uxtb.w	sl, sl
 800d01e:	f1ba 0f02 	cmp.w	sl, #2
 800d022:	d1ec      	bne.n	800cffe <_scanf_float+0x2c6>
 800d024:	3d03      	subs	r5, #3
 800d026:	b2ed      	uxtb	r5, r5
 800d028:	1b76      	subs	r6, r6, r5
 800d02a:	6823      	ldr	r3, [r4, #0]
 800d02c:	05da      	lsls	r2, r3, #23
 800d02e:	d52f      	bpl.n	800d090 <_scanf_float+0x358>
 800d030:	055b      	lsls	r3, r3, #21
 800d032:	d510      	bpl.n	800d056 <_scanf_float+0x31e>
 800d034:	455e      	cmp	r6, fp
 800d036:	f67f aebf 	bls.w	800cdb8 <_scanf_float+0x80>
 800d03a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d03e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d042:	463a      	mov	r2, r7
 800d044:	4640      	mov	r0, r8
 800d046:	4798      	blx	r3
 800d048:	6923      	ldr	r3, [r4, #16]
 800d04a:	3b01      	subs	r3, #1
 800d04c:	6123      	str	r3, [r4, #16]
 800d04e:	e7f1      	b.n	800d034 <_scanf_float+0x2fc>
 800d050:	46aa      	mov	sl, r5
 800d052:	9602      	str	r6, [sp, #8]
 800d054:	e7df      	b.n	800d016 <_scanf_float+0x2de>
 800d056:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d05a:	6923      	ldr	r3, [r4, #16]
 800d05c:	2965      	cmp	r1, #101	; 0x65
 800d05e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800d062:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800d066:	6123      	str	r3, [r4, #16]
 800d068:	d00c      	beq.n	800d084 <_scanf_float+0x34c>
 800d06a:	2945      	cmp	r1, #69	; 0x45
 800d06c:	d00a      	beq.n	800d084 <_scanf_float+0x34c>
 800d06e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d072:	463a      	mov	r2, r7
 800d074:	4640      	mov	r0, r8
 800d076:	4798      	blx	r3
 800d078:	6923      	ldr	r3, [r4, #16]
 800d07a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d07e:	3b01      	subs	r3, #1
 800d080:	1eb5      	subs	r5, r6, #2
 800d082:	6123      	str	r3, [r4, #16]
 800d084:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d088:	463a      	mov	r2, r7
 800d08a:	4640      	mov	r0, r8
 800d08c:	4798      	blx	r3
 800d08e:	462e      	mov	r6, r5
 800d090:	6825      	ldr	r5, [r4, #0]
 800d092:	f015 0510 	ands.w	r5, r5, #16
 800d096:	d159      	bne.n	800d14c <_scanf_float+0x414>
 800d098:	7035      	strb	r5, [r6, #0]
 800d09a:	6823      	ldr	r3, [r4, #0]
 800d09c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d0a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d0a4:	d11b      	bne.n	800d0de <_scanf_float+0x3a6>
 800d0a6:	9b01      	ldr	r3, [sp, #4]
 800d0a8:	454b      	cmp	r3, r9
 800d0aa:	eba3 0209 	sub.w	r2, r3, r9
 800d0ae:	d123      	bne.n	800d0f8 <_scanf_float+0x3c0>
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	4659      	mov	r1, fp
 800d0b4:	4640      	mov	r0, r8
 800d0b6:	f000 ffcd 	bl	800e054 <_strtod_r>
 800d0ba:	6822      	ldr	r2, [r4, #0]
 800d0bc:	9b03      	ldr	r3, [sp, #12]
 800d0be:	f012 0f02 	tst.w	r2, #2
 800d0c2:	ec57 6b10 	vmov	r6, r7, d0
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	d021      	beq.n	800d10e <_scanf_float+0x3d6>
 800d0ca:	9903      	ldr	r1, [sp, #12]
 800d0cc:	1d1a      	adds	r2, r3, #4
 800d0ce:	600a      	str	r2, [r1, #0]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	e9c3 6700 	strd	r6, r7, [r3]
 800d0d6:	68e3      	ldr	r3, [r4, #12]
 800d0d8:	3301      	adds	r3, #1
 800d0da:	60e3      	str	r3, [r4, #12]
 800d0dc:	e66d      	b.n	800cdba <_scanf_float+0x82>
 800d0de:	9b04      	ldr	r3, [sp, #16]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d0e5      	beq.n	800d0b0 <_scanf_float+0x378>
 800d0e4:	9905      	ldr	r1, [sp, #20]
 800d0e6:	230a      	movs	r3, #10
 800d0e8:	462a      	mov	r2, r5
 800d0ea:	3101      	adds	r1, #1
 800d0ec:	4640      	mov	r0, r8
 800d0ee:	f001 f839 	bl	800e164 <_strtol_r>
 800d0f2:	9b04      	ldr	r3, [sp, #16]
 800d0f4:	9e05      	ldr	r6, [sp, #20]
 800d0f6:	1ac2      	subs	r2, r0, r3
 800d0f8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d0fc:	429e      	cmp	r6, r3
 800d0fe:	bf28      	it	cs
 800d100:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800d104:	4912      	ldr	r1, [pc, #72]	; (800d150 <_scanf_float+0x418>)
 800d106:	4630      	mov	r0, r6
 800d108:	f000 f8e6 	bl	800d2d8 <siprintf>
 800d10c:	e7d0      	b.n	800d0b0 <_scanf_float+0x378>
 800d10e:	9903      	ldr	r1, [sp, #12]
 800d110:	f012 0f04 	tst.w	r2, #4
 800d114:	f103 0204 	add.w	r2, r3, #4
 800d118:	600a      	str	r2, [r1, #0]
 800d11a:	d1d9      	bne.n	800d0d0 <_scanf_float+0x398>
 800d11c:	f8d3 8000 	ldr.w	r8, [r3]
 800d120:	ee10 2a10 	vmov	r2, s0
 800d124:	ee10 0a10 	vmov	r0, s0
 800d128:	463b      	mov	r3, r7
 800d12a:	4639      	mov	r1, r7
 800d12c:	f7f3 fd0e 	bl	8000b4c <__aeabi_dcmpun>
 800d130:	b128      	cbz	r0, 800d13e <_scanf_float+0x406>
 800d132:	4808      	ldr	r0, [pc, #32]	; (800d154 <_scanf_float+0x41c>)
 800d134:	f000 f896 	bl	800d264 <nanf>
 800d138:	ed88 0a00 	vstr	s0, [r8]
 800d13c:	e7cb      	b.n	800d0d6 <_scanf_float+0x39e>
 800d13e:	4630      	mov	r0, r6
 800d140:	4639      	mov	r1, r7
 800d142:	f7f3 fd61 	bl	8000c08 <__aeabi_d2f>
 800d146:	f8c8 0000 	str.w	r0, [r8]
 800d14a:	e7c4      	b.n	800d0d6 <_scanf_float+0x39e>
 800d14c:	2500      	movs	r5, #0
 800d14e:	e634      	b.n	800cdba <_scanf_float+0x82>
 800d150:	08012c1c 	.word	0x08012c1c
 800d154:	08012f88 	.word	0x08012f88

0800d158 <_puts_r>:
 800d158:	b570      	push	{r4, r5, r6, lr}
 800d15a:	460e      	mov	r6, r1
 800d15c:	4605      	mov	r5, r0
 800d15e:	b118      	cbz	r0, 800d168 <_puts_r+0x10>
 800d160:	6983      	ldr	r3, [r0, #24]
 800d162:	b90b      	cbnz	r3, 800d168 <_puts_r+0x10>
 800d164:	f002 f8bc 	bl	800f2e0 <__sinit>
 800d168:	69ab      	ldr	r3, [r5, #24]
 800d16a:	68ac      	ldr	r4, [r5, #8]
 800d16c:	b913      	cbnz	r3, 800d174 <_puts_r+0x1c>
 800d16e:	4628      	mov	r0, r5
 800d170:	f002 f8b6 	bl	800f2e0 <__sinit>
 800d174:	4b2c      	ldr	r3, [pc, #176]	; (800d228 <_puts_r+0xd0>)
 800d176:	429c      	cmp	r4, r3
 800d178:	d120      	bne.n	800d1bc <_puts_r+0x64>
 800d17a:	686c      	ldr	r4, [r5, #4]
 800d17c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d17e:	07db      	lsls	r3, r3, #31
 800d180:	d405      	bmi.n	800d18e <_puts_r+0x36>
 800d182:	89a3      	ldrh	r3, [r4, #12]
 800d184:	0598      	lsls	r0, r3, #22
 800d186:	d402      	bmi.n	800d18e <_puts_r+0x36>
 800d188:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d18a:	f002 fcba 	bl	800fb02 <__retarget_lock_acquire_recursive>
 800d18e:	89a3      	ldrh	r3, [r4, #12]
 800d190:	0719      	lsls	r1, r3, #28
 800d192:	d51d      	bpl.n	800d1d0 <_puts_r+0x78>
 800d194:	6923      	ldr	r3, [r4, #16]
 800d196:	b1db      	cbz	r3, 800d1d0 <_puts_r+0x78>
 800d198:	3e01      	subs	r6, #1
 800d19a:	68a3      	ldr	r3, [r4, #8]
 800d19c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d1a0:	3b01      	subs	r3, #1
 800d1a2:	60a3      	str	r3, [r4, #8]
 800d1a4:	bb39      	cbnz	r1, 800d1f6 <_puts_r+0x9e>
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	da38      	bge.n	800d21c <_puts_r+0xc4>
 800d1aa:	4622      	mov	r2, r4
 800d1ac:	210a      	movs	r1, #10
 800d1ae:	4628      	mov	r0, r5
 800d1b0:	f001 f81e 	bl	800e1f0 <__swbuf_r>
 800d1b4:	3001      	adds	r0, #1
 800d1b6:	d011      	beq.n	800d1dc <_puts_r+0x84>
 800d1b8:	250a      	movs	r5, #10
 800d1ba:	e011      	b.n	800d1e0 <_puts_r+0x88>
 800d1bc:	4b1b      	ldr	r3, [pc, #108]	; (800d22c <_puts_r+0xd4>)
 800d1be:	429c      	cmp	r4, r3
 800d1c0:	d101      	bne.n	800d1c6 <_puts_r+0x6e>
 800d1c2:	68ac      	ldr	r4, [r5, #8]
 800d1c4:	e7da      	b.n	800d17c <_puts_r+0x24>
 800d1c6:	4b1a      	ldr	r3, [pc, #104]	; (800d230 <_puts_r+0xd8>)
 800d1c8:	429c      	cmp	r4, r3
 800d1ca:	bf08      	it	eq
 800d1cc:	68ec      	ldreq	r4, [r5, #12]
 800d1ce:	e7d5      	b.n	800d17c <_puts_r+0x24>
 800d1d0:	4621      	mov	r1, r4
 800d1d2:	4628      	mov	r0, r5
 800d1d4:	f001 f870 	bl	800e2b8 <__swsetup_r>
 800d1d8:	2800      	cmp	r0, #0
 800d1da:	d0dd      	beq.n	800d198 <_puts_r+0x40>
 800d1dc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800d1e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d1e2:	07da      	lsls	r2, r3, #31
 800d1e4:	d405      	bmi.n	800d1f2 <_puts_r+0x9a>
 800d1e6:	89a3      	ldrh	r3, [r4, #12]
 800d1e8:	059b      	lsls	r3, r3, #22
 800d1ea:	d402      	bmi.n	800d1f2 <_puts_r+0x9a>
 800d1ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1ee:	f002 fc89 	bl	800fb04 <__retarget_lock_release_recursive>
 800d1f2:	4628      	mov	r0, r5
 800d1f4:	bd70      	pop	{r4, r5, r6, pc}
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	da04      	bge.n	800d204 <_puts_r+0xac>
 800d1fa:	69a2      	ldr	r2, [r4, #24]
 800d1fc:	429a      	cmp	r2, r3
 800d1fe:	dc06      	bgt.n	800d20e <_puts_r+0xb6>
 800d200:	290a      	cmp	r1, #10
 800d202:	d004      	beq.n	800d20e <_puts_r+0xb6>
 800d204:	6823      	ldr	r3, [r4, #0]
 800d206:	1c5a      	adds	r2, r3, #1
 800d208:	6022      	str	r2, [r4, #0]
 800d20a:	7019      	strb	r1, [r3, #0]
 800d20c:	e7c5      	b.n	800d19a <_puts_r+0x42>
 800d20e:	4622      	mov	r2, r4
 800d210:	4628      	mov	r0, r5
 800d212:	f000 ffed 	bl	800e1f0 <__swbuf_r>
 800d216:	3001      	adds	r0, #1
 800d218:	d1bf      	bne.n	800d19a <_puts_r+0x42>
 800d21a:	e7df      	b.n	800d1dc <_puts_r+0x84>
 800d21c:	6823      	ldr	r3, [r4, #0]
 800d21e:	250a      	movs	r5, #10
 800d220:	1c5a      	adds	r2, r3, #1
 800d222:	6022      	str	r2, [r4, #0]
 800d224:	701d      	strb	r5, [r3, #0]
 800d226:	e7db      	b.n	800d1e0 <_puts_r+0x88>
 800d228:	08012d28 	.word	0x08012d28
 800d22c:	08012d48 	.word	0x08012d48
 800d230:	08012d08 	.word	0x08012d08

0800d234 <puts>:
 800d234:	4b02      	ldr	r3, [pc, #8]	; (800d240 <puts+0xc>)
 800d236:	4601      	mov	r1, r0
 800d238:	6818      	ldr	r0, [r3, #0]
 800d23a:	f7ff bf8d 	b.w	800d158 <_puts_r>
 800d23e:	bf00      	nop
 800d240:	20000178 	.word	0x20000178

0800d244 <_sbrk_r>:
 800d244:	b538      	push	{r3, r4, r5, lr}
 800d246:	4d06      	ldr	r5, [pc, #24]	; (800d260 <_sbrk_r+0x1c>)
 800d248:	2300      	movs	r3, #0
 800d24a:	4604      	mov	r4, r0
 800d24c:	4608      	mov	r0, r1
 800d24e:	602b      	str	r3, [r5, #0]
 800d250:	f7f7 fba0 	bl	8004994 <_sbrk>
 800d254:	1c43      	adds	r3, r0, #1
 800d256:	d102      	bne.n	800d25e <_sbrk_r+0x1a>
 800d258:	682b      	ldr	r3, [r5, #0]
 800d25a:	b103      	cbz	r3, 800d25e <_sbrk_r+0x1a>
 800d25c:	6023      	str	r3, [r4, #0]
 800d25e:	bd38      	pop	{r3, r4, r5, pc}
 800d260:	200025f8 	.word	0x200025f8

0800d264 <nanf>:
 800d264:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d26c <nanf+0x8>
 800d268:	4770      	bx	lr
 800d26a:	bf00      	nop
 800d26c:	7fc00000 	.word	0x7fc00000

0800d270 <sniprintf>:
 800d270:	b40c      	push	{r2, r3}
 800d272:	b530      	push	{r4, r5, lr}
 800d274:	4b17      	ldr	r3, [pc, #92]	; (800d2d4 <sniprintf+0x64>)
 800d276:	1e0c      	subs	r4, r1, #0
 800d278:	681d      	ldr	r5, [r3, #0]
 800d27a:	b09d      	sub	sp, #116	; 0x74
 800d27c:	da08      	bge.n	800d290 <sniprintf+0x20>
 800d27e:	238b      	movs	r3, #139	; 0x8b
 800d280:	602b      	str	r3, [r5, #0]
 800d282:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d286:	b01d      	add	sp, #116	; 0x74
 800d288:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d28c:	b002      	add	sp, #8
 800d28e:	4770      	bx	lr
 800d290:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d294:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d298:	bf14      	ite	ne
 800d29a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800d29e:	4623      	moveq	r3, r4
 800d2a0:	9304      	str	r3, [sp, #16]
 800d2a2:	9307      	str	r3, [sp, #28]
 800d2a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d2a8:	9002      	str	r0, [sp, #8]
 800d2aa:	9006      	str	r0, [sp, #24]
 800d2ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d2b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d2b2:	ab21      	add	r3, sp, #132	; 0x84
 800d2b4:	a902      	add	r1, sp, #8
 800d2b6:	4628      	mov	r0, r5
 800d2b8:	9301      	str	r3, [sp, #4]
 800d2ba:	f003 f9ed 	bl	8010698 <_svfiprintf_r>
 800d2be:	1c43      	adds	r3, r0, #1
 800d2c0:	bfbc      	itt	lt
 800d2c2:	238b      	movlt	r3, #139	; 0x8b
 800d2c4:	602b      	strlt	r3, [r5, #0]
 800d2c6:	2c00      	cmp	r4, #0
 800d2c8:	d0dd      	beq.n	800d286 <sniprintf+0x16>
 800d2ca:	9b02      	ldr	r3, [sp, #8]
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	701a      	strb	r2, [r3, #0]
 800d2d0:	e7d9      	b.n	800d286 <sniprintf+0x16>
 800d2d2:	bf00      	nop
 800d2d4:	20000178 	.word	0x20000178

0800d2d8 <siprintf>:
 800d2d8:	b40e      	push	{r1, r2, r3}
 800d2da:	b500      	push	{lr}
 800d2dc:	b09c      	sub	sp, #112	; 0x70
 800d2de:	ab1d      	add	r3, sp, #116	; 0x74
 800d2e0:	9002      	str	r0, [sp, #8]
 800d2e2:	9006      	str	r0, [sp, #24]
 800d2e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d2e8:	4809      	ldr	r0, [pc, #36]	; (800d310 <siprintf+0x38>)
 800d2ea:	9107      	str	r1, [sp, #28]
 800d2ec:	9104      	str	r1, [sp, #16]
 800d2ee:	4909      	ldr	r1, [pc, #36]	; (800d314 <siprintf+0x3c>)
 800d2f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2f4:	9105      	str	r1, [sp, #20]
 800d2f6:	6800      	ldr	r0, [r0, #0]
 800d2f8:	9301      	str	r3, [sp, #4]
 800d2fa:	a902      	add	r1, sp, #8
 800d2fc:	f003 f9cc 	bl	8010698 <_svfiprintf_r>
 800d300:	9b02      	ldr	r3, [sp, #8]
 800d302:	2200      	movs	r2, #0
 800d304:	701a      	strb	r2, [r3, #0]
 800d306:	b01c      	add	sp, #112	; 0x70
 800d308:	f85d eb04 	ldr.w	lr, [sp], #4
 800d30c:	b003      	add	sp, #12
 800d30e:	4770      	bx	lr
 800d310:	20000178 	.word	0x20000178
 800d314:	ffff0208 	.word	0xffff0208

0800d318 <__sread>:
 800d318:	b510      	push	{r4, lr}
 800d31a:	460c      	mov	r4, r1
 800d31c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d320:	f003 faba 	bl	8010898 <_read_r>
 800d324:	2800      	cmp	r0, #0
 800d326:	bfab      	itete	ge
 800d328:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d32a:	89a3      	ldrhlt	r3, [r4, #12]
 800d32c:	181b      	addge	r3, r3, r0
 800d32e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d332:	bfac      	ite	ge
 800d334:	6563      	strge	r3, [r4, #84]	; 0x54
 800d336:	81a3      	strhlt	r3, [r4, #12]
 800d338:	bd10      	pop	{r4, pc}

0800d33a <__swrite>:
 800d33a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d33e:	461f      	mov	r7, r3
 800d340:	898b      	ldrh	r3, [r1, #12]
 800d342:	05db      	lsls	r3, r3, #23
 800d344:	4605      	mov	r5, r0
 800d346:	460c      	mov	r4, r1
 800d348:	4616      	mov	r6, r2
 800d34a:	d505      	bpl.n	800d358 <__swrite+0x1e>
 800d34c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d350:	2302      	movs	r3, #2
 800d352:	2200      	movs	r2, #0
 800d354:	f002 fbd8 	bl	800fb08 <_lseek_r>
 800d358:	89a3      	ldrh	r3, [r4, #12]
 800d35a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d35e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d362:	81a3      	strh	r3, [r4, #12]
 800d364:	4632      	mov	r2, r6
 800d366:	463b      	mov	r3, r7
 800d368:	4628      	mov	r0, r5
 800d36a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d36e:	f000 bf91 	b.w	800e294 <_write_r>

0800d372 <__sseek>:
 800d372:	b510      	push	{r4, lr}
 800d374:	460c      	mov	r4, r1
 800d376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d37a:	f002 fbc5 	bl	800fb08 <_lseek_r>
 800d37e:	1c43      	adds	r3, r0, #1
 800d380:	89a3      	ldrh	r3, [r4, #12]
 800d382:	bf15      	itete	ne
 800d384:	6560      	strne	r0, [r4, #84]	; 0x54
 800d386:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d38a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d38e:	81a3      	strheq	r3, [r4, #12]
 800d390:	bf18      	it	ne
 800d392:	81a3      	strhne	r3, [r4, #12]
 800d394:	bd10      	pop	{r4, pc}

0800d396 <__sclose>:
 800d396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d39a:	f000 bffb 	b.w	800e394 <_close_r>

0800d39e <strcspn>:
 800d39e:	b570      	push	{r4, r5, r6, lr}
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	461e      	mov	r6, r3
 800d3a4:	f813 4b01 	ldrb.w	r4, [r3], #1
 800d3a8:	b144      	cbz	r4, 800d3bc <strcspn+0x1e>
 800d3aa:	1e4a      	subs	r2, r1, #1
 800d3ac:	e001      	b.n	800d3b2 <strcspn+0x14>
 800d3ae:	42a5      	cmp	r5, r4
 800d3b0:	d004      	beq.n	800d3bc <strcspn+0x1e>
 800d3b2:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800d3b6:	2d00      	cmp	r5, #0
 800d3b8:	d1f9      	bne.n	800d3ae <strcspn+0x10>
 800d3ba:	e7f2      	b.n	800d3a2 <strcspn+0x4>
 800d3bc:	1a30      	subs	r0, r6, r0
 800d3be:	bd70      	pop	{r4, r5, r6, pc}

0800d3c0 <strncmp>:
 800d3c0:	b510      	push	{r4, lr}
 800d3c2:	b17a      	cbz	r2, 800d3e4 <strncmp+0x24>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	3901      	subs	r1, #1
 800d3c8:	1884      	adds	r4, r0, r2
 800d3ca:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d3ce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d3d2:	4290      	cmp	r0, r2
 800d3d4:	d101      	bne.n	800d3da <strncmp+0x1a>
 800d3d6:	42a3      	cmp	r3, r4
 800d3d8:	d101      	bne.n	800d3de <strncmp+0x1e>
 800d3da:	1a80      	subs	r0, r0, r2
 800d3dc:	bd10      	pop	{r4, pc}
 800d3de:	2800      	cmp	r0, #0
 800d3e0:	d1f3      	bne.n	800d3ca <strncmp+0xa>
 800d3e2:	e7fa      	b.n	800d3da <strncmp+0x1a>
 800d3e4:	4610      	mov	r0, r2
 800d3e6:	e7f9      	b.n	800d3dc <strncmp+0x1c>

0800d3e8 <strncpy>:
 800d3e8:	b510      	push	{r4, lr}
 800d3ea:	3901      	subs	r1, #1
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	b132      	cbz	r2, 800d3fe <strncpy+0x16>
 800d3f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d3f4:	f803 4b01 	strb.w	r4, [r3], #1
 800d3f8:	3a01      	subs	r2, #1
 800d3fa:	2c00      	cmp	r4, #0
 800d3fc:	d1f7      	bne.n	800d3ee <strncpy+0x6>
 800d3fe:	441a      	add	r2, r3
 800d400:	2100      	movs	r1, #0
 800d402:	4293      	cmp	r3, r2
 800d404:	d100      	bne.n	800d408 <strncpy+0x20>
 800d406:	bd10      	pop	{r4, pc}
 800d408:	f803 1b01 	strb.w	r1, [r3], #1
 800d40c:	e7f9      	b.n	800d402 <strncpy+0x1a>

0800d40e <sulp>:
 800d40e:	b570      	push	{r4, r5, r6, lr}
 800d410:	4604      	mov	r4, r0
 800d412:	460d      	mov	r5, r1
 800d414:	ec45 4b10 	vmov	d0, r4, r5
 800d418:	4616      	mov	r6, r2
 800d41a:	f002 ff7d 	bl	8010318 <__ulp>
 800d41e:	ec51 0b10 	vmov	r0, r1, d0
 800d422:	b17e      	cbz	r6, 800d444 <sulp+0x36>
 800d424:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d428:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	dd09      	ble.n	800d444 <sulp+0x36>
 800d430:	051b      	lsls	r3, r3, #20
 800d432:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d436:	2400      	movs	r4, #0
 800d438:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d43c:	4622      	mov	r2, r4
 800d43e:	462b      	mov	r3, r5
 800d440:	f7f3 f8ea 	bl	8000618 <__aeabi_dmul>
 800d444:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d448 <_strtod_l>:
 800d448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d44c:	ed2d 8b02 	vpush	{d8}
 800d450:	b09d      	sub	sp, #116	; 0x74
 800d452:	461f      	mov	r7, r3
 800d454:	2300      	movs	r3, #0
 800d456:	9318      	str	r3, [sp, #96]	; 0x60
 800d458:	4ba2      	ldr	r3, [pc, #648]	; (800d6e4 <_strtod_l+0x29c>)
 800d45a:	9213      	str	r2, [sp, #76]	; 0x4c
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	9305      	str	r3, [sp, #20]
 800d460:	4604      	mov	r4, r0
 800d462:	4618      	mov	r0, r3
 800d464:	4688      	mov	r8, r1
 800d466:	f7f2 fec3 	bl	80001f0 <strlen>
 800d46a:	f04f 0a00 	mov.w	sl, #0
 800d46e:	4605      	mov	r5, r0
 800d470:	f04f 0b00 	mov.w	fp, #0
 800d474:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d478:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d47a:	781a      	ldrb	r2, [r3, #0]
 800d47c:	2a2b      	cmp	r2, #43	; 0x2b
 800d47e:	d04e      	beq.n	800d51e <_strtod_l+0xd6>
 800d480:	d83b      	bhi.n	800d4fa <_strtod_l+0xb2>
 800d482:	2a0d      	cmp	r2, #13
 800d484:	d834      	bhi.n	800d4f0 <_strtod_l+0xa8>
 800d486:	2a08      	cmp	r2, #8
 800d488:	d834      	bhi.n	800d4f4 <_strtod_l+0xac>
 800d48a:	2a00      	cmp	r2, #0
 800d48c:	d03e      	beq.n	800d50c <_strtod_l+0xc4>
 800d48e:	2300      	movs	r3, #0
 800d490:	930a      	str	r3, [sp, #40]	; 0x28
 800d492:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d494:	7833      	ldrb	r3, [r6, #0]
 800d496:	2b30      	cmp	r3, #48	; 0x30
 800d498:	f040 80b0 	bne.w	800d5fc <_strtod_l+0x1b4>
 800d49c:	7873      	ldrb	r3, [r6, #1]
 800d49e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d4a2:	2b58      	cmp	r3, #88	; 0x58
 800d4a4:	d168      	bne.n	800d578 <_strtod_l+0x130>
 800d4a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4a8:	9301      	str	r3, [sp, #4]
 800d4aa:	ab18      	add	r3, sp, #96	; 0x60
 800d4ac:	9702      	str	r7, [sp, #8]
 800d4ae:	9300      	str	r3, [sp, #0]
 800d4b0:	4a8d      	ldr	r2, [pc, #564]	; (800d6e8 <_strtod_l+0x2a0>)
 800d4b2:	ab19      	add	r3, sp, #100	; 0x64
 800d4b4:	a917      	add	r1, sp, #92	; 0x5c
 800d4b6:	4620      	mov	r0, r4
 800d4b8:	f002 f816 	bl	800f4e8 <__gethex>
 800d4bc:	f010 0707 	ands.w	r7, r0, #7
 800d4c0:	4605      	mov	r5, r0
 800d4c2:	d005      	beq.n	800d4d0 <_strtod_l+0x88>
 800d4c4:	2f06      	cmp	r7, #6
 800d4c6:	d12c      	bne.n	800d522 <_strtod_l+0xda>
 800d4c8:	3601      	adds	r6, #1
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	9617      	str	r6, [sp, #92]	; 0x5c
 800d4ce:	930a      	str	r3, [sp, #40]	; 0x28
 800d4d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	f040 8590 	bne.w	800dff8 <_strtod_l+0xbb0>
 800d4d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4da:	b1eb      	cbz	r3, 800d518 <_strtod_l+0xd0>
 800d4dc:	4652      	mov	r2, sl
 800d4de:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d4e2:	ec43 2b10 	vmov	d0, r2, r3
 800d4e6:	b01d      	add	sp, #116	; 0x74
 800d4e8:	ecbd 8b02 	vpop	{d8}
 800d4ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4f0:	2a20      	cmp	r2, #32
 800d4f2:	d1cc      	bne.n	800d48e <_strtod_l+0x46>
 800d4f4:	3301      	adds	r3, #1
 800d4f6:	9317      	str	r3, [sp, #92]	; 0x5c
 800d4f8:	e7be      	b.n	800d478 <_strtod_l+0x30>
 800d4fa:	2a2d      	cmp	r2, #45	; 0x2d
 800d4fc:	d1c7      	bne.n	800d48e <_strtod_l+0x46>
 800d4fe:	2201      	movs	r2, #1
 800d500:	920a      	str	r2, [sp, #40]	; 0x28
 800d502:	1c5a      	adds	r2, r3, #1
 800d504:	9217      	str	r2, [sp, #92]	; 0x5c
 800d506:	785b      	ldrb	r3, [r3, #1]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d1c2      	bne.n	800d492 <_strtod_l+0x4a>
 800d50c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d50e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d512:	2b00      	cmp	r3, #0
 800d514:	f040 856e 	bne.w	800dff4 <_strtod_l+0xbac>
 800d518:	4652      	mov	r2, sl
 800d51a:	465b      	mov	r3, fp
 800d51c:	e7e1      	b.n	800d4e2 <_strtod_l+0x9a>
 800d51e:	2200      	movs	r2, #0
 800d520:	e7ee      	b.n	800d500 <_strtod_l+0xb8>
 800d522:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d524:	b13a      	cbz	r2, 800d536 <_strtod_l+0xee>
 800d526:	2135      	movs	r1, #53	; 0x35
 800d528:	a81a      	add	r0, sp, #104	; 0x68
 800d52a:	f003 f800 	bl	801052e <__copybits>
 800d52e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d530:	4620      	mov	r0, r4
 800d532:	f002 fbbf 	bl	800fcb4 <_Bfree>
 800d536:	3f01      	subs	r7, #1
 800d538:	2f04      	cmp	r7, #4
 800d53a:	d806      	bhi.n	800d54a <_strtod_l+0x102>
 800d53c:	e8df f007 	tbb	[pc, r7]
 800d540:	1714030a 	.word	0x1714030a
 800d544:	0a          	.byte	0x0a
 800d545:	00          	.byte	0x00
 800d546:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800d54a:	0728      	lsls	r0, r5, #28
 800d54c:	d5c0      	bpl.n	800d4d0 <_strtod_l+0x88>
 800d54e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d552:	e7bd      	b.n	800d4d0 <_strtod_l+0x88>
 800d554:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800d558:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d55a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d55e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d562:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d566:	e7f0      	b.n	800d54a <_strtod_l+0x102>
 800d568:	f8df b180 	ldr.w	fp, [pc, #384]	; 800d6ec <_strtod_l+0x2a4>
 800d56c:	e7ed      	b.n	800d54a <_strtod_l+0x102>
 800d56e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d572:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800d576:	e7e8      	b.n	800d54a <_strtod_l+0x102>
 800d578:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d57a:	1c5a      	adds	r2, r3, #1
 800d57c:	9217      	str	r2, [sp, #92]	; 0x5c
 800d57e:	785b      	ldrb	r3, [r3, #1]
 800d580:	2b30      	cmp	r3, #48	; 0x30
 800d582:	d0f9      	beq.n	800d578 <_strtod_l+0x130>
 800d584:	2b00      	cmp	r3, #0
 800d586:	d0a3      	beq.n	800d4d0 <_strtod_l+0x88>
 800d588:	2301      	movs	r3, #1
 800d58a:	f04f 0900 	mov.w	r9, #0
 800d58e:	9304      	str	r3, [sp, #16]
 800d590:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d592:	9308      	str	r3, [sp, #32]
 800d594:	f8cd 901c 	str.w	r9, [sp, #28]
 800d598:	464f      	mov	r7, r9
 800d59a:	220a      	movs	r2, #10
 800d59c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d59e:	7806      	ldrb	r6, [r0, #0]
 800d5a0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d5a4:	b2d9      	uxtb	r1, r3
 800d5a6:	2909      	cmp	r1, #9
 800d5a8:	d92a      	bls.n	800d600 <_strtod_l+0x1b8>
 800d5aa:	9905      	ldr	r1, [sp, #20]
 800d5ac:	462a      	mov	r2, r5
 800d5ae:	f7ff ff07 	bl	800d3c0 <strncmp>
 800d5b2:	b398      	cbz	r0, 800d61c <_strtod_l+0x1d4>
 800d5b4:	2000      	movs	r0, #0
 800d5b6:	4632      	mov	r2, r6
 800d5b8:	463d      	mov	r5, r7
 800d5ba:	9005      	str	r0, [sp, #20]
 800d5bc:	4603      	mov	r3, r0
 800d5be:	2a65      	cmp	r2, #101	; 0x65
 800d5c0:	d001      	beq.n	800d5c6 <_strtod_l+0x17e>
 800d5c2:	2a45      	cmp	r2, #69	; 0x45
 800d5c4:	d118      	bne.n	800d5f8 <_strtod_l+0x1b0>
 800d5c6:	b91d      	cbnz	r5, 800d5d0 <_strtod_l+0x188>
 800d5c8:	9a04      	ldr	r2, [sp, #16]
 800d5ca:	4302      	orrs	r2, r0
 800d5cc:	d09e      	beq.n	800d50c <_strtod_l+0xc4>
 800d5ce:	2500      	movs	r5, #0
 800d5d0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800d5d4:	f108 0201 	add.w	r2, r8, #1
 800d5d8:	9217      	str	r2, [sp, #92]	; 0x5c
 800d5da:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d5de:	2a2b      	cmp	r2, #43	; 0x2b
 800d5e0:	d075      	beq.n	800d6ce <_strtod_l+0x286>
 800d5e2:	2a2d      	cmp	r2, #45	; 0x2d
 800d5e4:	d07b      	beq.n	800d6de <_strtod_l+0x296>
 800d5e6:	f04f 0c00 	mov.w	ip, #0
 800d5ea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d5ee:	2909      	cmp	r1, #9
 800d5f0:	f240 8082 	bls.w	800d6f8 <_strtod_l+0x2b0>
 800d5f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d5f8:	2600      	movs	r6, #0
 800d5fa:	e09d      	b.n	800d738 <_strtod_l+0x2f0>
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	e7c4      	b.n	800d58a <_strtod_l+0x142>
 800d600:	2f08      	cmp	r7, #8
 800d602:	bfd8      	it	le
 800d604:	9907      	ldrle	r1, [sp, #28]
 800d606:	f100 0001 	add.w	r0, r0, #1
 800d60a:	bfda      	itte	le
 800d60c:	fb02 3301 	mlale	r3, r2, r1, r3
 800d610:	9307      	strle	r3, [sp, #28]
 800d612:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d616:	3701      	adds	r7, #1
 800d618:	9017      	str	r0, [sp, #92]	; 0x5c
 800d61a:	e7bf      	b.n	800d59c <_strtod_l+0x154>
 800d61c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d61e:	195a      	adds	r2, r3, r5
 800d620:	9217      	str	r2, [sp, #92]	; 0x5c
 800d622:	5d5a      	ldrb	r2, [r3, r5]
 800d624:	2f00      	cmp	r7, #0
 800d626:	d037      	beq.n	800d698 <_strtod_l+0x250>
 800d628:	9005      	str	r0, [sp, #20]
 800d62a:	463d      	mov	r5, r7
 800d62c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d630:	2b09      	cmp	r3, #9
 800d632:	d912      	bls.n	800d65a <_strtod_l+0x212>
 800d634:	2301      	movs	r3, #1
 800d636:	e7c2      	b.n	800d5be <_strtod_l+0x176>
 800d638:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d63a:	1c5a      	adds	r2, r3, #1
 800d63c:	9217      	str	r2, [sp, #92]	; 0x5c
 800d63e:	785a      	ldrb	r2, [r3, #1]
 800d640:	3001      	adds	r0, #1
 800d642:	2a30      	cmp	r2, #48	; 0x30
 800d644:	d0f8      	beq.n	800d638 <_strtod_l+0x1f0>
 800d646:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d64a:	2b08      	cmp	r3, #8
 800d64c:	f200 84d9 	bhi.w	800e002 <_strtod_l+0xbba>
 800d650:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d652:	9005      	str	r0, [sp, #20]
 800d654:	2000      	movs	r0, #0
 800d656:	9308      	str	r3, [sp, #32]
 800d658:	4605      	mov	r5, r0
 800d65a:	3a30      	subs	r2, #48	; 0x30
 800d65c:	f100 0301 	add.w	r3, r0, #1
 800d660:	d014      	beq.n	800d68c <_strtod_l+0x244>
 800d662:	9905      	ldr	r1, [sp, #20]
 800d664:	4419      	add	r1, r3
 800d666:	9105      	str	r1, [sp, #20]
 800d668:	462b      	mov	r3, r5
 800d66a:	eb00 0e05 	add.w	lr, r0, r5
 800d66e:	210a      	movs	r1, #10
 800d670:	4573      	cmp	r3, lr
 800d672:	d113      	bne.n	800d69c <_strtod_l+0x254>
 800d674:	182b      	adds	r3, r5, r0
 800d676:	2b08      	cmp	r3, #8
 800d678:	f105 0501 	add.w	r5, r5, #1
 800d67c:	4405      	add	r5, r0
 800d67e:	dc1c      	bgt.n	800d6ba <_strtod_l+0x272>
 800d680:	9907      	ldr	r1, [sp, #28]
 800d682:	230a      	movs	r3, #10
 800d684:	fb03 2301 	mla	r3, r3, r1, r2
 800d688:	9307      	str	r3, [sp, #28]
 800d68a:	2300      	movs	r3, #0
 800d68c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d68e:	1c51      	adds	r1, r2, #1
 800d690:	9117      	str	r1, [sp, #92]	; 0x5c
 800d692:	7852      	ldrb	r2, [r2, #1]
 800d694:	4618      	mov	r0, r3
 800d696:	e7c9      	b.n	800d62c <_strtod_l+0x1e4>
 800d698:	4638      	mov	r0, r7
 800d69a:	e7d2      	b.n	800d642 <_strtod_l+0x1fa>
 800d69c:	2b08      	cmp	r3, #8
 800d69e:	dc04      	bgt.n	800d6aa <_strtod_l+0x262>
 800d6a0:	9e07      	ldr	r6, [sp, #28]
 800d6a2:	434e      	muls	r6, r1
 800d6a4:	9607      	str	r6, [sp, #28]
 800d6a6:	3301      	adds	r3, #1
 800d6a8:	e7e2      	b.n	800d670 <_strtod_l+0x228>
 800d6aa:	f103 0c01 	add.w	ip, r3, #1
 800d6ae:	f1bc 0f10 	cmp.w	ip, #16
 800d6b2:	bfd8      	it	le
 800d6b4:	fb01 f909 	mulle.w	r9, r1, r9
 800d6b8:	e7f5      	b.n	800d6a6 <_strtod_l+0x25e>
 800d6ba:	2d10      	cmp	r5, #16
 800d6bc:	bfdc      	itt	le
 800d6be:	230a      	movle	r3, #10
 800d6c0:	fb03 2909 	mlale	r9, r3, r9, r2
 800d6c4:	e7e1      	b.n	800d68a <_strtod_l+0x242>
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	9305      	str	r3, [sp, #20]
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	e77c      	b.n	800d5c8 <_strtod_l+0x180>
 800d6ce:	f04f 0c00 	mov.w	ip, #0
 800d6d2:	f108 0202 	add.w	r2, r8, #2
 800d6d6:	9217      	str	r2, [sp, #92]	; 0x5c
 800d6d8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d6dc:	e785      	b.n	800d5ea <_strtod_l+0x1a2>
 800d6de:	f04f 0c01 	mov.w	ip, #1
 800d6e2:	e7f6      	b.n	800d6d2 <_strtod_l+0x28a>
 800d6e4:	08012dd0 	.word	0x08012dd0
 800d6e8:	08012c24 	.word	0x08012c24
 800d6ec:	7ff00000 	.word	0x7ff00000
 800d6f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d6f2:	1c51      	adds	r1, r2, #1
 800d6f4:	9117      	str	r1, [sp, #92]	; 0x5c
 800d6f6:	7852      	ldrb	r2, [r2, #1]
 800d6f8:	2a30      	cmp	r2, #48	; 0x30
 800d6fa:	d0f9      	beq.n	800d6f0 <_strtod_l+0x2a8>
 800d6fc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d700:	2908      	cmp	r1, #8
 800d702:	f63f af79 	bhi.w	800d5f8 <_strtod_l+0x1b0>
 800d706:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d70a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d70c:	9206      	str	r2, [sp, #24]
 800d70e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d710:	1c51      	adds	r1, r2, #1
 800d712:	9117      	str	r1, [sp, #92]	; 0x5c
 800d714:	7852      	ldrb	r2, [r2, #1]
 800d716:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800d71a:	2e09      	cmp	r6, #9
 800d71c:	d937      	bls.n	800d78e <_strtod_l+0x346>
 800d71e:	9e06      	ldr	r6, [sp, #24]
 800d720:	1b89      	subs	r1, r1, r6
 800d722:	2908      	cmp	r1, #8
 800d724:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d728:	dc02      	bgt.n	800d730 <_strtod_l+0x2e8>
 800d72a:	4576      	cmp	r6, lr
 800d72c:	bfa8      	it	ge
 800d72e:	4676      	movge	r6, lr
 800d730:	f1bc 0f00 	cmp.w	ip, #0
 800d734:	d000      	beq.n	800d738 <_strtod_l+0x2f0>
 800d736:	4276      	negs	r6, r6
 800d738:	2d00      	cmp	r5, #0
 800d73a:	d14d      	bne.n	800d7d8 <_strtod_l+0x390>
 800d73c:	9904      	ldr	r1, [sp, #16]
 800d73e:	4301      	orrs	r1, r0
 800d740:	f47f aec6 	bne.w	800d4d0 <_strtod_l+0x88>
 800d744:	2b00      	cmp	r3, #0
 800d746:	f47f aee1 	bne.w	800d50c <_strtod_l+0xc4>
 800d74a:	2a69      	cmp	r2, #105	; 0x69
 800d74c:	d027      	beq.n	800d79e <_strtod_l+0x356>
 800d74e:	dc24      	bgt.n	800d79a <_strtod_l+0x352>
 800d750:	2a49      	cmp	r2, #73	; 0x49
 800d752:	d024      	beq.n	800d79e <_strtod_l+0x356>
 800d754:	2a4e      	cmp	r2, #78	; 0x4e
 800d756:	f47f aed9 	bne.w	800d50c <_strtod_l+0xc4>
 800d75a:	499f      	ldr	r1, [pc, #636]	; (800d9d8 <_strtod_l+0x590>)
 800d75c:	a817      	add	r0, sp, #92	; 0x5c
 800d75e:	f002 f91b 	bl	800f998 <__match>
 800d762:	2800      	cmp	r0, #0
 800d764:	f43f aed2 	beq.w	800d50c <_strtod_l+0xc4>
 800d768:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d76a:	781b      	ldrb	r3, [r3, #0]
 800d76c:	2b28      	cmp	r3, #40	; 0x28
 800d76e:	d12d      	bne.n	800d7cc <_strtod_l+0x384>
 800d770:	499a      	ldr	r1, [pc, #616]	; (800d9dc <_strtod_l+0x594>)
 800d772:	aa1a      	add	r2, sp, #104	; 0x68
 800d774:	a817      	add	r0, sp, #92	; 0x5c
 800d776:	f002 f923 	bl	800f9c0 <__hexnan>
 800d77a:	2805      	cmp	r0, #5
 800d77c:	d126      	bne.n	800d7cc <_strtod_l+0x384>
 800d77e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d780:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d784:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d788:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d78c:	e6a0      	b.n	800d4d0 <_strtod_l+0x88>
 800d78e:	210a      	movs	r1, #10
 800d790:	fb01 2e0e 	mla	lr, r1, lr, r2
 800d794:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d798:	e7b9      	b.n	800d70e <_strtod_l+0x2c6>
 800d79a:	2a6e      	cmp	r2, #110	; 0x6e
 800d79c:	e7db      	b.n	800d756 <_strtod_l+0x30e>
 800d79e:	4990      	ldr	r1, [pc, #576]	; (800d9e0 <_strtod_l+0x598>)
 800d7a0:	a817      	add	r0, sp, #92	; 0x5c
 800d7a2:	f002 f8f9 	bl	800f998 <__match>
 800d7a6:	2800      	cmp	r0, #0
 800d7a8:	f43f aeb0 	beq.w	800d50c <_strtod_l+0xc4>
 800d7ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d7ae:	498d      	ldr	r1, [pc, #564]	; (800d9e4 <_strtod_l+0x59c>)
 800d7b0:	3b01      	subs	r3, #1
 800d7b2:	a817      	add	r0, sp, #92	; 0x5c
 800d7b4:	9317      	str	r3, [sp, #92]	; 0x5c
 800d7b6:	f002 f8ef 	bl	800f998 <__match>
 800d7ba:	b910      	cbnz	r0, 800d7c2 <_strtod_l+0x37a>
 800d7bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d7be:	3301      	adds	r3, #1
 800d7c0:	9317      	str	r3, [sp, #92]	; 0x5c
 800d7c2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d9f4 <_strtod_l+0x5ac>
 800d7c6:	f04f 0a00 	mov.w	sl, #0
 800d7ca:	e681      	b.n	800d4d0 <_strtod_l+0x88>
 800d7cc:	4886      	ldr	r0, [pc, #536]	; (800d9e8 <_strtod_l+0x5a0>)
 800d7ce:	f003 f877 	bl	80108c0 <nan>
 800d7d2:	ec5b ab10 	vmov	sl, fp, d0
 800d7d6:	e67b      	b.n	800d4d0 <_strtod_l+0x88>
 800d7d8:	9b05      	ldr	r3, [sp, #20]
 800d7da:	9807      	ldr	r0, [sp, #28]
 800d7dc:	1af3      	subs	r3, r6, r3
 800d7de:	2f00      	cmp	r7, #0
 800d7e0:	bf08      	it	eq
 800d7e2:	462f      	moveq	r7, r5
 800d7e4:	2d10      	cmp	r5, #16
 800d7e6:	9306      	str	r3, [sp, #24]
 800d7e8:	46a8      	mov	r8, r5
 800d7ea:	bfa8      	it	ge
 800d7ec:	f04f 0810 	movge.w	r8, #16
 800d7f0:	f7f2 fe98 	bl	8000524 <__aeabi_ui2d>
 800d7f4:	2d09      	cmp	r5, #9
 800d7f6:	4682      	mov	sl, r0
 800d7f8:	468b      	mov	fp, r1
 800d7fa:	dd13      	ble.n	800d824 <_strtod_l+0x3dc>
 800d7fc:	4b7b      	ldr	r3, [pc, #492]	; (800d9ec <_strtod_l+0x5a4>)
 800d7fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d802:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d806:	f7f2 ff07 	bl	8000618 <__aeabi_dmul>
 800d80a:	4682      	mov	sl, r0
 800d80c:	4648      	mov	r0, r9
 800d80e:	468b      	mov	fp, r1
 800d810:	f7f2 fe88 	bl	8000524 <__aeabi_ui2d>
 800d814:	4602      	mov	r2, r0
 800d816:	460b      	mov	r3, r1
 800d818:	4650      	mov	r0, sl
 800d81a:	4659      	mov	r1, fp
 800d81c:	f7f2 fd46 	bl	80002ac <__adddf3>
 800d820:	4682      	mov	sl, r0
 800d822:	468b      	mov	fp, r1
 800d824:	2d0f      	cmp	r5, #15
 800d826:	dc38      	bgt.n	800d89a <_strtod_l+0x452>
 800d828:	9b06      	ldr	r3, [sp, #24]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	f43f ae50 	beq.w	800d4d0 <_strtod_l+0x88>
 800d830:	dd24      	ble.n	800d87c <_strtod_l+0x434>
 800d832:	2b16      	cmp	r3, #22
 800d834:	dc0b      	bgt.n	800d84e <_strtod_l+0x406>
 800d836:	496d      	ldr	r1, [pc, #436]	; (800d9ec <_strtod_l+0x5a4>)
 800d838:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d83c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d840:	4652      	mov	r2, sl
 800d842:	465b      	mov	r3, fp
 800d844:	f7f2 fee8 	bl	8000618 <__aeabi_dmul>
 800d848:	4682      	mov	sl, r0
 800d84a:	468b      	mov	fp, r1
 800d84c:	e640      	b.n	800d4d0 <_strtod_l+0x88>
 800d84e:	9a06      	ldr	r2, [sp, #24]
 800d850:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d854:	4293      	cmp	r3, r2
 800d856:	db20      	blt.n	800d89a <_strtod_l+0x452>
 800d858:	4c64      	ldr	r4, [pc, #400]	; (800d9ec <_strtod_l+0x5a4>)
 800d85a:	f1c5 050f 	rsb	r5, r5, #15
 800d85e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d862:	4652      	mov	r2, sl
 800d864:	465b      	mov	r3, fp
 800d866:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d86a:	f7f2 fed5 	bl	8000618 <__aeabi_dmul>
 800d86e:	9b06      	ldr	r3, [sp, #24]
 800d870:	1b5d      	subs	r5, r3, r5
 800d872:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d876:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d87a:	e7e3      	b.n	800d844 <_strtod_l+0x3fc>
 800d87c:	9b06      	ldr	r3, [sp, #24]
 800d87e:	3316      	adds	r3, #22
 800d880:	db0b      	blt.n	800d89a <_strtod_l+0x452>
 800d882:	9b05      	ldr	r3, [sp, #20]
 800d884:	1b9e      	subs	r6, r3, r6
 800d886:	4b59      	ldr	r3, [pc, #356]	; (800d9ec <_strtod_l+0x5a4>)
 800d888:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d88c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d890:	4650      	mov	r0, sl
 800d892:	4659      	mov	r1, fp
 800d894:	f7f2 ffea 	bl	800086c <__aeabi_ddiv>
 800d898:	e7d6      	b.n	800d848 <_strtod_l+0x400>
 800d89a:	9b06      	ldr	r3, [sp, #24]
 800d89c:	eba5 0808 	sub.w	r8, r5, r8
 800d8a0:	4498      	add	r8, r3
 800d8a2:	f1b8 0f00 	cmp.w	r8, #0
 800d8a6:	dd74      	ble.n	800d992 <_strtod_l+0x54a>
 800d8a8:	f018 030f 	ands.w	r3, r8, #15
 800d8ac:	d00a      	beq.n	800d8c4 <_strtod_l+0x47c>
 800d8ae:	494f      	ldr	r1, [pc, #316]	; (800d9ec <_strtod_l+0x5a4>)
 800d8b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d8b4:	4652      	mov	r2, sl
 800d8b6:	465b      	mov	r3, fp
 800d8b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8bc:	f7f2 feac 	bl	8000618 <__aeabi_dmul>
 800d8c0:	4682      	mov	sl, r0
 800d8c2:	468b      	mov	fp, r1
 800d8c4:	f038 080f 	bics.w	r8, r8, #15
 800d8c8:	d04f      	beq.n	800d96a <_strtod_l+0x522>
 800d8ca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d8ce:	dd22      	ble.n	800d916 <_strtod_l+0x4ce>
 800d8d0:	2500      	movs	r5, #0
 800d8d2:	462e      	mov	r6, r5
 800d8d4:	9507      	str	r5, [sp, #28]
 800d8d6:	9505      	str	r5, [sp, #20]
 800d8d8:	2322      	movs	r3, #34	; 0x22
 800d8da:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d9f4 <_strtod_l+0x5ac>
 800d8de:	6023      	str	r3, [r4, #0]
 800d8e0:	f04f 0a00 	mov.w	sl, #0
 800d8e4:	9b07      	ldr	r3, [sp, #28]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	f43f adf2 	beq.w	800d4d0 <_strtod_l+0x88>
 800d8ec:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d8ee:	4620      	mov	r0, r4
 800d8f0:	f002 f9e0 	bl	800fcb4 <_Bfree>
 800d8f4:	9905      	ldr	r1, [sp, #20]
 800d8f6:	4620      	mov	r0, r4
 800d8f8:	f002 f9dc 	bl	800fcb4 <_Bfree>
 800d8fc:	4631      	mov	r1, r6
 800d8fe:	4620      	mov	r0, r4
 800d900:	f002 f9d8 	bl	800fcb4 <_Bfree>
 800d904:	9907      	ldr	r1, [sp, #28]
 800d906:	4620      	mov	r0, r4
 800d908:	f002 f9d4 	bl	800fcb4 <_Bfree>
 800d90c:	4629      	mov	r1, r5
 800d90e:	4620      	mov	r0, r4
 800d910:	f002 f9d0 	bl	800fcb4 <_Bfree>
 800d914:	e5dc      	b.n	800d4d0 <_strtod_l+0x88>
 800d916:	4b36      	ldr	r3, [pc, #216]	; (800d9f0 <_strtod_l+0x5a8>)
 800d918:	9304      	str	r3, [sp, #16]
 800d91a:	2300      	movs	r3, #0
 800d91c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d920:	4650      	mov	r0, sl
 800d922:	4659      	mov	r1, fp
 800d924:	4699      	mov	r9, r3
 800d926:	f1b8 0f01 	cmp.w	r8, #1
 800d92a:	dc21      	bgt.n	800d970 <_strtod_l+0x528>
 800d92c:	b10b      	cbz	r3, 800d932 <_strtod_l+0x4ea>
 800d92e:	4682      	mov	sl, r0
 800d930:	468b      	mov	fp, r1
 800d932:	4b2f      	ldr	r3, [pc, #188]	; (800d9f0 <_strtod_l+0x5a8>)
 800d934:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d938:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d93c:	4652      	mov	r2, sl
 800d93e:	465b      	mov	r3, fp
 800d940:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d944:	f7f2 fe68 	bl	8000618 <__aeabi_dmul>
 800d948:	4b2a      	ldr	r3, [pc, #168]	; (800d9f4 <_strtod_l+0x5ac>)
 800d94a:	460a      	mov	r2, r1
 800d94c:	400b      	ands	r3, r1
 800d94e:	492a      	ldr	r1, [pc, #168]	; (800d9f8 <_strtod_l+0x5b0>)
 800d950:	428b      	cmp	r3, r1
 800d952:	4682      	mov	sl, r0
 800d954:	d8bc      	bhi.n	800d8d0 <_strtod_l+0x488>
 800d956:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d95a:	428b      	cmp	r3, r1
 800d95c:	bf86      	itte	hi
 800d95e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d9fc <_strtod_l+0x5b4>
 800d962:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800d966:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d96a:	2300      	movs	r3, #0
 800d96c:	9304      	str	r3, [sp, #16]
 800d96e:	e084      	b.n	800da7a <_strtod_l+0x632>
 800d970:	f018 0f01 	tst.w	r8, #1
 800d974:	d005      	beq.n	800d982 <_strtod_l+0x53a>
 800d976:	9b04      	ldr	r3, [sp, #16]
 800d978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d97c:	f7f2 fe4c 	bl	8000618 <__aeabi_dmul>
 800d980:	2301      	movs	r3, #1
 800d982:	9a04      	ldr	r2, [sp, #16]
 800d984:	3208      	adds	r2, #8
 800d986:	f109 0901 	add.w	r9, r9, #1
 800d98a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d98e:	9204      	str	r2, [sp, #16]
 800d990:	e7c9      	b.n	800d926 <_strtod_l+0x4de>
 800d992:	d0ea      	beq.n	800d96a <_strtod_l+0x522>
 800d994:	f1c8 0800 	rsb	r8, r8, #0
 800d998:	f018 020f 	ands.w	r2, r8, #15
 800d99c:	d00a      	beq.n	800d9b4 <_strtod_l+0x56c>
 800d99e:	4b13      	ldr	r3, [pc, #76]	; (800d9ec <_strtod_l+0x5a4>)
 800d9a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d9a4:	4650      	mov	r0, sl
 800d9a6:	4659      	mov	r1, fp
 800d9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ac:	f7f2 ff5e 	bl	800086c <__aeabi_ddiv>
 800d9b0:	4682      	mov	sl, r0
 800d9b2:	468b      	mov	fp, r1
 800d9b4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d9b8:	d0d7      	beq.n	800d96a <_strtod_l+0x522>
 800d9ba:	f1b8 0f1f 	cmp.w	r8, #31
 800d9be:	dd1f      	ble.n	800da00 <_strtod_l+0x5b8>
 800d9c0:	2500      	movs	r5, #0
 800d9c2:	462e      	mov	r6, r5
 800d9c4:	9507      	str	r5, [sp, #28]
 800d9c6:	9505      	str	r5, [sp, #20]
 800d9c8:	2322      	movs	r3, #34	; 0x22
 800d9ca:	f04f 0a00 	mov.w	sl, #0
 800d9ce:	f04f 0b00 	mov.w	fp, #0
 800d9d2:	6023      	str	r3, [r4, #0]
 800d9d4:	e786      	b.n	800d8e4 <_strtod_l+0x49c>
 800d9d6:	bf00      	nop
 800d9d8:	08012bf5 	.word	0x08012bf5
 800d9dc:	08012c38 	.word	0x08012c38
 800d9e0:	08012bed 	.word	0x08012bed
 800d9e4:	08012c7b 	.word	0x08012c7b
 800d9e8:	08012f88 	.word	0x08012f88
 800d9ec:	08012e68 	.word	0x08012e68
 800d9f0:	08012e40 	.word	0x08012e40
 800d9f4:	7ff00000 	.word	0x7ff00000
 800d9f8:	7ca00000 	.word	0x7ca00000
 800d9fc:	7fefffff 	.word	0x7fefffff
 800da00:	f018 0310 	ands.w	r3, r8, #16
 800da04:	bf18      	it	ne
 800da06:	236a      	movne	r3, #106	; 0x6a
 800da08:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800ddb8 <_strtod_l+0x970>
 800da0c:	9304      	str	r3, [sp, #16]
 800da0e:	4650      	mov	r0, sl
 800da10:	4659      	mov	r1, fp
 800da12:	2300      	movs	r3, #0
 800da14:	f018 0f01 	tst.w	r8, #1
 800da18:	d004      	beq.n	800da24 <_strtod_l+0x5dc>
 800da1a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800da1e:	f7f2 fdfb 	bl	8000618 <__aeabi_dmul>
 800da22:	2301      	movs	r3, #1
 800da24:	ea5f 0868 	movs.w	r8, r8, asr #1
 800da28:	f109 0908 	add.w	r9, r9, #8
 800da2c:	d1f2      	bne.n	800da14 <_strtod_l+0x5cc>
 800da2e:	b10b      	cbz	r3, 800da34 <_strtod_l+0x5ec>
 800da30:	4682      	mov	sl, r0
 800da32:	468b      	mov	fp, r1
 800da34:	9b04      	ldr	r3, [sp, #16]
 800da36:	b1c3      	cbz	r3, 800da6a <_strtod_l+0x622>
 800da38:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800da3c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800da40:	2b00      	cmp	r3, #0
 800da42:	4659      	mov	r1, fp
 800da44:	dd11      	ble.n	800da6a <_strtod_l+0x622>
 800da46:	2b1f      	cmp	r3, #31
 800da48:	f340 8124 	ble.w	800dc94 <_strtod_l+0x84c>
 800da4c:	2b34      	cmp	r3, #52	; 0x34
 800da4e:	bfde      	ittt	le
 800da50:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800da54:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800da58:	fa03 f202 	lslle.w	r2, r3, r2
 800da5c:	f04f 0a00 	mov.w	sl, #0
 800da60:	bfcc      	ite	gt
 800da62:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800da66:	ea02 0b01 	andle.w	fp, r2, r1
 800da6a:	2200      	movs	r2, #0
 800da6c:	2300      	movs	r3, #0
 800da6e:	4650      	mov	r0, sl
 800da70:	4659      	mov	r1, fp
 800da72:	f7f3 f839 	bl	8000ae8 <__aeabi_dcmpeq>
 800da76:	2800      	cmp	r0, #0
 800da78:	d1a2      	bne.n	800d9c0 <_strtod_l+0x578>
 800da7a:	9b07      	ldr	r3, [sp, #28]
 800da7c:	9300      	str	r3, [sp, #0]
 800da7e:	9908      	ldr	r1, [sp, #32]
 800da80:	462b      	mov	r3, r5
 800da82:	463a      	mov	r2, r7
 800da84:	4620      	mov	r0, r4
 800da86:	f002 f97d 	bl	800fd84 <__s2b>
 800da8a:	9007      	str	r0, [sp, #28]
 800da8c:	2800      	cmp	r0, #0
 800da8e:	f43f af1f 	beq.w	800d8d0 <_strtod_l+0x488>
 800da92:	9b05      	ldr	r3, [sp, #20]
 800da94:	1b9e      	subs	r6, r3, r6
 800da96:	9b06      	ldr	r3, [sp, #24]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	bfb4      	ite	lt
 800da9c:	4633      	movlt	r3, r6
 800da9e:	2300      	movge	r3, #0
 800daa0:	930c      	str	r3, [sp, #48]	; 0x30
 800daa2:	9b06      	ldr	r3, [sp, #24]
 800daa4:	2500      	movs	r5, #0
 800daa6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800daaa:	9312      	str	r3, [sp, #72]	; 0x48
 800daac:	462e      	mov	r6, r5
 800daae:	9b07      	ldr	r3, [sp, #28]
 800dab0:	4620      	mov	r0, r4
 800dab2:	6859      	ldr	r1, [r3, #4]
 800dab4:	f002 f8be 	bl	800fc34 <_Balloc>
 800dab8:	9005      	str	r0, [sp, #20]
 800daba:	2800      	cmp	r0, #0
 800dabc:	f43f af0c 	beq.w	800d8d8 <_strtod_l+0x490>
 800dac0:	9b07      	ldr	r3, [sp, #28]
 800dac2:	691a      	ldr	r2, [r3, #16]
 800dac4:	3202      	adds	r2, #2
 800dac6:	f103 010c 	add.w	r1, r3, #12
 800daca:	0092      	lsls	r2, r2, #2
 800dacc:	300c      	adds	r0, #12
 800dace:	f7fe fbd3 	bl	800c278 <memcpy>
 800dad2:	ec4b ab10 	vmov	d0, sl, fp
 800dad6:	aa1a      	add	r2, sp, #104	; 0x68
 800dad8:	a919      	add	r1, sp, #100	; 0x64
 800dada:	4620      	mov	r0, r4
 800dadc:	f002 fc98 	bl	8010410 <__d2b>
 800dae0:	ec4b ab18 	vmov	d8, sl, fp
 800dae4:	9018      	str	r0, [sp, #96]	; 0x60
 800dae6:	2800      	cmp	r0, #0
 800dae8:	f43f aef6 	beq.w	800d8d8 <_strtod_l+0x490>
 800daec:	2101      	movs	r1, #1
 800daee:	4620      	mov	r0, r4
 800daf0:	f002 f9e2 	bl	800feb8 <__i2b>
 800daf4:	4606      	mov	r6, r0
 800daf6:	2800      	cmp	r0, #0
 800daf8:	f43f aeee 	beq.w	800d8d8 <_strtod_l+0x490>
 800dafc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dafe:	9904      	ldr	r1, [sp, #16]
 800db00:	2b00      	cmp	r3, #0
 800db02:	bfab      	itete	ge
 800db04:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800db06:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800db08:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800db0a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800db0e:	bfac      	ite	ge
 800db10:	eb03 0902 	addge.w	r9, r3, r2
 800db14:	1ad7      	sublt	r7, r2, r3
 800db16:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800db18:	eba3 0801 	sub.w	r8, r3, r1
 800db1c:	4490      	add	r8, r2
 800db1e:	4ba1      	ldr	r3, [pc, #644]	; (800dda4 <_strtod_l+0x95c>)
 800db20:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800db24:	4598      	cmp	r8, r3
 800db26:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800db2a:	f280 80c7 	bge.w	800dcbc <_strtod_l+0x874>
 800db2e:	eba3 0308 	sub.w	r3, r3, r8
 800db32:	2b1f      	cmp	r3, #31
 800db34:	eba2 0203 	sub.w	r2, r2, r3
 800db38:	f04f 0101 	mov.w	r1, #1
 800db3c:	f300 80b1 	bgt.w	800dca2 <_strtod_l+0x85a>
 800db40:	fa01 f303 	lsl.w	r3, r1, r3
 800db44:	930d      	str	r3, [sp, #52]	; 0x34
 800db46:	2300      	movs	r3, #0
 800db48:	9308      	str	r3, [sp, #32]
 800db4a:	eb09 0802 	add.w	r8, r9, r2
 800db4e:	9b04      	ldr	r3, [sp, #16]
 800db50:	45c1      	cmp	r9, r8
 800db52:	4417      	add	r7, r2
 800db54:	441f      	add	r7, r3
 800db56:	464b      	mov	r3, r9
 800db58:	bfa8      	it	ge
 800db5a:	4643      	movge	r3, r8
 800db5c:	42bb      	cmp	r3, r7
 800db5e:	bfa8      	it	ge
 800db60:	463b      	movge	r3, r7
 800db62:	2b00      	cmp	r3, #0
 800db64:	bfc2      	ittt	gt
 800db66:	eba8 0803 	subgt.w	r8, r8, r3
 800db6a:	1aff      	subgt	r7, r7, r3
 800db6c:	eba9 0903 	subgt.w	r9, r9, r3
 800db70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db72:	2b00      	cmp	r3, #0
 800db74:	dd17      	ble.n	800dba6 <_strtod_l+0x75e>
 800db76:	4631      	mov	r1, r6
 800db78:	461a      	mov	r2, r3
 800db7a:	4620      	mov	r0, r4
 800db7c:	f002 fa5c 	bl	8010038 <__pow5mult>
 800db80:	4606      	mov	r6, r0
 800db82:	2800      	cmp	r0, #0
 800db84:	f43f aea8 	beq.w	800d8d8 <_strtod_l+0x490>
 800db88:	4601      	mov	r1, r0
 800db8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800db8c:	4620      	mov	r0, r4
 800db8e:	f002 f9a9 	bl	800fee4 <__multiply>
 800db92:	900b      	str	r0, [sp, #44]	; 0x2c
 800db94:	2800      	cmp	r0, #0
 800db96:	f43f ae9f 	beq.w	800d8d8 <_strtod_l+0x490>
 800db9a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800db9c:	4620      	mov	r0, r4
 800db9e:	f002 f889 	bl	800fcb4 <_Bfree>
 800dba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dba4:	9318      	str	r3, [sp, #96]	; 0x60
 800dba6:	f1b8 0f00 	cmp.w	r8, #0
 800dbaa:	f300 808c 	bgt.w	800dcc6 <_strtod_l+0x87e>
 800dbae:	9b06      	ldr	r3, [sp, #24]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	dd08      	ble.n	800dbc6 <_strtod_l+0x77e>
 800dbb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dbb6:	9905      	ldr	r1, [sp, #20]
 800dbb8:	4620      	mov	r0, r4
 800dbba:	f002 fa3d 	bl	8010038 <__pow5mult>
 800dbbe:	9005      	str	r0, [sp, #20]
 800dbc0:	2800      	cmp	r0, #0
 800dbc2:	f43f ae89 	beq.w	800d8d8 <_strtod_l+0x490>
 800dbc6:	2f00      	cmp	r7, #0
 800dbc8:	dd08      	ble.n	800dbdc <_strtod_l+0x794>
 800dbca:	9905      	ldr	r1, [sp, #20]
 800dbcc:	463a      	mov	r2, r7
 800dbce:	4620      	mov	r0, r4
 800dbd0:	f002 fa8c 	bl	80100ec <__lshift>
 800dbd4:	9005      	str	r0, [sp, #20]
 800dbd6:	2800      	cmp	r0, #0
 800dbd8:	f43f ae7e 	beq.w	800d8d8 <_strtod_l+0x490>
 800dbdc:	f1b9 0f00 	cmp.w	r9, #0
 800dbe0:	dd08      	ble.n	800dbf4 <_strtod_l+0x7ac>
 800dbe2:	4631      	mov	r1, r6
 800dbe4:	464a      	mov	r2, r9
 800dbe6:	4620      	mov	r0, r4
 800dbe8:	f002 fa80 	bl	80100ec <__lshift>
 800dbec:	4606      	mov	r6, r0
 800dbee:	2800      	cmp	r0, #0
 800dbf0:	f43f ae72 	beq.w	800d8d8 <_strtod_l+0x490>
 800dbf4:	9a05      	ldr	r2, [sp, #20]
 800dbf6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dbf8:	4620      	mov	r0, r4
 800dbfa:	f002 fb03 	bl	8010204 <__mdiff>
 800dbfe:	4605      	mov	r5, r0
 800dc00:	2800      	cmp	r0, #0
 800dc02:	f43f ae69 	beq.w	800d8d8 <_strtod_l+0x490>
 800dc06:	68c3      	ldr	r3, [r0, #12]
 800dc08:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	60c3      	str	r3, [r0, #12]
 800dc0e:	4631      	mov	r1, r6
 800dc10:	f002 fadc 	bl	80101cc <__mcmp>
 800dc14:	2800      	cmp	r0, #0
 800dc16:	da60      	bge.n	800dcda <_strtod_l+0x892>
 800dc18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc1a:	ea53 030a 	orrs.w	r3, r3, sl
 800dc1e:	f040 8082 	bne.w	800dd26 <_strtod_l+0x8de>
 800dc22:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d17d      	bne.n	800dd26 <_strtod_l+0x8de>
 800dc2a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dc2e:	0d1b      	lsrs	r3, r3, #20
 800dc30:	051b      	lsls	r3, r3, #20
 800dc32:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800dc36:	d976      	bls.n	800dd26 <_strtod_l+0x8de>
 800dc38:	696b      	ldr	r3, [r5, #20]
 800dc3a:	b913      	cbnz	r3, 800dc42 <_strtod_l+0x7fa>
 800dc3c:	692b      	ldr	r3, [r5, #16]
 800dc3e:	2b01      	cmp	r3, #1
 800dc40:	dd71      	ble.n	800dd26 <_strtod_l+0x8de>
 800dc42:	4629      	mov	r1, r5
 800dc44:	2201      	movs	r2, #1
 800dc46:	4620      	mov	r0, r4
 800dc48:	f002 fa50 	bl	80100ec <__lshift>
 800dc4c:	4631      	mov	r1, r6
 800dc4e:	4605      	mov	r5, r0
 800dc50:	f002 fabc 	bl	80101cc <__mcmp>
 800dc54:	2800      	cmp	r0, #0
 800dc56:	dd66      	ble.n	800dd26 <_strtod_l+0x8de>
 800dc58:	9904      	ldr	r1, [sp, #16]
 800dc5a:	4a53      	ldr	r2, [pc, #332]	; (800dda8 <_strtod_l+0x960>)
 800dc5c:	465b      	mov	r3, fp
 800dc5e:	2900      	cmp	r1, #0
 800dc60:	f000 8081 	beq.w	800dd66 <_strtod_l+0x91e>
 800dc64:	ea02 010b 	and.w	r1, r2, fp
 800dc68:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800dc6c:	dc7b      	bgt.n	800dd66 <_strtod_l+0x91e>
 800dc6e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800dc72:	f77f aea9 	ble.w	800d9c8 <_strtod_l+0x580>
 800dc76:	4b4d      	ldr	r3, [pc, #308]	; (800ddac <_strtod_l+0x964>)
 800dc78:	4650      	mov	r0, sl
 800dc7a:	4659      	mov	r1, fp
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	f7f2 fccb 	bl	8000618 <__aeabi_dmul>
 800dc82:	460b      	mov	r3, r1
 800dc84:	4303      	orrs	r3, r0
 800dc86:	bf08      	it	eq
 800dc88:	2322      	moveq	r3, #34	; 0x22
 800dc8a:	4682      	mov	sl, r0
 800dc8c:	468b      	mov	fp, r1
 800dc8e:	bf08      	it	eq
 800dc90:	6023      	streq	r3, [r4, #0]
 800dc92:	e62b      	b.n	800d8ec <_strtod_l+0x4a4>
 800dc94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dc98:	fa02 f303 	lsl.w	r3, r2, r3
 800dc9c:	ea03 0a0a 	and.w	sl, r3, sl
 800dca0:	e6e3      	b.n	800da6a <_strtod_l+0x622>
 800dca2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800dca6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800dcaa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800dcae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800dcb2:	fa01 f308 	lsl.w	r3, r1, r8
 800dcb6:	9308      	str	r3, [sp, #32]
 800dcb8:	910d      	str	r1, [sp, #52]	; 0x34
 800dcba:	e746      	b.n	800db4a <_strtod_l+0x702>
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	9308      	str	r3, [sp, #32]
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	930d      	str	r3, [sp, #52]	; 0x34
 800dcc4:	e741      	b.n	800db4a <_strtod_l+0x702>
 800dcc6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dcc8:	4642      	mov	r2, r8
 800dcca:	4620      	mov	r0, r4
 800dccc:	f002 fa0e 	bl	80100ec <__lshift>
 800dcd0:	9018      	str	r0, [sp, #96]	; 0x60
 800dcd2:	2800      	cmp	r0, #0
 800dcd4:	f47f af6b 	bne.w	800dbae <_strtod_l+0x766>
 800dcd8:	e5fe      	b.n	800d8d8 <_strtod_l+0x490>
 800dcda:	465f      	mov	r7, fp
 800dcdc:	d16e      	bne.n	800ddbc <_strtod_l+0x974>
 800dcde:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dce0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dce4:	b342      	cbz	r2, 800dd38 <_strtod_l+0x8f0>
 800dce6:	4a32      	ldr	r2, [pc, #200]	; (800ddb0 <_strtod_l+0x968>)
 800dce8:	4293      	cmp	r3, r2
 800dcea:	d128      	bne.n	800dd3e <_strtod_l+0x8f6>
 800dcec:	9b04      	ldr	r3, [sp, #16]
 800dcee:	4651      	mov	r1, sl
 800dcf0:	b1eb      	cbz	r3, 800dd2e <_strtod_l+0x8e6>
 800dcf2:	4b2d      	ldr	r3, [pc, #180]	; (800dda8 <_strtod_l+0x960>)
 800dcf4:	403b      	ands	r3, r7
 800dcf6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800dcfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dcfe:	d819      	bhi.n	800dd34 <_strtod_l+0x8ec>
 800dd00:	0d1b      	lsrs	r3, r3, #20
 800dd02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dd06:	fa02 f303 	lsl.w	r3, r2, r3
 800dd0a:	4299      	cmp	r1, r3
 800dd0c:	d117      	bne.n	800dd3e <_strtod_l+0x8f6>
 800dd0e:	4b29      	ldr	r3, [pc, #164]	; (800ddb4 <_strtod_l+0x96c>)
 800dd10:	429f      	cmp	r7, r3
 800dd12:	d102      	bne.n	800dd1a <_strtod_l+0x8d2>
 800dd14:	3101      	adds	r1, #1
 800dd16:	f43f addf 	beq.w	800d8d8 <_strtod_l+0x490>
 800dd1a:	4b23      	ldr	r3, [pc, #140]	; (800dda8 <_strtod_l+0x960>)
 800dd1c:	403b      	ands	r3, r7
 800dd1e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800dd22:	f04f 0a00 	mov.w	sl, #0
 800dd26:	9b04      	ldr	r3, [sp, #16]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d1a4      	bne.n	800dc76 <_strtod_l+0x82e>
 800dd2c:	e5de      	b.n	800d8ec <_strtod_l+0x4a4>
 800dd2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd32:	e7ea      	b.n	800dd0a <_strtod_l+0x8c2>
 800dd34:	4613      	mov	r3, r2
 800dd36:	e7e8      	b.n	800dd0a <_strtod_l+0x8c2>
 800dd38:	ea53 030a 	orrs.w	r3, r3, sl
 800dd3c:	d08c      	beq.n	800dc58 <_strtod_l+0x810>
 800dd3e:	9b08      	ldr	r3, [sp, #32]
 800dd40:	b1db      	cbz	r3, 800dd7a <_strtod_l+0x932>
 800dd42:	423b      	tst	r3, r7
 800dd44:	d0ef      	beq.n	800dd26 <_strtod_l+0x8de>
 800dd46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd48:	9a04      	ldr	r2, [sp, #16]
 800dd4a:	4650      	mov	r0, sl
 800dd4c:	4659      	mov	r1, fp
 800dd4e:	b1c3      	cbz	r3, 800dd82 <_strtod_l+0x93a>
 800dd50:	f7ff fb5d 	bl	800d40e <sulp>
 800dd54:	4602      	mov	r2, r0
 800dd56:	460b      	mov	r3, r1
 800dd58:	ec51 0b18 	vmov	r0, r1, d8
 800dd5c:	f7f2 faa6 	bl	80002ac <__adddf3>
 800dd60:	4682      	mov	sl, r0
 800dd62:	468b      	mov	fp, r1
 800dd64:	e7df      	b.n	800dd26 <_strtod_l+0x8de>
 800dd66:	4013      	ands	r3, r2
 800dd68:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800dd6c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dd70:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800dd74:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800dd78:	e7d5      	b.n	800dd26 <_strtod_l+0x8de>
 800dd7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dd7c:	ea13 0f0a 	tst.w	r3, sl
 800dd80:	e7e0      	b.n	800dd44 <_strtod_l+0x8fc>
 800dd82:	f7ff fb44 	bl	800d40e <sulp>
 800dd86:	4602      	mov	r2, r0
 800dd88:	460b      	mov	r3, r1
 800dd8a:	ec51 0b18 	vmov	r0, r1, d8
 800dd8e:	f7f2 fa8b 	bl	80002a8 <__aeabi_dsub>
 800dd92:	2200      	movs	r2, #0
 800dd94:	2300      	movs	r3, #0
 800dd96:	4682      	mov	sl, r0
 800dd98:	468b      	mov	fp, r1
 800dd9a:	f7f2 fea5 	bl	8000ae8 <__aeabi_dcmpeq>
 800dd9e:	2800      	cmp	r0, #0
 800dda0:	d0c1      	beq.n	800dd26 <_strtod_l+0x8de>
 800dda2:	e611      	b.n	800d9c8 <_strtod_l+0x580>
 800dda4:	fffffc02 	.word	0xfffffc02
 800dda8:	7ff00000 	.word	0x7ff00000
 800ddac:	39500000 	.word	0x39500000
 800ddb0:	000fffff 	.word	0x000fffff
 800ddb4:	7fefffff 	.word	0x7fefffff
 800ddb8:	08012c50 	.word	0x08012c50
 800ddbc:	4631      	mov	r1, r6
 800ddbe:	4628      	mov	r0, r5
 800ddc0:	f002 fb82 	bl	80104c8 <__ratio>
 800ddc4:	ec59 8b10 	vmov	r8, r9, d0
 800ddc8:	ee10 0a10 	vmov	r0, s0
 800ddcc:	2200      	movs	r2, #0
 800ddce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ddd2:	4649      	mov	r1, r9
 800ddd4:	f7f2 fe9c 	bl	8000b10 <__aeabi_dcmple>
 800ddd8:	2800      	cmp	r0, #0
 800ddda:	d07a      	beq.n	800ded2 <_strtod_l+0xa8a>
 800dddc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d04a      	beq.n	800de78 <_strtod_l+0xa30>
 800dde2:	4b95      	ldr	r3, [pc, #596]	; (800e038 <_strtod_l+0xbf0>)
 800dde4:	2200      	movs	r2, #0
 800dde6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ddea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800e038 <_strtod_l+0xbf0>
 800ddee:	f04f 0800 	mov.w	r8, #0
 800ddf2:	4b92      	ldr	r3, [pc, #584]	; (800e03c <_strtod_l+0xbf4>)
 800ddf4:	403b      	ands	r3, r7
 800ddf6:	930d      	str	r3, [sp, #52]	; 0x34
 800ddf8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ddfa:	4b91      	ldr	r3, [pc, #580]	; (800e040 <_strtod_l+0xbf8>)
 800ddfc:	429a      	cmp	r2, r3
 800ddfe:	f040 80b0 	bne.w	800df62 <_strtod_l+0xb1a>
 800de02:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800de06:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800de0a:	ec4b ab10 	vmov	d0, sl, fp
 800de0e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800de12:	f002 fa81 	bl	8010318 <__ulp>
 800de16:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800de1a:	ec53 2b10 	vmov	r2, r3, d0
 800de1e:	f7f2 fbfb 	bl	8000618 <__aeabi_dmul>
 800de22:	4652      	mov	r2, sl
 800de24:	465b      	mov	r3, fp
 800de26:	f7f2 fa41 	bl	80002ac <__adddf3>
 800de2a:	460b      	mov	r3, r1
 800de2c:	4983      	ldr	r1, [pc, #524]	; (800e03c <_strtod_l+0xbf4>)
 800de2e:	4a85      	ldr	r2, [pc, #532]	; (800e044 <_strtod_l+0xbfc>)
 800de30:	4019      	ands	r1, r3
 800de32:	4291      	cmp	r1, r2
 800de34:	4682      	mov	sl, r0
 800de36:	d960      	bls.n	800defa <_strtod_l+0xab2>
 800de38:	ee18 3a90 	vmov	r3, s17
 800de3c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800de40:	4293      	cmp	r3, r2
 800de42:	d104      	bne.n	800de4e <_strtod_l+0xa06>
 800de44:	ee18 3a10 	vmov	r3, s16
 800de48:	3301      	adds	r3, #1
 800de4a:	f43f ad45 	beq.w	800d8d8 <_strtod_l+0x490>
 800de4e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800e050 <_strtod_l+0xc08>
 800de52:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800de56:	9918      	ldr	r1, [sp, #96]	; 0x60
 800de58:	4620      	mov	r0, r4
 800de5a:	f001 ff2b 	bl	800fcb4 <_Bfree>
 800de5e:	9905      	ldr	r1, [sp, #20]
 800de60:	4620      	mov	r0, r4
 800de62:	f001 ff27 	bl	800fcb4 <_Bfree>
 800de66:	4631      	mov	r1, r6
 800de68:	4620      	mov	r0, r4
 800de6a:	f001 ff23 	bl	800fcb4 <_Bfree>
 800de6e:	4629      	mov	r1, r5
 800de70:	4620      	mov	r0, r4
 800de72:	f001 ff1f 	bl	800fcb4 <_Bfree>
 800de76:	e61a      	b.n	800daae <_strtod_l+0x666>
 800de78:	f1ba 0f00 	cmp.w	sl, #0
 800de7c:	d11b      	bne.n	800deb6 <_strtod_l+0xa6e>
 800de7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800de82:	b9f3      	cbnz	r3, 800dec2 <_strtod_l+0xa7a>
 800de84:	4b6c      	ldr	r3, [pc, #432]	; (800e038 <_strtod_l+0xbf0>)
 800de86:	2200      	movs	r2, #0
 800de88:	4640      	mov	r0, r8
 800de8a:	4649      	mov	r1, r9
 800de8c:	f7f2 fe36 	bl	8000afc <__aeabi_dcmplt>
 800de90:	b9d0      	cbnz	r0, 800dec8 <_strtod_l+0xa80>
 800de92:	4640      	mov	r0, r8
 800de94:	4649      	mov	r1, r9
 800de96:	4b6c      	ldr	r3, [pc, #432]	; (800e048 <_strtod_l+0xc00>)
 800de98:	2200      	movs	r2, #0
 800de9a:	f7f2 fbbd 	bl	8000618 <__aeabi_dmul>
 800de9e:	4680      	mov	r8, r0
 800dea0:	4689      	mov	r9, r1
 800dea2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dea6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800deaa:	9315      	str	r3, [sp, #84]	; 0x54
 800deac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800deb0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800deb4:	e79d      	b.n	800ddf2 <_strtod_l+0x9aa>
 800deb6:	f1ba 0f01 	cmp.w	sl, #1
 800deba:	d102      	bne.n	800dec2 <_strtod_l+0xa7a>
 800debc:	2f00      	cmp	r7, #0
 800debe:	f43f ad83 	beq.w	800d9c8 <_strtod_l+0x580>
 800dec2:	4b62      	ldr	r3, [pc, #392]	; (800e04c <_strtod_l+0xc04>)
 800dec4:	2200      	movs	r2, #0
 800dec6:	e78e      	b.n	800dde6 <_strtod_l+0x99e>
 800dec8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800e048 <_strtod_l+0xc00>
 800decc:	f04f 0800 	mov.w	r8, #0
 800ded0:	e7e7      	b.n	800dea2 <_strtod_l+0xa5a>
 800ded2:	4b5d      	ldr	r3, [pc, #372]	; (800e048 <_strtod_l+0xc00>)
 800ded4:	4640      	mov	r0, r8
 800ded6:	4649      	mov	r1, r9
 800ded8:	2200      	movs	r2, #0
 800deda:	f7f2 fb9d 	bl	8000618 <__aeabi_dmul>
 800dede:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dee0:	4680      	mov	r8, r0
 800dee2:	4689      	mov	r9, r1
 800dee4:	b933      	cbnz	r3, 800def4 <_strtod_l+0xaac>
 800dee6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800deea:	900e      	str	r0, [sp, #56]	; 0x38
 800deec:	930f      	str	r3, [sp, #60]	; 0x3c
 800deee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800def2:	e7dd      	b.n	800deb0 <_strtod_l+0xa68>
 800def4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800def8:	e7f9      	b.n	800deee <_strtod_l+0xaa6>
 800defa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800defe:	9b04      	ldr	r3, [sp, #16]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d1a8      	bne.n	800de56 <_strtod_l+0xa0e>
 800df04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800df08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800df0a:	0d1b      	lsrs	r3, r3, #20
 800df0c:	051b      	lsls	r3, r3, #20
 800df0e:	429a      	cmp	r2, r3
 800df10:	d1a1      	bne.n	800de56 <_strtod_l+0xa0e>
 800df12:	4640      	mov	r0, r8
 800df14:	4649      	mov	r1, r9
 800df16:	f7f2 fedf 	bl	8000cd8 <__aeabi_d2lz>
 800df1a:	f7f2 fb4f 	bl	80005bc <__aeabi_l2d>
 800df1e:	4602      	mov	r2, r0
 800df20:	460b      	mov	r3, r1
 800df22:	4640      	mov	r0, r8
 800df24:	4649      	mov	r1, r9
 800df26:	f7f2 f9bf 	bl	80002a8 <__aeabi_dsub>
 800df2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800df2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800df30:	ea43 030a 	orr.w	r3, r3, sl
 800df34:	4313      	orrs	r3, r2
 800df36:	4680      	mov	r8, r0
 800df38:	4689      	mov	r9, r1
 800df3a:	d055      	beq.n	800dfe8 <_strtod_l+0xba0>
 800df3c:	a336      	add	r3, pc, #216	; (adr r3, 800e018 <_strtod_l+0xbd0>)
 800df3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df42:	f7f2 fddb 	bl	8000afc <__aeabi_dcmplt>
 800df46:	2800      	cmp	r0, #0
 800df48:	f47f acd0 	bne.w	800d8ec <_strtod_l+0x4a4>
 800df4c:	a334      	add	r3, pc, #208	; (adr r3, 800e020 <_strtod_l+0xbd8>)
 800df4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df52:	4640      	mov	r0, r8
 800df54:	4649      	mov	r1, r9
 800df56:	f7f2 fdef 	bl	8000b38 <__aeabi_dcmpgt>
 800df5a:	2800      	cmp	r0, #0
 800df5c:	f43f af7b 	beq.w	800de56 <_strtod_l+0xa0e>
 800df60:	e4c4      	b.n	800d8ec <_strtod_l+0x4a4>
 800df62:	9b04      	ldr	r3, [sp, #16]
 800df64:	b333      	cbz	r3, 800dfb4 <_strtod_l+0xb6c>
 800df66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df68:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800df6c:	d822      	bhi.n	800dfb4 <_strtod_l+0xb6c>
 800df6e:	a32e      	add	r3, pc, #184	; (adr r3, 800e028 <_strtod_l+0xbe0>)
 800df70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df74:	4640      	mov	r0, r8
 800df76:	4649      	mov	r1, r9
 800df78:	f7f2 fdca 	bl	8000b10 <__aeabi_dcmple>
 800df7c:	b1a0      	cbz	r0, 800dfa8 <_strtod_l+0xb60>
 800df7e:	4649      	mov	r1, r9
 800df80:	4640      	mov	r0, r8
 800df82:	f7f2 fe21 	bl	8000bc8 <__aeabi_d2uiz>
 800df86:	2801      	cmp	r0, #1
 800df88:	bf38      	it	cc
 800df8a:	2001      	movcc	r0, #1
 800df8c:	f7f2 faca 	bl	8000524 <__aeabi_ui2d>
 800df90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df92:	4680      	mov	r8, r0
 800df94:	4689      	mov	r9, r1
 800df96:	bb23      	cbnz	r3, 800dfe2 <_strtod_l+0xb9a>
 800df98:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800df9c:	9010      	str	r0, [sp, #64]	; 0x40
 800df9e:	9311      	str	r3, [sp, #68]	; 0x44
 800dfa0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800dfa4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dfa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfaa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dfac:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800dfb0:	1a9b      	subs	r3, r3, r2
 800dfb2:	9309      	str	r3, [sp, #36]	; 0x24
 800dfb4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dfb8:	eeb0 0a48 	vmov.f32	s0, s16
 800dfbc:	eef0 0a68 	vmov.f32	s1, s17
 800dfc0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dfc4:	f002 f9a8 	bl	8010318 <__ulp>
 800dfc8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dfcc:	ec53 2b10 	vmov	r2, r3, d0
 800dfd0:	f7f2 fb22 	bl	8000618 <__aeabi_dmul>
 800dfd4:	ec53 2b18 	vmov	r2, r3, d8
 800dfd8:	f7f2 f968 	bl	80002ac <__adddf3>
 800dfdc:	4682      	mov	sl, r0
 800dfde:	468b      	mov	fp, r1
 800dfe0:	e78d      	b.n	800defe <_strtod_l+0xab6>
 800dfe2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800dfe6:	e7db      	b.n	800dfa0 <_strtod_l+0xb58>
 800dfe8:	a311      	add	r3, pc, #68	; (adr r3, 800e030 <_strtod_l+0xbe8>)
 800dfea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfee:	f7f2 fd85 	bl	8000afc <__aeabi_dcmplt>
 800dff2:	e7b2      	b.n	800df5a <_strtod_l+0xb12>
 800dff4:	2300      	movs	r3, #0
 800dff6:	930a      	str	r3, [sp, #40]	; 0x28
 800dff8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800dffa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dffc:	6013      	str	r3, [r2, #0]
 800dffe:	f7ff ba6b 	b.w	800d4d8 <_strtod_l+0x90>
 800e002:	2a65      	cmp	r2, #101	; 0x65
 800e004:	f43f ab5f 	beq.w	800d6c6 <_strtod_l+0x27e>
 800e008:	2a45      	cmp	r2, #69	; 0x45
 800e00a:	f43f ab5c 	beq.w	800d6c6 <_strtod_l+0x27e>
 800e00e:	2301      	movs	r3, #1
 800e010:	f7ff bb94 	b.w	800d73c <_strtod_l+0x2f4>
 800e014:	f3af 8000 	nop.w
 800e018:	94a03595 	.word	0x94a03595
 800e01c:	3fdfffff 	.word	0x3fdfffff
 800e020:	35afe535 	.word	0x35afe535
 800e024:	3fe00000 	.word	0x3fe00000
 800e028:	ffc00000 	.word	0xffc00000
 800e02c:	41dfffff 	.word	0x41dfffff
 800e030:	94a03595 	.word	0x94a03595
 800e034:	3fcfffff 	.word	0x3fcfffff
 800e038:	3ff00000 	.word	0x3ff00000
 800e03c:	7ff00000 	.word	0x7ff00000
 800e040:	7fe00000 	.word	0x7fe00000
 800e044:	7c9fffff 	.word	0x7c9fffff
 800e048:	3fe00000 	.word	0x3fe00000
 800e04c:	bff00000 	.word	0xbff00000
 800e050:	7fefffff 	.word	0x7fefffff

0800e054 <_strtod_r>:
 800e054:	4b01      	ldr	r3, [pc, #4]	; (800e05c <_strtod_r+0x8>)
 800e056:	f7ff b9f7 	b.w	800d448 <_strtod_l>
 800e05a:	bf00      	nop
 800e05c:	200001e0 	.word	0x200001e0

0800e060 <_strtol_l.constprop.0>:
 800e060:	2b01      	cmp	r3, #1
 800e062:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e066:	d001      	beq.n	800e06c <_strtol_l.constprop.0+0xc>
 800e068:	2b24      	cmp	r3, #36	; 0x24
 800e06a:	d906      	bls.n	800e07a <_strtol_l.constprop.0+0x1a>
 800e06c:	f7fe f8ca 	bl	800c204 <__errno>
 800e070:	2316      	movs	r3, #22
 800e072:	6003      	str	r3, [r0, #0]
 800e074:	2000      	movs	r0, #0
 800e076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e07a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e160 <_strtol_l.constprop.0+0x100>
 800e07e:	460d      	mov	r5, r1
 800e080:	462e      	mov	r6, r5
 800e082:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e086:	f814 700c 	ldrb.w	r7, [r4, ip]
 800e08a:	f017 0708 	ands.w	r7, r7, #8
 800e08e:	d1f7      	bne.n	800e080 <_strtol_l.constprop.0+0x20>
 800e090:	2c2d      	cmp	r4, #45	; 0x2d
 800e092:	d132      	bne.n	800e0fa <_strtol_l.constprop.0+0x9a>
 800e094:	782c      	ldrb	r4, [r5, #0]
 800e096:	2701      	movs	r7, #1
 800e098:	1cb5      	adds	r5, r6, #2
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d05b      	beq.n	800e156 <_strtol_l.constprop.0+0xf6>
 800e09e:	2b10      	cmp	r3, #16
 800e0a0:	d109      	bne.n	800e0b6 <_strtol_l.constprop.0+0x56>
 800e0a2:	2c30      	cmp	r4, #48	; 0x30
 800e0a4:	d107      	bne.n	800e0b6 <_strtol_l.constprop.0+0x56>
 800e0a6:	782c      	ldrb	r4, [r5, #0]
 800e0a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e0ac:	2c58      	cmp	r4, #88	; 0x58
 800e0ae:	d14d      	bne.n	800e14c <_strtol_l.constprop.0+0xec>
 800e0b0:	786c      	ldrb	r4, [r5, #1]
 800e0b2:	2310      	movs	r3, #16
 800e0b4:	3502      	adds	r5, #2
 800e0b6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e0ba:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800e0be:	f04f 0c00 	mov.w	ip, #0
 800e0c2:	fbb8 f9f3 	udiv	r9, r8, r3
 800e0c6:	4666      	mov	r6, ip
 800e0c8:	fb03 8a19 	mls	sl, r3, r9, r8
 800e0cc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800e0d0:	f1be 0f09 	cmp.w	lr, #9
 800e0d4:	d816      	bhi.n	800e104 <_strtol_l.constprop.0+0xa4>
 800e0d6:	4674      	mov	r4, lr
 800e0d8:	42a3      	cmp	r3, r4
 800e0da:	dd24      	ble.n	800e126 <_strtol_l.constprop.0+0xc6>
 800e0dc:	f1bc 0f00 	cmp.w	ip, #0
 800e0e0:	db1e      	blt.n	800e120 <_strtol_l.constprop.0+0xc0>
 800e0e2:	45b1      	cmp	r9, r6
 800e0e4:	d31c      	bcc.n	800e120 <_strtol_l.constprop.0+0xc0>
 800e0e6:	d101      	bne.n	800e0ec <_strtol_l.constprop.0+0x8c>
 800e0e8:	45a2      	cmp	sl, r4
 800e0ea:	db19      	blt.n	800e120 <_strtol_l.constprop.0+0xc0>
 800e0ec:	fb06 4603 	mla	r6, r6, r3, r4
 800e0f0:	f04f 0c01 	mov.w	ip, #1
 800e0f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e0f8:	e7e8      	b.n	800e0cc <_strtol_l.constprop.0+0x6c>
 800e0fa:	2c2b      	cmp	r4, #43	; 0x2b
 800e0fc:	bf04      	itt	eq
 800e0fe:	782c      	ldrbeq	r4, [r5, #0]
 800e100:	1cb5      	addeq	r5, r6, #2
 800e102:	e7ca      	b.n	800e09a <_strtol_l.constprop.0+0x3a>
 800e104:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800e108:	f1be 0f19 	cmp.w	lr, #25
 800e10c:	d801      	bhi.n	800e112 <_strtol_l.constprop.0+0xb2>
 800e10e:	3c37      	subs	r4, #55	; 0x37
 800e110:	e7e2      	b.n	800e0d8 <_strtol_l.constprop.0+0x78>
 800e112:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800e116:	f1be 0f19 	cmp.w	lr, #25
 800e11a:	d804      	bhi.n	800e126 <_strtol_l.constprop.0+0xc6>
 800e11c:	3c57      	subs	r4, #87	; 0x57
 800e11e:	e7db      	b.n	800e0d8 <_strtol_l.constprop.0+0x78>
 800e120:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800e124:	e7e6      	b.n	800e0f4 <_strtol_l.constprop.0+0x94>
 800e126:	f1bc 0f00 	cmp.w	ip, #0
 800e12a:	da05      	bge.n	800e138 <_strtol_l.constprop.0+0xd8>
 800e12c:	2322      	movs	r3, #34	; 0x22
 800e12e:	6003      	str	r3, [r0, #0]
 800e130:	4646      	mov	r6, r8
 800e132:	b942      	cbnz	r2, 800e146 <_strtol_l.constprop.0+0xe6>
 800e134:	4630      	mov	r0, r6
 800e136:	e79e      	b.n	800e076 <_strtol_l.constprop.0+0x16>
 800e138:	b107      	cbz	r7, 800e13c <_strtol_l.constprop.0+0xdc>
 800e13a:	4276      	negs	r6, r6
 800e13c:	2a00      	cmp	r2, #0
 800e13e:	d0f9      	beq.n	800e134 <_strtol_l.constprop.0+0xd4>
 800e140:	f1bc 0f00 	cmp.w	ip, #0
 800e144:	d000      	beq.n	800e148 <_strtol_l.constprop.0+0xe8>
 800e146:	1e69      	subs	r1, r5, #1
 800e148:	6011      	str	r1, [r2, #0]
 800e14a:	e7f3      	b.n	800e134 <_strtol_l.constprop.0+0xd4>
 800e14c:	2430      	movs	r4, #48	; 0x30
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d1b1      	bne.n	800e0b6 <_strtol_l.constprop.0+0x56>
 800e152:	2308      	movs	r3, #8
 800e154:	e7af      	b.n	800e0b6 <_strtol_l.constprop.0+0x56>
 800e156:	2c30      	cmp	r4, #48	; 0x30
 800e158:	d0a5      	beq.n	800e0a6 <_strtol_l.constprop.0+0x46>
 800e15a:	230a      	movs	r3, #10
 800e15c:	e7ab      	b.n	800e0b6 <_strtol_l.constprop.0+0x56>
 800e15e:	bf00      	nop
 800e160:	08012ae2 	.word	0x08012ae2

0800e164 <_strtol_r>:
 800e164:	f7ff bf7c 	b.w	800e060 <_strtol_l.constprop.0>

0800e168 <strtol>:
 800e168:	4613      	mov	r3, r2
 800e16a:	460a      	mov	r2, r1
 800e16c:	4601      	mov	r1, r0
 800e16e:	4802      	ldr	r0, [pc, #8]	; (800e178 <strtol+0x10>)
 800e170:	6800      	ldr	r0, [r0, #0]
 800e172:	f7ff bf75 	b.w	800e060 <_strtol_l.constprop.0>
 800e176:	bf00      	nop
 800e178:	20000178 	.word	0x20000178

0800e17c <_vsniprintf_r>:
 800e17c:	b530      	push	{r4, r5, lr}
 800e17e:	4614      	mov	r4, r2
 800e180:	2c00      	cmp	r4, #0
 800e182:	b09b      	sub	sp, #108	; 0x6c
 800e184:	4605      	mov	r5, r0
 800e186:	461a      	mov	r2, r3
 800e188:	da05      	bge.n	800e196 <_vsniprintf_r+0x1a>
 800e18a:	238b      	movs	r3, #139	; 0x8b
 800e18c:	6003      	str	r3, [r0, #0]
 800e18e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e192:	b01b      	add	sp, #108	; 0x6c
 800e194:	bd30      	pop	{r4, r5, pc}
 800e196:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e19a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e19e:	bf14      	ite	ne
 800e1a0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800e1a4:	4623      	moveq	r3, r4
 800e1a6:	9302      	str	r3, [sp, #8]
 800e1a8:	9305      	str	r3, [sp, #20]
 800e1aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e1ae:	9100      	str	r1, [sp, #0]
 800e1b0:	9104      	str	r1, [sp, #16]
 800e1b2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e1b6:	4669      	mov	r1, sp
 800e1b8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e1ba:	f002 fa6d 	bl	8010698 <_svfiprintf_r>
 800e1be:	1c43      	adds	r3, r0, #1
 800e1c0:	bfbc      	itt	lt
 800e1c2:	238b      	movlt	r3, #139	; 0x8b
 800e1c4:	602b      	strlt	r3, [r5, #0]
 800e1c6:	2c00      	cmp	r4, #0
 800e1c8:	d0e3      	beq.n	800e192 <_vsniprintf_r+0x16>
 800e1ca:	9b00      	ldr	r3, [sp, #0]
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	701a      	strb	r2, [r3, #0]
 800e1d0:	e7df      	b.n	800e192 <_vsniprintf_r+0x16>
	...

0800e1d4 <vsniprintf>:
 800e1d4:	b507      	push	{r0, r1, r2, lr}
 800e1d6:	9300      	str	r3, [sp, #0]
 800e1d8:	4613      	mov	r3, r2
 800e1da:	460a      	mov	r2, r1
 800e1dc:	4601      	mov	r1, r0
 800e1de:	4803      	ldr	r0, [pc, #12]	; (800e1ec <vsniprintf+0x18>)
 800e1e0:	6800      	ldr	r0, [r0, #0]
 800e1e2:	f7ff ffcb 	bl	800e17c <_vsniprintf_r>
 800e1e6:	b003      	add	sp, #12
 800e1e8:	f85d fb04 	ldr.w	pc, [sp], #4
 800e1ec:	20000178 	.word	0x20000178

0800e1f0 <__swbuf_r>:
 800e1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1f2:	460e      	mov	r6, r1
 800e1f4:	4614      	mov	r4, r2
 800e1f6:	4605      	mov	r5, r0
 800e1f8:	b118      	cbz	r0, 800e202 <__swbuf_r+0x12>
 800e1fa:	6983      	ldr	r3, [r0, #24]
 800e1fc:	b90b      	cbnz	r3, 800e202 <__swbuf_r+0x12>
 800e1fe:	f001 f86f 	bl	800f2e0 <__sinit>
 800e202:	4b21      	ldr	r3, [pc, #132]	; (800e288 <__swbuf_r+0x98>)
 800e204:	429c      	cmp	r4, r3
 800e206:	d12b      	bne.n	800e260 <__swbuf_r+0x70>
 800e208:	686c      	ldr	r4, [r5, #4]
 800e20a:	69a3      	ldr	r3, [r4, #24]
 800e20c:	60a3      	str	r3, [r4, #8]
 800e20e:	89a3      	ldrh	r3, [r4, #12]
 800e210:	071a      	lsls	r2, r3, #28
 800e212:	d52f      	bpl.n	800e274 <__swbuf_r+0x84>
 800e214:	6923      	ldr	r3, [r4, #16]
 800e216:	b36b      	cbz	r3, 800e274 <__swbuf_r+0x84>
 800e218:	6923      	ldr	r3, [r4, #16]
 800e21a:	6820      	ldr	r0, [r4, #0]
 800e21c:	1ac0      	subs	r0, r0, r3
 800e21e:	6963      	ldr	r3, [r4, #20]
 800e220:	b2f6      	uxtb	r6, r6
 800e222:	4283      	cmp	r3, r0
 800e224:	4637      	mov	r7, r6
 800e226:	dc04      	bgt.n	800e232 <__swbuf_r+0x42>
 800e228:	4621      	mov	r1, r4
 800e22a:	4628      	mov	r0, r5
 800e22c:	f000 ffc4 	bl	800f1b8 <_fflush_r>
 800e230:	bb30      	cbnz	r0, 800e280 <__swbuf_r+0x90>
 800e232:	68a3      	ldr	r3, [r4, #8]
 800e234:	3b01      	subs	r3, #1
 800e236:	60a3      	str	r3, [r4, #8]
 800e238:	6823      	ldr	r3, [r4, #0]
 800e23a:	1c5a      	adds	r2, r3, #1
 800e23c:	6022      	str	r2, [r4, #0]
 800e23e:	701e      	strb	r6, [r3, #0]
 800e240:	6963      	ldr	r3, [r4, #20]
 800e242:	3001      	adds	r0, #1
 800e244:	4283      	cmp	r3, r0
 800e246:	d004      	beq.n	800e252 <__swbuf_r+0x62>
 800e248:	89a3      	ldrh	r3, [r4, #12]
 800e24a:	07db      	lsls	r3, r3, #31
 800e24c:	d506      	bpl.n	800e25c <__swbuf_r+0x6c>
 800e24e:	2e0a      	cmp	r6, #10
 800e250:	d104      	bne.n	800e25c <__swbuf_r+0x6c>
 800e252:	4621      	mov	r1, r4
 800e254:	4628      	mov	r0, r5
 800e256:	f000 ffaf 	bl	800f1b8 <_fflush_r>
 800e25a:	b988      	cbnz	r0, 800e280 <__swbuf_r+0x90>
 800e25c:	4638      	mov	r0, r7
 800e25e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e260:	4b0a      	ldr	r3, [pc, #40]	; (800e28c <__swbuf_r+0x9c>)
 800e262:	429c      	cmp	r4, r3
 800e264:	d101      	bne.n	800e26a <__swbuf_r+0x7a>
 800e266:	68ac      	ldr	r4, [r5, #8]
 800e268:	e7cf      	b.n	800e20a <__swbuf_r+0x1a>
 800e26a:	4b09      	ldr	r3, [pc, #36]	; (800e290 <__swbuf_r+0xa0>)
 800e26c:	429c      	cmp	r4, r3
 800e26e:	bf08      	it	eq
 800e270:	68ec      	ldreq	r4, [r5, #12]
 800e272:	e7ca      	b.n	800e20a <__swbuf_r+0x1a>
 800e274:	4621      	mov	r1, r4
 800e276:	4628      	mov	r0, r5
 800e278:	f000 f81e 	bl	800e2b8 <__swsetup_r>
 800e27c:	2800      	cmp	r0, #0
 800e27e:	d0cb      	beq.n	800e218 <__swbuf_r+0x28>
 800e280:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e284:	e7ea      	b.n	800e25c <__swbuf_r+0x6c>
 800e286:	bf00      	nop
 800e288:	08012d28 	.word	0x08012d28
 800e28c:	08012d48 	.word	0x08012d48
 800e290:	08012d08 	.word	0x08012d08

0800e294 <_write_r>:
 800e294:	b538      	push	{r3, r4, r5, lr}
 800e296:	4d07      	ldr	r5, [pc, #28]	; (800e2b4 <_write_r+0x20>)
 800e298:	4604      	mov	r4, r0
 800e29a:	4608      	mov	r0, r1
 800e29c:	4611      	mov	r1, r2
 800e29e:	2200      	movs	r2, #0
 800e2a0:	602a      	str	r2, [r5, #0]
 800e2a2:	461a      	mov	r2, r3
 800e2a4:	f7f6 fb25 	bl	80048f2 <_write>
 800e2a8:	1c43      	adds	r3, r0, #1
 800e2aa:	d102      	bne.n	800e2b2 <_write_r+0x1e>
 800e2ac:	682b      	ldr	r3, [r5, #0]
 800e2ae:	b103      	cbz	r3, 800e2b2 <_write_r+0x1e>
 800e2b0:	6023      	str	r3, [r4, #0]
 800e2b2:	bd38      	pop	{r3, r4, r5, pc}
 800e2b4:	200025f8 	.word	0x200025f8

0800e2b8 <__swsetup_r>:
 800e2b8:	4b32      	ldr	r3, [pc, #200]	; (800e384 <__swsetup_r+0xcc>)
 800e2ba:	b570      	push	{r4, r5, r6, lr}
 800e2bc:	681d      	ldr	r5, [r3, #0]
 800e2be:	4606      	mov	r6, r0
 800e2c0:	460c      	mov	r4, r1
 800e2c2:	b125      	cbz	r5, 800e2ce <__swsetup_r+0x16>
 800e2c4:	69ab      	ldr	r3, [r5, #24]
 800e2c6:	b913      	cbnz	r3, 800e2ce <__swsetup_r+0x16>
 800e2c8:	4628      	mov	r0, r5
 800e2ca:	f001 f809 	bl	800f2e0 <__sinit>
 800e2ce:	4b2e      	ldr	r3, [pc, #184]	; (800e388 <__swsetup_r+0xd0>)
 800e2d0:	429c      	cmp	r4, r3
 800e2d2:	d10f      	bne.n	800e2f4 <__swsetup_r+0x3c>
 800e2d4:	686c      	ldr	r4, [r5, #4]
 800e2d6:	89a3      	ldrh	r3, [r4, #12]
 800e2d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e2dc:	0719      	lsls	r1, r3, #28
 800e2de:	d42c      	bmi.n	800e33a <__swsetup_r+0x82>
 800e2e0:	06dd      	lsls	r5, r3, #27
 800e2e2:	d411      	bmi.n	800e308 <__swsetup_r+0x50>
 800e2e4:	2309      	movs	r3, #9
 800e2e6:	6033      	str	r3, [r6, #0]
 800e2e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e2ec:	81a3      	strh	r3, [r4, #12]
 800e2ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e2f2:	e03e      	b.n	800e372 <__swsetup_r+0xba>
 800e2f4:	4b25      	ldr	r3, [pc, #148]	; (800e38c <__swsetup_r+0xd4>)
 800e2f6:	429c      	cmp	r4, r3
 800e2f8:	d101      	bne.n	800e2fe <__swsetup_r+0x46>
 800e2fa:	68ac      	ldr	r4, [r5, #8]
 800e2fc:	e7eb      	b.n	800e2d6 <__swsetup_r+0x1e>
 800e2fe:	4b24      	ldr	r3, [pc, #144]	; (800e390 <__swsetup_r+0xd8>)
 800e300:	429c      	cmp	r4, r3
 800e302:	bf08      	it	eq
 800e304:	68ec      	ldreq	r4, [r5, #12]
 800e306:	e7e6      	b.n	800e2d6 <__swsetup_r+0x1e>
 800e308:	0758      	lsls	r0, r3, #29
 800e30a:	d512      	bpl.n	800e332 <__swsetup_r+0x7a>
 800e30c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e30e:	b141      	cbz	r1, 800e322 <__swsetup_r+0x6a>
 800e310:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e314:	4299      	cmp	r1, r3
 800e316:	d002      	beq.n	800e31e <__swsetup_r+0x66>
 800e318:	4630      	mov	r0, r6
 800e31a:	f7fd ffc3 	bl	800c2a4 <_free_r>
 800e31e:	2300      	movs	r3, #0
 800e320:	6363      	str	r3, [r4, #52]	; 0x34
 800e322:	89a3      	ldrh	r3, [r4, #12]
 800e324:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e328:	81a3      	strh	r3, [r4, #12]
 800e32a:	2300      	movs	r3, #0
 800e32c:	6063      	str	r3, [r4, #4]
 800e32e:	6923      	ldr	r3, [r4, #16]
 800e330:	6023      	str	r3, [r4, #0]
 800e332:	89a3      	ldrh	r3, [r4, #12]
 800e334:	f043 0308 	orr.w	r3, r3, #8
 800e338:	81a3      	strh	r3, [r4, #12]
 800e33a:	6923      	ldr	r3, [r4, #16]
 800e33c:	b94b      	cbnz	r3, 800e352 <__swsetup_r+0x9a>
 800e33e:	89a3      	ldrh	r3, [r4, #12]
 800e340:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e348:	d003      	beq.n	800e352 <__swsetup_r+0x9a>
 800e34a:	4621      	mov	r1, r4
 800e34c:	4630      	mov	r0, r6
 800e34e:	f001 fc13 	bl	800fb78 <__smakebuf_r>
 800e352:	89a0      	ldrh	r0, [r4, #12]
 800e354:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e358:	f010 0301 	ands.w	r3, r0, #1
 800e35c:	d00a      	beq.n	800e374 <__swsetup_r+0xbc>
 800e35e:	2300      	movs	r3, #0
 800e360:	60a3      	str	r3, [r4, #8]
 800e362:	6963      	ldr	r3, [r4, #20]
 800e364:	425b      	negs	r3, r3
 800e366:	61a3      	str	r3, [r4, #24]
 800e368:	6923      	ldr	r3, [r4, #16]
 800e36a:	b943      	cbnz	r3, 800e37e <__swsetup_r+0xc6>
 800e36c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e370:	d1ba      	bne.n	800e2e8 <__swsetup_r+0x30>
 800e372:	bd70      	pop	{r4, r5, r6, pc}
 800e374:	0781      	lsls	r1, r0, #30
 800e376:	bf58      	it	pl
 800e378:	6963      	ldrpl	r3, [r4, #20]
 800e37a:	60a3      	str	r3, [r4, #8]
 800e37c:	e7f4      	b.n	800e368 <__swsetup_r+0xb0>
 800e37e:	2000      	movs	r0, #0
 800e380:	e7f7      	b.n	800e372 <__swsetup_r+0xba>
 800e382:	bf00      	nop
 800e384:	20000178 	.word	0x20000178
 800e388:	08012d28 	.word	0x08012d28
 800e38c:	08012d48 	.word	0x08012d48
 800e390:	08012d08 	.word	0x08012d08

0800e394 <_close_r>:
 800e394:	b538      	push	{r3, r4, r5, lr}
 800e396:	4d06      	ldr	r5, [pc, #24]	; (800e3b0 <_close_r+0x1c>)
 800e398:	2300      	movs	r3, #0
 800e39a:	4604      	mov	r4, r0
 800e39c:	4608      	mov	r0, r1
 800e39e:	602b      	str	r3, [r5, #0]
 800e3a0:	f7f6 fac3 	bl	800492a <_close>
 800e3a4:	1c43      	adds	r3, r0, #1
 800e3a6:	d102      	bne.n	800e3ae <_close_r+0x1a>
 800e3a8:	682b      	ldr	r3, [r5, #0]
 800e3aa:	b103      	cbz	r3, 800e3ae <_close_r+0x1a>
 800e3ac:	6023      	str	r3, [r4, #0]
 800e3ae:	bd38      	pop	{r3, r4, r5, pc}
 800e3b0:	200025f8 	.word	0x200025f8

0800e3b4 <quorem>:
 800e3b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3b8:	6903      	ldr	r3, [r0, #16]
 800e3ba:	690c      	ldr	r4, [r1, #16]
 800e3bc:	42a3      	cmp	r3, r4
 800e3be:	4607      	mov	r7, r0
 800e3c0:	f2c0 8081 	blt.w	800e4c6 <quorem+0x112>
 800e3c4:	3c01      	subs	r4, #1
 800e3c6:	f101 0814 	add.w	r8, r1, #20
 800e3ca:	f100 0514 	add.w	r5, r0, #20
 800e3ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e3d2:	9301      	str	r3, [sp, #4]
 800e3d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e3d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e3dc:	3301      	adds	r3, #1
 800e3de:	429a      	cmp	r2, r3
 800e3e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e3e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e3e8:	fbb2 f6f3 	udiv	r6, r2, r3
 800e3ec:	d331      	bcc.n	800e452 <quorem+0x9e>
 800e3ee:	f04f 0e00 	mov.w	lr, #0
 800e3f2:	4640      	mov	r0, r8
 800e3f4:	46ac      	mov	ip, r5
 800e3f6:	46f2      	mov	sl, lr
 800e3f8:	f850 2b04 	ldr.w	r2, [r0], #4
 800e3fc:	b293      	uxth	r3, r2
 800e3fe:	fb06 e303 	mla	r3, r6, r3, lr
 800e402:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e406:	b29b      	uxth	r3, r3
 800e408:	ebaa 0303 	sub.w	r3, sl, r3
 800e40c:	f8dc a000 	ldr.w	sl, [ip]
 800e410:	0c12      	lsrs	r2, r2, #16
 800e412:	fa13 f38a 	uxtah	r3, r3, sl
 800e416:	fb06 e202 	mla	r2, r6, r2, lr
 800e41a:	9300      	str	r3, [sp, #0]
 800e41c:	9b00      	ldr	r3, [sp, #0]
 800e41e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e422:	b292      	uxth	r2, r2
 800e424:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e428:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e42c:	f8bd 3000 	ldrh.w	r3, [sp]
 800e430:	4581      	cmp	r9, r0
 800e432:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e436:	f84c 3b04 	str.w	r3, [ip], #4
 800e43a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e43e:	d2db      	bcs.n	800e3f8 <quorem+0x44>
 800e440:	f855 300b 	ldr.w	r3, [r5, fp]
 800e444:	b92b      	cbnz	r3, 800e452 <quorem+0x9e>
 800e446:	9b01      	ldr	r3, [sp, #4]
 800e448:	3b04      	subs	r3, #4
 800e44a:	429d      	cmp	r5, r3
 800e44c:	461a      	mov	r2, r3
 800e44e:	d32e      	bcc.n	800e4ae <quorem+0xfa>
 800e450:	613c      	str	r4, [r7, #16]
 800e452:	4638      	mov	r0, r7
 800e454:	f001 feba 	bl	80101cc <__mcmp>
 800e458:	2800      	cmp	r0, #0
 800e45a:	db24      	blt.n	800e4a6 <quorem+0xf2>
 800e45c:	3601      	adds	r6, #1
 800e45e:	4628      	mov	r0, r5
 800e460:	f04f 0c00 	mov.w	ip, #0
 800e464:	f858 2b04 	ldr.w	r2, [r8], #4
 800e468:	f8d0 e000 	ldr.w	lr, [r0]
 800e46c:	b293      	uxth	r3, r2
 800e46e:	ebac 0303 	sub.w	r3, ip, r3
 800e472:	0c12      	lsrs	r2, r2, #16
 800e474:	fa13 f38e 	uxtah	r3, r3, lr
 800e478:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e47c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e480:	b29b      	uxth	r3, r3
 800e482:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e486:	45c1      	cmp	r9, r8
 800e488:	f840 3b04 	str.w	r3, [r0], #4
 800e48c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e490:	d2e8      	bcs.n	800e464 <quorem+0xb0>
 800e492:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e496:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e49a:	b922      	cbnz	r2, 800e4a6 <quorem+0xf2>
 800e49c:	3b04      	subs	r3, #4
 800e49e:	429d      	cmp	r5, r3
 800e4a0:	461a      	mov	r2, r3
 800e4a2:	d30a      	bcc.n	800e4ba <quorem+0x106>
 800e4a4:	613c      	str	r4, [r7, #16]
 800e4a6:	4630      	mov	r0, r6
 800e4a8:	b003      	add	sp, #12
 800e4aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4ae:	6812      	ldr	r2, [r2, #0]
 800e4b0:	3b04      	subs	r3, #4
 800e4b2:	2a00      	cmp	r2, #0
 800e4b4:	d1cc      	bne.n	800e450 <quorem+0x9c>
 800e4b6:	3c01      	subs	r4, #1
 800e4b8:	e7c7      	b.n	800e44a <quorem+0x96>
 800e4ba:	6812      	ldr	r2, [r2, #0]
 800e4bc:	3b04      	subs	r3, #4
 800e4be:	2a00      	cmp	r2, #0
 800e4c0:	d1f0      	bne.n	800e4a4 <quorem+0xf0>
 800e4c2:	3c01      	subs	r4, #1
 800e4c4:	e7eb      	b.n	800e49e <quorem+0xea>
 800e4c6:	2000      	movs	r0, #0
 800e4c8:	e7ee      	b.n	800e4a8 <quorem+0xf4>
 800e4ca:	0000      	movs	r0, r0
 800e4cc:	0000      	movs	r0, r0
	...

0800e4d0 <_dtoa_r>:
 800e4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4d4:	ed2d 8b04 	vpush	{d8-d9}
 800e4d8:	ec57 6b10 	vmov	r6, r7, d0
 800e4dc:	b093      	sub	sp, #76	; 0x4c
 800e4de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e4e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e4e4:	9106      	str	r1, [sp, #24]
 800e4e6:	ee10 aa10 	vmov	sl, s0
 800e4ea:	4604      	mov	r4, r0
 800e4ec:	9209      	str	r2, [sp, #36]	; 0x24
 800e4ee:	930c      	str	r3, [sp, #48]	; 0x30
 800e4f0:	46bb      	mov	fp, r7
 800e4f2:	b975      	cbnz	r5, 800e512 <_dtoa_r+0x42>
 800e4f4:	2010      	movs	r0, #16
 800e4f6:	f7fd feaf 	bl	800c258 <malloc>
 800e4fa:	4602      	mov	r2, r0
 800e4fc:	6260      	str	r0, [r4, #36]	; 0x24
 800e4fe:	b920      	cbnz	r0, 800e50a <_dtoa_r+0x3a>
 800e500:	4ba7      	ldr	r3, [pc, #668]	; (800e7a0 <_dtoa_r+0x2d0>)
 800e502:	21ea      	movs	r1, #234	; 0xea
 800e504:	48a7      	ldr	r0, [pc, #668]	; (800e7a4 <_dtoa_r+0x2d4>)
 800e506:	f002 f9f1 	bl	80108ec <__assert_func>
 800e50a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e50e:	6005      	str	r5, [r0, #0]
 800e510:	60c5      	str	r5, [r0, #12]
 800e512:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e514:	6819      	ldr	r1, [r3, #0]
 800e516:	b151      	cbz	r1, 800e52e <_dtoa_r+0x5e>
 800e518:	685a      	ldr	r2, [r3, #4]
 800e51a:	604a      	str	r2, [r1, #4]
 800e51c:	2301      	movs	r3, #1
 800e51e:	4093      	lsls	r3, r2
 800e520:	608b      	str	r3, [r1, #8]
 800e522:	4620      	mov	r0, r4
 800e524:	f001 fbc6 	bl	800fcb4 <_Bfree>
 800e528:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e52a:	2200      	movs	r2, #0
 800e52c:	601a      	str	r2, [r3, #0]
 800e52e:	1e3b      	subs	r3, r7, #0
 800e530:	bfaa      	itet	ge
 800e532:	2300      	movge	r3, #0
 800e534:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e538:	f8c8 3000 	strge.w	r3, [r8]
 800e53c:	4b9a      	ldr	r3, [pc, #616]	; (800e7a8 <_dtoa_r+0x2d8>)
 800e53e:	bfbc      	itt	lt
 800e540:	2201      	movlt	r2, #1
 800e542:	f8c8 2000 	strlt.w	r2, [r8]
 800e546:	ea33 030b 	bics.w	r3, r3, fp
 800e54a:	d11b      	bne.n	800e584 <_dtoa_r+0xb4>
 800e54c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e54e:	f242 730f 	movw	r3, #9999	; 0x270f
 800e552:	6013      	str	r3, [r2, #0]
 800e554:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e558:	4333      	orrs	r3, r6
 800e55a:	f000 8592 	beq.w	800f082 <_dtoa_r+0xbb2>
 800e55e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e560:	b963      	cbnz	r3, 800e57c <_dtoa_r+0xac>
 800e562:	4b92      	ldr	r3, [pc, #584]	; (800e7ac <_dtoa_r+0x2dc>)
 800e564:	e022      	b.n	800e5ac <_dtoa_r+0xdc>
 800e566:	4b92      	ldr	r3, [pc, #584]	; (800e7b0 <_dtoa_r+0x2e0>)
 800e568:	9301      	str	r3, [sp, #4]
 800e56a:	3308      	adds	r3, #8
 800e56c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e56e:	6013      	str	r3, [r2, #0]
 800e570:	9801      	ldr	r0, [sp, #4]
 800e572:	b013      	add	sp, #76	; 0x4c
 800e574:	ecbd 8b04 	vpop	{d8-d9}
 800e578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e57c:	4b8b      	ldr	r3, [pc, #556]	; (800e7ac <_dtoa_r+0x2dc>)
 800e57e:	9301      	str	r3, [sp, #4]
 800e580:	3303      	adds	r3, #3
 800e582:	e7f3      	b.n	800e56c <_dtoa_r+0x9c>
 800e584:	2200      	movs	r2, #0
 800e586:	2300      	movs	r3, #0
 800e588:	4650      	mov	r0, sl
 800e58a:	4659      	mov	r1, fp
 800e58c:	f7f2 faac 	bl	8000ae8 <__aeabi_dcmpeq>
 800e590:	ec4b ab19 	vmov	d9, sl, fp
 800e594:	4680      	mov	r8, r0
 800e596:	b158      	cbz	r0, 800e5b0 <_dtoa_r+0xe0>
 800e598:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e59a:	2301      	movs	r3, #1
 800e59c:	6013      	str	r3, [r2, #0]
 800e59e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	f000 856b 	beq.w	800f07c <_dtoa_r+0xbac>
 800e5a6:	4883      	ldr	r0, [pc, #524]	; (800e7b4 <_dtoa_r+0x2e4>)
 800e5a8:	6018      	str	r0, [r3, #0]
 800e5aa:	1e43      	subs	r3, r0, #1
 800e5ac:	9301      	str	r3, [sp, #4]
 800e5ae:	e7df      	b.n	800e570 <_dtoa_r+0xa0>
 800e5b0:	ec4b ab10 	vmov	d0, sl, fp
 800e5b4:	aa10      	add	r2, sp, #64	; 0x40
 800e5b6:	a911      	add	r1, sp, #68	; 0x44
 800e5b8:	4620      	mov	r0, r4
 800e5ba:	f001 ff29 	bl	8010410 <__d2b>
 800e5be:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e5c2:	ee08 0a10 	vmov	s16, r0
 800e5c6:	2d00      	cmp	r5, #0
 800e5c8:	f000 8084 	beq.w	800e6d4 <_dtoa_r+0x204>
 800e5cc:	ee19 3a90 	vmov	r3, s19
 800e5d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e5d4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e5d8:	4656      	mov	r6, sl
 800e5da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e5de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e5e2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e5e6:	4b74      	ldr	r3, [pc, #464]	; (800e7b8 <_dtoa_r+0x2e8>)
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	4630      	mov	r0, r6
 800e5ec:	4639      	mov	r1, r7
 800e5ee:	f7f1 fe5b 	bl	80002a8 <__aeabi_dsub>
 800e5f2:	a365      	add	r3, pc, #404	; (adr r3, 800e788 <_dtoa_r+0x2b8>)
 800e5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f8:	f7f2 f80e 	bl	8000618 <__aeabi_dmul>
 800e5fc:	a364      	add	r3, pc, #400	; (adr r3, 800e790 <_dtoa_r+0x2c0>)
 800e5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e602:	f7f1 fe53 	bl	80002ac <__adddf3>
 800e606:	4606      	mov	r6, r0
 800e608:	4628      	mov	r0, r5
 800e60a:	460f      	mov	r7, r1
 800e60c:	f7f1 ff9a 	bl	8000544 <__aeabi_i2d>
 800e610:	a361      	add	r3, pc, #388	; (adr r3, 800e798 <_dtoa_r+0x2c8>)
 800e612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e616:	f7f1 ffff 	bl	8000618 <__aeabi_dmul>
 800e61a:	4602      	mov	r2, r0
 800e61c:	460b      	mov	r3, r1
 800e61e:	4630      	mov	r0, r6
 800e620:	4639      	mov	r1, r7
 800e622:	f7f1 fe43 	bl	80002ac <__adddf3>
 800e626:	4606      	mov	r6, r0
 800e628:	460f      	mov	r7, r1
 800e62a:	f7f2 faa5 	bl	8000b78 <__aeabi_d2iz>
 800e62e:	2200      	movs	r2, #0
 800e630:	9000      	str	r0, [sp, #0]
 800e632:	2300      	movs	r3, #0
 800e634:	4630      	mov	r0, r6
 800e636:	4639      	mov	r1, r7
 800e638:	f7f2 fa60 	bl	8000afc <__aeabi_dcmplt>
 800e63c:	b150      	cbz	r0, 800e654 <_dtoa_r+0x184>
 800e63e:	9800      	ldr	r0, [sp, #0]
 800e640:	f7f1 ff80 	bl	8000544 <__aeabi_i2d>
 800e644:	4632      	mov	r2, r6
 800e646:	463b      	mov	r3, r7
 800e648:	f7f2 fa4e 	bl	8000ae8 <__aeabi_dcmpeq>
 800e64c:	b910      	cbnz	r0, 800e654 <_dtoa_r+0x184>
 800e64e:	9b00      	ldr	r3, [sp, #0]
 800e650:	3b01      	subs	r3, #1
 800e652:	9300      	str	r3, [sp, #0]
 800e654:	9b00      	ldr	r3, [sp, #0]
 800e656:	2b16      	cmp	r3, #22
 800e658:	d85a      	bhi.n	800e710 <_dtoa_r+0x240>
 800e65a:	9a00      	ldr	r2, [sp, #0]
 800e65c:	4b57      	ldr	r3, [pc, #348]	; (800e7bc <_dtoa_r+0x2ec>)
 800e65e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e666:	ec51 0b19 	vmov	r0, r1, d9
 800e66a:	f7f2 fa47 	bl	8000afc <__aeabi_dcmplt>
 800e66e:	2800      	cmp	r0, #0
 800e670:	d050      	beq.n	800e714 <_dtoa_r+0x244>
 800e672:	9b00      	ldr	r3, [sp, #0]
 800e674:	3b01      	subs	r3, #1
 800e676:	9300      	str	r3, [sp, #0]
 800e678:	2300      	movs	r3, #0
 800e67a:	930b      	str	r3, [sp, #44]	; 0x2c
 800e67c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e67e:	1b5d      	subs	r5, r3, r5
 800e680:	1e6b      	subs	r3, r5, #1
 800e682:	9305      	str	r3, [sp, #20]
 800e684:	bf45      	ittet	mi
 800e686:	f1c5 0301 	rsbmi	r3, r5, #1
 800e68a:	9304      	strmi	r3, [sp, #16]
 800e68c:	2300      	movpl	r3, #0
 800e68e:	2300      	movmi	r3, #0
 800e690:	bf4c      	ite	mi
 800e692:	9305      	strmi	r3, [sp, #20]
 800e694:	9304      	strpl	r3, [sp, #16]
 800e696:	9b00      	ldr	r3, [sp, #0]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	db3d      	blt.n	800e718 <_dtoa_r+0x248>
 800e69c:	9b05      	ldr	r3, [sp, #20]
 800e69e:	9a00      	ldr	r2, [sp, #0]
 800e6a0:	920a      	str	r2, [sp, #40]	; 0x28
 800e6a2:	4413      	add	r3, r2
 800e6a4:	9305      	str	r3, [sp, #20]
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	9307      	str	r3, [sp, #28]
 800e6aa:	9b06      	ldr	r3, [sp, #24]
 800e6ac:	2b09      	cmp	r3, #9
 800e6ae:	f200 8089 	bhi.w	800e7c4 <_dtoa_r+0x2f4>
 800e6b2:	2b05      	cmp	r3, #5
 800e6b4:	bfc4      	itt	gt
 800e6b6:	3b04      	subgt	r3, #4
 800e6b8:	9306      	strgt	r3, [sp, #24]
 800e6ba:	9b06      	ldr	r3, [sp, #24]
 800e6bc:	f1a3 0302 	sub.w	r3, r3, #2
 800e6c0:	bfcc      	ite	gt
 800e6c2:	2500      	movgt	r5, #0
 800e6c4:	2501      	movle	r5, #1
 800e6c6:	2b03      	cmp	r3, #3
 800e6c8:	f200 8087 	bhi.w	800e7da <_dtoa_r+0x30a>
 800e6cc:	e8df f003 	tbb	[pc, r3]
 800e6d0:	59383a2d 	.word	0x59383a2d
 800e6d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e6d8:	441d      	add	r5, r3
 800e6da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e6de:	2b20      	cmp	r3, #32
 800e6e0:	bfc1      	itttt	gt
 800e6e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e6e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e6ea:	fa0b f303 	lslgt.w	r3, fp, r3
 800e6ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e6f2:	bfda      	itte	le
 800e6f4:	f1c3 0320 	rsble	r3, r3, #32
 800e6f8:	fa06 f003 	lslle.w	r0, r6, r3
 800e6fc:	4318      	orrgt	r0, r3
 800e6fe:	f7f1 ff11 	bl	8000524 <__aeabi_ui2d>
 800e702:	2301      	movs	r3, #1
 800e704:	4606      	mov	r6, r0
 800e706:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e70a:	3d01      	subs	r5, #1
 800e70c:	930e      	str	r3, [sp, #56]	; 0x38
 800e70e:	e76a      	b.n	800e5e6 <_dtoa_r+0x116>
 800e710:	2301      	movs	r3, #1
 800e712:	e7b2      	b.n	800e67a <_dtoa_r+0x1aa>
 800e714:	900b      	str	r0, [sp, #44]	; 0x2c
 800e716:	e7b1      	b.n	800e67c <_dtoa_r+0x1ac>
 800e718:	9b04      	ldr	r3, [sp, #16]
 800e71a:	9a00      	ldr	r2, [sp, #0]
 800e71c:	1a9b      	subs	r3, r3, r2
 800e71e:	9304      	str	r3, [sp, #16]
 800e720:	4253      	negs	r3, r2
 800e722:	9307      	str	r3, [sp, #28]
 800e724:	2300      	movs	r3, #0
 800e726:	930a      	str	r3, [sp, #40]	; 0x28
 800e728:	e7bf      	b.n	800e6aa <_dtoa_r+0x1da>
 800e72a:	2300      	movs	r3, #0
 800e72c:	9308      	str	r3, [sp, #32]
 800e72e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e730:	2b00      	cmp	r3, #0
 800e732:	dc55      	bgt.n	800e7e0 <_dtoa_r+0x310>
 800e734:	2301      	movs	r3, #1
 800e736:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e73a:	461a      	mov	r2, r3
 800e73c:	9209      	str	r2, [sp, #36]	; 0x24
 800e73e:	e00c      	b.n	800e75a <_dtoa_r+0x28a>
 800e740:	2301      	movs	r3, #1
 800e742:	e7f3      	b.n	800e72c <_dtoa_r+0x25c>
 800e744:	2300      	movs	r3, #0
 800e746:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e748:	9308      	str	r3, [sp, #32]
 800e74a:	9b00      	ldr	r3, [sp, #0]
 800e74c:	4413      	add	r3, r2
 800e74e:	9302      	str	r3, [sp, #8]
 800e750:	3301      	adds	r3, #1
 800e752:	2b01      	cmp	r3, #1
 800e754:	9303      	str	r3, [sp, #12]
 800e756:	bfb8      	it	lt
 800e758:	2301      	movlt	r3, #1
 800e75a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e75c:	2200      	movs	r2, #0
 800e75e:	6042      	str	r2, [r0, #4]
 800e760:	2204      	movs	r2, #4
 800e762:	f102 0614 	add.w	r6, r2, #20
 800e766:	429e      	cmp	r6, r3
 800e768:	6841      	ldr	r1, [r0, #4]
 800e76a:	d93d      	bls.n	800e7e8 <_dtoa_r+0x318>
 800e76c:	4620      	mov	r0, r4
 800e76e:	f001 fa61 	bl	800fc34 <_Balloc>
 800e772:	9001      	str	r0, [sp, #4]
 800e774:	2800      	cmp	r0, #0
 800e776:	d13b      	bne.n	800e7f0 <_dtoa_r+0x320>
 800e778:	4b11      	ldr	r3, [pc, #68]	; (800e7c0 <_dtoa_r+0x2f0>)
 800e77a:	4602      	mov	r2, r0
 800e77c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e780:	e6c0      	b.n	800e504 <_dtoa_r+0x34>
 800e782:	2301      	movs	r3, #1
 800e784:	e7df      	b.n	800e746 <_dtoa_r+0x276>
 800e786:	bf00      	nop
 800e788:	636f4361 	.word	0x636f4361
 800e78c:	3fd287a7 	.word	0x3fd287a7
 800e790:	8b60c8b3 	.word	0x8b60c8b3
 800e794:	3fc68a28 	.word	0x3fc68a28
 800e798:	509f79fb 	.word	0x509f79fb
 800e79c:	3fd34413 	.word	0x3fd34413
 800e7a0:	08012c85 	.word	0x08012c85
 800e7a4:	08012c9c 	.word	0x08012c9c
 800e7a8:	7ff00000 	.word	0x7ff00000
 800e7ac:	08012c81 	.word	0x08012c81
 800e7b0:	08012c78 	.word	0x08012c78
 800e7b4:	08012bf9 	.word	0x08012bf9
 800e7b8:	3ff80000 	.word	0x3ff80000
 800e7bc:	08012e68 	.word	0x08012e68
 800e7c0:	08012cf7 	.word	0x08012cf7
 800e7c4:	2501      	movs	r5, #1
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	9306      	str	r3, [sp, #24]
 800e7ca:	9508      	str	r5, [sp, #32]
 800e7cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e7d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	2312      	movs	r3, #18
 800e7d8:	e7b0      	b.n	800e73c <_dtoa_r+0x26c>
 800e7da:	2301      	movs	r3, #1
 800e7dc:	9308      	str	r3, [sp, #32]
 800e7de:	e7f5      	b.n	800e7cc <_dtoa_r+0x2fc>
 800e7e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e7e6:	e7b8      	b.n	800e75a <_dtoa_r+0x28a>
 800e7e8:	3101      	adds	r1, #1
 800e7ea:	6041      	str	r1, [r0, #4]
 800e7ec:	0052      	lsls	r2, r2, #1
 800e7ee:	e7b8      	b.n	800e762 <_dtoa_r+0x292>
 800e7f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e7f2:	9a01      	ldr	r2, [sp, #4]
 800e7f4:	601a      	str	r2, [r3, #0]
 800e7f6:	9b03      	ldr	r3, [sp, #12]
 800e7f8:	2b0e      	cmp	r3, #14
 800e7fa:	f200 809d 	bhi.w	800e938 <_dtoa_r+0x468>
 800e7fe:	2d00      	cmp	r5, #0
 800e800:	f000 809a 	beq.w	800e938 <_dtoa_r+0x468>
 800e804:	9b00      	ldr	r3, [sp, #0]
 800e806:	2b00      	cmp	r3, #0
 800e808:	dd32      	ble.n	800e870 <_dtoa_r+0x3a0>
 800e80a:	4ab7      	ldr	r2, [pc, #732]	; (800eae8 <_dtoa_r+0x618>)
 800e80c:	f003 030f 	and.w	r3, r3, #15
 800e810:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e814:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e818:	9b00      	ldr	r3, [sp, #0]
 800e81a:	05d8      	lsls	r0, r3, #23
 800e81c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e820:	d516      	bpl.n	800e850 <_dtoa_r+0x380>
 800e822:	4bb2      	ldr	r3, [pc, #712]	; (800eaec <_dtoa_r+0x61c>)
 800e824:	ec51 0b19 	vmov	r0, r1, d9
 800e828:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e82c:	f7f2 f81e 	bl	800086c <__aeabi_ddiv>
 800e830:	f007 070f 	and.w	r7, r7, #15
 800e834:	4682      	mov	sl, r0
 800e836:	468b      	mov	fp, r1
 800e838:	2503      	movs	r5, #3
 800e83a:	4eac      	ldr	r6, [pc, #688]	; (800eaec <_dtoa_r+0x61c>)
 800e83c:	b957      	cbnz	r7, 800e854 <_dtoa_r+0x384>
 800e83e:	4642      	mov	r2, r8
 800e840:	464b      	mov	r3, r9
 800e842:	4650      	mov	r0, sl
 800e844:	4659      	mov	r1, fp
 800e846:	f7f2 f811 	bl	800086c <__aeabi_ddiv>
 800e84a:	4682      	mov	sl, r0
 800e84c:	468b      	mov	fp, r1
 800e84e:	e028      	b.n	800e8a2 <_dtoa_r+0x3d2>
 800e850:	2502      	movs	r5, #2
 800e852:	e7f2      	b.n	800e83a <_dtoa_r+0x36a>
 800e854:	07f9      	lsls	r1, r7, #31
 800e856:	d508      	bpl.n	800e86a <_dtoa_r+0x39a>
 800e858:	4640      	mov	r0, r8
 800e85a:	4649      	mov	r1, r9
 800e85c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e860:	f7f1 feda 	bl	8000618 <__aeabi_dmul>
 800e864:	3501      	adds	r5, #1
 800e866:	4680      	mov	r8, r0
 800e868:	4689      	mov	r9, r1
 800e86a:	107f      	asrs	r7, r7, #1
 800e86c:	3608      	adds	r6, #8
 800e86e:	e7e5      	b.n	800e83c <_dtoa_r+0x36c>
 800e870:	f000 809b 	beq.w	800e9aa <_dtoa_r+0x4da>
 800e874:	9b00      	ldr	r3, [sp, #0]
 800e876:	4f9d      	ldr	r7, [pc, #628]	; (800eaec <_dtoa_r+0x61c>)
 800e878:	425e      	negs	r6, r3
 800e87a:	4b9b      	ldr	r3, [pc, #620]	; (800eae8 <_dtoa_r+0x618>)
 800e87c:	f006 020f 	and.w	r2, r6, #15
 800e880:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e888:	ec51 0b19 	vmov	r0, r1, d9
 800e88c:	f7f1 fec4 	bl	8000618 <__aeabi_dmul>
 800e890:	1136      	asrs	r6, r6, #4
 800e892:	4682      	mov	sl, r0
 800e894:	468b      	mov	fp, r1
 800e896:	2300      	movs	r3, #0
 800e898:	2502      	movs	r5, #2
 800e89a:	2e00      	cmp	r6, #0
 800e89c:	d17a      	bne.n	800e994 <_dtoa_r+0x4c4>
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d1d3      	bne.n	800e84a <_dtoa_r+0x37a>
 800e8a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	f000 8082 	beq.w	800e9ae <_dtoa_r+0x4de>
 800e8aa:	4b91      	ldr	r3, [pc, #580]	; (800eaf0 <_dtoa_r+0x620>)
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	4650      	mov	r0, sl
 800e8b0:	4659      	mov	r1, fp
 800e8b2:	f7f2 f923 	bl	8000afc <__aeabi_dcmplt>
 800e8b6:	2800      	cmp	r0, #0
 800e8b8:	d079      	beq.n	800e9ae <_dtoa_r+0x4de>
 800e8ba:	9b03      	ldr	r3, [sp, #12]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d076      	beq.n	800e9ae <_dtoa_r+0x4de>
 800e8c0:	9b02      	ldr	r3, [sp, #8]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	dd36      	ble.n	800e934 <_dtoa_r+0x464>
 800e8c6:	9b00      	ldr	r3, [sp, #0]
 800e8c8:	4650      	mov	r0, sl
 800e8ca:	4659      	mov	r1, fp
 800e8cc:	1e5f      	subs	r7, r3, #1
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	4b88      	ldr	r3, [pc, #544]	; (800eaf4 <_dtoa_r+0x624>)
 800e8d2:	f7f1 fea1 	bl	8000618 <__aeabi_dmul>
 800e8d6:	9e02      	ldr	r6, [sp, #8]
 800e8d8:	4682      	mov	sl, r0
 800e8da:	468b      	mov	fp, r1
 800e8dc:	3501      	adds	r5, #1
 800e8de:	4628      	mov	r0, r5
 800e8e0:	f7f1 fe30 	bl	8000544 <__aeabi_i2d>
 800e8e4:	4652      	mov	r2, sl
 800e8e6:	465b      	mov	r3, fp
 800e8e8:	f7f1 fe96 	bl	8000618 <__aeabi_dmul>
 800e8ec:	4b82      	ldr	r3, [pc, #520]	; (800eaf8 <_dtoa_r+0x628>)
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	f7f1 fcdc 	bl	80002ac <__adddf3>
 800e8f4:	46d0      	mov	r8, sl
 800e8f6:	46d9      	mov	r9, fp
 800e8f8:	4682      	mov	sl, r0
 800e8fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e8fe:	2e00      	cmp	r6, #0
 800e900:	d158      	bne.n	800e9b4 <_dtoa_r+0x4e4>
 800e902:	4b7e      	ldr	r3, [pc, #504]	; (800eafc <_dtoa_r+0x62c>)
 800e904:	2200      	movs	r2, #0
 800e906:	4640      	mov	r0, r8
 800e908:	4649      	mov	r1, r9
 800e90a:	f7f1 fccd 	bl	80002a8 <__aeabi_dsub>
 800e90e:	4652      	mov	r2, sl
 800e910:	465b      	mov	r3, fp
 800e912:	4680      	mov	r8, r0
 800e914:	4689      	mov	r9, r1
 800e916:	f7f2 f90f 	bl	8000b38 <__aeabi_dcmpgt>
 800e91a:	2800      	cmp	r0, #0
 800e91c:	f040 8295 	bne.w	800ee4a <_dtoa_r+0x97a>
 800e920:	4652      	mov	r2, sl
 800e922:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e926:	4640      	mov	r0, r8
 800e928:	4649      	mov	r1, r9
 800e92a:	f7f2 f8e7 	bl	8000afc <__aeabi_dcmplt>
 800e92e:	2800      	cmp	r0, #0
 800e930:	f040 8289 	bne.w	800ee46 <_dtoa_r+0x976>
 800e934:	ec5b ab19 	vmov	sl, fp, d9
 800e938:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	f2c0 8148 	blt.w	800ebd0 <_dtoa_r+0x700>
 800e940:	9a00      	ldr	r2, [sp, #0]
 800e942:	2a0e      	cmp	r2, #14
 800e944:	f300 8144 	bgt.w	800ebd0 <_dtoa_r+0x700>
 800e948:	4b67      	ldr	r3, [pc, #412]	; (800eae8 <_dtoa_r+0x618>)
 800e94a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e94e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e954:	2b00      	cmp	r3, #0
 800e956:	f280 80d5 	bge.w	800eb04 <_dtoa_r+0x634>
 800e95a:	9b03      	ldr	r3, [sp, #12]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	f300 80d1 	bgt.w	800eb04 <_dtoa_r+0x634>
 800e962:	f040 826f 	bne.w	800ee44 <_dtoa_r+0x974>
 800e966:	4b65      	ldr	r3, [pc, #404]	; (800eafc <_dtoa_r+0x62c>)
 800e968:	2200      	movs	r2, #0
 800e96a:	4640      	mov	r0, r8
 800e96c:	4649      	mov	r1, r9
 800e96e:	f7f1 fe53 	bl	8000618 <__aeabi_dmul>
 800e972:	4652      	mov	r2, sl
 800e974:	465b      	mov	r3, fp
 800e976:	f7f2 f8d5 	bl	8000b24 <__aeabi_dcmpge>
 800e97a:	9e03      	ldr	r6, [sp, #12]
 800e97c:	4637      	mov	r7, r6
 800e97e:	2800      	cmp	r0, #0
 800e980:	f040 8245 	bne.w	800ee0e <_dtoa_r+0x93e>
 800e984:	9d01      	ldr	r5, [sp, #4]
 800e986:	2331      	movs	r3, #49	; 0x31
 800e988:	f805 3b01 	strb.w	r3, [r5], #1
 800e98c:	9b00      	ldr	r3, [sp, #0]
 800e98e:	3301      	adds	r3, #1
 800e990:	9300      	str	r3, [sp, #0]
 800e992:	e240      	b.n	800ee16 <_dtoa_r+0x946>
 800e994:	07f2      	lsls	r2, r6, #31
 800e996:	d505      	bpl.n	800e9a4 <_dtoa_r+0x4d4>
 800e998:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e99c:	f7f1 fe3c 	bl	8000618 <__aeabi_dmul>
 800e9a0:	3501      	adds	r5, #1
 800e9a2:	2301      	movs	r3, #1
 800e9a4:	1076      	asrs	r6, r6, #1
 800e9a6:	3708      	adds	r7, #8
 800e9a8:	e777      	b.n	800e89a <_dtoa_r+0x3ca>
 800e9aa:	2502      	movs	r5, #2
 800e9ac:	e779      	b.n	800e8a2 <_dtoa_r+0x3d2>
 800e9ae:	9f00      	ldr	r7, [sp, #0]
 800e9b0:	9e03      	ldr	r6, [sp, #12]
 800e9b2:	e794      	b.n	800e8de <_dtoa_r+0x40e>
 800e9b4:	9901      	ldr	r1, [sp, #4]
 800e9b6:	4b4c      	ldr	r3, [pc, #304]	; (800eae8 <_dtoa_r+0x618>)
 800e9b8:	4431      	add	r1, r6
 800e9ba:	910d      	str	r1, [sp, #52]	; 0x34
 800e9bc:	9908      	ldr	r1, [sp, #32]
 800e9be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e9c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e9c6:	2900      	cmp	r1, #0
 800e9c8:	d043      	beq.n	800ea52 <_dtoa_r+0x582>
 800e9ca:	494d      	ldr	r1, [pc, #308]	; (800eb00 <_dtoa_r+0x630>)
 800e9cc:	2000      	movs	r0, #0
 800e9ce:	f7f1 ff4d 	bl	800086c <__aeabi_ddiv>
 800e9d2:	4652      	mov	r2, sl
 800e9d4:	465b      	mov	r3, fp
 800e9d6:	f7f1 fc67 	bl	80002a8 <__aeabi_dsub>
 800e9da:	9d01      	ldr	r5, [sp, #4]
 800e9dc:	4682      	mov	sl, r0
 800e9de:	468b      	mov	fp, r1
 800e9e0:	4649      	mov	r1, r9
 800e9e2:	4640      	mov	r0, r8
 800e9e4:	f7f2 f8c8 	bl	8000b78 <__aeabi_d2iz>
 800e9e8:	4606      	mov	r6, r0
 800e9ea:	f7f1 fdab 	bl	8000544 <__aeabi_i2d>
 800e9ee:	4602      	mov	r2, r0
 800e9f0:	460b      	mov	r3, r1
 800e9f2:	4640      	mov	r0, r8
 800e9f4:	4649      	mov	r1, r9
 800e9f6:	f7f1 fc57 	bl	80002a8 <__aeabi_dsub>
 800e9fa:	3630      	adds	r6, #48	; 0x30
 800e9fc:	f805 6b01 	strb.w	r6, [r5], #1
 800ea00:	4652      	mov	r2, sl
 800ea02:	465b      	mov	r3, fp
 800ea04:	4680      	mov	r8, r0
 800ea06:	4689      	mov	r9, r1
 800ea08:	f7f2 f878 	bl	8000afc <__aeabi_dcmplt>
 800ea0c:	2800      	cmp	r0, #0
 800ea0e:	d163      	bne.n	800ead8 <_dtoa_r+0x608>
 800ea10:	4642      	mov	r2, r8
 800ea12:	464b      	mov	r3, r9
 800ea14:	4936      	ldr	r1, [pc, #216]	; (800eaf0 <_dtoa_r+0x620>)
 800ea16:	2000      	movs	r0, #0
 800ea18:	f7f1 fc46 	bl	80002a8 <__aeabi_dsub>
 800ea1c:	4652      	mov	r2, sl
 800ea1e:	465b      	mov	r3, fp
 800ea20:	f7f2 f86c 	bl	8000afc <__aeabi_dcmplt>
 800ea24:	2800      	cmp	r0, #0
 800ea26:	f040 80b5 	bne.w	800eb94 <_dtoa_r+0x6c4>
 800ea2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ea2c:	429d      	cmp	r5, r3
 800ea2e:	d081      	beq.n	800e934 <_dtoa_r+0x464>
 800ea30:	4b30      	ldr	r3, [pc, #192]	; (800eaf4 <_dtoa_r+0x624>)
 800ea32:	2200      	movs	r2, #0
 800ea34:	4650      	mov	r0, sl
 800ea36:	4659      	mov	r1, fp
 800ea38:	f7f1 fdee 	bl	8000618 <__aeabi_dmul>
 800ea3c:	4b2d      	ldr	r3, [pc, #180]	; (800eaf4 <_dtoa_r+0x624>)
 800ea3e:	4682      	mov	sl, r0
 800ea40:	468b      	mov	fp, r1
 800ea42:	4640      	mov	r0, r8
 800ea44:	4649      	mov	r1, r9
 800ea46:	2200      	movs	r2, #0
 800ea48:	f7f1 fde6 	bl	8000618 <__aeabi_dmul>
 800ea4c:	4680      	mov	r8, r0
 800ea4e:	4689      	mov	r9, r1
 800ea50:	e7c6      	b.n	800e9e0 <_dtoa_r+0x510>
 800ea52:	4650      	mov	r0, sl
 800ea54:	4659      	mov	r1, fp
 800ea56:	f7f1 fddf 	bl	8000618 <__aeabi_dmul>
 800ea5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ea5c:	9d01      	ldr	r5, [sp, #4]
 800ea5e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ea60:	4682      	mov	sl, r0
 800ea62:	468b      	mov	fp, r1
 800ea64:	4649      	mov	r1, r9
 800ea66:	4640      	mov	r0, r8
 800ea68:	f7f2 f886 	bl	8000b78 <__aeabi_d2iz>
 800ea6c:	4606      	mov	r6, r0
 800ea6e:	f7f1 fd69 	bl	8000544 <__aeabi_i2d>
 800ea72:	3630      	adds	r6, #48	; 0x30
 800ea74:	4602      	mov	r2, r0
 800ea76:	460b      	mov	r3, r1
 800ea78:	4640      	mov	r0, r8
 800ea7a:	4649      	mov	r1, r9
 800ea7c:	f7f1 fc14 	bl	80002a8 <__aeabi_dsub>
 800ea80:	f805 6b01 	strb.w	r6, [r5], #1
 800ea84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ea86:	429d      	cmp	r5, r3
 800ea88:	4680      	mov	r8, r0
 800ea8a:	4689      	mov	r9, r1
 800ea8c:	f04f 0200 	mov.w	r2, #0
 800ea90:	d124      	bne.n	800eadc <_dtoa_r+0x60c>
 800ea92:	4b1b      	ldr	r3, [pc, #108]	; (800eb00 <_dtoa_r+0x630>)
 800ea94:	4650      	mov	r0, sl
 800ea96:	4659      	mov	r1, fp
 800ea98:	f7f1 fc08 	bl	80002ac <__adddf3>
 800ea9c:	4602      	mov	r2, r0
 800ea9e:	460b      	mov	r3, r1
 800eaa0:	4640      	mov	r0, r8
 800eaa2:	4649      	mov	r1, r9
 800eaa4:	f7f2 f848 	bl	8000b38 <__aeabi_dcmpgt>
 800eaa8:	2800      	cmp	r0, #0
 800eaaa:	d173      	bne.n	800eb94 <_dtoa_r+0x6c4>
 800eaac:	4652      	mov	r2, sl
 800eaae:	465b      	mov	r3, fp
 800eab0:	4913      	ldr	r1, [pc, #76]	; (800eb00 <_dtoa_r+0x630>)
 800eab2:	2000      	movs	r0, #0
 800eab4:	f7f1 fbf8 	bl	80002a8 <__aeabi_dsub>
 800eab8:	4602      	mov	r2, r0
 800eaba:	460b      	mov	r3, r1
 800eabc:	4640      	mov	r0, r8
 800eabe:	4649      	mov	r1, r9
 800eac0:	f7f2 f81c 	bl	8000afc <__aeabi_dcmplt>
 800eac4:	2800      	cmp	r0, #0
 800eac6:	f43f af35 	beq.w	800e934 <_dtoa_r+0x464>
 800eaca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800eacc:	1e6b      	subs	r3, r5, #1
 800eace:	930f      	str	r3, [sp, #60]	; 0x3c
 800ead0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ead4:	2b30      	cmp	r3, #48	; 0x30
 800ead6:	d0f8      	beq.n	800eaca <_dtoa_r+0x5fa>
 800ead8:	9700      	str	r7, [sp, #0]
 800eada:	e049      	b.n	800eb70 <_dtoa_r+0x6a0>
 800eadc:	4b05      	ldr	r3, [pc, #20]	; (800eaf4 <_dtoa_r+0x624>)
 800eade:	f7f1 fd9b 	bl	8000618 <__aeabi_dmul>
 800eae2:	4680      	mov	r8, r0
 800eae4:	4689      	mov	r9, r1
 800eae6:	e7bd      	b.n	800ea64 <_dtoa_r+0x594>
 800eae8:	08012e68 	.word	0x08012e68
 800eaec:	08012e40 	.word	0x08012e40
 800eaf0:	3ff00000 	.word	0x3ff00000
 800eaf4:	40240000 	.word	0x40240000
 800eaf8:	401c0000 	.word	0x401c0000
 800eafc:	40140000 	.word	0x40140000
 800eb00:	3fe00000 	.word	0x3fe00000
 800eb04:	9d01      	ldr	r5, [sp, #4]
 800eb06:	4656      	mov	r6, sl
 800eb08:	465f      	mov	r7, fp
 800eb0a:	4642      	mov	r2, r8
 800eb0c:	464b      	mov	r3, r9
 800eb0e:	4630      	mov	r0, r6
 800eb10:	4639      	mov	r1, r7
 800eb12:	f7f1 feab 	bl	800086c <__aeabi_ddiv>
 800eb16:	f7f2 f82f 	bl	8000b78 <__aeabi_d2iz>
 800eb1a:	4682      	mov	sl, r0
 800eb1c:	f7f1 fd12 	bl	8000544 <__aeabi_i2d>
 800eb20:	4642      	mov	r2, r8
 800eb22:	464b      	mov	r3, r9
 800eb24:	f7f1 fd78 	bl	8000618 <__aeabi_dmul>
 800eb28:	4602      	mov	r2, r0
 800eb2a:	460b      	mov	r3, r1
 800eb2c:	4630      	mov	r0, r6
 800eb2e:	4639      	mov	r1, r7
 800eb30:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800eb34:	f7f1 fbb8 	bl	80002a8 <__aeabi_dsub>
 800eb38:	f805 6b01 	strb.w	r6, [r5], #1
 800eb3c:	9e01      	ldr	r6, [sp, #4]
 800eb3e:	9f03      	ldr	r7, [sp, #12]
 800eb40:	1bae      	subs	r6, r5, r6
 800eb42:	42b7      	cmp	r7, r6
 800eb44:	4602      	mov	r2, r0
 800eb46:	460b      	mov	r3, r1
 800eb48:	d135      	bne.n	800ebb6 <_dtoa_r+0x6e6>
 800eb4a:	f7f1 fbaf 	bl	80002ac <__adddf3>
 800eb4e:	4642      	mov	r2, r8
 800eb50:	464b      	mov	r3, r9
 800eb52:	4606      	mov	r6, r0
 800eb54:	460f      	mov	r7, r1
 800eb56:	f7f1 ffef 	bl	8000b38 <__aeabi_dcmpgt>
 800eb5a:	b9d0      	cbnz	r0, 800eb92 <_dtoa_r+0x6c2>
 800eb5c:	4642      	mov	r2, r8
 800eb5e:	464b      	mov	r3, r9
 800eb60:	4630      	mov	r0, r6
 800eb62:	4639      	mov	r1, r7
 800eb64:	f7f1 ffc0 	bl	8000ae8 <__aeabi_dcmpeq>
 800eb68:	b110      	cbz	r0, 800eb70 <_dtoa_r+0x6a0>
 800eb6a:	f01a 0f01 	tst.w	sl, #1
 800eb6e:	d110      	bne.n	800eb92 <_dtoa_r+0x6c2>
 800eb70:	4620      	mov	r0, r4
 800eb72:	ee18 1a10 	vmov	r1, s16
 800eb76:	f001 f89d 	bl	800fcb4 <_Bfree>
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	9800      	ldr	r0, [sp, #0]
 800eb7e:	702b      	strb	r3, [r5, #0]
 800eb80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eb82:	3001      	adds	r0, #1
 800eb84:	6018      	str	r0, [r3, #0]
 800eb86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	f43f acf1 	beq.w	800e570 <_dtoa_r+0xa0>
 800eb8e:	601d      	str	r5, [r3, #0]
 800eb90:	e4ee      	b.n	800e570 <_dtoa_r+0xa0>
 800eb92:	9f00      	ldr	r7, [sp, #0]
 800eb94:	462b      	mov	r3, r5
 800eb96:	461d      	mov	r5, r3
 800eb98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eb9c:	2a39      	cmp	r2, #57	; 0x39
 800eb9e:	d106      	bne.n	800ebae <_dtoa_r+0x6de>
 800eba0:	9a01      	ldr	r2, [sp, #4]
 800eba2:	429a      	cmp	r2, r3
 800eba4:	d1f7      	bne.n	800eb96 <_dtoa_r+0x6c6>
 800eba6:	9901      	ldr	r1, [sp, #4]
 800eba8:	2230      	movs	r2, #48	; 0x30
 800ebaa:	3701      	adds	r7, #1
 800ebac:	700a      	strb	r2, [r1, #0]
 800ebae:	781a      	ldrb	r2, [r3, #0]
 800ebb0:	3201      	adds	r2, #1
 800ebb2:	701a      	strb	r2, [r3, #0]
 800ebb4:	e790      	b.n	800ead8 <_dtoa_r+0x608>
 800ebb6:	4ba6      	ldr	r3, [pc, #664]	; (800ee50 <_dtoa_r+0x980>)
 800ebb8:	2200      	movs	r2, #0
 800ebba:	f7f1 fd2d 	bl	8000618 <__aeabi_dmul>
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	4606      	mov	r6, r0
 800ebc4:	460f      	mov	r7, r1
 800ebc6:	f7f1 ff8f 	bl	8000ae8 <__aeabi_dcmpeq>
 800ebca:	2800      	cmp	r0, #0
 800ebcc:	d09d      	beq.n	800eb0a <_dtoa_r+0x63a>
 800ebce:	e7cf      	b.n	800eb70 <_dtoa_r+0x6a0>
 800ebd0:	9a08      	ldr	r2, [sp, #32]
 800ebd2:	2a00      	cmp	r2, #0
 800ebd4:	f000 80d7 	beq.w	800ed86 <_dtoa_r+0x8b6>
 800ebd8:	9a06      	ldr	r2, [sp, #24]
 800ebda:	2a01      	cmp	r2, #1
 800ebdc:	f300 80ba 	bgt.w	800ed54 <_dtoa_r+0x884>
 800ebe0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ebe2:	2a00      	cmp	r2, #0
 800ebe4:	f000 80b2 	beq.w	800ed4c <_dtoa_r+0x87c>
 800ebe8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ebec:	9e07      	ldr	r6, [sp, #28]
 800ebee:	9d04      	ldr	r5, [sp, #16]
 800ebf0:	9a04      	ldr	r2, [sp, #16]
 800ebf2:	441a      	add	r2, r3
 800ebf4:	9204      	str	r2, [sp, #16]
 800ebf6:	9a05      	ldr	r2, [sp, #20]
 800ebf8:	2101      	movs	r1, #1
 800ebfa:	441a      	add	r2, r3
 800ebfc:	4620      	mov	r0, r4
 800ebfe:	9205      	str	r2, [sp, #20]
 800ec00:	f001 f95a 	bl	800feb8 <__i2b>
 800ec04:	4607      	mov	r7, r0
 800ec06:	2d00      	cmp	r5, #0
 800ec08:	dd0c      	ble.n	800ec24 <_dtoa_r+0x754>
 800ec0a:	9b05      	ldr	r3, [sp, #20]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	dd09      	ble.n	800ec24 <_dtoa_r+0x754>
 800ec10:	42ab      	cmp	r3, r5
 800ec12:	9a04      	ldr	r2, [sp, #16]
 800ec14:	bfa8      	it	ge
 800ec16:	462b      	movge	r3, r5
 800ec18:	1ad2      	subs	r2, r2, r3
 800ec1a:	9204      	str	r2, [sp, #16]
 800ec1c:	9a05      	ldr	r2, [sp, #20]
 800ec1e:	1aed      	subs	r5, r5, r3
 800ec20:	1ad3      	subs	r3, r2, r3
 800ec22:	9305      	str	r3, [sp, #20]
 800ec24:	9b07      	ldr	r3, [sp, #28]
 800ec26:	b31b      	cbz	r3, 800ec70 <_dtoa_r+0x7a0>
 800ec28:	9b08      	ldr	r3, [sp, #32]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	f000 80af 	beq.w	800ed8e <_dtoa_r+0x8be>
 800ec30:	2e00      	cmp	r6, #0
 800ec32:	dd13      	ble.n	800ec5c <_dtoa_r+0x78c>
 800ec34:	4639      	mov	r1, r7
 800ec36:	4632      	mov	r2, r6
 800ec38:	4620      	mov	r0, r4
 800ec3a:	f001 f9fd 	bl	8010038 <__pow5mult>
 800ec3e:	ee18 2a10 	vmov	r2, s16
 800ec42:	4601      	mov	r1, r0
 800ec44:	4607      	mov	r7, r0
 800ec46:	4620      	mov	r0, r4
 800ec48:	f001 f94c 	bl	800fee4 <__multiply>
 800ec4c:	ee18 1a10 	vmov	r1, s16
 800ec50:	4680      	mov	r8, r0
 800ec52:	4620      	mov	r0, r4
 800ec54:	f001 f82e 	bl	800fcb4 <_Bfree>
 800ec58:	ee08 8a10 	vmov	s16, r8
 800ec5c:	9b07      	ldr	r3, [sp, #28]
 800ec5e:	1b9a      	subs	r2, r3, r6
 800ec60:	d006      	beq.n	800ec70 <_dtoa_r+0x7a0>
 800ec62:	ee18 1a10 	vmov	r1, s16
 800ec66:	4620      	mov	r0, r4
 800ec68:	f001 f9e6 	bl	8010038 <__pow5mult>
 800ec6c:	ee08 0a10 	vmov	s16, r0
 800ec70:	2101      	movs	r1, #1
 800ec72:	4620      	mov	r0, r4
 800ec74:	f001 f920 	bl	800feb8 <__i2b>
 800ec78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	4606      	mov	r6, r0
 800ec7e:	f340 8088 	ble.w	800ed92 <_dtoa_r+0x8c2>
 800ec82:	461a      	mov	r2, r3
 800ec84:	4601      	mov	r1, r0
 800ec86:	4620      	mov	r0, r4
 800ec88:	f001 f9d6 	bl	8010038 <__pow5mult>
 800ec8c:	9b06      	ldr	r3, [sp, #24]
 800ec8e:	2b01      	cmp	r3, #1
 800ec90:	4606      	mov	r6, r0
 800ec92:	f340 8081 	ble.w	800ed98 <_dtoa_r+0x8c8>
 800ec96:	f04f 0800 	mov.w	r8, #0
 800ec9a:	6933      	ldr	r3, [r6, #16]
 800ec9c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800eca0:	6918      	ldr	r0, [r3, #16]
 800eca2:	f001 f8b9 	bl	800fe18 <__hi0bits>
 800eca6:	f1c0 0020 	rsb	r0, r0, #32
 800ecaa:	9b05      	ldr	r3, [sp, #20]
 800ecac:	4418      	add	r0, r3
 800ecae:	f010 001f 	ands.w	r0, r0, #31
 800ecb2:	f000 8092 	beq.w	800edda <_dtoa_r+0x90a>
 800ecb6:	f1c0 0320 	rsb	r3, r0, #32
 800ecba:	2b04      	cmp	r3, #4
 800ecbc:	f340 808a 	ble.w	800edd4 <_dtoa_r+0x904>
 800ecc0:	f1c0 001c 	rsb	r0, r0, #28
 800ecc4:	9b04      	ldr	r3, [sp, #16]
 800ecc6:	4403      	add	r3, r0
 800ecc8:	9304      	str	r3, [sp, #16]
 800ecca:	9b05      	ldr	r3, [sp, #20]
 800eccc:	4403      	add	r3, r0
 800ecce:	4405      	add	r5, r0
 800ecd0:	9305      	str	r3, [sp, #20]
 800ecd2:	9b04      	ldr	r3, [sp, #16]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	dd07      	ble.n	800ece8 <_dtoa_r+0x818>
 800ecd8:	ee18 1a10 	vmov	r1, s16
 800ecdc:	461a      	mov	r2, r3
 800ecde:	4620      	mov	r0, r4
 800ece0:	f001 fa04 	bl	80100ec <__lshift>
 800ece4:	ee08 0a10 	vmov	s16, r0
 800ece8:	9b05      	ldr	r3, [sp, #20]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	dd05      	ble.n	800ecfa <_dtoa_r+0x82a>
 800ecee:	4631      	mov	r1, r6
 800ecf0:	461a      	mov	r2, r3
 800ecf2:	4620      	mov	r0, r4
 800ecf4:	f001 f9fa 	bl	80100ec <__lshift>
 800ecf8:	4606      	mov	r6, r0
 800ecfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d06e      	beq.n	800edde <_dtoa_r+0x90e>
 800ed00:	ee18 0a10 	vmov	r0, s16
 800ed04:	4631      	mov	r1, r6
 800ed06:	f001 fa61 	bl	80101cc <__mcmp>
 800ed0a:	2800      	cmp	r0, #0
 800ed0c:	da67      	bge.n	800edde <_dtoa_r+0x90e>
 800ed0e:	9b00      	ldr	r3, [sp, #0]
 800ed10:	3b01      	subs	r3, #1
 800ed12:	ee18 1a10 	vmov	r1, s16
 800ed16:	9300      	str	r3, [sp, #0]
 800ed18:	220a      	movs	r2, #10
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	4620      	mov	r0, r4
 800ed1e:	f000 ffeb 	bl	800fcf8 <__multadd>
 800ed22:	9b08      	ldr	r3, [sp, #32]
 800ed24:	ee08 0a10 	vmov	s16, r0
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	f000 81b1 	beq.w	800f090 <_dtoa_r+0xbc0>
 800ed2e:	2300      	movs	r3, #0
 800ed30:	4639      	mov	r1, r7
 800ed32:	220a      	movs	r2, #10
 800ed34:	4620      	mov	r0, r4
 800ed36:	f000 ffdf 	bl	800fcf8 <__multadd>
 800ed3a:	9b02      	ldr	r3, [sp, #8]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	4607      	mov	r7, r0
 800ed40:	f300 808e 	bgt.w	800ee60 <_dtoa_r+0x990>
 800ed44:	9b06      	ldr	r3, [sp, #24]
 800ed46:	2b02      	cmp	r3, #2
 800ed48:	dc51      	bgt.n	800edee <_dtoa_r+0x91e>
 800ed4a:	e089      	b.n	800ee60 <_dtoa_r+0x990>
 800ed4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ed4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ed52:	e74b      	b.n	800ebec <_dtoa_r+0x71c>
 800ed54:	9b03      	ldr	r3, [sp, #12]
 800ed56:	1e5e      	subs	r6, r3, #1
 800ed58:	9b07      	ldr	r3, [sp, #28]
 800ed5a:	42b3      	cmp	r3, r6
 800ed5c:	bfbf      	itttt	lt
 800ed5e:	9b07      	ldrlt	r3, [sp, #28]
 800ed60:	9607      	strlt	r6, [sp, #28]
 800ed62:	1af2      	sublt	r2, r6, r3
 800ed64:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ed66:	bfb6      	itet	lt
 800ed68:	189b      	addlt	r3, r3, r2
 800ed6a:	1b9e      	subge	r6, r3, r6
 800ed6c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ed6e:	9b03      	ldr	r3, [sp, #12]
 800ed70:	bfb8      	it	lt
 800ed72:	2600      	movlt	r6, #0
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	bfb7      	itett	lt
 800ed78:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ed7c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ed80:	1a9d      	sublt	r5, r3, r2
 800ed82:	2300      	movlt	r3, #0
 800ed84:	e734      	b.n	800ebf0 <_dtoa_r+0x720>
 800ed86:	9e07      	ldr	r6, [sp, #28]
 800ed88:	9d04      	ldr	r5, [sp, #16]
 800ed8a:	9f08      	ldr	r7, [sp, #32]
 800ed8c:	e73b      	b.n	800ec06 <_dtoa_r+0x736>
 800ed8e:	9a07      	ldr	r2, [sp, #28]
 800ed90:	e767      	b.n	800ec62 <_dtoa_r+0x792>
 800ed92:	9b06      	ldr	r3, [sp, #24]
 800ed94:	2b01      	cmp	r3, #1
 800ed96:	dc18      	bgt.n	800edca <_dtoa_r+0x8fa>
 800ed98:	f1ba 0f00 	cmp.w	sl, #0
 800ed9c:	d115      	bne.n	800edca <_dtoa_r+0x8fa>
 800ed9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eda2:	b993      	cbnz	r3, 800edca <_dtoa_r+0x8fa>
 800eda4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800eda8:	0d1b      	lsrs	r3, r3, #20
 800edaa:	051b      	lsls	r3, r3, #20
 800edac:	b183      	cbz	r3, 800edd0 <_dtoa_r+0x900>
 800edae:	9b04      	ldr	r3, [sp, #16]
 800edb0:	3301      	adds	r3, #1
 800edb2:	9304      	str	r3, [sp, #16]
 800edb4:	9b05      	ldr	r3, [sp, #20]
 800edb6:	3301      	adds	r3, #1
 800edb8:	9305      	str	r3, [sp, #20]
 800edba:	f04f 0801 	mov.w	r8, #1
 800edbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	f47f af6a 	bne.w	800ec9a <_dtoa_r+0x7ca>
 800edc6:	2001      	movs	r0, #1
 800edc8:	e76f      	b.n	800ecaa <_dtoa_r+0x7da>
 800edca:	f04f 0800 	mov.w	r8, #0
 800edce:	e7f6      	b.n	800edbe <_dtoa_r+0x8ee>
 800edd0:	4698      	mov	r8, r3
 800edd2:	e7f4      	b.n	800edbe <_dtoa_r+0x8ee>
 800edd4:	f43f af7d 	beq.w	800ecd2 <_dtoa_r+0x802>
 800edd8:	4618      	mov	r0, r3
 800edda:	301c      	adds	r0, #28
 800eddc:	e772      	b.n	800ecc4 <_dtoa_r+0x7f4>
 800edde:	9b03      	ldr	r3, [sp, #12]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	dc37      	bgt.n	800ee54 <_dtoa_r+0x984>
 800ede4:	9b06      	ldr	r3, [sp, #24]
 800ede6:	2b02      	cmp	r3, #2
 800ede8:	dd34      	ble.n	800ee54 <_dtoa_r+0x984>
 800edea:	9b03      	ldr	r3, [sp, #12]
 800edec:	9302      	str	r3, [sp, #8]
 800edee:	9b02      	ldr	r3, [sp, #8]
 800edf0:	b96b      	cbnz	r3, 800ee0e <_dtoa_r+0x93e>
 800edf2:	4631      	mov	r1, r6
 800edf4:	2205      	movs	r2, #5
 800edf6:	4620      	mov	r0, r4
 800edf8:	f000 ff7e 	bl	800fcf8 <__multadd>
 800edfc:	4601      	mov	r1, r0
 800edfe:	4606      	mov	r6, r0
 800ee00:	ee18 0a10 	vmov	r0, s16
 800ee04:	f001 f9e2 	bl	80101cc <__mcmp>
 800ee08:	2800      	cmp	r0, #0
 800ee0a:	f73f adbb 	bgt.w	800e984 <_dtoa_r+0x4b4>
 800ee0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee10:	9d01      	ldr	r5, [sp, #4]
 800ee12:	43db      	mvns	r3, r3
 800ee14:	9300      	str	r3, [sp, #0]
 800ee16:	f04f 0800 	mov.w	r8, #0
 800ee1a:	4631      	mov	r1, r6
 800ee1c:	4620      	mov	r0, r4
 800ee1e:	f000 ff49 	bl	800fcb4 <_Bfree>
 800ee22:	2f00      	cmp	r7, #0
 800ee24:	f43f aea4 	beq.w	800eb70 <_dtoa_r+0x6a0>
 800ee28:	f1b8 0f00 	cmp.w	r8, #0
 800ee2c:	d005      	beq.n	800ee3a <_dtoa_r+0x96a>
 800ee2e:	45b8      	cmp	r8, r7
 800ee30:	d003      	beq.n	800ee3a <_dtoa_r+0x96a>
 800ee32:	4641      	mov	r1, r8
 800ee34:	4620      	mov	r0, r4
 800ee36:	f000 ff3d 	bl	800fcb4 <_Bfree>
 800ee3a:	4639      	mov	r1, r7
 800ee3c:	4620      	mov	r0, r4
 800ee3e:	f000 ff39 	bl	800fcb4 <_Bfree>
 800ee42:	e695      	b.n	800eb70 <_dtoa_r+0x6a0>
 800ee44:	2600      	movs	r6, #0
 800ee46:	4637      	mov	r7, r6
 800ee48:	e7e1      	b.n	800ee0e <_dtoa_r+0x93e>
 800ee4a:	9700      	str	r7, [sp, #0]
 800ee4c:	4637      	mov	r7, r6
 800ee4e:	e599      	b.n	800e984 <_dtoa_r+0x4b4>
 800ee50:	40240000 	.word	0x40240000
 800ee54:	9b08      	ldr	r3, [sp, #32]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	f000 80ca 	beq.w	800eff0 <_dtoa_r+0xb20>
 800ee5c:	9b03      	ldr	r3, [sp, #12]
 800ee5e:	9302      	str	r3, [sp, #8]
 800ee60:	2d00      	cmp	r5, #0
 800ee62:	dd05      	ble.n	800ee70 <_dtoa_r+0x9a0>
 800ee64:	4639      	mov	r1, r7
 800ee66:	462a      	mov	r2, r5
 800ee68:	4620      	mov	r0, r4
 800ee6a:	f001 f93f 	bl	80100ec <__lshift>
 800ee6e:	4607      	mov	r7, r0
 800ee70:	f1b8 0f00 	cmp.w	r8, #0
 800ee74:	d05b      	beq.n	800ef2e <_dtoa_r+0xa5e>
 800ee76:	6879      	ldr	r1, [r7, #4]
 800ee78:	4620      	mov	r0, r4
 800ee7a:	f000 fedb 	bl	800fc34 <_Balloc>
 800ee7e:	4605      	mov	r5, r0
 800ee80:	b928      	cbnz	r0, 800ee8e <_dtoa_r+0x9be>
 800ee82:	4b87      	ldr	r3, [pc, #540]	; (800f0a0 <_dtoa_r+0xbd0>)
 800ee84:	4602      	mov	r2, r0
 800ee86:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ee8a:	f7ff bb3b 	b.w	800e504 <_dtoa_r+0x34>
 800ee8e:	693a      	ldr	r2, [r7, #16]
 800ee90:	3202      	adds	r2, #2
 800ee92:	0092      	lsls	r2, r2, #2
 800ee94:	f107 010c 	add.w	r1, r7, #12
 800ee98:	300c      	adds	r0, #12
 800ee9a:	f7fd f9ed 	bl	800c278 <memcpy>
 800ee9e:	2201      	movs	r2, #1
 800eea0:	4629      	mov	r1, r5
 800eea2:	4620      	mov	r0, r4
 800eea4:	f001 f922 	bl	80100ec <__lshift>
 800eea8:	9b01      	ldr	r3, [sp, #4]
 800eeaa:	f103 0901 	add.w	r9, r3, #1
 800eeae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800eeb2:	4413      	add	r3, r2
 800eeb4:	9305      	str	r3, [sp, #20]
 800eeb6:	f00a 0301 	and.w	r3, sl, #1
 800eeba:	46b8      	mov	r8, r7
 800eebc:	9304      	str	r3, [sp, #16]
 800eebe:	4607      	mov	r7, r0
 800eec0:	4631      	mov	r1, r6
 800eec2:	ee18 0a10 	vmov	r0, s16
 800eec6:	f7ff fa75 	bl	800e3b4 <quorem>
 800eeca:	4641      	mov	r1, r8
 800eecc:	9002      	str	r0, [sp, #8]
 800eece:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800eed2:	ee18 0a10 	vmov	r0, s16
 800eed6:	f001 f979 	bl	80101cc <__mcmp>
 800eeda:	463a      	mov	r2, r7
 800eedc:	9003      	str	r0, [sp, #12]
 800eede:	4631      	mov	r1, r6
 800eee0:	4620      	mov	r0, r4
 800eee2:	f001 f98f 	bl	8010204 <__mdiff>
 800eee6:	68c2      	ldr	r2, [r0, #12]
 800eee8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800eeec:	4605      	mov	r5, r0
 800eeee:	bb02      	cbnz	r2, 800ef32 <_dtoa_r+0xa62>
 800eef0:	4601      	mov	r1, r0
 800eef2:	ee18 0a10 	vmov	r0, s16
 800eef6:	f001 f969 	bl	80101cc <__mcmp>
 800eefa:	4602      	mov	r2, r0
 800eefc:	4629      	mov	r1, r5
 800eefe:	4620      	mov	r0, r4
 800ef00:	9207      	str	r2, [sp, #28]
 800ef02:	f000 fed7 	bl	800fcb4 <_Bfree>
 800ef06:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ef0a:	ea43 0102 	orr.w	r1, r3, r2
 800ef0e:	9b04      	ldr	r3, [sp, #16]
 800ef10:	430b      	orrs	r3, r1
 800ef12:	464d      	mov	r5, r9
 800ef14:	d10f      	bne.n	800ef36 <_dtoa_r+0xa66>
 800ef16:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ef1a:	d02a      	beq.n	800ef72 <_dtoa_r+0xaa2>
 800ef1c:	9b03      	ldr	r3, [sp, #12]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	dd02      	ble.n	800ef28 <_dtoa_r+0xa58>
 800ef22:	9b02      	ldr	r3, [sp, #8]
 800ef24:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ef28:	f88b a000 	strb.w	sl, [fp]
 800ef2c:	e775      	b.n	800ee1a <_dtoa_r+0x94a>
 800ef2e:	4638      	mov	r0, r7
 800ef30:	e7ba      	b.n	800eea8 <_dtoa_r+0x9d8>
 800ef32:	2201      	movs	r2, #1
 800ef34:	e7e2      	b.n	800eefc <_dtoa_r+0xa2c>
 800ef36:	9b03      	ldr	r3, [sp, #12]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	db04      	blt.n	800ef46 <_dtoa_r+0xa76>
 800ef3c:	9906      	ldr	r1, [sp, #24]
 800ef3e:	430b      	orrs	r3, r1
 800ef40:	9904      	ldr	r1, [sp, #16]
 800ef42:	430b      	orrs	r3, r1
 800ef44:	d122      	bne.n	800ef8c <_dtoa_r+0xabc>
 800ef46:	2a00      	cmp	r2, #0
 800ef48:	ddee      	ble.n	800ef28 <_dtoa_r+0xa58>
 800ef4a:	ee18 1a10 	vmov	r1, s16
 800ef4e:	2201      	movs	r2, #1
 800ef50:	4620      	mov	r0, r4
 800ef52:	f001 f8cb 	bl	80100ec <__lshift>
 800ef56:	4631      	mov	r1, r6
 800ef58:	ee08 0a10 	vmov	s16, r0
 800ef5c:	f001 f936 	bl	80101cc <__mcmp>
 800ef60:	2800      	cmp	r0, #0
 800ef62:	dc03      	bgt.n	800ef6c <_dtoa_r+0xa9c>
 800ef64:	d1e0      	bne.n	800ef28 <_dtoa_r+0xa58>
 800ef66:	f01a 0f01 	tst.w	sl, #1
 800ef6a:	d0dd      	beq.n	800ef28 <_dtoa_r+0xa58>
 800ef6c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ef70:	d1d7      	bne.n	800ef22 <_dtoa_r+0xa52>
 800ef72:	2339      	movs	r3, #57	; 0x39
 800ef74:	f88b 3000 	strb.w	r3, [fp]
 800ef78:	462b      	mov	r3, r5
 800ef7a:	461d      	mov	r5, r3
 800ef7c:	3b01      	subs	r3, #1
 800ef7e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ef82:	2a39      	cmp	r2, #57	; 0x39
 800ef84:	d071      	beq.n	800f06a <_dtoa_r+0xb9a>
 800ef86:	3201      	adds	r2, #1
 800ef88:	701a      	strb	r2, [r3, #0]
 800ef8a:	e746      	b.n	800ee1a <_dtoa_r+0x94a>
 800ef8c:	2a00      	cmp	r2, #0
 800ef8e:	dd07      	ble.n	800efa0 <_dtoa_r+0xad0>
 800ef90:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ef94:	d0ed      	beq.n	800ef72 <_dtoa_r+0xaa2>
 800ef96:	f10a 0301 	add.w	r3, sl, #1
 800ef9a:	f88b 3000 	strb.w	r3, [fp]
 800ef9e:	e73c      	b.n	800ee1a <_dtoa_r+0x94a>
 800efa0:	9b05      	ldr	r3, [sp, #20]
 800efa2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800efa6:	4599      	cmp	r9, r3
 800efa8:	d047      	beq.n	800f03a <_dtoa_r+0xb6a>
 800efaa:	ee18 1a10 	vmov	r1, s16
 800efae:	2300      	movs	r3, #0
 800efb0:	220a      	movs	r2, #10
 800efb2:	4620      	mov	r0, r4
 800efb4:	f000 fea0 	bl	800fcf8 <__multadd>
 800efb8:	45b8      	cmp	r8, r7
 800efba:	ee08 0a10 	vmov	s16, r0
 800efbe:	f04f 0300 	mov.w	r3, #0
 800efc2:	f04f 020a 	mov.w	r2, #10
 800efc6:	4641      	mov	r1, r8
 800efc8:	4620      	mov	r0, r4
 800efca:	d106      	bne.n	800efda <_dtoa_r+0xb0a>
 800efcc:	f000 fe94 	bl	800fcf8 <__multadd>
 800efd0:	4680      	mov	r8, r0
 800efd2:	4607      	mov	r7, r0
 800efd4:	f109 0901 	add.w	r9, r9, #1
 800efd8:	e772      	b.n	800eec0 <_dtoa_r+0x9f0>
 800efda:	f000 fe8d 	bl	800fcf8 <__multadd>
 800efde:	4639      	mov	r1, r7
 800efe0:	4680      	mov	r8, r0
 800efe2:	2300      	movs	r3, #0
 800efe4:	220a      	movs	r2, #10
 800efe6:	4620      	mov	r0, r4
 800efe8:	f000 fe86 	bl	800fcf8 <__multadd>
 800efec:	4607      	mov	r7, r0
 800efee:	e7f1      	b.n	800efd4 <_dtoa_r+0xb04>
 800eff0:	9b03      	ldr	r3, [sp, #12]
 800eff2:	9302      	str	r3, [sp, #8]
 800eff4:	9d01      	ldr	r5, [sp, #4]
 800eff6:	ee18 0a10 	vmov	r0, s16
 800effa:	4631      	mov	r1, r6
 800effc:	f7ff f9da 	bl	800e3b4 <quorem>
 800f000:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f004:	9b01      	ldr	r3, [sp, #4]
 800f006:	f805 ab01 	strb.w	sl, [r5], #1
 800f00a:	1aea      	subs	r2, r5, r3
 800f00c:	9b02      	ldr	r3, [sp, #8]
 800f00e:	4293      	cmp	r3, r2
 800f010:	dd09      	ble.n	800f026 <_dtoa_r+0xb56>
 800f012:	ee18 1a10 	vmov	r1, s16
 800f016:	2300      	movs	r3, #0
 800f018:	220a      	movs	r2, #10
 800f01a:	4620      	mov	r0, r4
 800f01c:	f000 fe6c 	bl	800fcf8 <__multadd>
 800f020:	ee08 0a10 	vmov	s16, r0
 800f024:	e7e7      	b.n	800eff6 <_dtoa_r+0xb26>
 800f026:	9b02      	ldr	r3, [sp, #8]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	bfc8      	it	gt
 800f02c:	461d      	movgt	r5, r3
 800f02e:	9b01      	ldr	r3, [sp, #4]
 800f030:	bfd8      	it	le
 800f032:	2501      	movle	r5, #1
 800f034:	441d      	add	r5, r3
 800f036:	f04f 0800 	mov.w	r8, #0
 800f03a:	ee18 1a10 	vmov	r1, s16
 800f03e:	2201      	movs	r2, #1
 800f040:	4620      	mov	r0, r4
 800f042:	f001 f853 	bl	80100ec <__lshift>
 800f046:	4631      	mov	r1, r6
 800f048:	ee08 0a10 	vmov	s16, r0
 800f04c:	f001 f8be 	bl	80101cc <__mcmp>
 800f050:	2800      	cmp	r0, #0
 800f052:	dc91      	bgt.n	800ef78 <_dtoa_r+0xaa8>
 800f054:	d102      	bne.n	800f05c <_dtoa_r+0xb8c>
 800f056:	f01a 0f01 	tst.w	sl, #1
 800f05a:	d18d      	bne.n	800ef78 <_dtoa_r+0xaa8>
 800f05c:	462b      	mov	r3, r5
 800f05e:	461d      	mov	r5, r3
 800f060:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f064:	2a30      	cmp	r2, #48	; 0x30
 800f066:	d0fa      	beq.n	800f05e <_dtoa_r+0xb8e>
 800f068:	e6d7      	b.n	800ee1a <_dtoa_r+0x94a>
 800f06a:	9a01      	ldr	r2, [sp, #4]
 800f06c:	429a      	cmp	r2, r3
 800f06e:	d184      	bne.n	800ef7a <_dtoa_r+0xaaa>
 800f070:	9b00      	ldr	r3, [sp, #0]
 800f072:	3301      	adds	r3, #1
 800f074:	9300      	str	r3, [sp, #0]
 800f076:	2331      	movs	r3, #49	; 0x31
 800f078:	7013      	strb	r3, [r2, #0]
 800f07a:	e6ce      	b.n	800ee1a <_dtoa_r+0x94a>
 800f07c:	4b09      	ldr	r3, [pc, #36]	; (800f0a4 <_dtoa_r+0xbd4>)
 800f07e:	f7ff ba95 	b.w	800e5ac <_dtoa_r+0xdc>
 800f082:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f084:	2b00      	cmp	r3, #0
 800f086:	f47f aa6e 	bne.w	800e566 <_dtoa_r+0x96>
 800f08a:	4b07      	ldr	r3, [pc, #28]	; (800f0a8 <_dtoa_r+0xbd8>)
 800f08c:	f7ff ba8e 	b.w	800e5ac <_dtoa_r+0xdc>
 800f090:	9b02      	ldr	r3, [sp, #8]
 800f092:	2b00      	cmp	r3, #0
 800f094:	dcae      	bgt.n	800eff4 <_dtoa_r+0xb24>
 800f096:	9b06      	ldr	r3, [sp, #24]
 800f098:	2b02      	cmp	r3, #2
 800f09a:	f73f aea8 	bgt.w	800edee <_dtoa_r+0x91e>
 800f09e:	e7a9      	b.n	800eff4 <_dtoa_r+0xb24>
 800f0a0:	08012cf7 	.word	0x08012cf7
 800f0a4:	08012bf8 	.word	0x08012bf8
 800f0a8:	08012c78 	.word	0x08012c78

0800f0ac <__sflush_r>:
 800f0ac:	898a      	ldrh	r2, [r1, #12]
 800f0ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0b2:	4605      	mov	r5, r0
 800f0b4:	0710      	lsls	r0, r2, #28
 800f0b6:	460c      	mov	r4, r1
 800f0b8:	d458      	bmi.n	800f16c <__sflush_r+0xc0>
 800f0ba:	684b      	ldr	r3, [r1, #4]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	dc05      	bgt.n	800f0cc <__sflush_r+0x20>
 800f0c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	dc02      	bgt.n	800f0cc <__sflush_r+0x20>
 800f0c6:	2000      	movs	r0, #0
 800f0c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f0ce:	2e00      	cmp	r6, #0
 800f0d0:	d0f9      	beq.n	800f0c6 <__sflush_r+0x1a>
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f0d8:	682f      	ldr	r7, [r5, #0]
 800f0da:	602b      	str	r3, [r5, #0]
 800f0dc:	d032      	beq.n	800f144 <__sflush_r+0x98>
 800f0de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f0e0:	89a3      	ldrh	r3, [r4, #12]
 800f0e2:	075a      	lsls	r2, r3, #29
 800f0e4:	d505      	bpl.n	800f0f2 <__sflush_r+0x46>
 800f0e6:	6863      	ldr	r3, [r4, #4]
 800f0e8:	1ac0      	subs	r0, r0, r3
 800f0ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f0ec:	b10b      	cbz	r3, 800f0f2 <__sflush_r+0x46>
 800f0ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f0f0:	1ac0      	subs	r0, r0, r3
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	4602      	mov	r2, r0
 800f0f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f0f8:	6a21      	ldr	r1, [r4, #32]
 800f0fa:	4628      	mov	r0, r5
 800f0fc:	47b0      	blx	r6
 800f0fe:	1c43      	adds	r3, r0, #1
 800f100:	89a3      	ldrh	r3, [r4, #12]
 800f102:	d106      	bne.n	800f112 <__sflush_r+0x66>
 800f104:	6829      	ldr	r1, [r5, #0]
 800f106:	291d      	cmp	r1, #29
 800f108:	d82c      	bhi.n	800f164 <__sflush_r+0xb8>
 800f10a:	4a2a      	ldr	r2, [pc, #168]	; (800f1b4 <__sflush_r+0x108>)
 800f10c:	40ca      	lsrs	r2, r1
 800f10e:	07d6      	lsls	r6, r2, #31
 800f110:	d528      	bpl.n	800f164 <__sflush_r+0xb8>
 800f112:	2200      	movs	r2, #0
 800f114:	6062      	str	r2, [r4, #4]
 800f116:	04d9      	lsls	r1, r3, #19
 800f118:	6922      	ldr	r2, [r4, #16]
 800f11a:	6022      	str	r2, [r4, #0]
 800f11c:	d504      	bpl.n	800f128 <__sflush_r+0x7c>
 800f11e:	1c42      	adds	r2, r0, #1
 800f120:	d101      	bne.n	800f126 <__sflush_r+0x7a>
 800f122:	682b      	ldr	r3, [r5, #0]
 800f124:	b903      	cbnz	r3, 800f128 <__sflush_r+0x7c>
 800f126:	6560      	str	r0, [r4, #84]	; 0x54
 800f128:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f12a:	602f      	str	r7, [r5, #0]
 800f12c:	2900      	cmp	r1, #0
 800f12e:	d0ca      	beq.n	800f0c6 <__sflush_r+0x1a>
 800f130:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f134:	4299      	cmp	r1, r3
 800f136:	d002      	beq.n	800f13e <__sflush_r+0x92>
 800f138:	4628      	mov	r0, r5
 800f13a:	f7fd f8b3 	bl	800c2a4 <_free_r>
 800f13e:	2000      	movs	r0, #0
 800f140:	6360      	str	r0, [r4, #52]	; 0x34
 800f142:	e7c1      	b.n	800f0c8 <__sflush_r+0x1c>
 800f144:	6a21      	ldr	r1, [r4, #32]
 800f146:	2301      	movs	r3, #1
 800f148:	4628      	mov	r0, r5
 800f14a:	47b0      	blx	r6
 800f14c:	1c41      	adds	r1, r0, #1
 800f14e:	d1c7      	bne.n	800f0e0 <__sflush_r+0x34>
 800f150:	682b      	ldr	r3, [r5, #0]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d0c4      	beq.n	800f0e0 <__sflush_r+0x34>
 800f156:	2b1d      	cmp	r3, #29
 800f158:	d001      	beq.n	800f15e <__sflush_r+0xb2>
 800f15a:	2b16      	cmp	r3, #22
 800f15c:	d101      	bne.n	800f162 <__sflush_r+0xb6>
 800f15e:	602f      	str	r7, [r5, #0]
 800f160:	e7b1      	b.n	800f0c6 <__sflush_r+0x1a>
 800f162:	89a3      	ldrh	r3, [r4, #12]
 800f164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f168:	81a3      	strh	r3, [r4, #12]
 800f16a:	e7ad      	b.n	800f0c8 <__sflush_r+0x1c>
 800f16c:	690f      	ldr	r7, [r1, #16]
 800f16e:	2f00      	cmp	r7, #0
 800f170:	d0a9      	beq.n	800f0c6 <__sflush_r+0x1a>
 800f172:	0793      	lsls	r3, r2, #30
 800f174:	680e      	ldr	r6, [r1, #0]
 800f176:	bf08      	it	eq
 800f178:	694b      	ldreq	r3, [r1, #20]
 800f17a:	600f      	str	r7, [r1, #0]
 800f17c:	bf18      	it	ne
 800f17e:	2300      	movne	r3, #0
 800f180:	eba6 0807 	sub.w	r8, r6, r7
 800f184:	608b      	str	r3, [r1, #8]
 800f186:	f1b8 0f00 	cmp.w	r8, #0
 800f18a:	dd9c      	ble.n	800f0c6 <__sflush_r+0x1a>
 800f18c:	6a21      	ldr	r1, [r4, #32]
 800f18e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f190:	4643      	mov	r3, r8
 800f192:	463a      	mov	r2, r7
 800f194:	4628      	mov	r0, r5
 800f196:	47b0      	blx	r6
 800f198:	2800      	cmp	r0, #0
 800f19a:	dc06      	bgt.n	800f1aa <__sflush_r+0xfe>
 800f19c:	89a3      	ldrh	r3, [r4, #12]
 800f19e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1a2:	81a3      	strh	r3, [r4, #12]
 800f1a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f1a8:	e78e      	b.n	800f0c8 <__sflush_r+0x1c>
 800f1aa:	4407      	add	r7, r0
 800f1ac:	eba8 0800 	sub.w	r8, r8, r0
 800f1b0:	e7e9      	b.n	800f186 <__sflush_r+0xda>
 800f1b2:	bf00      	nop
 800f1b4:	20400001 	.word	0x20400001

0800f1b8 <_fflush_r>:
 800f1b8:	b538      	push	{r3, r4, r5, lr}
 800f1ba:	690b      	ldr	r3, [r1, #16]
 800f1bc:	4605      	mov	r5, r0
 800f1be:	460c      	mov	r4, r1
 800f1c0:	b913      	cbnz	r3, 800f1c8 <_fflush_r+0x10>
 800f1c2:	2500      	movs	r5, #0
 800f1c4:	4628      	mov	r0, r5
 800f1c6:	bd38      	pop	{r3, r4, r5, pc}
 800f1c8:	b118      	cbz	r0, 800f1d2 <_fflush_r+0x1a>
 800f1ca:	6983      	ldr	r3, [r0, #24]
 800f1cc:	b90b      	cbnz	r3, 800f1d2 <_fflush_r+0x1a>
 800f1ce:	f000 f887 	bl	800f2e0 <__sinit>
 800f1d2:	4b14      	ldr	r3, [pc, #80]	; (800f224 <_fflush_r+0x6c>)
 800f1d4:	429c      	cmp	r4, r3
 800f1d6:	d11b      	bne.n	800f210 <_fflush_r+0x58>
 800f1d8:	686c      	ldr	r4, [r5, #4]
 800f1da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d0ef      	beq.n	800f1c2 <_fflush_r+0xa>
 800f1e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f1e4:	07d0      	lsls	r0, r2, #31
 800f1e6:	d404      	bmi.n	800f1f2 <_fflush_r+0x3a>
 800f1e8:	0599      	lsls	r1, r3, #22
 800f1ea:	d402      	bmi.n	800f1f2 <_fflush_r+0x3a>
 800f1ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f1ee:	f000 fc88 	bl	800fb02 <__retarget_lock_acquire_recursive>
 800f1f2:	4628      	mov	r0, r5
 800f1f4:	4621      	mov	r1, r4
 800f1f6:	f7ff ff59 	bl	800f0ac <__sflush_r>
 800f1fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f1fc:	07da      	lsls	r2, r3, #31
 800f1fe:	4605      	mov	r5, r0
 800f200:	d4e0      	bmi.n	800f1c4 <_fflush_r+0xc>
 800f202:	89a3      	ldrh	r3, [r4, #12]
 800f204:	059b      	lsls	r3, r3, #22
 800f206:	d4dd      	bmi.n	800f1c4 <_fflush_r+0xc>
 800f208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f20a:	f000 fc7b 	bl	800fb04 <__retarget_lock_release_recursive>
 800f20e:	e7d9      	b.n	800f1c4 <_fflush_r+0xc>
 800f210:	4b05      	ldr	r3, [pc, #20]	; (800f228 <_fflush_r+0x70>)
 800f212:	429c      	cmp	r4, r3
 800f214:	d101      	bne.n	800f21a <_fflush_r+0x62>
 800f216:	68ac      	ldr	r4, [r5, #8]
 800f218:	e7df      	b.n	800f1da <_fflush_r+0x22>
 800f21a:	4b04      	ldr	r3, [pc, #16]	; (800f22c <_fflush_r+0x74>)
 800f21c:	429c      	cmp	r4, r3
 800f21e:	bf08      	it	eq
 800f220:	68ec      	ldreq	r4, [r5, #12]
 800f222:	e7da      	b.n	800f1da <_fflush_r+0x22>
 800f224:	08012d28 	.word	0x08012d28
 800f228:	08012d48 	.word	0x08012d48
 800f22c:	08012d08 	.word	0x08012d08

0800f230 <std>:
 800f230:	2300      	movs	r3, #0
 800f232:	b510      	push	{r4, lr}
 800f234:	4604      	mov	r4, r0
 800f236:	e9c0 3300 	strd	r3, r3, [r0]
 800f23a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f23e:	6083      	str	r3, [r0, #8]
 800f240:	8181      	strh	r1, [r0, #12]
 800f242:	6643      	str	r3, [r0, #100]	; 0x64
 800f244:	81c2      	strh	r2, [r0, #14]
 800f246:	6183      	str	r3, [r0, #24]
 800f248:	4619      	mov	r1, r3
 800f24a:	2208      	movs	r2, #8
 800f24c:	305c      	adds	r0, #92	; 0x5c
 800f24e:	f7fd f821 	bl	800c294 <memset>
 800f252:	4b05      	ldr	r3, [pc, #20]	; (800f268 <std+0x38>)
 800f254:	6263      	str	r3, [r4, #36]	; 0x24
 800f256:	4b05      	ldr	r3, [pc, #20]	; (800f26c <std+0x3c>)
 800f258:	62a3      	str	r3, [r4, #40]	; 0x28
 800f25a:	4b05      	ldr	r3, [pc, #20]	; (800f270 <std+0x40>)
 800f25c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f25e:	4b05      	ldr	r3, [pc, #20]	; (800f274 <std+0x44>)
 800f260:	6224      	str	r4, [r4, #32]
 800f262:	6323      	str	r3, [r4, #48]	; 0x30
 800f264:	bd10      	pop	{r4, pc}
 800f266:	bf00      	nop
 800f268:	0800d319 	.word	0x0800d319
 800f26c:	0800d33b 	.word	0x0800d33b
 800f270:	0800d373 	.word	0x0800d373
 800f274:	0800d397 	.word	0x0800d397

0800f278 <_cleanup_r>:
 800f278:	4901      	ldr	r1, [pc, #4]	; (800f280 <_cleanup_r+0x8>)
 800f27a:	f000 b8af 	b.w	800f3dc <_fwalk_reent>
 800f27e:	bf00      	nop
 800f280:	0800f1b9 	.word	0x0800f1b9

0800f284 <__sfmoreglue>:
 800f284:	b570      	push	{r4, r5, r6, lr}
 800f286:	2268      	movs	r2, #104	; 0x68
 800f288:	1e4d      	subs	r5, r1, #1
 800f28a:	4355      	muls	r5, r2
 800f28c:	460e      	mov	r6, r1
 800f28e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f292:	f7fd f873 	bl	800c37c <_malloc_r>
 800f296:	4604      	mov	r4, r0
 800f298:	b140      	cbz	r0, 800f2ac <__sfmoreglue+0x28>
 800f29a:	2100      	movs	r1, #0
 800f29c:	e9c0 1600 	strd	r1, r6, [r0]
 800f2a0:	300c      	adds	r0, #12
 800f2a2:	60a0      	str	r0, [r4, #8]
 800f2a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f2a8:	f7fc fff4 	bl	800c294 <memset>
 800f2ac:	4620      	mov	r0, r4
 800f2ae:	bd70      	pop	{r4, r5, r6, pc}

0800f2b0 <__sfp_lock_acquire>:
 800f2b0:	4801      	ldr	r0, [pc, #4]	; (800f2b8 <__sfp_lock_acquire+0x8>)
 800f2b2:	f000 bc26 	b.w	800fb02 <__retarget_lock_acquire_recursive>
 800f2b6:	bf00      	nop
 800f2b8:	200025f5 	.word	0x200025f5

0800f2bc <__sfp_lock_release>:
 800f2bc:	4801      	ldr	r0, [pc, #4]	; (800f2c4 <__sfp_lock_release+0x8>)
 800f2be:	f000 bc21 	b.w	800fb04 <__retarget_lock_release_recursive>
 800f2c2:	bf00      	nop
 800f2c4:	200025f5 	.word	0x200025f5

0800f2c8 <__sinit_lock_acquire>:
 800f2c8:	4801      	ldr	r0, [pc, #4]	; (800f2d0 <__sinit_lock_acquire+0x8>)
 800f2ca:	f000 bc1a 	b.w	800fb02 <__retarget_lock_acquire_recursive>
 800f2ce:	bf00      	nop
 800f2d0:	200025f6 	.word	0x200025f6

0800f2d4 <__sinit_lock_release>:
 800f2d4:	4801      	ldr	r0, [pc, #4]	; (800f2dc <__sinit_lock_release+0x8>)
 800f2d6:	f000 bc15 	b.w	800fb04 <__retarget_lock_release_recursive>
 800f2da:	bf00      	nop
 800f2dc:	200025f6 	.word	0x200025f6

0800f2e0 <__sinit>:
 800f2e0:	b510      	push	{r4, lr}
 800f2e2:	4604      	mov	r4, r0
 800f2e4:	f7ff fff0 	bl	800f2c8 <__sinit_lock_acquire>
 800f2e8:	69a3      	ldr	r3, [r4, #24]
 800f2ea:	b11b      	cbz	r3, 800f2f4 <__sinit+0x14>
 800f2ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2f0:	f7ff bff0 	b.w	800f2d4 <__sinit_lock_release>
 800f2f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f2f8:	6523      	str	r3, [r4, #80]	; 0x50
 800f2fa:	4b13      	ldr	r3, [pc, #76]	; (800f348 <__sinit+0x68>)
 800f2fc:	4a13      	ldr	r2, [pc, #76]	; (800f34c <__sinit+0x6c>)
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	62a2      	str	r2, [r4, #40]	; 0x28
 800f302:	42a3      	cmp	r3, r4
 800f304:	bf04      	itt	eq
 800f306:	2301      	moveq	r3, #1
 800f308:	61a3      	streq	r3, [r4, #24]
 800f30a:	4620      	mov	r0, r4
 800f30c:	f000 f820 	bl	800f350 <__sfp>
 800f310:	6060      	str	r0, [r4, #4]
 800f312:	4620      	mov	r0, r4
 800f314:	f000 f81c 	bl	800f350 <__sfp>
 800f318:	60a0      	str	r0, [r4, #8]
 800f31a:	4620      	mov	r0, r4
 800f31c:	f000 f818 	bl	800f350 <__sfp>
 800f320:	2200      	movs	r2, #0
 800f322:	60e0      	str	r0, [r4, #12]
 800f324:	2104      	movs	r1, #4
 800f326:	6860      	ldr	r0, [r4, #4]
 800f328:	f7ff ff82 	bl	800f230 <std>
 800f32c:	68a0      	ldr	r0, [r4, #8]
 800f32e:	2201      	movs	r2, #1
 800f330:	2109      	movs	r1, #9
 800f332:	f7ff ff7d 	bl	800f230 <std>
 800f336:	68e0      	ldr	r0, [r4, #12]
 800f338:	2202      	movs	r2, #2
 800f33a:	2112      	movs	r1, #18
 800f33c:	f7ff ff78 	bl	800f230 <std>
 800f340:	2301      	movs	r3, #1
 800f342:	61a3      	str	r3, [r4, #24]
 800f344:	e7d2      	b.n	800f2ec <__sinit+0xc>
 800f346:	bf00      	nop
 800f348:	08012be4 	.word	0x08012be4
 800f34c:	0800f279 	.word	0x0800f279

0800f350 <__sfp>:
 800f350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f352:	4607      	mov	r7, r0
 800f354:	f7ff ffac 	bl	800f2b0 <__sfp_lock_acquire>
 800f358:	4b1e      	ldr	r3, [pc, #120]	; (800f3d4 <__sfp+0x84>)
 800f35a:	681e      	ldr	r6, [r3, #0]
 800f35c:	69b3      	ldr	r3, [r6, #24]
 800f35e:	b913      	cbnz	r3, 800f366 <__sfp+0x16>
 800f360:	4630      	mov	r0, r6
 800f362:	f7ff ffbd 	bl	800f2e0 <__sinit>
 800f366:	3648      	adds	r6, #72	; 0x48
 800f368:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f36c:	3b01      	subs	r3, #1
 800f36e:	d503      	bpl.n	800f378 <__sfp+0x28>
 800f370:	6833      	ldr	r3, [r6, #0]
 800f372:	b30b      	cbz	r3, 800f3b8 <__sfp+0x68>
 800f374:	6836      	ldr	r6, [r6, #0]
 800f376:	e7f7      	b.n	800f368 <__sfp+0x18>
 800f378:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f37c:	b9d5      	cbnz	r5, 800f3b4 <__sfp+0x64>
 800f37e:	4b16      	ldr	r3, [pc, #88]	; (800f3d8 <__sfp+0x88>)
 800f380:	60e3      	str	r3, [r4, #12]
 800f382:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f386:	6665      	str	r5, [r4, #100]	; 0x64
 800f388:	f000 fbba 	bl	800fb00 <__retarget_lock_init_recursive>
 800f38c:	f7ff ff96 	bl	800f2bc <__sfp_lock_release>
 800f390:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f394:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f398:	6025      	str	r5, [r4, #0]
 800f39a:	61a5      	str	r5, [r4, #24]
 800f39c:	2208      	movs	r2, #8
 800f39e:	4629      	mov	r1, r5
 800f3a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f3a4:	f7fc ff76 	bl	800c294 <memset>
 800f3a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f3ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f3b0:	4620      	mov	r0, r4
 800f3b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3b4:	3468      	adds	r4, #104	; 0x68
 800f3b6:	e7d9      	b.n	800f36c <__sfp+0x1c>
 800f3b8:	2104      	movs	r1, #4
 800f3ba:	4638      	mov	r0, r7
 800f3bc:	f7ff ff62 	bl	800f284 <__sfmoreglue>
 800f3c0:	4604      	mov	r4, r0
 800f3c2:	6030      	str	r0, [r6, #0]
 800f3c4:	2800      	cmp	r0, #0
 800f3c6:	d1d5      	bne.n	800f374 <__sfp+0x24>
 800f3c8:	f7ff ff78 	bl	800f2bc <__sfp_lock_release>
 800f3cc:	230c      	movs	r3, #12
 800f3ce:	603b      	str	r3, [r7, #0]
 800f3d0:	e7ee      	b.n	800f3b0 <__sfp+0x60>
 800f3d2:	bf00      	nop
 800f3d4:	08012be4 	.word	0x08012be4
 800f3d8:	ffff0001 	.word	0xffff0001

0800f3dc <_fwalk_reent>:
 800f3dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3e0:	4606      	mov	r6, r0
 800f3e2:	4688      	mov	r8, r1
 800f3e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f3e8:	2700      	movs	r7, #0
 800f3ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f3ee:	f1b9 0901 	subs.w	r9, r9, #1
 800f3f2:	d505      	bpl.n	800f400 <_fwalk_reent+0x24>
 800f3f4:	6824      	ldr	r4, [r4, #0]
 800f3f6:	2c00      	cmp	r4, #0
 800f3f8:	d1f7      	bne.n	800f3ea <_fwalk_reent+0xe>
 800f3fa:	4638      	mov	r0, r7
 800f3fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f400:	89ab      	ldrh	r3, [r5, #12]
 800f402:	2b01      	cmp	r3, #1
 800f404:	d907      	bls.n	800f416 <_fwalk_reent+0x3a>
 800f406:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f40a:	3301      	adds	r3, #1
 800f40c:	d003      	beq.n	800f416 <_fwalk_reent+0x3a>
 800f40e:	4629      	mov	r1, r5
 800f410:	4630      	mov	r0, r6
 800f412:	47c0      	blx	r8
 800f414:	4307      	orrs	r7, r0
 800f416:	3568      	adds	r5, #104	; 0x68
 800f418:	e7e9      	b.n	800f3ee <_fwalk_reent+0x12>

0800f41a <rshift>:
 800f41a:	6903      	ldr	r3, [r0, #16]
 800f41c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f424:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f428:	f100 0414 	add.w	r4, r0, #20
 800f42c:	dd45      	ble.n	800f4ba <rshift+0xa0>
 800f42e:	f011 011f 	ands.w	r1, r1, #31
 800f432:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f436:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f43a:	d10c      	bne.n	800f456 <rshift+0x3c>
 800f43c:	f100 0710 	add.w	r7, r0, #16
 800f440:	4629      	mov	r1, r5
 800f442:	42b1      	cmp	r1, r6
 800f444:	d334      	bcc.n	800f4b0 <rshift+0x96>
 800f446:	1a9b      	subs	r3, r3, r2
 800f448:	009b      	lsls	r3, r3, #2
 800f44a:	1eea      	subs	r2, r5, #3
 800f44c:	4296      	cmp	r6, r2
 800f44e:	bf38      	it	cc
 800f450:	2300      	movcc	r3, #0
 800f452:	4423      	add	r3, r4
 800f454:	e015      	b.n	800f482 <rshift+0x68>
 800f456:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f45a:	f1c1 0820 	rsb	r8, r1, #32
 800f45e:	40cf      	lsrs	r7, r1
 800f460:	f105 0e04 	add.w	lr, r5, #4
 800f464:	46a1      	mov	r9, r4
 800f466:	4576      	cmp	r6, lr
 800f468:	46f4      	mov	ip, lr
 800f46a:	d815      	bhi.n	800f498 <rshift+0x7e>
 800f46c:	1a9a      	subs	r2, r3, r2
 800f46e:	0092      	lsls	r2, r2, #2
 800f470:	3a04      	subs	r2, #4
 800f472:	3501      	adds	r5, #1
 800f474:	42ae      	cmp	r6, r5
 800f476:	bf38      	it	cc
 800f478:	2200      	movcc	r2, #0
 800f47a:	18a3      	adds	r3, r4, r2
 800f47c:	50a7      	str	r7, [r4, r2]
 800f47e:	b107      	cbz	r7, 800f482 <rshift+0x68>
 800f480:	3304      	adds	r3, #4
 800f482:	1b1a      	subs	r2, r3, r4
 800f484:	42a3      	cmp	r3, r4
 800f486:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f48a:	bf08      	it	eq
 800f48c:	2300      	moveq	r3, #0
 800f48e:	6102      	str	r2, [r0, #16]
 800f490:	bf08      	it	eq
 800f492:	6143      	streq	r3, [r0, #20]
 800f494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f498:	f8dc c000 	ldr.w	ip, [ip]
 800f49c:	fa0c fc08 	lsl.w	ip, ip, r8
 800f4a0:	ea4c 0707 	orr.w	r7, ip, r7
 800f4a4:	f849 7b04 	str.w	r7, [r9], #4
 800f4a8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f4ac:	40cf      	lsrs	r7, r1
 800f4ae:	e7da      	b.n	800f466 <rshift+0x4c>
 800f4b0:	f851 cb04 	ldr.w	ip, [r1], #4
 800f4b4:	f847 cf04 	str.w	ip, [r7, #4]!
 800f4b8:	e7c3      	b.n	800f442 <rshift+0x28>
 800f4ba:	4623      	mov	r3, r4
 800f4bc:	e7e1      	b.n	800f482 <rshift+0x68>

0800f4be <__hexdig_fun>:
 800f4be:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f4c2:	2b09      	cmp	r3, #9
 800f4c4:	d802      	bhi.n	800f4cc <__hexdig_fun+0xe>
 800f4c6:	3820      	subs	r0, #32
 800f4c8:	b2c0      	uxtb	r0, r0
 800f4ca:	4770      	bx	lr
 800f4cc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f4d0:	2b05      	cmp	r3, #5
 800f4d2:	d801      	bhi.n	800f4d8 <__hexdig_fun+0x1a>
 800f4d4:	3847      	subs	r0, #71	; 0x47
 800f4d6:	e7f7      	b.n	800f4c8 <__hexdig_fun+0xa>
 800f4d8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f4dc:	2b05      	cmp	r3, #5
 800f4de:	d801      	bhi.n	800f4e4 <__hexdig_fun+0x26>
 800f4e0:	3827      	subs	r0, #39	; 0x27
 800f4e2:	e7f1      	b.n	800f4c8 <__hexdig_fun+0xa>
 800f4e4:	2000      	movs	r0, #0
 800f4e6:	4770      	bx	lr

0800f4e8 <__gethex>:
 800f4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4ec:	ed2d 8b02 	vpush	{d8}
 800f4f0:	b089      	sub	sp, #36	; 0x24
 800f4f2:	ee08 0a10 	vmov	s16, r0
 800f4f6:	9304      	str	r3, [sp, #16]
 800f4f8:	4bb4      	ldr	r3, [pc, #720]	; (800f7cc <__gethex+0x2e4>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	9301      	str	r3, [sp, #4]
 800f4fe:	4618      	mov	r0, r3
 800f500:	468b      	mov	fp, r1
 800f502:	4690      	mov	r8, r2
 800f504:	f7f0 fe74 	bl	80001f0 <strlen>
 800f508:	9b01      	ldr	r3, [sp, #4]
 800f50a:	f8db 2000 	ldr.w	r2, [fp]
 800f50e:	4403      	add	r3, r0
 800f510:	4682      	mov	sl, r0
 800f512:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f516:	9305      	str	r3, [sp, #20]
 800f518:	1c93      	adds	r3, r2, #2
 800f51a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f51e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f522:	32fe      	adds	r2, #254	; 0xfe
 800f524:	18d1      	adds	r1, r2, r3
 800f526:	461f      	mov	r7, r3
 800f528:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f52c:	9100      	str	r1, [sp, #0]
 800f52e:	2830      	cmp	r0, #48	; 0x30
 800f530:	d0f8      	beq.n	800f524 <__gethex+0x3c>
 800f532:	f7ff ffc4 	bl	800f4be <__hexdig_fun>
 800f536:	4604      	mov	r4, r0
 800f538:	2800      	cmp	r0, #0
 800f53a:	d13a      	bne.n	800f5b2 <__gethex+0xca>
 800f53c:	9901      	ldr	r1, [sp, #4]
 800f53e:	4652      	mov	r2, sl
 800f540:	4638      	mov	r0, r7
 800f542:	f7fd ff3d 	bl	800d3c0 <strncmp>
 800f546:	4605      	mov	r5, r0
 800f548:	2800      	cmp	r0, #0
 800f54a:	d168      	bne.n	800f61e <__gethex+0x136>
 800f54c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f550:	eb07 060a 	add.w	r6, r7, sl
 800f554:	f7ff ffb3 	bl	800f4be <__hexdig_fun>
 800f558:	2800      	cmp	r0, #0
 800f55a:	d062      	beq.n	800f622 <__gethex+0x13a>
 800f55c:	4633      	mov	r3, r6
 800f55e:	7818      	ldrb	r0, [r3, #0]
 800f560:	2830      	cmp	r0, #48	; 0x30
 800f562:	461f      	mov	r7, r3
 800f564:	f103 0301 	add.w	r3, r3, #1
 800f568:	d0f9      	beq.n	800f55e <__gethex+0x76>
 800f56a:	f7ff ffa8 	bl	800f4be <__hexdig_fun>
 800f56e:	2301      	movs	r3, #1
 800f570:	fab0 f480 	clz	r4, r0
 800f574:	0964      	lsrs	r4, r4, #5
 800f576:	4635      	mov	r5, r6
 800f578:	9300      	str	r3, [sp, #0]
 800f57a:	463a      	mov	r2, r7
 800f57c:	4616      	mov	r6, r2
 800f57e:	3201      	adds	r2, #1
 800f580:	7830      	ldrb	r0, [r6, #0]
 800f582:	f7ff ff9c 	bl	800f4be <__hexdig_fun>
 800f586:	2800      	cmp	r0, #0
 800f588:	d1f8      	bne.n	800f57c <__gethex+0x94>
 800f58a:	9901      	ldr	r1, [sp, #4]
 800f58c:	4652      	mov	r2, sl
 800f58e:	4630      	mov	r0, r6
 800f590:	f7fd ff16 	bl	800d3c0 <strncmp>
 800f594:	b980      	cbnz	r0, 800f5b8 <__gethex+0xd0>
 800f596:	b94d      	cbnz	r5, 800f5ac <__gethex+0xc4>
 800f598:	eb06 050a 	add.w	r5, r6, sl
 800f59c:	462a      	mov	r2, r5
 800f59e:	4616      	mov	r6, r2
 800f5a0:	3201      	adds	r2, #1
 800f5a2:	7830      	ldrb	r0, [r6, #0]
 800f5a4:	f7ff ff8b 	bl	800f4be <__hexdig_fun>
 800f5a8:	2800      	cmp	r0, #0
 800f5aa:	d1f8      	bne.n	800f59e <__gethex+0xb6>
 800f5ac:	1bad      	subs	r5, r5, r6
 800f5ae:	00ad      	lsls	r5, r5, #2
 800f5b0:	e004      	b.n	800f5bc <__gethex+0xd4>
 800f5b2:	2400      	movs	r4, #0
 800f5b4:	4625      	mov	r5, r4
 800f5b6:	e7e0      	b.n	800f57a <__gethex+0x92>
 800f5b8:	2d00      	cmp	r5, #0
 800f5ba:	d1f7      	bne.n	800f5ac <__gethex+0xc4>
 800f5bc:	7833      	ldrb	r3, [r6, #0]
 800f5be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f5c2:	2b50      	cmp	r3, #80	; 0x50
 800f5c4:	d13b      	bne.n	800f63e <__gethex+0x156>
 800f5c6:	7873      	ldrb	r3, [r6, #1]
 800f5c8:	2b2b      	cmp	r3, #43	; 0x2b
 800f5ca:	d02c      	beq.n	800f626 <__gethex+0x13e>
 800f5cc:	2b2d      	cmp	r3, #45	; 0x2d
 800f5ce:	d02e      	beq.n	800f62e <__gethex+0x146>
 800f5d0:	1c71      	adds	r1, r6, #1
 800f5d2:	f04f 0900 	mov.w	r9, #0
 800f5d6:	7808      	ldrb	r0, [r1, #0]
 800f5d8:	f7ff ff71 	bl	800f4be <__hexdig_fun>
 800f5dc:	1e43      	subs	r3, r0, #1
 800f5de:	b2db      	uxtb	r3, r3
 800f5e0:	2b18      	cmp	r3, #24
 800f5e2:	d82c      	bhi.n	800f63e <__gethex+0x156>
 800f5e4:	f1a0 0210 	sub.w	r2, r0, #16
 800f5e8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f5ec:	f7ff ff67 	bl	800f4be <__hexdig_fun>
 800f5f0:	1e43      	subs	r3, r0, #1
 800f5f2:	b2db      	uxtb	r3, r3
 800f5f4:	2b18      	cmp	r3, #24
 800f5f6:	d91d      	bls.n	800f634 <__gethex+0x14c>
 800f5f8:	f1b9 0f00 	cmp.w	r9, #0
 800f5fc:	d000      	beq.n	800f600 <__gethex+0x118>
 800f5fe:	4252      	negs	r2, r2
 800f600:	4415      	add	r5, r2
 800f602:	f8cb 1000 	str.w	r1, [fp]
 800f606:	b1e4      	cbz	r4, 800f642 <__gethex+0x15a>
 800f608:	9b00      	ldr	r3, [sp, #0]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	bf14      	ite	ne
 800f60e:	2700      	movne	r7, #0
 800f610:	2706      	moveq	r7, #6
 800f612:	4638      	mov	r0, r7
 800f614:	b009      	add	sp, #36	; 0x24
 800f616:	ecbd 8b02 	vpop	{d8}
 800f61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f61e:	463e      	mov	r6, r7
 800f620:	4625      	mov	r5, r4
 800f622:	2401      	movs	r4, #1
 800f624:	e7ca      	b.n	800f5bc <__gethex+0xd4>
 800f626:	f04f 0900 	mov.w	r9, #0
 800f62a:	1cb1      	adds	r1, r6, #2
 800f62c:	e7d3      	b.n	800f5d6 <__gethex+0xee>
 800f62e:	f04f 0901 	mov.w	r9, #1
 800f632:	e7fa      	b.n	800f62a <__gethex+0x142>
 800f634:	230a      	movs	r3, #10
 800f636:	fb03 0202 	mla	r2, r3, r2, r0
 800f63a:	3a10      	subs	r2, #16
 800f63c:	e7d4      	b.n	800f5e8 <__gethex+0x100>
 800f63e:	4631      	mov	r1, r6
 800f640:	e7df      	b.n	800f602 <__gethex+0x11a>
 800f642:	1bf3      	subs	r3, r6, r7
 800f644:	3b01      	subs	r3, #1
 800f646:	4621      	mov	r1, r4
 800f648:	2b07      	cmp	r3, #7
 800f64a:	dc0b      	bgt.n	800f664 <__gethex+0x17c>
 800f64c:	ee18 0a10 	vmov	r0, s16
 800f650:	f000 faf0 	bl	800fc34 <_Balloc>
 800f654:	4604      	mov	r4, r0
 800f656:	b940      	cbnz	r0, 800f66a <__gethex+0x182>
 800f658:	4b5d      	ldr	r3, [pc, #372]	; (800f7d0 <__gethex+0x2e8>)
 800f65a:	4602      	mov	r2, r0
 800f65c:	21de      	movs	r1, #222	; 0xde
 800f65e:	485d      	ldr	r0, [pc, #372]	; (800f7d4 <__gethex+0x2ec>)
 800f660:	f001 f944 	bl	80108ec <__assert_func>
 800f664:	3101      	adds	r1, #1
 800f666:	105b      	asrs	r3, r3, #1
 800f668:	e7ee      	b.n	800f648 <__gethex+0x160>
 800f66a:	f100 0914 	add.w	r9, r0, #20
 800f66e:	f04f 0b00 	mov.w	fp, #0
 800f672:	f1ca 0301 	rsb	r3, sl, #1
 800f676:	f8cd 9008 	str.w	r9, [sp, #8]
 800f67a:	f8cd b000 	str.w	fp, [sp]
 800f67e:	9306      	str	r3, [sp, #24]
 800f680:	42b7      	cmp	r7, r6
 800f682:	d340      	bcc.n	800f706 <__gethex+0x21e>
 800f684:	9802      	ldr	r0, [sp, #8]
 800f686:	9b00      	ldr	r3, [sp, #0]
 800f688:	f840 3b04 	str.w	r3, [r0], #4
 800f68c:	eba0 0009 	sub.w	r0, r0, r9
 800f690:	1080      	asrs	r0, r0, #2
 800f692:	0146      	lsls	r6, r0, #5
 800f694:	6120      	str	r0, [r4, #16]
 800f696:	4618      	mov	r0, r3
 800f698:	f000 fbbe 	bl	800fe18 <__hi0bits>
 800f69c:	1a30      	subs	r0, r6, r0
 800f69e:	f8d8 6000 	ldr.w	r6, [r8]
 800f6a2:	42b0      	cmp	r0, r6
 800f6a4:	dd63      	ble.n	800f76e <__gethex+0x286>
 800f6a6:	1b87      	subs	r7, r0, r6
 800f6a8:	4639      	mov	r1, r7
 800f6aa:	4620      	mov	r0, r4
 800f6ac:	f000 ff62 	bl	8010574 <__any_on>
 800f6b0:	4682      	mov	sl, r0
 800f6b2:	b1a8      	cbz	r0, 800f6e0 <__gethex+0x1f8>
 800f6b4:	1e7b      	subs	r3, r7, #1
 800f6b6:	1159      	asrs	r1, r3, #5
 800f6b8:	f003 021f 	and.w	r2, r3, #31
 800f6bc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f6c0:	f04f 0a01 	mov.w	sl, #1
 800f6c4:	fa0a f202 	lsl.w	r2, sl, r2
 800f6c8:	420a      	tst	r2, r1
 800f6ca:	d009      	beq.n	800f6e0 <__gethex+0x1f8>
 800f6cc:	4553      	cmp	r3, sl
 800f6ce:	dd05      	ble.n	800f6dc <__gethex+0x1f4>
 800f6d0:	1eb9      	subs	r1, r7, #2
 800f6d2:	4620      	mov	r0, r4
 800f6d4:	f000 ff4e 	bl	8010574 <__any_on>
 800f6d8:	2800      	cmp	r0, #0
 800f6da:	d145      	bne.n	800f768 <__gethex+0x280>
 800f6dc:	f04f 0a02 	mov.w	sl, #2
 800f6e0:	4639      	mov	r1, r7
 800f6e2:	4620      	mov	r0, r4
 800f6e4:	f7ff fe99 	bl	800f41a <rshift>
 800f6e8:	443d      	add	r5, r7
 800f6ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f6ee:	42ab      	cmp	r3, r5
 800f6f0:	da4c      	bge.n	800f78c <__gethex+0x2a4>
 800f6f2:	ee18 0a10 	vmov	r0, s16
 800f6f6:	4621      	mov	r1, r4
 800f6f8:	f000 fadc 	bl	800fcb4 <_Bfree>
 800f6fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f6fe:	2300      	movs	r3, #0
 800f700:	6013      	str	r3, [r2, #0]
 800f702:	27a3      	movs	r7, #163	; 0xa3
 800f704:	e785      	b.n	800f612 <__gethex+0x12a>
 800f706:	1e73      	subs	r3, r6, #1
 800f708:	9a05      	ldr	r2, [sp, #20]
 800f70a:	9303      	str	r3, [sp, #12]
 800f70c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f710:	4293      	cmp	r3, r2
 800f712:	d019      	beq.n	800f748 <__gethex+0x260>
 800f714:	f1bb 0f20 	cmp.w	fp, #32
 800f718:	d107      	bne.n	800f72a <__gethex+0x242>
 800f71a:	9b02      	ldr	r3, [sp, #8]
 800f71c:	9a00      	ldr	r2, [sp, #0]
 800f71e:	f843 2b04 	str.w	r2, [r3], #4
 800f722:	9302      	str	r3, [sp, #8]
 800f724:	2300      	movs	r3, #0
 800f726:	9300      	str	r3, [sp, #0]
 800f728:	469b      	mov	fp, r3
 800f72a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f72e:	f7ff fec6 	bl	800f4be <__hexdig_fun>
 800f732:	9b00      	ldr	r3, [sp, #0]
 800f734:	f000 000f 	and.w	r0, r0, #15
 800f738:	fa00 f00b 	lsl.w	r0, r0, fp
 800f73c:	4303      	orrs	r3, r0
 800f73e:	9300      	str	r3, [sp, #0]
 800f740:	f10b 0b04 	add.w	fp, fp, #4
 800f744:	9b03      	ldr	r3, [sp, #12]
 800f746:	e00d      	b.n	800f764 <__gethex+0x27c>
 800f748:	9b03      	ldr	r3, [sp, #12]
 800f74a:	9a06      	ldr	r2, [sp, #24]
 800f74c:	4413      	add	r3, r2
 800f74e:	42bb      	cmp	r3, r7
 800f750:	d3e0      	bcc.n	800f714 <__gethex+0x22c>
 800f752:	4618      	mov	r0, r3
 800f754:	9901      	ldr	r1, [sp, #4]
 800f756:	9307      	str	r3, [sp, #28]
 800f758:	4652      	mov	r2, sl
 800f75a:	f7fd fe31 	bl	800d3c0 <strncmp>
 800f75e:	9b07      	ldr	r3, [sp, #28]
 800f760:	2800      	cmp	r0, #0
 800f762:	d1d7      	bne.n	800f714 <__gethex+0x22c>
 800f764:	461e      	mov	r6, r3
 800f766:	e78b      	b.n	800f680 <__gethex+0x198>
 800f768:	f04f 0a03 	mov.w	sl, #3
 800f76c:	e7b8      	b.n	800f6e0 <__gethex+0x1f8>
 800f76e:	da0a      	bge.n	800f786 <__gethex+0x29e>
 800f770:	1a37      	subs	r7, r6, r0
 800f772:	4621      	mov	r1, r4
 800f774:	ee18 0a10 	vmov	r0, s16
 800f778:	463a      	mov	r2, r7
 800f77a:	f000 fcb7 	bl	80100ec <__lshift>
 800f77e:	1bed      	subs	r5, r5, r7
 800f780:	4604      	mov	r4, r0
 800f782:	f100 0914 	add.w	r9, r0, #20
 800f786:	f04f 0a00 	mov.w	sl, #0
 800f78a:	e7ae      	b.n	800f6ea <__gethex+0x202>
 800f78c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f790:	42a8      	cmp	r0, r5
 800f792:	dd72      	ble.n	800f87a <__gethex+0x392>
 800f794:	1b45      	subs	r5, r0, r5
 800f796:	42ae      	cmp	r6, r5
 800f798:	dc36      	bgt.n	800f808 <__gethex+0x320>
 800f79a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f79e:	2b02      	cmp	r3, #2
 800f7a0:	d02a      	beq.n	800f7f8 <__gethex+0x310>
 800f7a2:	2b03      	cmp	r3, #3
 800f7a4:	d02c      	beq.n	800f800 <__gethex+0x318>
 800f7a6:	2b01      	cmp	r3, #1
 800f7a8:	d11c      	bne.n	800f7e4 <__gethex+0x2fc>
 800f7aa:	42ae      	cmp	r6, r5
 800f7ac:	d11a      	bne.n	800f7e4 <__gethex+0x2fc>
 800f7ae:	2e01      	cmp	r6, #1
 800f7b0:	d112      	bne.n	800f7d8 <__gethex+0x2f0>
 800f7b2:	9a04      	ldr	r2, [sp, #16]
 800f7b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f7b8:	6013      	str	r3, [r2, #0]
 800f7ba:	2301      	movs	r3, #1
 800f7bc:	6123      	str	r3, [r4, #16]
 800f7be:	f8c9 3000 	str.w	r3, [r9]
 800f7c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f7c4:	2762      	movs	r7, #98	; 0x62
 800f7c6:	601c      	str	r4, [r3, #0]
 800f7c8:	e723      	b.n	800f612 <__gethex+0x12a>
 800f7ca:	bf00      	nop
 800f7cc:	08012dd0 	.word	0x08012dd0
 800f7d0:	08012cf7 	.word	0x08012cf7
 800f7d4:	08012d68 	.word	0x08012d68
 800f7d8:	1e71      	subs	r1, r6, #1
 800f7da:	4620      	mov	r0, r4
 800f7dc:	f000 feca 	bl	8010574 <__any_on>
 800f7e0:	2800      	cmp	r0, #0
 800f7e2:	d1e6      	bne.n	800f7b2 <__gethex+0x2ca>
 800f7e4:	ee18 0a10 	vmov	r0, s16
 800f7e8:	4621      	mov	r1, r4
 800f7ea:	f000 fa63 	bl	800fcb4 <_Bfree>
 800f7ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	6013      	str	r3, [r2, #0]
 800f7f4:	2750      	movs	r7, #80	; 0x50
 800f7f6:	e70c      	b.n	800f612 <__gethex+0x12a>
 800f7f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d1f2      	bne.n	800f7e4 <__gethex+0x2fc>
 800f7fe:	e7d8      	b.n	800f7b2 <__gethex+0x2ca>
 800f800:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f802:	2b00      	cmp	r3, #0
 800f804:	d1d5      	bne.n	800f7b2 <__gethex+0x2ca>
 800f806:	e7ed      	b.n	800f7e4 <__gethex+0x2fc>
 800f808:	1e6f      	subs	r7, r5, #1
 800f80a:	f1ba 0f00 	cmp.w	sl, #0
 800f80e:	d131      	bne.n	800f874 <__gethex+0x38c>
 800f810:	b127      	cbz	r7, 800f81c <__gethex+0x334>
 800f812:	4639      	mov	r1, r7
 800f814:	4620      	mov	r0, r4
 800f816:	f000 fead 	bl	8010574 <__any_on>
 800f81a:	4682      	mov	sl, r0
 800f81c:	117b      	asrs	r3, r7, #5
 800f81e:	2101      	movs	r1, #1
 800f820:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f824:	f007 071f 	and.w	r7, r7, #31
 800f828:	fa01 f707 	lsl.w	r7, r1, r7
 800f82c:	421f      	tst	r7, r3
 800f82e:	4629      	mov	r1, r5
 800f830:	4620      	mov	r0, r4
 800f832:	bf18      	it	ne
 800f834:	f04a 0a02 	orrne.w	sl, sl, #2
 800f838:	1b76      	subs	r6, r6, r5
 800f83a:	f7ff fdee 	bl	800f41a <rshift>
 800f83e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f842:	2702      	movs	r7, #2
 800f844:	f1ba 0f00 	cmp.w	sl, #0
 800f848:	d048      	beq.n	800f8dc <__gethex+0x3f4>
 800f84a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f84e:	2b02      	cmp	r3, #2
 800f850:	d015      	beq.n	800f87e <__gethex+0x396>
 800f852:	2b03      	cmp	r3, #3
 800f854:	d017      	beq.n	800f886 <__gethex+0x39e>
 800f856:	2b01      	cmp	r3, #1
 800f858:	d109      	bne.n	800f86e <__gethex+0x386>
 800f85a:	f01a 0f02 	tst.w	sl, #2
 800f85e:	d006      	beq.n	800f86e <__gethex+0x386>
 800f860:	f8d9 0000 	ldr.w	r0, [r9]
 800f864:	ea4a 0a00 	orr.w	sl, sl, r0
 800f868:	f01a 0f01 	tst.w	sl, #1
 800f86c:	d10e      	bne.n	800f88c <__gethex+0x3a4>
 800f86e:	f047 0710 	orr.w	r7, r7, #16
 800f872:	e033      	b.n	800f8dc <__gethex+0x3f4>
 800f874:	f04f 0a01 	mov.w	sl, #1
 800f878:	e7d0      	b.n	800f81c <__gethex+0x334>
 800f87a:	2701      	movs	r7, #1
 800f87c:	e7e2      	b.n	800f844 <__gethex+0x35c>
 800f87e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f880:	f1c3 0301 	rsb	r3, r3, #1
 800f884:	9315      	str	r3, [sp, #84]	; 0x54
 800f886:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d0f0      	beq.n	800f86e <__gethex+0x386>
 800f88c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f890:	f104 0314 	add.w	r3, r4, #20
 800f894:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f898:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f89c:	f04f 0c00 	mov.w	ip, #0
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8a6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800f8aa:	d01c      	beq.n	800f8e6 <__gethex+0x3fe>
 800f8ac:	3201      	adds	r2, #1
 800f8ae:	6002      	str	r2, [r0, #0]
 800f8b0:	2f02      	cmp	r7, #2
 800f8b2:	f104 0314 	add.w	r3, r4, #20
 800f8b6:	d13f      	bne.n	800f938 <__gethex+0x450>
 800f8b8:	f8d8 2000 	ldr.w	r2, [r8]
 800f8bc:	3a01      	subs	r2, #1
 800f8be:	42b2      	cmp	r2, r6
 800f8c0:	d10a      	bne.n	800f8d8 <__gethex+0x3f0>
 800f8c2:	1171      	asrs	r1, r6, #5
 800f8c4:	2201      	movs	r2, #1
 800f8c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f8ca:	f006 061f 	and.w	r6, r6, #31
 800f8ce:	fa02 f606 	lsl.w	r6, r2, r6
 800f8d2:	421e      	tst	r6, r3
 800f8d4:	bf18      	it	ne
 800f8d6:	4617      	movne	r7, r2
 800f8d8:	f047 0720 	orr.w	r7, r7, #32
 800f8dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f8de:	601c      	str	r4, [r3, #0]
 800f8e0:	9b04      	ldr	r3, [sp, #16]
 800f8e2:	601d      	str	r5, [r3, #0]
 800f8e4:	e695      	b.n	800f612 <__gethex+0x12a>
 800f8e6:	4299      	cmp	r1, r3
 800f8e8:	f843 cc04 	str.w	ip, [r3, #-4]
 800f8ec:	d8d8      	bhi.n	800f8a0 <__gethex+0x3b8>
 800f8ee:	68a3      	ldr	r3, [r4, #8]
 800f8f0:	459b      	cmp	fp, r3
 800f8f2:	db19      	blt.n	800f928 <__gethex+0x440>
 800f8f4:	6861      	ldr	r1, [r4, #4]
 800f8f6:	ee18 0a10 	vmov	r0, s16
 800f8fa:	3101      	adds	r1, #1
 800f8fc:	f000 f99a 	bl	800fc34 <_Balloc>
 800f900:	4681      	mov	r9, r0
 800f902:	b918      	cbnz	r0, 800f90c <__gethex+0x424>
 800f904:	4b1a      	ldr	r3, [pc, #104]	; (800f970 <__gethex+0x488>)
 800f906:	4602      	mov	r2, r0
 800f908:	2184      	movs	r1, #132	; 0x84
 800f90a:	e6a8      	b.n	800f65e <__gethex+0x176>
 800f90c:	6922      	ldr	r2, [r4, #16]
 800f90e:	3202      	adds	r2, #2
 800f910:	f104 010c 	add.w	r1, r4, #12
 800f914:	0092      	lsls	r2, r2, #2
 800f916:	300c      	adds	r0, #12
 800f918:	f7fc fcae 	bl	800c278 <memcpy>
 800f91c:	4621      	mov	r1, r4
 800f91e:	ee18 0a10 	vmov	r0, s16
 800f922:	f000 f9c7 	bl	800fcb4 <_Bfree>
 800f926:	464c      	mov	r4, r9
 800f928:	6923      	ldr	r3, [r4, #16]
 800f92a:	1c5a      	adds	r2, r3, #1
 800f92c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f930:	6122      	str	r2, [r4, #16]
 800f932:	2201      	movs	r2, #1
 800f934:	615a      	str	r2, [r3, #20]
 800f936:	e7bb      	b.n	800f8b0 <__gethex+0x3c8>
 800f938:	6922      	ldr	r2, [r4, #16]
 800f93a:	455a      	cmp	r2, fp
 800f93c:	dd0b      	ble.n	800f956 <__gethex+0x46e>
 800f93e:	2101      	movs	r1, #1
 800f940:	4620      	mov	r0, r4
 800f942:	f7ff fd6a 	bl	800f41a <rshift>
 800f946:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f94a:	3501      	adds	r5, #1
 800f94c:	42ab      	cmp	r3, r5
 800f94e:	f6ff aed0 	blt.w	800f6f2 <__gethex+0x20a>
 800f952:	2701      	movs	r7, #1
 800f954:	e7c0      	b.n	800f8d8 <__gethex+0x3f0>
 800f956:	f016 061f 	ands.w	r6, r6, #31
 800f95a:	d0fa      	beq.n	800f952 <__gethex+0x46a>
 800f95c:	4453      	add	r3, sl
 800f95e:	f1c6 0620 	rsb	r6, r6, #32
 800f962:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f966:	f000 fa57 	bl	800fe18 <__hi0bits>
 800f96a:	42b0      	cmp	r0, r6
 800f96c:	dbe7      	blt.n	800f93e <__gethex+0x456>
 800f96e:	e7f0      	b.n	800f952 <__gethex+0x46a>
 800f970:	08012cf7 	.word	0x08012cf7

0800f974 <L_shift>:
 800f974:	f1c2 0208 	rsb	r2, r2, #8
 800f978:	0092      	lsls	r2, r2, #2
 800f97a:	b570      	push	{r4, r5, r6, lr}
 800f97c:	f1c2 0620 	rsb	r6, r2, #32
 800f980:	6843      	ldr	r3, [r0, #4]
 800f982:	6804      	ldr	r4, [r0, #0]
 800f984:	fa03 f506 	lsl.w	r5, r3, r6
 800f988:	432c      	orrs	r4, r5
 800f98a:	40d3      	lsrs	r3, r2
 800f98c:	6004      	str	r4, [r0, #0]
 800f98e:	f840 3f04 	str.w	r3, [r0, #4]!
 800f992:	4288      	cmp	r0, r1
 800f994:	d3f4      	bcc.n	800f980 <L_shift+0xc>
 800f996:	bd70      	pop	{r4, r5, r6, pc}

0800f998 <__match>:
 800f998:	b530      	push	{r4, r5, lr}
 800f99a:	6803      	ldr	r3, [r0, #0]
 800f99c:	3301      	adds	r3, #1
 800f99e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f9a2:	b914      	cbnz	r4, 800f9aa <__match+0x12>
 800f9a4:	6003      	str	r3, [r0, #0]
 800f9a6:	2001      	movs	r0, #1
 800f9a8:	bd30      	pop	{r4, r5, pc}
 800f9aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f9ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f9b2:	2d19      	cmp	r5, #25
 800f9b4:	bf98      	it	ls
 800f9b6:	3220      	addls	r2, #32
 800f9b8:	42a2      	cmp	r2, r4
 800f9ba:	d0f0      	beq.n	800f99e <__match+0x6>
 800f9bc:	2000      	movs	r0, #0
 800f9be:	e7f3      	b.n	800f9a8 <__match+0x10>

0800f9c0 <__hexnan>:
 800f9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9c4:	680b      	ldr	r3, [r1, #0]
 800f9c6:	115e      	asrs	r6, r3, #5
 800f9c8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f9cc:	f013 031f 	ands.w	r3, r3, #31
 800f9d0:	b087      	sub	sp, #28
 800f9d2:	bf18      	it	ne
 800f9d4:	3604      	addne	r6, #4
 800f9d6:	2500      	movs	r5, #0
 800f9d8:	1f37      	subs	r7, r6, #4
 800f9da:	4690      	mov	r8, r2
 800f9dc:	6802      	ldr	r2, [r0, #0]
 800f9de:	9301      	str	r3, [sp, #4]
 800f9e0:	4682      	mov	sl, r0
 800f9e2:	f846 5c04 	str.w	r5, [r6, #-4]
 800f9e6:	46b9      	mov	r9, r7
 800f9e8:	463c      	mov	r4, r7
 800f9ea:	9502      	str	r5, [sp, #8]
 800f9ec:	46ab      	mov	fp, r5
 800f9ee:	7851      	ldrb	r1, [r2, #1]
 800f9f0:	1c53      	adds	r3, r2, #1
 800f9f2:	9303      	str	r3, [sp, #12]
 800f9f4:	b341      	cbz	r1, 800fa48 <__hexnan+0x88>
 800f9f6:	4608      	mov	r0, r1
 800f9f8:	9205      	str	r2, [sp, #20]
 800f9fa:	9104      	str	r1, [sp, #16]
 800f9fc:	f7ff fd5f 	bl	800f4be <__hexdig_fun>
 800fa00:	2800      	cmp	r0, #0
 800fa02:	d14f      	bne.n	800faa4 <__hexnan+0xe4>
 800fa04:	9904      	ldr	r1, [sp, #16]
 800fa06:	9a05      	ldr	r2, [sp, #20]
 800fa08:	2920      	cmp	r1, #32
 800fa0a:	d818      	bhi.n	800fa3e <__hexnan+0x7e>
 800fa0c:	9b02      	ldr	r3, [sp, #8]
 800fa0e:	459b      	cmp	fp, r3
 800fa10:	dd13      	ble.n	800fa3a <__hexnan+0x7a>
 800fa12:	454c      	cmp	r4, r9
 800fa14:	d206      	bcs.n	800fa24 <__hexnan+0x64>
 800fa16:	2d07      	cmp	r5, #7
 800fa18:	dc04      	bgt.n	800fa24 <__hexnan+0x64>
 800fa1a:	462a      	mov	r2, r5
 800fa1c:	4649      	mov	r1, r9
 800fa1e:	4620      	mov	r0, r4
 800fa20:	f7ff ffa8 	bl	800f974 <L_shift>
 800fa24:	4544      	cmp	r4, r8
 800fa26:	d950      	bls.n	800faca <__hexnan+0x10a>
 800fa28:	2300      	movs	r3, #0
 800fa2a:	f1a4 0904 	sub.w	r9, r4, #4
 800fa2e:	f844 3c04 	str.w	r3, [r4, #-4]
 800fa32:	f8cd b008 	str.w	fp, [sp, #8]
 800fa36:	464c      	mov	r4, r9
 800fa38:	461d      	mov	r5, r3
 800fa3a:	9a03      	ldr	r2, [sp, #12]
 800fa3c:	e7d7      	b.n	800f9ee <__hexnan+0x2e>
 800fa3e:	2929      	cmp	r1, #41	; 0x29
 800fa40:	d156      	bne.n	800faf0 <__hexnan+0x130>
 800fa42:	3202      	adds	r2, #2
 800fa44:	f8ca 2000 	str.w	r2, [sl]
 800fa48:	f1bb 0f00 	cmp.w	fp, #0
 800fa4c:	d050      	beq.n	800faf0 <__hexnan+0x130>
 800fa4e:	454c      	cmp	r4, r9
 800fa50:	d206      	bcs.n	800fa60 <__hexnan+0xa0>
 800fa52:	2d07      	cmp	r5, #7
 800fa54:	dc04      	bgt.n	800fa60 <__hexnan+0xa0>
 800fa56:	462a      	mov	r2, r5
 800fa58:	4649      	mov	r1, r9
 800fa5a:	4620      	mov	r0, r4
 800fa5c:	f7ff ff8a 	bl	800f974 <L_shift>
 800fa60:	4544      	cmp	r4, r8
 800fa62:	d934      	bls.n	800face <__hexnan+0x10e>
 800fa64:	f1a8 0204 	sub.w	r2, r8, #4
 800fa68:	4623      	mov	r3, r4
 800fa6a:	f853 1b04 	ldr.w	r1, [r3], #4
 800fa6e:	f842 1f04 	str.w	r1, [r2, #4]!
 800fa72:	429f      	cmp	r7, r3
 800fa74:	d2f9      	bcs.n	800fa6a <__hexnan+0xaa>
 800fa76:	1b3b      	subs	r3, r7, r4
 800fa78:	f023 0303 	bic.w	r3, r3, #3
 800fa7c:	3304      	adds	r3, #4
 800fa7e:	3401      	adds	r4, #1
 800fa80:	3e03      	subs	r6, #3
 800fa82:	42b4      	cmp	r4, r6
 800fa84:	bf88      	it	hi
 800fa86:	2304      	movhi	r3, #4
 800fa88:	4443      	add	r3, r8
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	f843 2b04 	str.w	r2, [r3], #4
 800fa90:	429f      	cmp	r7, r3
 800fa92:	d2fb      	bcs.n	800fa8c <__hexnan+0xcc>
 800fa94:	683b      	ldr	r3, [r7, #0]
 800fa96:	b91b      	cbnz	r3, 800faa0 <__hexnan+0xe0>
 800fa98:	4547      	cmp	r7, r8
 800fa9a:	d127      	bne.n	800faec <__hexnan+0x12c>
 800fa9c:	2301      	movs	r3, #1
 800fa9e:	603b      	str	r3, [r7, #0]
 800faa0:	2005      	movs	r0, #5
 800faa2:	e026      	b.n	800faf2 <__hexnan+0x132>
 800faa4:	3501      	adds	r5, #1
 800faa6:	2d08      	cmp	r5, #8
 800faa8:	f10b 0b01 	add.w	fp, fp, #1
 800faac:	dd06      	ble.n	800fabc <__hexnan+0xfc>
 800faae:	4544      	cmp	r4, r8
 800fab0:	d9c3      	bls.n	800fa3a <__hexnan+0x7a>
 800fab2:	2300      	movs	r3, #0
 800fab4:	f844 3c04 	str.w	r3, [r4, #-4]
 800fab8:	2501      	movs	r5, #1
 800faba:	3c04      	subs	r4, #4
 800fabc:	6822      	ldr	r2, [r4, #0]
 800fabe:	f000 000f 	and.w	r0, r0, #15
 800fac2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800fac6:	6022      	str	r2, [r4, #0]
 800fac8:	e7b7      	b.n	800fa3a <__hexnan+0x7a>
 800faca:	2508      	movs	r5, #8
 800facc:	e7b5      	b.n	800fa3a <__hexnan+0x7a>
 800face:	9b01      	ldr	r3, [sp, #4]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d0df      	beq.n	800fa94 <__hexnan+0xd4>
 800fad4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fad8:	f1c3 0320 	rsb	r3, r3, #32
 800fadc:	fa22 f303 	lsr.w	r3, r2, r3
 800fae0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fae4:	401a      	ands	r2, r3
 800fae6:	f846 2c04 	str.w	r2, [r6, #-4]
 800faea:	e7d3      	b.n	800fa94 <__hexnan+0xd4>
 800faec:	3f04      	subs	r7, #4
 800faee:	e7d1      	b.n	800fa94 <__hexnan+0xd4>
 800faf0:	2004      	movs	r0, #4
 800faf2:	b007      	add	sp, #28
 800faf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800faf8 <_localeconv_r>:
 800faf8:	4800      	ldr	r0, [pc, #0]	; (800fafc <_localeconv_r+0x4>)
 800fafa:	4770      	bx	lr
 800fafc:	200002d0 	.word	0x200002d0

0800fb00 <__retarget_lock_init_recursive>:
 800fb00:	4770      	bx	lr

0800fb02 <__retarget_lock_acquire_recursive>:
 800fb02:	4770      	bx	lr

0800fb04 <__retarget_lock_release_recursive>:
 800fb04:	4770      	bx	lr
	...

0800fb08 <_lseek_r>:
 800fb08:	b538      	push	{r3, r4, r5, lr}
 800fb0a:	4d07      	ldr	r5, [pc, #28]	; (800fb28 <_lseek_r+0x20>)
 800fb0c:	4604      	mov	r4, r0
 800fb0e:	4608      	mov	r0, r1
 800fb10:	4611      	mov	r1, r2
 800fb12:	2200      	movs	r2, #0
 800fb14:	602a      	str	r2, [r5, #0]
 800fb16:	461a      	mov	r2, r3
 800fb18:	f7f4 ff2e 	bl	8004978 <_lseek>
 800fb1c:	1c43      	adds	r3, r0, #1
 800fb1e:	d102      	bne.n	800fb26 <_lseek_r+0x1e>
 800fb20:	682b      	ldr	r3, [r5, #0]
 800fb22:	b103      	cbz	r3, 800fb26 <_lseek_r+0x1e>
 800fb24:	6023      	str	r3, [r4, #0]
 800fb26:	bd38      	pop	{r3, r4, r5, pc}
 800fb28:	200025f8 	.word	0x200025f8

0800fb2c <__swhatbuf_r>:
 800fb2c:	b570      	push	{r4, r5, r6, lr}
 800fb2e:	460e      	mov	r6, r1
 800fb30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb34:	2900      	cmp	r1, #0
 800fb36:	b096      	sub	sp, #88	; 0x58
 800fb38:	4614      	mov	r4, r2
 800fb3a:	461d      	mov	r5, r3
 800fb3c:	da08      	bge.n	800fb50 <__swhatbuf_r+0x24>
 800fb3e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fb42:	2200      	movs	r2, #0
 800fb44:	602a      	str	r2, [r5, #0]
 800fb46:	061a      	lsls	r2, r3, #24
 800fb48:	d410      	bmi.n	800fb6c <__swhatbuf_r+0x40>
 800fb4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fb4e:	e00e      	b.n	800fb6e <__swhatbuf_r+0x42>
 800fb50:	466a      	mov	r2, sp
 800fb52:	f000 fefb 	bl	801094c <_fstat_r>
 800fb56:	2800      	cmp	r0, #0
 800fb58:	dbf1      	blt.n	800fb3e <__swhatbuf_r+0x12>
 800fb5a:	9a01      	ldr	r2, [sp, #4]
 800fb5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fb60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fb64:	425a      	negs	r2, r3
 800fb66:	415a      	adcs	r2, r3
 800fb68:	602a      	str	r2, [r5, #0]
 800fb6a:	e7ee      	b.n	800fb4a <__swhatbuf_r+0x1e>
 800fb6c:	2340      	movs	r3, #64	; 0x40
 800fb6e:	2000      	movs	r0, #0
 800fb70:	6023      	str	r3, [r4, #0]
 800fb72:	b016      	add	sp, #88	; 0x58
 800fb74:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fb78 <__smakebuf_r>:
 800fb78:	898b      	ldrh	r3, [r1, #12]
 800fb7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fb7c:	079d      	lsls	r5, r3, #30
 800fb7e:	4606      	mov	r6, r0
 800fb80:	460c      	mov	r4, r1
 800fb82:	d507      	bpl.n	800fb94 <__smakebuf_r+0x1c>
 800fb84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fb88:	6023      	str	r3, [r4, #0]
 800fb8a:	6123      	str	r3, [r4, #16]
 800fb8c:	2301      	movs	r3, #1
 800fb8e:	6163      	str	r3, [r4, #20]
 800fb90:	b002      	add	sp, #8
 800fb92:	bd70      	pop	{r4, r5, r6, pc}
 800fb94:	ab01      	add	r3, sp, #4
 800fb96:	466a      	mov	r2, sp
 800fb98:	f7ff ffc8 	bl	800fb2c <__swhatbuf_r>
 800fb9c:	9900      	ldr	r1, [sp, #0]
 800fb9e:	4605      	mov	r5, r0
 800fba0:	4630      	mov	r0, r6
 800fba2:	f7fc fbeb 	bl	800c37c <_malloc_r>
 800fba6:	b948      	cbnz	r0, 800fbbc <__smakebuf_r+0x44>
 800fba8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbac:	059a      	lsls	r2, r3, #22
 800fbae:	d4ef      	bmi.n	800fb90 <__smakebuf_r+0x18>
 800fbb0:	f023 0303 	bic.w	r3, r3, #3
 800fbb4:	f043 0302 	orr.w	r3, r3, #2
 800fbb8:	81a3      	strh	r3, [r4, #12]
 800fbba:	e7e3      	b.n	800fb84 <__smakebuf_r+0xc>
 800fbbc:	4b0d      	ldr	r3, [pc, #52]	; (800fbf4 <__smakebuf_r+0x7c>)
 800fbbe:	62b3      	str	r3, [r6, #40]	; 0x28
 800fbc0:	89a3      	ldrh	r3, [r4, #12]
 800fbc2:	6020      	str	r0, [r4, #0]
 800fbc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fbc8:	81a3      	strh	r3, [r4, #12]
 800fbca:	9b00      	ldr	r3, [sp, #0]
 800fbcc:	6163      	str	r3, [r4, #20]
 800fbce:	9b01      	ldr	r3, [sp, #4]
 800fbd0:	6120      	str	r0, [r4, #16]
 800fbd2:	b15b      	cbz	r3, 800fbec <__smakebuf_r+0x74>
 800fbd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fbd8:	4630      	mov	r0, r6
 800fbda:	f000 fec9 	bl	8010970 <_isatty_r>
 800fbde:	b128      	cbz	r0, 800fbec <__smakebuf_r+0x74>
 800fbe0:	89a3      	ldrh	r3, [r4, #12]
 800fbe2:	f023 0303 	bic.w	r3, r3, #3
 800fbe6:	f043 0301 	orr.w	r3, r3, #1
 800fbea:	81a3      	strh	r3, [r4, #12]
 800fbec:	89a0      	ldrh	r0, [r4, #12]
 800fbee:	4305      	orrs	r5, r0
 800fbf0:	81a5      	strh	r5, [r4, #12]
 800fbf2:	e7cd      	b.n	800fb90 <__smakebuf_r+0x18>
 800fbf4:	0800f279 	.word	0x0800f279

0800fbf8 <__ascii_mbtowc>:
 800fbf8:	b082      	sub	sp, #8
 800fbfa:	b901      	cbnz	r1, 800fbfe <__ascii_mbtowc+0x6>
 800fbfc:	a901      	add	r1, sp, #4
 800fbfe:	b142      	cbz	r2, 800fc12 <__ascii_mbtowc+0x1a>
 800fc00:	b14b      	cbz	r3, 800fc16 <__ascii_mbtowc+0x1e>
 800fc02:	7813      	ldrb	r3, [r2, #0]
 800fc04:	600b      	str	r3, [r1, #0]
 800fc06:	7812      	ldrb	r2, [r2, #0]
 800fc08:	1e10      	subs	r0, r2, #0
 800fc0a:	bf18      	it	ne
 800fc0c:	2001      	movne	r0, #1
 800fc0e:	b002      	add	sp, #8
 800fc10:	4770      	bx	lr
 800fc12:	4610      	mov	r0, r2
 800fc14:	e7fb      	b.n	800fc0e <__ascii_mbtowc+0x16>
 800fc16:	f06f 0001 	mvn.w	r0, #1
 800fc1a:	e7f8      	b.n	800fc0e <__ascii_mbtowc+0x16>

0800fc1c <__malloc_lock>:
 800fc1c:	4801      	ldr	r0, [pc, #4]	; (800fc24 <__malloc_lock+0x8>)
 800fc1e:	f7ff bf70 	b.w	800fb02 <__retarget_lock_acquire_recursive>
 800fc22:	bf00      	nop
 800fc24:	200025f4 	.word	0x200025f4

0800fc28 <__malloc_unlock>:
 800fc28:	4801      	ldr	r0, [pc, #4]	; (800fc30 <__malloc_unlock+0x8>)
 800fc2a:	f7ff bf6b 	b.w	800fb04 <__retarget_lock_release_recursive>
 800fc2e:	bf00      	nop
 800fc30:	200025f4 	.word	0x200025f4

0800fc34 <_Balloc>:
 800fc34:	b570      	push	{r4, r5, r6, lr}
 800fc36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fc38:	4604      	mov	r4, r0
 800fc3a:	460d      	mov	r5, r1
 800fc3c:	b976      	cbnz	r6, 800fc5c <_Balloc+0x28>
 800fc3e:	2010      	movs	r0, #16
 800fc40:	f7fc fb0a 	bl	800c258 <malloc>
 800fc44:	4602      	mov	r2, r0
 800fc46:	6260      	str	r0, [r4, #36]	; 0x24
 800fc48:	b920      	cbnz	r0, 800fc54 <_Balloc+0x20>
 800fc4a:	4b18      	ldr	r3, [pc, #96]	; (800fcac <_Balloc+0x78>)
 800fc4c:	4818      	ldr	r0, [pc, #96]	; (800fcb0 <_Balloc+0x7c>)
 800fc4e:	2166      	movs	r1, #102	; 0x66
 800fc50:	f000 fe4c 	bl	80108ec <__assert_func>
 800fc54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fc58:	6006      	str	r6, [r0, #0]
 800fc5a:	60c6      	str	r6, [r0, #12]
 800fc5c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fc5e:	68f3      	ldr	r3, [r6, #12]
 800fc60:	b183      	cbz	r3, 800fc84 <_Balloc+0x50>
 800fc62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc64:	68db      	ldr	r3, [r3, #12]
 800fc66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fc6a:	b9b8      	cbnz	r0, 800fc9c <_Balloc+0x68>
 800fc6c:	2101      	movs	r1, #1
 800fc6e:	fa01 f605 	lsl.w	r6, r1, r5
 800fc72:	1d72      	adds	r2, r6, #5
 800fc74:	0092      	lsls	r2, r2, #2
 800fc76:	4620      	mov	r0, r4
 800fc78:	f000 fc9d 	bl	80105b6 <_calloc_r>
 800fc7c:	b160      	cbz	r0, 800fc98 <_Balloc+0x64>
 800fc7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fc82:	e00e      	b.n	800fca2 <_Balloc+0x6e>
 800fc84:	2221      	movs	r2, #33	; 0x21
 800fc86:	2104      	movs	r1, #4
 800fc88:	4620      	mov	r0, r4
 800fc8a:	f000 fc94 	bl	80105b6 <_calloc_r>
 800fc8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc90:	60f0      	str	r0, [r6, #12]
 800fc92:	68db      	ldr	r3, [r3, #12]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d1e4      	bne.n	800fc62 <_Balloc+0x2e>
 800fc98:	2000      	movs	r0, #0
 800fc9a:	bd70      	pop	{r4, r5, r6, pc}
 800fc9c:	6802      	ldr	r2, [r0, #0]
 800fc9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fca2:	2300      	movs	r3, #0
 800fca4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fca8:	e7f7      	b.n	800fc9a <_Balloc+0x66>
 800fcaa:	bf00      	nop
 800fcac:	08012c85 	.word	0x08012c85
 800fcb0:	08012de4 	.word	0x08012de4

0800fcb4 <_Bfree>:
 800fcb4:	b570      	push	{r4, r5, r6, lr}
 800fcb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fcb8:	4605      	mov	r5, r0
 800fcba:	460c      	mov	r4, r1
 800fcbc:	b976      	cbnz	r6, 800fcdc <_Bfree+0x28>
 800fcbe:	2010      	movs	r0, #16
 800fcc0:	f7fc faca 	bl	800c258 <malloc>
 800fcc4:	4602      	mov	r2, r0
 800fcc6:	6268      	str	r0, [r5, #36]	; 0x24
 800fcc8:	b920      	cbnz	r0, 800fcd4 <_Bfree+0x20>
 800fcca:	4b09      	ldr	r3, [pc, #36]	; (800fcf0 <_Bfree+0x3c>)
 800fccc:	4809      	ldr	r0, [pc, #36]	; (800fcf4 <_Bfree+0x40>)
 800fcce:	218a      	movs	r1, #138	; 0x8a
 800fcd0:	f000 fe0c 	bl	80108ec <__assert_func>
 800fcd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fcd8:	6006      	str	r6, [r0, #0]
 800fcda:	60c6      	str	r6, [r0, #12]
 800fcdc:	b13c      	cbz	r4, 800fcee <_Bfree+0x3a>
 800fcde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fce0:	6862      	ldr	r2, [r4, #4]
 800fce2:	68db      	ldr	r3, [r3, #12]
 800fce4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fce8:	6021      	str	r1, [r4, #0]
 800fcea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fcee:	bd70      	pop	{r4, r5, r6, pc}
 800fcf0:	08012c85 	.word	0x08012c85
 800fcf4:	08012de4 	.word	0x08012de4

0800fcf8 <__multadd>:
 800fcf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcfc:	690d      	ldr	r5, [r1, #16]
 800fcfe:	4607      	mov	r7, r0
 800fd00:	460c      	mov	r4, r1
 800fd02:	461e      	mov	r6, r3
 800fd04:	f101 0c14 	add.w	ip, r1, #20
 800fd08:	2000      	movs	r0, #0
 800fd0a:	f8dc 3000 	ldr.w	r3, [ip]
 800fd0e:	b299      	uxth	r1, r3
 800fd10:	fb02 6101 	mla	r1, r2, r1, r6
 800fd14:	0c1e      	lsrs	r6, r3, #16
 800fd16:	0c0b      	lsrs	r3, r1, #16
 800fd18:	fb02 3306 	mla	r3, r2, r6, r3
 800fd1c:	b289      	uxth	r1, r1
 800fd1e:	3001      	adds	r0, #1
 800fd20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fd24:	4285      	cmp	r5, r0
 800fd26:	f84c 1b04 	str.w	r1, [ip], #4
 800fd2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fd2e:	dcec      	bgt.n	800fd0a <__multadd+0x12>
 800fd30:	b30e      	cbz	r6, 800fd76 <__multadd+0x7e>
 800fd32:	68a3      	ldr	r3, [r4, #8]
 800fd34:	42ab      	cmp	r3, r5
 800fd36:	dc19      	bgt.n	800fd6c <__multadd+0x74>
 800fd38:	6861      	ldr	r1, [r4, #4]
 800fd3a:	4638      	mov	r0, r7
 800fd3c:	3101      	adds	r1, #1
 800fd3e:	f7ff ff79 	bl	800fc34 <_Balloc>
 800fd42:	4680      	mov	r8, r0
 800fd44:	b928      	cbnz	r0, 800fd52 <__multadd+0x5a>
 800fd46:	4602      	mov	r2, r0
 800fd48:	4b0c      	ldr	r3, [pc, #48]	; (800fd7c <__multadd+0x84>)
 800fd4a:	480d      	ldr	r0, [pc, #52]	; (800fd80 <__multadd+0x88>)
 800fd4c:	21b5      	movs	r1, #181	; 0xb5
 800fd4e:	f000 fdcd 	bl	80108ec <__assert_func>
 800fd52:	6922      	ldr	r2, [r4, #16]
 800fd54:	3202      	adds	r2, #2
 800fd56:	f104 010c 	add.w	r1, r4, #12
 800fd5a:	0092      	lsls	r2, r2, #2
 800fd5c:	300c      	adds	r0, #12
 800fd5e:	f7fc fa8b 	bl	800c278 <memcpy>
 800fd62:	4621      	mov	r1, r4
 800fd64:	4638      	mov	r0, r7
 800fd66:	f7ff ffa5 	bl	800fcb4 <_Bfree>
 800fd6a:	4644      	mov	r4, r8
 800fd6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fd70:	3501      	adds	r5, #1
 800fd72:	615e      	str	r6, [r3, #20]
 800fd74:	6125      	str	r5, [r4, #16]
 800fd76:	4620      	mov	r0, r4
 800fd78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd7c:	08012cf7 	.word	0x08012cf7
 800fd80:	08012de4 	.word	0x08012de4

0800fd84 <__s2b>:
 800fd84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd88:	460c      	mov	r4, r1
 800fd8a:	4615      	mov	r5, r2
 800fd8c:	461f      	mov	r7, r3
 800fd8e:	2209      	movs	r2, #9
 800fd90:	3308      	adds	r3, #8
 800fd92:	4606      	mov	r6, r0
 800fd94:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd98:	2100      	movs	r1, #0
 800fd9a:	2201      	movs	r2, #1
 800fd9c:	429a      	cmp	r2, r3
 800fd9e:	db09      	blt.n	800fdb4 <__s2b+0x30>
 800fda0:	4630      	mov	r0, r6
 800fda2:	f7ff ff47 	bl	800fc34 <_Balloc>
 800fda6:	b940      	cbnz	r0, 800fdba <__s2b+0x36>
 800fda8:	4602      	mov	r2, r0
 800fdaa:	4b19      	ldr	r3, [pc, #100]	; (800fe10 <__s2b+0x8c>)
 800fdac:	4819      	ldr	r0, [pc, #100]	; (800fe14 <__s2b+0x90>)
 800fdae:	21ce      	movs	r1, #206	; 0xce
 800fdb0:	f000 fd9c 	bl	80108ec <__assert_func>
 800fdb4:	0052      	lsls	r2, r2, #1
 800fdb6:	3101      	adds	r1, #1
 800fdb8:	e7f0      	b.n	800fd9c <__s2b+0x18>
 800fdba:	9b08      	ldr	r3, [sp, #32]
 800fdbc:	6143      	str	r3, [r0, #20]
 800fdbe:	2d09      	cmp	r5, #9
 800fdc0:	f04f 0301 	mov.w	r3, #1
 800fdc4:	6103      	str	r3, [r0, #16]
 800fdc6:	dd16      	ble.n	800fdf6 <__s2b+0x72>
 800fdc8:	f104 0909 	add.w	r9, r4, #9
 800fdcc:	46c8      	mov	r8, r9
 800fdce:	442c      	add	r4, r5
 800fdd0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fdd4:	4601      	mov	r1, r0
 800fdd6:	3b30      	subs	r3, #48	; 0x30
 800fdd8:	220a      	movs	r2, #10
 800fdda:	4630      	mov	r0, r6
 800fddc:	f7ff ff8c 	bl	800fcf8 <__multadd>
 800fde0:	45a0      	cmp	r8, r4
 800fde2:	d1f5      	bne.n	800fdd0 <__s2b+0x4c>
 800fde4:	f1a5 0408 	sub.w	r4, r5, #8
 800fde8:	444c      	add	r4, r9
 800fdea:	1b2d      	subs	r5, r5, r4
 800fdec:	1963      	adds	r3, r4, r5
 800fdee:	42bb      	cmp	r3, r7
 800fdf0:	db04      	blt.n	800fdfc <__s2b+0x78>
 800fdf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fdf6:	340a      	adds	r4, #10
 800fdf8:	2509      	movs	r5, #9
 800fdfa:	e7f6      	b.n	800fdea <__s2b+0x66>
 800fdfc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fe00:	4601      	mov	r1, r0
 800fe02:	3b30      	subs	r3, #48	; 0x30
 800fe04:	220a      	movs	r2, #10
 800fe06:	4630      	mov	r0, r6
 800fe08:	f7ff ff76 	bl	800fcf8 <__multadd>
 800fe0c:	e7ee      	b.n	800fdec <__s2b+0x68>
 800fe0e:	bf00      	nop
 800fe10:	08012cf7 	.word	0x08012cf7
 800fe14:	08012de4 	.word	0x08012de4

0800fe18 <__hi0bits>:
 800fe18:	0c03      	lsrs	r3, r0, #16
 800fe1a:	041b      	lsls	r3, r3, #16
 800fe1c:	b9d3      	cbnz	r3, 800fe54 <__hi0bits+0x3c>
 800fe1e:	0400      	lsls	r0, r0, #16
 800fe20:	2310      	movs	r3, #16
 800fe22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fe26:	bf04      	itt	eq
 800fe28:	0200      	lsleq	r0, r0, #8
 800fe2a:	3308      	addeq	r3, #8
 800fe2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fe30:	bf04      	itt	eq
 800fe32:	0100      	lsleq	r0, r0, #4
 800fe34:	3304      	addeq	r3, #4
 800fe36:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fe3a:	bf04      	itt	eq
 800fe3c:	0080      	lsleq	r0, r0, #2
 800fe3e:	3302      	addeq	r3, #2
 800fe40:	2800      	cmp	r0, #0
 800fe42:	db05      	blt.n	800fe50 <__hi0bits+0x38>
 800fe44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fe48:	f103 0301 	add.w	r3, r3, #1
 800fe4c:	bf08      	it	eq
 800fe4e:	2320      	moveq	r3, #32
 800fe50:	4618      	mov	r0, r3
 800fe52:	4770      	bx	lr
 800fe54:	2300      	movs	r3, #0
 800fe56:	e7e4      	b.n	800fe22 <__hi0bits+0xa>

0800fe58 <__lo0bits>:
 800fe58:	6803      	ldr	r3, [r0, #0]
 800fe5a:	f013 0207 	ands.w	r2, r3, #7
 800fe5e:	4601      	mov	r1, r0
 800fe60:	d00b      	beq.n	800fe7a <__lo0bits+0x22>
 800fe62:	07da      	lsls	r2, r3, #31
 800fe64:	d423      	bmi.n	800feae <__lo0bits+0x56>
 800fe66:	0798      	lsls	r0, r3, #30
 800fe68:	bf49      	itett	mi
 800fe6a:	085b      	lsrmi	r3, r3, #1
 800fe6c:	089b      	lsrpl	r3, r3, #2
 800fe6e:	2001      	movmi	r0, #1
 800fe70:	600b      	strmi	r3, [r1, #0]
 800fe72:	bf5c      	itt	pl
 800fe74:	600b      	strpl	r3, [r1, #0]
 800fe76:	2002      	movpl	r0, #2
 800fe78:	4770      	bx	lr
 800fe7a:	b298      	uxth	r0, r3
 800fe7c:	b9a8      	cbnz	r0, 800feaa <__lo0bits+0x52>
 800fe7e:	0c1b      	lsrs	r3, r3, #16
 800fe80:	2010      	movs	r0, #16
 800fe82:	b2da      	uxtb	r2, r3
 800fe84:	b90a      	cbnz	r2, 800fe8a <__lo0bits+0x32>
 800fe86:	3008      	adds	r0, #8
 800fe88:	0a1b      	lsrs	r3, r3, #8
 800fe8a:	071a      	lsls	r2, r3, #28
 800fe8c:	bf04      	itt	eq
 800fe8e:	091b      	lsreq	r3, r3, #4
 800fe90:	3004      	addeq	r0, #4
 800fe92:	079a      	lsls	r2, r3, #30
 800fe94:	bf04      	itt	eq
 800fe96:	089b      	lsreq	r3, r3, #2
 800fe98:	3002      	addeq	r0, #2
 800fe9a:	07da      	lsls	r2, r3, #31
 800fe9c:	d403      	bmi.n	800fea6 <__lo0bits+0x4e>
 800fe9e:	085b      	lsrs	r3, r3, #1
 800fea0:	f100 0001 	add.w	r0, r0, #1
 800fea4:	d005      	beq.n	800feb2 <__lo0bits+0x5a>
 800fea6:	600b      	str	r3, [r1, #0]
 800fea8:	4770      	bx	lr
 800feaa:	4610      	mov	r0, r2
 800feac:	e7e9      	b.n	800fe82 <__lo0bits+0x2a>
 800feae:	2000      	movs	r0, #0
 800feb0:	4770      	bx	lr
 800feb2:	2020      	movs	r0, #32
 800feb4:	4770      	bx	lr
	...

0800feb8 <__i2b>:
 800feb8:	b510      	push	{r4, lr}
 800feba:	460c      	mov	r4, r1
 800febc:	2101      	movs	r1, #1
 800febe:	f7ff feb9 	bl	800fc34 <_Balloc>
 800fec2:	4602      	mov	r2, r0
 800fec4:	b928      	cbnz	r0, 800fed2 <__i2b+0x1a>
 800fec6:	4b05      	ldr	r3, [pc, #20]	; (800fedc <__i2b+0x24>)
 800fec8:	4805      	ldr	r0, [pc, #20]	; (800fee0 <__i2b+0x28>)
 800feca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fece:	f000 fd0d 	bl	80108ec <__assert_func>
 800fed2:	2301      	movs	r3, #1
 800fed4:	6144      	str	r4, [r0, #20]
 800fed6:	6103      	str	r3, [r0, #16]
 800fed8:	bd10      	pop	{r4, pc}
 800feda:	bf00      	nop
 800fedc:	08012cf7 	.word	0x08012cf7
 800fee0:	08012de4 	.word	0x08012de4

0800fee4 <__multiply>:
 800fee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fee8:	4691      	mov	r9, r2
 800feea:	690a      	ldr	r2, [r1, #16]
 800feec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fef0:	429a      	cmp	r2, r3
 800fef2:	bfb8      	it	lt
 800fef4:	460b      	movlt	r3, r1
 800fef6:	460c      	mov	r4, r1
 800fef8:	bfbc      	itt	lt
 800fefa:	464c      	movlt	r4, r9
 800fefc:	4699      	movlt	r9, r3
 800fefe:	6927      	ldr	r7, [r4, #16]
 800ff00:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ff04:	68a3      	ldr	r3, [r4, #8]
 800ff06:	6861      	ldr	r1, [r4, #4]
 800ff08:	eb07 060a 	add.w	r6, r7, sl
 800ff0c:	42b3      	cmp	r3, r6
 800ff0e:	b085      	sub	sp, #20
 800ff10:	bfb8      	it	lt
 800ff12:	3101      	addlt	r1, #1
 800ff14:	f7ff fe8e 	bl	800fc34 <_Balloc>
 800ff18:	b930      	cbnz	r0, 800ff28 <__multiply+0x44>
 800ff1a:	4602      	mov	r2, r0
 800ff1c:	4b44      	ldr	r3, [pc, #272]	; (8010030 <__multiply+0x14c>)
 800ff1e:	4845      	ldr	r0, [pc, #276]	; (8010034 <__multiply+0x150>)
 800ff20:	f240 115d 	movw	r1, #349	; 0x15d
 800ff24:	f000 fce2 	bl	80108ec <__assert_func>
 800ff28:	f100 0514 	add.w	r5, r0, #20
 800ff2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ff30:	462b      	mov	r3, r5
 800ff32:	2200      	movs	r2, #0
 800ff34:	4543      	cmp	r3, r8
 800ff36:	d321      	bcc.n	800ff7c <__multiply+0x98>
 800ff38:	f104 0314 	add.w	r3, r4, #20
 800ff3c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ff40:	f109 0314 	add.w	r3, r9, #20
 800ff44:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ff48:	9202      	str	r2, [sp, #8]
 800ff4a:	1b3a      	subs	r2, r7, r4
 800ff4c:	3a15      	subs	r2, #21
 800ff4e:	f022 0203 	bic.w	r2, r2, #3
 800ff52:	3204      	adds	r2, #4
 800ff54:	f104 0115 	add.w	r1, r4, #21
 800ff58:	428f      	cmp	r7, r1
 800ff5a:	bf38      	it	cc
 800ff5c:	2204      	movcc	r2, #4
 800ff5e:	9201      	str	r2, [sp, #4]
 800ff60:	9a02      	ldr	r2, [sp, #8]
 800ff62:	9303      	str	r3, [sp, #12]
 800ff64:	429a      	cmp	r2, r3
 800ff66:	d80c      	bhi.n	800ff82 <__multiply+0x9e>
 800ff68:	2e00      	cmp	r6, #0
 800ff6a:	dd03      	ble.n	800ff74 <__multiply+0x90>
 800ff6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d05a      	beq.n	801002a <__multiply+0x146>
 800ff74:	6106      	str	r6, [r0, #16]
 800ff76:	b005      	add	sp, #20
 800ff78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff7c:	f843 2b04 	str.w	r2, [r3], #4
 800ff80:	e7d8      	b.n	800ff34 <__multiply+0x50>
 800ff82:	f8b3 a000 	ldrh.w	sl, [r3]
 800ff86:	f1ba 0f00 	cmp.w	sl, #0
 800ff8a:	d024      	beq.n	800ffd6 <__multiply+0xf2>
 800ff8c:	f104 0e14 	add.w	lr, r4, #20
 800ff90:	46a9      	mov	r9, r5
 800ff92:	f04f 0c00 	mov.w	ip, #0
 800ff96:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ff9a:	f8d9 1000 	ldr.w	r1, [r9]
 800ff9e:	fa1f fb82 	uxth.w	fp, r2
 800ffa2:	b289      	uxth	r1, r1
 800ffa4:	fb0a 110b 	mla	r1, sl, fp, r1
 800ffa8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ffac:	f8d9 2000 	ldr.w	r2, [r9]
 800ffb0:	4461      	add	r1, ip
 800ffb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ffb6:	fb0a c20b 	mla	r2, sl, fp, ip
 800ffba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ffbe:	b289      	uxth	r1, r1
 800ffc0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ffc4:	4577      	cmp	r7, lr
 800ffc6:	f849 1b04 	str.w	r1, [r9], #4
 800ffca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ffce:	d8e2      	bhi.n	800ff96 <__multiply+0xb2>
 800ffd0:	9a01      	ldr	r2, [sp, #4]
 800ffd2:	f845 c002 	str.w	ip, [r5, r2]
 800ffd6:	9a03      	ldr	r2, [sp, #12]
 800ffd8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ffdc:	3304      	adds	r3, #4
 800ffde:	f1b9 0f00 	cmp.w	r9, #0
 800ffe2:	d020      	beq.n	8010026 <__multiply+0x142>
 800ffe4:	6829      	ldr	r1, [r5, #0]
 800ffe6:	f104 0c14 	add.w	ip, r4, #20
 800ffea:	46ae      	mov	lr, r5
 800ffec:	f04f 0a00 	mov.w	sl, #0
 800fff0:	f8bc b000 	ldrh.w	fp, [ip]
 800fff4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fff8:	fb09 220b 	mla	r2, r9, fp, r2
 800fffc:	4492      	add	sl, r2
 800fffe:	b289      	uxth	r1, r1
 8010000:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010004:	f84e 1b04 	str.w	r1, [lr], #4
 8010008:	f85c 2b04 	ldr.w	r2, [ip], #4
 801000c:	f8be 1000 	ldrh.w	r1, [lr]
 8010010:	0c12      	lsrs	r2, r2, #16
 8010012:	fb09 1102 	mla	r1, r9, r2, r1
 8010016:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801001a:	4567      	cmp	r7, ip
 801001c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010020:	d8e6      	bhi.n	800fff0 <__multiply+0x10c>
 8010022:	9a01      	ldr	r2, [sp, #4]
 8010024:	50a9      	str	r1, [r5, r2]
 8010026:	3504      	adds	r5, #4
 8010028:	e79a      	b.n	800ff60 <__multiply+0x7c>
 801002a:	3e01      	subs	r6, #1
 801002c:	e79c      	b.n	800ff68 <__multiply+0x84>
 801002e:	bf00      	nop
 8010030:	08012cf7 	.word	0x08012cf7
 8010034:	08012de4 	.word	0x08012de4

08010038 <__pow5mult>:
 8010038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801003c:	4615      	mov	r5, r2
 801003e:	f012 0203 	ands.w	r2, r2, #3
 8010042:	4606      	mov	r6, r0
 8010044:	460f      	mov	r7, r1
 8010046:	d007      	beq.n	8010058 <__pow5mult+0x20>
 8010048:	4c25      	ldr	r4, [pc, #148]	; (80100e0 <__pow5mult+0xa8>)
 801004a:	3a01      	subs	r2, #1
 801004c:	2300      	movs	r3, #0
 801004e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010052:	f7ff fe51 	bl	800fcf8 <__multadd>
 8010056:	4607      	mov	r7, r0
 8010058:	10ad      	asrs	r5, r5, #2
 801005a:	d03d      	beq.n	80100d8 <__pow5mult+0xa0>
 801005c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801005e:	b97c      	cbnz	r4, 8010080 <__pow5mult+0x48>
 8010060:	2010      	movs	r0, #16
 8010062:	f7fc f8f9 	bl	800c258 <malloc>
 8010066:	4602      	mov	r2, r0
 8010068:	6270      	str	r0, [r6, #36]	; 0x24
 801006a:	b928      	cbnz	r0, 8010078 <__pow5mult+0x40>
 801006c:	4b1d      	ldr	r3, [pc, #116]	; (80100e4 <__pow5mult+0xac>)
 801006e:	481e      	ldr	r0, [pc, #120]	; (80100e8 <__pow5mult+0xb0>)
 8010070:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010074:	f000 fc3a 	bl	80108ec <__assert_func>
 8010078:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801007c:	6004      	str	r4, [r0, #0]
 801007e:	60c4      	str	r4, [r0, #12]
 8010080:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010084:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010088:	b94c      	cbnz	r4, 801009e <__pow5mult+0x66>
 801008a:	f240 2171 	movw	r1, #625	; 0x271
 801008e:	4630      	mov	r0, r6
 8010090:	f7ff ff12 	bl	800feb8 <__i2b>
 8010094:	2300      	movs	r3, #0
 8010096:	f8c8 0008 	str.w	r0, [r8, #8]
 801009a:	4604      	mov	r4, r0
 801009c:	6003      	str	r3, [r0, #0]
 801009e:	f04f 0900 	mov.w	r9, #0
 80100a2:	07eb      	lsls	r3, r5, #31
 80100a4:	d50a      	bpl.n	80100bc <__pow5mult+0x84>
 80100a6:	4639      	mov	r1, r7
 80100a8:	4622      	mov	r2, r4
 80100aa:	4630      	mov	r0, r6
 80100ac:	f7ff ff1a 	bl	800fee4 <__multiply>
 80100b0:	4639      	mov	r1, r7
 80100b2:	4680      	mov	r8, r0
 80100b4:	4630      	mov	r0, r6
 80100b6:	f7ff fdfd 	bl	800fcb4 <_Bfree>
 80100ba:	4647      	mov	r7, r8
 80100bc:	106d      	asrs	r5, r5, #1
 80100be:	d00b      	beq.n	80100d8 <__pow5mult+0xa0>
 80100c0:	6820      	ldr	r0, [r4, #0]
 80100c2:	b938      	cbnz	r0, 80100d4 <__pow5mult+0x9c>
 80100c4:	4622      	mov	r2, r4
 80100c6:	4621      	mov	r1, r4
 80100c8:	4630      	mov	r0, r6
 80100ca:	f7ff ff0b 	bl	800fee4 <__multiply>
 80100ce:	6020      	str	r0, [r4, #0]
 80100d0:	f8c0 9000 	str.w	r9, [r0]
 80100d4:	4604      	mov	r4, r0
 80100d6:	e7e4      	b.n	80100a2 <__pow5mult+0x6a>
 80100d8:	4638      	mov	r0, r7
 80100da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100de:	bf00      	nop
 80100e0:	08012f30 	.word	0x08012f30
 80100e4:	08012c85 	.word	0x08012c85
 80100e8:	08012de4 	.word	0x08012de4

080100ec <__lshift>:
 80100ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100f0:	460c      	mov	r4, r1
 80100f2:	6849      	ldr	r1, [r1, #4]
 80100f4:	6923      	ldr	r3, [r4, #16]
 80100f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80100fa:	68a3      	ldr	r3, [r4, #8]
 80100fc:	4607      	mov	r7, r0
 80100fe:	4691      	mov	r9, r2
 8010100:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010104:	f108 0601 	add.w	r6, r8, #1
 8010108:	42b3      	cmp	r3, r6
 801010a:	db0b      	blt.n	8010124 <__lshift+0x38>
 801010c:	4638      	mov	r0, r7
 801010e:	f7ff fd91 	bl	800fc34 <_Balloc>
 8010112:	4605      	mov	r5, r0
 8010114:	b948      	cbnz	r0, 801012a <__lshift+0x3e>
 8010116:	4602      	mov	r2, r0
 8010118:	4b2a      	ldr	r3, [pc, #168]	; (80101c4 <__lshift+0xd8>)
 801011a:	482b      	ldr	r0, [pc, #172]	; (80101c8 <__lshift+0xdc>)
 801011c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010120:	f000 fbe4 	bl	80108ec <__assert_func>
 8010124:	3101      	adds	r1, #1
 8010126:	005b      	lsls	r3, r3, #1
 8010128:	e7ee      	b.n	8010108 <__lshift+0x1c>
 801012a:	2300      	movs	r3, #0
 801012c:	f100 0114 	add.w	r1, r0, #20
 8010130:	f100 0210 	add.w	r2, r0, #16
 8010134:	4618      	mov	r0, r3
 8010136:	4553      	cmp	r3, sl
 8010138:	db37      	blt.n	80101aa <__lshift+0xbe>
 801013a:	6920      	ldr	r0, [r4, #16]
 801013c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010140:	f104 0314 	add.w	r3, r4, #20
 8010144:	f019 091f 	ands.w	r9, r9, #31
 8010148:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801014c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010150:	d02f      	beq.n	80101b2 <__lshift+0xc6>
 8010152:	f1c9 0e20 	rsb	lr, r9, #32
 8010156:	468a      	mov	sl, r1
 8010158:	f04f 0c00 	mov.w	ip, #0
 801015c:	681a      	ldr	r2, [r3, #0]
 801015e:	fa02 f209 	lsl.w	r2, r2, r9
 8010162:	ea42 020c 	orr.w	r2, r2, ip
 8010166:	f84a 2b04 	str.w	r2, [sl], #4
 801016a:	f853 2b04 	ldr.w	r2, [r3], #4
 801016e:	4298      	cmp	r0, r3
 8010170:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010174:	d8f2      	bhi.n	801015c <__lshift+0x70>
 8010176:	1b03      	subs	r3, r0, r4
 8010178:	3b15      	subs	r3, #21
 801017a:	f023 0303 	bic.w	r3, r3, #3
 801017e:	3304      	adds	r3, #4
 8010180:	f104 0215 	add.w	r2, r4, #21
 8010184:	4290      	cmp	r0, r2
 8010186:	bf38      	it	cc
 8010188:	2304      	movcc	r3, #4
 801018a:	f841 c003 	str.w	ip, [r1, r3]
 801018e:	f1bc 0f00 	cmp.w	ip, #0
 8010192:	d001      	beq.n	8010198 <__lshift+0xac>
 8010194:	f108 0602 	add.w	r6, r8, #2
 8010198:	3e01      	subs	r6, #1
 801019a:	4638      	mov	r0, r7
 801019c:	612e      	str	r6, [r5, #16]
 801019e:	4621      	mov	r1, r4
 80101a0:	f7ff fd88 	bl	800fcb4 <_Bfree>
 80101a4:	4628      	mov	r0, r5
 80101a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80101ae:	3301      	adds	r3, #1
 80101b0:	e7c1      	b.n	8010136 <__lshift+0x4a>
 80101b2:	3904      	subs	r1, #4
 80101b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80101b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80101bc:	4298      	cmp	r0, r3
 80101be:	d8f9      	bhi.n	80101b4 <__lshift+0xc8>
 80101c0:	e7ea      	b.n	8010198 <__lshift+0xac>
 80101c2:	bf00      	nop
 80101c4:	08012cf7 	.word	0x08012cf7
 80101c8:	08012de4 	.word	0x08012de4

080101cc <__mcmp>:
 80101cc:	b530      	push	{r4, r5, lr}
 80101ce:	6902      	ldr	r2, [r0, #16]
 80101d0:	690c      	ldr	r4, [r1, #16]
 80101d2:	1b12      	subs	r2, r2, r4
 80101d4:	d10e      	bne.n	80101f4 <__mcmp+0x28>
 80101d6:	f100 0314 	add.w	r3, r0, #20
 80101da:	3114      	adds	r1, #20
 80101dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80101e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80101e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80101e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80101ec:	42a5      	cmp	r5, r4
 80101ee:	d003      	beq.n	80101f8 <__mcmp+0x2c>
 80101f0:	d305      	bcc.n	80101fe <__mcmp+0x32>
 80101f2:	2201      	movs	r2, #1
 80101f4:	4610      	mov	r0, r2
 80101f6:	bd30      	pop	{r4, r5, pc}
 80101f8:	4283      	cmp	r3, r0
 80101fa:	d3f3      	bcc.n	80101e4 <__mcmp+0x18>
 80101fc:	e7fa      	b.n	80101f4 <__mcmp+0x28>
 80101fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010202:	e7f7      	b.n	80101f4 <__mcmp+0x28>

08010204 <__mdiff>:
 8010204:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010208:	460c      	mov	r4, r1
 801020a:	4606      	mov	r6, r0
 801020c:	4611      	mov	r1, r2
 801020e:	4620      	mov	r0, r4
 8010210:	4690      	mov	r8, r2
 8010212:	f7ff ffdb 	bl	80101cc <__mcmp>
 8010216:	1e05      	subs	r5, r0, #0
 8010218:	d110      	bne.n	801023c <__mdiff+0x38>
 801021a:	4629      	mov	r1, r5
 801021c:	4630      	mov	r0, r6
 801021e:	f7ff fd09 	bl	800fc34 <_Balloc>
 8010222:	b930      	cbnz	r0, 8010232 <__mdiff+0x2e>
 8010224:	4b3a      	ldr	r3, [pc, #232]	; (8010310 <__mdiff+0x10c>)
 8010226:	4602      	mov	r2, r0
 8010228:	f240 2132 	movw	r1, #562	; 0x232
 801022c:	4839      	ldr	r0, [pc, #228]	; (8010314 <__mdiff+0x110>)
 801022e:	f000 fb5d 	bl	80108ec <__assert_func>
 8010232:	2301      	movs	r3, #1
 8010234:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010238:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801023c:	bfa4      	itt	ge
 801023e:	4643      	movge	r3, r8
 8010240:	46a0      	movge	r8, r4
 8010242:	4630      	mov	r0, r6
 8010244:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010248:	bfa6      	itte	ge
 801024a:	461c      	movge	r4, r3
 801024c:	2500      	movge	r5, #0
 801024e:	2501      	movlt	r5, #1
 8010250:	f7ff fcf0 	bl	800fc34 <_Balloc>
 8010254:	b920      	cbnz	r0, 8010260 <__mdiff+0x5c>
 8010256:	4b2e      	ldr	r3, [pc, #184]	; (8010310 <__mdiff+0x10c>)
 8010258:	4602      	mov	r2, r0
 801025a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801025e:	e7e5      	b.n	801022c <__mdiff+0x28>
 8010260:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010264:	6926      	ldr	r6, [r4, #16]
 8010266:	60c5      	str	r5, [r0, #12]
 8010268:	f104 0914 	add.w	r9, r4, #20
 801026c:	f108 0514 	add.w	r5, r8, #20
 8010270:	f100 0e14 	add.w	lr, r0, #20
 8010274:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010278:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801027c:	f108 0210 	add.w	r2, r8, #16
 8010280:	46f2      	mov	sl, lr
 8010282:	2100      	movs	r1, #0
 8010284:	f859 3b04 	ldr.w	r3, [r9], #4
 8010288:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801028c:	fa1f f883 	uxth.w	r8, r3
 8010290:	fa11 f18b 	uxtah	r1, r1, fp
 8010294:	0c1b      	lsrs	r3, r3, #16
 8010296:	eba1 0808 	sub.w	r8, r1, r8
 801029a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801029e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80102a2:	fa1f f888 	uxth.w	r8, r8
 80102a6:	1419      	asrs	r1, r3, #16
 80102a8:	454e      	cmp	r6, r9
 80102aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80102ae:	f84a 3b04 	str.w	r3, [sl], #4
 80102b2:	d8e7      	bhi.n	8010284 <__mdiff+0x80>
 80102b4:	1b33      	subs	r3, r6, r4
 80102b6:	3b15      	subs	r3, #21
 80102b8:	f023 0303 	bic.w	r3, r3, #3
 80102bc:	3304      	adds	r3, #4
 80102be:	3415      	adds	r4, #21
 80102c0:	42a6      	cmp	r6, r4
 80102c2:	bf38      	it	cc
 80102c4:	2304      	movcc	r3, #4
 80102c6:	441d      	add	r5, r3
 80102c8:	4473      	add	r3, lr
 80102ca:	469e      	mov	lr, r3
 80102cc:	462e      	mov	r6, r5
 80102ce:	4566      	cmp	r6, ip
 80102d0:	d30e      	bcc.n	80102f0 <__mdiff+0xec>
 80102d2:	f10c 0203 	add.w	r2, ip, #3
 80102d6:	1b52      	subs	r2, r2, r5
 80102d8:	f022 0203 	bic.w	r2, r2, #3
 80102dc:	3d03      	subs	r5, #3
 80102de:	45ac      	cmp	ip, r5
 80102e0:	bf38      	it	cc
 80102e2:	2200      	movcc	r2, #0
 80102e4:	441a      	add	r2, r3
 80102e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80102ea:	b17b      	cbz	r3, 801030c <__mdiff+0x108>
 80102ec:	6107      	str	r7, [r0, #16]
 80102ee:	e7a3      	b.n	8010238 <__mdiff+0x34>
 80102f0:	f856 8b04 	ldr.w	r8, [r6], #4
 80102f4:	fa11 f288 	uxtah	r2, r1, r8
 80102f8:	1414      	asrs	r4, r2, #16
 80102fa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80102fe:	b292      	uxth	r2, r2
 8010300:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010304:	f84e 2b04 	str.w	r2, [lr], #4
 8010308:	1421      	asrs	r1, r4, #16
 801030a:	e7e0      	b.n	80102ce <__mdiff+0xca>
 801030c:	3f01      	subs	r7, #1
 801030e:	e7ea      	b.n	80102e6 <__mdiff+0xe2>
 8010310:	08012cf7 	.word	0x08012cf7
 8010314:	08012de4 	.word	0x08012de4

08010318 <__ulp>:
 8010318:	b082      	sub	sp, #8
 801031a:	ed8d 0b00 	vstr	d0, [sp]
 801031e:	9b01      	ldr	r3, [sp, #4]
 8010320:	4912      	ldr	r1, [pc, #72]	; (801036c <__ulp+0x54>)
 8010322:	4019      	ands	r1, r3
 8010324:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010328:	2900      	cmp	r1, #0
 801032a:	dd05      	ble.n	8010338 <__ulp+0x20>
 801032c:	2200      	movs	r2, #0
 801032e:	460b      	mov	r3, r1
 8010330:	ec43 2b10 	vmov	d0, r2, r3
 8010334:	b002      	add	sp, #8
 8010336:	4770      	bx	lr
 8010338:	4249      	negs	r1, r1
 801033a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801033e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8010342:	f04f 0200 	mov.w	r2, #0
 8010346:	f04f 0300 	mov.w	r3, #0
 801034a:	da04      	bge.n	8010356 <__ulp+0x3e>
 801034c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010350:	fa41 f300 	asr.w	r3, r1, r0
 8010354:	e7ec      	b.n	8010330 <__ulp+0x18>
 8010356:	f1a0 0114 	sub.w	r1, r0, #20
 801035a:	291e      	cmp	r1, #30
 801035c:	bfda      	itte	le
 801035e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8010362:	fa20 f101 	lsrle.w	r1, r0, r1
 8010366:	2101      	movgt	r1, #1
 8010368:	460a      	mov	r2, r1
 801036a:	e7e1      	b.n	8010330 <__ulp+0x18>
 801036c:	7ff00000 	.word	0x7ff00000

08010370 <__b2d>:
 8010370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010372:	6905      	ldr	r5, [r0, #16]
 8010374:	f100 0714 	add.w	r7, r0, #20
 8010378:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801037c:	1f2e      	subs	r6, r5, #4
 801037e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010382:	4620      	mov	r0, r4
 8010384:	f7ff fd48 	bl	800fe18 <__hi0bits>
 8010388:	f1c0 0320 	rsb	r3, r0, #32
 801038c:	280a      	cmp	r0, #10
 801038e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801040c <__b2d+0x9c>
 8010392:	600b      	str	r3, [r1, #0]
 8010394:	dc14      	bgt.n	80103c0 <__b2d+0x50>
 8010396:	f1c0 0e0b 	rsb	lr, r0, #11
 801039a:	fa24 f10e 	lsr.w	r1, r4, lr
 801039e:	42b7      	cmp	r7, r6
 80103a0:	ea41 030c 	orr.w	r3, r1, ip
 80103a4:	bf34      	ite	cc
 80103a6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80103aa:	2100      	movcs	r1, #0
 80103ac:	3015      	adds	r0, #21
 80103ae:	fa04 f000 	lsl.w	r0, r4, r0
 80103b2:	fa21 f10e 	lsr.w	r1, r1, lr
 80103b6:	ea40 0201 	orr.w	r2, r0, r1
 80103ba:	ec43 2b10 	vmov	d0, r2, r3
 80103be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103c0:	42b7      	cmp	r7, r6
 80103c2:	bf3a      	itte	cc
 80103c4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80103c8:	f1a5 0608 	subcc.w	r6, r5, #8
 80103cc:	2100      	movcs	r1, #0
 80103ce:	380b      	subs	r0, #11
 80103d0:	d017      	beq.n	8010402 <__b2d+0x92>
 80103d2:	f1c0 0c20 	rsb	ip, r0, #32
 80103d6:	fa04 f500 	lsl.w	r5, r4, r0
 80103da:	42be      	cmp	r6, r7
 80103dc:	fa21 f40c 	lsr.w	r4, r1, ip
 80103e0:	ea45 0504 	orr.w	r5, r5, r4
 80103e4:	bf8c      	ite	hi
 80103e6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80103ea:	2400      	movls	r4, #0
 80103ec:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80103f0:	fa01 f000 	lsl.w	r0, r1, r0
 80103f4:	fa24 f40c 	lsr.w	r4, r4, ip
 80103f8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80103fc:	ea40 0204 	orr.w	r2, r0, r4
 8010400:	e7db      	b.n	80103ba <__b2d+0x4a>
 8010402:	ea44 030c 	orr.w	r3, r4, ip
 8010406:	460a      	mov	r2, r1
 8010408:	e7d7      	b.n	80103ba <__b2d+0x4a>
 801040a:	bf00      	nop
 801040c:	3ff00000 	.word	0x3ff00000

08010410 <__d2b>:
 8010410:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010414:	4689      	mov	r9, r1
 8010416:	2101      	movs	r1, #1
 8010418:	ec57 6b10 	vmov	r6, r7, d0
 801041c:	4690      	mov	r8, r2
 801041e:	f7ff fc09 	bl	800fc34 <_Balloc>
 8010422:	4604      	mov	r4, r0
 8010424:	b930      	cbnz	r0, 8010434 <__d2b+0x24>
 8010426:	4602      	mov	r2, r0
 8010428:	4b25      	ldr	r3, [pc, #148]	; (80104c0 <__d2b+0xb0>)
 801042a:	4826      	ldr	r0, [pc, #152]	; (80104c4 <__d2b+0xb4>)
 801042c:	f240 310a 	movw	r1, #778	; 0x30a
 8010430:	f000 fa5c 	bl	80108ec <__assert_func>
 8010434:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010438:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801043c:	bb35      	cbnz	r5, 801048c <__d2b+0x7c>
 801043e:	2e00      	cmp	r6, #0
 8010440:	9301      	str	r3, [sp, #4]
 8010442:	d028      	beq.n	8010496 <__d2b+0x86>
 8010444:	4668      	mov	r0, sp
 8010446:	9600      	str	r6, [sp, #0]
 8010448:	f7ff fd06 	bl	800fe58 <__lo0bits>
 801044c:	9900      	ldr	r1, [sp, #0]
 801044e:	b300      	cbz	r0, 8010492 <__d2b+0x82>
 8010450:	9a01      	ldr	r2, [sp, #4]
 8010452:	f1c0 0320 	rsb	r3, r0, #32
 8010456:	fa02 f303 	lsl.w	r3, r2, r3
 801045a:	430b      	orrs	r3, r1
 801045c:	40c2      	lsrs	r2, r0
 801045e:	6163      	str	r3, [r4, #20]
 8010460:	9201      	str	r2, [sp, #4]
 8010462:	9b01      	ldr	r3, [sp, #4]
 8010464:	61a3      	str	r3, [r4, #24]
 8010466:	2b00      	cmp	r3, #0
 8010468:	bf14      	ite	ne
 801046a:	2202      	movne	r2, #2
 801046c:	2201      	moveq	r2, #1
 801046e:	6122      	str	r2, [r4, #16]
 8010470:	b1d5      	cbz	r5, 80104a8 <__d2b+0x98>
 8010472:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010476:	4405      	add	r5, r0
 8010478:	f8c9 5000 	str.w	r5, [r9]
 801047c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010480:	f8c8 0000 	str.w	r0, [r8]
 8010484:	4620      	mov	r0, r4
 8010486:	b003      	add	sp, #12
 8010488:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801048c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010490:	e7d5      	b.n	801043e <__d2b+0x2e>
 8010492:	6161      	str	r1, [r4, #20]
 8010494:	e7e5      	b.n	8010462 <__d2b+0x52>
 8010496:	a801      	add	r0, sp, #4
 8010498:	f7ff fcde 	bl	800fe58 <__lo0bits>
 801049c:	9b01      	ldr	r3, [sp, #4]
 801049e:	6163      	str	r3, [r4, #20]
 80104a0:	2201      	movs	r2, #1
 80104a2:	6122      	str	r2, [r4, #16]
 80104a4:	3020      	adds	r0, #32
 80104a6:	e7e3      	b.n	8010470 <__d2b+0x60>
 80104a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80104ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80104b0:	f8c9 0000 	str.w	r0, [r9]
 80104b4:	6918      	ldr	r0, [r3, #16]
 80104b6:	f7ff fcaf 	bl	800fe18 <__hi0bits>
 80104ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80104be:	e7df      	b.n	8010480 <__d2b+0x70>
 80104c0:	08012cf7 	.word	0x08012cf7
 80104c4:	08012de4 	.word	0x08012de4

080104c8 <__ratio>:
 80104c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104cc:	4688      	mov	r8, r1
 80104ce:	4669      	mov	r1, sp
 80104d0:	4681      	mov	r9, r0
 80104d2:	f7ff ff4d 	bl	8010370 <__b2d>
 80104d6:	a901      	add	r1, sp, #4
 80104d8:	4640      	mov	r0, r8
 80104da:	ec55 4b10 	vmov	r4, r5, d0
 80104de:	f7ff ff47 	bl	8010370 <__b2d>
 80104e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80104e6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80104ea:	eba3 0c02 	sub.w	ip, r3, r2
 80104ee:	e9dd 3200 	ldrd	r3, r2, [sp]
 80104f2:	1a9b      	subs	r3, r3, r2
 80104f4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80104f8:	ec51 0b10 	vmov	r0, r1, d0
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	bfd6      	itet	le
 8010500:	460a      	movle	r2, r1
 8010502:	462a      	movgt	r2, r5
 8010504:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010508:	468b      	mov	fp, r1
 801050a:	462f      	mov	r7, r5
 801050c:	bfd4      	ite	le
 801050e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010512:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010516:	4620      	mov	r0, r4
 8010518:	ee10 2a10 	vmov	r2, s0
 801051c:	465b      	mov	r3, fp
 801051e:	4639      	mov	r1, r7
 8010520:	f7f0 f9a4 	bl	800086c <__aeabi_ddiv>
 8010524:	ec41 0b10 	vmov	d0, r0, r1
 8010528:	b003      	add	sp, #12
 801052a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801052e <__copybits>:
 801052e:	3901      	subs	r1, #1
 8010530:	b570      	push	{r4, r5, r6, lr}
 8010532:	1149      	asrs	r1, r1, #5
 8010534:	6914      	ldr	r4, [r2, #16]
 8010536:	3101      	adds	r1, #1
 8010538:	f102 0314 	add.w	r3, r2, #20
 801053c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010540:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010544:	1f05      	subs	r5, r0, #4
 8010546:	42a3      	cmp	r3, r4
 8010548:	d30c      	bcc.n	8010564 <__copybits+0x36>
 801054a:	1aa3      	subs	r3, r4, r2
 801054c:	3b11      	subs	r3, #17
 801054e:	f023 0303 	bic.w	r3, r3, #3
 8010552:	3211      	adds	r2, #17
 8010554:	42a2      	cmp	r2, r4
 8010556:	bf88      	it	hi
 8010558:	2300      	movhi	r3, #0
 801055a:	4418      	add	r0, r3
 801055c:	2300      	movs	r3, #0
 801055e:	4288      	cmp	r0, r1
 8010560:	d305      	bcc.n	801056e <__copybits+0x40>
 8010562:	bd70      	pop	{r4, r5, r6, pc}
 8010564:	f853 6b04 	ldr.w	r6, [r3], #4
 8010568:	f845 6f04 	str.w	r6, [r5, #4]!
 801056c:	e7eb      	b.n	8010546 <__copybits+0x18>
 801056e:	f840 3b04 	str.w	r3, [r0], #4
 8010572:	e7f4      	b.n	801055e <__copybits+0x30>

08010574 <__any_on>:
 8010574:	f100 0214 	add.w	r2, r0, #20
 8010578:	6900      	ldr	r0, [r0, #16]
 801057a:	114b      	asrs	r3, r1, #5
 801057c:	4298      	cmp	r0, r3
 801057e:	b510      	push	{r4, lr}
 8010580:	db11      	blt.n	80105a6 <__any_on+0x32>
 8010582:	dd0a      	ble.n	801059a <__any_on+0x26>
 8010584:	f011 011f 	ands.w	r1, r1, #31
 8010588:	d007      	beq.n	801059a <__any_on+0x26>
 801058a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801058e:	fa24 f001 	lsr.w	r0, r4, r1
 8010592:	fa00 f101 	lsl.w	r1, r0, r1
 8010596:	428c      	cmp	r4, r1
 8010598:	d10b      	bne.n	80105b2 <__any_on+0x3e>
 801059a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801059e:	4293      	cmp	r3, r2
 80105a0:	d803      	bhi.n	80105aa <__any_on+0x36>
 80105a2:	2000      	movs	r0, #0
 80105a4:	bd10      	pop	{r4, pc}
 80105a6:	4603      	mov	r3, r0
 80105a8:	e7f7      	b.n	801059a <__any_on+0x26>
 80105aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80105ae:	2900      	cmp	r1, #0
 80105b0:	d0f5      	beq.n	801059e <__any_on+0x2a>
 80105b2:	2001      	movs	r0, #1
 80105b4:	e7f6      	b.n	80105a4 <__any_on+0x30>

080105b6 <_calloc_r>:
 80105b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80105b8:	fba1 2402 	umull	r2, r4, r1, r2
 80105bc:	b94c      	cbnz	r4, 80105d2 <_calloc_r+0x1c>
 80105be:	4611      	mov	r1, r2
 80105c0:	9201      	str	r2, [sp, #4]
 80105c2:	f7fb fedb 	bl	800c37c <_malloc_r>
 80105c6:	9a01      	ldr	r2, [sp, #4]
 80105c8:	4605      	mov	r5, r0
 80105ca:	b930      	cbnz	r0, 80105da <_calloc_r+0x24>
 80105cc:	4628      	mov	r0, r5
 80105ce:	b003      	add	sp, #12
 80105d0:	bd30      	pop	{r4, r5, pc}
 80105d2:	220c      	movs	r2, #12
 80105d4:	6002      	str	r2, [r0, #0]
 80105d6:	2500      	movs	r5, #0
 80105d8:	e7f8      	b.n	80105cc <_calloc_r+0x16>
 80105da:	4621      	mov	r1, r4
 80105dc:	f7fb fe5a 	bl	800c294 <memset>
 80105e0:	e7f4      	b.n	80105cc <_calloc_r+0x16>

080105e2 <__ssputs_r>:
 80105e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105e6:	688e      	ldr	r6, [r1, #8]
 80105e8:	429e      	cmp	r6, r3
 80105ea:	4682      	mov	sl, r0
 80105ec:	460c      	mov	r4, r1
 80105ee:	4690      	mov	r8, r2
 80105f0:	461f      	mov	r7, r3
 80105f2:	d838      	bhi.n	8010666 <__ssputs_r+0x84>
 80105f4:	898a      	ldrh	r2, [r1, #12]
 80105f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80105fa:	d032      	beq.n	8010662 <__ssputs_r+0x80>
 80105fc:	6825      	ldr	r5, [r4, #0]
 80105fe:	6909      	ldr	r1, [r1, #16]
 8010600:	eba5 0901 	sub.w	r9, r5, r1
 8010604:	6965      	ldr	r5, [r4, #20]
 8010606:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801060a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801060e:	3301      	adds	r3, #1
 8010610:	444b      	add	r3, r9
 8010612:	106d      	asrs	r5, r5, #1
 8010614:	429d      	cmp	r5, r3
 8010616:	bf38      	it	cc
 8010618:	461d      	movcc	r5, r3
 801061a:	0553      	lsls	r3, r2, #21
 801061c:	d531      	bpl.n	8010682 <__ssputs_r+0xa0>
 801061e:	4629      	mov	r1, r5
 8010620:	f7fb feac 	bl	800c37c <_malloc_r>
 8010624:	4606      	mov	r6, r0
 8010626:	b950      	cbnz	r0, 801063e <__ssputs_r+0x5c>
 8010628:	230c      	movs	r3, #12
 801062a:	f8ca 3000 	str.w	r3, [sl]
 801062e:	89a3      	ldrh	r3, [r4, #12]
 8010630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010634:	81a3      	strh	r3, [r4, #12]
 8010636:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801063a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801063e:	6921      	ldr	r1, [r4, #16]
 8010640:	464a      	mov	r2, r9
 8010642:	f7fb fe19 	bl	800c278 <memcpy>
 8010646:	89a3      	ldrh	r3, [r4, #12]
 8010648:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801064c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010650:	81a3      	strh	r3, [r4, #12]
 8010652:	6126      	str	r6, [r4, #16]
 8010654:	6165      	str	r5, [r4, #20]
 8010656:	444e      	add	r6, r9
 8010658:	eba5 0509 	sub.w	r5, r5, r9
 801065c:	6026      	str	r6, [r4, #0]
 801065e:	60a5      	str	r5, [r4, #8]
 8010660:	463e      	mov	r6, r7
 8010662:	42be      	cmp	r6, r7
 8010664:	d900      	bls.n	8010668 <__ssputs_r+0x86>
 8010666:	463e      	mov	r6, r7
 8010668:	6820      	ldr	r0, [r4, #0]
 801066a:	4632      	mov	r2, r6
 801066c:	4641      	mov	r1, r8
 801066e:	f000 f98f 	bl	8010990 <memmove>
 8010672:	68a3      	ldr	r3, [r4, #8]
 8010674:	1b9b      	subs	r3, r3, r6
 8010676:	60a3      	str	r3, [r4, #8]
 8010678:	6823      	ldr	r3, [r4, #0]
 801067a:	4433      	add	r3, r6
 801067c:	6023      	str	r3, [r4, #0]
 801067e:	2000      	movs	r0, #0
 8010680:	e7db      	b.n	801063a <__ssputs_r+0x58>
 8010682:	462a      	mov	r2, r5
 8010684:	f000 f99e 	bl	80109c4 <_realloc_r>
 8010688:	4606      	mov	r6, r0
 801068a:	2800      	cmp	r0, #0
 801068c:	d1e1      	bne.n	8010652 <__ssputs_r+0x70>
 801068e:	6921      	ldr	r1, [r4, #16]
 8010690:	4650      	mov	r0, sl
 8010692:	f7fb fe07 	bl	800c2a4 <_free_r>
 8010696:	e7c7      	b.n	8010628 <__ssputs_r+0x46>

08010698 <_svfiprintf_r>:
 8010698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801069c:	4698      	mov	r8, r3
 801069e:	898b      	ldrh	r3, [r1, #12]
 80106a0:	061b      	lsls	r3, r3, #24
 80106a2:	b09d      	sub	sp, #116	; 0x74
 80106a4:	4607      	mov	r7, r0
 80106a6:	460d      	mov	r5, r1
 80106a8:	4614      	mov	r4, r2
 80106aa:	d50e      	bpl.n	80106ca <_svfiprintf_r+0x32>
 80106ac:	690b      	ldr	r3, [r1, #16]
 80106ae:	b963      	cbnz	r3, 80106ca <_svfiprintf_r+0x32>
 80106b0:	2140      	movs	r1, #64	; 0x40
 80106b2:	f7fb fe63 	bl	800c37c <_malloc_r>
 80106b6:	6028      	str	r0, [r5, #0]
 80106b8:	6128      	str	r0, [r5, #16]
 80106ba:	b920      	cbnz	r0, 80106c6 <_svfiprintf_r+0x2e>
 80106bc:	230c      	movs	r3, #12
 80106be:	603b      	str	r3, [r7, #0]
 80106c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80106c4:	e0d1      	b.n	801086a <_svfiprintf_r+0x1d2>
 80106c6:	2340      	movs	r3, #64	; 0x40
 80106c8:	616b      	str	r3, [r5, #20]
 80106ca:	2300      	movs	r3, #0
 80106cc:	9309      	str	r3, [sp, #36]	; 0x24
 80106ce:	2320      	movs	r3, #32
 80106d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80106d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80106d8:	2330      	movs	r3, #48	; 0x30
 80106da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010884 <_svfiprintf_r+0x1ec>
 80106de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80106e2:	f04f 0901 	mov.w	r9, #1
 80106e6:	4623      	mov	r3, r4
 80106e8:	469a      	mov	sl, r3
 80106ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80106ee:	b10a      	cbz	r2, 80106f4 <_svfiprintf_r+0x5c>
 80106f0:	2a25      	cmp	r2, #37	; 0x25
 80106f2:	d1f9      	bne.n	80106e8 <_svfiprintf_r+0x50>
 80106f4:	ebba 0b04 	subs.w	fp, sl, r4
 80106f8:	d00b      	beq.n	8010712 <_svfiprintf_r+0x7a>
 80106fa:	465b      	mov	r3, fp
 80106fc:	4622      	mov	r2, r4
 80106fe:	4629      	mov	r1, r5
 8010700:	4638      	mov	r0, r7
 8010702:	f7ff ff6e 	bl	80105e2 <__ssputs_r>
 8010706:	3001      	adds	r0, #1
 8010708:	f000 80aa 	beq.w	8010860 <_svfiprintf_r+0x1c8>
 801070c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801070e:	445a      	add	r2, fp
 8010710:	9209      	str	r2, [sp, #36]	; 0x24
 8010712:	f89a 3000 	ldrb.w	r3, [sl]
 8010716:	2b00      	cmp	r3, #0
 8010718:	f000 80a2 	beq.w	8010860 <_svfiprintf_r+0x1c8>
 801071c:	2300      	movs	r3, #0
 801071e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010722:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010726:	f10a 0a01 	add.w	sl, sl, #1
 801072a:	9304      	str	r3, [sp, #16]
 801072c:	9307      	str	r3, [sp, #28]
 801072e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010732:	931a      	str	r3, [sp, #104]	; 0x68
 8010734:	4654      	mov	r4, sl
 8010736:	2205      	movs	r2, #5
 8010738:	f814 1b01 	ldrb.w	r1, [r4], #1
 801073c:	4851      	ldr	r0, [pc, #324]	; (8010884 <_svfiprintf_r+0x1ec>)
 801073e:	f7ef fd5f 	bl	8000200 <memchr>
 8010742:	9a04      	ldr	r2, [sp, #16]
 8010744:	b9d8      	cbnz	r0, 801077e <_svfiprintf_r+0xe6>
 8010746:	06d0      	lsls	r0, r2, #27
 8010748:	bf44      	itt	mi
 801074a:	2320      	movmi	r3, #32
 801074c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010750:	0711      	lsls	r1, r2, #28
 8010752:	bf44      	itt	mi
 8010754:	232b      	movmi	r3, #43	; 0x2b
 8010756:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801075a:	f89a 3000 	ldrb.w	r3, [sl]
 801075e:	2b2a      	cmp	r3, #42	; 0x2a
 8010760:	d015      	beq.n	801078e <_svfiprintf_r+0xf6>
 8010762:	9a07      	ldr	r2, [sp, #28]
 8010764:	4654      	mov	r4, sl
 8010766:	2000      	movs	r0, #0
 8010768:	f04f 0c0a 	mov.w	ip, #10
 801076c:	4621      	mov	r1, r4
 801076e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010772:	3b30      	subs	r3, #48	; 0x30
 8010774:	2b09      	cmp	r3, #9
 8010776:	d94e      	bls.n	8010816 <_svfiprintf_r+0x17e>
 8010778:	b1b0      	cbz	r0, 80107a8 <_svfiprintf_r+0x110>
 801077a:	9207      	str	r2, [sp, #28]
 801077c:	e014      	b.n	80107a8 <_svfiprintf_r+0x110>
 801077e:	eba0 0308 	sub.w	r3, r0, r8
 8010782:	fa09 f303 	lsl.w	r3, r9, r3
 8010786:	4313      	orrs	r3, r2
 8010788:	9304      	str	r3, [sp, #16]
 801078a:	46a2      	mov	sl, r4
 801078c:	e7d2      	b.n	8010734 <_svfiprintf_r+0x9c>
 801078e:	9b03      	ldr	r3, [sp, #12]
 8010790:	1d19      	adds	r1, r3, #4
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	9103      	str	r1, [sp, #12]
 8010796:	2b00      	cmp	r3, #0
 8010798:	bfbb      	ittet	lt
 801079a:	425b      	neglt	r3, r3
 801079c:	f042 0202 	orrlt.w	r2, r2, #2
 80107a0:	9307      	strge	r3, [sp, #28]
 80107a2:	9307      	strlt	r3, [sp, #28]
 80107a4:	bfb8      	it	lt
 80107a6:	9204      	strlt	r2, [sp, #16]
 80107a8:	7823      	ldrb	r3, [r4, #0]
 80107aa:	2b2e      	cmp	r3, #46	; 0x2e
 80107ac:	d10c      	bne.n	80107c8 <_svfiprintf_r+0x130>
 80107ae:	7863      	ldrb	r3, [r4, #1]
 80107b0:	2b2a      	cmp	r3, #42	; 0x2a
 80107b2:	d135      	bne.n	8010820 <_svfiprintf_r+0x188>
 80107b4:	9b03      	ldr	r3, [sp, #12]
 80107b6:	1d1a      	adds	r2, r3, #4
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	9203      	str	r2, [sp, #12]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	bfb8      	it	lt
 80107c0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80107c4:	3402      	adds	r4, #2
 80107c6:	9305      	str	r3, [sp, #20]
 80107c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010894 <_svfiprintf_r+0x1fc>
 80107cc:	7821      	ldrb	r1, [r4, #0]
 80107ce:	2203      	movs	r2, #3
 80107d0:	4650      	mov	r0, sl
 80107d2:	f7ef fd15 	bl	8000200 <memchr>
 80107d6:	b140      	cbz	r0, 80107ea <_svfiprintf_r+0x152>
 80107d8:	2340      	movs	r3, #64	; 0x40
 80107da:	eba0 000a 	sub.w	r0, r0, sl
 80107de:	fa03 f000 	lsl.w	r0, r3, r0
 80107e2:	9b04      	ldr	r3, [sp, #16]
 80107e4:	4303      	orrs	r3, r0
 80107e6:	3401      	adds	r4, #1
 80107e8:	9304      	str	r3, [sp, #16]
 80107ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107ee:	4826      	ldr	r0, [pc, #152]	; (8010888 <_svfiprintf_r+0x1f0>)
 80107f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80107f4:	2206      	movs	r2, #6
 80107f6:	f7ef fd03 	bl	8000200 <memchr>
 80107fa:	2800      	cmp	r0, #0
 80107fc:	d038      	beq.n	8010870 <_svfiprintf_r+0x1d8>
 80107fe:	4b23      	ldr	r3, [pc, #140]	; (801088c <_svfiprintf_r+0x1f4>)
 8010800:	bb1b      	cbnz	r3, 801084a <_svfiprintf_r+0x1b2>
 8010802:	9b03      	ldr	r3, [sp, #12]
 8010804:	3307      	adds	r3, #7
 8010806:	f023 0307 	bic.w	r3, r3, #7
 801080a:	3308      	adds	r3, #8
 801080c:	9303      	str	r3, [sp, #12]
 801080e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010810:	4433      	add	r3, r6
 8010812:	9309      	str	r3, [sp, #36]	; 0x24
 8010814:	e767      	b.n	80106e6 <_svfiprintf_r+0x4e>
 8010816:	fb0c 3202 	mla	r2, ip, r2, r3
 801081a:	460c      	mov	r4, r1
 801081c:	2001      	movs	r0, #1
 801081e:	e7a5      	b.n	801076c <_svfiprintf_r+0xd4>
 8010820:	2300      	movs	r3, #0
 8010822:	3401      	adds	r4, #1
 8010824:	9305      	str	r3, [sp, #20]
 8010826:	4619      	mov	r1, r3
 8010828:	f04f 0c0a 	mov.w	ip, #10
 801082c:	4620      	mov	r0, r4
 801082e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010832:	3a30      	subs	r2, #48	; 0x30
 8010834:	2a09      	cmp	r2, #9
 8010836:	d903      	bls.n	8010840 <_svfiprintf_r+0x1a8>
 8010838:	2b00      	cmp	r3, #0
 801083a:	d0c5      	beq.n	80107c8 <_svfiprintf_r+0x130>
 801083c:	9105      	str	r1, [sp, #20]
 801083e:	e7c3      	b.n	80107c8 <_svfiprintf_r+0x130>
 8010840:	fb0c 2101 	mla	r1, ip, r1, r2
 8010844:	4604      	mov	r4, r0
 8010846:	2301      	movs	r3, #1
 8010848:	e7f0      	b.n	801082c <_svfiprintf_r+0x194>
 801084a:	ab03      	add	r3, sp, #12
 801084c:	9300      	str	r3, [sp, #0]
 801084e:	462a      	mov	r2, r5
 8010850:	4b0f      	ldr	r3, [pc, #60]	; (8010890 <_svfiprintf_r+0x1f8>)
 8010852:	a904      	add	r1, sp, #16
 8010854:	4638      	mov	r0, r7
 8010856:	f7fb fea5 	bl	800c5a4 <_printf_float>
 801085a:	1c42      	adds	r2, r0, #1
 801085c:	4606      	mov	r6, r0
 801085e:	d1d6      	bne.n	801080e <_svfiprintf_r+0x176>
 8010860:	89ab      	ldrh	r3, [r5, #12]
 8010862:	065b      	lsls	r3, r3, #25
 8010864:	f53f af2c 	bmi.w	80106c0 <_svfiprintf_r+0x28>
 8010868:	9809      	ldr	r0, [sp, #36]	; 0x24
 801086a:	b01d      	add	sp, #116	; 0x74
 801086c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010870:	ab03      	add	r3, sp, #12
 8010872:	9300      	str	r3, [sp, #0]
 8010874:	462a      	mov	r2, r5
 8010876:	4b06      	ldr	r3, [pc, #24]	; (8010890 <_svfiprintf_r+0x1f8>)
 8010878:	a904      	add	r1, sp, #16
 801087a:	4638      	mov	r0, r7
 801087c:	f7fc f936 	bl	800caec <_printf_i>
 8010880:	e7eb      	b.n	801085a <_svfiprintf_r+0x1c2>
 8010882:	bf00      	nop
 8010884:	08012f3c 	.word	0x08012f3c
 8010888:	08012f46 	.word	0x08012f46
 801088c:	0800c5a5 	.word	0x0800c5a5
 8010890:	080105e3 	.word	0x080105e3
 8010894:	08012f42 	.word	0x08012f42

08010898 <_read_r>:
 8010898:	b538      	push	{r3, r4, r5, lr}
 801089a:	4d07      	ldr	r5, [pc, #28]	; (80108b8 <_read_r+0x20>)
 801089c:	4604      	mov	r4, r0
 801089e:	4608      	mov	r0, r1
 80108a0:	4611      	mov	r1, r2
 80108a2:	2200      	movs	r2, #0
 80108a4:	602a      	str	r2, [r5, #0]
 80108a6:	461a      	mov	r2, r3
 80108a8:	f7f4 f806 	bl	80048b8 <_read>
 80108ac:	1c43      	adds	r3, r0, #1
 80108ae:	d102      	bne.n	80108b6 <_read_r+0x1e>
 80108b0:	682b      	ldr	r3, [r5, #0]
 80108b2:	b103      	cbz	r3, 80108b6 <_read_r+0x1e>
 80108b4:	6023      	str	r3, [r4, #0]
 80108b6:	bd38      	pop	{r3, r4, r5, pc}
 80108b8:	200025f8 	.word	0x200025f8
 80108bc:	00000000 	.word	0x00000000

080108c0 <nan>:
 80108c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80108c8 <nan+0x8>
 80108c4:	4770      	bx	lr
 80108c6:	bf00      	nop
 80108c8:	00000000 	.word	0x00000000
 80108cc:	7ff80000 	.word	0x7ff80000

080108d0 <__ascii_wctomb>:
 80108d0:	b149      	cbz	r1, 80108e6 <__ascii_wctomb+0x16>
 80108d2:	2aff      	cmp	r2, #255	; 0xff
 80108d4:	bf85      	ittet	hi
 80108d6:	238a      	movhi	r3, #138	; 0x8a
 80108d8:	6003      	strhi	r3, [r0, #0]
 80108da:	700a      	strbls	r2, [r1, #0]
 80108dc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80108e0:	bf98      	it	ls
 80108e2:	2001      	movls	r0, #1
 80108e4:	4770      	bx	lr
 80108e6:	4608      	mov	r0, r1
 80108e8:	4770      	bx	lr
	...

080108ec <__assert_func>:
 80108ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80108ee:	4614      	mov	r4, r2
 80108f0:	461a      	mov	r2, r3
 80108f2:	4b09      	ldr	r3, [pc, #36]	; (8010918 <__assert_func+0x2c>)
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	4605      	mov	r5, r0
 80108f8:	68d8      	ldr	r0, [r3, #12]
 80108fa:	b14c      	cbz	r4, 8010910 <__assert_func+0x24>
 80108fc:	4b07      	ldr	r3, [pc, #28]	; (801091c <__assert_func+0x30>)
 80108fe:	9100      	str	r1, [sp, #0]
 8010900:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010904:	4906      	ldr	r1, [pc, #24]	; (8010920 <__assert_func+0x34>)
 8010906:	462b      	mov	r3, r5
 8010908:	f000 f80e 	bl	8010928 <fiprintf>
 801090c:	f000 f9e2 	bl	8010cd4 <abort>
 8010910:	4b04      	ldr	r3, [pc, #16]	; (8010924 <__assert_func+0x38>)
 8010912:	461c      	mov	r4, r3
 8010914:	e7f3      	b.n	80108fe <__assert_func+0x12>
 8010916:	bf00      	nop
 8010918:	20000178 	.word	0x20000178
 801091c:	08012f4d 	.word	0x08012f4d
 8010920:	08012f5a 	.word	0x08012f5a
 8010924:	08012f88 	.word	0x08012f88

08010928 <fiprintf>:
 8010928:	b40e      	push	{r1, r2, r3}
 801092a:	b503      	push	{r0, r1, lr}
 801092c:	4601      	mov	r1, r0
 801092e:	ab03      	add	r3, sp, #12
 8010930:	4805      	ldr	r0, [pc, #20]	; (8010948 <fiprintf+0x20>)
 8010932:	f853 2b04 	ldr.w	r2, [r3], #4
 8010936:	6800      	ldr	r0, [r0, #0]
 8010938:	9301      	str	r3, [sp, #4]
 801093a:	f000 f89b 	bl	8010a74 <_vfiprintf_r>
 801093e:	b002      	add	sp, #8
 8010940:	f85d eb04 	ldr.w	lr, [sp], #4
 8010944:	b003      	add	sp, #12
 8010946:	4770      	bx	lr
 8010948:	20000178 	.word	0x20000178

0801094c <_fstat_r>:
 801094c:	b538      	push	{r3, r4, r5, lr}
 801094e:	4d07      	ldr	r5, [pc, #28]	; (801096c <_fstat_r+0x20>)
 8010950:	2300      	movs	r3, #0
 8010952:	4604      	mov	r4, r0
 8010954:	4608      	mov	r0, r1
 8010956:	4611      	mov	r1, r2
 8010958:	602b      	str	r3, [r5, #0]
 801095a:	f7f3 fff2 	bl	8004942 <_fstat>
 801095e:	1c43      	adds	r3, r0, #1
 8010960:	d102      	bne.n	8010968 <_fstat_r+0x1c>
 8010962:	682b      	ldr	r3, [r5, #0]
 8010964:	b103      	cbz	r3, 8010968 <_fstat_r+0x1c>
 8010966:	6023      	str	r3, [r4, #0]
 8010968:	bd38      	pop	{r3, r4, r5, pc}
 801096a:	bf00      	nop
 801096c:	200025f8 	.word	0x200025f8

08010970 <_isatty_r>:
 8010970:	b538      	push	{r3, r4, r5, lr}
 8010972:	4d06      	ldr	r5, [pc, #24]	; (801098c <_isatty_r+0x1c>)
 8010974:	2300      	movs	r3, #0
 8010976:	4604      	mov	r4, r0
 8010978:	4608      	mov	r0, r1
 801097a:	602b      	str	r3, [r5, #0]
 801097c:	f7f3 fff1 	bl	8004962 <_isatty>
 8010980:	1c43      	adds	r3, r0, #1
 8010982:	d102      	bne.n	801098a <_isatty_r+0x1a>
 8010984:	682b      	ldr	r3, [r5, #0]
 8010986:	b103      	cbz	r3, 801098a <_isatty_r+0x1a>
 8010988:	6023      	str	r3, [r4, #0]
 801098a:	bd38      	pop	{r3, r4, r5, pc}
 801098c:	200025f8 	.word	0x200025f8

08010990 <memmove>:
 8010990:	4288      	cmp	r0, r1
 8010992:	b510      	push	{r4, lr}
 8010994:	eb01 0402 	add.w	r4, r1, r2
 8010998:	d902      	bls.n	80109a0 <memmove+0x10>
 801099a:	4284      	cmp	r4, r0
 801099c:	4623      	mov	r3, r4
 801099e:	d807      	bhi.n	80109b0 <memmove+0x20>
 80109a0:	1e43      	subs	r3, r0, #1
 80109a2:	42a1      	cmp	r1, r4
 80109a4:	d008      	beq.n	80109b8 <memmove+0x28>
 80109a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80109aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80109ae:	e7f8      	b.n	80109a2 <memmove+0x12>
 80109b0:	4402      	add	r2, r0
 80109b2:	4601      	mov	r1, r0
 80109b4:	428a      	cmp	r2, r1
 80109b6:	d100      	bne.n	80109ba <memmove+0x2a>
 80109b8:	bd10      	pop	{r4, pc}
 80109ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80109be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80109c2:	e7f7      	b.n	80109b4 <memmove+0x24>

080109c4 <_realloc_r>:
 80109c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109c8:	4680      	mov	r8, r0
 80109ca:	4614      	mov	r4, r2
 80109cc:	460e      	mov	r6, r1
 80109ce:	b921      	cbnz	r1, 80109da <_realloc_r+0x16>
 80109d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80109d4:	4611      	mov	r1, r2
 80109d6:	f7fb bcd1 	b.w	800c37c <_malloc_r>
 80109da:	b92a      	cbnz	r2, 80109e8 <_realloc_r+0x24>
 80109dc:	f7fb fc62 	bl	800c2a4 <_free_r>
 80109e0:	4625      	mov	r5, r4
 80109e2:	4628      	mov	r0, r5
 80109e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109e8:	f000 f97b 	bl	8010ce2 <_malloc_usable_size_r>
 80109ec:	4284      	cmp	r4, r0
 80109ee:	4607      	mov	r7, r0
 80109f0:	d802      	bhi.n	80109f8 <_realloc_r+0x34>
 80109f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80109f6:	d812      	bhi.n	8010a1e <_realloc_r+0x5a>
 80109f8:	4621      	mov	r1, r4
 80109fa:	4640      	mov	r0, r8
 80109fc:	f7fb fcbe 	bl	800c37c <_malloc_r>
 8010a00:	4605      	mov	r5, r0
 8010a02:	2800      	cmp	r0, #0
 8010a04:	d0ed      	beq.n	80109e2 <_realloc_r+0x1e>
 8010a06:	42bc      	cmp	r4, r7
 8010a08:	4622      	mov	r2, r4
 8010a0a:	4631      	mov	r1, r6
 8010a0c:	bf28      	it	cs
 8010a0e:	463a      	movcs	r2, r7
 8010a10:	f7fb fc32 	bl	800c278 <memcpy>
 8010a14:	4631      	mov	r1, r6
 8010a16:	4640      	mov	r0, r8
 8010a18:	f7fb fc44 	bl	800c2a4 <_free_r>
 8010a1c:	e7e1      	b.n	80109e2 <_realloc_r+0x1e>
 8010a1e:	4635      	mov	r5, r6
 8010a20:	e7df      	b.n	80109e2 <_realloc_r+0x1e>

08010a22 <__sfputc_r>:
 8010a22:	6893      	ldr	r3, [r2, #8]
 8010a24:	3b01      	subs	r3, #1
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	b410      	push	{r4}
 8010a2a:	6093      	str	r3, [r2, #8]
 8010a2c:	da08      	bge.n	8010a40 <__sfputc_r+0x1e>
 8010a2e:	6994      	ldr	r4, [r2, #24]
 8010a30:	42a3      	cmp	r3, r4
 8010a32:	db01      	blt.n	8010a38 <__sfputc_r+0x16>
 8010a34:	290a      	cmp	r1, #10
 8010a36:	d103      	bne.n	8010a40 <__sfputc_r+0x1e>
 8010a38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a3c:	f7fd bbd8 	b.w	800e1f0 <__swbuf_r>
 8010a40:	6813      	ldr	r3, [r2, #0]
 8010a42:	1c58      	adds	r0, r3, #1
 8010a44:	6010      	str	r0, [r2, #0]
 8010a46:	7019      	strb	r1, [r3, #0]
 8010a48:	4608      	mov	r0, r1
 8010a4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a4e:	4770      	bx	lr

08010a50 <__sfputs_r>:
 8010a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a52:	4606      	mov	r6, r0
 8010a54:	460f      	mov	r7, r1
 8010a56:	4614      	mov	r4, r2
 8010a58:	18d5      	adds	r5, r2, r3
 8010a5a:	42ac      	cmp	r4, r5
 8010a5c:	d101      	bne.n	8010a62 <__sfputs_r+0x12>
 8010a5e:	2000      	movs	r0, #0
 8010a60:	e007      	b.n	8010a72 <__sfputs_r+0x22>
 8010a62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a66:	463a      	mov	r2, r7
 8010a68:	4630      	mov	r0, r6
 8010a6a:	f7ff ffda 	bl	8010a22 <__sfputc_r>
 8010a6e:	1c43      	adds	r3, r0, #1
 8010a70:	d1f3      	bne.n	8010a5a <__sfputs_r+0xa>
 8010a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010a74 <_vfiprintf_r>:
 8010a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a78:	460d      	mov	r5, r1
 8010a7a:	b09d      	sub	sp, #116	; 0x74
 8010a7c:	4614      	mov	r4, r2
 8010a7e:	4698      	mov	r8, r3
 8010a80:	4606      	mov	r6, r0
 8010a82:	b118      	cbz	r0, 8010a8c <_vfiprintf_r+0x18>
 8010a84:	6983      	ldr	r3, [r0, #24]
 8010a86:	b90b      	cbnz	r3, 8010a8c <_vfiprintf_r+0x18>
 8010a88:	f7fe fc2a 	bl	800f2e0 <__sinit>
 8010a8c:	4b89      	ldr	r3, [pc, #548]	; (8010cb4 <_vfiprintf_r+0x240>)
 8010a8e:	429d      	cmp	r5, r3
 8010a90:	d11b      	bne.n	8010aca <_vfiprintf_r+0x56>
 8010a92:	6875      	ldr	r5, [r6, #4]
 8010a94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010a96:	07d9      	lsls	r1, r3, #31
 8010a98:	d405      	bmi.n	8010aa6 <_vfiprintf_r+0x32>
 8010a9a:	89ab      	ldrh	r3, [r5, #12]
 8010a9c:	059a      	lsls	r2, r3, #22
 8010a9e:	d402      	bmi.n	8010aa6 <_vfiprintf_r+0x32>
 8010aa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010aa2:	f7ff f82e 	bl	800fb02 <__retarget_lock_acquire_recursive>
 8010aa6:	89ab      	ldrh	r3, [r5, #12]
 8010aa8:	071b      	lsls	r3, r3, #28
 8010aaa:	d501      	bpl.n	8010ab0 <_vfiprintf_r+0x3c>
 8010aac:	692b      	ldr	r3, [r5, #16]
 8010aae:	b9eb      	cbnz	r3, 8010aec <_vfiprintf_r+0x78>
 8010ab0:	4629      	mov	r1, r5
 8010ab2:	4630      	mov	r0, r6
 8010ab4:	f7fd fc00 	bl	800e2b8 <__swsetup_r>
 8010ab8:	b1c0      	cbz	r0, 8010aec <_vfiprintf_r+0x78>
 8010aba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010abc:	07dc      	lsls	r4, r3, #31
 8010abe:	d50e      	bpl.n	8010ade <_vfiprintf_r+0x6a>
 8010ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010ac4:	b01d      	add	sp, #116	; 0x74
 8010ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010aca:	4b7b      	ldr	r3, [pc, #492]	; (8010cb8 <_vfiprintf_r+0x244>)
 8010acc:	429d      	cmp	r5, r3
 8010ace:	d101      	bne.n	8010ad4 <_vfiprintf_r+0x60>
 8010ad0:	68b5      	ldr	r5, [r6, #8]
 8010ad2:	e7df      	b.n	8010a94 <_vfiprintf_r+0x20>
 8010ad4:	4b79      	ldr	r3, [pc, #484]	; (8010cbc <_vfiprintf_r+0x248>)
 8010ad6:	429d      	cmp	r5, r3
 8010ad8:	bf08      	it	eq
 8010ada:	68f5      	ldreq	r5, [r6, #12]
 8010adc:	e7da      	b.n	8010a94 <_vfiprintf_r+0x20>
 8010ade:	89ab      	ldrh	r3, [r5, #12]
 8010ae0:	0598      	lsls	r0, r3, #22
 8010ae2:	d4ed      	bmi.n	8010ac0 <_vfiprintf_r+0x4c>
 8010ae4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010ae6:	f7ff f80d 	bl	800fb04 <__retarget_lock_release_recursive>
 8010aea:	e7e9      	b.n	8010ac0 <_vfiprintf_r+0x4c>
 8010aec:	2300      	movs	r3, #0
 8010aee:	9309      	str	r3, [sp, #36]	; 0x24
 8010af0:	2320      	movs	r3, #32
 8010af2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010af6:	f8cd 800c 	str.w	r8, [sp, #12]
 8010afa:	2330      	movs	r3, #48	; 0x30
 8010afc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010cc0 <_vfiprintf_r+0x24c>
 8010b00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010b04:	f04f 0901 	mov.w	r9, #1
 8010b08:	4623      	mov	r3, r4
 8010b0a:	469a      	mov	sl, r3
 8010b0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b10:	b10a      	cbz	r2, 8010b16 <_vfiprintf_r+0xa2>
 8010b12:	2a25      	cmp	r2, #37	; 0x25
 8010b14:	d1f9      	bne.n	8010b0a <_vfiprintf_r+0x96>
 8010b16:	ebba 0b04 	subs.w	fp, sl, r4
 8010b1a:	d00b      	beq.n	8010b34 <_vfiprintf_r+0xc0>
 8010b1c:	465b      	mov	r3, fp
 8010b1e:	4622      	mov	r2, r4
 8010b20:	4629      	mov	r1, r5
 8010b22:	4630      	mov	r0, r6
 8010b24:	f7ff ff94 	bl	8010a50 <__sfputs_r>
 8010b28:	3001      	adds	r0, #1
 8010b2a:	f000 80aa 	beq.w	8010c82 <_vfiprintf_r+0x20e>
 8010b2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010b30:	445a      	add	r2, fp
 8010b32:	9209      	str	r2, [sp, #36]	; 0x24
 8010b34:	f89a 3000 	ldrb.w	r3, [sl]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	f000 80a2 	beq.w	8010c82 <_vfiprintf_r+0x20e>
 8010b3e:	2300      	movs	r3, #0
 8010b40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010b44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b48:	f10a 0a01 	add.w	sl, sl, #1
 8010b4c:	9304      	str	r3, [sp, #16]
 8010b4e:	9307      	str	r3, [sp, #28]
 8010b50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010b54:	931a      	str	r3, [sp, #104]	; 0x68
 8010b56:	4654      	mov	r4, sl
 8010b58:	2205      	movs	r2, #5
 8010b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b5e:	4858      	ldr	r0, [pc, #352]	; (8010cc0 <_vfiprintf_r+0x24c>)
 8010b60:	f7ef fb4e 	bl	8000200 <memchr>
 8010b64:	9a04      	ldr	r2, [sp, #16]
 8010b66:	b9d8      	cbnz	r0, 8010ba0 <_vfiprintf_r+0x12c>
 8010b68:	06d1      	lsls	r1, r2, #27
 8010b6a:	bf44      	itt	mi
 8010b6c:	2320      	movmi	r3, #32
 8010b6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b72:	0713      	lsls	r3, r2, #28
 8010b74:	bf44      	itt	mi
 8010b76:	232b      	movmi	r3, #43	; 0x2b
 8010b78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8010b80:	2b2a      	cmp	r3, #42	; 0x2a
 8010b82:	d015      	beq.n	8010bb0 <_vfiprintf_r+0x13c>
 8010b84:	9a07      	ldr	r2, [sp, #28]
 8010b86:	4654      	mov	r4, sl
 8010b88:	2000      	movs	r0, #0
 8010b8a:	f04f 0c0a 	mov.w	ip, #10
 8010b8e:	4621      	mov	r1, r4
 8010b90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b94:	3b30      	subs	r3, #48	; 0x30
 8010b96:	2b09      	cmp	r3, #9
 8010b98:	d94e      	bls.n	8010c38 <_vfiprintf_r+0x1c4>
 8010b9a:	b1b0      	cbz	r0, 8010bca <_vfiprintf_r+0x156>
 8010b9c:	9207      	str	r2, [sp, #28]
 8010b9e:	e014      	b.n	8010bca <_vfiprintf_r+0x156>
 8010ba0:	eba0 0308 	sub.w	r3, r0, r8
 8010ba4:	fa09 f303 	lsl.w	r3, r9, r3
 8010ba8:	4313      	orrs	r3, r2
 8010baa:	9304      	str	r3, [sp, #16]
 8010bac:	46a2      	mov	sl, r4
 8010bae:	e7d2      	b.n	8010b56 <_vfiprintf_r+0xe2>
 8010bb0:	9b03      	ldr	r3, [sp, #12]
 8010bb2:	1d19      	adds	r1, r3, #4
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	9103      	str	r1, [sp, #12]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	bfbb      	ittet	lt
 8010bbc:	425b      	neglt	r3, r3
 8010bbe:	f042 0202 	orrlt.w	r2, r2, #2
 8010bc2:	9307      	strge	r3, [sp, #28]
 8010bc4:	9307      	strlt	r3, [sp, #28]
 8010bc6:	bfb8      	it	lt
 8010bc8:	9204      	strlt	r2, [sp, #16]
 8010bca:	7823      	ldrb	r3, [r4, #0]
 8010bcc:	2b2e      	cmp	r3, #46	; 0x2e
 8010bce:	d10c      	bne.n	8010bea <_vfiprintf_r+0x176>
 8010bd0:	7863      	ldrb	r3, [r4, #1]
 8010bd2:	2b2a      	cmp	r3, #42	; 0x2a
 8010bd4:	d135      	bne.n	8010c42 <_vfiprintf_r+0x1ce>
 8010bd6:	9b03      	ldr	r3, [sp, #12]
 8010bd8:	1d1a      	adds	r2, r3, #4
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	9203      	str	r2, [sp, #12]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	bfb8      	it	lt
 8010be2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010be6:	3402      	adds	r4, #2
 8010be8:	9305      	str	r3, [sp, #20]
 8010bea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010cd0 <_vfiprintf_r+0x25c>
 8010bee:	7821      	ldrb	r1, [r4, #0]
 8010bf0:	2203      	movs	r2, #3
 8010bf2:	4650      	mov	r0, sl
 8010bf4:	f7ef fb04 	bl	8000200 <memchr>
 8010bf8:	b140      	cbz	r0, 8010c0c <_vfiprintf_r+0x198>
 8010bfa:	2340      	movs	r3, #64	; 0x40
 8010bfc:	eba0 000a 	sub.w	r0, r0, sl
 8010c00:	fa03 f000 	lsl.w	r0, r3, r0
 8010c04:	9b04      	ldr	r3, [sp, #16]
 8010c06:	4303      	orrs	r3, r0
 8010c08:	3401      	adds	r4, #1
 8010c0a:	9304      	str	r3, [sp, #16]
 8010c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c10:	482c      	ldr	r0, [pc, #176]	; (8010cc4 <_vfiprintf_r+0x250>)
 8010c12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010c16:	2206      	movs	r2, #6
 8010c18:	f7ef faf2 	bl	8000200 <memchr>
 8010c1c:	2800      	cmp	r0, #0
 8010c1e:	d03f      	beq.n	8010ca0 <_vfiprintf_r+0x22c>
 8010c20:	4b29      	ldr	r3, [pc, #164]	; (8010cc8 <_vfiprintf_r+0x254>)
 8010c22:	bb1b      	cbnz	r3, 8010c6c <_vfiprintf_r+0x1f8>
 8010c24:	9b03      	ldr	r3, [sp, #12]
 8010c26:	3307      	adds	r3, #7
 8010c28:	f023 0307 	bic.w	r3, r3, #7
 8010c2c:	3308      	adds	r3, #8
 8010c2e:	9303      	str	r3, [sp, #12]
 8010c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c32:	443b      	add	r3, r7
 8010c34:	9309      	str	r3, [sp, #36]	; 0x24
 8010c36:	e767      	b.n	8010b08 <_vfiprintf_r+0x94>
 8010c38:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c3c:	460c      	mov	r4, r1
 8010c3e:	2001      	movs	r0, #1
 8010c40:	e7a5      	b.n	8010b8e <_vfiprintf_r+0x11a>
 8010c42:	2300      	movs	r3, #0
 8010c44:	3401      	adds	r4, #1
 8010c46:	9305      	str	r3, [sp, #20]
 8010c48:	4619      	mov	r1, r3
 8010c4a:	f04f 0c0a 	mov.w	ip, #10
 8010c4e:	4620      	mov	r0, r4
 8010c50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c54:	3a30      	subs	r2, #48	; 0x30
 8010c56:	2a09      	cmp	r2, #9
 8010c58:	d903      	bls.n	8010c62 <_vfiprintf_r+0x1ee>
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d0c5      	beq.n	8010bea <_vfiprintf_r+0x176>
 8010c5e:	9105      	str	r1, [sp, #20]
 8010c60:	e7c3      	b.n	8010bea <_vfiprintf_r+0x176>
 8010c62:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c66:	4604      	mov	r4, r0
 8010c68:	2301      	movs	r3, #1
 8010c6a:	e7f0      	b.n	8010c4e <_vfiprintf_r+0x1da>
 8010c6c:	ab03      	add	r3, sp, #12
 8010c6e:	9300      	str	r3, [sp, #0]
 8010c70:	462a      	mov	r2, r5
 8010c72:	4b16      	ldr	r3, [pc, #88]	; (8010ccc <_vfiprintf_r+0x258>)
 8010c74:	a904      	add	r1, sp, #16
 8010c76:	4630      	mov	r0, r6
 8010c78:	f7fb fc94 	bl	800c5a4 <_printf_float>
 8010c7c:	4607      	mov	r7, r0
 8010c7e:	1c78      	adds	r0, r7, #1
 8010c80:	d1d6      	bne.n	8010c30 <_vfiprintf_r+0x1bc>
 8010c82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010c84:	07d9      	lsls	r1, r3, #31
 8010c86:	d405      	bmi.n	8010c94 <_vfiprintf_r+0x220>
 8010c88:	89ab      	ldrh	r3, [r5, #12]
 8010c8a:	059a      	lsls	r2, r3, #22
 8010c8c:	d402      	bmi.n	8010c94 <_vfiprintf_r+0x220>
 8010c8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010c90:	f7fe ff38 	bl	800fb04 <__retarget_lock_release_recursive>
 8010c94:	89ab      	ldrh	r3, [r5, #12]
 8010c96:	065b      	lsls	r3, r3, #25
 8010c98:	f53f af12 	bmi.w	8010ac0 <_vfiprintf_r+0x4c>
 8010c9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010c9e:	e711      	b.n	8010ac4 <_vfiprintf_r+0x50>
 8010ca0:	ab03      	add	r3, sp, #12
 8010ca2:	9300      	str	r3, [sp, #0]
 8010ca4:	462a      	mov	r2, r5
 8010ca6:	4b09      	ldr	r3, [pc, #36]	; (8010ccc <_vfiprintf_r+0x258>)
 8010ca8:	a904      	add	r1, sp, #16
 8010caa:	4630      	mov	r0, r6
 8010cac:	f7fb ff1e 	bl	800caec <_printf_i>
 8010cb0:	e7e4      	b.n	8010c7c <_vfiprintf_r+0x208>
 8010cb2:	bf00      	nop
 8010cb4:	08012d28 	.word	0x08012d28
 8010cb8:	08012d48 	.word	0x08012d48
 8010cbc:	08012d08 	.word	0x08012d08
 8010cc0:	08012f3c 	.word	0x08012f3c
 8010cc4:	08012f46 	.word	0x08012f46
 8010cc8:	0800c5a5 	.word	0x0800c5a5
 8010ccc:	08010a51 	.word	0x08010a51
 8010cd0:	08012f42 	.word	0x08012f42

08010cd4 <abort>:
 8010cd4:	b508      	push	{r3, lr}
 8010cd6:	2006      	movs	r0, #6
 8010cd8:	f000 f834 	bl	8010d44 <raise>
 8010cdc:	2001      	movs	r0, #1
 8010cde:	f7f3 fde1 	bl	80048a4 <_exit>

08010ce2 <_malloc_usable_size_r>:
 8010ce2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ce6:	1f18      	subs	r0, r3, #4
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	bfbc      	itt	lt
 8010cec:	580b      	ldrlt	r3, [r1, r0]
 8010cee:	18c0      	addlt	r0, r0, r3
 8010cf0:	4770      	bx	lr

08010cf2 <_raise_r>:
 8010cf2:	291f      	cmp	r1, #31
 8010cf4:	b538      	push	{r3, r4, r5, lr}
 8010cf6:	4604      	mov	r4, r0
 8010cf8:	460d      	mov	r5, r1
 8010cfa:	d904      	bls.n	8010d06 <_raise_r+0x14>
 8010cfc:	2316      	movs	r3, #22
 8010cfe:	6003      	str	r3, [r0, #0]
 8010d00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010d04:	bd38      	pop	{r3, r4, r5, pc}
 8010d06:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010d08:	b112      	cbz	r2, 8010d10 <_raise_r+0x1e>
 8010d0a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010d0e:	b94b      	cbnz	r3, 8010d24 <_raise_r+0x32>
 8010d10:	4620      	mov	r0, r4
 8010d12:	f000 f831 	bl	8010d78 <_getpid_r>
 8010d16:	462a      	mov	r2, r5
 8010d18:	4601      	mov	r1, r0
 8010d1a:	4620      	mov	r0, r4
 8010d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d20:	f000 b818 	b.w	8010d54 <_kill_r>
 8010d24:	2b01      	cmp	r3, #1
 8010d26:	d00a      	beq.n	8010d3e <_raise_r+0x4c>
 8010d28:	1c59      	adds	r1, r3, #1
 8010d2a:	d103      	bne.n	8010d34 <_raise_r+0x42>
 8010d2c:	2316      	movs	r3, #22
 8010d2e:	6003      	str	r3, [r0, #0]
 8010d30:	2001      	movs	r0, #1
 8010d32:	e7e7      	b.n	8010d04 <_raise_r+0x12>
 8010d34:	2400      	movs	r4, #0
 8010d36:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010d3a:	4628      	mov	r0, r5
 8010d3c:	4798      	blx	r3
 8010d3e:	2000      	movs	r0, #0
 8010d40:	e7e0      	b.n	8010d04 <_raise_r+0x12>
	...

08010d44 <raise>:
 8010d44:	4b02      	ldr	r3, [pc, #8]	; (8010d50 <raise+0xc>)
 8010d46:	4601      	mov	r1, r0
 8010d48:	6818      	ldr	r0, [r3, #0]
 8010d4a:	f7ff bfd2 	b.w	8010cf2 <_raise_r>
 8010d4e:	bf00      	nop
 8010d50:	20000178 	.word	0x20000178

08010d54 <_kill_r>:
 8010d54:	b538      	push	{r3, r4, r5, lr}
 8010d56:	4d07      	ldr	r5, [pc, #28]	; (8010d74 <_kill_r+0x20>)
 8010d58:	2300      	movs	r3, #0
 8010d5a:	4604      	mov	r4, r0
 8010d5c:	4608      	mov	r0, r1
 8010d5e:	4611      	mov	r1, r2
 8010d60:	602b      	str	r3, [r5, #0]
 8010d62:	f7f3 fd8f 	bl	8004884 <_kill>
 8010d66:	1c43      	adds	r3, r0, #1
 8010d68:	d102      	bne.n	8010d70 <_kill_r+0x1c>
 8010d6a:	682b      	ldr	r3, [r5, #0]
 8010d6c:	b103      	cbz	r3, 8010d70 <_kill_r+0x1c>
 8010d6e:	6023      	str	r3, [r4, #0]
 8010d70:	bd38      	pop	{r3, r4, r5, pc}
 8010d72:	bf00      	nop
 8010d74:	200025f8 	.word	0x200025f8

08010d78 <_getpid_r>:
 8010d78:	f7f3 bd7c 	b.w	8004874 <_getpid>

08010d7c <_init>:
 8010d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d7e:	bf00      	nop
 8010d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d82:	bc08      	pop	{r3}
 8010d84:	469e      	mov	lr, r3
 8010d86:	4770      	bx	lr

08010d88 <_fini>:
 8010d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d8a:	bf00      	nop
 8010d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d8e:	bc08      	pop	{r3}
 8010d90:	469e      	mov	lr, r3
 8010d92:	4770      	bx	lr
